uint64_t sub_100003E30()
{
  uint64_t v0;

  sub_100006CE8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

id sub_100003E54@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)AKCustodianController), "init");
  a1[3] = &type metadata for CustodianIDMSRequestManager;
  *a1 = result;
  return result;
}

uint64_t sub_100003E98@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = a1(0);
  result = swift_allocObject(v3, 16, 7);
  a2[3] = v3;
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AAAppleIDAuthenticationController()
{
  return objc_opt_self(_TtC13appleaccountd33AAAppleIDAuthenticationController);
}

uint64_t sub_100003F18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage;
  v2 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianFetcher;
  v4 = sub_1000080B4((uint64_t *)&unk_10028E818);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController;
  v6 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100003FC4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

void sub_100004034(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&qword_10028E888, AATrustedContact_ptr);
}

void sub_10000405C(objc_class *a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5)
{
  Class isa;
  uint64_t v8;
  id v9;

  isa = a1;
  if (a1)
  {
    sub_1000067D4(0, a4, a5);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2)
    v8 = _convertErrorToNSError(_:)(a2);
  else
    v8 = 0;
  v9 = (id)v8;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

}

uint64_t sub_1000040E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = type metadata accessor for RecoveryFactorsController(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028E2B0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4(&qword_10028C8D0);
  result = Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for RecoveryFactorsController(uint64_t a1)
{
  uint64_t result;

  result = qword_100290380;
  if (!qword_100290380)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RecoveryFactorsController);
  return result;
}

uint64_t sub_1000041FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__setupFinalizationHandler;
  v2 = sub_1000080B4(&qword_100293520);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__authController;
  v4 = sub_1000080B4(&qword_100293528);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore;
  v6 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000042D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1[26] = v0;
  v2 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v1[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[28] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[29] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v5);
  v1[31] = swift_task_alloc(v5);
  v6 = type metadata accessor for CustodianRecord(0);
  v1[32] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[33] = v7;
  v1[34] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_10028E8C8);
  v1[35] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[36] = v9;
  v1[37] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028C448);
  v1[38] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[39] = v11;
  v1[40] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028FA50);
  v1[41] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[42] = v13;
  v1[43] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100004CC0, 0, 0);
}

uint64_t type metadata accessor for CustodianRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F128;
  if (!qword_10028F128)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecord);
  return result;
}

uint64_t sub_10000444C()
{
  uint64_t v0;

  sub_100004470();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100004470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController;
  v4 = sub_1000080B4(&qword_10028CCE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage;
  v6 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__idmsRequestController;
  v8 = sub_1000080B4(&qword_10028CD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__storageController;
  v10 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__messenger;
  v12 = sub_1000080B4(&qword_10028CCC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage;
  v14 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController;
  v16 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__urlBagProvider;
  v18 = sub_1000080B4(&qword_10028CCE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__followUpController;
  v20 = sub_1000080B4(&qword_10028CD60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsEventFactory;
  v22 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter;
  v24 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair____lazy_storage___custodianDefaults));

  return v0;
}

id sub_1000046BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id result;

  v2 = type metadata accessor for DaemonAccountStore();
  v3 = swift_allocObject(v2, 32, 7);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v3 + 16) = result;
    result = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    *(_QWORD *)(v3 + 24) = result;
    a1[3] = v2;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for DaemonAccountStore()
{
  return objc_opt_self(_TtC13appleaccountd18DaemonAccountStore);
}

uint64_t sub_100004934(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1000080B4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100004970@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = a1(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = a2();
  a3[3] = v5;
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for DaemonCustodianIdMSConfirmationHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100293340;
  if (!qword_100293340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonCustodianIdMSConfirmationHandler);
  return result;
}

_QWORD *sub_1000049FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v1 = v0;
  v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  v14 = sub_100007764();
  static DispatchQoS.unspecified.getter(v14);
  v23 = &_swiftEmptyArrayStorage;
  v15 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_1000080B4(&qword_10028B9F0);
  v17 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v6, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000046, 0x800000010020D920, v13, v9, v5, 0);
  v18 = sub_1000080B4(&qword_100293358);
  Dependency.init(dependencyId:config:)(0, 0, 0, v18);
  v19 = sub_1000080B4(&qword_100297770);
  Dependency.init(dependencyId:config:)(0, 0, 0, v19);
  v20 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v20);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;
  return v1;
}

uint64_t sub_100004C78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for CustodianKeyRepair(uint64_t a1)
{
  return sub_100004C78(a1, qword_10028C848, (uint64_t)&nominal type descriptor for CustodianKeyRepair);
}

uint64_t sub_100004CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore, v3);
  Dependency.wrappedValue.getter((_QWORD *)(v0 + 16), v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40)) + 16), "aa_primaryAppleAccount");

  sub_100006F58((_QWORD *)(v0 + 16));
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 304);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v7);
    Dependency.wrappedValue.getter((_QWORD *)(v0 + 136), v7);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v8 = *sub_10000732C((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 352) = v9;
    v10 = sub_1000080B4(&qword_100295C60);
    *v9 = v0;
    v9[1] = sub_100192A44;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 176, 0, 0, 0xD000000000000011, 0x800000010020EDC0, sub_100197068, v8, v10);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A89D8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not logged in to AppleAccount, unable to fetch", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v18 = v17;
    *(_QWORD *)(v0 + 184) = -7002;
    v19 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v20 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v21 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 192), v0 + 184, v19, v18, v20);
    swift_willThrow(v21);
    v22 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 296);
    v24 = *(_QWORD *)(v0 + 272);
    v26 = *(_QWORD *)(v0 + 240);
    v25 = *(_QWORD *)(v0 + 248);
    v27 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_100004FD0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_100005014(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C038);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1001E09F4(v7, (uint64_t)&v16);
    v8 = v16;
    v9 = v17;
    result = sub_10006A644(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000080F4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for AACustodianError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3C0, (uint64_t)&unk_10025EE48);
}

uint64_t sub_100005150(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100005190(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000051D0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000051FC(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10009D400(v4 + v10, *(void (**)(uint64_t, uint64_t))(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(_QWORD *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFF8)), a1, a2, a3, a4);
}

uint64_t sub_100005288(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1000052A0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000052B0(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000052B0(uint64_t a1, char a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[4];

  v9 = sub_1000080B4(&qword_10028FA50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v43 = v24;
      *(_DWORD *)v23 = 136315138;
      v41 = a1;
      swift_errorRetain(a1);
      v25 = sub_1000080B4(&qword_10028E850);
      v26 = String.init<A>(describing:)(&v41, v25);
      v27 = a3;
      v29 = v28;
      v41 = sub_1001DEF4C(v26, v28, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      v30 = v29;
      a3 = v27;
      swift_bridgeObjectRelease(v30);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error fetching BeneficiaryInfoRecords : %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1, 1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController__accountStore, v9);
    swift_bridgeObjectRetain(a1);
    Dependency.wrappedValue.getter(&v43, v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v14 = objc_msgSend(*(id *)(*sub_10000732C(&v43, v44[2]) + 16), "aa_primaryAppleAccount");
    v15 = v14;
    if (v14)
    {
      v16 = objc_msgSend(v14, "aa_altDSID");

      if (v16)
      {
        v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v15 = v18;

      }
      else
      {
        v17 = 0;
        v15 = 0;
      }
    }
    else
    {
      v17 = 0;
    }
    sub_100006F58(&v43);
    sub_1000057BC(a1, 0);
    v32 = sub_1000D0F6C(a1, v17, (uint64_t)v15);
    swift_bridgeObjectRelease(v15);
    sub_1000057B0(a1, 0);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89F0);
    swift_bridgeObjectRetain(v32);
    sub_1000057BC(a1, 0);
    v34 = swift_bridgeObjectRetain(v32);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      *(_DWORD *)v37 = 134218240;
      v38 = *(_QWORD *)(a1 + 16);
      sub_1000057B0(a1, 0);
      v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      sub_1000057B0(a1, 0);
      *(_WORD *)(v37 + 12) = 2048;
      v39 = v32[2];
      swift_bridgeObjectRelease(v32);
      v43 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully fetched %ld\nBeneficiaryInfoRecords of which %ld are beneficiaries", (uint8_t *)v37, 0x16u);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease(v32);
      sub_1000057B0(a1, 0);
      sub_1000057B0(a1, 0);

      swift_bridgeObjectRelease(v32);
    }
    a3(v32, 0);
    return swift_bridgeObjectRelease(v32);
  }
}

uint64_t sub_1000057B0(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1000057BC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1000057C8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000057D4(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000057D4(uint64_t a1, char a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSUUID v26;
  NSString v27;
  char *v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  id v58;
  Class isa;
  id v60;
  id v61;
  Class v62;
  NSString v63;
  NSString v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v76[2];
  void (*v77)(void *, uint64_t);
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89[5];
  _QWORD *v90;

  v8 = type metadata accessor for UUID(0);
  v82 = *(_QWORD *)(v8 - 8);
  v83 = v8;
  __chkstk_darwin(v8, v9);
  v78 = (char *)v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = *(_QWORD *)(v79 - 8);
  v13 = __chkstk_darwin(v79, v12);
  v15 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)v76 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v67 = type metadata accessor for Logger(0);
    sub_100005288(v67, (uint64_t)qword_1002A89F0);
    v68 = swift_errorRetain(a1);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(12, -1);
      v72 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v71 = 138412290;
      v73 = _convertErrorToNSError(_:)(a1);
      v88 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89);
      *v72 = v73;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Error fetching beneficiaries from storage: %@", v71, 0xCu);
      v74 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v72, 1, v74);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v76[1] = a4;
    v77 = a3;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = &_swiftEmptyArrayStorage;
    if (v19)
    {
      v90 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v19);
      v87 = 0;
      v21 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v84 = *(_QWORD *)(v11 + 72);
      v22 = v79;
      v85 = v18;
      do
      {
        sub_100027FE8(v21, (uint64_t)v18, type metadata accessor for BeneficiaryInfoRecord);
        sub_100027FE8((uint64_t)v18, (uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
        v26.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        v27 = String._bridgeToObjectiveC()();
        v28 = &v15[*(int *)(v22 + 20)];
        v29 = *((_QWORD *)v28 + 1);
        if (v29)
        {
          swift_bridgeObjectRetain(*((_QWORD *)v28 + 1));
          v30 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v29);
        }
        else
        {
          v30 = 0;
        }
        v31 = v87;
        v32 = objc_msgSend(objc_allocWithZone((Class)AABeneficiaryInfo), "initWithBeneficiaryID:benefactorAltDSID:handle:", v26.super.isa, v27, v30);

        v33 = (uint64_t *)&v15[*(int *)(v22 + 28)];
        v34 = *v33;
        v35 = v33[1];
        v36 = type metadata accessor for JSONDecoder(0);
        swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
        v37 = v32;
        v38 = sub_10000F450(v34, v35);
        v39 = JSONDecoder.init()(v38);
        v40 = sub_10000F568();
        dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v88, &type metadata for InheritanceAccessKeyRecord, v34, v35, &type metadata for InheritanceAccessKeyRecord, v40);
        if (v31)
        {
          swift_errorRelease(v31);
          swift_release(v39);
          if (qword_10028ADD0 != -1)
            swift_once(&qword_10028ADD0, sub_100046D50);
          v41 = type metadata accessor for Logger(0);
          v42 = sub_100005288(v41, (uint64_t)qword_1002A89F0);
          v43 = Logger.logObject.getter(v42);
          v44 = static os_log_type_t.error.getter();
          v45 = os_log_type_enabled(v43, v44);
          v18 = v85;
          if (v45)
          {
            v46 = (uint8_t *)swift_slowAlloc(2, -1);
            v87 = v21;
            v47 = v15;
            v48 = v19;
            v49 = v22;
            v50 = v37;
            v51 = v46;
            *(_WORD *)v46 = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to decode jsonData to InheritanceAccessKeyRecord", v46, 2u);
            v52 = v51;
            v37 = v50;
            v22 = v49;
            v19 = v48;
            v15 = v47;
            v21 = v87;
            swift_slowDealloc(v52, -1, -1);
          }
          sub_10000F494(v34, v35);

          v87 = 0;
        }
        else
        {
          v87 = 0;
          sub_10000F494(v34, v35);
          swift_release(v39);
          v86 = v37;
          v53 = v88;
          v54 = v89[0];
          v55 = v89[2];
          v56 = v89[4];
          v80 = v89[1];
          v81 = v89[3];
          sub_10000F450(v88, v89[0]);
          swift_bridgeObjectRetain(v55);
          swift_bridgeObjectRetain(v56);
          sub_10000F494(v53, v54);
          swift_bridgeObjectRelease(v56);
          swift_bridgeObjectRelease(v55);
          v57 = v78;
          (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v78, v15, v83);
          v58 = objc_allocWithZone((Class)AKInheritanceAccessKey);
          sub_10000F450(v53, v54);
          swift_bridgeObjectRetain(v55);
          swift_bridgeObjectRetain(v56);
          isa = UUID._bridgeToObjectiveC()().super.isa;
          v60 = objc_msgSend(v58, "initWithBeneficiairyIdentifier:", isa);

          v61 = v60;
          v62 = Data._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v61, "setWrappingKeyData:", v62);

          v63 = String._bridgeToObjectiveC()();
          objc_msgSend(v61, "setWrappingKeyString:", v63);

          v64 = String._bridgeToObjectiveC()();
          objc_msgSend(v61, "setClaimTokenString:", v64);

          sub_10000F494(v53, v54);
          swift_bridgeObjectRelease(v56);
          swift_bridgeObjectRelease(v55);
          (*(void (**)(char *, uint64_t))(v82 + 8))(v57, v83);
          objc_msgSend(v86, "setAccessKey:", v61);
          v65 = v53;
          v37 = v86;
          v66 = v54;
          v22 = v79;
          sub_10000F494(v65, v66);

          swift_bridgeObjectRelease(v56);
          swift_bridgeObjectRelease(v55);
          v18 = v85;
        }
        sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
        v23 = sub_100028388((uint64_t)v18, type metadata accessor for BeneficiaryInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
        v24 = v90[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
        v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v37);
        specialized ContiguousArray._endMutation()(v25);
        v21 += v84;
        --v19;
      }
      while (v19);
      v20 = v90;
    }
    v77(v20, 0);
    return swift_bridgeObjectRelease(v20);
  }
}

uint64_t type metadata accessor for BeneficiaryInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10028BC90;
  if (!qword_10028BC90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryInfoRecord);
  return result;
}

void sub_100005F28(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&qword_10028FB00, AABeneficiaryInfo_ptr);
}

uint64_t sub_100005F50()
{
  return sub_1000051FC(type metadata accessor for BeneficiaryInfoRecord, &qword_10028BB80, (uint64_t)&unk_100218F08, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1001341EC);
}

uint64_t sub_100005FD4(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  char v8;
  id v9;
  char v10;
  id v11;
  char v12;
  id v13;
  char v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  uint64_t v60;
  id v61;
  os_log_type_t v62;
  uint8_t *v63;
  _QWORD *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  _BYTE v69[16];
  uint64_t v70;
  _UNKNOWN **v71;

  v3 = v2;
  if ((sub_100006848(a2) & 1) == 0)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8990);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v28))
      goto LABEL_12;
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Client does not have any valid entitlemnts.", v29, 2u);
    v30 = v29;
LABEL_11:
    swift_slowDealloc(v30, -1, -1);
LABEL_12:

    return 0;
  }
  sub_1000067D4(0, (unint64_t *)&unk_100294AD0, NSObject_ptr);
  v6 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  v7 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener);
  v8 = static NSObject.== infix(_:_:)(a1, v7);

  if ((v8 & 1) == 0)
  {
    v9 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener);
    v10 = static NSObject.== infix(_:_:)(a1, v9);

    if ((v10 & 1) == 0)
    {
      v11 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener);
      v12 = static NSObject.== infix(_:_:)(a1, v11);

      if ((v12 & 1) == 0)
      {
        if (qword_10028ADB0 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v60 = type metadata accessor for Logger(0);
        sub_100005288(v60, (uint64_t)qword_1002A8990);
        v61 = a1;
        v27 = Logger.logObject.getter();
        v62 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v27, v62))
        {

          return 0;
        }
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v63 = 138412290;
        v68 = v61;
        v65 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
        *v64 = v61;

        _os_log_impl((void *)&_mh_execute_header, v27, v62, "Fatal error! Unknown XPC listener: %@", v63, 0xCu);
        v66 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v64, 1, v66);
        swift_slowDealloc(v64, -1, -1);
        v30 = v63;
        goto LABEL_11;
      }
    }
  }
  v13 = *(id *)(v2 + v6);
  v14 = static NSObject.== infix(_:_:)(a1, v13);

  if ((v14 & 1) != 0)
  {
    v15 = *(void **)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer);
    v70 = type metadata accessor for CustodianDaemonContainer();
    v71 = &off_10026DE60;
    v68 = v15;
    v16 = type metadata accessor for CustodianDaemonService(0);
    v17 = (_QWORD *)swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v18 = sub_1000067AC((uint64_t)&v68, v70);
    __chkstk_darwin(v18, v18);
    v20 = (uint64_t *)((char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v21 + 16))(v20);
    v22 = *v20;
    swift_retain_n(v15, 2);
    v23 = a2;
    v24 = (uint64_t)sub_100006F78(v22, (uint64_t)v23, v17);
    sub_100006F58(&v68);
    swift_release(v15);
    objc_msgSend(v23, "setExportedObject:", v24);
    v25 = objc_msgSend((id)objc_opt_self(AACustodianDaemonInterface), "XPCInterface");
LABEL_18:
    v50 = v25;
    objc_msgSend(v23, "setExportedInterface:", v50);

    objc_msgSend(v23, "resume");
    v39 = v24;
    goto LABEL_19;
  }
  v32 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener);
  v33 = static NSObject.== infix(_:_:)(a1, v32);

  if ((v33 & 1) != 0)
  {
    v34 = type metadata accessor for AccountUserNotificationDaemonService(0);
    v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v36 = a2;
    v37 = sub_1000080B4(&qword_100294AE0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v37);
    *(_QWORD *)(v35 + 16) = v36;
    objc_msgSend(v36, "setExportedObject:", v35);
    v38 = objc_msgSend((id)objc_opt_self(AAAccountUserNotificationDaemonInterface), "XPCInterface");
    objc_msgSend(v36, "setExportedInterface:", v38);

    objc_msgSend(v36, "resume");
    v39 = v35;
LABEL_19:
    swift_release(v39);
    goto LABEL_20;
  }
  v40 = *(id *)(v2 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener);
  v41 = static NSObject.== infix(_:_:)(a1, v40);

  if ((v41 & 1) != 0)
  {
    v42 = *(void **)(v3 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityDaemonContainer);
    v70 = type metadata accessor for IdentityDaemonContainer();
    v71 = &off_10026B460;
    v68 = v42;
    v43 = type metadata accessor for IdentityDaemonService(0);
    v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
    v45 = sub_1000067AC((uint64_t)&v68, v70);
    __chkstk_darwin(v45, v45);
    v47 = (uint64_t *)((char *)&v67 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v48 + 16))(v47);
    v49 = *v47;
    swift_retain_n(v42, 2);
    v23 = a2;
    v24 = sub_100169FC4(v49, (uint64_t)v23, v44);
    sub_100006F58(&v68);
    swift_release(v42);
    objc_msgSend(v23, "setExportedObject:", v24);
    v25 = objc_msgSend((id)objc_opt_self(AAIdentityDaemonInterface), "XPCInterface");
    goto LABEL_18;
  }
LABEL_20:
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v51 = type metadata accessor for Logger(0);
  sub_100005288(v51, (uint64_t)qword_1002A8990);
  v52 = a2;
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v55 = 138412290;
    v68 = v52;
    v57 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
    *v56 = v52;

    _os_log_impl((void *)&_mh_execute_header, v53, v54, "New connection accepted: %@", v55, 0xCu);
    v58 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    v31 = 1;
    swift_arrayDestroy(v56, 1, v58);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v55, -1, -1);

  }
  else
  {

    return 1;
  }
  return v31;
}

uint64_t type metadata accessor for CustodianDaemonContainer()
{
  return objc_opt_self(_TtC13appleaccountd24CustodianDaemonContainer);
}

uint64_t sub_1000067AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000067D4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for CustodianDaemonService(uint64_t a1)
{
  uint64_t result;

  result = qword_10028E240;
  if (!qword_10028E240)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianDaemonService);
  return result;
}

uint64_t sub_100006848(void *a1)
{
  uint64_t v1;
  _UNKNOWN **v3;
  uint64_t v4;
  NSString v5;
  id v6;
  char v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v1 = 9;
  v3 = &off_10025E708;
  do
  {
    v4 = (uint64_t)*v3;
    swift_bridgeObjectRetain(*v3);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v6 = objc_msgSend(a1, "valueForEntitlement:", v5);

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)(v9, v6);
      swift_unknownObjectRelease(v6);
    }
    else
    {
      memset(v9, 0, sizeof(v9));
    }
    sub_100006988((uint64_t)v9, (uint64_t)v10);
    if (v11)
    {
      if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
        && (v8 & 1) != 0)
      {
        return 1;
      }
    }
    else
    {
      sub_100004934((uint64_t)v10, (uint64_t *)&unk_10028E7E0);
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  return 0;
}

uint64_t sub_100006988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_10028E7E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  _QWORD *v22;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24 - v13;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching stored BeneficiaryInfoRecords...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v11, v6);
  v22 = (_QWORD *)swift_allocObject(&unk_100266448, 40, 7);
  v22[2] = a1;
  v22[3] = a2;
  v22[4] = v3;
  sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  swift_retain(a2);
  swift_retain(v3);
  sub_100008674((uint64_t)v14, (uint64_t)sub_1000052A0, (uint64_t)v22);
  swift_release(v22);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v6);
}

uint64_t sub_100006CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100006CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_100006F58((_QWORD *)(v0 + 16));

  sub_100006F58((_QWORD *)(v0 + 64));
  sub_100006F58((_QWORD *)(v0 + 104));
  sub_100006F58((_QWORD *)(v0 + 144));
  sub_100006F58((_QWORD *)(v0 + 184));
  sub_100006F58((_QWORD *)(v0 + 224));
  sub_100006F58((_QWORD *)(v0 + 264));
  sub_100006F58((_QWORD *)(v0 + 304));
  sub_100006F58((_QWORD *)(v0 + 344));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 384));
  sub_100006F58((_QWORD *)(v0 + 392));
  sub_100006F58((_QWORD *)(v0 + 432));
  swift_release(*(_QWORD *)(v0 + 472));
  v1 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__healthCheckScheduler;
  v2 = sub_1000080B4(&qword_10028E868);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__preflightScheduler;
  v4 = sub_1000080B4(&qword_10028E838);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__recoveryFactorsController;
  v6 = sub_1000080B4(&qword_10028E858);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__cloudStorage;
  v8 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__idmsHandler;
  v10 = sub_1000080B4(&qword_10028E8C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__syncManager;
  v12 = sub_1000080B4(&qword_10028E860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianFetcher;
  v14 = sub_1000080B4((uint64_t *)&unk_10028E818);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__keyRepair;
  v16 = sub_1000080B4(&qword_10028E840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianPreflight;
  v18 = sub_1000080B4(&qword_10028E848);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory;
  v20 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v0 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter;
  v22 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  return v0;
}

uint64_t sub_100006F58(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

_QWORD *sub_100006F78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v30 = type metadata accessor for CustodianDaemonContainer();
  v31 = &off_10026DE60;
  v29[0] = a1;
  a3[59] = 0;
  v6 = sub_1000080B4(&qword_10028E260);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028E270);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028E280);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028E290);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = sub_1000080B4(&qword_10028E2A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v11);
  v12 = sub_1000080B4(&qword_10028E2B0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v12);
  v13 = sub_1000080B4(&qword_10028E2C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v13);
  v14 = sub_1000080B4((uint64_t *)&unk_10028E2D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v14);
  v15 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v15);
  v16 = sub_1000080B4((uint64_t *)&unk_10028C910);
  Dependency.init(dependencyId:config:)(0, 0, 0, v16);
  sub_100006CA4((uint64_t)v29, (uint64_t)(a3 + 2));
  a3[7] = a2;
  v17 = sub_10000732C(v29, v30);
  sub_100006CA4(*v17 + 184, (uint64_t)(a3 + 18));
  v18 = sub_10000732C(v29, v30);
  sub_100006CA4(*v18 + 104, (uint64_t)(a3 + 8));
  v19 = sub_10000732C(v29, v30);
  sub_100006CA4(*v19 + 272, (uint64_t)(a3 + 13));
  v20 = sub_10000732C(v29, v30);
  sub_100006CA4(*v20 + 64, (uint64_t)(a3 + 23));
  v21 = sub_10000732C(v29, v30);
  sub_100006CA4(*v21 + 24, (uint64_t)(a3 + 28));
  v22 = sub_10000732C(v29, v30);
  sub_100006CA4(*v22 + 144, (uint64_t)(a3 + 33));
  v23 = sub_10000732C(v29, v30);
  sub_100006CA4(*v23 + 312, (uint64_t)(a3 + 38));
  v24 = sub_10000732C(v29, v30);
  sub_100006CA4(*v24 + 424, (uint64_t)(a3 + 43));
  v25 = *(_QWORD *)(*sub_10000732C(v29, v30) + 464);
  a3[48] = v25;
  v26 = sub_10000732C(v29, v30);
  sub_100006CA4(*v26 + 472, (uint64_t)(a3 + 49));
  v27 = sub_10000732C(v29, v30);
  sub_100006CA4(*v27 + 512, (uint64_t)(a3 + 54));
  swift_unknownObjectRetain(v25);
  sub_100006F58(v29);
  return a3;
}

_QWORD *sub_10000732C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100007350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v14);
  v15 = sub_1000080B4((uint64_t *)&unk_10028C870);
  Dependency.init(dependencyId:config:)(0, 0, 0, v15);
  v16 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v16);
  v17 = sub_1000080B4(&qword_10028C890);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  v18 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v18);
  v19 = sub_1000080B4(&qword_10028C8B0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v19);
  v20 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v20);
  v21 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v21);
  v22 = sub_1000080B4((uint64_t *)&unk_10028C8E0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v22);
  v23 = sub_1000080B4((uint64_t *)&unk_10028C8F0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v23);
  v24 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v24);
  v25 = sub_1000080B4((uint64_t *)&unk_10028C910);
  Dependency.init(dependencyId:config:)(0, 0, 0, v25);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair____lazy_storage___custodianDefaults) = 0;
  v26 = OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair_repairSerialQueue;
  v27 = sub_100007764();
  static DispatchQoS.unspecified.getter(v27);
  v35 = &_swiftEmptyArrayStorage;
  v28 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v29 = sub_1000080B4(&qword_10028B9F0);
  v30 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v29, v30, v6, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
  *(_QWORD *)(v1 + v26) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ALL, 0x8000000100209D80, v13, v9, v5, 0);
  return v1;
}

unint64_t sub_100007764()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295A10;
  if (!qword_100295A10)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100295A10);
  }
  return result;
}

uint64_t sub_1000077A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10000D908(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000077E0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000D908(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007820()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v59[40];
  _BYTE v60[40];
  _BYTE v61[40];
  _BYTE v62[40];
  _BYTE v63[40];
  _BYTE v64[40];
  _BYTE v65[40];
  _BYTE v66[48];
  _BYTE v67[40];
  _BYTE v68[48];
  _BYTE v69[48];
  _BYTE v70[40];
  _BYTE v71[40];
  _BYTE v72[48];
  _BYTE v73[48];
  _BYTE v74[48];
  _BYTE v75[40];
  _BYTE v76[48];
  _BYTE v77[40];
  _BYTE v78[48];
  _BYTE v79[48];
  _BYTE v80[48];
  _BYTE v81[48];

  v0 = sub_100007F40();
  inited = swift_initStackObject(v0, v81);
  *(_OWORD *)(inited + 16) = xmmword_100219130;
  v2 = sub_1000067D4(0, (unint64_t *)&qword_10028FB00, AABeneficiaryInfo_ptr);
  *(_QWORD *)(inited + 32) = v2;
  v3 = sub_1000067D4(0, &qword_10028FB80, NSString_ptr);
  *(_QWORD *)(inited + 40) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(inited, (uint64_t)"fetchManifestOptionsForContact:completion:", 0, 0);
  swift_setDeallocating(inited);
  v4 = sub_100007F40();
  v5 = swift_initStackObject(v4, v80);
  *(_OWORD *)(v5 + 16) = xmmword_100219130;
  v6 = sub_1000067D4(0, &qword_10028FB88, AKBeneficiaryManifest_ptr);
  *(_QWORD *)(v5 + 32) = v6;
  v7 = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
  *(_QWORD *)(v5 + 40) = v7;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v5, (uint64_t)"fetchManifestOptionsForContact:completion:", 1, 1);
  swift_setDeallocating(v5);
  v8 = sub_100007F40();
  v9 = swift_initStackObject(v8, v79);
  *(_OWORD *)(v9 + 16) = xmmword_100219130;
  v10 = sub_1000067D4(0, &qword_10028FB98, AAMessagingCapability_ptr);
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v9, (uint64_t)"isRecipient:capableOf:completion:", 0, 0);
  swift_setDeallocating(v9);
  v11 = sub_100007F40();
  v12 = swift_initStackObject(v11, v78);
  *(_OWORD *)(v12 + 16) = xmmword_100219130;
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v12, (uint64_t)"isRecipient:capableOf:completion:", 1, 0);
  swift_setDeallocating(v12);
  v13 = sub_100007F40();
  v14 = swift_initStackObject(v13, v77);
  *(_OWORD *)(v14 + 16) = xmmword_100218E30;
  *(_QWORD *)(v14 + 32) = v6;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v14, (uint64_t)"setupBeneficiaryManifest:contactInfo:setupAuthToken:completion:", 0, 0);
  swift_setDeallocating(v14);
  v15 = sub_100007F40();
  v16 = swift_initStackObject(v15, v76);
  *(_OWORD *)(v16 + 16) = xmmword_100219130;
  v17 = sub_1000067D4(0, &qword_10028FBA0, AABeneficiary_ptr);
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v16, (uint64_t)"setupBeneficiaryManifest:contactInfo:setupAuthToken:completion:", 1, 0);
  swift_setDeallocating(v16);
  v18 = sub_100007F40();
  v19 = swift_initStackObject(v18, v75);
  *(_OWORD *)(v19 + 16) = xmmword_100218E30;
  *(_QWORD *)(v19 + 32) = v6;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v19, (uint64_t)"updateBeneficiaryManifest:contactInfo:completion:", 0, 0);
  swift_setDeallocating(v19);
  v20 = sub_100007F40();
  v21 = swift_initStackObject(v20, v74);
  *(_OWORD *)(v21 + 16) = xmmword_100219130;
  *(_QWORD *)(v21 + 32) = v17;
  *(_QWORD *)(v21 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v21, (uint64_t)"updateBeneficiaryManifest:contactInfo:completion:", 1, 0);
  swift_setDeallocating(v21);
  v22 = sub_100007F40();
  v23 = swift_initStackObject(v22, v73);
  *(_OWORD *)(v23 + 16) = xmmword_100219130;
  *(_QWORD *)(v23 + 32) = v17;
  *(_QWORD *)(v23 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v23, (uint64_t)"updateAccessCodeForContactInfo:completion:", 1, 0);
  swift_setDeallocating(v23);
  v24 = sub_100007F40();
  v25 = swift_initStackObject(v24, v72);
  *(_OWORD *)(v25 + 16) = xmmword_100219130;
  *(_QWORD *)(v25 + 32) = v17;
  *(_QWORD *)(v25 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v25, (uint64_t)"removeBeneficiary:manifest:completion:", 0, 0);
  swift_setDeallocating(v25);
  v26 = sub_100007F40();
  v27 = swift_initStackObject(v26, v71);
  *(_OWORD *)(v27 + 16) = xmmword_100218E30;
  *(_QWORD *)(v27 + 32) = v6;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v27, (uint64_t)"removeBeneficiary:manifest:completion:", 1, 0);
  swift_setDeallocating(v27);
  v28 = sub_100007F40();
  v29 = swift_initStackObject(v28, v70);
  *(_OWORD *)(v29 + 16) = xmmword_100218E30;
  v30 = sub_1000067D4(0, (unint64_t *)&unk_10028FAF0, AABenefactorInfo_ptr);
  *(_QWORD *)(v29 + 32) = v30;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v29, (uint64_t)"removeBenefactor:completion:", 0, 0);
  swift_setDeallocating(v29);
  v31 = sub_100007F40();
  v32 = swift_initStackObject(v31, v69);
  *(_OWORD *)(v32 + 16) = xmmword_100219130;
  *(_QWORD *)(v32 + 32) = v17;
  *(_QWORD *)(v32 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v32, (uint64_t)"removeAccessCodeForContactInfo:completion:", 1, 0);
  swift_setDeallocating(v32);
  v33 = sub_100007F40();
  v34 = swift_initStackObject(v33, v68);
  *(_OWORD *)(v34 + 16) = xmmword_100219130;
  *(_QWORD *)(v34 + 32) = v17;
  *(_QWORD *)(v34 + 40) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v34, (uint64_t)"fetchBeneficiariesWithCompletion:", 0, 1);
  swift_setDeallocating(v34);
  v35 = sub_100007F40();
  v36 = swift_initStackObject(v35, v67);
  *(_OWORD *)(v36 + 16) = xmmword_100218E30;
  *(_QWORD *)(v36 + 32) = v30;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v36, (uint64_t)"fetchBenefactorsWithCompletion:", 0, 1);
  swift_setDeallocating(v36);
  v37 = sub_100007F40();
  v38 = swift_initStackObject(v37, v66);
  *(_OWORD *)(v38 + 16) = xmmword_100219130;
  *(_QWORD *)(v38 + 32) = sub_1000067D4(0, &qword_10028FAE8, AALocalContactInfo_ptr);
  *(_QWORD *)(v38 + 40) = v7;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v38, (uint64_t)"fetchSuggestedBeneficiariesWithCompletion:", 0, 1);
  swift_setDeallocating(v38);
  v39 = sub_100007F40();
  v40 = swift_initStackObject(v39, v65);
  *(_OWORD *)(v40 + 16) = xmmword_100218E30;
  v41 = sub_1000067D4(0, &qword_10028FBA8, NSUUID_ptr);
  *(_QWORD *)(v40 + 32) = v41;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v40, (uint64_t)"respondToInvitation:accepted:completion:", 0, 0);
  swift_setDeallocating(v40);
  v42 = sub_100007F40();
  v43 = swift_initStackObject(v42, v64);
  *(_OWORD *)(v43 + 16) = xmmword_100218E30;
  *(_QWORD *)(v43 + 32) = v2;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v43, (uint64_t)"sendInvitationToContact:completion:", 0, 0);
  swift_setDeallocating(v43);
  v44 = sub_100007F40();
  v45 = swift_initStackObject(v44, v63);
  *(_OWORD *)(v45 + 16) = xmmword_100218E30;
  *(_QWORD *)(v45 + 32) = v41;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v45, (uint64_t)"presentInheritanceInvitationUIWithBeneficiaryID:completion:", 0, 0);
  swift_setDeallocating(v45);
  v46 = sub_100007F40();
  v47 = swift_initStackObject(v46, v62);
  *(_OWORD *)(v47 + 16) = xmmword_100218E30;
  *(_QWORD *)(v47 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v47, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 0, 0);
  swift_setDeallocating(v47);
  v48 = sub_100007F40();
  v49 = swift_initStackObject(v48, v61);
  *(_OWORD *)(v49 + 16) = xmmword_100218E30;
  *(_QWORD *)(v49 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v49, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 1, 0);
  swift_setDeallocating(v49);
  v50 = sub_100007F40();
  v51 = swift_initStackObject(v50, v60);
  *(_OWORD *)(v51 + 16) = xmmword_100218E30;
  *(_QWORD *)(v51 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v51, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 2, 0);
  swift_setDeallocating(v51);
  v52 = sub_100007F40();
  v53 = swift_initStackObject(v52, v59);
  *(_OWORD *)(v53 + 16) = xmmword_100218E30;
  *(_QWORD *)(v53 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v53, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 3, 0);
  swift_setDeallocating(v53);
  v54 = sub_100007F40();
  v55 = swift_allocObject(v54, ((*(unsigned int *)(v54 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v54 + 52) | 7);
  *(_OWORD *)(v55 + 16) = xmmword_100218E30;
  *(_QWORD *)(v55 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v55, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 0, 1);
  swift_setDeallocating(v55);
  swift_deallocClassInstance(v55, 32, 7);
  v56 = sub_100007F40();
  v57 = swift_allocObject(v56, ((*(unsigned int *)(v56 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v56 + 52) | 7);
  *(_OWORD *)(v57 + 16) = xmmword_100218E30;
  *(_QWORD *)(v57 + 32) = v3;
  NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(v57, (uint64_t)"setupBeneficiaryAliasWithAccessKey:password:firstName:lastName:authToken:completion:", 1, 1);
  swift_setDeallocating(v57);
  return swift_deallocClassInstance(v57, 32, 7);
}

uint64_t sub_100007F40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_1000080B4((uint64_t *)&unk_10028C520);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = (uint64_t *)&unk_10028D570;
  else
    v2 = (uint64_t *)&unk_100294208;
  return sub_1000080B4(v2);
}

_QWORD *sub_100007F8C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = &_swiftEmptyArrayStorage;
    sub_100008104(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = &_swiftEmptyArrayStorage;
    do
    {
      v9 = *v4;
      v5 = sub_1000080B4((uint64_t *)&unk_10028C520);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100008104(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_100008104(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v2[2] = v7 + 1;
      sub_1000080F4(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1000080B4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_OWORD *sub_1000080F4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100008104(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100008120(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100008120(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100298330);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void NSXPCInterface.aa_setClasses(_:for:argumentIndex:ofReply:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  void *v4;
  void *v5;
  _QWORD *v9;
  id v10;
  Class isa;
  id v12;
  uint64_t v13;
  Class v14;
  uint64_t v15;

  v5 = v4;
  v9 = sub_100007F8C(a1);
  v10 = objc_allocWithZone((Class)NSSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend(v10, "initWithArray:", isa);

  v15 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v15, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

  v13 = v15;
  if (v15)
  {
    v14 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v14, a2, a3, a4 & 1);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x8000000100209A50, "appleaccountd/NSXPCInterface+AppleAccount.swift", 47, 2, 17, 0);
    __break(1u);
  }
}

uint64_t type metadata accessor for LocalCache()
{
  return objc_opt_self(_TtC13appleaccountd10LocalCache);
}

uint64_t sub_10000840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v0 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v10 = 1;
  v11 = objc_msgSend(v9, "URLsForDirectory:inDomains:", 5, 1);

  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v4);
  if (*(_QWORD *)(v12 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v3, v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v4);
    v10 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v10, 1, v4);
  swift_bridgeObjectRelease(v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_10009E0DC((uint64_t)v3);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000037, 0x800000010020D700, "appleaccountd/LocalCacheStorageManager.swift", 44, 2, 208, 0);
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x800000010020D740, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

unint64_t sub_100008628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028CD30;
  if (!qword_10028CD30)
  {
    v1 = sub_10000D908((uint64_t *)&unk_100295A00);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10028CD30);
  }
  return result;
}

uint64_t sub_100008674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264478, (uint64_t)sub_100005F50, (uint64_t)&unk_100264490);
}

uint64_t sub_1000086A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000086F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008700(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008708(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008710(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008718(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008720(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008728(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008730(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008738(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008740(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008748(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008750(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008758(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008760(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008768(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008770(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008778(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008780(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008788(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008790(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008798(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087A0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087B0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087B8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087C8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087D8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000087F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008800(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008808(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008810(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008818(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008820(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008828(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008830(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008838(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008840(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008848(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008850(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008858(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008860(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008868(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008870(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008878(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008880(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008888(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100008898(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000088F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008918(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008978(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008988(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008998(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000089F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008B98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100008C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

void sub_100008C6C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100008C78@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100008C80()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AACustodianErrorDomain);
}

uint64_t sub_100008C90@<X0>(uint64_t *a1@<X8>)
{
  return sub_100004970(type metadata accessor for DaemonCustodianIdMSConfirmationHandler, (uint64_t (*)(void))sub_1000049FC, a1);
}

uint64_t sub_100008CA4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100003E98((uint64_t (*)(_QWORD))type metadata accessor for AAAppleIDAuthenticationController, a1);
}

uint64_t sub_100008CB0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t sub_100008CC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100004970(type metadata accessor for CustodianKeyRepair, sub_100007350, a1);
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = objc_autoreleasePoolPush();
  v4 = type metadata accessor for AppleAccountDaemon();
  swift_allocObject(v4, 24, 7);
  v5 = sub_1001638AC();
  qword_10028AD68 = v4;
  unk_10028AD70 = &off_10026B198;
  qword_10028AD50 = v5;
  objc_autoreleasePoolPop(v3);
  v6 = objc_autoreleasePoolPush();
  sub_1001651C0();
  objc_autoreleasePoolPop(v6);
  v7 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v7, "run");

  return 0;
}

uint64_t variable initialization expression of OSActivity.activityState()
{
  return 0;
}

uint64_t variable initialization expression of InheritanceSecurityController._accountStore()
{
  uint64_t v0;

  v0 = sub_1000080B4(&qword_10028C860);
  return Dependency.init(dependencyId:config:)(0, 0, 0, v0);
}

uint64_t sub_100008E4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B560, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217AA8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100008E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B560, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217AA8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100008ED0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100008F10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B680, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_1002171D4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100008F50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B680, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_1002171D4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100008F90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100008FD0()
{
  id *v0;

  return *v0;
}

uint64_t sub_100008FD8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B318, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D24);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009018(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B318, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D24);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100009058(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

NSNumber sub_100009098()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_1000090A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_1000090F0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_100009144@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

uint64_t sub_100009168(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B610, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_1002173E0);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000091A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B610, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_1002173E0);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000091E8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100009228(uint64_t a1, uint64_t a2)
{
  return sub_10000A930(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100009240(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B528, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217D50);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009280(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B528, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217D50);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000092C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100009300(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B5A0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100217990);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009340(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B5A0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100217990);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100009380(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000093C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B5D8, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217738);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009400(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B5D8, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217738);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100009440(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void sub_100009480(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100009488(uint64_t a1, uint64_t a2)
{
  return sub_10000A930(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_QWORD *sub_10000949C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000094B0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000094C4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000094D8(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100009508@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100009534@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100009558(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_10000956C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100009580(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100009594@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1000095A8(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000095BC(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000095D0(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000095E4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000095F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_10000960C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100009620(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B648, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1002172C4);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100009660(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B648, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1002172C4);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000096A0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000096E4(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100009758(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000097D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100009818()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AACustodianRecoveryErrorDomain);
}

uint64_t sub_100009828(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009868(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000098A8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000990C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009960()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AAErrorDomain);
}

uint64_t sub_100009970(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000099B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000099F0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100009A54()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100009A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

_QWORD *sub_100009AD8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100009AE8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AAInheritanceErrorDomain);
}

uint64_t sub_100009AF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009B38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009B78(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100009BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009C2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009C6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009CAC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100009D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009D60()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AAEscrowRecordErrorDomain);
}

uint64_t sub_100009D70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009DB0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009DF0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100009E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009EA4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AAIdentityErrorDomain);
}

uint64_t sub_100009EB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100009EF4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100009F34(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100009F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100009FE8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AASignInErrorDomain);
}

uint64_t sub_100009FF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000A038(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000A078(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000A0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000A12C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_10000A13C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10000A17C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10000A1BC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10000A220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10000A270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_10000A2CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000BDE0(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_10000A308@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10000A314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10000A3C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10000A3D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A430(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005150(&qword_10028B6E8, (uint64_t (*)(uint64_t))type metadata accessor for Status, (uint64_t)&unk_1002174D8);
  v3 = sub_100005150(&qword_10028B6F0, (uint64_t (*)(uint64_t))type metadata accessor for Status, (uint64_t)&unk_100217480);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_10000A4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005150(&qword_10028B780, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpIdentifier, (uint64_t)&unk_1002188B4);
  v3 = sub_100005150(&qword_10028B788, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpIdentifier, (uint64_t)&unk_10021885C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A5A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005150(&qword_10028B6C8, (uint64_t (*)(uint64_t))type metadata accessor for AKTrustedContactsSyncOperation, (uint64_t)&unk_100217830);
  v3 = sub_100005150(&qword_10028B6D0, (uint64_t (*)(uint64_t))type metadata accessor for AKTrustedContactsSyncOperation, (uint64_t)&unk_1002177D8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10000A784@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000A7AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005150((unint64_t *)&qword_10028B6D8, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_1002180F4);
  v3 = sub_100005150(&qword_10028B6E0, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_1002175C0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A830@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000A874(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005150((unint64_t *)&qword_10028B6B8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100217EB0);
  v3 = sub_100005150(&qword_10028B6C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100217E04);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000A8F8()
{
  _QWORD *v0;

  return Int.hashValue.getter(*v0);
}

void sub_10000A900()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_10000A928(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

uint64_t sub_10000A930(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000A96C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000A9AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_10000AA1C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

__n128 sub_10000AAA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10000AAB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000AAD4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B2F0, (uint64_t)&unk_10025EBC8);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B2F8, (uint64_t)&unk_10025EBF0);
}

void type metadata accessor for InheritanceError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B300, (uint64_t)&unk_10025EC18);
}

uint64_t sub_10000AB38()
{
  return sub_100005150(&qword_10028B308, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216C4C);
}

uint64_t sub_10000AB64()
{
  return sub_100005150(&qword_10028B310, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216C74);
}

uint64_t sub_10000AB90()
{
  return sub_100005150(&qword_10028B318, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D24);
}

uint64_t sub_10000ABBC()
{
  return sub_100005150(&qword_10028B320, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216CF4);
}

uint64_t sub_10000ABE8()
{
  return sub_100005150(&qword_10028B328, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216CB4);
}

uint64_t sub_10000AC14()
{
  return sub_100005150(&qword_10028B330, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100216E04);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3D8, (uint64_t)&unk_10025EEC0);
}

uint64_t sub_10000AC54()
{
  return sub_100005150(&qword_10028B338, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100216DCC);
}

unint64_t sub_10000AC84()
{
  unint64_t result;

  result = qword_10028B340;
  if (!qword_10028B340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10028B340);
  }
  return result;
}

uint64_t sub_10000ACC8()
{
  return sub_100005150(&qword_10028B348, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100216E3C);
}

uint64_t sub_10000ACF4()
{
  return sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B358, (uint64_t)&unk_10025EC40);
}

void type metadata accessor for EscrowRecordError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B360, (uint64_t)&unk_10025EC68);
}

void type metadata accessor for RecoveryFactors(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B368, (uint64_t)&unk_10025EC90);
}

void type metadata accessor for AACustodianRecoveryError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B370, (uint64_t)&unk_10025ECB8);
}

void type metadata accessor for AKRemoteDeviceRemovalReason(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B378, (uint64_t)&unk_10025ECE0);
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B380, (uint64_t)&unk_10025ED00);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B388, (uint64_t)&unk_10025ED30);
}

void type metadata accessor for IdentityError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B390, (uint64_t)&unk_10025ED60);
}

void type metadata accessor for Scope(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B398, (uint64_t)&unk_10025ED88);
}

void type metadata accessor for AKTrustedContactsSyncOperation(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3A0, (uint64_t)&unk_10025EDA8);
}

void type metadata accessor for AASignInError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3A8, (uint64_t)&unk_10025EDD0);
}

void type metadata accessor for AAFollowUpUserInfo(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3B0, (uint64_t)&unk_10025EDF8);
}

void type metadata accessor for Status(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3B8, (uint64_t)&unk_10025EE20);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3C8, (uint64_t)&unk_10025EE70);
}

void type metadata accessor for AAError(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B3D0, (uint64_t)&unk_10025EE98);
}

uint64_t sub_10000AE4C()
{
  return sub_100005150(&qword_10028B440, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_1002170FC);
}

uint64_t sub_10000AE78()
{
  return sub_100005150(&qword_10028B448, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100217124);
}

uint64_t sub_10000AEA4()
{
  return sub_100005150(&qword_10028B450, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100217220);
}

uint64_t sub_10000AED0()
{
  return sub_100005150(&qword_10028B458, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218134);
}

uint64_t sub_10000AEFC()
{
  return sub_100005150(&qword_10028B460, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100217308);
}

uint64_t sub_10000AF28()
{
  return sub_100005150(&qword_10028B468, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100217330);
}

uint64_t sub_10000AF54()
{
  return sub_100005150(&qword_10028B470, (uint64_t (*)(uint64_t))type metadata accessor for Status, (uint64_t)&unk_100217448);
}

uint64_t sub_10000AF80()
{
  return sub_100005150(&qword_10028B478, (uint64_t (*)(uint64_t))type metadata accessor for Status, (uint64_t)&unk_100217420);
}

uint64_t sub_10000AFAC()
{
  return sub_100005150(&qword_10028B480, (uint64_t (*)(uint64_t))type metadata accessor for Status, (uint64_t)&unk_1002174B0);
}

uint64_t sub_10000AFD8()
{
  return sub_100005150(&qword_10028B488, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_100217588);
}

uint64_t sub_10000B004()
{
  return sub_100005150(&qword_10028B490, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_100217560);
}

uint64_t sub_10000B030()
{
  return sub_100005150(&qword_10028B498, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217660);
}

uint64_t sub_10000B05C()
{
  return sub_100005150(&qword_10028B4A0, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217688);
}

uint64_t sub_10000B088()
{
  return sub_100005150(&qword_10028B4A8, (uint64_t (*)(uint64_t))type metadata accessor for AKTrustedContactsSyncOperation, (uint64_t)&unk_1002177A0);
}

uint64_t sub_10000B0B4()
{
  return sub_100005150(&qword_10028B4B0, (uint64_t (*)(uint64_t))type metadata accessor for AKTrustedContactsSyncOperation, (uint64_t)&unk_100217778);
}

uint64_t sub_10000B0E0()
{
  return sub_100005150(&qword_10028B4B8, (uint64_t (*)(uint64_t))type metadata accessor for AKTrustedContactsSyncOperation, (uint64_t)&unk_100217808);
}

uint64_t sub_10000B10C()
{
  return sub_100005150(&qword_10028B4C0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_1002178B8);
}

uint64_t sub_10000B138()
{
  return sub_100005150(&qword_10028B4C8, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_1002178E0);
}

uint64_t sub_10000B164()
{
  return sub_100005150(&qword_10028B4D0, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_1002179D0);
}

uint64_t sub_10000B190()
{
  return sub_100005150(&qword_10028B4D8, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_1002179F8);
}

uint64_t sub_10000B1BC()
{
  return sub_100005150(&qword_10028B4E0, (uint64_t (*)(uint64_t))type metadata accessor for RecoveryFactors, (uint64_t)&unk_100217B18);
}

uint64_t sub_10000B1E8()
{
  return sub_100005150(&qword_10028B4E8, (uint64_t (*)(uint64_t))type metadata accessor for RecoveryFactors, (uint64_t)&unk_100217AE8);
}

uint64_t sub_10000B214()
{
  return sub_100005150(&qword_10028B4F0, (uint64_t (*)(uint64_t))type metadata accessor for RecoveryFactors, (uint64_t)&unk_100217B40);
}

uint64_t sub_10000B240()
{
  return sub_100005150(&qword_10028B4F8, (uint64_t (*)(uint64_t))type metadata accessor for RecoveryFactors, (uint64_t)&unk_100217B78);
}

uint64_t sub_10000B26C()
{
  return sub_100005150(&qword_10028B500, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217C78);
}

uint64_t sub_10000B298()
{
  return sub_100005150(&qword_10028B508, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217CA0);
}

uint64_t sub_10000B2C4()
{
  return sub_100005150(&qword_10028B510, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100217DC8);
}

uint64_t sub_10000B2F0()
{
  return sub_100005150(&qword_10028B518, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100217D9C);
}

uint64_t sub_10000B31C()
{
  return sub_100005150(&qword_10028B520, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100217E38);
}

uint64_t sub_10000B348()
{
  return sub_100005150(&qword_10028B528, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217D50);
}

uint64_t sub_10000B374()
{
  return sub_100005150(&qword_10028B530, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217D20);
}

uint64_t sub_10000B3A0()
{
  return sub_100005150(&qword_10028B538, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217CE0);
}

uint64_t sub_10000B3CC()
{
  return sub_100005150(&qword_10028B540, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100217F94);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B728, (uint64_t)&unk_10025EFA0);
}

uint64_t sub_10000B40C()
{
  return sub_100005150(&qword_10028B548, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100217F5C);
}

uint64_t sub_10000B438()
{
  return sub_100005150(&qword_10028B550, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100217FCC);
}

uint64_t sub_10000B464()
{
  return sub_100005150(&qword_10028B558, (uint64_t (*)(uint64_t))type metadata accessor for EscrowRecordError, (uint64_t)&unk_100217EF4);
}

uint64_t sub_10000B490()
{
  return sub_100005150(&qword_10028B560, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217AA8);
}

uint64_t sub_10000B4BC()
{
  return sub_100005150(&qword_10028B568, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217A78);
}

uint64_t sub_10000B4E8()
{
  return sub_100005150(&qword_10028B570, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217A38);
}

uint64_t sub_10000B514()
{
  return sub_100005150(&qword_10028B578, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_100218094);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B720, (uint64_t)&unk_10025EF80);
}

uint64_t sub_10000B554()
{
  return sub_100005150(&qword_10028B580, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_10021805C);
}

uint64_t sub_10000B580()
{
  return sub_100005150(&qword_10028B588, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_1002180CC);
}

uint64_t sub_10000B5AC()
{
  return sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
}

uint64_t sub_10000B5D8()
{
  return sub_100005150(&qword_10028B598, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_1002175F0);
}

uint64_t sub_10000B604()
{
  return sub_100005150(&qword_10028B5A0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100217990);
}

uint64_t sub_10000B630()
{
  return sub_100005150(&qword_10028B5A8, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100217960);
}

uint64_t sub_10000B65C()
{
  return sub_100005150(&qword_10028B5B0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100217920);
}

uint64_t sub_10000B688()
{
  return sub_100005150(&qword_10028B5B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_100218218);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B718, (uint64_t)&unk_10025EF60);
}

uint64_t sub_10000B6C8()
{
  return sub_100005150(&qword_10028B5C0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_1002181E0);
}

uint64_t sub_10000B6F4()
{
  return sub_100005150(&qword_10028B5C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_100218250);
}

uint64_t sub_10000B720()
{
  return sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
}

uint64_t sub_10000B74C()
{
  return sub_100005150(&qword_10028B5D8, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217738);
}

uint64_t sub_10000B778()
{
  return sub_100005150(&qword_10028B5E0, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100217708);
}

uint64_t sub_10000B7A4()
{
  return sub_100005150(&qword_10028B5E8, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_1002176C8);
}

uint64_t sub_10000B7D0()
{
  return sub_100005150(&qword_10028B5F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_100218318);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B710, (uint64_t)&unk_10025EF40);
}

uint64_t sub_10000B810()
{
  return sub_100005150(&qword_10028B5F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_1002182E0);
}

uint64_t sub_10000B83C()
{
  return sub_100005150(&qword_10028B600, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_100218350);
}

uint64_t sub_10000B868()
{
  return sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
}

uint64_t sub_10000B894()
{
  return sub_100005150(&qword_10028B610, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_1002173E0);
}

uint64_t sub_10000B8C0()
{
  return sub_100005150(&qword_10028B618, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_1002173B0);
}

uint64_t sub_10000B8EC()
{
  return sub_100005150(&qword_10028B620, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100217370);
}

uint64_t sub_10000B918()
{
  return sub_100005150(&qword_10028B628, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_100218418);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B708, (uint64_t)&unk_10025EF20);
}

uint64_t sub_10000B958()
{
  return sub_100005150(&qword_10028B630, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_1002183E0);
}

uint64_t sub_10000B984()
{
  return sub_100005150(&qword_10028B638, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_100218450);
}

uint64_t sub_10000B9B0()
{
  return sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
}

uint64_t sub_10000B9DC()
{
  return sub_100005150(&qword_10028B648, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1002172C4);
}

uint64_t sub_10000BA08()
{
  return sub_100005150(&qword_10028B650, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100217290);
}

uint64_t sub_10000BA34()
{
  return sub_100005150(&qword_10028B658, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_10021724C);
}

uint64_t sub_10000BA60()
{
  return sub_100005150(&qword_10028B660, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100218520);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B700, (uint64_t)&unk_10025EF00);
}

uint64_t sub_10000BAA0()
{
  return sub_100005150(&qword_10028B668, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_1002184E4);
}

uint64_t sub_10000BACC()
{
  return sub_100005150(&qword_10028B670, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_10021855C);
}

uint64_t sub_10000BAF8()
{
  return sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
}

uint64_t sub_10000BB24()
{
  return sub_100005150(&qword_10028B680, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_1002171D4);
}

uint64_t sub_10000BB50()
{
  return sub_100005150(&qword_10028B688, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_1002171A4);
}

uint64_t sub_10000BB7C()
{
  return sub_100005150(&qword_10028B690, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100217164);
}

uint64_t sub_10000BBA8()
{
  return sub_100005150(&qword_10028B698, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100218628);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B6F8, (uint64_t)&unk_10025EEE0);
}

uint64_t sub_10000BBE8()
{
  return sub_100005150(&qword_10028B6A0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1002185F0);
}

uint64_t sub_10000BC14()
{
  return sub_100005150(&qword_10028B6A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100218660);
}

uint64_t sub_10000BC40()
{
  return sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
}

void type metadata accessor for WritingOptions(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B730, (uint64_t)&unk_10025EFC0);
}

void type metadata accessor for ParticipantPermission(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B738, (uint64_t)&unk_10025EFE8);
}

void type metadata accessor for AAFollowUpIdentifier(uint64_t a1)
{
  sub_100004FD0(a1, &qword_10028B740, (uint64_t)&unk_10025F008);
}

uint64_t sub_10000BCAC()
{
  return sub_100005150(&qword_10028B748, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpIdentifier, (uint64_t)&unk_100218824);
}

uint64_t sub_10000BCD8()
{
  return sub_100005150(&qword_10028B750, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpIdentifier, (uint64_t)&unk_1002187FC);
}

uint64_t sub_10000BD04()
{
  return sub_100005150(&qword_10028B758, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpIdentifier, (uint64_t)&unk_10021888C);
}

uint64_t sub_10000BD30()
{
  return sub_100005150(&qword_10028B760, (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions, (uint64_t)&unk_100218970);
}

uint64_t sub_10000BD5C()
{
  return sub_100005150(&qword_10028B768, (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions, (uint64_t)&unk_10021893C);
}

uint64_t sub_10000BD88()
{
  return sub_100005150(&qword_10028B770, (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions, (uint64_t)&unk_10021899C);
}

uint64_t sub_10000BDB4()
{
  return sub_100005150(&qword_10028B778, (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions, (uint64_t)&unk_1002189D8);
}

uint64_t sub_10000BDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void InheritanceSecurityController.$accountStore.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

BOOL sub_10000BE80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000BE94()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000BED8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000BF00()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for DaemonCDPFollowUpHandler()
{
  return objc_opt_self(_TtC13appleaccountd24DaemonCDPFollowUpHandler);
}

void sub_10000BF60()
{
  sub_10000C544((SEL *)&selRef_contextForStateRepair);
}

void sub_10000BFB0(char a1)
{
  __asm { BR              X10 }
}

void sub_10000BFF8(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  if (a2)
  {
    v2 = objc_msgSend((id)objc_opt_self(CDPFollowUpContext), "contextForWalrusCreatePasscodeWithCDPContext:", a2);
    if (v2)
    {
      v3 = v2;
      v4 = objc_allocWithZone((Class)CDPFollowUpController);
      v5 = v3;
      v6 = objc_msgSend(v4, "init");
      v19 = 0;
      v7 = objc_msgSend(v6, "postFollowUpWithContext:error:", v5, &v19);
      v8 = v19;
      if (v7)
      {
        v9 = v19;
      }
      else
      {
        v15 = v19;
        _convertNSErrorToError(_:)(v8);

        swift_willThrow(v16);
      }

      goto LABEL_12;
    }
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005288(v10, (uint64_t)qword_1002A8990);
    v5 = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      v14 = "WalrusVerifyPasscode context nil, can't post followup!";
LABEL_9:
      _os_log_impl((void *)&_mh_execute_header, v5, v12, v14, v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005288(v17, (uint64_t)qword_1002A8990);
    v5 = Logger.logObject.getter(v18);
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      v14 = "CDPContext nil, can't create followup context for create passcode.";
      goto LABEL_9;
    }
  }
LABEL_12:

}

void sub_10000C290()
{
  id v0;
  void *v1;
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  id v10;

  v0 = objc_msgSend(objc_allocWithZone((Class)CDPFollowUpController), "init");
  v1 = (void *)objc_opt_self(CDPFollowUpContext);
  v2 = objc_msgSend(v1, "contextForConfirmExistingSecret");
  v10 = 0;
  v3 = objc_msgSend(v0, "clearFollowUpWithContext:error:", v2, &v10);

  v4 = v10;
  if (v3
    && (v5 = v10,
        v6 = objc_msgSend(v1, "contextForOfflinePasscodeChange"),
        v10 = 0,
        v7 = objc_msgSend(v0, "clearFollowUpWithContext:error:", v6, &v10),
        v6,
        v4 = v10,
        (v7 & 1) != 0))
  {
    v8 = v10;
  }
  else
  {
    v9 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow();
  }

}

void sub_10000C3D8()
{
  id v0;
  id v1;
  id v2;
  unsigned __int8 v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)CDPFollowUpController), "init");
  v1 = objc_msgSend(objc_allocWithZone((Class)CDPContext), "init");
  v2 = objc_msgSend((id)objc_opt_self(CDPFollowUpContext), "contextForWalrusCreatePasscodeWithCDPContext:", v1);

  v7 = 0;
  v3 = objc_msgSend(v0, "clearFollowUpWithContext:error:", v2, &v7);

  v4 = v7;
  if ((v3 & 1) != 0)
  {
    v5 = v7;
  }
  else
  {
    v6 = v7;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow();
  }

}

void sub_10000C4F4()
{
  sub_10000C544((SEL *)&selRef_contextForADPStateHealing);
}

void sub_10000C544(SEL *a1)
{
  id v2;
  id v3;
  unsigned __int8 v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = objc_msgSend(objc_allocWithZone((Class)CDPFollowUpController), "init");
  v3 = objc_msgSend((id)objc_opt_self(CDPFollowUpContext), *a1);
  v8 = 0;
  v4 = objc_msgSend(v2, "clearFollowUpWithContext:error:", v3, &v8);

  v5 = v8;
  if ((v4 & 1) != 0)
  {
    v6 = v8;
  }
  else
  {
    v7 = v8;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }

}

_BYTE *initializeBufferWithCopyOfBuffer for FollowUpType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FollowUpType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FollowUpType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10000C720 + 4 * byte_100218AF5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10000C754 + 4 * byte_100218AF0[v4]))();
}

uint64_t sub_10000C754(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C75C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000C764);
  return result;
}

uint64_t sub_10000C770(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000C778);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10000C77C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C784(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000C790(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000C79C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FollowUpType()
{
  return &type metadata for FollowUpType;
}

unint64_t sub_10000C7B8()
{
  unint64_t result;

  result = qword_10028B8B0;
  if (!qword_10028B8B0)
  {
    result = swift_getWitnessTable(&unk_100218BAC, &type metadata for FollowUpType);
    atomic_store(result, (unint64_t *)&qword_10028B8B0);
  }
  return result;
}

_QWORD *sub_10000C7FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for CustodianSessionManager();
  v1 = swift_allocObject(v0, 40, 7);
  result = sub_10000D728();
  qword_1002A8950 = v1;
  return result;
}

uint64_t sub_10000C834(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_unfair_lock_s *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  _QWORD v80[2];
  id v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t aBlock[5];
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;

  v85 = a3;
  v86 = a4;
  v81 = a1;
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v87 = (char *)v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v15 = (char *)v80 - v14;
  v82 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v82, v16);
  v84 = (char *)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CustodianRecoveryData(0);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  v25 = (char *)v80 - v24;
  v91 = v5;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 32));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100005288(v26, (uint64_t)qword_1002A89D8);
  v28 = sub_10000E0DC(a2, (uint64_t)v25);
  v80[1] = v27;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v89 = v15;
  v90 = v8;
  v88 = v9;
  v83 = a5;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    aBlock[0] = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = sub_1000E3D40();
    v36 = v35;
    v95 = sub_1001DEF4C(v34, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96);
    swift_bridgeObjectRelease(v36);
    sub_10000E120((uint64_t)v25);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Generating recovery session with data: %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_10000E120((uint64_t)v25);
  }

  sub_10000E0DC(a2, (uint64_t)v22);
  v37 = type metadata accessor for CustodianRecoverySession(0);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v38 = sub_1000EC688((uint64_t)v22);
  v39 = *(os_unfair_lock_s **)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock);
  os_unfair_lock_lock(v39);
  sub_1000EC788(v38);
  os_unfair_lock_unlock(v39);
  swift_beginAccess(v91 + 16, aBlock, 33, 0);
  swift_retain(v38);
  sub_1001F3800(&v95, v38);
  swift_endAccess(aBlock);
  swift_release(v95);
  v40 = 900;
  v95 = 900;
  if (v81)
  {
    v41 = v81;
    if ((uint64_t)objc_msgSend(v41, "maxSessionTime") < 1 || (uint64_t)objc_msgSend(v41, "maxSessionTime") > 7199)
    {

      v40 = 900;
    }
    else
    {
      v40 = (uint64_t)objc_msgSend(v41, "maxSessionTime");

      v95 = v40;
    }
  }
  v42 = swift_retain_n(v38, 2);
  v43 = Logger.logObject.getter(v42);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v43, v45))
  {
    v46 = swift_slowAlloc(22, -1);
    v47 = swift_slowAlloc(32, -1);
    aBlock[0] = v47;
    *(_DWORD *)v46 = 136315394;
    v48 = type metadata accessor for UUID(0);
    v49 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
    v52 = v51;
    v92 = (_QWORD *)sub_1001DEF4C(v50, v51, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, aBlock);
    swift_release_n(v38, 2);
    swift_bridgeObjectRelease(v52);
    *(_WORD *)(v46 + 12) = 2048;
    v92 = (_QWORD *)v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, aBlock);
    _os_log_impl((void *)&_mh_execute_header, v43, v45, "Starting countdown for session with Id: %s of %ld seconds", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {

    swift_release_n(v38, 2);
  }
  v53 = v87;
  v54 = v85;
  v55 = v83;
  v56 = swift_allocObject(&unk_10025F3D8, 24, 7);
  v57 = v91;
  swift_weakInit(v56 + 16, v91);
  v58 = (_QWORD *)swift_allocObject(&unk_10025F400, 40, 7);
  v58[2] = v56;
  v58[3] = v38;
  v58[4] = v55;
  aBlock[4] = (uint64_t)sub_10000E1B4;
  v94 = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000051D0;
  aBlock[3] = (uint64_t)&unk_10025F418;
  v59 = _Block_copy(aBlock);
  v92 = _swiftEmptyArrayStorage;
  v60 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain(v38);
  swift_retain(v56);
  v61 = v55;
  v62 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v63 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  v64 = v84;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v62, v63, v82, v60);
  v65 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
  v66 = DispatchWorkItem.init(flags:block:)(v64, v59);
  v67 = v94;
  swift_release(v56);
  swift_release(v67);
  v68 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask;
  v69 = *(_QWORD *)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask);
  *(_QWORD *)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask) = v66;
  swift_release(v69);
  v70 = (uint64_t *)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  v71 = *(_QWORD *)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  v72 = *(_QWORD *)(v38 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion + 8);
  v73 = v86;
  *v70 = v54;
  v70[1] = v73;
  sub_10000E1C0(v54, v73);
  sub_10000D98C(v71, v72);
  v74 = *(id *)(v57 + 24);
  static DispatchTime.now()(v74);
  swift_beginAccess(&v95, aBlock, 0, 0);
  v75 = v89;
  + infix(_:_:)(v53, (double)v95);
  v76 = *(uint64_t (**)(char *, uint64_t))(v88 + 8);
  v77 = v90;
  result = v76(v53, v90);
  v79 = *(_QWORD *)(v38 + v68);
  if (v79)
  {
    swift_retain(*(_QWORD *)(v38 + v68));
    OS_dispatch_queue.asyncAfter(deadline:execute:)(v75, v79);

    swift_release(v79);
    v76(v75, v77);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 32));
    return v38;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000CF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10000D134(a2 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, a3, 1);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10000D018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;

  v6 = objc_msgSend(objc_allocWithZone((Class)AACustodianRecoveryConfiguration), "init");
  objc_msgSend(v6, "setMaxSessionTime:", 60);
  type metadata accessor for AACustodianRecoveryError(0);
  v8 = v7;
  v15 = -9002;
  v9 = v6;
  v10 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v11 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v10, v8, v11);
  v12 = v16;
  v13 = sub_10000C834(v6, a1, a2, a3, v16);

  return v13;
}

void sub_10000D134(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  __n128 v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  os_unfair_lock_s *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _BYTE v62[16];
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[24];

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v56 - v15;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 32));
  v61 = v4 + 16;
  swift_beginAccess(v4 + 16, v67, 0, 0);
  v17 = *(_QWORD *)(v4 + 16);
  v63 = a1;
  swift_bridgeObjectRetain(v17);
  sub_10013D83C(sub_10000D94C, (uint64_t)v62, v17);
  v19 = v18;
  swift_bridgeObjectRelease(v17);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 32));
  if (v19)
  {
    v60 = a3;
    v20 = type metadata accessor for CustodianRecoverySession(0);
    v21 = swift_dynamicCastClass(v19, v20);
    if (v21)
    {
      v22 = v21;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + 32));
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v23 = type metadata accessor for Logger(0);
      sub_100005288(v23, (uint64_t)qword_1002A89D8);
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a1, v8);
      v25 = Logger.logObject.getter(v24);
      v27 = v9;
      v28 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v25, v28))
      {
        v57 = v27;
        v29 = swift_slowAlloc(12, -1);
        v59 = a2;
        v30 = (uint8_t *)v29;
        v58 = swift_slowAlloc(32, -1);
        v64[0] = v58;
        *(_DWORD *)v30 = 136315138;
        v56 = v30 + 4;
        v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v32 = dispatch thunk of CustomStringConvertible.description.getter(v8, v31);
        v34 = v33;
        v65 = sub_1001DEF4C(v32, v33, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
        swift_bridgeObjectRelease(v34);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v8);
        _os_log_impl((void *)&_mh_execute_header, v25, v28, "Terminating session with ID: %s", v30, 0xCu);
        v35 = v58;
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        v36 = v30;
        a2 = v59;
        swift_slowDealloc(v36, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v8);
      }

      v48 = *(os_unfair_lock_s **)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock);
      os_unfair_lock_lock(v48);
      v49 = *(_QWORD *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction);
      if (v49)
      {
        *(_QWORD *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction) = 0;
        swift_unknownObjectRelease(v49);
        os_unfair_lock_unlock(v48);
        v50 = *(_QWORD *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask);
        if (v50)
        {
          v51 = swift_retain(*(_QWORD *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask));
          dispatch thunk of DispatchWorkItem.cancel()(v51);
          swift_release(v50);
        }
        v52 = *(void (**)(uint64_t, uint64_t))(v22
                                                      + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
        if (v52)
        {
          v53 = v60 & 1;
          v54 = *(_QWORD *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion + 8);
          swift_retain(v54);
          v52(a2, v53);
          sub_10000D98C((uint64_t)v52, v54);
        }
        swift_beginAccess(v61, v64, 33, 0);
        v55 = sub_10000DC48(v22);
        swift_endAccess(v64);
        swift_release(v55);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 32));
        swift_release(v19);
      }
      else
      {
        __break(1u);
      }
      return;
    }
    swift_release(v19);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v37 = type metadata accessor for Logger(0);
  sub_100005288(v37, (uint64_t)qword_1002A89D8);
  v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a1, v8);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = v9;
    v43 = swift_slowAlloc(32, -1);
    v64[0] = v43;
    *(_DWORD *)v41 = 136315138;
    v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v8, v44);
    v47 = v46;
    v65 = sub_1001DEF4C(v45, v46, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease(v47);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Asked to terminate a session that was already terminated or not found: %s", v41, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

}

uint64_t sub_10000D6A0(_QWORD *a1)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID) & 1;
}

uint64_t sub_10000D6DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CustodianSessionManager()
{
  return objc_opt_self(_TtC13appleaccountd23CustodianSessionManager);
}

_QWORD *sub_10000D728()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v20;
  _QWORD *v21;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = &_swiftEmptySetSingleton;
  v20 = sub_100007764();
  static DispatchQoS.unspecified.getter(v20);
  v21 = _swiftEmptyArrayStorage;
  v15 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_1000080B4(&qword_10028B9F0);
  v17 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v16, v17, v7, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000025, 0x8000000100209340, v14, v10, v6, 0);
  v18 = (_DWORD *)swift_slowAlloc(4, -1);
  *v18 = 0;
  v1[4] = v18;
  return v1;
}

uint64_t sub_10000D908(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000D94C(_QWORD *a1)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID) & 1;
}

uint64_t sub_10000D98C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

Swift::Int sub_10000D99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[9];
  uint64_t v23;
  uint64_t v24;

  if (a2)
  {
    sub_1000080B4(&qword_10028B9F8);
    v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v24 = v4;
    v5 = __CocoaSet.makeIterator()(a1);
    v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      v7 = v6;
      v8 = type metadata accessor for CustodianRecoverySession(0);
      do
      {
        v22[0] = v7;
        swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v8, 7);
        v4 = v24;
        v17 = *(_QWORD *)(v24 + 16);
        if (*(_QWORD *)(v24 + 24) <= v17)
        {
          sub_1001F3E64(v17 + 1);
          v4 = v24;
        }
        v9 = v23;
        Hasher.init(_seed:)(v22);
        v10 = ObjectIdentifier.hashValue.getter(v9);
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v12 = v4 + 56;
        v13 = -1 << *(_BYTE *)(v4 + 32);
        v14 = result & ~v13;
        v15 = v14 >> 6;
        if (((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6))) != 0)
        {
          v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v18 = 0;
          v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v20 = v15 == v19;
            if (v15 == v19)
              v15 = 0;
            v18 |= v20;
            v21 = *(_QWORD *)(v12 + 8 * v15);
          }
          while (v21 == -1);
          v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }
        *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16) = v9;
        ++*(_QWORD *)(v4 + 16);
        v7 = __CocoaSet.Iterator.next()();
      }
      while (v7);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v4;
}

unint64_t sub_10000DBA4(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::Int v5;
  unint64_t result;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v4 = ObjectIdentifier.hashValue.getter(a1);
  Hasher._combine(_:)(v4);
  v5 = Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)(v5 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10000DC48(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::UInt v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18[9];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v3 < 0)
      v4 = *v1;
    else
      v4 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = swift_retain(a1);
    v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release(a1);
    if ((v6 & 1) != 0)
    {
      v7 = sub_10000DDDC(v4, a1);
      swift_bridgeObjectRelease(v3);
      return v7;
    }
LABEL_15:
    swift_bridgeObjectRelease(v3);
    return 0;
  }
  Hasher.init(_seed:)(v18);
  swift_bridgeObjectRetain(v3);
  v8 = ObjectIdentifier.hashValue.getter(a1);
  Hasher._combine(_:)(v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v3 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v3 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_15;
  v12 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v12 + 8 * v11) != a1)
  {
    v13 = ~v10;
    do
    {
      v11 = (v11 + 1) & v13;
      if (((*(_QWORD *)(v3 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_15;
    }
    while (*(_QWORD *)(v12 + 8 * v11) != a1);
  }
  swift_bridgeObjectRelease(v3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v15 = *v1;
  v18[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F4C54();
    v15 = v18[0];
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v11);
  sub_10000DF20(v11);
  v16 = *v1;
  *v1 = v18[0];
  swift_bridgeObjectRelease(v16);
  return v7;
}

uint64_t sub_10000DDDC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::UInt v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16[9];
  Swift::Int v17;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_10000D99C(v7, v6);
  v17 = v8;
  Hasher.init(_seed:)(v16);
  swift_retain(v8);
  v9 = ObjectIdentifier.hashValue.getter(a2);
  Hasher._combine(_:)(v9);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v13 + 8 * v12) == a2)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10000DF20(v12);
      if (v8 == a2)
      {
        *v3 = v17;
        return a2;
      }
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v14;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        if (*(_QWORD *)(v13 + 8 * v12) == a2)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_10000DF20(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21);
        v11 = swift_retain(v10);
        v12 = ObjectIdentifier.hashValue.getter(v11);
        Hasher._combine(_:)(v12);
        v13 = Hasher._finalize()();
        swift_release(v10);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_QWORD *)(v15 + 8 * v2);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_10000E0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoveryData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E120(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianRecoveryData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000E15C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000E180()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000E1B4()
{
  uint64_t *v0;

  return sub_10000CF98(v0[2], v0[3], v0[4]);
}

uint64_t sub_10000E1C0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10000E1D0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x676E697070617277;
}

uint64_t sub_10000E244@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10000EFE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000E268()
{
  return 0;
}

void sub_10000E274(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10000E280(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F3C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000E2A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10000F3C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000E2D0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = v1;
  v5 = sub_1000080B4(&qword_10028BA10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10000F3C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceAccessKeyRecord.CodingKeys, &type metadata for InheritanceAccessKeyRecord.CodingKeys, v12, v10, v11);
  v21 = *v3;
  v20 = 0;
  v13 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for Data, v13);
  if (!v2)
  {
    v14 = *((_QWORD *)v3 + 2);
    v15 = *((_QWORD *)v3 + 3);
    LOBYTE(v21) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    v16 = *((_QWORD *)v3 + 4);
    v17 = *((_QWORD *)v3 + 5);
    LOBYTE(v21) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

double sub_10000E424@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_10000F154(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10000E464(_QWORD *a1)
{
  return sub_10000E2D0(a1);
}

uint64_t sub_10000E478(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  sub_10000EA4C(*a1, a1[1]);
  if ((v10 & 1) == 0)
    return 0;
  if (v2 == v6 && v3 == v7
    || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v6, v7, 0), result = 0, (v11 & 1) != 0))
  {
    if (v4 == v8 && v5 == v9)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v8, v9, 0);
  }
  return result;
}

id sub_10000E54C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  Class isa;
  id v8;
  id v9;
  Class v10;
  NSString v11;
  NSString v12;
  uint64_t v13;

  v3 = v2;
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3));
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, "initWithBeneficiairyIdentifier:", isa);

  v9 = v8;
  v10 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v9, "setWrappingKeyData:", v10);

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setWrappingKeyString:", v11);

  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setClaimTokenString:", v12);

  sub_10000F51C(a2);
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
  return v9;
}

void sub_10000E65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10000E6BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10000E8A0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_10000E8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10000E65C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10000E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10000E65C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10000EA4C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10000EA98()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10000EACC + dword_10000ECA4[v0 >> 62]))();
}

uint64_t sub_10000EADC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void sub_10000ECC4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = objc_msgSend(a1, "wrappingKeyData");
  v5 = v4;
  if (!v4)
  {

    v6 = 0;
    v8 = 0;
LABEL_8:
    v12 = 0;
    v10 = 0;
    goto LABEL_9;
  }
  v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = objc_msgSend(a1, "wrappingKeyString");
  v10 = v9;
  if (!v9)
  {

    sub_10000F494(v6, v8);
    v6 = 0;
    v8 = 0;
    v5 = 0;
    v12 = 0;
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = objc_msgSend(a1, "claimTokenString");
  if (!v13)
  {
    swift_bridgeObjectRelease(v12);

    sub_10000F494(v6, v8);
    v6 = 0;
    v8 = 0;
    v5 = 0;
    goto LABEL_8;
  }
  v14 = v13;
  v10 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

LABEL_10:
  *a2 = v6;
  a2[1] = v8;
  a2[2] = (uint64_t)v5;
  a2[3] = v12;
  a2[4] = (uint64_t)v10;
  a2[5] = v16;
}

uint64_t sub_10000EE10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for JSONDecoder(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = JSONDecoder.init()(v7);
  v9 = sub_10000F568();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v17, &type metadata for InheritanceAccessKeyRecord, a1, a2, &type metadata for InheritanceAccessKeyRecord, v9);
  sub_10000F494(a1, a2);
  swift_release(v8);
  v10 = v17;
  v11 = v18;
  v13 = v19;
  v12 = v20;
  v15 = v21;
  v14 = v22;
  sub_10000F450(v17, v18);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  sub_10000F494(v10, v11);
  swift_bridgeObjectRelease(v14);
  result = swift_bridgeObjectRelease(v12);
  *a3 = v10;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v12;
  a3[4] = v15;
  a3[5] = v14;
  return result;
}

uint64_t sub_10000EFE8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x676E697070617277 && a2 == 0xEF6174614479654BLL)
  {
    v5 = 0xEF6174614479654BLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E697070617277, 0xEF6174614479654BLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100209370;
    if (a2 == 0x8000000100209370)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100209370, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100209390)
  {
    swift_bridgeObjectRelease(0x8000000100209390);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209390, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10000F154@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v5 = sub_1000080B4(&qword_10028BA00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10000F3C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceAccessKeyRecord.CodingKeys, &type metadata for InheritanceAccessKeyRecord.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_100006F58(a1);
  v32 = 0;
  v13 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for Data, &v32, v5, &type metadata for Data, v13);
  v15 = v30;
  v14 = v31;
  LOBYTE(v30) = 1;
  sub_10000F450(v15, v31);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v18 = v17;
  v27 = v16;
  LOBYTE(v30) = 2;
  swift_bridgeObjectRetain(v17);
  v28 = 0;
  v29 = v18;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23 = v19;
  v22(v9, v5);
  sub_10000F450(v15, v14);
  swift_bridgeObjectRetain(v21);
  sub_10000F494(v15, v14);
  sub_100006F58(a1);
  sub_10000F494(v15, v14);
  swift_bridgeObjectRelease(v21);
  v24 = v29;
  result = swift_bridgeObjectRelease(v29);
  *a2 = v15;
  a2[1] = v14;
  a2[2] = v27;
  a2[3] = v24;
  a2[4] = v23;
  a2[5] = v21;
  return result;
}

unint64_t sub_10000F3C8()
{
  unint64_t result;

  result = qword_10028BA08;
  if (!qword_10028BA08)
  {
    result = swift_getWitnessTable(&unk_100218DD4, &type metadata for InheritanceAccessKeyRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BA08);
  }
  return result;
}

unint64_t sub_10000F40C()
{
  unint64_t result;

  result = qword_10028DAB0;
  if (!qword_10028DAB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10028DAB0);
  }
  return result;
}

uint64_t sub_10000F450(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000F494(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_10000F4D8()
{
  unint64_t result;

  result = qword_10028BBD0;
  if (!qword_10028BBD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10028BBD0);
  }
  return result;
}

uint64_t *sub_10000F51C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[5];
  sub_10000F494(*a1, a1[1]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10000F568()
{
  unint64_t result;

  result = qword_10028BA18;
  if (!qword_10028BA18)
  {
    result = swift_getWitnessTable(&unk_100218CBC, &type metadata for InheritanceAccessKeyRecord);
    atomic_store(result, (unint64_t *)&qword_10028BA18);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InheritanceAccessKeyRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceAccessKeyRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10000F688 + 4 * byte_100218C65[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10000F6BC + 4 * byte_100218C60[v4]))();
}

uint64_t sub_10000F6BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F6C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000F6CCLL);
  return result;
}

uint64_t sub_10000F6D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000F6E0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10000F6E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000F6EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyRecord.CodingKeys()
{
  return &type metadata for InheritanceAccessKeyRecord.CodingKeys;
}

uint64_t initializeBufferWithCopyOfBuffer for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for InheritanceAccessKeyRecord(uint64_t *a1)
{
  sub_10000F494(*a1, a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t *initializeWithCopy for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t *assignWithCopy for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000F494(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for InheritanceAccessKeyRecord(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for InheritanceAccessKeyRecord(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000F494(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for InheritanceAccessKeyRecord(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceAccessKeyRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyRecord()
{
  return &type metadata for InheritanceAccessKeyRecord;
}

unint64_t sub_10000F964()
{
  unint64_t result;

  result = qword_10028BA20;
  if (!qword_10028BA20)
  {
    result = swift_getWitnessTable(&unk_100218DAC, &type metadata for InheritanceAccessKeyRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BA20);
  }
  return result;
}

unint64_t sub_10000F9AC()
{
  unint64_t result;

  result = qword_10028BA28;
  if (!qword_10028BA28)
  {
    result = swift_getWitnessTable(&unk_100218D1C, &type metadata for InheritanceAccessKeyRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BA28);
  }
  return result;
}

unint64_t sub_10000F9F4()
{
  unint64_t result;

  result = qword_10028BA30;
  if (!qword_10028BA30)
  {
    result = swift_getWitnessTable(&unk_100218D44, &type metadata for InheritanceAccessKeyRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BA30);
  }
  return result;
}

uint64_t sub_10000FA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v40[5];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v40[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v40[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100005288(v11, (uint64_t)qword_1002A8A08);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Scheduling Apple ID Availability activity", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v1 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler__xpcActivityScheduler, v6);
  Dependency.wrappedValue.getter(v40, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = sub_10000732C(v40, v40[3]);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider);
  v19 = *v17;
  swift_retain_n(v18, 2);
  v20 = static String._fromUTF8Repairing(_:)("com.apple.appleaccountd.appleid.availability", 44);
  v21 = v20;
  v23 = v22;
  if (*(_BYTE *)(v18 + 24) == 1)
  {
    v24 = Logger.logObject.getter(v20);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Time interval for AppleID Availability activity is being overridden.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = 60;
  }
  else
  {
    v27 = 86400;
  }
  v28 = swift_allocObject(&unk_10025F660, 24, 7);
  swift_weakInit(v28 + 16, v18);
  v29 = swift_bridgeObjectRetain(v23);
  static DispatchQoS.background.getter(v29);
  v30 = swift_allocObject(&unk_10025F688, 56, 7);
  *(_WORD *)(v30 + 16) = 257;
  *(_QWORD *)(v30 + 24) = v27 >> 1;
  *(_QWORD *)(v30 + 32) = v27 >> 1;
  *(_QWORD *)(v30 + 40) = v27;
  *(_QWORD *)(v30 + 48) = 8;
  v31 = swift_allocObject(&unk_10025F6B0, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1000108B8;
  *(_QWORD *)(v31 + 24) = v28;
  v32 = type metadata accessor for XPCActivity();
  swift_allocObject(v32, 104, 7);
  swift_retain(v28);
  v33 = sub_10002E144(v21, v23, (uint64_t)v5, (uint64_t)sub_1000108D0, v30, (uint64_t)sub_1000108D8, v31);
  swift_release(v28);
  swift_bridgeObjectRelease(v23);
  swift_release(v30);
  swift_release(v31);
  v34 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v33;
  swift_release(v34);
  v35 = swift_allocObject(&unk_10025F6D8, 24, 7);
  swift_weakInit(v35 + 16, v19);
  v36 = type metadata accessor for OSTransaction();
  swift_allocObject(v36, 48, 7);
  v37 = sub_1000E0EB0("com.apple.appleaccountd.appleid.availability", 44, 2);
  sub_100187158(v37, v35);
  swift_release_n(v18, 2);
  swift_release(v35);
  swift_release(v37);
  return sub_100006F58(v40);
}

uint64_t sub_10000FE24(void (*a1)(NSObject *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  __n128 v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28);
  id v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[56];
  _QWORD v41[5];

  v3 = v2;
  v6 = sub_1000080B4(&qword_10028FA50);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = UUID.init()(v14);
  v38 = UUID.uuidString.getter(v17);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
  v22 = Logger.logObject.getter(v21);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v22, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v24, "Starting on-demand Apple ID Availability activity", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider);
  v27 = swift_allocObject(&unk_10025F638, 32, 7);
  v28 = a1;
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v26 + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore, v6);
  swift_retain_n(a2, 2);
  Dependency.wrappedValue.getter(v41, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v29 = objc_msgSend(*(id *)(*sub_10000732C(v41, v41[3]) + 16), "aa_primaryAppleAccount");

  sub_100006F58(v41);
  if (v29)
  {
    sub_100091404(0, v38, v19, (uint64_t)sub_100010590, v27);
    swift_release(a2);
    swift_release(v27);
  }
  else
  {
    v30 = sub_1000080B4(&qword_10028BB60);
    inited = swift_initStackObject(v30, v40);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = 0x72456E496E676953;
    *(_QWORD *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    v33 = v32;
    v39 = -8014;
    v34 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v35 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
    _BridgedStoredNSError.init(_:userInfo:)(v41, &v39, v34, v33, v35);
    *(_QWORD *)(inited + 48) = v41[0];
    v36 = sub_10001577C(inited);
    sub_10001059C(v36, v28);
    swift_release(a2);
    swift_release(v27);
    swift_bridgeObjectRelease(v36);
  }
  return swift_bridgeObjectRelease(v19);
}

uint64_t sub_100010178()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler__xpcActivityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000101DC()
{
  return type metadata accessor for AppleIDAvailabilityScheduler(0);
}

uint64_t type metadata accessor for AppleIDAvailabilityScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_10028BA70;
  if (!qword_10028BA70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleIDAvailabilityScheduler);
  return result;
}

void sub_100010220(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100010298(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_100010298(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028BA80)
  {
    v2 = sub_10000D908(&qword_100299380);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028BA80);
  }
}

uint64_t sub_1000102F0()
{
  return sub_10000FA38();
}

uint64_t sub_100010310(void (*a1)(NSObject *), uint64_t a2)
{
  return sub_10000FE24(a1, a2);
}

uint64_t sub_100010330(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v7 = sub_1000080B4(&qword_100299380);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028BB48);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100218E30;
  v10 = type metadata accessor for AppleIDAvailabilityHealthCheck(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  swift_retain(a2);
  v12 = sub_1000080B4((uint64_t *)&unk_10028C8F0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v12);
  v13 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v13);
  v14 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v14);
  v15 = sub_1000067D4(0, &qword_10028BB50, AKAccountManager_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v15);
  v16 = sub_1000067D4(0, &qword_10028BB58, AADeviceInfo_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v16);
  v17 = (_QWORD *)(v11 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck_reportEvent);
  *v17 = a1;
  v17[1] = a2;
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = &off_10026C9C8;
  *(_QWORD *)(v9 + 32) = v11;
  v18 = type metadata accessor for AppleIDAvailabilityActivityProvider(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v14);
  *(_QWORD *)(v19 + 16) = v9;
  *(_BYTE *)(v19 + 24) = a3;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28AppleIDAvailabilityScheduler_activityProvider) = v19;
  return v3;
}

uint64_t sub_10001056C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100010590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10001059C(a2, *(void (**))(v2 + 16));
}

void sub_10001059C(uint64_t a1, void (*a2)(NSObject *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for AAError(0);
    v5 = v4;
    v27 = -4408;
    v6 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v6, &v26);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v8;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = a1;
    swift_bridgeObjectRetain(a1);
    v9 = sub_100015894(inited);
    v10 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v9, v5, v10);
    v11 = v28;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v13 = v11;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = _convertErrorToNSError(_:)(v13);
      v28 = (void *)v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v17 = v18;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Overall on-demand Apple ID Availability activity failed: %@", v16, 0xCu);
      v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {

      v14 = v13;
    }

    v25 = v13;
    a2(v13);

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Overall on-demand Apple ID Availability activity completed.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    a2(0);
  }
}

BOOL sub_1000108B8(uint64_t a1)
{
  uint64_t v1;

  return sub_100090D7C(a1, v1);
}

uint64_t sub_1000108C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

double sub_1000108D0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_100042760(v1 + 16, a1).n128_u64[0];
  return result;
}

uint64_t sub_1000108D8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100187480(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000108E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001090C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _OWORD v45[3];
  uint64_t v46[6];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v6 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v7 = a3 + v6[11];
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_QWORD *)(a3 + v6[12]);
  *v9 = 0;
  v9[1] = 0;
  v10 = a3 + v6[13];
  *(_QWORD *)v10 = 0;
  *(_BYTE *)(v10 + 8) = 1;
  v11 = (_QWORD *)(a3 + v6[14]);
  *v11 = 0;
  v11[1] = 0;
  v12 = objc_msgSend(a1, "accessKey");
  if (v12)
  {
    v13 = v12;
    sub_10000ECC4(v13, v46);
    sub_100013F20((uint64_t)v46, (uint64_t)&v47);
    if (*((_QWORD *)&v48 + 1))
    {
      v50 = v47;
      v51 = v48;
      v52 = v49;
      v14 = objc_msgSend(a1, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

      v15 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      v17 = JSONEncoder.init()(v16);
      v45[0] = v50;
      v45[1] = v51;
      v45[2] = v52;
      v18 = sub_100014590();
      v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(v45, &type metadata for InheritanceAccessKeyRecord, v18);
      v21 = v20;
      swift_release(v17);
      v22 = (uint64_t *)(a3 + v6[7]);
      *v22 = v19;
      v22[1] = v21;
      v23 = objc_opt_self(AABeneficiaryInfo);
      v24 = swift_dynamicCastObjCClass(a1, v23);
      if (v24)
      {
        v25 = (void *)v24;
        swift_unknownObjectRetain(a1);
        v26 = objc_msgSend(v25, "handle");
        if (v26)
        {
          v27 = v26;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v30 = v29;

          swift_unknownObjectRelease(a1);
        }
        else
        {
          swift_unknownObjectRelease(a1);
          v28 = 0;
          v30 = 0;
        }
        v32 = (uint64_t *)(a3 + v6[5]);
        *v32 = v28;
        v32[1] = v30;
      }
      else
      {
        v31 = (_QWORD *)(a3 + v6[5]);
        *v31 = 0;
        v31[1] = 0;
      }
      v33 = objc_msgSend(a1, "benefactorAltDSID");
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v37 = (uint64_t *)(a3 + v6[6]);
      *v37 = v34;
      v37[1] = v36;
      UUID.init()(v38);

      swift_unknownObjectRelease(a1);
      result = sub_100013FA4((uint64_t)v46);
      *(_OWORD *)(a3 + v6[9]) = xmmword_100218E90;
      *(_BYTE *)(a3 + v6[10]) = a2 & 1;
      return result;
    }

  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v40 = type metadata accessor for Logger(0);
  v41 = sub_100005288(v40, (uint64_t)qword_1002A89F0);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.error.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "The beneficiary does not have accessKey created yet. Cannot proceed to create a BeneficiaryInfoRecord", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }

  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000065, 0x8000000100209540, "appleaccountd/BeneficiaryInfoRecord.swift", 41, 2, 34, 0);
  __break(1u);
  return result;
}

uint64_t sub_100010CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  void (*v21)(void);
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t result;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  uint64_t v65;
  void (*v66)(void);
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  v72 = a7;
  v73 = a8;
  v74 = a5;
  v65 = a4;
  v70 = a3;
  v68 = a2;
  v15 = a6;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v67 = (char *)&v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v21 = *(void (**)(void))(v17 + 56);
  v71 = a9 + v20[11];
  v66 = v21;
  v21();
  v22 = (_QWORD *)(a9 + v20[12]);
  *v22 = 0;
  v22[1] = 0;
  v23 = a9 + v20[13];
  *(_QWORD *)v23 = 0;
  v69 = (uint64_t *)v23;
  *(_BYTE *)(v23 + 8) = 1;
  v24 = (_QWORD *)(a9 + v20[14]);
  *v24 = 0;
  v24[1] = 0;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  v25(a9, a1, v16);
  v26 = v20[6];
  v27 = *(_QWORD *)(a1 + v26);
  v28 = *(_QWORD *)(a1 + v26 + 8);
  v29 = (_QWORD *)(a9 + v26);
  *v29 = v27;
  v29[1] = v28;
  v25(a9 + v20[8], a1 + v20[8], v16);
  if (v15 == 2 || ((((v15 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v20[10])) & 1) != 0)
  {
    v30 = v20[9];
    v31 = *(_QWORD *)(a1 + v30);
    v32 = *(_QWORD *)(a1 + v30 + 8);
    v33 = (uint64_t *)(a9 + v30);
    *v33 = v31;
    v33[1] = v32;
    sub_10000F450(v31, v32);
  }
  else
  {
    *(_OWORD *)(a9 + v20[9]) = xmmword_100218E90;
  }
  v34 = v20[5];
  v35 = v72;
  v36 = v74;
  v37 = v70;
  if (v70)
  {
    v38 = (_QWORD *)(a9 + v34);
    *v38 = v68;
    v38[1] = v37;
  }
  else
  {
    v40 = *(_QWORD *)(a1 + v34);
    v39 = *(_QWORD *)(a1 + v34 + 8);
    v41 = (_QWORD *)(a9 + v34);
    *v41 = v40;
    v41[1] = v39;
    swift_bridgeObjectRetain(v39);
    v36 = v74;
  }
  v42 = v20[7];
  if (v36 >> 60 == 15)
  {
    v43 = *(_QWORD *)(a1 + v42);
    v44 = *(_QWORD *)(a1 + v42 + 8);
    v45 = (uint64_t *)(a9 + v42);
    *v45 = v43;
    v45[1] = v44;
    sub_10000F450(v43, v44);
    if (v15 != 2)
    {
LABEL_10:
      *(_BYTE *)(a9 + v20[10]) = v15 & 1;
      goto LABEL_13;
    }
  }
  else
  {
    v46 = (_QWORD *)(a9 + v42);
    *v46 = v65;
    v46[1] = v36;
    if (v15 != 2)
      goto LABEL_10;
  }
  *(_BYTE *)(a9 + v20[10]) = *(_BYTE *)(a1 + v20[10]);
LABEL_13:
  v47 = a10;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v35, 1, v16) == 1)
  {
    swift_bridgeObjectRetain(v28);
    sub_100013AAC(v35);
    sub_100014548(a1 + v20[11], v71);
  }
  else
  {
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 32);
    v49 = v67;
    v48(v67, v35, v16);
    swift_bridgeObjectRetain(v28);
    v50 = v71;
    sub_100013AAC(v71);
    v48((char *)v50, (uint64_t)v49, v16);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v66)(v50, 0, 1, v16);
  }
  v51 = v73;
  v52 = a12;
  if (a10)
  {
    v53 = v22[1];
  }
  else
  {
    v54 = (uint64_t *)(a1 + v20[12]);
    v51 = *v54;
    v47 = v54[1];
    v53 = v22[1];
    swift_bridgeObjectRetain(v47);
  }
  swift_bridgeObjectRelease(v53);
  *v22 = v51;
  v22[1] = v47;
  if (a12)
  {
    v56 = v24[1];
  }
  else
  {
    v57 = (uint64_t *)(a1 + v20[14]);
    a11 = *v57;
    v52 = v57[1];
    v56 = v24[1];
    swift_bridgeObjectRetain(v52);
  }
  swift_bridgeObjectRelease(v56);
  *v24 = a11;
  v24[1] = v52;
  v58 = a1 + v20[13];
  v59 = *(_QWORD *)v58;
  v60 = *(_BYTE *)(v58 + 8);
  result = sub_100013B78(a1);
  if ((a13 & 1) != 0)
    v62 = 1;
  else
    v62 = v59;
  v63 = (a13 ^ 1) & v60;
  if (((a13 ^ 1) & 1) != 0 || (v60 & 1) != 0)
    goto LABEL_29;
  v62 = v59 + 1;
  if (v59 != -1)
  {
    v63 = 0;
LABEL_29:
    v64 = v69;
    *v69 = v62;
    *((_BYTE *)v64 + 8) = v63;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100011070(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000110A0 + 4 * byte_100218EA0[a1]))(0x656C646E6168, 0xE600000000000000);
}

uint64_t sub_1000110A0()
{
  return 0x69636966656E6562;
}

uint64_t sub_1000110C4()
{
  return 0x654B737365636361;
}

unint64_t sub_1000110E8()
{
  return 0xD000000000000011;
}

uint64_t sub_1000111AC()
{
  return 0x6144726961706572;
}

uint64_t sub_1000111C8()
{
  unsigned __int8 *v0;

  return sub_100011070(*v0);
}

uint64_t sub_1000111D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100014010(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000111F4(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100011200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013A68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100011228(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100013A68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100011250@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(void);
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v38;
  void (*v39)(char *, _QWORD *, uint64_t);
  uint64_t v40;
  int *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  int *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  char v78;

  v64 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v65 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v66 = (uint64_t **)((char *)&v63 - v13);
  v68 = sub_1000080B4(&qword_10028BBA0);
  v14 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v15);
  v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = &v22[*(int *)(v20 + 44)];
  v75 = v7;
  v24 = *(void (**)(void))(v7 + 56);
  v72 = (uint64_t)v23;
  v24();
  v25 = &v22[v18[12]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v73 = v18;
  v74 = v25;
  v26 = &v22[v18[13]];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  v27 = v18[14];
  v76 = v22;
  v28 = &v22[v27];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v70 = v28;
  v71 = a1;
  v29 = a1[3];
  v30 = a1[4];
  sub_10000732C(a1, v29);
  v31 = sub_100013A68();
  v67 = v17;
  v32 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeneficiaryInfoRecord.CodingKeys, &type metadata for BeneficiaryInfoRecord.CodingKeys, v31, v29, v30);
  if (v32)
  {
    v33 = v72;
    sub_100006F58(v71);
    sub_100013AAC(v33);
    swift_bridgeObjectRelease(*((_QWORD *)v74 + 1));
    return swift_bridgeObjectRelease(*((_QWORD *)v70 + 1));
  }
  else
  {
    v34 = v11;
    v63 = (uint64_t *)v26;
    v69 = v14;
    LOBYTE(v77) = 1;
    v35 = (_QWORD *)sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = v66;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v66, v6, &v77, v68, v6, v35);
    v38 = (uint64_t)v76;
    v39 = *(void (**)(char *, _QWORD *, uint64_t))(v75 + 32);
    v39(v76, v36, v6);
    LOBYTE(v77) = 0;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v68);
    v41 = v73;
    v66 = v35;
    v42 = (uint64_t *)(v38 + v73[5]);
    *v42 = v40;
    v42[1] = v43;
    v78 = 2;
    v44 = sub_10000F40C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v77, &type metadata for Data, &v78, v68, &type metadata for Data, v44);
    *(_OWORD *)(v38 + v41[7]) = v77;
    LOBYTE(v77) = 3;
    v45 = KeyedDecodingContainer.decode(_:forKey:)(&v77, v68);
    v46 = (uint64_t *)(v38 + v41[6]);
    *v46 = v45;
    v46[1] = v47;
    LOBYTE(v77) = 4;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v6, &v77, v68, v6, v66);
    v39((char *)(v38 + v41[8]), v34, v6);
    v78 = 5;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v77, &type metadata for Data, &v78, v68, &type metadata for Data, v44);
    *(_OWORD *)(v38 + v41[9]) = v77;
    LOBYTE(v77) = 6;
    v48 = KeyedDecodingContainer.decode(_:forKey:)(&v77, v68);
    v49 = v72;
    *(_BYTE *)(v38 + v41[10]) = v48 & 1;
    LOBYTE(v77) = 7;
    v50 = (uint64_t)v65;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, &v77, v68, v6, v66);
    sub_100013AEC(v50, v49);
    LOBYTE(v77) = 8;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v68);
    v53 = v52;
    v54 = (uint64_t *)v74;
    swift_bridgeObjectRelease(*((_QWORD *)v74 + 1));
    *v54 = v51;
    v54[1] = v53;
    LOBYTE(v77) = 9;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v68);
    v56 = v63;
    *v63 = v55;
    *((_BYTE *)v56 + 8) = v57 & 1;
    LOBYTE(v77) = 10;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v68);
    v60 = v59;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v67, v68);
    v61 = (uint64_t *)v70;
    swift_bridgeObjectRelease(*((_QWORD *)v70 + 1));
    *v61 = v58;
    v61[1] = v60;
    v62 = (uint64_t)v76;
    sub_100013B34((uint64_t)v76, v64);
    sub_100006F58(v71);
    return sub_100013B78(v62);
  }
}

uint64_t sub_100011934(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  int *v38;
  __int128 v39;
  char v40;

  v3 = v1;
  v5 = sub_1000080B4((uint64_t *)&unk_10028BBC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_100013A68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeneficiaryInfoRecord.CodingKeys, &type metadata for BeneficiaryInfoRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v39) = 1;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v39, v5, v13, v14);
  if (!v2)
  {
    v15 = type metadata accessor for BeneficiaryInfoRecord(0);
    v16 = (uint64_t *)(v3 + *(int *)(v15 + 20));
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v39) = 0;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v39, v5);
    v38 = (int *)v15;
    v39 = *(_OWORD *)(v3 + *(int *)(v15 + 28));
    v40 = 2;
    v19 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v40, v5, &type metadata for Data, v19);
    v37 = v19;
    v20 = v38;
    v21 = (uint64_t *)(v3 + v38[6]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v39) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v39, v5);
    v24 = v3 + v20[8];
    LOBYTE(v39) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v39, v5, v13, v14);
    v39 = *(_OWORD *)(v3 + v20[9]);
    v40 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v39, &v40, v5, &type metadata for Data, v37);
    v25 = *(unsigned __int8 *)(v3 + v20[10]);
    LOBYTE(v39) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v39, v5);
    v26 = v3 + v20[11];
    LOBYTE(v39) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v39, v5, v13, v14);
    v27 = (uint64_t *)(v3 + v20[12]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v39) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v39, v5);
    v30 = (uint64_t *)(v3 + v20[13]);
    v31 = *v30;
    v32 = *((unsigned __int8 *)v30 + 8);
    LOBYTE(v39) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v39, v5);
    v33 = (uint64_t *)(v3 + v20[14]);
    v34 = *v33;
    v35 = v33[1];
    LOBYTE(v39) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v39, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100011C84@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(char *, char *, uint64_t);
  id v53;
  NSString v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  NSObject **v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t result;
  NSString v81;
  id v82;
  NSString v83;
  id v84;
  NSString v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  NSObject **v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  NSObject **v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  void (*v116)(char *, uint64_t);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  NSString v120;
  id v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  NSString v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  NSString v130;
  id v131;
  id v132;
  uint64_t *v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, char *, uint64_t);
  char *v143;
  NSString v144;
  id v145;
  id v146;
  void (*v147)(char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  id v163;
  uint64_t (*v164)(void);
  char *v165;
  char *v166;
  uint64_t *v167;
  char *v168;
  _QWORD *v169;
  char *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  _QWORD v177[2];
  uint64_t v178;

  v6 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v8 = __chkstk_darwin(v6, v7);
  v166 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v158 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v158 - v15;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v165 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v22);
  v168 = (char *)&v158 - v24;
  __chkstk_darwin(v23, v25);
  v170 = (char *)&v158 - v26;
  v27 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v28 = a3 + v27[11];
  v173 = v18;
  v174 = v17;
  v29 = *(uint64_t (**)(void))(v18 + 56);
  v171 = v28;
  v164 = v29;
  v30 = v29();
  v31 = (_QWORD *)(a3 + v27[12]);
  *v31 = 0;
  v31[1] = 0;
  v32 = a3 + v27[13];
  *(_QWORD *)v32 = 0;
  v167 = (uint64_t *)v32;
  *(_BYTE *)(v32 + 8) = 1;
  v33 = (_QWORD *)(a3 + v27[14]);
  *v33 = 0;
  v33[1] = 0;
  v172 = v33;
  v175 = a1;
  v34 = CKRecord.recordType.getter(v30);
  v36 = v35;
  if (v34 == 0xD000000000000020 && v35 == 0x80000001002094E0)
  {
    swift_bridgeObjectRelease(0x80000001002094E0);
  }
  else
  {
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000020, 0x80000001002094E0, 0);
    swift_bridgeObjectRelease(v36);
    if ((v37 & 1) == 0)
    {
      type metadata accessor for InheritanceError(0);
      v68 = v67;
      v178 = 2;
      v69 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v70 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v71 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v69, v68, v70);
      swift_willThrow(v71);

      goto LABEL_16;
    }
  }
  v162 = a2;
  v169 = v31;
  v38 = v175;
  v39 = objc_msgSend(v175, "recordID");
  v40 = objc_msgSend(v39, "recordName");

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  UUID.init(uuidString:)(v41, v43);
  swift_bridgeObjectRelease(v43);
  v45 = v173;
  v44 = v174;
  v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48);
  if (v46(v16, 1, v174) == 1)
  {
    sub_100013AAC((uint64_t)v16);
    type metadata accessor for InheritanceError(0);
    v48 = v47;
    v178 = 2;
    v49 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v50 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v51 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v49, v48, v50);
    swift_willThrow(v51);

    v31 = v169;
LABEL_16:
    v73 = v171;
    v72 = v172;
LABEL_19:
    sub_100013AAC(v73);
    swift_bridgeObjectRelease(v31[1]);
    return swift_bridgeObjectRelease(v72[1]);
  }
  v52 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v52(v170, v16, v44);
  v53 = objc_msgSend(v38, "encryptedValuesByKey");
  v54 = String._bridgeToObjectiveC()();
  v163 = v53;
  v55 = objc_msgSend(v53, "objectForKeyedSubscript:", v54);

  if (!v55
    || (v178 = (uint64_t)v55,
        v56 = sub_1000080B4(&qword_10028DB30),
        (swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) == 0))
  {
LABEL_11:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v59 = type metadata accessor for Logger(0);
    sub_100005288(v59, (uint64_t)qword_1002A89F0);
    v60 = v175;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v63 = 138412290;
      v176 = (uint64_t)v60;
      v65 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v64 = v60;

      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Missing Inheritance beneficiaryID - %@", v63, 0xCu);
      v66 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v64, 1, v66);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {

      v61 = v60;
    }
    v72 = v172;
    v74 = v173;
    v31 = v169;
    v73 = v171;

    type metadata accessor for InheritanceError(0);
    v76 = v75;
    v178 = 2;
    v77 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v78 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v79 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v77, v76, v78);
    swift_willThrow(v79);
    swift_unknownObjectRelease(v163);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v170, v174);
    goto LABEL_19;
  }
  v57 = v177[0];
  UUID.init(uuidString:)(v176, v177[0]);
  swift_bridgeObjectRelease(v57);
  v58 = v174;
  if (v46(v13, 1, v174) == 1)
  {
    sub_100013AAC((uint64_t)v13);
    goto LABEL_11;
  }
  v52(v168, v13, v58);
  v81 = String._bridgeToObjectiveC()();
  v82 = objc_msgSend(v163, "objectForKeyedSubscript:", v81);

  if (!v82 || (v178 = (uint64_t)v82, (swift_dynamicCast(&v176, &v178, v56, &type metadata for Data, 6) & 1) == 0))
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v90 = type metadata accessor for Logger(0);
    sub_100005288(v90, (uint64_t)qword_1002A89F0);
    v91 = v175;
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(12, -1);
      v95 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v94 = 138412290;
      v176 = (uint64_t)v91;
      v96 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v95 = v91;

      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Missing Inheritance accessKey - %@", v94, 0xCu);
      v97 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v95, 1, v97);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v94, -1, -1);
    }
    else
    {

      v92 = v91;
    }
    v72 = v172;
    v98 = v173;
    v31 = v169;
    v73 = v171;

    type metadata accessor for InheritanceError(0);
    v100 = v99;
    v178 = 2;
    v101 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v102 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v103 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v101, v100, v102);
    swift_willThrow(v103);
    goto LABEL_40;
  }
  v160 = v176;
  v161 = v177[0];
  v83 = String._bridgeToObjectiveC()();
  v84 = objc_msgSend(v163, "objectForKeyedSubscript:", v83);

  if (!v84 || (v178 = (uint64_t)v84, (swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) == 0))
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v104 = type metadata accessor for Logger(0);
    sub_100005288(v104, (uint64_t)qword_1002A89F0);
    v91 = v175;
    v105 = Logger.logObject.getter(v91);
    v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12, -1);
      v108 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v107 = 138412290;
      v176 = (uint64_t)v91;
      v109 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v108 = v91;

      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Missing benefactorAltDSID - %@", v107, 0xCu);
      v110 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v108, 1, v110);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v107, -1, -1);
    }
    else
    {

      v105 = v91;
    }
    v72 = v172;
    v98 = v173;
    v31 = v169;
    v73 = v171;

    type metadata accessor for InheritanceError(0);
    v112 = v111;
    v178 = 2;
    v113 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v114 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v115 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v113, v112, v114);
    swift_willThrow(v115);
    sub_10000F494(v160, v161);
LABEL_40:
    swift_unknownObjectRelease(v163);

    v116 = *(void (**)(char *, uint64_t))(v98 + 8);
    v117 = v174;
    v116(v168, v174);
    v116(v170, v117);
    goto LABEL_19;
  }
  v158 = v177[0];
  v159 = v176;
  v85 = String._bridgeToObjectiveC()();
  v86 = objc_msgSend(v163, "objectForKeyedSubscript:", v85);

  if (v86)
  {
    v178 = (uint64_t)v86;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v87 = v177[0];
      v88 = (uint64_t)v166;
      UUID.init(uuidString:)(v176, v177[0]);
      swift_bridgeObjectRelease(v87);
      v89 = v174;
      if (v46((char *)v88, 1, v174) == 1)
      {
        sub_100013AAC(v88);
      }
      else
      {
        v118 = v165;
        v52(v165, (char *)v88, v89);
        v119 = v171;
        sub_100013AAC(v171);
        v52((char *)v119, v118, v89);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v164)(v119, 0, 1, v89);
      }
    }
  }
  v120 = String._bridgeToObjectiveC()();
  v121 = objc_msgSend(v163, "objectForKeyedSubscript:", v120);

  v122 = v169;
  if (v121)
  {
    v178 = (uint64_t)v121;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v123 = v176;
      v124 = v177[0];
      v125 = v172;
      swift_bridgeObjectRelease(v172[1]);
      *v125 = v123;
      v125[1] = v124;
    }
  }
  v126 = String._bridgeToObjectiveC()();
  v127 = objc_msgSend(v163, "objectForKeyedSubscript:", v126);

  if (v127)
  {
    v178 = (uint64_t)v127;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v128 = v176;
      v129 = v177[0];
      swift_bridgeObjectRelease(v122[1]);
      *v122 = v128;
      v122[1] = v129;
    }
  }
  v130 = String._bridgeToObjectiveC()();
  v131 = objc_msgSend(v163, "objectForKeyedSubscript:", v130);

  v132 = v175;
  if (v131)
  {
    v176 = (uint64_t)v131;
    if ((swift_dynamicCast(&v178, &v176, v56, &type metadata for UInt, 6) & 1) != 0)
    {
      v133 = v167;
      *v167 = v178;
      *((_BYTE *)v133 + 8) = 0;
    }
  }
  v134 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v132, "encodeSystemFieldsWithCoder:", v134);
  objc_msgSend(v134, "finishEncoding");
  v135 = objc_msgSend(v134, "encodedData");
  v136 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v135);
  v138 = v137;

  v139 = (uint64_t *)(a3 + v27[9]);
  *v139 = v136;
  v139[1] = v138;
  v141 = v173;
  v140 = v174;
  v142 = *(void (**)(uint64_t, char *, uint64_t))(v173 + 16);
  v142(a3 + v27[8], v170, v174);
  v143 = v168;
  v142(a3, v168, v140);
  v144 = String._bridgeToObjectiveC()();
  v145 = v163;
  v146 = objc_msgSend(v163, "objectForKeyedSubscript:", v144);
  swift_unknownObjectRelease(v145);

  v147 = *(void (**)(char *, uint64_t))(v141 + 8);
  v147(v143, v140);
  result = ((uint64_t (*)(char *, uint64_t))v147)(v170, v140);
  if (v146)
  {
    v178 = (uint64_t)v146;
    result = swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6);
    v148 = v176;
    v149 = v177[0];
    if (!(_DWORD)result)
    {
      v148 = 0;
      v149 = 0;
    }
  }
  else
  {
    v148 = 0;
    v149 = 0;
  }
  v150 = v162;
  v152 = v160;
  v151 = v161;
  v154 = v158;
  v153 = v159;
  v155 = (uint64_t *)(a3 + v27[5]);
  *v155 = v148;
  v155[1] = v149;
  v156 = (uint64_t *)(a3 + v27[7]);
  *v156 = v152;
  v156[1] = v151;
  v157 = (uint64_t *)(a3 + v27[6]);
  *v157 = v153;
  v157[1] = v154;
  *(_BYTE *)(a3 + v27[10]) = v150 & 1;
  return result;
}

uint64_t sub_100012BE8(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t ObjectType;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  __int128 v78;
  __int128 v79;
  void *v80;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v75 = (uint64_t)&v72 - v10;
  v11 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v11);
  v13 = CKRecordKeyValueSetting.subscript.getter(&v78, 0x69636966656E6562, 0xED00004449797261);
  v14 = *((_QWORD *)&v78 + 1);
  v15 = v78;
  v16 = UUID.uuidString.getter(v13);
  v18 = v17;
  v74 = v8;
  if (!v14)
  {
    v19 = swift_bridgeObjectRelease(v17);
LABEL_7:
    v21 = UUID.uuidString.getter(v19);
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    v80 = &protocol witness table for String;
    *(_QWORD *)&v78 = v21;
    *((_QWORD *)&v78 + 1) = v22;
    CKRecordKeyValueSetting.subscript.setter(&v78, 0x69636966656E6562, 0xED00004449797261, ObjectType);
    goto LABEL_8;
  }
  if (v15 == v16 && v14 == v17)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v18);
    goto LABEL_8;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v16, v17, 0);
  swift_bridgeObjectRelease(v14);
  v19 = swift_bridgeObjectRelease(v18);
  if ((v20 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0xD000000000000011, 0x8000000100209480);
  v23 = *((_QWORD *)&v78 + 1);
  v24 = v78;
  v25 = type metadata accessor for BeneficiaryInfoRecord(0);
  v76 = v2;
  v77 = (int *)v25;
  v26 = (_QWORD *)(v2 + *(int *)(v25 + 20));
  v28 = *v26;
  v27 = v26[1];
  if (v23)
  {
    if (!v27)
    {
      swift_bridgeObjectRelease(v23);
      v80 = 0;
      v78 = 0u;
      v79 = 0u;
LABEL_18:
      swift_bridgeObjectRetain(v27);
      CKRecordKeyValueSetting.subscript.setter(&v78, 0xD000000000000011, 0x8000000100209480, ObjectType);
      goto LABEL_19;
    }
    if (v24 == v28 && v23 == v27)
    {
      swift_bridgeObjectRelease(v23);
      goto LABEL_19;
    }
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, *v26, v26[1], 0);
    swift_bridgeObjectRelease(v23);
    if ((v29 & 1) == 0)
    {
LABEL_17:
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      v80 = &protocol witness table for String;
      *(_QWORD *)&v78 = v28;
      *((_QWORD *)&v78 + 1) = v27;
      goto LABEL_18;
    }
  }
  else if (v27)
  {
    goto LABEL_17;
  }
LABEL_19:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0x654B737365636361, 0xED00006174614479);
  v30 = v78;
  v31 = (uint64_t *)(v76 + v77[7]);
  v32 = *v31;
  v33 = v31[1];
  sub_10000F450(*v31, v33);
  if (*((_QWORD *)&v30 + 1) >> 60 == 15)
  {
    sub_1000144D8(v30, *((unint64_t *)&v30 + 1));
    sub_1000144D8(v32, v33);
    v34 = v76;
LABEL_22:
    *((_QWORD *)&v79 + 1) = &type metadata for Data;
    v80 = &protocol witness table for Data;
    *(_QWORD *)&v78 = v32;
    *((_QWORD *)&v78 + 1) = v33;
    sub_10000F450(v32, v33);
    CKRecordKeyValueSetting.subscript.setter(&v78, 0x654B737365636361, 0xED00006174614479, ObjectType);
    goto LABEL_23;
  }
  sub_100014534(v30, *((unint64_t *)&v30 + 1));
  sub_10000EA4C(v30, *((uint64_t *)&v30 + 1));
  v36 = v35;
  sub_10000F494(v32, v33);
  sub_1000144D8(v30, *((unint64_t *)&v30 + 1));
  sub_1000144D8(v30, *((unint64_t *)&v30 + 1));
  v34 = v76;
  if ((v36 & 1) == 0)
    goto LABEL_22;
LABEL_23:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0xD00000000000001BLL, 0x80000001002094A0);
  v37 = *((_QWORD *)&v78 + 1);
  v38 = (unint64_t *)(v34 + v77[6]);
  v40 = *v38;
  v39 = v38[1];
  if (!*((_QWORD *)&v78 + 1))
    goto LABEL_27;
  if (v78 == __PAIR128__(v39, v40))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
    goto LABEL_28;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, *((_QWORD *)&v78 + 1), *v38, v38[1], 0);
  swift_bridgeObjectRelease(v37);
  if ((v41 & 1) == 0)
  {
LABEL_27:
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    v80 = &protocol witness table for String;
    *(_QWORD *)&v78 = v40;
    *((_QWORD *)&v78 + 1) = v39;
    swift_bridgeObjectRetain(v39);
    CKRecordKeyValueSetting.subscript.setter(&v78, 0xD00000000000001BLL, 0x80000001002094A0, ObjectType);
  }
LABEL_28:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0x656550544F77656ELL, 0xEB00000000444972);
  v42 = v78;
  v43 = v34 + v77[11];
  v44 = v75;
  sub_1000144EC(v43, v75);
  v45 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v44, 1, v45);
  if ((_DWORD)v48 == 1)
  {
    sub_100013AAC(v44);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_43;
    goto LABEL_36;
  }
  v73 = v42;
  v49 = UUID.uuidString.getter(v48);
  v51 = v50;
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
  if (!*((_QWORD *)&v42 + 1))
  {
    if (!v51)
      goto LABEL_43;
    goto LABEL_38;
  }
  if (!v51)
  {
LABEL_36:
    v51 = *((_QWORD *)&v42 + 1);
LABEL_38:
    swift_bridgeObjectRelease(v51);
LABEL_39:
    v52 = (uint64_t)v74;
    sub_1000144EC(v43, (uint64_t)v74);
    v53 = v47(v52, 1, v45);
    if ((_DWORD)v53 == 1)
    {
      sub_100013AAC(v52);
      v78 = 0u;
      v79 = 0u;
      v80 = 0;
    }
    else
    {
      v54 = UUID.uuidString.getter(v53);
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      v80 = &protocol witness table for String;
      *(_QWORD *)&v78 = v54;
      *((_QWORD *)&v78 + 1) = v55;
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v52, v45);
    }
    CKRecordKeyValueSetting.subscript.setter(&v78, 0x656550544F77656ELL, 0xEB00000000444972, ObjectType);
    goto LABEL_43;
  }
  if (v73 == v49 && *((_QWORD *)&v42 + 1) == (_QWORD)v42)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
    swift_bridgeObjectRelease(v42);
    goto LABEL_43;
  }
  v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, *((_QWORD *)&v42 + 1), v49, v42, 0);
  swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
  swift_bridgeObjectRelease(v42);
  if ((v71 & 1) == 0)
    goto LABEL_39;
LABEL_43:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0xD000000000000014, 0x80000001002094C0);
  v56 = *((_QWORD *)&v78 + 1);
  v57 = v76;
  v58 = (unint64_t *)(v76 + v77[14]);
  v60 = *v58;
  v59 = v58[1];
  if (*((_QWORD *)&v78 + 1))
  {
    if (!v59)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
      v80 = 0;
      v78 = 0u;
      v79 = 0u;
LABEL_52:
      swift_bridgeObjectRetain(v59);
      CKRecordKeyValueSetting.subscript.setter(&v78, 0xD000000000000014, 0x80000001002094C0, ObjectType);
      goto LABEL_53;
    }
    if (v78 == __PAIR128__(v59, v60))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
      goto LABEL_53;
    }
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, *((_QWORD *)&v78 + 1), *v58, v58[1], 0);
    swift_bridgeObjectRelease(v56);
    if ((v61 & 1) == 0)
    {
LABEL_51:
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      v80 = &protocol witness table for String;
      *(_QWORD *)&v78 = v60;
      *((_QWORD *)&v78 + 1) = v59;
      goto LABEL_52;
    }
  }
  else if (v59)
  {
    goto LABEL_51;
  }
LABEL_53:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0x6144726961706572, 0xEA00000000006574);
  v62 = *((_QWORD *)&v78 + 1);
  v63 = (unint64_t *)(v57 + v77[12]);
  v65 = *v63;
  v64 = v63[1];
  if (*((_QWORD *)&v78 + 1))
  {
    if (!v64)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
      v80 = 0;
      v78 = 0u;
      v79 = 0u;
LABEL_62:
      swift_bridgeObjectRetain(v64);
      CKRecordKeyValueSetting.subscript.setter(&v78, 0x6144726961706572, 0xEA00000000006574, ObjectType);
      goto LABEL_63;
    }
    if (v78 == __PAIR128__(v64, v65))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v78 + 1));
      goto LABEL_63;
    }
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, *((_QWORD *)&v78 + 1), *v63, v63[1], 0);
    swift_bridgeObjectRelease(v62);
    if ((v66 & 1) == 0)
    {
LABEL_61:
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      v80 = &protocol witness table for String;
      *(_QWORD *)&v78 = v65;
      *((_QWORD *)&v78 + 1) = v64;
      goto LABEL_62;
    }
  }
  else if (v64)
  {
    goto LABEL_61;
  }
LABEL_63:
  CKRecordKeyValueSetting.subscript.getter(&v78, 0x6F43726961706572, 0xEB00000000746E75);
  v67 = (uint64_t *)(v57 + v77[13]);
  v68 = *v67;
  v69 = *((_BYTE *)v67 + 8);
  if ((BYTE8(v78) & 1) != 0)
  {
    if ((v69 & 1) != 0)
      return swift_unknownObjectRelease(v11);
    goto LABEL_69;
  }
  if ((v69 & 1) != 0)
  {
    v80 = 0;
    v78 = 0u;
    v79 = 0u;
LABEL_70:
    CKRecordKeyValueSetting.subscript.setter(&v78, 0x6F43726961706572, 0xEB00000000746E75, ObjectType);
    return swift_unknownObjectRelease(v11);
  }
  if ((_QWORD)v78 != v68)
  {
LABEL_69:
    *((_QWORD *)&v79 + 1) = &type metadata for UInt;
    v80 = &protocol witness table for UInt;
    *(_QWORD *)&v78 = v68;
    goto LABEL_70;
  }
  return swift_unknownObjectRelease(v11);
}

uint64_t sub_100013500@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100011250(a1, a2);
}

uint64_t sub_100013514(_QWORD *a1)
{
  return sub_100011934(a1);
}

void sub_100013528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v1, v2);
  v3 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v3, v4);
  v5 = (uint64_t *)(v0 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 28));
  v6 = v5[1];
  sub_10000F450(*v5, v6);
  v7 = sub_100005150((unint64_t *)&unk_10028BC00, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v1, v7);
  __asm { BR              X9 }
}

uint64_t sub_100013644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v7 - 112) = v4;
  *(_WORD *)(v7 - 104) = v5;
  *(_BYTE *)(v7 - 102) = BYTE2(v5);
  *(_BYTE *)(v7 - 101) = BYTE3(v5);
  *(_BYTE *)(v7 - 100) = BYTE4(v5);
  *(_BYTE *)(v7 - 99) = BYTE5(v5);
  dispatch thunk of HashFunction.update(bufferPointer:)(v7 - 112, v7 - 112 + BYTE6(v5), v2, v6);
  sub_10000F494(v4, v5);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 128) + 8))(v3, v2);
  sub_10000F494(v4, v5);
  v8 = sub_100005150(&qword_100291CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v9 = ((uint64_t (*)(uint64_t, uint64_t))Digest.makeIterator())(v0, v8);
  sub_100013DB4(v9, v10);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  v13 = sub_1001B0AB4(v12);
  swift_release(v12);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 120) + 8))(v1, v0);
  return v13;
}

uint64_t sub_100013870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;

  v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v1 = type metadata accessor for BeneficiaryInfoRecord(0);
  v19 = v1;
  v2 = sub_1000080B4(&qword_10028BBD8);
  v3 = String.init<A>(describing:)(&v19, v2);
  v5 = v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v19 = v3;
  v20 = v5;
  v6._object = (void *)0x8000000100209460;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x656C646E61680A2CLL;
  v11._object = (void *)0xEB00000000202D20;
  String.append(_:)(v11);
  v12 = (_QWORD *)(v0 + *(int *)(v1 + 20));
  v13 = v12[1];
  v18[0] = *v12;
  v18[1] = v13;
  swift_bridgeObjectRetain(v13);
  v14 = sub_1000080B4(&qword_10028BBE8);
  v15._countAndFlagsBits = String.init<A>(describing:)(v18, v14);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  return v19;
}

uint64_t sub_1000139D0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150(&qword_10028BB80, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_100218F08);
  result = sub_100005150(&qword_10028BB88, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_100218EE0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100013A2C(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150((unint64_t *)&unk_10028BB90, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_100218F30);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100013A68()
{
  unint64_t result;

  result = qword_10028BBA8;
  if (!qword_10028BBA8)
  {
    result = swift_getWitnessTable(&unk_1002190D8, &type metadata for BeneficiaryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BBA8);
  }
  return result;
}

uint64_t sub_100013AAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeneficiaryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013B78(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeneficiaryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100013BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSUUID v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v10 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = String._bridgeToObjectiveC()();
  v12 = a1 + *(int *)(v10 + 20);
  v13 = *(_QWORD *)(v12 + 8);
  if (v13)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v12 + 8));
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "initWithBeneficiaryID:benefactorAltDSID:handle:", v9.super.isa, v11, v14);

  v16 = (uint64_t *)(a1 + *(int *)(v10 + 28));
  v17 = *v16;
  v18 = v16[1];
  v19 = v15;
  sub_10000F450(v17, v18);
  sub_10000EE10(v17, v18, v26);
  v20 = v26[0];
  v21 = v26[1];
  v22 = v26[3];
  v23 = v26[5];
  sub_100013F20((uint64_t)v26, (uint64_t)&v27);
  v24 = v19;
  if (*((_QWORD *)&v28 + 1))
  {
    v30[0] = v27;
    v30[1] = v28;
    v30[2] = v29;
    sub_100013F68();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    sub_10000F450(v20, v21);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    v24 = sub_10000E54C((uint64_t)v8, (uint64_t *)v30);
    objc_msgSend(v19, "setAccessKey:", v24);
    sub_100013FA4((uint64_t)v26);

  }
  sub_100013B78(a1);
  return v19;
}

void sub_100013DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  char *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = &_swiftEmptyArrayStorage;
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      swift_bridgeObjectRetain(a1);
      v4 = 0;
      v7 = (char *)&_swiftEmptyArrayStorage + 32;
      while (1)
      {
        v8 = *(_BYTE *)(a1 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          v12 = sub_1000080B4((uint64_t *)&unk_10028BC10);
          v13 = (_QWORD *)swift_allocObject(v12, v11 + 32, 7);
          v14 = 2 * j__malloc_size(v13) - 64;
          v13[2] = v11;
          v13[3] = v14;
          v15 = (unint64_t)(v13 + 4);
          v16 = v3[3] >> 1;
          if (v3[2])
          {
            if (v13 != v3 || v15 >= (unint64_t)v3 + v16 + 32)
              memmove(v13 + 4, v3 + 4, v16);
            v3[2] = 0;
          }
          v7 = (char *)(v15 + v16);
          v4 = (v14 >> 1) - v16;
          swift_release(v3);
          v3 = v13;
        }
        v18 = __OFSUB__(v4--, 1);
        if (v18)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          swift_bridgeObjectRelease(a1);
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v19 = v3[3];
  if (v19 >= 2)
  {
    v20 = v19 >> 1;
    v18 = __OFSUB__(v20, v4);
    v21 = v20 - v4;
    if (!v18)
    {
      v3[2] = v21;
      return;
    }
LABEL_33:
    __break(1u);
  }
}

uint64_t sub_100013F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028BBF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100013F68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BBF8;
  if (!qword_10028BBF8)
  {
    v1 = objc_opt_self(AKInheritanceAccessKey);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028BBF8);
  }
  return result;
}

uint64_t sub_100013FA4(uint64_t a1)
{
  sub_100013FD8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_100013FD8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    sub_10000F494(result, a2);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100014010(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E6168, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x654B737365636361 && a2 == 0xED00006174614479)
  {
    v8 = 0xED00006174614479;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B737365636361, 0xED00006174614479, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x8000000100209630;
    if (a2 == 0x8000000100209630)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100209630, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    v12 = 0x8000000100209670;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x656550544F77656ELL && a2 == 0xEB00000000444972)
  {
    v13 = 0xEB00000000444972;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656550544F77656ELL, 0xEB00000000444972, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x6144726961706572 && a2 == 0xEA00000000006574)
  {
    v14 = 0xEA00000000006574;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144726961706572, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x6F43726961706572 && a2 == 0xEB00000000746E75)
  {
    v15 = 0xEB00000000746E75;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726961706572, 0xEB00000000746E75, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001002094C0)
  {
    swift_bridgeObjectRelease(0x80000001002094C0);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000001002094C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_1000144D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000F494(result, a2);
  return result;
}

uint64_t sub_1000144EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014534(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000F450(result, a2);
  return result;
}

uint64_t sub_100014548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_100014590()
{
  unint64_t result;

  result = qword_10028BC30;
  if (!qword_10028BC30)
  {
    result = swift_getWitnessTable(&unk_100218C94, &type metadata for InheritanceAccessKeyRecord);
    atomic_store(result, (unint64_t *)&qword_10028BC30);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BeneficiaryInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BeneficiaryInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1000146B0 + 4 * byte_100218EB0[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1000146E4 + 4 * byte_100218EAB[v4]))();
}

uint64_t sub_1000146E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000146EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000146F4);
  return result;
}

uint64_t sub_100014700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100014708);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10001470C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014714(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryInfoRecord.CodingKeys()
{
  return &type metadata for BeneficiaryInfoRecord.CodingKeys;
}

char *sub_100014730(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v34);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = a3[6];
    v12 = &a1[v10];
    v13 = &a2[v10];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = &a1[v11];
    v16 = &a2[v11];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = a3[7];
    v19 = (uint64_t *)&a1[v18];
    v20 = (uint64_t *)&a2[v18];
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    sub_10000F450(v21, v22);
    *v19 = v21;
    v19[1] = v22;
    v9(&a1[a3[8]], &a2[a3[8]], v7);
    v23 = a3[9];
    v24 = (uint64_t *)&a1[v23];
    v25 = (uint64_t *)&a2[v23];
    v26 = *v25;
    v27 = v25[1];
    sub_10000F450(*v25, v27);
    v28 = a3[10];
    v29 = a3[11];
    v30 = a2[v28];
    *v24 = v26;
    v24[1] = v27;
    a1[v28] = v30;
    v31 = &a1[v29];
    v32 = &a2[v29];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v29], 1, v7))
    {
      v33 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v9(v31, v32, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v7);
    }
    v35 = a3[12];
    v36 = a3[13];
    v37 = &a1[v35];
    v38 = &a2[v35];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = &a1[v36];
    v41 = &a2[v36];
    v40[8] = v41[8];
    *(_QWORD *)v40 = *(_QWORD *)v41;
    v42 = a3[14];
    v43 = &a1[v42];
    v44 = &a2[v42];
    v45 = *((_QWORD *)v44 + 1);
    *(_QWORD *)v43 = *(_QWORD *)v44;
    *((_QWORD *)v43 + 1) = v45;
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v45);
  }
  return a1;
}

uint64_t sub_100014910(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  sub_10000F494(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  v6(a1 + a2[8], v4);
  sub_10000F494(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  v7 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
}

uint64_t sub_1000149F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(a1 + v10);
  v15 = (_QWORD *)(a2 + v10);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  sub_10000F450(v20, v21);
  *v18 = v20;
  v18[1] = v21;
  v8(a1 + a3[8], a2 + a3[8], v6);
  v22 = a3[9];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10000F450(*v24, v26);
  v27 = a3[10];
  v28 = a3[11];
  v29 = *(_BYTE *)(a2 + v27);
  *v23 = v25;
  v23[1] = v26;
  *(_BYTE *)(a1 + v27) = v29;
  v30 = (void *)(a1 + v28);
  v31 = (const void *)(a2 + v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v28, 1, v6))
  {
    v32 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v30, (uint64_t)v31, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  v33 = a3[12];
  v34 = a3[13];
  v35 = (_QWORD *)(a1 + v33);
  v36 = (_QWORD *)(a2 + v33);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = a1 + v34;
  v39 = a2 + v34;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = a3[14];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v43);
  return a1;
}

char *sub_100014BAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t (*v36)(const void *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v12 = *((_QWORD *)v11 + 1);
  v13 = *((_QWORD *)v10 + 1);
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *((_QWORD *)v16 + 1);
  v18 = *((_QWORD *)v15 + 1);
  *((_QWORD *)v15 + 1) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (uint64_t *)&a1[v19];
  v21 = (uint64_t *)&a2[v19];
  v22 = *v21;
  v23 = v21[1];
  sub_10000F450(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_10000F494(v24, v25);
  v8(&a1[a3[8]], &a2[a3[8]], v6);
  v26 = a3[9];
  v27 = (uint64_t *)&a1[v26];
  v28 = (uint64_t *)&a2[v26];
  v29 = *v28;
  v30 = v28[1];
  sub_10000F450(*v28, v30);
  v31 = *v27;
  v32 = v27[1];
  *v27 = v29;
  v27[1] = v30;
  sub_10000F494(v31, v32);
  a1[a3[10]] = a2[a3[10]];
  v33 = a3[11];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v27) = v36(&a1[v33], 1, v6);
  v37 = v36(v35, 1, v6);
  if (!(_DWORD)v27)
  {
    if (!v37)
    {
      v8(v34, v35, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v6);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v38 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v34, v35, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v34, 0, 1, v6);
LABEL_7:
  v39 = a3[12];
  v40 = &a1[v39];
  v41 = &a2[v39];
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = *((_QWORD *)v41 + 1);
  v43 = *((_QWORD *)v40 + 1);
  *((_QWORD *)v40 + 1) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[13];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v47 = *(_QWORD *)v46;
  v45[8] = v46[8];
  *(_QWORD *)v45 = v47;
  v48 = a3[14];
  v49 = &a1[v48];
  v50 = &a2[v48];
  *(_QWORD *)v49 = *(_QWORD *)v50;
  v51 = *((_QWORD *)v50 + 1);
  v52 = *((_QWORD *)v49 + 1);
  *((_QWORD *)v49 + 1) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  return a1;
}

char *sub_100014E08(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v8(&a1[v10], &a2[v10], v6);
  v11 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  a1[v11] = a2[v11];
  v12 = a3[11];
  v13 = &a1[v12];
  v14 = &a2[v12];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v12], 1, v6))
  {
    v15 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v8(v13, v14, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  }
  v16 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  return a1;
}

char *sub_100014F50(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(const void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[7];
  v22 = *(_QWORD *)&a1[v21];
  v23 = *(_QWORD *)&a1[v21 + 8];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  sub_10000F494(v22, v23);
  v8(&a1[a3[8]], &a2[a3[8]], v6);
  v24 = a3[9];
  v25 = *(_QWORD *)&a1[v24];
  v26 = *(_QWORD *)&a1[v24 + 8];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  sub_10000F494(v25, v26);
  v27 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v31 = v30(&a1[v27], 1, v6);
  v32 = v30(v29, 1, v6);
  if (!v31)
  {
    if (!v32)
    {
      v8(v28, v29, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    v33 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v29, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
LABEL_7:
  v34 = a3[12];
  v35 = &a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v38 = *v36;
  v37 = v36[1];
  v39 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v39);
  v40 = a3[13];
  v41 = a3[14];
  v42 = &a1[v40];
  v43 = &a2[v40];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  v42[8] = v43[8];
  v44 = &a1[v41];
  v45 = (uint64_t *)&a2[v41];
  v47 = *v45;
  v46 = v45[1];
  v48 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease(v48);
  return a1;
}

uint64_t sub_100015144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100015150);
}

uint64_t sub_100015150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100015200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001520C);
}

uint64_t sub_10001520C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000152B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[11];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100218FA8;
    v6[2] = &unk_100218FC0;
    v6[3] = &unk_100218FD8;
    v6[4] = v6[0];
    v6[5] = &unk_100218FD8;
    v6[6] = &unk_100218FF0;
    sub_100015374(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = &unk_100218FA8;
      v6[9] = &unk_100219008;
      v6[10] = &unk_100218FA8;
      swift_initStructMetadata(a1, 256, 11, v6, a1 + 16);
    }
  }
}

void sub_100015374(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028BCA0)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028BCA0);
  }
}

unint64_t sub_1000153CC()
{
  unint64_t result;

  result = qword_10028BCF8;
  if (!qword_10028BCF8)
  {
    result = swift_getWitnessTable(&unk_1002190B0, &type metadata for BeneficiaryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BCF8);
  }
  return result;
}

unint64_t sub_100015414()
{
  unint64_t result;

  result = qword_10028BD00;
  if (!qword_10028BD00)
  {
    result = swift_getWitnessTable(&unk_100219020, &type metadata for BeneficiaryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BD00);
  }
  return result;
}

unint64_t sub_10001545C()
{
  unint64_t result;

  result = qword_10028BD08;
  if (!qword_10028BD08)
  {
    result = swift_getWitnessTable(&unk_100219048, &type metadata for BeneficiaryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028BD08);
  }
  return result;
}

unint64_t sub_1000154A0(uint64_t a1)
{
  return sub_100016144(a1, &qword_10028C0E0);
}

unint64_t sub_1000154AC(uint64_t a1)
{
  return sub_100016144(a1, &qword_10028C0D8);
}

unint64_t sub_1000154B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = sub_1000080B4(&qword_10028C0A0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v9;
  }
  sub_1000080B4(&qword_10028C090);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = &v6[*(int *)(v2 + 48)];
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v29 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_100024A20(v14, (uint64_t)v6, &qword_10028C0A0);
    result = sub_10010AA48((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    v21 = v9[7] + 32 * v18;
    v22 = *((_QWORD *)v11 + 2);
    v23 = *((_QWORD *)v11 + 3);
    *(_OWORD *)v21 = *(_OWORD *)v11;
    *(_QWORD *)(v21 + 16) = v22;
    *(_QWORD *)(v21 + 24) = v23;
    v24 = v9[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v9[2] = v26;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001565C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C0F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_10010A9E0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001577C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C0A8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_errorRetain(v9);
    result = sub_10010A9E0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C038);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100024A20(v7, (uint64_t)&v16, &qword_10028C040);
    v8 = v16;
    v9 = v17;
    result = sub_10010A9E0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000080F4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000159C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C0D0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    swift_bridgeObjectRetain(v8);
    sub_10000F450(v9, v10);
    result = sub_10010A9E0(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (uint64_t *)(v4[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_1000080B4(&qword_10028C128);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }
  sub_1000080B4(&qword_10028C130);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_100024A20(v14, (uint64_t)v6, &qword_10028C128);
    result = sub_10010AB10((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v6[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100015C80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C0E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 1);
    v8 = *v6;
    v9 = (id)*(v6 - 2);
    swift_bridgeObjectRetain(v8);
    result = sub_10010AA44(v9);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v9;
    v12 = (_QWORD *)(v4[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015D94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  char v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C0F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *(_BYTE *)v6;
    v8 = *(v6 - 1);
    result = sub_10010AA44(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    *(_BYTE *)(v4[7] + result) = v7;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015E90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C100);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    result = sub_10010AA44(v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v4[6] + v11) = v8;
    *(_QWORD *)(v4[7] + v11) = v7;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100015F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_1000080B4(&qword_10028C108);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }
  sub_1000080B4(&qword_10028C110);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_100024A20(v14, (uint64_t)v6, &qword_10028C108);
    result = sub_10010AA48((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    *(_QWORD *)(v9[7] + 8 * v18) = *(_QWORD *)&v6[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001612C(uint64_t a1)
{
  return sub_100016144(a1, &qword_10028C118);
}

unint64_t sub_100016138(uint64_t a1)
{
  return sub_100016144(a1, &qword_10028C158);
}

unint64_t sub_100016144(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_10010A9E0(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100016258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C160);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v16 = *v6;
    swift_bridgeObjectRetain(v8);
    v9 = (id)v16;
    swift_retain(*((_QWORD *)&v16 + 1));
    result = sub_10010A9E0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v16;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001638C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_1000080B4(&qword_10028C190);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v9;
  }
  sub_1000080B4(&qword_10028C188);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = *(int *)(v2 + 48);
  v12 = v8 + 64;
  v13 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v14 = a1 + v13;
  v15 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_100024A20(v14, (uint64_t)v6, &qword_10028C190);
    result = sub_10010AA48((uint64_t)v6);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = v9[6];
    v20 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v6, v20);
    *(_OWORD *)(v9[7] + 16 * v18) = *(_OWORD *)&v6[v11];
    v21 = v9[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v9[2] = v23;
    v14 += v15;
    if (!--v10)
    {
      swift_release(v9);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100016520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C150);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10010A9E0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100016630(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C140);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100024A20(v7, (uint64_t)v16, &qword_10028C148);
    result = sub_10010AAE0((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000080F4(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100016770(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C198);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100024A20(v7, (uint64_t)&v14, &qword_10028C1A0);
    v8 = v14;
    result = sub_10010AA44(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000080F4(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001689C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v3 = sub_1000080B4(&qword_100294B10);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4(&qword_100295290);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028BD98);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4((uint64_t *)&unk_10028C8F0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000067D4(0, &qword_10028BB50, AKAccountManager_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028BDC0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue;
  v12 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v1 + v11) = v12;
  v13 = (_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
  v17 = type metadata accessor for InheritancePreflightHealthCheck(0);
  v14 = sub_1000080B4(&qword_10028C180);
  *v13 = String.init<A>(describing:)(&v17, v14);
  v13[1] = v15;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter) = a1;
  objc_msgSend(v12, "setMaxConcurrentOperationCount:", 1);
  return v1;
}

uint64_t sub_100016AD4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v5)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;

  v5 = (void (*)(_QWORD))a4;
  if ((a2 & 1) == 0)
    return sub_100016D70(a1, a4, a5);
  swift_errorRetain(a1);
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A8A98);
  sub_1000057BC(a1, 1);
  v10 = swift_retain(a3);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v22 = v15;
    *(_DWORD *)v13 = 136315394;
    v20 = v5;
    v16 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v17 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v17);
    v21 = sub_1001DEF4C(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_release(a3);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v13 + 12) = 2112;
    v18 = _convertErrorToNSError(_:)(a1);
    v21 = v18;
    v5 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    *v14 = v18;
    sub_1000057B0(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - error fetching inheritance records: %@", (uint8_t *)v13, 0x16u);
    v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v14, 1, v19);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_release(a3);
    sub_1000057B0(a1, 1);
  }

  swift_errorRetain(a1);
  v5(a1);
  sub_1000057B0(a1, 1);
  return sub_1000057B0(a1, 1);
}

uint64_t sub_100016D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  objc_class *v22;
  _BYTE *v23;
  uint64_t (**v24)(uint64_t, uint64_t);
  double v25;
  id v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD aBlock[5];
  _QWORD *v41;
  objc_super v42;

  v7 = type metadata accessor for BeneficiaryInfoRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10025F9B8, 24, 7);
  *(_QWORD *)(v12 + 16) = sub_10001577C((uint64_t)&_swiftEmptyArrayStorage);
  v13 = sub_100018CD0(a1);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v33 = a2;
    v34 = a3;
    v16 = *(unsigned __int8 *)(v8 + 80);
    v17 = a1 + ((v16 + 32) & ~v16);
    v18 = *(void **)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue);
    v38 = *(_QWORD *)(v8 + 72);
    v39 = v18;
    v36 = v16 | 7;
    v37 = (v16 + 24) & ~v16;
    v35 = (v9 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = a1;
    v20 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
    v32 = v19;
    swift_bridgeObjectRetain(v19);
    do
    {
      sub_100013B34(v17, (uint64_t)v11);
      v21 = swift_allocObject(&unk_10025F9E0, v20 + 8, v36);
      *(_QWORD *)(v21 + 16) = v3;
      sub_100022144((uint64_t)v11, v21 + v37);
      *(_QWORD *)(v21 + v35) = v14;
      *(_QWORD *)(v21 + v20) = v12;
      v22 = (objc_class *)type metadata accessor for AsyncOperation();
      v23 = objc_allocWithZone(v22);
      v23[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      v24 = (uint64_t (**)(uint64_t, uint64_t))&v23[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *v24 = sub_100022188;
      v24[1] = (uint64_t (*)(uint64_t, uint64_t))v21;
      v42.receiver = v23;
      v42.super_class = v22;
      swift_retain(v12);
      swift_retain(v3);
      *(_QWORD *)&v25 = swift_bridgeObjectRetain(v14).n128_u64[0];
      v26 = objc_msgSendSuper2(&v42, "init", v25);
      objc_msgSend(v39, "addOperation:", v26);

      v17 += v38;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v32);
    a2 = v33;
    a3 = v34;
  }
  else
  {
    swift_bridgeObjectRelease(v13);
  }
  v27 = *(void **)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_queue);
  v28 = (_QWORD *)swift_allocObject(&unk_10025FA08, 48, 7);
  v28[2] = v12;
  v28[3] = v3;
  v28[4] = a2;
  v28[5] = a3;
  aBlock[4] = sub_10002222C;
  v41 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10025FA20;
  v29 = _Block_copy(aBlock);
  v30 = v41;
  swift_retain(v12);
  swift_retain(v3);
  swift_retain(a3);
  swift_release(v30);
  objc_msgSend(v27, "addBarrierBlock:", v29);
  _Block_release(v29);
  return swift_release(v12);
}

uint64_t sub_100017034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage;
  v2 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController;
  v4 = sub_1000080B4(&qword_10028C078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  v6 = sub_1000080B4(&qword_10028C080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__followUpController;
  v8 = sub_1000080B4(&qword_10028CD60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController;
  v10 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore;
  v12 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager;
  v14 = sub_1000080B4(&qword_10028C060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__keychainManager;
  v16 = sub_1000080B4(&qword_10028C0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);

  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName
                                      + 8));
  return v0;
}

uint64_t sub_1000171E4()
{
  uint64_t v0;

  sub_100017034();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100017208()
{
  return type metadata accessor for InheritancePreflightHealthCheck(0);
}

uint64_t type metadata accessor for InheritancePreflightHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_10028BD80;
  if (!qword_10028BD80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritancePreflightHealthCheck);
  return result;
}

void sub_10001724C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[11];

  sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, qword_1002954E0, &qword_100295290);
    if (v5 <= 0x3F)
    {
      v18[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028BD90, &qword_10028BD98);
      if (v7 <= 0x3F)
      {
        v18[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028BDA0, (uint64_t *)&unk_10028C8F0);
        if (v9 <= 0x3F)
        {
          v18[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
          if (v11 <= 0x3F)
          {
            v18[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
            if (v13 <= 0x3F)
            {
              v18[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017400(319);
              if (v15 <= 0x3F)
              {
                v18[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028BDB8, (uint64_t *)&unk_10028BDC0);
                if (v17 <= 0x3F)
                {
                  v18[7] = *(_QWORD *)(v16 - 8) + 64;
                  v18[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
                  v18[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
                  v18[10] = &unk_100219178;
                  swift_updateClassMetadata2(a1, 256, 11, v18, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_100017400(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028BDB0)
  {
    v2 = sub_1000067D4(255, &qword_10028BB50, AKAccountManager_ptr);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028BDB0);
  }
}

void sub_100017464(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10000D908(a3);
    v6 = type metadata accessor for Dependency(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1000174B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100021CE0(a3, a4);
}

uint64_t sub_1000174D8()
{
  return 0;
}

id sub_1000174E0()
{
  return sub_1000174F4(&OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager);
}

id sub_1000174F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  id v26[5];

  v5 = v2;
  v6 = sub_1000080B4(&qword_10028C060);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v26[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028FA50);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v26[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v5 + *a1, v11);
  Dependency.wrappedValue.getter(v26, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v16 = objc_msgSend(*(id *)(*sub_10000732C(v26, (uint64_t)v26[3]) + 16), "aa_primaryAppleAccount");
  if (v16
    && (v17 = v16, v18 = objc_msgSend(v16, "aa_altDSID"), v17, v18))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v20 = v19;

  }
  else
  {
    v20 = 0;
  }
  sub_100006F58(v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v5 + *a2, v6);
  Dependency.wrappedValue.getter(v26, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v21 = v26[0];
  if (v20)
  {
    swift_bridgeObjectRetain(v20);
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v21, "authKitAccountWithAltDSID:", v22);

    swift_bridgeObjectRelease_n(v20, 2);
  }
  else
  {

    return 0;
  }
  return v23;
}

void sub_100017700(void *a1)
{
  sub_100017754(a1, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, &OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
}

void sub_100017754(void *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  id v30;
  uint64_t v31[5];

  v6 = v3;
  v8 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v6 + *a2, v8);
    Dependency.wrappedValue.getter(v31, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v13 = *(void **)(*sub_10000732C(v31, v31[3]) + 16);
    v30 = 0;
    objc_msgSend(v13, "walrusStatus:", &v30);
    if (v30)
    {
      v14 = v30;
      swift_willThrow(v14);
      sub_100006F58(v31);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v15 = type metadata accessor for Logger(0);
      sub_100005288(v15, (uint64_t)qword_1002A8A08);
      swift_retain_n(v6, 2);
      v16 = v14;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = swift_slowAlloc(22, -1);
        v20 = (_QWORD *)swift_slowAlloc(8, -1);
        v21 = swift_slowAlloc(32, -1);
        v31[0] = v21;
        *(_DWORD *)v19 = 136315394;
        v22 = (uint64_t *)(v6 + *a3);
        v23 = *v22;
        v24 = v22[1];
        swift_bridgeObjectRetain(v24);
        v30 = (id)sub_1001DEF4C(v23, v24, v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
        swift_release_n(v6, 2);
        swift_bridgeObjectRelease(v24);
        *(_WORD *)(v19 + 12) = 2112;
        v25 = v16;
        v26 = (void *)_swift_stdlib_bridgeErrorToNSError(v25);
        v30 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
        *v20 = v26;

        _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - Failed to attach Walrus Status: %@", (uint8_t *)v19, 0x16u);
        v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v20, 1, v27);
        swift_slowDealloc(v20, -1, -1);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

        swift_release_n(v6, 2);
      }
    }
    else
    {
      isa = UInt._bridgeToObjectiveC()().super.super.isa;
      sub_100006F58(v31);
      objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAAnalyticsAdvancedDataProtectionState);

    }
  }
}

uint64_t sub_100017AC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100017B2C, 0, 0);
}

uint64_t sub_100017B2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D480 + dword_10028D480);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D484);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_100017BF4;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_100017BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100017C68;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_100024A6C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100017C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A08);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v10 = 136315394;
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v12, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v9, 2);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v16 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v14);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_release_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100017F0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100017F70, 0, 0);
}

uint64_t sub_100017F70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D480 + dword_10028D480);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D484);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_100018038;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_100018038(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100018124;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_1000180AC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000180AC()
{
  uint64_t v0;
  void *v1;
  Class isa;

  v1 = *(void **)(v0 + 72);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  sub_100006F58((_QWORD *)(v0 + 16));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", isa, kAAAnalyticsCliqueStatus);

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A08);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v10 = 136315394;
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v12, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v9, 2);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v16 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v14);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_release_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000183CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100018430, 0, 0);
}

uint64_t sub_100018430()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D478 + dword_10028D478);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D47C);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_1000184F8;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1000184F8(int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10001856C;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    v6 = sub_100024A70;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10001856C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A08);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v10 = 136315394;
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v12, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v9, 2);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v16 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - Failed to attach SOS Status: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v14);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_release_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018810(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100018874, 0, 0);
}

uint64_t sub_100018874()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D478 + dword_10028D478);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D47C);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_10001893C;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_10001893C(int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100018A28;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    v6 = sub_1000189B0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1000189B0()
{
  uint64_t v0;
  void *v1;
  Class isa;

  v1 = *(void **)(v0 + 72);
  isa = Int32._bridgeToObjectiveC()().super.super.isa;
  sub_100006F58((_QWORD *)(v0 + 16));
  objc_msgSend(v1, "setObject:forKeyedSubscript:", isa, kAAAnalyticsCircleSyncingStatus);

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A08);
  swift_retain(v2);
  swift_errorRetain(v1);
  swift_retain(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 80);
  if (v7)
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v18 = v17;
    *(_DWORD *)v10 = 136315394;
    v12 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v11 = *(_QWORD *)(v9 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v11);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v12, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v11);
    swift_release_n(v9, 2);
    *(_WORD *)(v10 + 12) = 2112;
    swift_errorRetain(v8);
    v13 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v16 = v13;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s - Failed to attach SOS Status: %@", (uint8_t *)v10, 0x16u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v14);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_release_n(v9, 2);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100018CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v34;
  void *v35;
  id v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v3 = sub_1000080B4(&qword_10028C0B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__keychainManager, v3);
  Dependency.wrappedValue.getter(v37, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v8 = v38;
  v9 = v39;
  sub_10000732C(v37, v38);
  v10 = objc_msgSend(objc_allocWithZone((Class)AAFKeychainItemDescriptor), "init");
  objc_msgSend(v10, "setItemClass:", 3);
  objc_msgSend(v10, "setUseDataProtection:", 2);
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setAccessGroup:", v11);

  v12 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v9 + 16))(v10, v8, v9);
  sub_100006F58(v37);
  if (v12 && (v13 = objc_msgSend(v12, "value")) != 0)
  {
    v14 = v13;
    v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    v36 = 0;
    sub_1000067D4(0, &qword_10028C0B8, NSKeyedUnarchiver_ptr);
    v18 = sub_1000080B4(&qword_10028C0C0);
    v19 = swift_allocObject(v18, 48, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100219130;
    *(_QWORD *)(v19 + 32) = sub_1000067D4(0, &qword_10028FB80, NSString_ptr);
    v20 = sub_1000067D4(0, &qword_10028C0C8, NSDictionary_ptr);
    *(_QWORD *)(v19 + 40) = v20;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v37, v19, v15, v17);
    swift_bridgeObjectRelease(v19);
    if (v38)
    {
      if (swift_dynamicCast(&v35, v37, (char *)&type metadata for Any + 8, v20, 6))
        v27 = v35;
      else
        v27 = 0;
    }
    else
    {
      sub_100004934((uint64_t)v37, (uint64_t *)&unk_10028E7E0);
      v27 = 0;
    }

    v36 = v27;
    v37[0] = &_swiftEmptyDictionarySingleton;
    v28 = *(_QWORD *)(a1 + 16);
    if (v28)
    {
      v29 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
      v30 = a1 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      v31 = *(_QWORD *)(v29 + 72);
      swift_bridgeObjectRetain(a1);
      do
      {
        sub_10001BF58(v30, &v36, v37);
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease(a1);
      sub_10000F494(v15, v17);
      v26 = (void *)v37[0];
    }
    else
    {
      sub_10000F494(v15, v17);
      v26 = &_swiftEmptyDictionarySingleton;
    }
    v32 = v36;

  }
  else
  {
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A8A98);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Wrapped key data is nil.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = (void *)sub_1000159C8((uint64_t)&_swiftEmptyArrayStorage);
  }
  return v26;
}

uint64_t sub_10001950C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = a5;
  v49 = a1;
  v10 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v10, v11);
  v50 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeneficiaryInfoRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v48 = (uint64_t)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v17 = type metadata accessor for Logger(0);
  sub_100005288(v17, (uint64_t)qword_1002A8A98);
  v18 = swift_retain(a3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v44 = v14;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v45 = a4;
    v24 = v23;
    v53 = v23;
    v46 = a6;
    v47 = a2;
    *(_DWORD *)v22 = 136315138;
    v25 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v26 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v26);
    v52 = sub_1001DEF4C(v25, v26, &v53);
    a2 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_release(a3);
    v27 = v26;
    a6 = v46;
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - Creating analytics event.", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v28 = v24;
    a4 = v45;
    swift_slowDealloc(v28, -1, -1);
    v29 = v22;
    v14 = v44;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_release(a3);
  }
  v30 = v48;
  sub_100013B34(a4, v48);
  v31 = *(unsigned __int8 *)(v14 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = (v15 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8;
  v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_10025FA58, v35 + 16, v31 | 7);
  *(_QWORD *)(v36 + 16) = a3;
  sub_100022144(v30, v36 + v32);
  v37 = v51;
  *(_QWORD *)(v36 + v33) = v51;
  *(_QWORD *)(v36 + v34) = a6;
  v38 = (_QWORD *)(v36 + v35);
  *v38 = v49;
  v38[1] = a2;
  v39 = type metadata accessor for TaskPriority(0);
  v40 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v50, 1, 1, v39);
  v41 = (_QWORD *)swift_allocObject(&unk_10025FA80, 56, 7);
  v41[2] = 0;
  v41[3] = 0;
  v41[4] = a3;
  v41[5] = sub_1000223A4;
  v41[6] = v36;
  swift_retain_n(a3, 2);
  swift_bridgeObjectRetain(v37);
  swift_retain(a6);
  swift_retain(a2);
  swift_retain(v36);
  v42 = sub_10001CC6C(v40, (uint64_t)&unk_10028C050, (uint64_t)v41);
  swift_release(v36);
  return swift_release(v42);
}

void sub_10001987C(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(void))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(void);
  void (*v69)(void);
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  void (*v78)(void);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v77 = a7;
  v78 = a8;
  v75 = a5;
  v76 = a6;
  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v17 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v20 = (char *)v70 - v19;
  v21 = qword_10028AE08;
  v22 = a1;
  if ((a2 & 1) != 0)
  {
    if (v21 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v41 = type metadata accessor for Logger(0);
    sub_100005288(v41, (uint64_t)qword_1002A8A98);
    v42 = v22;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v45 = 138412290;
      v47 = v42;
      v48 = _swift_stdlib_bridgeErrorToNSError(v47);
      v80 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      *v46 = v48;

      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Preflight event creation failed with error: %@", v45, 0xCu);
      v49 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v46, 1, v49);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

    }
    v77();
  }
  else
  {
    if (v21 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A8A98);
    sub_100013B34(a4, (uint64_t)v20);
    v24 = swift_retain(a3);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v73 = v22;
      v28 = v27;
      v71 = swift_slowAlloc(64, -1);
      v80 = v71;
      *(_DWORD *)v28 = 136315394;
      v29 = a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName;
      v74 = a3;
      v72 = a4;
      v31 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v30 = *(_QWORD *)(v29 + 8);
      swift_bridgeObjectRetain(v30);
      v79 = sub_1001DEF4C(v31, v30, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_release(v74);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v28 + 12) = 2080;
      v70[1] = v28 + 14;
      v32 = v13;
      v33 = type metadata accessor for UUID(0);
      v34 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = v33;
      v13 = v32;
      a4 = v72;
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v35, v34);
      v38 = v37;
      v79 = sub_1001DEF4C(v36, v37, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80);
      swift_bridgeObjectRelease(v38);
      sub_100013B78((uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - Event created. Starting Preflight for %s", (uint8_t *)v28, 0x16u);
      v39 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v40 = v28;
      v22 = v73;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_release(a3);
      sub_100013B78((uint64_t)v20);
    }

    v51 = UUID.uuidString.getter(v50);
    v53 = v52;
    v54 = v75;
    if (*(_QWORD *)(v75 + 16) && (v55 = sub_10010A9E0(v51, v52), (v56 & 1) != 0))
    {
      v57 = (uint64_t *)(*(_QWORD *)(v54 + 56) + 16 * v55);
      v58 = *v57;
      v59 = v57[1];
      sub_10000F450(*v57, v59);
    }
    else
    {
      v58 = 0;
      v59 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease(v53);
    sub_100013B34(a4, (uint64_t)v17);
    v60 = *(unsigned __int8 *)(v13 + 80);
    v61 = (v60 + 24) & ~v60;
    v62 = v60 | 7;
    v63 = v14 + v61 + 7;
    v64 = a4;
    v65 = v63 & 0xFFFFFFFFFFFFFFF8;
    v66 = swift_allocObject(&unk_10025FAD0, (v63 & 0xFFFFFFFFFFFFFFF8) + 16, v62);
    v67 = v76;
    *(_QWORD *)(v66 + 16) = v76;
    sub_100022144((uint64_t)v17, v66 + v61);
    v68 = (void (**)(void))(v66 + v65);
    v69 = v78;
    *v68 = v77;
    v68[1] = v69;
    swift_retain(v67);
    swift_retain(v69);
    sub_10001A43C(v64, v58, v59, v22, (uint64_t)sub_100022700, v66);
    sub_1000144D8(v58, v59);
    swift_release(v66);
  }

}

uint64_t sub_100019D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  _QWORD v28[6];
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if (a1)
  {
    v6 = a1;
    v7 = (_QWORD *)(a2 + 16);
    swift_errorRetain(a1);
    v8 = (void *)_convertErrorToNSError(_:)(v6);
    v9 = objc_msgSend(v8, "aa_partialErrorsByName");

    if (v9)
    {
      v10 = sub_1000080B4(&qword_10028E850);
      v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, v10, &protocol witness table for String);

      if (*(_QWORD *)(v11 + 16))
      {
        __chkstk_darwin(v12, v13);
        v28[2] = v7;
        v28[3] = a3;
        sub_10001A0EC((void (*)(_QWORD *))sub_100024988, (uint64_t)v28, v11);
        swift_errorRelease(v6);
        a1 = swift_bridgeObjectRelease(v11);
        return a4(a1);
      }
      swift_bridgeObjectRelease(v11);
    }
    v30 = 0;
    v31 = 0xE000000000000000;
    v14 = (uint64_t *)(a3 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 20));
    v15 = v14[1];
    if (v15)
      v16 = *v14;
    else
      v16 = 0;
    if (v15)
      v17 = (void *)v14[1];
    else
      v17 = (void *)0xE000000000000000;
    swift_bridgeObjectRetain(v15);
    v18._countAndFlagsBits = v16;
    v18._object = v17;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v17);
    v19._countAndFlagsBits = 58;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v21._countAndFlagsBits = UUID.uuidString.getter(v20);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23 = v30;
    v24 = v31;
    swift_beginAccess(v7, &v30, 33, 0);
    swift_errorRetain(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v29 = *v7;
    *v7 = 0x8000000000000000;
    sub_10001F710(v6, v23, v24, isUniquelyReferenced_nonNull_native);
    v26 = *v7;
    *v7 = v29;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    swift_endAccess(&v30);
    a1 = swift_errorRelease(v6);
  }
  return a4(a1);
}

uint64_t sub_100019F98(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *a1;
  v5 = (void *)a1[1];
  v6 = a1[2];
  v24 = 0;
  v25 = 0xE000000000000000;
  v7 = (uint64_t *)(a3 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 20));
  v8 = v7[1];
  if (v8)
    v9 = *v7;
  else
    v9 = 0;
  if (v8)
    v10 = (void *)v7[1];
  else
    v10 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v8);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 58;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v14._countAndFlagsBits = UUID.uuidString.getter(v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 59;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v4;
  v17._object = v5;
  String.append(_:)(v17);
  v18 = v24;
  v19 = v25;
  swift_beginAccess(a2, &v24, 33, 0);
  swift_errorRetain(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v23 = *a2;
  *a2 = 0x8000000000000000;
  sub_10001F710(v6, v18, v19, isUniquelyReferenced_nonNull_native);
  v21 = *a2;
  *a2 = v23;
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v21);
  return swift_endAccess(&v24);
}

uint64_t sub_10001A0EC(void (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[3];
  int64_t v21;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v21 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v11 = 0;
  while (v9)
  {
    v12 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v13 = v12 | (v11 << 6);
LABEL_5:
    v14 = (_QWORD *)(*(_QWORD *)(a3 + 48) + 16 * v13);
    v15 = v14[1];
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13);
    v20[0] = *v14;
    v20[1] = v15;
    v20[2] = v16;
    swift_bridgeObjectRetain(v15);
    swift_errorRetain(v16);
    a1(v20);
    swift_bridgeObjectRelease(v15);
    result = swift_errorRelease(v16);
    if (v3)
      return swift_release(a3);
  }
  if (__OFADD__(v11++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v11 >= v21)
    return swift_release(a3);
  v18 = *(_QWORD *)(v6 + 8 * v11);
  if (v18)
  {
LABEL_19:
    v9 = (v18 - 1) & v18;
    v13 = __clz(__rbit64(v18)) + (v11 << 6);
    goto LABEL_5;
  }
  v19 = v11 + 1;
  if (v11 + 1 >= v21)
    return swift_release(a3);
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v11 + 2;
  if (v11 + 2 >= v21)
    return swift_release(a3);
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v11 + 3;
  if (v11 + 3 >= v21)
    return swift_release(a3);
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v11 + 4;
  if (v11 + 4 >= v21)
    return swift_release(a3);
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_18:
    v11 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v11 >= v21)
      return swift_release(a3);
    v18 = *(_QWORD *)(v6 + 8 * v11);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10001A2B4(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v14);
    v19 = v15;
    swift_errorRetain(v15);
    a1(&v19);
    result = swift_errorRelease(v15);
    if (v3)
      return swift_release(a3);
  }
  if (__OFADD__(v12++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v12 >= v10)
    return swift_release(a3);
  v17 = *(_QWORD *)(v6 + 8 * v12);
  if (v17)
  {
LABEL_19:
    v9 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v12 << 6);
    goto LABEL_5;
  }
  v18 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v12 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void sub_10001A43C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  id v59;
  Class isa;
  id v61;
  Class v62;
  Class v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  Swift::String v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  id v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  void *v92;
  Class v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  _QWORD *v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  id v105;
  void *v106;
  uint64_t v107;
  id v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t aBlock[5];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD v127[5];
  uint64_t v128[4];

  v7 = v6;
  v120 = a6;
  v117 = a3;
  v116 = a2;
  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  v113 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = v14;
  __chkstk_darwin(v13, v16);
  v115 = (uint64_t)&v107 - v17;
  v112 = sub_1000080B4(&qword_10028C078);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112, v18);
  v110 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100005288(v20, (uint64_t)qword_1002A8A98);
  v22 = swift_retain(v7);
  v121 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  v122 = a1;
  v119 = a5;
  v118 = a4;
  v109 = v15;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v128[0] = v27;
    *(_DWORD *)v26 = 136315138;
    v108 = (id)v11;
    v28 = v7;
    v29 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v30 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v30);
    v126 = sub_1001DEF4C(v29, v30, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127);
    swift_release(v28);
    v31 = v30;
    v7 = v28;
    v11 = (uint64_t)v108;
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - Starting Preflight!", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v32 = v26;
    a1 = v122;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release(v7);
  }
  v33 = (uint64_t *)(a1 + *(int *)(v11 + 28));
  v34 = *v33;
  v35 = v33[1];
  sub_10000F450(*v33, v35);
  sub_10000EE10(v34, v35, &v126);
  v37 = v126;
  v36 = v127[0];
  v38 = v127[2];
  v39 = v127[4];
  sub_1000249A0((uint64_t)&v126, (uint64_t)v128, &qword_10028BBF0);
  if (v128[3])
  {
    v40 = v117;
    if (v117 >> 60 == 15)
    {
      v41 = (uint64_t)v109;
      v42 = sub_100013B34(a1, (uint64_t)v109);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        aBlock[0] = v46;
        *(_DWORD *)v45 = 136315138;
        v47 = sub_100013870();
        v49 = v48;
        v125 = sub_1001DEF4C(v47, v48, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
        swift_bridgeObjectRelease(v49);
        sub_100013B78(v41);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Wrapped key is nil for beneficiary: %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }
      else
      {
        sub_100013B78(v41);
      }

      type metadata accessor for InheritanceError(0);
      v81 = v80;
      v125 = 2105;
      v82 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v83 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v125, v82, v81, v83);
      v84 = (void *)aBlock[0];
      swift_retain(v7);
      v85 = v118;
      v86 = v120;
      swift_retain(v120);
      v87 = v84;
      sub_100022C70(v85, 0, v122, (uint64_t)v84, v7, v7, v85, v119, v86, v87, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))sub_1001D60D4);
      swift_release(v7);

      swift_release(v86);
    }
    else
    {
      v109 = (char *)v7;
      v107 = v128[0];
      v59 = objc_allocWithZone((Class)AKInheritanceAccessKey);
      sub_10000F450(v116, v40);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v61 = objc_msgSend(v59, "initWithBeneficiairyIdentifier:", isa);

      v62 = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v61, "setWrappedKeyData:", v62);

      v63 = Data._bridgeToObjectiveC()().super.isa;
      v108 = v61;
      objc_msgSend(v61, "setWrappingKeyData:", v63);

      sub_10000F450(v37, v36);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      sub_10000F450(v37, v36);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(12, -1);
        v68 = swift_slowAlloc(32, -1);
        aBlock[0] = v68;
        *(_DWORD *)v67 = 136315138;
        v69 = Data.base64EncodedString(options:)(0);
        v125 = sub_1001DEF4C(v69._countAndFlagsBits, (unint64_t)v69._object, aBlock);
        a1 = v122;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
        swift_bridgeObjectRelease(v69._object);
        sub_100013FA4((uint64_t)&v126);
        sub_100013FA4((uint64_t)&v126);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "wrappingKey:%s", v67, 0xCu);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);
      }
      else
      {
        sub_100013FA4((uint64_t)&v126);
        sub_100013FA4((uint64_t)&v126);
      }

      v88 = (uint64_t)v109;
      v89 = v111;
      v90 = v110;
      v91 = v112;
      (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v110, &v109[OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController], v112);
      Dependency.wrappedValue.getter(aBlock, v91);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
      v92 = (void *)aBlock[0];
      v93 = UUID._bridgeToObjectiveC()().super.isa;
      v94 = v115;
      sub_100013B34(a1, v115);
      v95 = *(unsigned __int8 *)(v113 + 80);
      v96 = (v95 + 24) & ~v95;
      v97 = (v114 + v96 + 7) & 0xFFFFFFFFFFFFFFF8;
      v98 = (v97 + 15) & 0xFFFFFFFFFFFFFFF8;
      v99 = swift_allocObject(&unk_10025FAF8, v98 + 16, v95 | 7);
      *(_QWORD *)(v99 + 16) = v88;
      sub_100022144(v94, v99 + v96);
      v100 = v118;
      *(_QWORD *)(v99 + v97) = v118;
      v101 = (_QWORD *)(v99 + v98);
      v102 = v120;
      *v101 = v119;
      v101[1] = v102;
      aBlock[4] = (uint64_t)sub_1000233C4;
      v124 = v99;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001DC548;
      aBlock[3] = (uint64_t)&unk_10025FB10;
      v103 = _Block_copy(aBlock);
      v104 = v124;
      swift_retain(v88);
      v105 = v100;
      swift_retain(v102);
      swift_release(v104);
      v106 = v108;
      objc_msgSend(v92, "preflightInheritanceRecoveryForBeneficiaryID:accessKey:completion:", v93, v108, v103);
      _Block_release(v103);

      swift_unknownObjectRelease(v92);
      sub_1000144D8(v116, v117);
    }
    sub_100013FA4((uint64_t)&v126);
  }
  else
  {
    v50 = swift_retain(v7);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      aBlock[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = v7;
      v56 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v57 = *(_QWORD *)(v7 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v57);
      v125 = sub_1001DEF4C(v56, v57, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
      swift_release(v55);
      v58 = v57;
      v7 = v55;
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s - Error creating InheritanceAccessKeyRecord", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_release(v7);
    }
    v70 = v119;
    v71 = v118;
    type metadata accessor for InheritanceError(0);
    v73 = v72;
    v125 = 2;
    v74 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v75 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v125, v74, v73, v75);
    v76 = (void *)aBlock[0];
    swift_retain(v7);
    v77 = v71;
    v78 = v120;
    swift_retain(v120);
    v79 = v76;
    sub_100022C70(v77, 0, v122, (uint64_t)v76, v7, v7, v77, v70, v78, v79, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))sub_1001D6DF4);
    swift_release(v7);

    swift_release(v78);
  }
}

void sub_10001AF74(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37[3];
  _BYTE v38[80];
  uint64_t v39;
  void *v40;
  _BYTE v41[32];

  v6 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v41, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    v8 = v7;
    v39 = -4408;
    v9 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v9, v38);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v11;
    swift_beginAccess(v6, v37, 0, 0);
    v12 = *v6;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v12;
    swift_bridgeObjectRetain(v12);
    v13 = sub_100015894(inited);
    v14 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v40, &v39, v13, v8, v14);
    v15 = v40;
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A98);
    v17 = v15;
    v18 = swift_retain(a2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      v36 = swift_slowAlloc(32, -1);
      v40 = (void *)v36;
      *(_DWORD *)v21 = 136315394;
      v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v24 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v24);
      v39 = sub_1001DEF4C(v23, v24, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_release(a2);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v21 + 12) = 2112;
      v25 = _convertErrorToNSError(_:)(v17);
      v39 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *v22 = v25;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - failed: %@", (uint8_t *)v21, 0x16u);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v26);
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_release(a2);
    }
    v35 = v17;
    a3(v17);

  }
  else
  {
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A8A98);
    v28 = swift_retain(a2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v37[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v34 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v34);
      v40 = (void *)sub_1001DEF4C(v33, v34, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
      swift_release(a2);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - successful.", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_release(a2);
    }
    a3(0);
  }
}

uint64_t sub_10001B444(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  return sub_10001BAA8(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight did not begin. Invalid InheritanceAccessKeyRecord. Event reported: %s\"");
}

uint64_t sub_10001B450(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  return sub_10001BAA8(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight did not begin. Missing Wrapped Key in keychain. Event reported: %s\"");
}

uint64_t sub_10001B45C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  id v57;
  os_log_t v58;
  uint64_t *v59;
  uint64_t v60;
  void *v61;
  uint64_t (*v62)(_QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v58 - v18;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A98);
    sub_100013B34(a3, (uint64_t)v16);
    swift_errorRetain(a1);
    swift_retain(a2);
    v21 = swift_errorRetain(a1);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(32, -1);
      v62 = a5;
      v25 = v24;
      v59 = (uint64_t *)swift_slowAlloc(8, -1);
      v60 = swift_slowAlloc(64, -1);
      v65 = v60;
      *(_DWORD *)v25 = 136315650;
      v58 = v22;
      v61 = a4;
      v63 = a6;
      v26 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v27 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v27);
      v64 = sub_1001DEF4C(v26, v27, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_release(a2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v25 + 12) = 2080;
      v28 = a3;
      v29 = type metadata accessor for UUID(0);
      v30 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = v29;
      a3 = v28;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v31, v30);
      v34 = v33;
      v64 = sub_1001DEF4C(v32, v33, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v34);
      sub_100013B78((uint64_t)v16);
      *(_WORD *)(v25 + 22) = 2112;
      v35 = _convertErrorToNSError(_:)(a1);
      v64 = v35;
      a4 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      v36 = v59;
      *v59 = v35;
      a6 = v63;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v22 = v58;
      _os_log_impl((void *)&_mh_execute_header, v58, v23, "%s - failed for beneficiaryID %s    error: %@", (uint8_t *)v25, 0x20u);
      v37 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v36, 1, v37);
      swift_slowDealloc(v36, -1, -1);
      v38 = v60;
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      v39 = v25;
      a5 = v62;
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100013B78((uint64_t)v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_retain(a2);
    swift_errorRetain(a1);
    v55 = a4;
    swift_retain(a6);
    sub_100023454(v55, 0, a3, a1, a2, a2, v55, a5, a6, a1);
    swift_errorRelease(a1);
    swift_release(a2);

    swift_release(a6);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v40 = type metadata accessor for Logger(0);
    sub_100005288(v40, (uint64_t)qword_1002A8A98);
    v60 = a3;
    sub_100013B34(a3, (uint64_t)v19);
    v41 = swift_retain(a2);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v63 = a6;
      v45 = v44;
      v46 = swift_slowAlloc(64, -1);
      v65 = v46;
      *(_DWORD *)v45 = 136315394;
      v61 = a4;
      v47 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
      v48 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v48);
      v64 = sub_1001DEF4C(v47, v48, &v65);
      v62 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_release(a2);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v45 + 12) = 2080;
      v49 = type metadata accessor for UUID(0);
      v50 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
      v53 = v52;
      v64 = sub_1001DEF4C(v51, v52, &v65);
      a4 = v61;
      a5 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v53);
      sub_100013B78((uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - succeeded for beneficiaryID %s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      v54 = v45;
      a6 = v63;
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100013B78((uint64_t)v19);
    }

    swift_retain(a2);
    v57 = a4;
    swift_retain(a6);
    sub_100023EF0(v57, 1, v60, 0, a2, a2, v57, a5, a6);
    swift_release(a2);

    return swift_release(a6);
  }
}

uint64_t sub_10001BA9C(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  return sub_10001BAA8(a1, a2, a3, a4, a5, "[%s] 🌧️ Preflight event reported. %s");
}

uint64_t sub_10001BAA8(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *format;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A8A98);
  v12 = a2;
  v13 = swift_retain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v28 = v25;
    *(_DWORD *)v16 = 136315394;
    format = a6;
    v26 = a3;
    v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v18);
    v27 = sub_1001DEF4C(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    swift_release(a1);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v16 + 12) = 2080;
    v19 = objc_msgSend(v12, "debugDescription");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v27 = sub_1001DEF4C(v20, v22, &v28);
    a3 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);

    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, format, (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  return a3(a5);
}

uint64_t sub_10001BD04(uint64_t a1, void *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A8A98);
  v7 = a2;
  v8 = swift_retain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v22 = v19;
    *(_DWORD *)v11 = 136315394;
    v20 = a3;
    v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v12);
    v21 = sub_1001DEF4C(v13, v12, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_release(a1);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v11 + 12) = 2080;
    v14 = objc_msgSend(v7, "debugDescription");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v21 = sub_1001DEF4C(v15, v17, &v22);
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%s] 🌈 Preflight event reported. %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
  return a3(0);
}

void sub_10001BF58(uint64_t a1, id *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v7 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*a2)
  {
    v40 = 0u;
    v41 = 0u;
LABEL_10:
    sub_100004934((uint64_t)&v40, (uint64_t *)&unk_10028E7E0);
    goto LABEL_11;
  }
  v11 = *a2;
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  *(_QWORD *)&v39[0] = v12;
  *((_QWORD *)&v39[0] + 1) = v13;
  v15 = swift_bridgeObjectRetain(v13);
  v16 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v39, &type metadata for String, v15);
  v17 = objc_msgSend(v11, "__swift_objectForKeyedSubscript:", v16);
  swift_unknownObjectRelease(v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(v39, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    memset(v39, 0, sizeof(v39));
  }
  sub_1000249A0((uint64_t)v39, (uint64_t)&v40, (uint64_t *)&unk_10028E7E0);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v41 + 1))
    goto LABEL_10;
  if ((swift_dynamicCast(v39, &v40, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v18 = *((_QWORD *)&v39[0] + 1);
    v19 = Data.init(base64Encoded:options:)(*(_QWORD *)&v39[0], *((_QWORD *)&v39[0] + 1), 0);
    v21 = v20;
    v22 = swift_bridgeObjectRelease(v18);
    if (v21 >> 60 != 15)
    {
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      sub_10000F450(v19, v21);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
      *(_QWORD *)&v40 = *a3;
      *a3 = 0x8000000000000000;
      sub_10001F86C(v19, v21, v23, v25, isUniquelyReferenced_nonNull_native);
      v27 = *a3;
      *a3 = v40;
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v27);
      sub_1000144D8(v19, v21);
      return;
    }
  }
LABEL_11:
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A8A98);
  v29 = sub_100013B34(a1, (uint64_t)v10);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v42 = v3;
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v40 = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = type metadata accessor for UUID(0);
    v35 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    v38 = v37;
    *(_QWORD *)&v39[0] = sub_1001DEF4C(v36, v37, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v39, (char *)v39 + 8);
    swift_bridgeObjectRelease(v38);
    sub_100013B78((uint64_t)v10);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Wrapped key not found in keychain! UUID %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100013B78((uint64_t)v10);
  }

}

uint64_t sub_10001C304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v6[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[21] = v8;
  v6[22] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028C060);
  v6[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[24] = v10;
  v6[25] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028FA50);
  v6[26] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[27] = v12;
  v6[28] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001C3C4, 0, 0);
}

uint64_t sub_10001C3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(void *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  Class v42;
  id v43;
  _QWORD *v44;
  uint64_t (*v45)(uint64_t);

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 136);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kInheritancePreflightCheckEventName);
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v3);
  swift_retain(v4);
  Dependency.wrappedValue.getter((_QWORD *)(v0 + 16), v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40)) + 16), "aa_primaryAppleAccount");
  if (v7 && (v8 = v7, v9 = objc_msgSend(v7, "aa_altDSID"), v8, v9))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

  }
  else
  {
    v11 = 0;
  }
  v12 = *(_QWORD *)(v0 + 136);
  sub_100006F58((_QWORD *)(v0 + 16));
  swift_release(v12);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  if (v11)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v13, v14, 0);
  *(_QWORD *)(v0 + 232) = v15;

  if (v15)
  {
    swift_retain(*(_QWORD *)(v0 + 136));
    v16 = sub_1000174F4(&OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager);
    if (v16)
    {
      v17 = v16;
      v19 = *(_QWORD *)(v0 + 192);
      v18 = *(_QWORD *)(v0 + 200);
      v20 = *(_QWORD *)(v0 + 184);
      v21 = *(_QWORD *)(v0 + 136);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v20);
      Dependency.wrappedValue.getter((_QWORD *)(v0 + 128), v20);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      v22 = *(void **)(v0 + 128);
      objc_msgSend(v22, "securityLevelForAccount:", v17);

    }
    else
    {
      v21 = *(_QWORD *)(v0 + 136);
    }
    swift_release(v21);
    v38 = *(_QWORD *)(v0 + 168);
    v37 = *(_QWORD *)(v0 + 176);
    v39 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 136);
    isa = UInt._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v15, "setObject:forKeyedSubscript:", isa, kAAAnalyticsSecurityLevel);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v40 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, v39);
    Dependency.wrappedValue.getter((_QWORD *)(v0 + 56), v39);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    sub_100048588();
    v42 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100006F58((_QWORD *)(v0 + 56));
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v42, kAAAnalyticsCdpStatus);

    v43 = v15;
    sub_100017754(v15, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__cdpController, &OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v45 = (uint64_t (*)(uint64_t))((char *)&dword_10028C068 + dword_10028C068);
    v44 = (_QWORD *)swift_task_alloc(unk_10028C06C);
    *(_QWORD *)(v0 + 240) = v44;
    *v44 = v0;
    v44[1] = sub_10001C8A0;
    return v45((uint64_t)v15);
  }
  else
  {
    if (qword_10028AE08 != -1)
      swift_once(&qword_10028AE08, sub_100046E58);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A8A98);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "createEvent: Self is nil. Aborting Report Event.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }
    v28 = *(void (**)(void *, uint64_t))(v0 + 144);

    type metadata accessor for InheritanceError(0);
    v30 = v29;
    *(_QWORD *)(v0 + 96) = 14;
    v31 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v32 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 104), v0 + 96, v31, v30, v32);
    v33 = *(void **)(v0 + 104);
    v28(v33, 1);

    v34 = *(_QWORD *)(v0 + 200);
    v35 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001C8A0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));

  return swift_task_switch(sub_10001C8F8, 0, 0);
}

uint64_t sub_10001C8F8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t (*v5)(id);

  v1 = unk_10028C074;
  v5 = (uint64_t (*)(id))((char *)&dword_10028C070 + dword_10028C070);
  v2 = *(id *)(v0 + 232);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 248) = v3;
  *v3 = v0;
  v3[1] = sub_10001C96C;
  return v5(v2);
}

uint64_t sub_10001C96C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));

  return swift_task_switch(sub_10001C9C8, 0, 0);
}

uint64_t sub_10001C9C8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void (*v15)(void *, _QWORD);
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A98);
  swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v1);
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 136);
  if (v6)
  {
    v9 = swift_slowAlloc(22, -1);
    v20 = (_QWORD *)swift_slowAlloc(8, -1);
    v21 = swift_slowAlloc(32, -1);
    v22 = v21;
    *(_DWORD *)v9 = 136315394;
    v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 112) = sub_1001DEF4C(v11, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120);
    swift_bridgeObjectRelease(v10);
    swift_release_n(v8, 2);
    *(_WORD *)(v9 + 12) = 2112;
    *(_QWORD *)(v0 + 120) = v7;
    v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128);
    *v20 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - Event created %@", (uint8_t *)v9, 0x16u);
    v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v20, 1, v13);
    swift_slowDealloc(v20, -1, -1);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 136), 2);

  }
  v14 = *(void **)(v0 + 232);
  v15 = *(void (**)(void *, _QWORD))(v0 + 144);
  v16 = v14;
  v15(v14, 0);

  v17 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001CC6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100004934(a1, (uint64_t *)&unk_100294B20);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10025FAA8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_100294B40, v16);
}

uint64_t sub_10001CDB8(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  return sub_1000244EC(a2, a3, a4, a5, a6);
}

_QWORD *sub_10001CDD4(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = &_swiftEmptyArrayStorage;
  sub_1001D4B6C(0, v2, 0);
  v3 = &_swiftEmptyArrayStorage;
  if (v2)
  {
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      v12 = *i;
      swift_bridgeObjectRetain(v12);
      v5 = sub_1000080B4(&qword_10028C088);
      v6 = sub_1000080B4(&qword_10028C098);
      if (!swift_dynamicCast(&v11, &v12, v5, v6, 6))
        break;
      v7 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1001D4B6C(0, v3[2] + 1, 1);
        v3 = v13;
      }
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_1001D4B6C(v8 > 1, v9 + 1, 1);
        v3 = v13;
      }
      v3[2] = v9 + 1;
      v3[v9 + 4] = v7;
      if (!--v2)
        return v3;
    }
    v11 = 0;
    swift_release(v3);
    swift_bridgeObjectRelease(v11);
    return 0;
  }
  return v3;
}

uint64_t sub_10001CF20(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_10001CF40(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001CF60(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10001CFC4;
  return v6(a1);
}

uint64_t sub_10001CFC4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10001D010(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

Swift::Int sub_10001D0C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C0F0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10001D3E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C0A8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_errorRetain(v33);
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10001D6F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C0D0);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_10000F450(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_10001DA04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C038);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_1000080F4(v25, v38);
      }
      else
      {
        sub_1000244B0((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v37);
      String.hash(into:)(v37, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = (uint64_t)sub_1000080F4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10001DD00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C120);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10001DFD0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t i;
  int v51;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C188);
  v51 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v46 = v2;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v48 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v47 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  v49 = v7;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v25 = v24 | (v20 << 6);
      goto LABEL_24;
    }
    v26 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v47)
      goto LABEL_36;
    v27 = v48[v26];
    ++v20;
    if (!v27)
    {
      v20 = v26 + 1;
      if (v26 + 1 >= v47)
        goto LABEL_36;
      v27 = v48[v20];
      if (!v27)
        break;
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = v7;
    v30 = *(_QWORD *)(v7 + 72);
    v31 = *(_QWORD *)(v11 + 48) + v30 * v25;
    if ((v51 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 32))(v10, v31, v6);
      v32 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v25);
      v33 = *v32;
      v34 = v32[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v10, v31, v6);
      v35 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v25);
      v33 = *v35;
      v34 = v35[1];
      sub_10000F450(*v35, v34);
    }
    v36 = *(_QWORD *)(v13 + 40);
    v37 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v6, v37);
    v38 = -1 << *(_BYTE *)(v13 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v18 + 8 * v40);
      }
      while (v44 == -1);
      v21 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v22 = *(_QWORD *)(v13 + 48) + v30 * v21;
    v7 = v49;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v49 + 32))(v22, v10, v6);
    v23 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v21);
    *v23 = v33;
    v23[1] = v34;
    ++*(_QWORD *)(v13 + 16);
  }
  v28 = v26 + 2;
  if (v28 < v47)
  {
    v27 = v48[v28];
    if (!v27)
    {
      while (1)
      {
        v20 = v28 + 1;
        if (__OFADD__(v28, 1))
          goto LABEL_43;
        if (v20 >= v47)
          goto LABEL_36;
        v27 = v48[v20];
        ++v28;
        if (v27)
          goto LABEL_23;
      }
    }
    v20 = v28;
    goto LABEL_23;
  }
LABEL_36:
  swift_release(v11);
  v3 = v46;
  if ((v51 & 1) != 0)
  {
    v45 = 1 << *(_BYTE *)(v11 + 32);
    if (v45 >= 64)
      bzero(v48, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v48 = -1 << v45;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_41:
  result = swift_release(v11);
  *v3 = v13;
  return result;
}

Swift::Int sub_10001E368(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_1000080B4(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain(v6);
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_10001E670(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C150);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_10001E978(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C168);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10001EC80(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C140);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_1000080F4((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_1000249E4(v26, (uint64_t)&v39);
      sub_1000244B0(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_1000080F4(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_10001EF94(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t i;
  int v46;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C138);
  v46 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v44 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v42 = v2;
  v43 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v43)
      break;
    v25 = v44;
    v26 = v44[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v43)
        goto LABEL_36;
      v26 = v44[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_36:
          swift_release(v11);
          v3 = v42;
          if ((v46 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v20 >= v43)
              goto LABEL_36;
            v26 = v44[v20];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v20 = v27;
      }
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v46 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v10, v29, v6);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, v29, v6);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    v31 = *(_QWORD *)(v13 + 40);
    v32 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v6, v32);
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v6);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v3 = v42;
  v25 = v44;
  if ((v46 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v11 + 32);
  if (v40 >= 64)
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v40;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  result = swift_release(v11);
  *v3 = v13;
  return result;
}

uint64_t sub_10001F328(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_10028C090);
  v55 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v58 = v10;
  v50 = v2;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v52 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v51 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain(v11);
  v20 = 0;
  v53 = v11;
  v54 = v7;
  v59 = v6;
  while (1)
  {
    if (v17)
    {
      v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v51)
      break;
    v26 = v52;
    v27 = v52[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v51)
        goto LABEL_36;
      v27 = v52[v20];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v51)
        {
LABEL_36:
          swift_release(v11);
          v3 = v50;
          if ((v55 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v52[v28];
        if (!v27)
        {
          while (1)
          {
            v20 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v20 >= v51)
              goto LABEL_36;
            v27 = v52[v20];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v20 = v28;
      }
    }
LABEL_23:
    v17 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = v7[9];
    v30 = *(_QWORD *)(v11 + 48) + v29 * v24;
    if ((v55 & 1) != 0)
    {
      v31 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v32 = v59;
      v31(v58, v30, v59);
      v33 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 32 * v24);
      v34 = *v33;
      v35 = v33[1];
      v36 = v33[3];
      v56 = v33[2];
      v57 = v34;
    }
    else
    {
      v37 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v32 = v59;
      v37(v58, v30, v59);
      v38 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 32 * v24);
      v39 = *v38;
      v35 = v38[1];
      v36 = v38[3];
      v56 = v38[2];
      v57 = v39;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v36);
    }
    v40 = *(_QWORD *)(v13 + 40);
    v41 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v32, v41);
    v42 = -1 << *(_BYTE *)(v13 + 32);
    v43 = result & ~v42;
    v44 = v43 >> 6;
    if (((-1 << v43) & ~*(_QWORD *)(v18 + 8 * (v43 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v18 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
      v7 = v54;
    }
    else
    {
      v45 = 0;
      v46 = (unint64_t)(63 - v42) >> 6;
      v7 = v54;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v47 = v44 == v46;
        if (v44 == v46)
          v44 = 0;
        v45 |= v47;
        v48 = *(_QWORD *)(v18 + 8 * v44);
      }
      while (v48 == -1);
      v21 = __clz(__rbit64(~v48)) + (v44 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v13 + 48) + v29 * v21, v58, v59);
    v22 = (_QWORD *)(*(_QWORD *)(v13 + 56) + 32 * v21);
    *v22 = v57;
    v22[1] = v35;
    v22[2] = v56;
    v22[3] = v36;
    ++*(_QWORD *)(v13 + 16);
    v11 = v53;
  }
  swift_release(v11);
  v3 = v50;
  v26 = v52;
  if ((v55 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v49 = 1 << *(_BYTE *)(v11 + 32);
  if (v49 >= 64)
    bzero(v26, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v49;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  result = swift_release(v11);
  *v3 = v13;
  return result;
}

void sub_10001F704(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10001FB1C(a1, a2, a3, a4, &qword_10028C0E0);
}

uint64_t sub_10001F710(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10010A9E0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10002041C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_errorRelease(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain(a3);
    }
    goto LABEL_14;
  }
  sub_10001D3E4(v15, a4 & 1);
  v21 = sub_10010A9E0(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_10001F86C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_10010A9E0(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000205D0();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      sub_10000F494(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_10001D6F8(v17, a5 & 1);
  v22 = sub_10010A9E0(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10001F9E0(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10010A9E0(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100006F58(v19);
        sub_1000080F4(a1, v19);
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100020794();
      goto LABEL_7;
    }
    sub_10001DA04(v15, a4 & 1);
    v20 = sub_10010A9E0(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000200D0(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10001FB10(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10001FB1C(a1, a2, a3, a4, &qword_10028C158);
}

void sub_10001FB1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_10010A9E0(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_100020D9C(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10001E368(v17, a4 & 1, a5);
  v22 = sub_10010A9E0(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10001FC90(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10001FB1C(a1, a2, a3, a4, &qword_10028C118);
}

void sub_10001FC9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10001FB1C(a1, a2, a3, a4, &qword_10028C0D8);
}

void sub_10001FCA8(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10010A9E0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100020F44();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1 & 1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10001E670(v15, a4 & 1);
  v19 = sub_10010A9E0(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10001FE00(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10010A9E0(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000210EC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10001E978(v15, a4 & 1);
  v19 = sub_10010A9E0(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10001FF50(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10010AAE0(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100006F58(v17);
        return sub_1000080F4(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100021294();
      goto LABEL_7;
    }
    sub_10001EC80(v13, a3 & 1);
    v19 = sub_10010AAE0(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1000249E4(a2, (uint64_t)v21);
      return sub_100020138(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

unint64_t sub_100020088(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *sub_1000200D0(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_1000080F4(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *sub_100020138(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_1000080F4(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_1000201B0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a7[(a1 >> 6) + 8] |= 1 << a1;
  v14 = a7[6];
  v15 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * a1, a2, v15);
  v17 = (_QWORD *)(a7[7] + 32 * a1);
  *v17 = a3;
  v17[1] = a4;
  v17[2] = a5;
  v17[3] = a6;
  v18 = a7[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    a7[2] = v20;
  return result;
}

void sub_100020264()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_1000080B4(&qword_10028C0F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10002041C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_1000080B4(&qword_10028C0A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_errorRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000205D0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_1000080B4(&qword_10028C0D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10000F450(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100020794()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_1000080B4(&qword_10028C038);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_1000244B0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1000080F4(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_100020978()
{
  return sub_100020D9C(&qword_10028C118);
}

id sub_100020984()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000080B4(&qword_10028C120);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100020B28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v2);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000080B4(&qword_10028C188);
  v34 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v40 = v5;
  if (!v6)
  {
    result = (void *)swift_release(v4);
    v32 = v40;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v40;
  }
  v35 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v39 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v36 = (unint64_t)(v12 + 63) >> 6;
  v16 = v37;
  v15 = v38;
  v17 = v40;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v11 << 6);
      v20 = v39;
      goto LABEL_12;
    }
    v28 = v11 + 1;
    v20 = v39;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v11;
    if (!v29)
    {
      v11 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v11);
      if (!v29)
        break;
    }
LABEL_25:
    v14 = (v29 - 1) & v29;
    v19 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v15);
    v22 = *(_QWORD *)(v20 + 56);
    v23 = 16 * v19;
    v24 = (uint64_t *)(v22 + 16 * v19);
    v25 = *v24;
    v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v17 + 48) + v21, v16, v15);
    v27 = (uint64_t *)(*(_QWORD *)(v17 + 56) + v23);
    *v27 = v25;
    v27[1] = v26;
    result = (void *)sub_10000F450(v25, v26);
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release(v39);
    v31 = v34;
    v32 = v40;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v11 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v11 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v11);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100020D9C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_1000080B4(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100020F44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000080B4(&qword_10028C150);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_1000210EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000080B4(&qword_10028C168);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100021294()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_1000080B4(&qword_10028C140);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_1000249E4(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_1000244B0(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_1000080F4(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100021478()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000080B4(&qword_10028C138);
  v25 = v0;
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_26:
    result = (id)swift_release(v6);
    *v25 = v8;
    return result;
  }
  result = (id)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = v6 + 64;
  v27 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v2 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v1);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v6 + 56) + v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v1);
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v20;
    result = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000216A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const void *v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v1 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  __chkstk_darwin(v1, v2);
  v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000080B4(&qword_10028C090);
  v35 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v42 = v5;
  if (!v6)
  {
    swift_release(v4);
    v34 = v42;
    v33 = v35;
LABEL_28:
    *v33 = v34;
    return;
  }
  v7 = v5;
  v8 = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  v36 = (const void *)(v4 + 64);
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, v36, 8 * v9);
    v7 = v42;
  }
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v41 = v4;
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v38;
  v15 = v39;
  v17 = v40;
  v18 = v42;
  while (1)
  {
    if (v14)
    {
      v43 = (v14 - 1) & v14;
      v44 = v11;
      v19 = __clz(__rbit64(v14)) | (v11 << 6);
      v20 = v41;
      goto LABEL_12;
    }
    v29 = v11 + 1;
    v20 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v29 >= v37)
      goto LABEL_26;
    v30 = *((_QWORD *)v36 + v29);
    v31 = v11 + 1;
    if (!v30)
    {
      v31 = v11 + 2;
      if (v11 + 2 >= v37)
        goto LABEL_26;
      v30 = *((_QWORD *)v36 + v31);
      if (!v30)
        break;
    }
LABEL_25:
    v43 = (v30 - 1) & v30;
    v44 = v31;
    v19 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v15 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v16, *(_QWORD *)(v20 + 48) + v21, v17);
    v22 = 32 * v19;
    v23 = (uint64_t *)(*(_QWORD *)(v20 + 56) + 32 * v19);
    v24 = *v23;
    v25 = v23[1];
    v26 = v23[2];
    v27 = v23[3];
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v18 + 48) + v21, v16, v17);
    v28 = (_QWORD *)(*(_QWORD *)(v18 + 56) + v22);
    *v28 = v24;
    v28[1] = v25;
    v28[2] = v26;
    v28[3] = v27;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
    v14 = v43;
    v11 = v44;
  }
  v32 = v11 + 3;
  if (v11 + 3 >= v37)
  {
LABEL_26:
    swift_release(v41);
    v33 = v35;
    v34 = v42;
    goto LABEL_28;
  }
  v30 = *((_QWORD *)v36 + v32);
  if (v30)
  {
    v31 = v11 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v31 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v31 >= v37)
      goto LABEL_26;
    v30 = *((_QWORD *)v36 + v31);
    ++v32;
    if (v30)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

unint64_t sub_10002193C(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  void *v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;

  v39 = type metadata accessor for DaemonAccountStore();
  v40 = &off_100261290;
  v38[0] = a1;
  v4 = *(void **)(*sub_10000732C(v38, v39) + 16);
  swift_retain(a1);
  v5 = objc_msgSend(v4, "aa_primaryAppleAccount");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "aa_altDSID");

    if (v7)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v9 = v8;

      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v11 = objc_msgSend(a2, "authKitAccountWithAltDSID:", v10);

      if (v11)
      {
        v12 = objc_msgSend(a2, "beneficiaryInfoForAccount:", v11);
        if (v12)
        {
          v13 = v12;
          v14 = sub_1000080B4(&qword_10028C088);
          v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

          v16 = sub_10001CDD4(v15);
          swift_bridgeObjectRelease(v15);
          if (v16)
          {
            if (qword_10028ADD8 != -1)
              swift_once(&qword_10028ADD8, sub_100046D78);
            v17 = type metadata accessor for Logger(0);
            v18 = sub_100005288(v17, (uint64_t)qword_1002A8A08);
            v19 = Logger.logObject.getter(v18);
            v20 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v19, v20))
            {
              v21 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v21 = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, v20, "Parsing beneficiaryInfo...", v21, 2u);
              swift_slowDealloc(v21, -1, -1);
            }

            v37 = &_swiftEmptyDictionarySingleton;
            v22 = v16[2];
            if (v22)
            {
              swift_bridgeObjectRetain(v16);
              for (i = 0; i != v22; ++i)
              {
                v24 = v16[i + 4];
                v36 = v24;
                sub_1001D4188(&v36, &v37);
              }
              swift_bridgeObjectRelease(v16);
            }
            v25 = swift_bridgeObjectRelease(v16);
            v26 = Logger.logObject.getter(v25);
            v27 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v26, v27))
            {
              v28 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v28 = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, v27, "Finished parsing beneficiaryInfo...", v28, 2u);
              swift_slowDealloc(v28, -1, -1);
            }

            v29 = (unint64_t)v37;
            goto LABEL_23;
          }
        }

      }
    }
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100005288(v30, (uint64_t)qword_1002A8A08);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failure to fetch beneficiaryInfo.", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v29 = sub_1000154B8((uint64_t)&_swiftEmptyArrayStorage);
LABEL_23:
  sub_100006F58(v38);
  return v29;
}

uint64_t sub_100021CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  _QWORD *v24;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[5];

  v3 = v2;
  v6 = sub_1000080B4((uint64_t *)&unk_100295380);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A8A98);
  v12 = swift_retain(v2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v27 = v7;
    v15 = swift_slowAlloc(12, -1);
    v29 = a2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v28 = a1;
    v18 = v17;
    v31[0] = v17;
    *(_DWORD *)v16 = 136315138;
    v26 = v16 + 4;
    v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v20);
    v21 = v19;
    v7 = v27;
    v30 = sub_1001DEF4C(v21, v20, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31);
    swift_release(v3);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - started.", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v22 = v18;
    a1 = v28;
    swift_slowDealloc(v22, -1, -1);
    v23 = v16;
    a2 = v29;
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release(v3);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v3 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__inheritanceStorage, v6);
  Dependency.wrappedValue.getter(v31, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  sub_10000732C(v31, v31[3]);
  v24 = (_QWORD *)swift_allocObject(&unk_10025F990, 40, 7);
  v24[2] = v3;
  v24[3] = a1;
  v24[4] = a2;
  swift_retain(v3);
  swift_retain(a2);
  sub_100006A8C((uint64_t)sub_100021FB8, (uint64_t)v24);
  swift_release(v24);
  return sub_100006F58(v31);
}

uint64_t sub_100021F8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100021FB8(uint64_t a1, char a2)
{
  uint64_t *v2;

  return sub_100016AD4(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100021FC8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100021FEC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_100022144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeneficiaryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001950C(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000221F8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10002222C()
{
  uint64_t v0;

  sub_10001AF74(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_100022238()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

void sub_1000223A4(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10001987C(a1, v4, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void))(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void))(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100022424()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100022458(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10028C04C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000224D8;
  return sub_10001C304(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000224D8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100022520()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100022544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10028C05C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000224D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10028C058 + dword_10028C058))(a1, v4);
}

uint64_t sub_1000225B4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_100022700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100019D98(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100022758(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD), uint64_t a8, uint64_t a9)
{
  return sub_1000227B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight did not begin. Missing Wrapped Key in keychain. Event reported: %s\"");
}

uint64_t sub_100022784(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD), uint64_t a8, uint64_t a9)
{
  return sub_1000227B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight did not begin. Invalid InheritanceAccessKeyRecord. Event reported: %s\"");
}

uint64_t sub_1000227B0(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD), uint64_t a8, uint64_t a9, char *a10)
{
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  NSString v27;
  Class isa;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v54;
  _QWORD v57[3];
  _BYTE v58[8];
  _QWORD v59[3];
  _BYTE v60[8];
  void *v61;
  _OWORD v62[2];
  uint64_t v63[3];
  uint64_t v64;

  v12 = a4;
  if (a1)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v18 = v17;
    v64 = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
    v63[0] = (uint64_t)a1;
    sub_1000080F4(v63, v62);
    v19 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v61 = &_swiftEmptyDictionarySingleton;
    sub_10001F9E0(v62, v16, v18, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (a2)
    {
      swift_getErrorValue(a2, v60, v59);
      v21 = v59[1];
      v22 = v59[2];
      swift_errorRetain(a2);
      sub_10002F5E8(v21, v22);
      v24 = v23;
      swift_getErrorValue(a2, v58, v57);
      v25 = sub_10002F648(v57[1], v57[2]);
      v26 = objc_allocWithZone((Class)NSError);
      v27 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v24);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v29 = objc_msgSend(v26, "initWithDomain:code:userInfo:", v27, v25, isa);

      v30 = (void *)_convertErrorToNSError(_:)(v29);
      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v30);

      swift_errorRelease(a2);
    }
    else
    {
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v32 = v19;
      v33 = (void *)_convertErrorToNSError(_:)(v32);

      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v33);
    }
    v12 = a4;
  }
  else
  {
    if (a2)
      v31 = (void *)_convertErrorToNSError(_:)(a2);
    else
      v31 = 0;
    objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v31);

  }
  v35 = a9;
  v34 = a10;
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v36 = type metadata accessor for Logger(0);
  sub_100005288(v36, (uint64_t)qword_1002A8A98);
  v37 = a3;
  v38 = swift_retain(v12);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(64, -1);
    v63[0] = v52;
    *(_DWORD *)v41 = 136315394;
    v54 = a8;
    v42 = *(_QWORD *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v43 = *(_QWORD *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v43);
    *(_QWORD *)&v62[0] = sub_1001DEF4C(v42, v43, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, (char *)v62 + 8);
    swift_release(v12);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v41 + 12) = 2080;
    v44 = objc_msgSend(v37, "debugDescription");
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v46 = v12;
    v47 = a7;
    v49 = v48;

    v35 = a9;
    *(_QWORD *)&v62[0] = sub_1001DEF4C(v45, v49, v63);
    a8 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, (char *)v62 + 8);

    v50 = v49;
    a7 = v47;
    v12 = v46;
    v34 = a10;
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - Reporting Preflight Event %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_release(v12);
  }
  objc_msgSend(*(id *)(v12 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter), "sendEvent:", v37);
  return sub_10001BAA8(a5, a6, a7, a8, v35, v34);
}

uint64_t sub_100022C70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, void (*a11)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, unint64_t, uint64_t, uint64_t, id, uint64_t, uint64_t, id, uint64_t, uint64_t, id);
  id v71;
  id v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83[4];
  uint64_t v84[6];

  v78 = a8;
  v79 = a4;
  v77 = a3;
  v15 = sub_1000080B4(&qword_10028C078);
  v74 = *(_QWORD *)(v15 - 8);
  v75 = v15;
  __chkstk_darwin(v15, v16);
  v73 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_1000080B4(&qword_10028C060);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69, v18);
  v67 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_1000080B4(&qword_10028FA50);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66, v20);
  v64 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000080B4(&qword_10028C080);
  v63 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a6);
  v72 = a7;
  v80 = a9;
  swift_retain(a9);
  v71 = a10;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v76 = a1;
  objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v70 = a11;
  v27 = type metadata accessor for Logger(0);
  sub_100005288(v27, (uint64_t)qword_1002A8A98);
  v28 = swift_retain(a5);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v62 = a6;
    v33 = v32;
    v84[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v61 = v31 + 4;
    v35 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v34 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v34);
    v82 = sub_1001DEF4C(v35, v34, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
    swift_release(a5);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - Verifying claim code", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v36 = v33;
    a6 = v62;
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release(a5);
  }
  v37 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  v38 = v63;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v39(v25, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol, v22);
  Dependency.wrappedValue.getter(v84, v22);
  v40 = *(void (**)(char *, uint64_t))(v38 + 8);
  v40(v25, v22);
  v41 = v65;
  v42 = v64;
  v43 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v66);
  Dependency.wrappedValue.getter(&v82, v43);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v44 = v68;
  v45 = v67;
  v46 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v69);
  Dependency.wrappedValue.getter(&v81, v46);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  v47 = v81;
  v48 = sub_10000732C(&v82, v83[2]);
  v49 = sub_10002193C(*v48, v47);

  sub_100006F58(&v82);
  sub_100006F58(v84);
  v39(v25, v37, v22);
  Dependency.wrappedValue.getter(v84, v22);
  v40(v25, v22);
  v50 = v73;
  v51 = v74;
  v52 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v75);
  Dependency.wrappedValue.getter(&v82, v52);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  v53 = v82;
  swift_retain(a5);
  v54 = v79;
  swift_errorRetain(v79);
  v55 = v76;
  swift_retain(a6);
  v56 = v72;
  v57 = v80;
  swift_retain(v80);
  v58 = v71;
  swift_retain(a5);
  swift_errorRetain(v54);
  v59 = v55;
  v70(v77, v49, v53, v54, v59, a5, a6, v56, v78, v57, v58);
  swift_bridgeObjectRelease(v49);
  swift_release(a6);

  swift_release(v57);
  swift_errorRelease(v54);
  swift_unknownObjectRelease(v53);
  swift_release(a5);

  sub_100006F58(v84);
  swift_release(v57);

  return swift_release(a6);
}

uint64_t sub_100023268()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));

  swift_release(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, v12 + 16, v3 | 7);
}

uint64_t sub_1000233C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001B45C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void **)(v1 + v5), *(uint64_t (**)(_QWORD))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100023428(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD), uint64_t a8, uint64_t a9)
{
  return sub_1000227B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, "[%s] 🌧️ Preflight event reported. %s");
}

uint64_t sub_100023454(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(_QWORD), uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t (*v75)(_QWORD);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81[4];
  uint64_t v82[6];

  v75 = a8;
  v76 = a4;
  v74 = a3;
  v14 = sub_1000080B4(&qword_10028C078);
  v71 = *(_QWORD *)(v14 - 8);
  v72 = v14;
  __chkstk_darwin(v14, v15);
  v70 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000080B4(&qword_10028C060);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v17);
  v66 = (char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000080B4(&qword_10028FA50);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v19);
  v63 = (char *)v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000080B4(&qword_10028C080);
  v62 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  v24 = (char *)v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a6);
  v69 = a7;
  v77 = a9;
  swift_retain(a9);
  v78 = a10;
  swift_errorRetain(a10);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v73 = a1;
  objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v26 = type metadata accessor for Logger(0);
  sub_100005288(v26, (uint64_t)qword_1002A8A98);
  v27 = swift_retain(a5);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v61 = a6;
    v32 = v31;
    v82[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v60[1] = v30 + 4;
    v34 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v33 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v33);
    v80 = sub_1001DEF4C(v34, v33, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    swift_release(a5);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - Verifying claim code", v30, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v35 = v32;
    a6 = v61;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release(a5);
  }
  v36 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  v37 = v62;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
  v38(v24, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol, v21);
  Dependency.wrappedValue.getter(v82, v21);
  v39 = *(void (**)(char *, uint64_t))(v37 + 8);
  v39(v24, v21);
  v40 = v64;
  v41 = v63;
  v42 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v65);
  Dependency.wrappedValue.getter(&v80, v42);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  v43 = v67;
  v44 = v66;
  v45 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v68);
  Dependency.wrappedValue.getter(&v79, v45);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  v46 = v79;
  v47 = sub_10000732C(&v80, v81[2]);
  v48 = sub_10002193C(*v47, v46);

  sub_100006F58(&v80);
  sub_100006F58(v82);
  v38(v24, v36, v21);
  Dependency.wrappedValue.getter(v82, v21);
  v39(v24, v21);
  v49 = v70;
  v50 = v71;
  v51 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v72);
  Dependency.wrappedValue.getter(&v80, v51);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  v52 = v80;
  swift_retain(a5);
  v53 = v76;
  swift_errorRetain(v76);
  v54 = v73;
  swift_retain(a6);
  v55 = v69;
  v56 = v77;
  swift_retain(v77);
  v57 = v78;
  swift_errorRetain(v78);
  swift_retain(a5);
  swift_errorRetain(v53);
  v58 = v54;
  sub_1001D7B14(v74, v48, v52, v53, v58, a5, a6, v55, v75, v56, v57);
  swift_errorRelease(v57);
  swift_bridgeObjectRelease(v48);
  swift_release(a6);

  swift_release(v56);
  swift_errorRelease(v53);
  swift_unknownObjectRelease(v52);
  swift_release(a5);

  sub_100006F58(v82);
  swift_release(v56);

  swift_release(a6);
  return swift_errorRelease(v57);
}

uint64_t sub_100023A44(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  NSString v23;
  Class isa;
  id v25;
  void *v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  os_log_type_t type;
  uint64_t v47;
  _QWORD v50[3];
  _BYTE v51[8];
  _QWORD v52[3];
  _BYTE v53[8];
  void *v54;
  _OWORD v55[2];
  uint64_t v56[3];
  uint64_t v57;

  v8 = a4;
  if (a1)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v14 = v13;
    v57 = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
    v56[0] = (uint64_t)a1;
    sub_1000080F4(v56, v55);
    v15 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v54 = &_swiftEmptyDictionarySingleton;
    sub_10001F9E0(v55, v12, v14, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (a2)
    {
      swift_getErrorValue(a2, v53, v52);
      v17 = v52[1];
      v18 = v52[2];
      swift_errorRetain(a2);
      sub_10002F5E8(v17, v18);
      v20 = v19;
      swift_getErrorValue(a2, v51, v50);
      v21 = sub_10002F648(v50[1], v50[2]);
      v22 = objc_allocWithZone((Class)NSError);
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v25 = objc_msgSend(v22, "initWithDomain:code:userInfo:", v23, v21, isa);

      v26 = (void *)_convertErrorToNSError(_:)(v25);
      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v26);

      swift_errorRelease(a2);
    }
    else
    {
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v28 = v15;
      v29 = (void *)_convertErrorToNSError(_:)(v28);

      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v29);
    }
    v8 = a4;
  }
  else
  {
    if (a2)
      v27 = (void *)_convertErrorToNSError(_:)(a2);
    else
      v27 = 0;
    objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v27);

  }
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v30 = type metadata accessor for Logger(0);
  sub_100005288(v30, (uint64_t)qword_1002A8A98);
  v31 = a3;
  v32 = swift_retain(v8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v47 = swift_slowAlloc(64, -1);
    v56[0] = v47;
    *(_DWORD *)v35 = 136315394;
    type = v34;
    v36 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v37 = *(_QWORD *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v37);
    *(_QWORD *)&v55[0] = sub_1001DEF4C(v36, v37, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8);
    swift_release(v8);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v35 + 12) = 2080;
    v38 = objc_msgSend(v31, "debugDescription");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v40 = a7;
    v42 = v41;

    *(_QWORD *)&v55[0] = sub_1001DEF4C(v39, v42, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, (char *)v55 + 8);

    v43 = v42;
    a7 = v40;
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v33, type, "%s - Reporting Preflight Event %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_release(v8);
  }
  objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter), "sendEvent:", v31);
  return sub_10001BD04(a5, a6, a7);
}

uint64_t sub_100023EF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t (*v75)(_QWORD);
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80[4];
  uint64_t v81[6];

  v75 = a8;
  v76 = a4;
  v74 = a3;
  v13 = sub_1000080B4(&qword_10028C078);
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  __chkstk_darwin(v13, v14);
  v70 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_1000080B4(&qword_10028C060);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v16);
  v66 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000080B4(&qword_10028FA50);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v18);
  v63 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4(&qword_10028C080);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a6);
  v69 = a7;
  v77 = a9;
  swift_retain(a9);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v73 = a1;
  objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v26 = type metadata accessor for Logger(0);
  sub_100005288(v26, (uint64_t)qword_1002A8A98);
  v27 = swift_retain(a5);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(12, -1);
    v61 = v21;
    v31 = (uint8_t *)v30;
    v32 = swift_slowAlloc(32, -1);
    v62 = a6;
    v33 = v32;
    v81[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v60 = v31 + 4;
    v35 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v34 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v34);
    v79 = sub_1001DEF4C(v35, v34, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80);
    swift_release(a5);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - Verifying claim code", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v36 = v33;
    a6 = v62;
    swift_slowDealloc(v36, -1, -1);
    v37 = v31;
    v21 = v61;
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_release(a5);
  }
  v38 = a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v39(v24, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__beneficiaryInfoVerificationProtocol, v20);
  Dependency.wrappedValue.getter(v81, v20);
  v40 = *(void (**)(char *, uint64_t))(v21 + 8);
  v40(v24, v20);
  v41 = v64;
  v42 = v63;
  v43 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__accountStore, v65);
  Dependency.wrappedValue.getter(&v79, v43);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v44 = v67;
  v45 = v66;
  v46 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__akAccountManager, v68);
  Dependency.wrappedValue.getter(&v78, v46);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
  v47 = v78;
  v48 = sub_10000732C(&v79, v80[2]);
  v49 = sub_10002193C(*v48, v47);

  sub_100006F58(&v79);
  sub_100006F58(v81);
  v39(v24, v38, v20);
  Dependency.wrappedValue.getter(v81, v20);
  v40(v24, v20);
  v50 = v70;
  v51 = v71;
  v52 = v72;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, a5 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck__securityController, v72);
  Dependency.wrappedValue.getter(&v79, v52);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  v53 = v79;
  swift_retain(a5);
  v54 = v76;
  swift_errorRetain(v76);
  v55 = v73;
  swift_retain(a6);
  v56 = v69;
  v57 = v77;
  swift_retain(v77);
  swift_retain(a5);
  swift_errorRetain(v54);
  v58 = v55;
  sub_1001D8A08(v74, v49, v53, v54, v58, a5, a6, v56, v75, v57);
  swift_bridgeObjectRelease(v49);
  swift_release(a6);

  swift_release(v57);
  swift_errorRelease(v54);
  swift_unknownObjectRelease(v53);
  swift_release(a5);

  sub_100006F58(v81);
  swift_release(v57);

  return swift_release(a6);
}

uint64_t sub_1000244B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000244EC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t (*v37)(_QWORD);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v44;
  _QWORD v45[3];
  _BYTE v46[8];
  _QWORD v47[3];
  _BYTE v48[8];
  void *v49;
  _OWORD v50[2];
  uint64_t v51[3];
  uint64_t v52;

  v6 = a4;
  if (a1)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    v12 = v11;
    v52 = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
    v51[0] = (uint64_t)a1;
    sub_1000080F4(v51, v50);
    v13 = a1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v49 = &_swiftEmptyDictionarySingleton;
    sub_10001F9E0(v50, v10, v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0x8000000000000000);
    if (a2)
    {
      swift_getErrorValue(a2, v48, v47);
      v15 = v47[1];
      v16 = v47[2];
      swift_errorRetain(a2);
      sub_10002F5E8(v15, v16);
      v18 = v17;
      swift_getErrorValue(a2, v46, v45);
      v19 = sub_10002F648(v45[1], v45[2]);
      v20 = objc_allocWithZone((Class)NSError);
      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v18);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v23 = objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, v19, isa);

      v24 = (void *)_convertErrorToNSError(_:)(v23);
      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v24);

      swift_errorRelease(a2);
    }
    else
    {
      swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
      v26 = v13;
      v27 = (void *)_convertErrorToNSError(_:)(v26);

      objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v27);
    }
    v6 = a4;
  }
  else
  {
    if (a2)
      v25 = (void *)_convertErrorToNSError(_:)(a2);
    else
      v25 = 0;
    objc_msgSend(a3, "populateUnderlyingErrorsStartingWithRootError:", v25);

  }
  if (qword_10028AE08 != -1)
    swift_once(&qword_10028AE08, sub_100046E58);
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A8A98);
  v29 = a3;
  v30 = swift_retain(v6);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v44 = swift_slowAlloc(64, -1);
    v51[0] = v44;
    *(_DWORD *)v33 = 136315394;
    v34 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName);
    v35 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v35);
    *(_QWORD *)&v50[0] = sub_1001DEF4C(v34, v35, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, (char *)v50 + 8);
    swift_release(v6);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v33 + 12) = 2080;
    v36 = objc_msgSend(v29, "debugDescription");
    v37 = a5;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;

    v41 = v38;
    a5 = v37;
    *(_QWORD *)&v50[0] = sub_1001DEF4C(v41, v40, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v50, (char *)v50 + 8);

    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - Reporting Preflight Event %s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release(v6);
  }
  return a5(objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC13appleaccountd31InheritancePreflightHealthCheck_analyticsReporter), "sendEvent:", v29));
}

uint64_t sub_100024988(uint64_t *a1)
{
  uint64_t v1;

  return sub_100019F98(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000249A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000080B4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000249E4(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100024A20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000080B4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for WalrusError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WalrusError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100024B54 + 4 * byte_1002191B5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100024B88 + 4 * byte_1002191B0[v4]))();
}

uint64_t sub_100024B88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024B90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100024B98);
  return result;
}

uint64_t sub_100024BA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100024BACLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100024BB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100024BB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WalrusError()
{
  return &type metadata for WalrusError;
}

unint64_t sub_100024BD8()
{
  unint64_t result;

  result = qword_10028C1A8;
  if (!qword_10028C1A8)
  {
    result = swift_getWitnessTable(&unk_100219214, &type metadata for WalrusError);
    atomic_store(result, (unint64_t *)&qword_10028C1A8);
  }
  return result;
}

uint64_t sub_100024C28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D22E0(*a1, *a2);
}

Swift::Int sub_100024C34()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000067;
  v3 = 0x6E69747563657865;
  if (v1 != 1)
  {
    v3 = 0x64656873696E6966;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7964616572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100024CD4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE900000000000067;
  v3 = 0x6E69747563657865;
  if (*v1 != 1)
  {
    v3 = 0x64656873696E6966;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x7964616572;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100024D50()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE900000000000067;
  v3 = 0x6E69747563657865;
  if (v1 != 1)
  {
    v3 = 0x64656873696E6966;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x7964616572;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100024DEC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100025594(*a1);
  *a2 = result;
  return result;
}

void sub_100024E18(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE900000000000067;
  v5 = 0x6E69747563657865;
  if (v2 != 1)
  {
    v5 = 0x64656873696E6966;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7964616572;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_100024E78(char a1)
{
  _BYTE *v1;
  unint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  NSString v7;
  unint64_t v8;
  NSString v9;
  unint64_t v10;
  NSString v11;
  NSString v12;

  v3 = 0xE900000000000067;
  v4 = OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state;
  v5 = v1[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state];
  if (v1[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state])
  {
    if (v5 == 1)
      v6 = 0xE900000000000067;
    else
      v6 = 0xE800000000000000;
  }
  else
  {
    v6 = 0xE500000000000000;
  }
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  objc_msgSend(v1, "willChangeValueForKey:", v7);

  if (a1)
  {
    if (a1 == 1)
      v8 = 0xE900000000000067;
    else
      v8 = 0xE800000000000000;
  }
  else
  {
    v8 = 0xE500000000000000;
  }
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v1, "willChangeValueForKey:", v9);

  v1[v4] = a1;
  if (v5)
  {
    if (v5 == 1)
      v10 = 0xE900000000000067;
    else
      v10 = 0xE800000000000000;
  }
  else
  {
    v10 = 0xE500000000000000;
  }
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v1, "didChangeValueForKey:", v11);

  if (v1[v4])
  {
    if (v1[v4] != 1)
      v3 = 0xE800000000000000;
  }
  else
  {
    v3 = 0xE500000000000000;
  }
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  objc_msgSend(v1, "didChangeValueForKey:", v12);

}

uint64_t sub_10002518C()
{
  _BYTE *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  char v6;

  v1 = 0x7964616572;
  if (objc_msgSend(v0, "isCancelled"))
  {
    if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state])
    {
      if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] == 1)
      {
        swift_bridgeObjectRelease(0xE900000000000067);
        goto LABEL_8;
      }
      v2 = 0xE800000000000000;
      v3 = 0x64656873696E6966;
    }
    else
    {
      v2 = 0xE500000000000000;
      v3 = 0x7964616572;
    }
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, 0x6E69747563657865, 0xE900000000000067, 0);
    swift_bridgeObjectRelease(v2);
    if ((v4 & 1) == 0)
    {
      v6 = 1;
      return v6 & 1;
    }
  }
LABEL_8:
  if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state])
  {
    if (v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] != 1)
    {
      v6 = 1;
      v5 = 0xE800000000000000;
      goto LABEL_14;
    }
    v1 = 0x6E69747563657865;
    v5 = 0xE900000000000067;
  }
  else
  {
    v5 = 0xE500000000000000;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v1, v5, 0x64656873696E6966, 0xE800000000000000, 0);
LABEL_14:
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_1000252D4()
{
  char *v0;
  uint64_t result;
  uint64_t v2;
  void (*v3)(void (*)(), uint64_t);
  uint64_t v4;

  result = (uint64_t)objc_msgSend(v0, "isCancelled");
  if ((result & 1) == 0)
  {
    sub_100024E78(1);
    v3 = *(void (**)(void (*)(), uint64_t))&v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock + 8];
    v4 = swift_allocObject(&unk_10025FCE0, 24, 7);
    swift_unknownObjectUnownedInit(v4 + 16, v0);
    swift_retain(v2);
    swift_retain(v4);
    v3(sub_100025600, v4);
    swift_release(v2);
    return swift_release_n(v4, 2);
  }
  return result;
}

void sub_10002537C(uint64_t a1)
{
  id Strong;

  Strong = (id)swift_unknownObjectUnownedLoadStrong(a1 + 16);
  sub_100024E78(2);

}

id sub_10002541C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AsyncOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AsyncOperation()
{
  return objc_opt_self(_TtC13appleaccountd14AsyncOperation);
}

uint64_t storeEnumTagSinglePayload for AsyncOperation.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000254CC + 4 * byte_100219281[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100025500 + 4 * byte_10021927C[v4]))();
}

uint64_t sub_100025500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100025510);
  return result;
}

uint64_t sub_10002551C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100025524);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100025528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AsyncOperation.State()
{
  return &type metadata for AsyncOperation.State;
}

unint64_t sub_100025550()
{
  unint64_t result;

  result = qword_10028C1E8;
  if (!qword_10028C1E8)
  {
    result = swift_getWitnessTable(&unk_100219324, &type metadata for AsyncOperation.State);
    atomic_store(result, (unint64_t *)&qword_10028C1E8);
  }
  return result;
}

unint64_t sub_100025594(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E500, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1000255DC()
{
  uint64_t v0;

  swift_unknownObjectUnownedDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100025600()
{
  uint64_t v0;

  sub_10002537C(v0);
}

BOOL sub_100025608(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100025620()
{
  _BYTE *v0;

  if (*v0)
    return 0x6169646F74737563;
  else
    return 1701869940;
}

uint64_t sub_10002565C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100025F64(a1, a2);
  *a3 = result;
  return result;
}

void sub_100025680(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002568C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100025C58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000256B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100025C58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000256DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10002572C()
{
  return type metadata accessor for CustodianRemovedMessage(0);
}

uint64_t type metadata accessor for CustodianRemovedMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_10028C218;
  if (!qword_10028C218)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRemovedMessage);
  return result;
}

uint64_t sub_100025770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100219398;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000257E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  char v22;
  char v23;
  char v24;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v21[0] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_10028C2E8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000732C(a1, v13);
  v15 = sub_100025C58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRemovedMessage.CodingKeys, &type metadata for CustodianRemovedMessage.CodingKeys, v15, v13, v14);
  v24 = *(_BYTE *)(v2 + 16);
  v23 = 0;
  v16 = sub_100025CE0();
  v17 = v21[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v8, &type metadata for MessageType, v16);
  if (!v17)
  {
    v18 = v21[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v21[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v4);
    v22 = 1;
    v19 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v7, &v22, v8, v4, v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1000259A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_10028C2D0);
  v8 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v27 = a1;
  sub_10000732C(a1, v13);
  v14 = sub_100025C58();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRemovedMessage.CodingKeys, &type metadata for CustodianRemovedMessage.CodingKeys, v14, v13, v12);
  if (v1)
  {
    v22 = v28;
    v19 = v27;
    v20 = type metadata accessor for CustodianRemovedMessage(0);
    swift_deallocPartialClassInstance(v22, v20, *(unsigned int *)(*(_QWORD *)v22 + 48), *(unsigned __int16 *)(*(_QWORD *)v22 + 52));
    v24 = v19;
  }
  else
  {
    v15 = v8;
    v16 = v7;
    v25 = v4;
    v30 = 0;
    v17 = sub_100025C9C();
    v18 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for MessageType, &v30, v26, &type metadata for MessageType, v17);
    v22 = v28;
    *(_BYTE *)(v28 + 16) = v31;
    v29 = 1;
    v23 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v3, &v29, v18, v3, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v18);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v22 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v16, v3);
    v24 = v27;
  }
  sub_100006F58(v24);
  return v22;
}

uint64_t sub_100025BE0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for CustodianRemovedMessage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_1000259A8(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_100025C38(_QWORD *a1)
{
  return sub_1000257E8(a1);
}

unint64_t sub_100025C58()
{
  unint64_t result;

  result = qword_10028C2D8;
  if (!qword_10028C2D8)
  {
    result = swift_getWitnessTable(&unk_1002194C4, &type metadata for CustodianRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C2D8);
  }
  return result;
}

unint64_t sub_100025C9C()
{
  unint64_t result;

  result = qword_10028C2E0;
  if (!qword_10028C2E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_10028C2E0);
  }
  return result;
}

unint64_t sub_100025CE0()
{
  unint64_t result;

  result = qword_10028C2F0;
  if (!qword_10028C2F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_10028C2F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustodianRemovedMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CustodianRemovedMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100025E00 + 4 * byte_100219355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100025E34 + 4 * byte_100219350[v4]))();
}

uint64_t sub_100025E34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025E3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100025E44);
  return result;
}

uint64_t sub_100025E50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100025E58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100025E5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100025E64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100025E70(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRemovedMessage.CodingKeys()
{
  return &type metadata for CustodianRemovedMessage.CodingKeys;
}

unint64_t sub_100025E90()
{
  unint64_t result;

  result = qword_10028C2F8;
  if (!qword_10028C2F8)
  {
    result = swift_getWitnessTable(&unk_10021949C, &type metadata for CustodianRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C2F8);
  }
  return result;
}

unint64_t sub_100025ED8()
{
  unint64_t result;

  result = qword_10028C300;
  if (!qword_10028C300)
  {
    result = swift_getWitnessTable(&unk_10021940C, &type metadata for CustodianRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C300);
  }
  return result;
}

unint64_t sub_100025F20()
{
  unint64_t result;

  result = qword_10028C308;
  if (!qword_10028C308)
  {
    result = swift_getWitnessTable(&unk_100219434, &type metadata for CustodianRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C308);
  }
  return result;
}

uint64_t sub_100025F64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    swift_bridgeObjectRelease(0xEB0000000044496ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10002605C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char);
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (**v34)(char);
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  _QWORD v43[5];

  v37 = a2;
  v7 = sub_1000080B4(&qword_10028C448);
  v38 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  v41 = v12;
  v15 = __chkstk_darwin(v11, v14);
  v42 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v36 - v17;
  v40 = *(void (**)(char *, uint64_t))(v19 + 16);
  v40((char *)&v36 - v17, a1 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID);
  v20 = swift_allocObject(&unk_10025FEB0, 24, 7);
  swift_weakInit(v20 + 16, v3);
  v21 = (uint64_t (*)(char))swift_allocObject(&unk_10025FED8, 48, 7);
  *((_QWORD *)v21 + 2) = v20;
  *((_QWORD *)v21 + 3) = a1;
  *((_QWORD *)v21 + 4) = a2;
  *((_QWORD *)v21 + 5) = a3;
  v22 = a3;
  v36 = a3;
  v23 = v38;
  ((void (*)(char *, uint64_t, uint64_t))v38[2])(v10, v3 + OBJC_IVAR____TtC13appleaccountd18DaemonShareHandler__custodianStorage, v7);
  swift_retain(v20);
  swift_retain(a1);
  swift_bridgeObjectRetain(v22);
  Dependency.wrappedValue.getter(v43, v7);
  ((void (*)(char *, uint64_t))v23[1])(v10, v7);
  v38 = sub_10000732C(v43, v43[3]);
  v24 = v42;
  v25 = v39;
  ((void (*)(char *, char *, uint64_t))v40)(v42, v18, v39);
  v26 = v41;
  v27 = *(unsigned __int8 *)(v41 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = (v13 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_10025FF00, v30 + 16, v27 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v31 + v28, v24, v25);
  v32 = (_QWORD *)(v31 + v29);
  v33 = v36;
  *v32 = v37;
  v32[1] = v33;
  v34 = (uint64_t (**)(char))(v31 + v30);
  *v34 = sub_100027020;
  v34[1] = v21;
  swift_bridgeObjectRetain(v33);
  swift_retain(v21);
  sub_1001BFD24((uint64_t)v18, (uint64_t)sub_1000276D0, v31);
  swift_release(v31);
  sub_100006F58(v43);
  swift_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v25);
  return swift_release(v20);
}

uint64_t sub_100026300(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD v18[5];
  _BYTE v19[24];

  v10 = type metadata accessor for CloudShareInfo(0);
  result = __chkstk_darwin(v10, v11);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    result = (uint64_t)objc_msgSend((id)objc_opt_self(AAPreferences), "isSimulateUnhealthyCustodianEnabled");
    if ((result & 1) == 0)
    {
      swift_beginAccess(a2 + 16, v19, 0, 0);
      result = swift_weakLoadStrong(a2 + 16);
      if (result)
      {
        v15 = result;
        sub_100006CA4(result + 56, (uint64_t)v18);
        swift_release(v15);
        v16 = sub_10000732C(v18, v18[3]);
        sub_100027FE8(a3 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t)v14, type metadata accessor for CloudShareInfo);
        v17 = *v16;
        swift_retain(a3);
        swift_retain(a2);
        swift_bridgeObjectRetain(a5);
        sub_1000EA158((uint64_t)v14, 1, v17, a3, a2, a4, a5);
        swift_release(a3);
        swift_release(a2);
        swift_bridgeObjectRelease(a5);
        sub_100028388((uint64_t)v14, type metadata accessor for CloudShareInfo);
        return sub_100006F58(v18);
      }
    }
  }
  return result;
}

void sub_100026478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t Strong;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  void (*isa)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  NSString v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  NSObject *v76;
  __n128 v77;
  os_log_type_t v78;
  uint8_t *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v10 = type metadata accessor for UUID(0);
  v11 = *(NSObject **)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v90 - v16;
  __chkstk_darwin(v15, v18);
  v21 = (char *)&v90 - v20;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v23 = swift_errorRetain(a1);
    v98 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter(v98);
    if (os_log_type_enabled(v98, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v27 = _convertErrorToNSError(_:)(a1);
      v103 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      *v26 = v27;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v98, v24, "Failed to accept share: %@", v25, 0xCu);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    v94 = a4;
    v97 = (char *)v19;
    v29 = a3 + 16;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v91 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v91, (uint64_t)qword_1002A89D8);
    v31 = swift_retain_n(a2, 2);
    v96 = v30;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    v34 = os_log_type_enabled(v32, v33);
    v92 = a5;
    if (v34)
    {
      v35 = swift_slowAlloc(12, -1);
      v93 = v29;
      v36 = v10;
      v37 = (uint8_t *)v35;
      v38 = swift_slowAlloc(32, -1);
      v98 = v11;
      v39 = v38;
      v95 = v17;
      *(_DWORD *)v37 = 136315138;
      v103 = v38;
      v90 = v37 + 4;
      ((void (*)(char *, uint64_t, uint64_t))v98[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v36);
      v40 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v40);
      v43 = v42;
      ((void (*)(char *, uint64_t))v98[1].isa)(v21, v36);
      v101 = sub_1001DEF4C(v41, v43, &v103);
      v17 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Share for %s was accepted successfully.", v37, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      v44 = v39;
      v11 = v98;
      swift_slowDealloc(v44, -1, -1);
      v45 = v37;
      v10 = v36;
      v29 = v93;
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {

      swift_release_n(a2, 2);
    }
    swift_beginAccess(v29, &v103, 0, 0);
    Strong = swift_weakLoadStrong(v29);
    if (Strong)
    {
      v47 = Strong;
      ((void (*)(char *, uint64_t, uint64_t))v11[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
      sub_10002802C((uint64_t)v21);
      swift_release(v47);
      ((void (*)(char *, uint64_t))v11[1].isa)(v21, v10);
    }
    if (*(_BYTE *)(a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) == 1)
    {
      v48 = swift_retain_n(a2, 2);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = swift_slowAlloc(12, -1);
        v95 = v17;
        v52 = (uint8_t *)v51;
        v53 = swift_slowAlloc(32, -1);
        v98 = v11;
        v54 = v53;
        *(_DWORD *)v52 = 136315138;
        v101 = v53;
        v90 = v52 + 4;
        ((void (*)(char *, uint64_t, uint64_t))v98[2].isa)(v21, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
        v55 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
        v93 = v29;
        v58 = v57;
        ((void (*)(char *, uint64_t))v98[1].isa)(v21, v10);
        v100 = (void *)sub_1001DEF4C(v56, v58, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
        swift_release_n(a2, 2);
        v59 = v58;
        v29 = v93;
        swift_bridgeObjectRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "This is a setup flow, let's finalize %s with owner.", v52, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        v60 = v54;
        v11 = v98;
        swift_slowDealloc(v60, -1, -1);
        v61 = v52;
        v17 = v95;
        swift_slowDealloc(v61, -1, -1);

      }
      else
      {

        swift_release_n(a2, 2);
      }
      swift_beginAccess(v29, &v101, 0, 0);
      v62 = swift_weakLoadStrong(v29);
      if (v62)
      {
        v63 = v62;
        isa = (void (*)(char *, uint64_t, uint64_t))v11[2].isa;
        isa(v17, a2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v10);
        sub_10000732C((_QWORD *)(v63 + 16), *(_QWORD *)(v63 + 40));
        isa(v97, (uint64_t)v17, v10);
        isa(v21, (uint64_t)v17, v10);
        v65 = type metadata accessor for FinalizeCustodianSetupMessage(0);
        v66 = swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
        *(_BYTE *)(v66 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
        *(_BYTE *)(v66 + 16) = 3;
        ((void (*)(uint64_t, char *, uint64_t))v11[4].isa)(v66 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v21, v10);
        v67 = objc_allocWithZone((Class)AAMessagingDestination);
        v68 = v92;
        swift_bridgeObjectRetain(v92);
        v69 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v68);
        v70 = objc_msgSend(v67, "initWithHandle:", v69);

        if (v70)
        {
          v72 = v17;
          v73 = qword_10028ADB0;
          v74 = v70;
          if (v73 != -1)
            swift_once(&qword_10028ADB0, sub_100046CC8);
          v75 = sub_100005288(v91, (uint64_t)qword_1002A8990);
          v76 = Logger.logObject.getter(v75);
          v78 = static os_log_type_t.default.getter(v77);
          if (os_log_type_enabled(v76, v78))
          {
            v79 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v79 = 0;
            _os_log_impl((void *)&_mh_execute_header, v76, v78, "Destination is valid!", v79, 2u);
            swift_slowDealloc(v79, -1, -1);
          }

          sub_1001B25E8(v66, v74);
          v88 = (uint64_t)v97;
          sub_100027BC0(0, (uint64_t)v97);
          swift_release(v66);

          v17 = v72;
        }
        else
        {
          v80 = Logger.logObject.getter(v71);
          v81 = static os_log_type_t.error.getter(v80);
          if (os_log_type_enabled(v80, v81))
          {
            v82 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v82 = 0;
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "Unable to generate destination from handle.", v82, 2u);
            swift_slowDealloc(v82, -1, -1);
          }

          type metadata accessor for AACustodianError(0);
          v84 = v83;
          v99 = -7004;
          v85 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          v86 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
          _BridgedStoredNSError.init(_:userInfo:)(&v100, &v99, v85, v84, v86);
          v87 = v100;
          v88 = (uint64_t)v97;
          sub_100027BC0((uint64_t)v100, (uint64_t)v97);
          swift_release(v66);

        }
        v89 = (void (*)(uint64_t, uint64_t))v11[1].isa;
        v89(v88, v10);
        swift_release(v63);
        v89((uint64_t)v17, v10);
      }
    }
  }
}

uint64_t sub_100026E50()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd18DaemonShareHandler__custodianStorage;
  v2 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100026EB4()
{
  return type metadata accessor for DaemonShareHandler(0);
}

uint64_t type metadata accessor for DaemonShareHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_10028C340;
  if (!qword_10028C340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonShareHandler);
  return result;
}

void sub_100026EF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = "(";
  sub_100026F70(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100026F70(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028C350)
  {
    v2 = sub_10000D908(&qword_10028C880);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028C350);
  }
}

uint64_t sub_100026FC8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100026FEC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100027020(char a1)
{
  uint64_t *v1;

  return sub_100026300(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10002702C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  char v43;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v61 = a6;
  v62 = a5;
  v59 = a2;
  v60 = a4;
  v58 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v57 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v57 - v22;
  v24 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v57 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100027F5C(a1, (uint64_t)v27);
  if (swift_getEnumCaseMultiPayload(v27, v24) != 1)
  {
    sub_100027FA4((uint64_t)v27, (uint64_t)v23);
    v37 = *(_QWORD *)&v23[v12[7]];
    sub_100027FE8((uint64_t)v23, (uint64_t)v20, type metadata accessor for CustodianshipInfoRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v59, v7);
    if (v37 == 2)
    {
      v38 = static UUID.== infix(_:_:)(&v20[v12[5]]);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_100028388((uint64_t)v20, type metadata accessor for CustodianshipInfoRecord);
      sub_100027FE8((uint64_t)v23, (uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
      if ((v38 & 1) != 0)
      {
        v39 = &v16[v12[6]];
        v40 = *((_QWORD *)v39 + 1);
        v41 = v60;
        if (*(_QWORD *)v39 == v58 && v40 == v60)
        {
          sub_100028388((uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
LABEL_26:
          if (qword_10028ADC8 != -1)
            swift_once(&qword_10028ADC8, sub_100046D2C);
          v52 = type metadata accessor for Logger(0);
          v53 = sub_100005288(v52, (uint64_t)qword_1002A89D8);
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v54, v55))
          {
            v56 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v56 = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Successfully fetched Custodianship owner, start processing share ...", v56, 2u);
            swift_slowDealloc(v56, -1, -1);
          }

          v51 = 1;
LABEL_24:
          v62(v51);
          return sub_100028388((uint64_t)v23, type metadata accessor for CustodianshipInfoRecord);
        }
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v39, v40, v58, v60, 0);
        sub_100028388((uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
        if ((v43 & 1) != 0)
          goto LABEL_26;
LABEL_18:
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v45 = type metadata accessor for Logger(0);
        sub_100005288(v45, (uint64_t)qword_1002A89D8);
        v46 = swift_bridgeObjectRetain_n(v41, 2);
        v47 = Logger.logObject.getter(v46);
        v48 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          v64 = v50;
          *(_DWORD *)v49 = 136315138;
          swift_bridgeObjectRetain(v41);
          v63 = sub_1001DEF4C(v58, v41, &v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
          swift_bridgeObjectRelease_n(v41, 3);
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "No Custodianship owner found, will drop the share message from %s.", v49, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v49, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v41, 2);
        }
        v51 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      sub_100028388((uint64_t)v20, type metadata accessor for CustodianshipInfoRecord);
      sub_100027FE8((uint64_t)v23, (uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
    }
    sub_100028388((uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
    v41 = v60;
    goto LABEL_18;
  }
  v28 = *v27;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v29 = type metadata accessor for Logger(0);
  sub_100005288(v29, (uint64_t)qword_1002A89D8);
  v30 = swift_errorRetain(v28);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v33 = 138412290;
    v35 = _convertErrorToNSError(_:)(v28);
    v64 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    *v34 = v35;
    swift_errorRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error fetching custodianship info records: %@", v33, 0xCu);
    v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v34, 1, v36);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    swift_errorRelease(v28);
  }

  v62(0);
  return swift_errorRelease(v28);
}

uint64_t sub_10002763C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_1000276D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10002702C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_100027734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v36 - v11;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89D8);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
    swift_errorRetain(a1);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v36 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v39 = v37;
      *(_DWORD *)v17 = 136315394;
      v18 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
      v21 = v20;
      v38 = sub_1001DEF4C(v19, v20, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      *(_WORD *)(v17 + 12) = 2112;
      v22 = _convertErrorToNSError(_:)(a1);
      v38 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      v23 = v36;
      *v36 = v22;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed performing initial health check for %s. Error: %@", (uint8_t *)v17, 0x16u);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      v25 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A89D8);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v39 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
      v35 = v34;
      v38 = sub_1001DEF4C(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Completed initial health check for %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }

  }
}

void sub_100027BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v10 = swift_errorRetain(a1);
    v27 = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      v14 = _convertErrorToNSError(_:)(a1);
      v29 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      *v13 = v14;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v27, v11, "Failed to send setup finalization message: %@", v12, 0xCu);
      v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A89D8);
    v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v29 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v4, v22);
      v25 = v24;
      v28 = sub_1001DEF4C(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Custodian setup finalization sent for %s.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }

  }
}

uint64_t sub_100027F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028C450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianshipInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027FE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002802C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = v6;
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v33 - v9;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89D8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13 = v12(v10, a1, v2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v34 = v7;
    v18 = v17;
    v38 = v17;
    v35 = a1;
    *(_DWORD *)v16 = 136315138;
    v33 = v12;
    v19 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v2, v19);
    v22 = v21;
    v37 = sub_1001DEF4C(v20, v21, &v38);
    v12 = v33;
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting initial health check for %s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v23 = v18;
    v7 = v34;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }

  v24 = type metadata accessor for CustodianHealthCheck(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v26 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v26);
  v27 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v27);
  v28 = sub_1000080B4(&qword_100297720);
  Dependency.init(dependencyId:config:)(0, 0, 0, v28);
  v12(v7, a1, v2);
  v29 = *(unsigned __int8 *)(v3 + 80);
  v30 = (v29 + 16) & ~v29;
  v31 = swift_allocObject(&unk_10025FF28, v30 + v36, v29 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v31 + v30, v7, v2);
  sub_1000A2DBC(a1, (uint64_t)sub_100028424, v31);
  swift_release(v31);
  return swift_release(v25);
}

uint64_t sub_100028388(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000283C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100028424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_100027734(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_100028460(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = v4;
  v48 = a3;
  v9 = type metadata accessor for CustodianRecord(0);
  v44 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v44 + 64);
  v12 = __chkstk_darwin(v9, v11);
  v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v41 - v14;
  v16 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  v17 = objc_msgSend(a2, "aa_altDSID");
  objc_msgSend(v16, "setAltDSID:", v17);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  v47 = v16;
  objc_msgSend(v16, "setCustodianUUID:", isa);

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v19 = type metadata accessor for Logger(0);
  sub_100005288(v19, (uint64_t)qword_1002A89D8);
  v45 = a1;
  v20 = sub_10002A5C0(a1, (uint64_t)v15);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v42 = v4;
    v25 = v24;
    v50 = v24;
    *(_DWORD *)v23 = 136315138;
    v43 = a4;
    v26 = type metadata accessor for UUID(0);
    v27 = sub_10002A848();
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    v30 = v29;
    v49 = sub_1001DEF4C(v28, v29, &v50);
    a4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v30);
    sub_10002A604((uint64_t)v15);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Revoke from IdMS %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v31 = v25;
    v5 = v42;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_10002A604((uint64_t)v15);
  }

  v32 = (void **)sub_10000732C((_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 120));
  v33 = v46;
  sub_10002A5C0(v45, v46);
  v34 = *(unsigned __int8 *)(v44 + 80);
  v35 = (v34 + 24) & ~v34;
  v36 = (v10 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_10025FF68, v36 + 16, v34 | 7);
  *(_QWORD *)(v37 + 16) = v5;
  sub_10002A7AC(v33, v37 + v35);
  v38 = (_QWORD *)(v37 + v36);
  *v38 = v48;
  v38[1] = a4;
  v39 = *v32;
  swift_retain(v5);
  swift_retain(a4);
  v40 = v47;
  sub_10004401C((uint64_t)v47, (uint64_t)sub_10002A7F0, v37, v39);
  swift_release(v37);

}

uint64_t sub_1000287B8()
{
  _QWORD *v0;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  sub_100006F58(v0 + 17);
  return swift_deallocClassInstance(v0, 176, 7);
}

uint64_t type metadata accessor for CustodianCleanupController()
{
  return objc_opt_self(_TtC13appleaccountd26CustodianCleanupController);
}

uint64_t sub_100028814(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _UNKNOWN **v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v8 = &off_10028A000;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v10 = type metadata accessor for Logger(0);
    sub_100005288(v10, (uint64_t)qword_1002A89D8);
    v11 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v30 = a3;
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v15 = a5;
      v16 = _convertErrorToNSError(_:)(a1);
      v31 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      *v29 = v16;
      a5 = v15;
      v8 = &off_10028A000;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error revoking with idMS: %@", v14, 0xCu);
      v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v17);
      swift_slowDealloc(v29, -1, -1);
      v18 = v14;
      a3 = v30;
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(a1);
      goto LABEL_12;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v12 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v21, "idMS revoke successful", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
  }

LABEL_12:
  if (v8[441] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Continuing to Remove CRK on OT", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  return sub_100028B54(a3, a4, a5);
}

uint64_t sub_100028B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v4 = v3;
  v50 = a3;
  v48 = a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v49 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CustodianRecord(0);
  v46 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v45 = (uint64_t)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v41 - v15;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v17 = type metadata accessor for Logger(0);
  sub_100005288(v17, (uint64_t)qword_1002A89D8);
  v18 = sub_10002A5C0(a1, (uint64_t)v16);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v44 = v6;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v43 = v7;
    v24 = v23;
    v52 = v23;
    *(_DWORD *)v22 = 136315138;
    v42 = v3;
    v25 = sub_10002A848();
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v44, v25);
    v28 = v27;
    v51 = sub_1001DEF4C(v26, v27, &v52);
    v4 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
    swift_bridgeObjectRelease(v28);
    sub_10002A604((uint64_t)v16);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Removing CRK for custodianID: %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v29 = v24;
    v7 = v43;
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    v6 = v44;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    sub_10002A604((uint64_t)v16);
  }

  sub_10000732C((_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 160));
  v31 = (uint64_t)v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v49, a1 + *(int *)(v10 + 20), v6);
  v32 = v45;
  sub_10002A5C0(a1, v45);
  v33 = *(unsigned __int8 *)(v46 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = (v47 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_10025FF90, v36 + 16, v33 | 7);
  sub_10002A7AC(v32, v37 + v34);
  *(_QWORD *)(v37 + v35) = v4;
  v38 = (_QWORD *)(v37 + v36);
  v39 = v50;
  *v38 = v48;
  v38[1] = v39;
  swift_retain(v4);
  swift_retain(v39);
  sub_10018B194(v31, (void (*)(_QWORD))sub_10002AA04, v37);
  swift_release(v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v31, v6);
}

uint64_t sub_100028EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8_t *v66;
  void (*v67)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  os_log_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120[2];

  v118 = a5;
  v114 = a4;
  v115 = a3;
  v7 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v7, v8);
  v113 = (uint64_t *)((char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v111 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v100 - v17;
  v110 = v19;
  __chkstk_darwin(v16, v20);
  v117 = (char *)&v100 - v21;
  v116 = type metadata accessor for CustodianRecord(0);
  v107 = *(_QWORD *)(v116 - 8);
  v23 = __chkstk_darwin(v116, v22);
  v109 = (uint64_t)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23, v25);
  v28 = (char *)&v100 - v27;
  v30 = __chkstk_darwin(v26, v29);
  v32 = (char *)&v100 - v31;
  v108 = v33;
  __chkstk_darwin(v30, v34);
  v36 = (char *)&v100 - v35;
  if (a1)
  {
    v106 = v18;
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89D8);
    sub_10002A5C0(a2, (uint64_t)v32);
    swift_errorRetain(a1);
    v38 = swift_errorRetain(a1);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v42 = swift_slowAlloc(22, -1);
      v102 = v41;
      v43 = v42;
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      v103 = swift_slowAlloc(32, -1);
      v120[0] = v103;
      *(_DWORD *)v43 = 136315394;
      v104 = v11;
      v45 = v116;
      v101 = v39;
      v46 = sub_10002A848();
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v10, v46);
      v49 = v48;
      v119 = sub_1001DEF4C(v47, v48, v120);
      v112 = a2;
      v105 = (void (*)(char *, uint64_t))v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v49);
      sub_10002A604((uint64_t)v32);
      *(_WORD *)(v43 + 12) = 2112;
      swift_errorRetain(a1);
      v50 = _swift_stdlib_bridgeErrorToNSError(a1);
      v119 = v50;
      v51 = v118;
      v10 = (uint64_t)v105;
      a2 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      *v44 = v50;
      v11 = v104;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v52 = v101;
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v102, "Error removing CRK for custodianID: %s %@", (uint8_t *)v43, 0x16u);
      v53 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v44, 1, v53);
      swift_slowDealloc(v44, -1, -1);
      v54 = v103;
      swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      swift_errorRelease(a1);
      v18 = v106;
      goto LABEL_14;
    }
    swift_errorRelease(a1);
    sub_10002A604((uint64_t)v32);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    v18 = v106;
    goto LABEL_12;
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v55 = type metadata accessor for Logger(0);
  sub_100005288(v55, (uint64_t)qword_1002A89D8);
  v56 = sub_10002A5C0(a2, (uint64_t)v36);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.debug.getter(v57);
  if (!os_log_type_enabled(v57, v58))
  {
    sub_10002A604((uint64_t)v36);

LABEL_12:
    v45 = v116;
    goto LABEL_13;
  }
  v59 = swift_slowAlloc(12, -1);
  v112 = a2;
  v103 = (uint64_t)v28;
  v105 = (void (*)(char *, uint64_t))v10;
  v60 = (uint8_t *)v59;
  v61 = swift_slowAlloc(32, -1);
  v120[0] = v61;
  v104 = v11;
  *(_DWORD *)v60 = 136315138;
  v45 = v116;
  v62 = sub_10002A848();
  v63 = dispatch thunk of CustomStringConvertible.description.getter(v105, v62);
  v65 = v64;
  v119 = sub_1001DEF4C(v63, v64, v120);
  v11 = v104;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
  swift_bridgeObjectRelease(v65);
  sub_10002A604((uint64_t)v36);
  _os_log_impl((void *)&_mh_execute_header, v57, v58, "Success removing CRK for custodianID: %s", v60, 0xCu);
  swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v61, -1, -1);
  v66 = v60;
  v10 = (uint64_t)v105;
  v28 = (char *)v103;
  a2 = v112;
  swift_slowDealloc(v66, -1, -1);

LABEL_13:
  v51 = v118;
LABEL_14:
  v67 = (void (*)(_QWORD, _QWORD, _QWORD))v113;
  sub_100024A20(a2 + *(int *)(v45 + 64), (uint64_t)v113, (uint64_t *)&unk_1002904F0);
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v11 + 48))(v67, 1, v10) == 1)
  {
    sub_100004934((uint64_t)v67, (uint64_t *)&unk_1002904F0);
    return sub_100029DB8(a2 + *(int *)(v45 + 20), v114, v51);
  }
  else
  {
    v113 = *(_QWORD **)(v11 + 32);
    ((void (*)(char *, _QWORD, uint64_t))v113)(v117, v67, v10);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v69 = type metadata accessor for Logger(0);
    sub_100005288(v69, (uint64_t)qword_1002A89D8);
    v106 = *(char **)(v11 + 16);
    ((void (*)(char *, char *, uint64_t))v106)(v18, v117, v10);
    v70 = sub_10002A5C0(a2, (uint64_t)v28);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = swift_slowAlloc(22, -1);
      v112 = a2;
      v74 = v73;
      v75 = swift_slowAlloc(64, -1);
      v103 = (uint64_t)v28;
      v104 = v75;
      v120[0] = v75;
      *(_DWORD *)v74 = 136315394;
      v76 = sub_10002A848();
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v10, v76);
      v79 = v78;
      v119 = sub_1001DEF4C(v77, v78, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v79);
      v105 = *(void (**)(char *, uint64_t))(v11 + 8);
      v105(v18, v10);
      *(_WORD *)(v74 + 12) = 2080;
      v80 = v103;
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v10, v76);
      v83 = v82;
      v119 = sub_1001DEF4C(v81, v82, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v83);
      sub_10002A604(v80);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Removing CRK for otPeerID:%s for custodian:%s", (uint8_t *)v74, 0x16u);
      v84 = v104;
      swift_arrayDestroy(v104, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      v85 = v74;
      a2 = v112;
      swift_slowDealloc(v85, -1, -1);
    }
    else
    {
      v105 = *(void (**)(char *, uint64_t))(v11 + 8);
      v105(v18, v10);
      sub_10002A604((uint64_t)v28);
    }

    v86 = v115;
    v116 = (uint64_t)sub_10000732C((_QWORD *)(v115 + 136), *(_QWORD *)(v115 + 160));
    v87 = v111;
    v88 = (uint64_t)v117;
    ((void (*)(char *, char *, uint64_t))v106)(v111, v117, v10);
    v89 = v109;
    sub_10002A5C0(a2, v109);
    v90 = *(unsigned __int8 *)(v11 + 80);
    v91 = (v90 + 16) & ~v90;
    v92 = *(unsigned __int8 *)(v107 + 80);
    v93 = (v110 + v92 + v91) & ~v92;
    v94 = v10;
    v95 = (v108 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    v96 = (v95 + 15) & 0xFFFFFFFFFFFFFFF8;
    v97 = swift_allocObject(&unk_10025FFB8, v96 + 16, v90 | v92 | 7);
    ((void (*)(uint64_t, char *, uint64_t))v113)(v97 + v91, v87, v94);
    sub_10002A7AC(v89, v97 + v93);
    *(_QWORD *)(v97 + v95) = v86;
    v98 = (_QWORD *)(v97 + v96);
    v99 = v118;
    *v98 = v114;
    v98[1] = v99;
    swift_retain(v86);
    swift_retain(v99);
    sub_10018B194(v88, (void (*)(_QWORD))sub_10002ABFC, v97);
    swift_release(v97);
    return ((uint64_t (*)(uint64_t, uint64_t))v105)(v88, v94);
  }
}

uint64_t sub_1000297DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE v59[12];
  int v60;
  uint64_t *v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v66 = a5;
  v67 = a4;
  v68 = a3;
  v65 = type metadata accessor for CustodianRecord(0);
  v10 = __chkstk_darwin(v65, v9);
  v12 = &v59[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v13);
  v15 = &v59[-v14];
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = &v59[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19, v22);
  v24 = &v59[-v23];
  if (!a1)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v45 = type metadata accessor for Logger(0);
    sub_100005288(v45, (uint64_t)qword_1002A89D8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v24, a2, v16);
    v46 = sub_10002A5C0(v68, (uint64_t)v15);
    v27 = Logger.logObject.getter(v46);
    v47 = static os_log_type_t.debug.getter(v27);
    v48 = v47;
    if (os_log_type_enabled(v27, v47))
    {
      v49 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v70 = v63;
      *(_DWORD *)v49 = 136315394;
      v50 = sub_10002A848();
      LODWORD(v62) = v48;
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v16, v50);
      v53 = v52;
      v69 = sub_1001DEF4C(v51, v52, &v70);
      v64 = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      swift_bridgeObjectRelease(v53);
      (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v24, v16);
      *(_WORD *)(v49 + 12) = 2080;
      v36 = v65;
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v16, v50);
      v56 = v55;
      v69 = sub_1001DEF4C(v54, v55, &v70);
      a6 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      swift_bridgeObjectRelease(v56);
      sub_10002A604((uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v62, "Success removing CRK for otPeerID:%s for custodian:%s", (uint8_t *)v49, 0x16u);
      v57 = v63;
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v49, -1, -1);

      return sub_100029DB8(v68 + *(int *)(v36 + 20), v66, a6);
    }
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v24, v16);
    sub_10002A604((uint64_t)v15);
LABEL_12:

    v36 = v65;
    return sub_100029DB8(v68 + *(int *)(v36 + 20), v66, a6);
  }
  swift_errorRetain(a1);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v25 = type metadata accessor for Logger(0);
  sub_100005288(v25, (uint64_t)qword_1002A89D8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v21, a2, v16);
  sub_10002A5C0(v68, (uint64_t)v12);
  swift_errorRetain(a1);
  v26 = swift_errorRetain(a1);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  v29 = v28;
  if (!os_log_type_enabled(v27, v28))
  {
    swift_errorRelease(a1);
    (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v21, v16);
    sub_10002A604((uint64_t)v12);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    goto LABEL_12;
  }
  v30 = swift_slowAlloc(32, -1);
  v62 = v27;
  v31 = v30;
  v61 = (uint64_t *)swift_slowAlloc(8, -1);
  v63 = swift_slowAlloc(64, -1);
  v70 = v63;
  *(_DWORD *)v31 = 136315650;
  v64 = a6;
  v32 = sub_10002A848();
  v60 = v29;
  v33 = dispatch thunk of CustomStringConvertible.description.getter(v16, v32);
  v35 = v34;
  v69 = sub_1001DEF4C(v33, v34, &v70);
  a6 = v64;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
  swift_bridgeObjectRelease(v35);
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v21, v16);
  *(_WORD *)(v31 + 12) = 2080;
  v36 = v65;
  v37 = dispatch thunk of CustomStringConvertible.description.getter(v16, v32);
  v39 = v38;
  v69 = sub_1001DEF4C(v37, v38, &v70);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
  swift_bridgeObjectRelease(v39);
  sub_10002A604((uint64_t)v12);
  *(_WORD *)(v31 + 22) = 2112;
  swift_errorRetain(a1);
  v40 = _swift_stdlib_bridgeErrorToNSError(a1);
  v69 = v40;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
  v41 = v61;
  *v61 = v40;
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  v42 = v62;
  _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v60, "Error removing CRK for otPeerID:%s for custodian:%s %@", (uint8_t *)v31, 0x20u);
  v43 = sub_1000080B4((uint64_t *)&unk_10028BC20);
  swift_arrayDestroy(v41, 1, v43);
  swift_slowDealloc(v41, -1, -1);
  v44 = v63;
  swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v44, -1, -1);
  swift_slowDealloc(v31, -1, -1);

  swift_errorRelease(a1);
  return sub_100029DB8(v68 + *(int *)(v36 + 20), v66, a6);
}

uint64_t sub_100029DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD v40[2];
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = v3;
  v45 = a2;
  v46 = a3;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v44 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v40 - v12;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A89D8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16 = v15(v13, a1, v6);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v42 = v3;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v43 = a1;
    v22 = v21;
    v48 = v21;
    v41 = v15;
    *(_DWORD *)v20 = 136315138;
    v40[1] = v20 + 4;
    v23 = sub_10002A848();
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v6, v23);
    v26 = v25;
    v47 = sub_1001DEF4C(v24, v25, &v48);
    v15 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Deleting Custodianship records for %s", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a1 = v43;
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v4 = v42;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }

  v29 = sub_10000732C((_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 80));
  v30 = v44;
  v15(v44, a1, v6);
  v31 = *(unsigned __int8 *)(v7 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = (v8 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_10025FFE0, v33 + 16, v31 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v34 + v32, v30, v6);
  v35 = (_QWORD *)(v34 + v33);
  v36 = v46;
  *v35 = v45;
  v35[1] = v36;
  v37 = *v29;
  v38 = (_QWORD *)swift_allocObject(&unk_100260008, 40, 7);
  v38[2] = sub_10002AD00;
  v38[3] = v34;
  v38[4] = v37;
  swift_retain(v36);
  swift_retain(v34);
  swift_retain(v37);
  sub_1001BD630(a1, (uint64_t)sub_10002AD80, (uint64_t)v38);
  swift_release(v34);
  return swift_release(v38);
}

uint64_t sub_10002A0C8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v45 - v14;
  v16 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v47 = a3;
    v20 = *v19;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89D8);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a2, v7);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v45 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(32, -1);
      v50 = v46;
      *(_DWORD *)v25 = 136315394;
      v26 = sub_10002A848();
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
      v29 = v28;
      v49 = sub_1001DEF4C(v27, v28, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      *(_WORD *)(v25 + 12) = 2112;
      v30 = _convertErrorToNSError(_:)(v20);
      v49 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      v31 = v45;
      *v45 = v30;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error deleting custodianship records for %s %@", (uint8_t *)v25, 0x16u);
      v32 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v31, 1, v32);
      swift_slowDealloc(v31, -1, -1);
      v33 = v46;
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    swift_errorRetain(v20);
    v47(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89D8);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, a2, v7);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v50 = v39;
      v47 = a3;
      *(_DWORD *)v38 = 136315138;
      v46 = (uint64_t)(v38 + 4);
      v40 = sub_10002A848();
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v7, v40);
      v43 = v42;
      v49 = sub_1001DEF4C(v41, v42, &v50);
      a3 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v43);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Deleted Custodianship records for %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    }

    a3(0);
    return sub_100004934((uint64_t)v19, (uint64_t *)&unk_10028CD50);
  }
}

uint64_t sub_10002A5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A604(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002A640()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10002A7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002A7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100028814(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

unint64_t sub_10002A848()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028BBE0;
  if (!qword_10028BBE0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10028BBE0);
  }
  return result;
}

uint64_t sub_10002A890()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v13));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_10002AA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100028EA0(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10002AA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for CustodianRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  v12 = v0 + v9;
  v11(v0 + v9, v1);
  v11(v0 + v9 + v6[5], v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[8] + 8));
  v13 = (uint64_t *)(v0 + v9 + v6[10]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);
  sub_10000F494(*(_QWORD *)(v12 + v6[11]), *(_QWORD *)(v12 + v6[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v6[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v6[14] + 8));
  v15 = v12 + v6[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v15, 1, v1))
    v11(v15, v1);
  v16 = (v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v16));
  swift_release(*(_QWORD *)(v0 + v17 + 8));
  return swift_deallocObject(v0, v17 + 16, v3 | v8 | 7);
}

uint64_t sub_10002ABFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000297DC(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10002AC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10002AD00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10002A0C8(a1, v1 + v4, *(void (**)(uint64_t))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_10002AD54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002AD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1001C2A48(a1, a2, a3, a4, *(void (**)(_QWORD *))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
}

_QWORD *sub_10002AD8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)sub_1001D4B50(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v4 = 0;
      do
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        v7 = _swiftEmptyArrayStorage[2];
        v6 = _swiftEmptyArrayStorage[3];
        if (v7 >= v6 >> 1)
          sub_1001D4B50(v6 > 1, v7 + 1, 1);
        ++v4;
        _swiftEmptyArrayStorage[2] = v7 + 1;
        v8 = (char *)&_swiftEmptyArrayStorage[2 * v7];
        *((_QWORD *)v8 + 4) = v5;
        *((_QWORD *)v8 + 5) = &off_100266FA8;
      }
      while (v2 != v4);
    }
    else
    {
      v9 = (_QWORD *)(a1 + 32);
      v10 = _swiftEmptyArrayStorage[2];
      v11 = 2 * v10;
      do
      {
        v12 = *v9;
        v13 = _swiftEmptyArrayStorage[3];
        swift_retain(*v9);
        if (v10 >= v13 >> 1)
          sub_1001D4B50(v13 > 1, v10 + 1, 1);
        _swiftEmptyArrayStorage[2] = v10 + 1;
        v14 = (char *)&_swiftEmptyArrayStorage[v11];
        *((_QWORD *)v14 + 4) = v12;
        *((_QWORD *)v14 + 5) = &off_100266FA8;
        v11 += 2;
        ++v9;
        ++v10;
        --v2;
      }
      while (v2);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

void sub_10002AF2C(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1[3];
  v2 = a1[4];
  v4 = String.utf8CString.getter(v3, v2);
  xpc_activity_unregister((const char *)(v4 + 32));
  swift_release(v4);
  v5 = a1[11];
  v6 = a1[12];
  a1[11] = 0;
  a1[12] = 0;
  sub_10000D98C(v5, v6);
  swift_unknownObjectWeakAssign(a1 + 9, 0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v7 = type metadata accessor for Logger(0);
  sub_100005288(v7, (uint64_t)qword_1002A8A08);
  v8 = swift_retain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(v2);
    v13 = sub_1001DEF4C(v3, v2, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_release(a1);
    swift_bridgeObjectRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Unregistered criteria", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release(a1);
  }
}

uint64_t sub_10002B11C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10002B13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  uint8_t *v7;
  _xpc_activity_s *v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  _xpc_activity_s *v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  __n128 v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  _xpc_activity_s *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _xpc_activity_s *v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  NSObject *v29;
  _xpc_activity_s *v30[5];
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A08);
  v3 = swift_retain(v0);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (_xpc_activity_s *)swift_slowAlloc(32, -1);
    v30[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(v1 + 24);
    v10 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v10);
    v32 = sub_1001DEF4C(v9, v10, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_release(v1);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "%s - updateCriteria called.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  v11 = *(NSObject **)(v1 + 16);
  v12 = sub_1000080B4(&qword_10028C738);
  OS_dispatch_queue.sync<A>(execute:)(v30, sub_10002F5A8, v1, v12);
  v13 = v30[0];
  if (v30[0])
  {
    sub_10002C094(v30[0]);
    swift_unknownObjectRelease(v13);
    return;
  }
  v14 = *(unsigned __int8 *)(v1 + 80);
  v15 = swift_retain(v1);
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v16, (os_log_type_t)v18);
  if (v14 != 1)
  {
    if (v19)
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = (_xpc_activity_s *)swift_slowAlloc(64, -1);
      v30[0] = v25;
      *(_DWORD *)v24 = 136315394;
      v26 = *(_QWORD *)(v1 + 24);
      v27 = *(_QWORD *)(v1 + 32);
      swift_bridgeObjectRetain(v27);
      v32 = sub_1001DEF4C(v26, v27, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain(v27);
      v32 = sub_1001DEF4C(v26, v27, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_release(v1);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v18, "%s - No current activity -- hasn't checked in yet: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      return;
    }
    goto LABEL_16;
  }
  if (v19)
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = (_xpc_activity_s *)swift_slowAlloc(64, -1);
    v30[0] = v21;
    *(_DWORD *)v20 = 136315394;
    v22 = *(_QWORD *)(v1 + 24);
    v23 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v23);
    v32 = sub_1001DEF4C(v22, v23, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain(v23);
    v32 = sub_1001DEF4C(v22, v23, (uint64_t *)v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_release(v1);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v18, "%s - No current activity -- re-registering: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  v16 = swift_allocObject(&unk_100260290, 32, 7);
  v16[2].isa = (Class)sub_10002E4B8;
  v16[3].isa = (Class)v1;
  v30[4] = (_xpc_activity_s *)sub_10002F5C0;
  v31 = v16;
  v30[0] = (_xpc_activity_s *)_NSConcreteStackBlock;
  v30[1] = (_xpc_activity_s *)1107296256;
  v30[2] = (_xpc_activity_s *)sub_10002B11C;
  v30[3] = (_xpc_activity_s *)&unk_1002602A8;
  v28 = _Block_copy(v30);
  v29 = v31;
  swift_retain(v1);
  swift_retain(v16);
  swift_release(v29);
  dispatch_sync(v11, v28);
  _Block_release(v28);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation(v16, "", 111, 135, 20, 1);
  swift_release(v1);
  swift_release(v16);
  if ((v28 & 1) != 0)
  {
    __break(1u);
LABEL_16:

    swift_release(v1);
  }
}

BOOL sub_10002B6A8()
{
  return sub_10002B6F0((uint64_t)sub_10002F5A8, 3, "%s - defer called on invalidated XPCActivity");
}

BOOL sub_10002B6C0()
{
  return sub_10002B6F0((uint64_t)sub_10002F5A8, 4, "%s - continue called on invalidated XPCActivity");
}

BOOL sub_10002B6D8()
{
  return sub_10002B6F0((uint64_t)sub_10002F088, 5, "%s - done called on invalidated XPCActivity");
}

BOOL sub_10002B6F0(uint64_t a1, xpc_activity_state_t a2, const char *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  xpc_activity_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _xpc_activity_s *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  xpc_activity_t activity;

  v7 = v3;
  v8 = sub_1000080B4(&qword_10028C738);
  OS_dispatch_queue.sync<A>(execute:)(&activity, a1, v3, v8);
  v9 = activity;
  if (activity)
  {
    v10 = xpc_activity_set_state(activity, a2);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A8A08);
    v12 = swift_retain(v7);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (_xpc_activity_s *)swift_slowAlloc(32, -1);
      activity = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = *(_QWORD *)(v7 + 24);
      v18 = *(_QWORD *)(v7 + 32);
      swift_bridgeObjectRetain(v18);
      v20 = sub_1001DEF4C(v17, v18, (uint64_t *)&activity);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_release(v7);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a3, v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_release(v7);
    }
    return 0;
  }
  return v10;
}

uint64_t sub_10002B8EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;

  v2 = swift_allocObject(&unk_1002601A0, 24, 7);
  swift_weakInit(v2 + 16, a1);
  v3 = a1[11];
  v4 = a1[12];
  a1[11] = sub_10002E514;
  a1[12] = v2;
  swift_retain(v2);
  sub_10000D98C(v3, v4);
  v6 = a1[3];
  v5 = a1[4];
  v11[4] = sub_10002E514;
  v12 = v2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10002BBF8;
  v11[3] = &unk_1002601B8;
  v7 = _Block_copy(v11);
  v8 = v12;
  swift_retain(v2);
  swift_release(v8);
  v9 = String.utf8CString.getter(v6, v5);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v7);
  swift_release(v9);
  _Block_release(v7);
  return swift_release(v2);
}

uint64_t sub_10002BA00(_xpc_activity_s *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A8A08);
    v7 = swift_unknownObjectRetain_n(a1, 2);
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v17 = (uint64_t)a1;
      v18 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_unknownObjectRetain(a1);
      v13 = sub_1000080B4(&qword_10028C6E8);
      v14 = String.init<A>(describing:)(&v17, v13);
      v16 = v15;
      v17 = sub_1001DEF4C(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v8, v10, "registered activity: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n(a1, 2);
    }
    sub_10002BC40(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10002BBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_10002BC40(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8A08);
  v5 = swift_retain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v2 + 32);
    swift_bridgeObjectRetain(v11);
    v15 = sub_1001DEF4C(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_release(v2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - calling activityHandler", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  v12 = type metadata accessor for OSTransaction();
  swift_allocObject(v12, 48, 7);
  v13 = sub_1000E0EB0("XPCActivity", 11, 2);
  sub_10002BE28(v13, a1, v2);
  return swift_release(v13);
}

uint64_t sub_10002BE28(uint64_t a1, xpc_activity_t activity, uint64_t a3)
{
  xpc_activity_state_t state;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  xpc_activity_t v22;
  uint64_t v23;

  state = xpc_activity_get_state(activity);
  v7 = sub_10002E8D4(state);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A8A08);
  v9 = swift_unknownObjectRetain_n(activity, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v22 = activity;
    v23 = v13;
    *(_DWORD *)v12 = 136315394;
    swift_unknownObjectRetain(activity);
    v14 = sub_1000080B4(&qword_10028C6E8);
    v15 = String.init<A>(describing:)(&v22, v14);
    v17 = v16;
    v22 = (xpc_activity_t)sub_1001DEF4C(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_unknownObjectRelease_n(activity, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v12 + 12) = 2080;
    LOBYTE(v22) = v7;
    v18 = String.init<A>(describing:)(&v22, &type metadata for XPCActivity.State);
    v20 = v19;
    v22 = (xpc_activity_t)sub_1001DEF4C(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "activityHandler for %s -- state: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    if (!(_BYTE)v7)
      goto LABEL_7;
  }
  else
  {

    swift_unknownObjectRelease_n(activity, 2);
    if (!(_BYTE)v7)
    {
LABEL_7:
      swift_unknownObjectWeakAssign(a3 + 72, activity);
      *(_BYTE *)(a3 + 80) = 1;
      v7 = sub_10002C094(activity);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(a3 + 56))(a3, a1, v7);
}

unint64_t sub_10002C094(_xpc_activity_s *a1)
{
  uint64_t v1;
  objc_class *v2;
  _xpc_activity_s *v3;
  xpc_object_t v4;
  void *v5;
  void *v6;
  void (*v7)(_QWORD *__return_ptr, _OWORD *);
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  NSObject *v27;
  void *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  void *v33;
  void *v34;
  void *v35;
  xpc_activity_state_t state;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  uint64_t (*v73)();
  uint64_t v74;
  __int128 aBlock;
  __int128 v76;
  uint64_t (*v77)();
  NSObject *v78;
  uint64_t v79[5];
  _QWORD v80[5];
  __int128 v81;
  __int128 v82;
  uint64_t (*v83)();
  _OWORD v84[2];
  uint64_t v85;
  _OWORD v86[4];

  v2 = (objc_class *)v1;
  v3 = a1;
  v4 = xpc_activity_copy_criteria(a1);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)swift_unknownObjectRetain(v4);
    sub_10002E764(v6, v79);
    sub_10002F018((uint64_t)v79, (uint64_t)v84);
    if (LOBYTE(v84[0]) != 2)
    {
      v86[0] = v84[0];
      v86[1] = v84[1];
      *(_QWORD *)&v86[2] = v85;
      (*(void (**)(_QWORD *__return_ptr, uint64_t *))(v1 + 40))(v80, v79);
      sub_10002F018((uint64_t)v80, (uint64_t)&v81);
      if (v81 != 2)
      {
        aBlock = v81;
        v76 = v82;
        v77 = v83;
        if (!sub_10002E024((uint64_t)&aBlock, (uint64_t)v86))
        {
          if (qword_10028ADD8 != -1)
            swift_once(&qword_10028ADD8, sub_100046D78);
          v48 = type metadata accessor for Logger(0);
          sub_100005288(v48, (uint64_t)qword_1002A8A08);
          v49 = swift_retain(v1);
          v50 = Logger.logObject.getter(v49);
          v51 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v50, v51))
          {
            v52 = swift_slowAlloc(22, -1);
            v53 = swift_slowAlloc(64, -1);
            v74 = v53;
            *(_DWORD *)v52 = 136315394;
            v55 = *((_QWORD *)v2 + 3);
            v54 = *((_QWORD *)v2 + 4);
            swift_bridgeObjectRetain(v54);
            *(_QWORD *)&v71 = sub_1001DEF4C(v55, v54, &v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
            swift_release(v2);
            swift_bridgeObjectRelease(v54);
            *(_WORD *)(v52 + 12) = 2080;
            v71 = v86[0];
            v72 = v86[1];
            v73 = *(uint64_t (**)())&v86[2];
            v56 = String.init<A>(describing:)(&v71, &type metadata for XPCActivity.Criteria);
            v58 = v57;
            *(_QWORD *)&v71 = sub_1001DEF4C(v56, v57, &v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
            swift_bridgeObjectRelease(v58);
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s - Existing criteria: %s", (uint8_t *)v52, 0x16u);
            swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v53, -1, -1);
            swift_slowDealloc(v52, -1, -1);

          }
          else
          {

            swift_release(v1);
          }
          v59 = swift_retain(v2);
          v60 = Logger.logObject.getter(v59);
          v61 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v60, v61))
          {
            v62 = swift_slowAlloc(22, -1);
            v63 = swift_slowAlloc(64, -1);
            v74 = v63;
            *(_DWORD *)v62 = 136315394;
            v64 = *((_QWORD *)v2 + 3);
            v65 = *((_QWORD *)v2 + 4);
            swift_bridgeObjectRetain(v65);
            *(_QWORD *)&v71 = sub_1001DEF4C(v64, v65, &v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
            swift_release(v2);
            swift_bridgeObjectRelease(v65);
            *(_WORD *)(v62 + 12) = 2080;
            v71 = aBlock;
            v72 = v76;
            v73 = v77;
            v66 = String.init<A>(describing:)(&v71, &type metadata for XPCActivity.Criteria);
            v68 = v67;
            *(_QWORD *)&v71 = sub_1001DEF4C(v66, v67, &v74);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
            swift_bridgeObjectRelease(v68);
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s - Registering updated  criteria: %s", (uint8_t *)v62, 0x16u);
            swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v63, -1, -1);
            swift_slowDealloc(v62, -1, -1);

          }
          else
          {

            swift_release(v2);
          }
          sub_10002CBB4();
          v70 = v69;
          xpc_activity_set_criteria(v3, v69);
          swift_unknownObjectRelease(v70);
          v35 = v5;
          goto LABEL_21;
        }
        if (qword_10028ADD8 == -1)
          goto LABEL_25;
        goto LABEL_38;
      }
      v27 = *(NSObject **)(v1 + 16);
      v10 = swift_allocObject(&unk_100260240, 32, 7);
      v10[2].isa = (Class)sub_10002F060;
      v10[3].isa = v2;
      v77 = sub_10002F5C0;
      v78 = v10;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v76 = sub_10002B11C;
      *((_QWORD *)&v76 + 1) = &unk_100260258;
      v28 = _Block_copy(&aBlock);
      v29 = v78;
      swift_retain(v2);
      swift_retain(v10);
      swift_release(v29);
      dispatch_sync(v27, v28);
      _Block_release(v28);
      LOBYTE(v27) = swift_isEscapingClosureAtFileLocation(v10, "", 111, 49, 20, 1);
      swift_unknownObjectRelease(v5);
      swift_release(v2);
      swift_release(v10);
      if ((v27 & 1) == 0)
        return 6;
      __break(1u);
      goto LABEL_16;
    }
    swift_unknownObjectRelease(v5);
  }
  v7 = *(void (**)(_QWORD *__return_ptr, _OWORD *))(v1 + 40);
  *(_QWORD *)&v86[0] = 2;
  memset((char *)v86 + 8, 0, 32);
  v7(v80, v86);
  sub_10002F018((uint64_t)v80, (uint64_t)&v81);
  if (v81 != 2)
  {
    aBlock = v81;
    v76 = v82;
    v77 = v83;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A08);
    v17 = swift_retain(v1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(64, -1);
      v74 = v21;
      *(_DWORD *)v20 = 136315394;
      v22 = *((_QWORD *)v2 + 3);
      v23 = *((_QWORD *)v2 + 4);
      swift_bridgeObjectRetain(v23);
      *(_QWORD *)&v71 = sub_1001DEF4C(v22, v23, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
      swift_release(v2);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2080;
      v71 = aBlock;
      v72 = v76;
      v73 = v77;
      v24 = String.init<A>(describing:)(&v71, &type metadata for XPCActivity.Criteria);
      v26 = v25;
      *(_QWORD *)&v71 = sub_1001DEF4C(v24, v25, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - Registering new criteria: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release(v2);
    }
    sub_10002CBB4();
    v34 = v33;
    xpc_activity_set_criteria(v3, v33);
    v35 = v34;
    goto LABEL_21;
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A8A08);
  v9 = swift_retain(v1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {
LABEL_16:

    swift_release(v2);
    goto LABEL_17;
  }
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = swift_slowAlloc(32, -1);
  *(_QWORD *)&aBlock = v13;
  *(_DWORD *)v12 = 136315138;
  v14 = *((_QWORD *)v2 + 3);
  v15 = *((_QWORD *)v2 + 4);
  swift_bridgeObjectRetain(v15);
  *(_QWORD *)&v71 = sub_1001DEF4C(v14, v15, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
  swift_release(v2);
  swift_bridgeObjectRelease(v15);
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - criteriaBlock returned nil", v12, 0xCu);
  swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v13, -1, -1);
  swift_slowDealloc(v12, -1, -1);

LABEL_17:
  v30 = *((_QWORD *)v2 + 2);
  v3 = (_xpc_activity_s *)swift_allocObject(&unk_1002601F0, 32, 7);
  *((_QWORD *)v3 + 2) = sub_10002F060;
  *((_QWORD *)v3 + 3) = v2;
  v77 = sub_10002F5C0;
  v78 = v3;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v76 = sub_10002B11C;
  *((_QWORD *)&v76 + 1) = &unk_100260208;
  v5 = _Block_copy(&aBlock);
  v31 = v78;
  swift_retain(v2);
  swift_retain(v3);
  swift_release(v31);
  dispatch_sync(v30, v5);
  _Block_release(v5);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v3, "", 111, 49, 20, 1);
  swift_release(v2);
  swift_release(v3);
  if ((v30 & 1) == 0)
    return 6;
  __break(1u);
LABEL_38:
  swift_once(&qword_10028ADD8, sub_100046D78);
LABEL_25:
  v37 = type metadata accessor for Logger(0);
  sub_100005288(v37, (uint64_t)qword_1002A8A08);
  v38 = swift_retain(v2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v74 = v42;
    *(_DWORD *)v41 = 136315394;
    v43 = *((_QWORD *)v2 + 3);
    v44 = *((_QWORD *)v2 + 4);
    swift_bridgeObjectRetain(v44);
    *(_QWORD *)&v71 = sub_1001DEF4C(v43, v44, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
    swift_release(v2);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v41 + 12) = 2080;
    v71 = v86[0];
    v72 = v86[1];
    v73 = *(uint64_t (**)())&v86[2];
    v45 = String.init<A>(describing:)(&v71, &type metadata for XPCActivity.Criteria);
    v47 = v46;
    *(_QWORD *)&v71 = sub_1001DEF4C(v45, v46, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - Keeping existing criteria for: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
    swift_unknownObjectRelease(v5);

    goto LABEL_22;
  }

  swift_release(v2);
  v35 = v5;
LABEL_21:
  swift_unknownObjectRelease(v35);
LABEL_22:
  state = xpc_activity_get_state(v3);
  return sub_10002E8D4(state);
}

void sub_10002CBB4()
{
  uint64_t v0;
  xpc_object_t v1;
  void *v2;
  const char **v3;
  int v4;
  uint64_t v5;

  v1 = xpc_dictionary_create(0, 0, 0);
  v2 = v1;
  v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  if (!*(_BYTE *)v0)
    v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  v4 = *(unsigned __int8 *)(v0 + 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, *(_BYTE *)(v0 + 1));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(_QWORD *)(v0 + 8));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(_QWORD *)(v0 + 16));
  if (v4 == 1)
    xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(_QWORD *)(v0 + 24));
  v5 = *(_QWORD *)(v0 + 32);
  if ((v5 & 1) != 0)
  {
    if (!XPC_ACTIVITY_POWER_NAP)
    {
      __break(1u);
      goto LABEL_39;
    }
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POWER_NAP, 1);
  }
  if ((v5 & 4) == 0)
    goto LABEL_11;
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY, 1);
LABEL_11:
  if ((v5 & 2) == 0)
    goto LABEL_14;
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
LABEL_14:
  if ((v5 & 0x800) == 0)
    goto LABEL_17;
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
LABEL_17:
  if ((v5 & 8) == 0)
    goto LABEL_20;
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
LABEL_20:
  if ((v5 & 0x10) == 0)
    goto LABEL_23;
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
LABEL_23:
  if ((v5 & 0x20) != 0)
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if ((v5 & 0x40) != 0)
  {
    if (XPC_ACTIVITY_MEMORY_INTENSIVE)
    {
      xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_MEMORY_INTENSIVE, 1);
      goto LABEL_28;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_28:
  if ((v5 & 0x80) == 0)
    goto LABEL_31;
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_CPU_INTENSIVE, 1);
LABEL_31:
  if ((v5 & 0x100) == 0)
    goto LABEL_34;
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_DISK_INTENSIVE, 1);
LABEL_34:
  if ((v5 & 0x400) == 0)
    return;
  if (!XPC_ACTIVITY_POST_INSTALL)
  {
LABEL_47:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POST_INSTALL, 1);
}

uint64_t sub_10002CE10()
{
  uint64_t result;
  uint64_t v1;

  result = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  qword_10028C530 = result;
  *(_QWORD *)algn_10028C538 = v1;
  return result;
}

uint64_t sub_10002CE3C(char *a1, char *a2)
{
  return sub_1001D23F8(*a1, *a2);
}

Swift::Int sub_10002CE48()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002CED0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10002CF34()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002CFB8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E568, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10002D014(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7974696C697475;
  if (*v1)
    v2 = 0x616E65746E69616DLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10002D05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002F564();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002D0B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002F564();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10002D104()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E65746E69616D2ELL;
  else
    return 0x7974696C6974752ELL;
}

unint64_t sub_10002D148@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10002E994(*a1);
  *a2 = result;
  return result;
}

void sub_10002D170(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_10002D17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002E9A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002D1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002E9A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10002D224(__int16 a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;

  if ((a1 & 1) == 0)
  {
    v2 = (char *)&_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_100133E98(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_100133E98((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v5 = &v2[16 * v4];
  *((_QWORD *)v5 + 4) = 0x614E7265776F702ELL;
  *((_QWORD *)v5 + 5) = 0xE900000000000070;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v7 = *((_QWORD *)v2 + 2);
    v6 = *((_QWORD *)v2 + 3);
    if (v7 >= v6 >> 1)
      v2 = sub_100133E98((char *)(v6 > 1), v7 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v7 + 1;
    v8 = &v2[16 * v7];
    *((_QWORD *)v8 + 4) = 0x766544656B61772ELL;
    *((_QWORD *)v8 + 5) = 0xEB00000000656369;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v10 = *((_QWORD *)v2 + 2);
    v9 = *((_QWORD *)v2 + 3);
    if (v10 >= v9 >> 1)
      v2 = sub_100133E98((char *)(v9 > 1), v10 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v10 + 1;
    v11 = &v2[16 * v10];
    *((_QWORD *)v11 + 4) = 0xD00000000000001ALL;
    *((_QWORD *)v11 + 5) = 0x8000000100209C00;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_33;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v13 = *((_QWORD *)v2 + 2);
  v12 = *((_QWORD *)v2 + 3);
  if (v13 >= v12 >> 1)
    v2 = sub_100133E98((char *)(v12 > 1), v13 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v13 + 1;
  v14 = &v2[16 * v13];
  *((_QWORD *)v14 + 4) = 0xD000000000000010;
  *((_QWORD *)v14 + 5) = 0x8000000100209BE0;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_33:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v16 = *((_QWORD *)v2 + 2);
  v15 = *((_QWORD *)v2 + 3);
  if (v16 >= v15 >> 1)
    v2 = sub_100133E98((char *)(v15 > 1), v16 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v16 + 1;
  v17 = &v2[16 * v16];
  *((_QWORD *)v17 + 4) = 0xD00000000000001BLL;
  *((_QWORD *)v17 + 5) = 0x8000000100209BC0;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_38:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v19 = *((_QWORD *)v2 + 2);
  v18 = *((_QWORD *)v2 + 3);
  if (v19 >= v18 >> 1)
    v2 = sub_100133E98((char *)(v18 > 1), v19 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v19 + 1;
  v20 = &v2[16 * v19];
  strcpy(v20 + 32, ".allowBattery");
  *((_WORD *)v20 + 23) = -4864;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_43:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v22 = *((_QWORD *)v2 + 2);
  v21 = *((_QWORD *)v2 + 3);
  if (v22 >= v21 >> 1)
    v2 = sub_100133E98((char *)(v21 > 1), v22 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v22 + 1;
  v23 = &v2[16 * v22];
  *((_QWORD *)v23 + 4) = 0xD000000000000010;
  *((_QWORD *)v23 + 5) = 0x8000000100209BA0;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_48:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v25 = *((_QWORD *)v2 + 2);
  v24 = *((_QWORD *)v2 + 3);
  if (v25 >= v24 >> 1)
    v2 = sub_100133E98((char *)(v24 > 1), v25 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v25 + 1;
  v26 = &v2[16 * v25];
  strcpy(v26 + 32, ".cpuIntensive");
  *((_WORD *)v26 + 23) = -4864;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_53:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v28 = *((_QWORD *)v2 + 2);
  v27 = *((_QWORD *)v2 + 3);
  if (v28 >= v27 >> 1)
    v2 = sub_100133E98((char *)(v27 > 1), v28 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v28 + 1;
  v29 = &v2[16 * v28];
  strcpy(v29 + 32, ".diskIntensive");
  v29[47] = -18;
  if ((a1 & 0x200) == 0)
  {
LABEL_20:
    if ((a1 & 0x400) == 0)
      goto LABEL_21;
    goto LABEL_63;
  }
LABEL_58:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v31 = *((_QWORD *)v2 + 2);
  v30 = *((_QWORD *)v2 + 3);
  if (v31 >= v30 >> 1)
    v2 = sub_100133E98((char *)(v30 > 1), v31 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v31 + 1;
  v32 = &v2[16 * v31];
  *((_QWORD *)v32 + 4) = 0xD000000000000019;
  *((_QWORD *)v32 + 5) = 0x8000000100209B80;
  if ((a1 & 0x400) == 0)
  {
LABEL_21:
    if ((a1 & 0x800) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
LABEL_63:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v34 = *((_QWORD *)v2 + 2);
  v33 = *((_QWORD *)v2 + 3);
  if (v34 >= v33 >> 1)
    v2 = sub_100133E98((char *)(v33 > 1), v34 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v34 + 1;
  v35 = &v2[16 * v34];
  strcpy(v35 + 32, ".postInstall");
  v35[45] = 0;
  *((_WORD *)v35 + 23) = -5120;
  if ((a1 & 0x800) != 0)
  {
LABEL_68:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_100133E98(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
    v37 = *((_QWORD *)v2 + 2);
    v36 = *((_QWORD *)v2 + 3);
    if (v37 >= v36 >> 1)
      v2 = sub_100133E98((char *)(v36 > 1), v37 + 1, 1, v2);
    *((_QWORD *)v2 + 2) = v37 + 1;
    v38 = &v2[16 * v37];
    *((_QWORD *)v38 + 4) = 0x657269757165722ELL;
    *((_QWORD *)v38 + 5) = 0xEF417373616C4373;
  }
LABEL_73:
  v39 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v40 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
  v41 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v39, v40);
  v43 = v42;
  swift_bridgeObjectRelease(v2);
  v44._countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v43);
  v45._countAndFlagsBits = 93;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  return 91;
}

uint64_t sub_10002D954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002F400();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10002D9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10002F400();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10002D9FC()
{
  _QWORD *v0;

  return sub_10002D224(*v0);
}

uint64_t sub_10002DA04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10000BC6C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10002DA40(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v3 = v1;
  v5 = sub_1000080B4(&qword_10028C718);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10002EEC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for XPCActivity.Criteria.CodingKeys, &type metadata for XPCActivity.Criteria.CodingKeys, v12, v10, v11);
  v28 = *v3;
  v27 = 0;
  v13 = sub_10002EF90();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for XPCActivity.Priority, v13);
  if (!v2)
  {
    v14 = v3[1];
    v26 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v26, v5);
    v15 = *((_QWORD *)v3 + 1);
    v25 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v25, v5);
    v16 = *((_QWORD *)v3 + 2);
    v24 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v24, v5);
    v17 = *((_QWORD *)v3 + 3);
    v23 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v23, v5);
    v22 = *((_QWORD *)v3 + 4);
    v21 = 5;
    v18 = sub_10002EFD4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for XPCActivity.Criteria.Options, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10002DC24()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002DC54 + 4 * byte_100219620[*v0]))(0x797469726F697270, 0xE800000000000000);
}

uint64_t sub_10002DC54()
{
  return 0x6E69746165706572;
}

uint64_t sub_10002DC70()
{
  return 0x79616C6564;
}

uint64_t sub_10002DC84()
{
  return 0x7265506563617267;
}

uint64_t sub_10002DCA4()
{
  return 0x6C61767265746E69;
}

uint64_t sub_10002DCB8()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_10002DCD0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10002E9E8(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002DCF4(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10002DD00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002EEC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002DD28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10002EEC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10002DD50@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_10002EC84(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10002DD94(_QWORD *a1)
{
  return sub_10002DA40(a1);
}

BOOL sub_10002DDA8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10002E024((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_10002DDF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  sub_10002F0C8(v0 + 72);
  sub_10000D98C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(_TtC13appleaccountd11XPCActivity);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10002DEA8 + 4 * byte_10021962B[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10002DEDC + 4 * byte_100219626[v4]))();
}

uint64_t sub_10002DEDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DEE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002DEECLL);
  return result;
}

uint64_t sub_10002DEF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002DF00);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10002DF04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DF0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

__n128 initializeWithCopy for XPCActivity.Criteria(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

unint64_t sub_10002DFE0()
{
  unint64_t result;

  result = qword_10028C6C0;
  if (!qword_10028C6C0)
  {
    result = swift_getWitnessTable(&unk_1002197F8, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_10028C6C0);
  }
  return result;
}

BOOL sub_10002E024(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  _BOOL8 result;

  v4 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v5 = 0x616E65746E69616DLL;
  else
    v5 = 0x7974696C697475;
  if (v4)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEB0000000065636ELL;
  if (*(_BYTE *)a2)
    v7 = 0x616E65746E69616DLL;
  else
    v7 = 0x7974696C697475;
  if (*(_BYTE *)a2)
    v8 = 0xEB0000000065636ELL;
  else
    v8 = 0xE700000000000000;
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  return ((*(unsigned __int8 *)(a1 + 1) ^ *(unsigned __int8 *)(a2 + 1)) & 1) == 0
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t sub_10002E144(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 aBlock;
  uint64_t (*v50)(uint64_t);
  void *v51;
  uint64_t (*v52)();
  uint64_t v53;

  v8 = v7;
  v46 = a6;
  v47 = a7;
  v44 = a4;
  v45 = a5;
  v48 = a3;
  v40 = a2;
  v43 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v43, v11);
  v42 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(v7 + 72, 0);
  *(_BYTE *)(v7 + 80) = 0;
  v41 = sub_100007764();
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  strcpy((char *)&aBlock, "XPCActivity-");
  BYTE13(aBlock) = 0;
  HIWORD(aBlock) = -5120;
  v23._countAndFlagsBits = a1;
  v23._object = a2;
  String.append(_:)(v23);
  v38 = *((_QWORD *)&aBlock + 1);
  v39 = aBlock;
  v37 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v48, v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  *(_QWORD *)&aBlock = &_swiftEmptyArrayStorage;
  v24 = sub_10002E470();
  v25 = sub_1000080B4(&qword_10028B9F0);
  v26 = sub_1000077E0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0, (uint64_t)&protocol conformance descriptor for [A]);
  v27 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v25, v26, v43, v24);
  v28 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v39, v38, v22, v27, v17, 0);
  *(_QWORD *)(v7 + 16) = v28;
  *(_QWORD *)(v7 + 24) = a1;
  v29 = v44;
  v30 = v45;
  *(_QWORD *)(v7 + 32) = v40;
  *(_QWORD *)(v7 + 40) = v29;
  v31 = v46;
  v32 = v47;
  *(_QWORD *)(v7 + 48) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v32;
  v33 = swift_allocObject(&unk_100260150, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_10002E4B8;
  *(_QWORD *)(v33 + 24) = v8;
  v52 = sub_10002E4D0;
  v53 = v33;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v50 = sub_10002B11C;
  v51 = &unk_100260168;
  v34 = _Block_copy(&aBlock);
  v35 = v53;
  swift_retain(v30);
  swift_retain(v32);
  swift_retain(v8);
  swift_retain(v33);
  swift_release(v35);
  dispatch_sync(v28, v34);
  _Block_release(v34);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation(v33, "", 111, 135, 20, 1);
  swift_release(v8);
  result = swift_release(v33);
  if ((v28 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v48, v18);
    return v8;
  }
  return result;
}

unint64_t sub_10002E470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C6D0;
  if (!qword_10028C6D0)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10028C6D0);
  }
  return result;
}

uint64_t sub_10002E4B8()
{
  _QWORD *v0;

  return sub_10002B8EC(v0);
}

uint64_t sub_10002E4C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E4D0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10002E4F0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002E514(_xpc_activity_s *a1)
{
  uint64_t v1;

  return sub_10002BA00(a1, v1);
}

uint64_t sub_10002E51C(uint64_t result)
{
  void *v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 v6;
  BOOL v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_34;
  }
  v1 = (void *)result;
  result = xpc_dictionary_get_BOOL((xpc_object_t)result, XPC_ACTIVITY_POWER_NAP);
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v2 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY);
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v3 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v4 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_A);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v5 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v6 = result;
  v7 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY);
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v8 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_MEMORY_INTENSIVE);
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v9 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_CPU_INTENSIVE);
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v10 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_DISK_INTENSIVE);
  if (!XPC_ACTIVITY_POST_INSTALL)
  {
LABEL_42:
    __break(1u);
    return result;
  }
  v11 = v2;
  if (v3)
    v11 = v2 | 4;
  if (v4)
    v11 |= 2uLL;
  if (v5)
    v11 |= 0x800uLL;
  if ((v6 & ((v11 & 8) == 0)) != 0)
    v11 |= 8uLL;
  if (v7 && (v11 & 0x10) == 0)
    v11 |= 0x10uLL;
  if ((v8 & ((v11 & 0x20) == 0)) != 0)
    v11 |= 0x20uLL;
  if ((v9 & ((v11 & 0x40) == 0)) != 0)
    v11 |= 0x40uLL;
  if ((v10 & ((v11 & 0x80) == 0)) != 0)
    v11 |= 0x80uLL;
  if ((result & ((v11 & 0x100) == 0)) != 0)
    v12 = v11 | 0x100;
  else
    v12 = v11;
  v13 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_POST_INSTALL);
  swift_unknownObjectRelease(v1);
  if (v13 && (v12 & 0x400) == 0)
    return v12 | 0x400;
  else
    return v12;
}

uint64_t sub_10002E764@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  const char *string;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int64_t int64;
  int64_t v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;

  string = xpc_dictionary_get_string(a1, XPC_ACTIVITY_PRIORITY);
  if (string)
  {
    v5 = String.init(cString:)(string);
    v7 = v6;
    if (qword_10028AD80 != -1)
      swift_once(&qword_10028AD80, sub_10002CE10);
    if (v5 == qword_10028C530 && v7 == *(_QWORD *)algn_10028C538)
    {
      swift_bridgeObjectRelease(v7);
      v10 = 0;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, qword_10028C530, *(_QWORD *)algn_10028C538, 0);
      swift_bridgeObjectRelease(v7);
      v10 = ~v9 & 1;
    }
    v16 = xpc_dictionary_get_BOOL(a1, XPC_ACTIVITY_REPEATING);
    int64 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_DELAY);
    v12 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_GRACE_PERIOD);
    v13 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_INTERVAL);
    result = sub_10002E51C((uint64_t)a1);
    v17 = 256;
    if (!v16)
      v17 = 0;
    v15 = v17 | v10;
  }
  else
  {
    swift_unknownObjectRelease(a1);
    int64 = 0;
    v12 = 0;
    v13 = 0;
    result = 0;
    v15 = 2;
  }
  *a2 = v15;
  a2[1] = int64;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = result;
  return result;
}

unint64_t sub_10002E8D4(unint64_t result)
{
  Swift::String v1;
  void *object;

  if (result >= 6)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(0xE000000000000000);
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, 0x8000000100209B50, "appleaccountd/XPCActivity.swift", 31, 2, 251, 0);
    __break(1u);
  }
  return result;
}

unint64_t sub_10002E994(unint64_t result)
{
  if (result >= 7)
    return 7;
  return result;
}

unint64_t sub_10002E9A4()
{
  unint64_t result;

  result = qword_10028C6F0;
  if (!qword_10028C6F0)
  {
    result = swift_getWitnessTable(&unk_100219780, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_10028C6F0);
  }
  return result;
}

uint64_t sub_10002E9E8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067)
  {
    v7 = 0xE900000000000067;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69746165706572, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x79616C6564 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C6564, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69)
  {
    v9 = 0xEB00000000646F69;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265506563617267, 0xEB00000000646F69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_10002EC84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;

  v5 = sub_1000080B4(&qword_10028C6F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10002EEC4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for XPCActivity.Criteria.CodingKeys, &type metadata for XPCActivity.Criteria.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_100006F58(a1);
  v29 = 0;
  v13 = sub_10002EF08();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for XPCActivity.Priority, &v29, v5, &type metadata for XPCActivity.Priority, v13);
  v14 = v30;
  v28 = 1;
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v27 = 2;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 3;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 4;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v24 = 5;
  v16 = sub_10002EF4C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v23, &type metadata for XPCActivity.Criteria.Options, &v24, v5, &type metadata for XPCActivity.Criteria.Options, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v17 = v23;
  result = sub_100006F58(a1);
  *(_BYTE *)a2 = v14;
  *(_BYTE *)(a2 + 1) = v15 & 1;
  v19 = v21;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v17;
  return result;
}

unint64_t sub_10002EEC4()
{
  unint64_t result;

  result = qword_10028C700;
  if (!qword_10028C700)
  {
    result = swift_getWitnessTable(&unk_100219C14, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C700);
  }
  return result;
}

unint64_t sub_10002EF08()
{
  unint64_t result;

  result = qword_10028C708;
  if (!qword_10028C708)
  {
    result = swift_getWitnessTable(&unk_100219BEC, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_10028C708);
  }
  return result;
}

unint64_t sub_10002EF4C()
{
  unint64_t result;

  result = qword_10028C710;
  if (!qword_10028C710)
  {
    result = swift_getWitnessTable(&unk_100219BC4, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C710);
  }
  return result;
}

unint64_t sub_10002EF90()
{
  unint64_t result;

  result = qword_10028C720;
  if (!qword_10028C720)
  {
    result = swift_getWitnessTable(&unk_100219B9C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_10028C720);
  }
  return result;
}

unint64_t sub_10002EFD4()
{
  unint64_t result;

  result = qword_10028C728;
  if (!qword_10028C728)
  {
    result = swift_getWitnessTable(&unk_100219B74, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C728);
  }
  return result;
}

uint64_t sub_10002F018(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028C730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10002F060()
{
  _QWORD *v0;

  sub_10002AF2C(v0);
}

uint64_t sub_10002F068()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F088@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectWeakLoadStrong(v1 + 72);
  *a1 = result;
  return result;
}

uint64_t sub_10002F0B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F0C8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10002F1C8 + 4 * byte_100219635[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10002F1FC + 4 * byte_100219630[v4]))();
}

uint64_t sub_10002F1FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F204(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002F20CLL);
  return result;
}

uint64_t sub_10002F218(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002F220);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10002F224(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F22C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.CodingKeys()
{
  return &type metadata for XPCActivity.Criteria.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002F2A4 + 4 * byte_10021963F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002F2D8 + 4 * byte_10021963A[v4]))();
}

uint64_t sub_10002F2D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F2E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002F2E8);
  return result;
}

uint64_t sub_10002F2F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002F2FCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10002F300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002F308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

unint64_t sub_10002F328()
{
  unint64_t result;

  result = qword_10028C740;
  if (!qword_10028C740)
  {
    result = swift_getWitnessTable(&unk_1002198DC, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_10028C740);
  }
  return result;
}

unint64_t sub_10002F370()
{
  unint64_t result;

  result = qword_10028C748;
  if (!qword_10028C748)
  {
    result = swift_getWitnessTable(&unk_100219934, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C748);
  }
  return result;
}

unint64_t sub_10002F3B8()
{
  unint64_t result;

  result = qword_10028C750;
  if (!qword_10028C750)
  {
    result = swift_getWitnessTable(&unk_100219904, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C750);
  }
  return result;
}

unint64_t sub_10002F400()
{
  unint64_t result;

  result = qword_10028C758;
  if (!qword_10028C758)
  {
    result = swift_getWitnessTable(&unk_10021995C, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C758);
  }
  return result;
}

unint64_t sub_10002F448()
{
  unint64_t result;

  result = qword_10028C760;
  if (!qword_10028C760)
  {
    result = swift_getWitnessTable(&unk_100219994, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_10028C760);
  }
  return result;
}

unint64_t sub_10002F490()
{
  unint64_t result;

  result = qword_10028C768;
  if (!qword_10028C768)
  {
    result = swift_getWitnessTable(&unk_100219B4C, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C768);
  }
  return result;
}

unint64_t sub_10002F4D8()
{
  unint64_t result;

  result = qword_10028C770;
  if (!qword_10028C770)
  {
    result = swift_getWitnessTable(&unk_100219ABC, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C770);
  }
  return result;
}

unint64_t sub_10002F520()
{
  unint64_t result;

  result = qword_10028C778;
  if (!qword_10028C778)
  {
    result = swift_getWitnessTable(&unk_100219AE4, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028C778);
  }
  return result;
}

unint64_t sub_10002F564()
{
  unint64_t result;

  result = qword_10028C780;
  if (!qword_10028C780)
  {
    result = swift_getWitnessTable(&unk_100219864, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_10028C780);
  }
  return result;
}

uint64_t sub_10002F5A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002F088(a1);
}

uint64_t sub_10002F5E8(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v4;

  v2 = (void *)sub_10002F680(a1, a2);
  v3 = objc_msgSend(v2, "domain");

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

id sub_10002F648(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = (void *)sub_10002F680(a1, a2);
  v3 = objc_msgSend(v2, "code");

  return v3;
}

uint64_t sub_10002F680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, a1);
  v8 = _getErrorEmbeddedNSError<A>(_:)(v6, a1, a2);
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
  }
  else
  {
    v9 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v10, v6, a1);
  }
  v11 = _convertErrorToNSError(_:)(v9);
  swift_errorRelease(v9);
  return v11;
}

uint64_t sub_10002F768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v27;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a2);
  v10 = _getErrorEmbeddedNSError<A>(_:)(v8, a2, a3);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }
  else
  {
    v11 = swift_allocError(a2, a3, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  }
  v13 = (void *)_convertErrorToNSError(_:)(v11);
  swift_errorRelease(v11);
  v14 = (void *)_convertErrorToNSError(_:)(a1);
  v15 = objc_msgSend(v13, "code");
  if (v15 == objc_msgSend(v14, "code"))
  {
    v16 = objc_msgSend(v13, "domain");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = objc_msgSend(v14, "domain");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    if (v17 == v21 && v19 == v23)
      v25 = 1;
    else
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v23, 0);

    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v23);
  }
  else
  {

    v25 = 0;
  }
  return v25 & 1;
}

BOOL sub_10002F93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v9, a2);
  v10 = _getErrorEmbeddedNSError<A>(_:)(v8, a2, a3);
  if (v10)
  {
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  }
  else
  {
    v11 = swift_allocError(a2, a3, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  }
  v13 = (void *)_convertErrorToNSError(_:)(v11);
  swift_errorRelease(v11);
  v14 = objc_msgSend(v13, "underlyingErrors");
  v15 = sub_1000080B4(&qword_10028E850);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  swift_errorRetain(a1);
  v17 = sub_10002FD40(v16, a1);
  swift_errorRelease(a1);

  swift_bridgeObjectRelease(v16);
  v18 = *(_QWORD *)(v17 + 16);
  swift_bridgeObjectRelease(v17);
  return v18 != 0;
}

uint64_t sub_10002FAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[3];
  _BYTE v20[8];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1, a2);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (void *)sub_10002F680(v6, v9);
  v11 = objc_msgSend(v10, "aa_partialErrorsByName");

  if (v11
    && (v12 = sub_1000080B4(&qword_10028E850),
        v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String, v12, &protocol witness table for String), v11, v14 = sub_1001FE930(v13), swift_bridgeObjectRelease(v13), v14))
  {
    swift_getErrorValue(v14, v20, v19);
    v15 = sub_10002FAA8(v19[1], v19[2]);
    swift_errorRelease(v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
    v16 = _getErrorEmbeddedNSError<A>(_:)(v8, a1, a2);
    if (v16)
    {
      v15 = v16;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    }
    else
    {
      v15 = swift_allocError(a1, a2, 0, 0);
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v17, v8, a1);
    }
  }
  return v15;
}

void sub_10002FC20(uint64_t a1)
{
  sub_10002FCC0(a1, 0xD000000000000029, 0x8000000100209C20, 34, &qword_1002A8970);
}

void sub_10002FC48(uint64_t a1)
{
  sub_10002FCC0(a1, 0xD000000000000029, 0x8000000100209C20, 32, &qword_1002A8978);
}

void sub_10002FC70(uint64_t a1)
{
  sub_10002FCC0(a1, 0xD000000000000029, 0x8000000100209C20, 31, &qword_1002A8980);
}

void sub_10002FC98(uint64_t a1)
{
  sub_10002FCC0(a1, 0xD000000000000024, 0x8000000100209C50, 9, &qword_1002A8988);
}

void sub_10002FCC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  id v7;
  NSString v8;
  id v9;

  v7 = objc_allocWithZone((Class)NSError);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithDomain:code:userInfo:", v8, a4, 0);

  *a5 = v9;
}

uint64_t sub_10002FD40(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD *v16;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = 0;
  v4 = result + 32;
  v5 = _swiftEmptyArrayStorage;
  do
  {
    if (v3 <= v2)
      v6 = v2;
    else
      v6 = v3;
    for (i = v3; ; ++i)
    {
      if (v6 == i)
      {
        __break(1u);
        return result;
      }
      v8 = *(_QWORD *)(v4 + 8 * i);
      v3 = i + 1;
      swift_getErrorValue(v8, v15, v14);
      v9 = v14[1];
      v10 = v14[2];
      swift_errorRetain(v8);
      if ((sub_10002F768(a2, v9, v10) & 1) != 0)
        break;
      result = swift_errorRelease(v8);
      if (v2 == v3)
        return (uint64_t)v5;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v5);
    v16 = v5;
    if ((result & 1) == 0)
    {
      result = sub_1001D4BB4(0, v5[2] + 1, 1);
      v5 = v16;
    }
    v12 = v5[2];
    v11 = v5[3];
    if (v12 >= v11 >> 1)
    {
      result = sub_1001D4BB4(v11 > 1, v12 + 1, 1);
      v5 = v16;
    }
    v5[2] = v12 + 1;
    v5[v12 + 4] = v8;
  }
  while (v2 - 1 != i);
  return (uint64_t)v5;
}

uint64_t sub_10002FEAC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for CustodianKeyRepair(0);
  v0 = sub_1000080B4((uint64_t *)&unk_10028CCA0);
  result = String.init<A>(describing:)(&v3, v0);
  qword_10028C7A0 = result;
  *(_QWORD *)algn_10028C7A8 = v2;
  return result;
}

uint64_t sub_10002FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  if (!a1)
    return sub_100030510(a3, a4, a5, (uint64_t)a6, a7);
  swift_errorRetain(a1);
  a6(a1);
  return swift_errorRelease(a1);
}

void sub_10002FF64(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v55 = a3;
  v58 = type metadata accessor for CustodianRecord(0);
  v9 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A89D8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to fetch custodians", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    swift_errorRetain(a1);
    a4(a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v53 = a5;
    v54 = a4;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = _swiftEmptyArrayStorage;
    v56 = v16;
    if (v19)
    {
      v60 = _swiftEmptyArrayStorage;
      sub_1001D4BFC(0, v19, 0);
      v21 = v56;
      v22 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      v57 = *(_QWORD *)(v9 + 72);
      do
      {
        sub_100027FE8(v22, (uint64_t)v12, type metadata accessor for CustodianRecord);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, &v12[*(int *)(v58 + 20)], v21);
        sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
        v20 = v60;
        if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
        {
          sub_1001D4BFC(0, v20[2] + 1, 1);
          v21 = v56;
          v20 = v60;
        }
        v24 = v20[2];
        v23 = v20[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001D4BFC(v23 > 1, v24 + 1, 1);
          v21 = v56;
          v20 = v60;
        }
        v20[2] = v24 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v24, v18, v21);
        v60 = v20;
        v22 += v57;
        --v19;
      }
      while (v19);
    }
    v30 = v55;
    swift_bridgeObjectRetain(v55);
    v32 = sub_1000FB118(v31);
    swift_bridgeObjectRelease(v30);
    v33 = sub_100038E10((uint64_t)v20, v32);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) != 0)
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v34 = type metadata accessor for Logger(0);
      sub_100005288(v34, (uint64_t)qword_1002A89D8);
      swift_bridgeObjectRetain_n(v30, 2);
      swift_bridgeObjectRetain(v20);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(22, -1);
        v39 = (_QWORD *)swift_slowAlloc(64, -1);
        v60 = v39;
        *(_DWORD *)v38 = 136315394;
        v40 = swift_bridgeObjectRetain(v30);
        v41 = Array.description.getter(v40);
        v43 = v42;
        swift_bridgeObjectRelease(v30);
        v59 = sub_1001DEF4C(v41, v43, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
        swift_bridgeObjectRelease_n(v30, 2);
        swift_bridgeObjectRelease(v43);
        *(_WORD *)(v38 + 12) = 2080;
        v44 = swift_bridgeObjectRetain(v20);
        v45 = Array.description.getter(v44);
        v47 = v46;
        swift_bridgeObjectRelease(v20);
        v59 = sub_1001DEF4C(v45, v47, (uint64_t *)&v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
        swift_bridgeObjectRelease_n(v20, 2);
        swift_bridgeObjectRelease(v47);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "No matching custodians found on device to repair. uuidsToRepair %s custodiansOnDevice: %s", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v20, 2);
        swift_bridgeObjectRelease_n(v30, 2);
      }
      type metadata accessor for AACustodianError(0);
      v49 = v48;
      v59 = -7050;
      v50 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v51 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v60, &v59, v50, v49, v51);
      v52 = v60;
      v54((uint64_t)v60);

    }
    else
    {
      swift_bridgeObjectRelease(v20);
      v54(0);
    }
  }
}

uint64_t sub_100030510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  objc_class *v28;
  _BYTE *v29;
  uint64_t (**v30)(uint64_t, uint64_t);
  id v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  _QWORD aBlock[5];
  _QWORD *v46;
  objc_super v47;

  v6 = v5;
  v39 = a4;
  v11 = type metadata accessor for KeyRepairContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  objc_msgSend(v16, "setMaxConcurrentOperationCount:", 1);
  objc_msgSend(v16, "setQualityOfService:", 25);
  swift_bridgeObjectRetain(a3);
  v17 = sub_100039FEC(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  v18 = swift_allocObject(&unk_100260880, 24, 7);
  *(_QWORD *)(v18 + 16) = &_swiftEmptyDictionarySingleton;
  v19 = swift_allocObject(&unk_100260AB0, 24, 7);
  v20 = v17;
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  v21 = v17[2];
  if (v21)
  {
    v37 = v20;
    v38 = a5;
    v22 = *(unsigned __int8 *)(v12 + 80);
    v44 = v16;
    v23 = v6;
    v24 = (uint64_t)v20 + ((v22 + 32) & ~v22);
    v25 = *(_QWORD *)(v12 + 72);
    v42 = (v22 + 24) & ~v22;
    v43 = v25;
    v40 = (v13 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = v22 | 7;
    v26 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      sub_100027FE8(v24, (uint64_t)v15, type metadata accessor for KeyRepairContext);
      v27 = swift_allocObject(&unk_100260AD8, v26 + 8, v41);
      *(_QWORD *)(v27 + 16) = v23;
      sub_10003B730((uint64_t)v15, v27 + v42, type metadata accessor for KeyRepairContext);
      *(_QWORD *)(v27 + v40) = v19;
      *(_QWORD *)(v27 + v26) = v18;
      v28 = (objc_class *)type metadata accessor for AsyncOperation();
      v29 = objc_allocWithZone(v28);
      v29[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      v30 = (uint64_t (**)(uint64_t, uint64_t))&v29[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *v30 = sub_10003DDC4;
      v30[1] = (uint64_t (*)(uint64_t, uint64_t))v27;
      v47.receiver = v29;
      v47.super_class = v28;
      swift_retain(v23);
      swift_retain(v19);
      swift_retain(v18);
      v31 = objc_msgSendSuper2(&v47, "init");
      objc_msgSend(v44, "addOperation:", v31);

      v24 += v43;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(v37);
    a5 = v38;
    v6 = v23;
    v16 = v44;
  }
  else
  {
    swift_bridgeObjectRelease(v20);
  }
  v32 = (_QWORD *)swift_allocObject(&unk_100260B00, 56, 7);
  v32[2] = v6;
  v32[3] = v19;
  v33 = v39;
  v32[4] = v18;
  v32[5] = v33;
  v32[6] = a5;
  aBlock[4] = sub_10003DE70;
  v46 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100260B18;
  v34 = _Block_copy(aBlock);
  v35 = v46;
  swift_retain(v6);
  swift_retain(v19);
  swift_retain(v18);
  swift_retain(a5);
  swift_release(v35);
  objc_msgSend(v16, "addBarrierBlock:", v34);
  _Block_release(v34);

  swift_release(v18);
  return swift_release(v19);
}

uint64_t sub_10003086C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t);
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a4;
  v29 = a6;
  v27 = a1;
  v10 = type metadata accessor for KeyRepairContext(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a4, (uint64_t)v14, v15);
  v16 = *(unsigned __int8 *)(v11 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = (void (*)(uint64_t))swift_allocObject(&unk_100260BA0, v21 + 8, v16 | 7);
  sub_10003B730((uint64_t)v14, (uint64_t)v22 + v17, type metadata accessor for KeyRepairContext);
  *(_QWORD *)((char *)v22 + v18) = a3;
  *(_QWORD *)((char *)v22 + v19) = a5;
  v23 = (_QWORD *)((char *)v22 + v20);
  *v23 = v27;
  v23[1] = a2;
  v24 = v29;
  *(_QWORD *)((char *)v22 + v21) = v29;
  swift_retain(a3);
  swift_retain(a5);
  swift_retain(a2);
  swift_retain(v24);
  sub_1000319C8(v28, (void (*)(uint64_t))sub_10003DFB4, v22);
  return swift_release(v22);
}

uint64_t sub_1000309C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  void **v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t *v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  void **aBlock;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  uint64_t v112;

  v100 = a5;
  v101 = a6;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v105 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v104 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v103 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v102 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for KeyRepairContext(0);
  v98 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v98 + 64);
  v21 = __chkstk_darwin(v18, v20);
  v99 = (uint64_t)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)&v92 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v92 - v27;
  if (a1)
  {
    v96 = a7;
    v97 = v15;
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89D8);
    sub_100027FE8(a2, (uint64_t)v25, type metadata accessor for KeyRepairContext);
    swift_errorRetain(a1);
    v30 = swift_errorRetain(a1);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v92 = (uint64_t *)swift_slowAlloc(8, -1);
      v93 = (void **)swift_slowAlloc(32, -1);
      aBlock = v93;
      *(_DWORD *)v33 = 136315394;
      v95 = a2;
      v34 = type metadata accessor for UUID(0);
      v94 = a3;
      v35 = v34;
      v36 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
      v39 = v38;
      v106 = (_QWORD *)sub_1001DEF4C(v37, v38, (uint64_t *)&aBlock);
      a2 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &aBlock);
      swift_bridgeObjectRelease(v39);
      sub_100028388((uint64_t)v25, type metadata accessor for KeyRepairContext);
      *(_WORD *)(v33 + 12) = 2112;
      swift_errorRetain(a1);
      v40 = _swift_stdlib_bridgeErrorToNSError(a1);
      v106 = (_QWORD *)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &aBlock);
      v41 = v92;
      *v92 = v40;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Repair Failure: %s error: %@", (uint8_t *)v33, 0x16u);
      v42 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v41, 1, v42);
      swift_slowDealloc(v41, -1, -1);
      v43 = v93;
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v25, type metadata accessor for KeyRepairContext);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v60 = v99;
    sub_100027FE8(a2, v99, type metadata accessor for KeyRepairContext);
    v61 = *(unsigned __int8 *)(v98 + 80);
    v62 = (v61 + 24) & ~v61;
    v63 = (v19 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
    v65 = swift_allocObject(&unk_100260C18, v64 + 16, v61 | 7);
    v66 = v96;
    *(_QWORD *)(v65 + 16) = v96;
    sub_10003B730(v60, v65 + v62, type metadata accessor for KeyRepairContext);
    *(_QWORD *)(v65 + v63) = a1;
    v67 = (_QWORD *)(v65 + v64);
    v68 = v101;
    *v67 = v100;
    v67[1] = v68;
    v111 = sub_10003E1E4;
    v112 = v65;
    aBlock = _NSConcreteStackBlock;
    v108 = 1107296256;
    v109 = sub_1000051D0;
    v110 = &unk_100260C30;
    v69 = _Block_copy(&aBlock);
    swift_errorRetain(a1);
    swift_retain(v66);
    v70 = swift_retain(v68);
    v71 = v102;
    static DispatchQoS.unspecified.getter(v70);
    v106 = _swiftEmptyArrayStorage;
    v72 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v74 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    v75 = v104;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v106, v73, v74, v12, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v75, v69);
    _Block_release(v69);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v75, v12);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v71, v97);
  }
  else
  {
    v97 = a4;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A89D8);
    v45 = sub_100027FE8(a2, (uint64_t)v28, type metadata accessor for KeyRepairContext);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(12, -1);
      v94 = a3;
      v49 = (uint8_t *)v48;
      v50 = (void **)swift_slowAlloc(32, -1);
      v95 = a2;
      v51 = v50;
      aBlock = v50;
      v96 = v12;
      *(_DWORD *)v49 = 136315138;
      v93 = (void **)(v49 + 4);
      v52 = v15;
      v53 = type metadata accessor for UUID(0);
      v54 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v55 = v53;
      v15 = v52;
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v55, v54);
      v58 = v57;
      v106 = (_QWORD *)sub_1001DEF4C(v56, v57, (uint64_t *)&aBlock);
      v12 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &aBlock);
      swift_bridgeObjectRelease(v58);
      sub_100028388((uint64_t)v28, type metadata accessor for KeyRepairContext);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Repair Success: %s", v49, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      v59 = v51;
      a2 = v95;
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v28, type metadata accessor for KeyRepairContext);
    }

    v76 = v99;
    sub_100027FE8(a2, v99, type metadata accessor for KeyRepairContext);
    v77 = *(unsigned __int8 *)(v98 + 80);
    v78 = (v77 + 24) & ~v77;
    v79 = (v19 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = swift_allocObject(&unk_100260BC8, v79 + 16, v77 | 7);
    v81 = v97;
    *(_QWORD *)(v80 + 16) = v97;
    sub_10003B730(v76, v80 + v78, type metadata accessor for KeyRepairContext);
    v82 = (_QWORD *)(v80 + v79);
    v83 = v101;
    *v82 = v100;
    v82[1] = v83;
    v111 = sub_10003E0D8;
    v112 = v80;
    aBlock = _NSConcreteStackBlock;
    v108 = 1107296256;
    v109 = sub_1000051D0;
    v110 = &unk_100260BE0;
    v84 = _Block_copy(&aBlock);
    swift_retain(v83);
    v85 = swift_retain(v81);
    v86 = v102;
    static DispatchQoS.unspecified.getter(v85);
    v106 = _swiftEmptyArrayStorage;
    v87 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v88 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v89 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    v90 = v104;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v106, v88, v89, v12, v87);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v90, v84);
    _Block_release(v84);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v90, v12);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v86, v15);
  }
  return swift_release(v112);
}

uint64_t sub_10003129C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t *v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE v19[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = (unint64_t *)(a1 + 16);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  swift_beginAccess(a1 + 16, v19, 33, 0);
  v12 = *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  *(_QWORD *)(a1 + 16) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_10013423C(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
    *v11 = v12;
  }
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    v12 = sub_10013423C(v14 > 1, v15 + 1, 1, v12);
    *v11 = v12;
  }
  *(_QWORD *)(v12 + 16) = v15 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, v10, v6);
  v16 = swift_endAccess(v19);
  return a3(v16);
}

uint64_t sub_1000313F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];

  v7 = a1 + 16;
  v8 = UUID.uuidString.getter(a1);
  v10 = v9;
  swift_beginAccess(v7, v16, 33, 0);
  swift_errorRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_10001F710(a3, v8, v10, isUniquelyReferenced_nonNull_native);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v12);
  v13 = swift_endAccess(v16);
  return a4(v13);
}

uint64_t sub_1000314C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_100260B50, 48, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  aBlock[4] = sub_10003DEC4;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100260B68;
  v18 = _Block_copy(aBlock);
  swift_retain(a2);
  swift_retain(a3);
  v19 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v22 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v25);
  return swift_release(v29);
}

void sub_1000316DC(uint64_t a1, uint64_t a2, void (*a3)(id))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30[3];
  _BYTE v31[80];
  uint64_t v32;
  id v33;
  uint64_t v34;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v7 = swift_retain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = a2;
    v11 = swift_slowAlloc(32, -1);
    v30[0] = v11;
    *(_DWORD *)v10 = 136315138;
    swift_beginAccess(a1 + 16, v29, 0, 0);
    v12 = *(_QWORD *)(a1 + 16);
    type metadata accessor for UUID(0);
    v13 = swift_bridgeObjectRetain(v12);
    v14 = Array.description.getter(v13);
    v16 = v15;
    swift_bridgeObjectRelease(v12);
    v33 = (id)sub_1001DEF4C(v14, v16, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Finishing Custodian Repair for UUIDs: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v17 = v11;
    a2 = v28;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  type metadata accessor for AAError(0);
  v19 = v18;
  v32 = -4408;
  v20 = sub_1000080B4(&qword_10028BB68);
  inited = swift_initStackObject(v20, v31);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
  *(_QWORD *)(inited + 40) = v22;
  swift_beginAccess(a2 + 16, v30, 0, 0);
  v23 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
  *(_QWORD *)(inited + 48) = v23;
  swift_bridgeObjectRetain(v23);
  v24 = sub_100015894(inited);
  v25 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  _BridgedStoredNSError.init(_:userInfo:)(&v33, &v32, v24, v19, v25);
  v26 = v33;
  v27 = v33;
  a3(v26);

}

void sub_1000319C8(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t))
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (**v40)(uint64_t);
  void (*v41)(uint64_t);
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t);
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84[3];
  uint64_t v85;

  v4 = v3;
  v81 = a2;
  v82 = a3;
  v75 = a1;
  v77 = *v3;
  v5 = type metadata accessor for KeyRepairContext(0);
  v73 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v74 = v7;
  v76 = (uint64_t)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  __chkstk_darwin(v8, v9);
  v78 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028C448);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000080B4(&qword_10028FA50);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v21);
  Dependency.wrappedValue.getter(v84, v21);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v26 = objc_msgSend(*(id *)(*sub_10000732C(v84, v85) + 16), "aa_primaryAppleAccount");
  sub_100006F58(v84);
  if (v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController, v16);
    Dependency.wrappedValue.getter(v84, v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v27 = *(void **)(*sub_10000732C(v84, v85) + 24);
    v83 = 0;
    v28 = objc_msgSend(v27, "isManateeAvailable:", &v83);
    v29 = v83;
    if (v28)
    {
      v30 = (id)v83;
      sub_100006F58(v84);
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v11);
      Dependency.wrappedValue.getter(v84, v11);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      sub_10000732C(v84, v85);
      v31 = (uint64_t)v78;
      v32 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, v75, v80);
      v33 = swift_allocObject(&unk_100260718, 24, 7);
      swift_weakInit(v33 + 16, v4);
      v34 = v76;
      sub_100027FE8(v32, v76, type metadata accessor for KeyRepairContext);
      v35 = *(unsigned __int8 *)(v73 + 80);
      v36 = (v35 + 32) & ~v35;
      v37 = (v74 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
      v39 = swift_allocObject(&unk_100260740, v38 + 8, v35 | 7);
      *(_QWORD *)(v39 + 16) = v33;
      *(_QWORD *)(v39 + 24) = v26;
      sub_10003B730(v34, v39 + v36, type metadata accessor for KeyRepairContext);
      v40 = (void (**)(uint64_t))(v39 + v37);
      v41 = v82;
      *v40 = v81;
      v40[1] = v41;
      *(_QWORD *)(v39 + v38) = v77;
      v42 = swift_allocObject(&unk_100260768, 32, 7);
      *(_QWORD *)(v42 + 16) = sub_10003B868;
      *(_QWORD *)(v42 + 24) = v39;
      swift_retain(v33);
      v43 = v26;
      swift_retain(v41);
      swift_retain(v39);
      sub_1001BD630(v31, (uint64_t)sub_10003B8CC, v42);

      swift_release(v39);
      swift_release(v42);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v31, v80);
      swift_release(v33);
      sub_100006F58(v84);
    }
    else
    {
      v57 = (id)v83;
      v58 = _convertNSErrorToError(_:)(v29);

      swift_willThrow(v59);
      swift_errorRelease(v58);
      sub_100006F58(v84);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v60 = type metadata accessor for Logger(0);
      v61 = sub_100005288(v60, (uint64_t)qword_1002A8A08);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = swift_slowAlloc(32, -1);
        v84[0] = v65;
        *(_DWORD *)v64 = 136315138;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v66 = qword_10028C7A0;
        v67 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v83 = sub_1001DEF4C(v66, v67, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84);
        swift_bridgeObjectRelease(v67);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s - no manatee available, stopping custodian key repair.", v64, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v69 = v68;
      v83 = -7024;
      v70 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v71 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v84, &v83, v70, v69, v71);
      v72 = (void *)v84[0];
      v81(v84[0]);

    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100005288(v44, (uint64_t)qword_1002A8A08);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v84[0] = v49;
      *(_DWORD *)v48 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v50 = qword_10028C7A0;
      v51 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v83 = sub_1001DEF4C(v50, v51, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s - not logged in to AppleAccount, unable to repair keys", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v53 = v52;
    v83 = -7002;
    v54 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v55 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v84, &v83, v54, v53, v55);
    v56 = (void *)v84[0];
    v81(v84[0]);

  }
}

uint64_t sub_1000321E4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t Strong;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;

  v12 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v16, v17);
  v19 = (_QWORD *)((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v36[1] = a6;
      v25 = swift_slowAlloc(22, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      v27 = swift_slowAlloc(32, -1);
      v37[0] = v27;
      *(_DWORD *)v25 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v29 = qword_10028C7A0;
      v28 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v38 = sub_1001DEF4C(v29, v28, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v25 + 12) = 2112;
      v30 = _convertErrorToNSError(_:)(v20);
      v38 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      *v26 = v30;
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - error fetching custodianship records, unable to repair: %@", (uint8_t *)v25, 0x16u);
      v31 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v31);
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {
      swift_errorRelease(v20);

    }
    swift_errorRetain(v20);
    a5(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  else
  {
    v32 = a2 + 16;
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    swift_beginAccess(v32, v37, 0, 0);
    Strong = swift_weakLoadStrong(v32);
    if (Strong)
    {
      v34 = Strong;
      sub_100032570((uint64_t)v15, a3, a4, (uint64_t)a5, a6);
      swift_release(v34);
    }
    return sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_100032570(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (**v67)(uint64_t);
  void (*v68)(uint64_t);
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[6];

  v71 = a5;
  v81 = (char *)a4;
  v74 = a2;
  v88 = a1;
  v90 = *v5;
  v7 = type metadata accessor for UUID(0);
  v86 = *(_QWORD *)(v7 - 8);
  v87 = v7;
  __chkstk_darwin(v7, v8);
  v85 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_1000080B4(&qword_10028CCE0);
  v80 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v79 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for KeyRepairContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v89 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianshipRecords(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v20 = __chkstk_darwin(v16, v19);
  v72 = (uint64_t)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v70 - v22;
  v70 = (unint64_t)sub_1000339E0(*(_QWORD *)(a3 + *(int *)(v12 + 28)), *(_QWORD *)(a3 + *(int *)(v12 + 28) + 8));
  v24 = swift_allocObject(&unk_100260718, 24, 7);
  v84 = v5;
  swift_weakInit(v24 + 16, v5);
  sub_100027FE8(v88, (uint64_t)v23, type metadata accessor for CustodianshipRecords);
  v83 = a3;
  sub_100027FE8(a3, (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for KeyRepairContext);
  v25 = *(unsigned __int8 *)(v17 + 80);
  v26 = (v25 + 40) & ~v25;
  v76 = v18 + 7;
  v27 = (v18 + 7 + v26) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(unsigned __int8 *)(v13 + 80);
  v75 = v28 + 8;
  v29 = (v28 + 8 + v27) & ~v28;
  v73 = v14 + 7;
  v30 = (v14 + 7 + v29) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v77 = v25 | v28 | 7;
  v32 = (void (*)(uint64_t))swift_allocObject(&unk_100260790, v31 + 8, v77);
  v33 = (uint64_t)v81;
  *((_QWORD *)v32 + 2) = v24;
  *((_QWORD *)v32 + 3) = v33;
  v34 = v71;
  *((_QWORD *)v32 + 4) = v71;
  v81 = v23;
  sub_10003B730((uint64_t)v23, (uint64_t)v32 + v26, type metadata accessor for CustodianshipRecords);
  v35 = v74;
  *(_QWORD *)((char *)v32 + v27) = v74;
  sub_10003B730(v89, (uint64_t)v32 + v29, type metadata accessor for KeyRepairContext);
  v36 = (void *)v70;
  *(_QWORD *)((char *)v32 + v30) = v70;
  v78 = v32;
  *(_QWORD *)((char *)v32 + v31) = v90;
  v37 = qword_10028ADD8;
  swift_retain(v34);
  v38 = v35;
  v74 = v36;
  if (v37 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v39 = ~v25;
  v40 = ~v28;
  v41 = type metadata accessor for Logger(0);
  sub_100005288(v41, (uint64_t)qword_1002A8A08);
  v42 = v88;
  v43 = v72;
  v44 = sub_100027FE8(v88, v72, type metadata accessor for CustodianshipRecords);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v70 = ~v25;
    v71 = ~v28;
    v47 = swift_slowAlloc(22, -1);
    v48 = swift_slowAlloc(64, -1);
    v92[0] = v48;
    *(_DWORD *)v47 = 136315394;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v50 = qword_10028C7A0;
    v49 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v91 = sub_1001DEF4C(v50, v49, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v47 + 12) = 2080;
    v51 = sub_1001E4A60();
    v53 = v52;
    v91 = sub_1001DEF4C(v51, v52, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    swift_bridgeObjectRelease(v53);
    sub_100028388(v43, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    v40 = v71;
    v39 = v70;
  }
  else
  {
    sub_100028388(v43, type metadata accessor for CustodianshipRecords);

  }
  v54 = v84;
  v56 = v79;
  v55 = v80;
  v57 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v79, (uint64_t)v84 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v82);
  Dependency.wrappedValue.getter(v92, v57);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v57);
  v82 = (uint64_t)sub_10000732C(v92, v92[3]);
  v58 = v85;
  sub_1001E4D98(v85);
  v59 = (uint64_t)v81;
  sub_100027FE8(v42, (uint64_t)v81, type metadata accessor for CustodianshipRecords);
  v60 = v89;
  sub_100027FE8(v83, v89, type metadata accessor for KeyRepairContext);
  v61 = (v25 + 16) & v39;
  v62 = (v76 + v61) & 0xFFFFFFFFFFFFFFF8;
  v63 = (v62 + 23) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v75 + v63) & v40;
  v65 = (v73 + v64) & 0xFFFFFFFFFFFFFFF8;
  v66 = swift_allocObject(&unk_1002607B8, v65 + 8, v77);
  sub_10003B730(v59, v66 + v61, type metadata accessor for CustodianshipRecords);
  v67 = (void (**)(uint64_t))(v66 + v62);
  v68 = v78;
  *v67 = sub_10003BC1C;
  v67[1] = v68;
  *(_QWORD *)(v66 + v63) = v54;
  sub_10003B730(v60, v66 + v64, type metadata accessor for KeyRepairContext);
  *(_QWORD *)(v66 + v65) = v90;
  swift_retain(v68);
  swift_retain(v54);
  sub_10018BCE0(v58, (void (*)(_QWORD, _QWORD))sub_10003C008, v66);

  swift_release(v68);
  swift_release(v66);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v58, v87);
  return sub_100006F58(v92);
}

void sub_100032BE4(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  void (**v53)(uint64_t);
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(uint64_t);
  __int128 v80[2];
  uint64_t v81;
  uint64_t v82;
  _BYTE v83[32];
  uint64_t v84[6];

  v6 = v5;
  v79 = a4;
  v77 = a2;
  v74 = *v5;
  v10 = sub_1000080B4(&qword_10028E8C0);
  v76 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v71 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v73 = (uint64_t)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = v17;
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v66 - v19;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v75 = a1;
  sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for CustodianRecoveryInfoRecord);
  v23 = swift_bridgeObjectRetain_n(a3, 2);
  v70 = v22;
  v24 = a3;
  v25 = Logger.logObject.getter(v23);
  v27 = static os_log_type_t.default.getter(v26);
  v28 = os_log_type_enabled(v25, v27);
  v78 = v24;
  if (v28)
  {
    v68 = v6;
    v69 = a5;
    v29 = swift_slowAlloc(32, -1);
    v67 = swift_slowAlloc(96, -1);
    v84[0] = v67;
    *(_DWORD *)v29 = 136315650;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v30 = qword_10028C7A0;
    v31 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v82 = sub_1001DEF4C(v30, v31, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v29 + 12) = 2080;
    v32 = type metadata accessor for UUID(0);
    v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
    v36 = v35;
    v82 = sub_1001DEF4C(v34, v35, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
    swift_bridgeObjectRelease(v36);
    sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecoveryInfoRecord);
    *(_WORD *)(v29 + 22) = 2080;
    v37 = v78;
    swift_bridgeObjectRetain(v78);
    v82 = sub_1001DEF4C(v77, v37, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
    swift_bridgeObjectRelease_n(v37, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v27, "%s - re-sharing zone for %s with: %s", (uint8_t *)v29, 0x20u);
    v38 = v67;
    swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    a5 = v69;
    v6 = v68;
  }
  else
  {
    sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecoveryInfoRecord);

    swift_bridgeObjectRelease_n(v24, 2);
  }
  v39 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v13, (uint64_t)v6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage, v10);
  Dependency.wrappedValue.getter(&v82, v10);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v10);
  v40 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v41 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v80, &v82, v40, v41, 6))
  {
    sub_10003A190(v80, (uint64_t)v84);
    v42 = v75;
    v43 = v73;
    sub_100027FE8(v75, v73, type metadata accessor for CustodianRecoveryInfoRecord);
    v44 = *(unsigned __int8 *)(v71 + 80);
    v45 = (v44 + 24) & ~v44;
    v46 = (v72 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
    v48 = v6;
    v49 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
    v50 = swift_allocObject(&unk_1002606A0, v49 + 8, v44 | 7);
    *(_QWORD *)(v50 + 16) = v48;
    sub_10003B730(v43, v50 + v45, type metadata accessor for CustodianRecoveryInfoRecord);
    v51 = (_QWORD *)(v50 + v46);
    v52 = v78;
    *v51 = v77;
    v51[1] = v52;
    v53 = (void (**)(uint64_t))(v50 + v47);
    *v53 = v79;
    v53[1] = a5;
    *(_QWORD *)(v50 + v49) = v74;
    swift_bridgeObjectRetain(v52);
    swift_retain(v48);
    swift_retain(a5);
    sub_10017E860(v42, (uint64_t)sub_10003A310, v50);
    swift_release(v50);
    sub_100006F58(v84);
  }
  else
  {
    v81 = 0;
    memset(v80, 0, sizeof(v80));
    v54 = sub_100004934((uint64_t)v80, &qword_10028CCB8);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v84[0] = v58;
      *(_DWORD *)v57 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v59 = qword_10028C7A0;
      v60 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v82 = sub_1001DEF4C(v59, v60, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83);
      swift_bridgeObjectRelease(v60);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s - could not get reference to CloudKitSharing, abandoning re-share", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v62 = v61;
    v82 = -7008;
    v63 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v84, &v82, v63, v62, v64);
    v65 = (void *)v84[0];
    v79(v84[0]);

  }
}

uint64_t sub_1000332D4(int a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void ***v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  void (**v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  void **v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int128 v64[2];
  uint64_t v65;
  _QWORD v66[5];
  _QWORD v67[5];
  _QWORD v68[6];

  v61 = a8;
  v57 = a7;
  v60 = a6;
  v59 = a5;
  v58 = a4;
  v63 = a1;
  v55 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v55, v10);
  v56 = (uint64_t *)((char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v54 - v18;
  v20 = sub_1000080B4(&qword_10028CCC0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a2 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__storageController, v20);
  Dependency.wrappedValue.getter(v68, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v25 = sub_10000732C(v68, v68[3]);
  v54 = a3;
  sub_100027FE8(a3, (uint64_t)v19, type metadata accessor for CustodianRecoveryInfoRecord);
  v62 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8((uint64_t)v19, v62, type metadata accessor for CustodianRecoveryInfoRecord);
  v26 = *(unsigned __int8 *)(v13 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = v27 + v14;
  v29 = (v27 + v14) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject(&unk_1002606C8, v32 + 8, v26 | 7);
  v34 = v33 + v27;
  v35 = v57;
  sub_10003B730((uint64_t)v19, v34, type metadata accessor for CustodianRecoveryInfoRecord);
  *(_BYTE *)(v33 + v28) = v63;
  v36 = v58;
  *(_QWORD *)(v29 + v33 + 8) = a2;
  v37 = (void ***)(v33 + v30);
  v38 = v60;
  v39 = v59;
  *v37 = v36;
  v37[1] = (void **)v39;
  v40 = (void (**)(uint64_t))(v33 + v31);
  v41 = a2;
  v42 = v39;
  *v40 = v38;
  v40[1] = (void (*)(uint64_t))v35;
  *(_QWORD *)(v33 + v32) = v61;
  sub_100006CA4(*v25 + 56, (uint64_t)v66);
  swift_retain_n(v41, 2);
  swift_bridgeObjectRetain_n(v42, 2);
  swift_retain_n(v35, 2);
  v43 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v44 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v64, v66, v43, v44, 6))
  {
    sub_10003A190(v64, (uint64_t)v67);
    v45 = swift_allocObject(&unk_1002606F0, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_10003A4F4;
    *(_QWORD *)(v45 + 24) = v33;
    swift_bridgeObjectRetain(v42);
    swift_retain(v33);
    sub_100066288(v54, v36, v42, (void **)3, (uint64_t)sub_10003B728, v45);
    swift_bridgeObjectRelease(v42);
    swift_release(v45);
    sub_100006F58(v67);
    swift_release(v33);
    v46 = v62;
  }
  else
  {
    v65 = 0;
    memset(v64, 0, sizeof(v64));
    sub_100004934((uint64_t)v64, &qword_10028CCB8);
    type metadata accessor for AACustodianError(0);
    v48 = v47;
    v66[0] = -7000;
    v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v67, v66, v49, v48, v50);
    v51 = (uint64_t)v56;
    *v56 = v67[0];
    swift_storeEnumTagMultiPayload(v51, v55, 1);
    v52 = v62;
    sub_10003A944(v51, v62, v63 & 1, v41, (uint64_t)v36, v42, v38, v35);
    sub_100004934(v51, &qword_1002953C0);
    swift_release(v33);
    v46 = v52;
  }
  sub_100028388(v46, type metadata accessor for CustodianRecoveryInfoRecord);
  swift_release(v35);
  swift_bridgeObjectRelease(v42);
  swift_release(v41);
  return sub_100006F58(v68);
}

uint64_t sub_100033764()
{
  return type metadata accessor for CustodianKeyRepair(0);
}

void sub_10003376C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[14];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v26[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C868, (uint64_t *)&unk_10028C870);
    if (v5 <= 0x3F)
    {
      v26[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
      if (v7 <= 0x3F)
      {
        v26[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028C888, &qword_10028C890);
        if (v9 <= 0x3F)
        {
          v26[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
          if (v11 <= 0x3F)
          {
            v26[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, &qword_10028C8A8, &qword_10028C8B0);
            if (v13 <= 0x3F)
            {
              v26[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
              if (v15 <= 0x3F)
              {
                v26[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
                if (v17 <= 0x3F)
                {
                  v26[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_100017464(319, &qword_10028C8D8, (uint64_t *)&unk_10028C8E0);
                  if (v19 <= 0x3F)
                  {
                    v26[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_100017464(319, &qword_10028BDA0, (uint64_t *)&unk_10028C8F0);
                    if (v21 <= 0x3F)
                    {
                      v26[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
                      if (v23 <= 0x3F)
                      {
                        v26[10] = *(_QWORD *)(v22 - 8) + 64;
                        sub_100017464(319, qword_100293830, (uint64_t *)&unk_10028C910);
                        if (v25 <= 0x3F)
                        {
                          v26[11] = *(_QWORD *)(v24 - 8) + 64;
                          v26[12] = "\b";
                          v26[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
                          swift_updateClassMetadata2(a1, 256, 14, v26, a1 + 80);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

id sub_1000339E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  NSString v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  _QWORD v33[5];

  v3 = v2;
  v5 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028FA50);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v33[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v10);
  Dependency.wrappedValue.getter(v33, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v15 = objc_msgSend(*(id *)(*sub_10000732C(v33, v33[3]) + 16), "aa_primaryAppleAccount");
  if (v15
    && (v16 = v15, v17 = objc_msgSend(v15, "aa_altDSID"), v16, v17))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    sub_100006F58(v33);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsEventFactory, v5);
    Dependency.wrappedValue.getter(v33, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianRepairEvent);
    v21 = v20;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v19);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    if (a2)
    {
      v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v24 = 0;
    }
    v30 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v22, v23, v24);
    swift_bridgeObjectRelease(v19);

    sub_100006F58(v33);
  }
  else
  {
    sub_100006F58(v33);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A8A20);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Account is nil. Not reporting repair failure", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return 0;
  }
  return v30;
}

void sub_100033D0C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  Class isa;
  void *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71[5];
  uint64_t v72;
  _BYTE v73[24];

  v67 = a8;
  v68 = a7;
  v69 = a4;
  v70 = a3;
  v12 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v65 = *(_QWORD *)(v12 - 8);
  v66 = v12;
  __chkstk_darwin(v12, v13);
  v64 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for RecoveryKeys(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v73, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v29 = Strong;
    sub_100024A20(a1, (uint64_t)v27, (uint64_t *)&unk_10028CCF0);
    if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
    {
      v30 = *v27;
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v31 = type metadata accessor for Logger(0);
      sub_100005288(v31, (uint64_t)qword_1002A8A08);
      v32 = swift_errorRetain(v30);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(22, -1);
        v36 = (uint64_t *)swift_slowAlloc(8, -1);
        v37 = swift_slowAlloc(32, -1);
        v71[0] = v37;
        *(_DWORD *)v35 = 136315394;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v38 = qword_10028C7A0;
        v39 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v72 = sub_1001DEF4C(v38, v39, v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
        swift_bridgeObjectRelease(v39);
        *(_WORD *)(v35 + 12) = 2112;
        v40 = _convertErrorToNSError(_:)(v30);
        v72 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
        *v36 = v40;
        swift_errorRelease(v30);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - AutoHeal: error creating recovery keys, unable to repair: %@", (uint8_t *)v35, 0x16u);
        v41 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v36, 1, v41);
        swift_slowDealloc(v36, -1, -1);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {
        swift_errorRelease(v30);
      }

      v56 = v67;
      if (v67)
      {
        swift_errorRetain(v30);
        v57 = v56;
        isa = Bool._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v57, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

        v59 = (void *)_convertErrorToNSError(_:)(v30);
        objc_msgSend(v57, "populateUnderlyingErrorsStartingWithRootError:", v59);

        v60 = v64;
        v61 = v65;
        v62 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v29 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter, v66);
        Dependency.wrappedValue.getter(v71, v62);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v60, v62);
        v63 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
        objc_msgSend(v63, "sendEvent:", v57);

        sub_100006F58(v71);
      }
      else
      {
        swift_errorRetain(v30);
      }
      v70(v30);
      swift_release(v29);
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }
    else
    {
      sub_10003B730((uint64_t)v27, (uint64_t)v23, type metadata accessor for RecoveryKeys);
      sub_100027FE8((uint64_t)v23, (uint64_t)v18, type metadata accessor for RecoveryKeys);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
      sub_100034420(a5, (uint64_t)v18, a6, v68, (uint64_t)v70, v69);
      swift_release(v29);
      sub_100004934((uint64_t)v18, (uint64_t *)&unk_10028CD00);
      sub_100028388((uint64_t)v23, type metadata accessor for RecoveryKeys);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100005288(v42, (uint64_t)qword_1002A8A08);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v71[0] = v47;
      *(_DWORD *)v46 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v48 = qword_10028C7A0;
      v49 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v72 = sub_1001DEF4C(v48, v49, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - AutoHeal: Self is nil. Abort Custodian Key Repair", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }

    v50 = v70;
    type metadata accessor for AACustodianError(0);
    v52 = v51;
    v72 = -7022;
    v53 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v54 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v71, &v72, v53, v52, v54);
    v55 = (void *)v71[0];
    v50(v71[0]);

  }
}

id sub_100034420(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);
  int v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  id result;
  uint64_t v98;
  void *v99;
  id v100;
  unsigned int (*v101)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  int v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t, uint64_t);
  unsigned __int8 v127;
  uint64_t v128;
  unsigned int (*v129)(uint64_t, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  _QWORD *v156;
  void *v157;
  uint64_t v158;
  id v159;
  void (*v160)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  char *v168;
  unsigned int (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  void (*v184)(char *, uint64_t, uint64_t);
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v202;

  v182 = a6;
  v180 = a5;
  v196 = a4;
  v183 = a3;
  v202 = a1;
  v181 = *v6;
  v191 = type metadata accessor for KeyRepairContext(0);
  v175 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191, v8);
  v176 = v9;
  v179 = (uint64_t)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for CustodianshipRecords(0);
  v173 = *(_QWORD *)(v199 - 8);
  v11 = __chkstk_darwin(v199, v10);
  v178 = (uint64_t)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v177 = (uint64_t)&v162 - v15;
  v174 = v16;
  __chkstk_darwin(v14, v17);
  v194 = (uint64_t)&v162 - v18;
  v166 = type metadata accessor for CustodianHealthRecord(0);
  v20 = __chkstk_darwin(v166, v19);
  v172 = (uint64_t)&v162 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v193 = (uint64_t)&v162 - v23;
  v165 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v25 = __chkstk_darwin(v165, v24);
  v190 = (uint64_t)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  v192 = (uint64_t)&v162 - v28;
  v29 = sub_1000080B4(&qword_10028E810);
  v31 = __chkstk_darwin(v29, v30);
  v171 = (char *)&v162 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v33);
  v188 = (uint64_t)&v162 - v34;
  v35 = type metadata accessor for CustodianRecord(0);
  v37 = __chkstk_darwin(v35, v36);
  v189 = (uint64_t)&v162 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v39);
  v200 = (uint64_t)&v162 - v40;
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v43);
  v187 = (uint64_t)&v162 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1000080B4(&qword_10028CD10);
  __chkstk_darwin(v45, v46);
  v48 = (char *)&v162 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  v51 = __chkstk_darwin(v49, v50);
  v164 = (uint64_t)&v162 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = __chkstk_darwin(v51, v53);
  v170 = (uint64_t)&v162 - v55;
  v57 = __chkstk_darwin(v54, v56);
  v168 = (char *)&v162 - v58;
  v60 = __chkstk_darwin(v57, v59);
  v167 = (uint64_t *)((char *)&v162 - v61);
  __chkstk_darwin(v60, v62);
  v64 = (char *)&v162 - v63;
  v65 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v67 = __chkstk_darwin(v65, v66);
  v185 = (char *)&v162 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __chkstk_darwin(v67, v69);
  v186 = (char *)&v162 - v71;
  v73 = __chkstk_darwin(v70, v72);
  v75 = (char *)&v162 - v74;
  v77 = __chkstk_darwin(v73, v76);
  v79 = (char *)&v162 - v78;
  __chkstk_darwin(v77, v80);
  v82 = (char *)&v162 - v81;
  v163 = v35;
  v83 = v202 + *(int *)(v35 + 20);
  v84 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v84((char *)&v162 - v81, v83, v41);
  v201 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
  v201(v82, 0, 1, v41);
  v198 = a2;
  sub_100024A20(a2, (uint64_t)v64, (uint64_t *)&unk_10028CD00);
  v85 = type metadata accessor for RecoveryKeys(0);
  v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 48);
  v86 = v169(v64, 1, v85);
  v197 = v85;
  v184 = v84;
  if (v86 == 1)
  {
    sub_100004934((uint64_t)v64, (uint64_t *)&unk_10028CD00);
    v87 = 1;
  }
  else
  {
    v84(v79, (uint64_t)&v64[*(int *)(v85 + 24)], v41);
    sub_100028388((uint64_t)v64, type metadata accessor for RecoveryKeys);
    v87 = 0;
  }
  v201(v79, v87, 1, v41);
  v88 = (uint64_t)&v48[*(int *)(v45 + 48)];
  v89 = (uint64_t *)&unk_1002904F0;
  sub_100024A20((uint64_t)v82, (uint64_t)v48, (uint64_t *)&unk_1002904F0);
  sub_100024A20((uint64_t)v79, v88, (uint64_t *)&unk_1002904F0);
  v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v90((uint64_t)v48, 1, v41) == 1)
  {
    sub_100004934((uint64_t)v79, (uint64_t *)&unk_1002904F0);
    sub_100004934((uint64_t)v82, (uint64_t *)&unk_1002904F0);
    if (v90(v88, 1, v41) == 1)
    {
      v91 = -1;
    }
    else
    {
      v89 = &qword_10028CD10;
      v91 = 0;
    }
  }
  else
  {
    sub_100024A20((uint64_t)v48, (uint64_t)v75, (uint64_t *)&unk_1002904F0);
    if (v90(v88, 1, v41) == 1)
    {
      sub_100004934((uint64_t)v79, (uint64_t *)&unk_1002904F0);
      sub_100004934((uint64_t)v82, (uint64_t *)&unk_1002904F0);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v75, v41);
      v91 = 0;
      v89 = &qword_10028CD10;
    }
    else
    {
      v92 = v187;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v187, v88, v41);
      v93 = sub_100005150(&qword_10028CC98, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of static Equatable.== infix(_:_:)(v75, v92, v41, v93);
      v94 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
      v94(v92, v41);
      v89 = (uint64_t *)&unk_1002904F0;
      sub_100004934((uint64_t)v79, (uint64_t *)&unk_1002904F0);
      sub_100004934((uint64_t)v82, (uint64_t *)&unk_1002904F0);
      v94((uint64_t)v75, v41);
    }
  }
  v95 = v196;
  v96 = v188;
  sub_100004934((uint64_t)v48, v89);
  result = objc_msgSend((id)objc_opt_self(AADeviceInfo), "currentInfo");
  v98 = (uint64_t)v186;
  if (!result)
  {
    __break(1u);
    return result;
  }
  v99 = result;
  v100 = objc_msgSend(result, "buildVersion");

  v101 = (unsigned int (*)(uint64_t *, uint64_t, uint64_t))v169;
  v102 = v167;
  if (v100)
  {
    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
    v187 = v104;
    v188 = v103;

  }
  else
  {
    v187 = 0;
    v188 = 0;
  }
  v105 = v197;
  sub_100027FE8(v202, v189, type metadata accessor for CustodianRecord);
  sub_100024A20(v198, (uint64_t)v102, (uint64_t *)&unk_10028CD00);
  if (v101(v102, 1, v105) == 1)
  {
    sub_100004934((uint64_t)v102, (uint64_t *)&unk_10028CD00);
    v106 = 0;
    v107 = 0xF000000000000000;
  }
  else
  {
    v106 = *v102;
    v107 = v102[1];
    sub_10000F450(*v102, v107);
    sub_100028388((uint64_t)v102, type metadata accessor for RecoveryKeys);
  }
  v108 = *(int *)(v191 + 20);
  if ((*(_BYTE *)(v95 + v108) & 1) != 0)
    v109 = 1;
  else
    v109 = *(_BYTE *)(v202 + *(int *)(v163 + 48));
  v110 = (uint64_t)v168;
  v111 = v91;
  v112 = v91 ^ 1;
  LODWORD(v168) = v111;
  if ((v111 & 1) != 0)
  {
    v201((char *)v98, 1, 1, v41);
    v113 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v96, 1, 1, v113);
  }
  else
  {
    v114 = v110;
    sub_100024A20(v198, v110, (uint64_t *)&unk_10028CD00);
    v115 = v197;
    if (v101((uint64_t *)v114, 1, v197) == 1)
    {
      sub_100004934(v114, (uint64_t *)&unk_10028CD00);
      v116 = 1;
      v98 = (uint64_t)v186;
    }
    else
    {
      v117 = v114 + *(int *)(v115 + 24);
      v98 = (uint64_t)v186;
      v184(v186, v117, v41);
      sub_100028388(v114, type metadata accessor for RecoveryKeys);
      v116 = 0;
    }
    v118 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v201)(v98, v116, 1, v41);
    Date.init()(v118);
    v119 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v96, 0, 1, v119);
    v95 = v196;
  }
  swift_bridgeObjectRetain(v187);
  sub_100093290(v189, 0, 0, 0, 1, v106, v107, v109, v200, v98, v188, v120, v96, v112 & 1);
  v121 = v202 + *(int *)(v199 + 20);
  sub_100027FE8(v121, v190, type metadata accessor for CustodianRecoveryInfoRecord);
  v122 = v170;
  sub_100024A20(v198, v170, (uint64_t *)&unk_10028CD00);
  if (v101((uint64_t *)v122, 1, v197) == 1)
  {
    sub_100004934(v122, (uint64_t *)&unk_10028CD00);
    v123 = 0;
    v124 = 0xF000000000000000;
  }
  else
  {
    v123 = *(_QWORD *)(v122 + 16);
    v124 = *(_QWORD *)(v122 + 24);
    sub_10000F450(v123, v124);
    sub_100028388(v122, type metadata accessor for RecoveryKeys);
  }
  v125 = v192;
  v126 = v184;
  if ((*(_BYTE *)(v95 + v108) & 1) != 0)
    v127 = 1;
  else
    v127 = *(_BYTE *)(v121 + *(int *)(v165 + 40));
  if ((v168 & 1) == 0)
  {
    v128 = v164;
    sub_100024A20(v198, v164, (uint64_t *)&unk_10028CD00);
    v129 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v101;
    v130 = v197;
    if (v129(v128, 1, v197) != 1)
    {
      v126(v185, v128 + *(int *)(v130 + 24), v41);
      sub_100028388(v128, type metadata accessor for RecoveryKeys);
      v131 = 0;
      goto LABEL_38;
    }
    sub_100004934(v128, (uint64_t *)&unk_10028CD00);
  }
  v131 = 1;
LABEL_38:
  v132 = 1;
  v133 = (uint64_t)v185;
  v201(v185, v131, 1, v41);
  sub_1001F9904(v190, 0, 0xF000000000000000, v123, v124, v127, v133, v188, v125, v187);
  v134 = v202 + *(int *)(v199 + 24);
  v135 = v172;
  v136 = sub_100027FE8(v134, v172, type metadata accessor for CustodianHealthRecord);
  v137 = (uint64_t)v171;
  Date.init(timeIntervalSince1970:)(v136, 946713600.0);
  v138 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v137, 0, 1, v138);
  if ((*(_BYTE *)(v95 + v108) & 1) == 0)
    v132 = *(_BYTE *)(v134 + *(int *)(v166 + 36));
  v139 = v193;
  sub_10016A208(v135, v137, 0, 0xC000000000000000, v132, 0, 1, v193);
  v140 = v194;
  sub_100027FE8(v200, v194, type metadata accessor for CustodianRecord);
  v141 = v199;
  sub_100027FE8(v125, v140 + *(int *)(v199 + 20), type metadata accessor for CustodianRecoveryInfoRecord);
  v142 = v140 + *(int *)(v141 + 24);
  v143 = v140;
  sub_100027FE8(v139, v142, type metadata accessor for CustodianHealthRecord);
  v144 = v195;
  v145 = sub_1000339E0(*(_QWORD *)(v95 + *(int *)(v191 + 28)), *(_QWORD *)(v95 + *(int *)(v191 + 28) + 8));
  v146 = swift_allocObject(&unk_100260718, 24, 7);
  v201 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v146;
  swift_weakInit(v146 + 16, v144);
  v147 = v179;
  sub_100027FE8(v95, v179, type metadata accessor for KeyRepairContext);
  v148 = v177;
  sub_100027FE8(v202, v177, type metadata accessor for CustodianshipRecords);
  v149 = v178;
  sub_100027FE8(v143, v178, type metadata accessor for CustodianshipRecords);
  v150 = *(unsigned __int8 *)(v175 + 80);
  v151 = (v150 + 48) & ~v150;
  v152 = *(unsigned __int8 *)(v173 + 80);
  v153 = (v176 + v152 + v151) & ~v152;
  v154 = (v174 + v152 + v153) & ~v152;
  v155 = (v174 + v154 + 7) & 0xFFFFFFFFFFFFFFF8;
  v156 = (_QWORD *)swift_allocObject(&unk_1002607E0, v155 + 8, v150 | v152 | 7);
  v156[2] = v146;
  v156[3] = v145;
  v157 = v145;
  v158 = v182;
  v156[4] = v180;
  v156[5] = v158;
  sub_10003B730(v147, (uint64_t)v156 + v151, type metadata accessor for KeyRepairContext);
  sub_10003B730(v148, (uint64_t)v156 + v153, type metadata accessor for CustodianshipRecords);
  sub_10003B730(v149, (uint64_t)v156 + v154, type metadata accessor for CustodianshipRecords);
  *(_QWORD *)((char *)v156 + v155) = v181;
  v159 = v157;
  swift_retain(v158);
  v160 = v201;
  swift_retain(v201);
  v161 = v194;
  sub_100037300(v194, v183, v196, (uint64_t)sub_10003D2A0, (uint64_t)v156);

  swift_release(v156);
  sub_100028388(v161, type metadata accessor for CustodianshipRecords);
  sub_100028388(v193, type metadata accessor for CustodianHealthRecord);
  sub_100028388(v192, type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100028388(v200, type metadata accessor for CustodianRecord);
  return (id)swift_release(v160);
}

uint64_t sub_100035270(int a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD *);
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100[5];

  v88 = a7;
  v98 = a1;
  v12 = sub_1000080B4(&qword_10028CCE8);
  v90 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v89 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028CCE0);
  v92 = *(_QWORD *)(v15 - 8);
  v93 = v15;
  __chkstk_darwin(v15, v16);
  v91 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v95, v18);
  v96 = (uint64_t *)((char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
  swift_errorRetain(a2);
  v22 = swift_errorRetain(a2);
  v97 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v84 = v12;
    v94 = a6;
    v85 = a3;
    v86 = a5;
    v87 = a4;
    v25 = swift_slowAlloc(28, -1);
    v26 = (uint64_t *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(32, -1);
    v100[0] = v27;
    *(_DWORD *)v25 = 136315650;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v28 = qword_10028C7A0;
    v29 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v99 = sub_1001DEF4C(v28, v29, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v99) = v98 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4);
    *(_WORD *)(v25 + 18) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v30 = _swift_stdlib_bridgeErrorToNSError(a2);
      v99 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    }
    else
    {
      v99 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
      v30 = 0;
    }
    *v26 = v30;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - AutoHeal: CRK exists on OT? %{BOOL}d error:%@", (uint8_t *)v25, 0x1Cu);
    v31 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v26, 1, v31);
    swift_slowDealloc(v26, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    a5 = v86;
    a4 = v87;
    a3 = v85;
    a6 = v94;
    v12 = v84;
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v32 = a3 + *(int *)(type metadata accessor for CustodianshipRecords(0) + 20);
  v33 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v34 = *(_QWORD *)(v32 + *(int *)(v33 + 32) + 8);
  if ((v98 & 1) != 0)
  {
    v35 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.info.getter();
    v37 = os_log_type_enabled(v35, v36);
    if (v34 >> 60 == 15)
    {
      if (v37)
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v39 = swift_slowAlloc(32, -1);
        v100[0] = v39;
        *(_DWORD *)v38 = 136315138;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v40 = qword_10028C7A0;
        v41 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v99 = sub_1001DEF4C(v40, v41, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v41);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - AutoHeal: CRK exists on OT, RKC not present in CK. KeyRepair is needed. But, cannot delete keys from Octagon. Aborting KeyRepair.", v38, 0xCu);
        swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v42;
      v44 = -7027;
    }
    else
    {
      if (v37)
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = swift_slowAlloc(32, -1);
        v100[0] = v53;
        *(_DWORD *)v52 = 136315138;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v54 = qword_10028C7A0;
        v55 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v99 = sub_1001DEF4C(v54, v55, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v55);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%s - AutoHeal: CRK exists on OT, RKC present in CK. KeyRepair not needed. Aborting KeyRepair.", v52, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v56;
      v44 = -7025;
    }
LABEL_40:
    v99 = v44;
    v79 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v80 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v100, &v99, v79, v43, v80);
    v81 = v95;
    v82 = (uint64_t)v96;
    *v96 = v100[0];
    swift_storeEnumTagMultiPayload(v82, v81, 1);
    a4((_QWORD *)v82);
    return sub_100004934(v82, (uint64_t *)&unk_10028CCF0);
  }
  if (v34 >> 60 == 15)
  {
    v45 = Logger.logObject.getter(v33);
    v46 = static os_log_type_t.debug.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v94 = a6;
      v47 = a3;
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v100[0] = v49;
      *(_DWORD *)v48 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v50 = qword_10028C7A0;
      v51 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v99 = sub_1001DEF4C(v50, v51, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s - AutoHeal: CRK not exists on OT, CRK never existed. Recovery Info Record is missing RKC. Attempting to create CRK on Octagon", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      a3 = v47;
      a6 = v94;
    }
    else
    {

    }
    v69 = v91;
    v70 = v92;
    v71 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, a6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v93);
    Dependency.wrappedValue.getter(v100, v71);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v69, v71);
    sub_10000732C(v100, v100[3]);
    v72 = type metadata accessor for CustodianRecord(0);
    sub_10018A2E8(a3 + *(int *)(v72 + 20), a4, a5);
    return sub_100006F58(v100);
  }
  else
  {
    v58 = v89;
    v57 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, a6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__urlBagProvider, v12);
    Dependency.wrappedValue.getter(v100, v12);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v12);
    v59 = objc_msgSend((id)objc_opt_self(AAUrlBagHelper), "canRepairCustodian");
    v60 = sub_100006F58(v100);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.debug.getter(v61);
    v63 = os_log_type_enabled(v61, v62);
    if (!v59)
    {
      if (v63)
      {
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v100[0] = v75;
        *(_DWORD *)v74 = 136315138;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v76 = qword_10028C7A0;
        v77 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v99 = sub_1001DEF4C(v76, v77, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v77);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s - AutoHeal: CRK not exists on OT, But, Recovery Info Record has an RKC. decoupleCRK is not enabled. Aborting repair.", v74, 0xCu);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v78;
      v44 = -7026;
      goto LABEL_40;
    }
    if (v63)
    {
      v94 = a6;
      v64 = a3;
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v100[0] = v66;
      *(_DWORD *)v65 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v67 = qword_10028C7A0;
      v68 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v99 = sub_1001DEF4C(v67, v68, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s - AutoHeal: CRK not exists on OT, Recovery Info Record has an RKC. Invoking Preflight and repair.", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      a3 = v64;
    }
    else
    {

    }
    return sub_100035E0C(a3, v88, a4, a5);
  }
}

uint64_t sub_100035E0C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  os_log_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD *);
  uint64_t v69;
  uint64_t v70[5];
  uint64_t v71;
  uint64_t v72;

  v68 = a3;
  v69 = a4;
  v66 = *v4;
  v6 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v6, v7);
  v9 = (os_log_t *)((char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000080B4(&qword_10028CCE0);
  v65 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for RecoveryKeys(0);
  __chkstk_darwin(v63, v14);
  v16 = (uint64_t *)((char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for CustodianRecord(0);
  v21 = (uint64_t *)(a1 + *(int *)(v64 + 40));
  v22 = v21[1];
  if (v22 >> 60 == 15
    || (v23 = *v21,
        v24 = a1 + *(int *)(v17 + 20),
        v25 = (uint64_t *)(v24 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 32)),
        v26 = v25[1],
        v26 >> 60 == 15))
  {
    type metadata accessor for AACustodianError(0);
    v28 = v27;
    v71 = -7019;
    v29 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v30 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v70, &v71, v29, v28, v30);
    *v9 = v70[0];
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    v68(v9);
    return sub_100004934((uint64_t)v9, (uint64_t *)&unk_10028CCF0);
  }
  else
  {
    v60 = v10;
    v32 = *v25;
    sub_100014534(v23, v22);
    v59 = v32;
    v61 = v26;
    sub_100014534(v32, v26);
    v33 = v23;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A8A08);
    v35 = sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
    v62 = v33;
    if (v38)
    {
      v58 = v37;
      v57 = v36;
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v70[0] = v40;
      *(_DWORD *)v39 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v42 = qword_10028C7A0;
      v41 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v71 = sub_1001DEF4C(v42, v41, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v39 + 12) = 2080;
      v43 = sub_1001E4A60();
      v45 = v44;
      v71 = sub_1001DEF4C(v43, v44, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v45);
      sub_100028388((uint64_t)v20, type metadata accessor for CustodianshipRecords);
      v46 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "%s - Starting to Preflight Custodian Recovery before repair for %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v33 = v62;
    }
    else
    {
      sub_100028388((uint64_t)v20, type metadata accessor for CustodianshipRecords);

    }
    v47 = (uint64_t)v16 + *(int *)(v63 + 24);
    sub_100014534(v33, v22);
    v48 = v59;
    v49 = v61;
    sub_100014534(v59, v61);
    sub_1001E4D98(v47);
    *v16 = v33;
    v16[1] = v22;
    v16[2] = v48;
    v16[3] = v49;
    v50 = v67;
    v51 = v65;
    v52 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v13, v67 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v60);
    Dependency.wrappedValue.getter(v70, v52);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v52);
    v53 = sub_10000732C(v70, v70[3]);
    v54 = a1 + *(int *)(v64 + 20);
    v55 = (_QWORD *)*v53;
    v56 = v69;
    swift_retain(v69);
    swift_retain(v50);
    sub_10018CB34(v54, v16, v55, v68, v56, v50, v66);
    sub_1000144D8(v48, v49);
    sub_1000144D8(v62, v22);
    sub_100028388((uint64_t)v16, type metadata accessor for RecoveryKeys);
    return sub_100006F58(v70);
  }
}

uint64_t sub_100036360(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  id v27;
  Class isa;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  id v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69[5];
  uint64_t v70;
  _BYTE v71[24];

  v63 = a8;
  v66 = a6;
  v67 = a4;
  v68 = a5;
  v12 = type metadata accessor for CustodianshipRecords(0);
  v62 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v62 + 64);
  v15 = __chkstk_darwin(v12, v14);
  v64 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v60 - v17;
  v19 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a2;
  v24 = a2 + 16;
  swift_beginAccess(v24, v71, 0, 0);
  Strong = swift_weakLoadStrong(v24);
  if (Strong)
  {
    v26 = Strong;
    if (a3)
    {
      v61 = a7;
      v27 = a3;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v27, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      if (a1)
        v29 = (void *)_convertErrorToNSError(_:)(a1);
      else
        v29 = 0;
      objc_msgSend(v27, "populateUnderlyingErrorsStartingWithRootError:", v29);

      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v26 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__analyticsRTCReporter, v19);
      Dependency.wrappedValue.getter(v69, v19);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      v42 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v42, "sendEvent:", v27);

      sub_100006F58(v69);
      swift_release(v26);
      a7 = v61;
      if (!a1)
        goto LABEL_17;
LABEL_7:
      swift_errorRetain(a1);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v30 = type metadata accessor for Logger(0);
      sub_100005288(v30, (uint64_t)qword_1002A8A08);
      v31 = swift_errorRetain(a1);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(22, -1);
        v35 = (uint64_t *)swift_slowAlloc(8, -1);
        v36 = swift_slowAlloc(32, -1);
        v69[0] = v36;
        *(_DWORD *)v34 = 136315394;
        if (qword_10028ADA8 != -1)
          swift_once(&qword_10028ADA8, sub_10002FEAC);
        v37 = qword_10028C7A0;
        v38 = *(_QWORD *)algn_10028C7A8;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
        v70 = sub_1001DEF4C(v37, v38, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
        swift_bridgeObjectRelease(v38);
        *(_WORD *)(v34 + 12) = 2112;
        v39 = _convertErrorToNSError(_:)(a1);
        v70 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
        *v35 = v39;
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - error updating record: %@", (uint8_t *)v34, 0x16u);
        v40 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v35, 1, v40);
        swift_slowDealloc(v35, -1, -1);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v34, -1, -1);
      }
      else
      {
        swift_errorRelease(a1);
      }

      swift_errorRetain(a1);
      v67(a1);
      swift_errorRelease(a1);
      return swift_errorRelease(a1);
    }
    swift_release(Strong);
  }
  if (a1)
    goto LABEL_7;
LABEL_17:
  v43 = *(_BYTE *)(v66 + *(int *)(type metadata accessor for KeyRepairContext(0) + 20));
  sub_100027FE8(a7, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
  if ((v43 & 1) != 0)
  {
    v44 = v18[*(int *)(type metadata accessor for CustodianRecord(0) + 48)];
    sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
    if ((v44 & 1) == 0)
    {
      swift_beginAccess(v24, v69, 0, 0);
      result = swift_weakLoadStrong(v24);
      if (result)
      {
        v45 = result;
        v46 = v64;
        sub_100027FE8(v63, v64, type metadata accessor for CustodianshipRecords);
        v47 = *(unsigned __int8 *)(v62 + 80);
        v48 = (v47 + 40) & ~v47;
        v49 = (_QWORD *)swift_allocObject(&unk_100260858, v48 + v13, v47 | 7);
        v50 = v68;
        v49[2] = v67;
        v49[3] = v50;
        v51 = v65;
        v49[4] = v65;
        sub_10003B730(v46, (uint64_t)v49 + v48, type metadata accessor for CustodianshipRecords);
        swift_retain(v50);
        swift_retain(v51);
        sub_100036B10(a7, (uint64_t)sub_10003DA10, (uint64_t)v49);
        swift_release(v49);
        return swift_release(v45);
      }
      return result;
    }
  }
  else
  {
    sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v52 = type metadata accessor for Logger(0);
  v53 = sub_100005288(v52, (uint64_t)qword_1002A8A08);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.debug.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v69[0] = v57;
    *(_DWORD *)v56 = 136315138;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v58 = qword_10028C7A0;
    v59 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v70 = sub_1001DEF4C(v58, v59, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease(v59);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s - skipping old custodian record cleanup and sharing of new record...", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }

  return ((uint64_t (*)(_QWORD))v67)(0);
}

uint64_t sub_100036A3C(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14[24];

  if (a1)
  {
    swift_errorRetain(a1);
    a2(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v10 = a4 + 16;
    swift_beginAccess(a4 + 16, v14, 0, 0);
    result = swift_weakLoadStrong(v10);
    if (result)
    {
      v11 = result;
      v12 = a5 + *(int *)(type metadata accessor for CustodianshipRecords(0) + 20);
      v13 = type metadata accessor for CustodianRecord(0);
      sub_100032BE4(v12, *(_QWORD *)(a5 + *(int *)(v13 + 24)), *(_QWORD *)(a5 + *(int *)(v13 + 24) + 8), a2, a3);
      return swift_release(v11);
    }
  }
  return result;
}

uint64_t sub_100036B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  dispatch_group_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v81;
  dispatch_group_t v82;
  uint64_t v83;
  void (*v84)(_QWORD);
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD aBlock[5];
  _QWORD *v107;

  v103 = a1;
  v95 = a2;
  v96 = a3;
  v104 = *v3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  v98 = v4;
  v99 = v5;
  __chkstk_darwin(v4, v6);
  v97 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v91 = *(_QWORD *)(v8 - 8);
  v92 = v8;
  __chkstk_darwin(v8, v9);
  v90 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v11, v12);
  v89 = (uint64_t)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v14, v15);
  v87 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v17, v18);
  v85 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4(&qword_10028E8C0);
  v101 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = (void (*)(_QWORD))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v83 = *((_QWORD *)v84 - 1);
  __chkstk_darwin(v84, v24);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for DispatchQoS(0);
  v93 = *(_QWORD *)(v31 - 8);
  v94 = v31;
  __chkstk_darwin(v31, v32);
  v34 = (char *)&v81 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = dispatch_group_create();
  v100 = swift_allocObject(&unk_100260880, 24, 7);
  *(_QWORD *)(v100 + 16) = &_swiftEmptyDictionarySingleton;
  v86 = sub_100007764();
  v88 = v34;
  static DispatchQoS.unspecified.getter(v86);
  aBlock[0] = _swiftEmptyArrayStorage;
  v35 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v36 = sub_1000080B4(&qword_10028B9F0);
  v37 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v36, v37, v27, v35);
  (*(void (**)(char *, _QWORD, void (*)(_QWORD)))(v83 + 104))(v26, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v84);
  v38 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ELL, 0x8000000100209DE0, v34, v30, v26, 0);
  v39 = v82;
  dispatch_group_enter(v82);
  v40 = v101;
  v102 += OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cloudStorage;
  v84 = *(void (**)(_QWORD))(v101 + 16);
  v84(v23);
  Dependency.wrappedValue.getter(aBlock, v20);
  v101 = *(_QWORD *)(v40 + 8);
  ((void (*)(char *, uint64_t))v101)(v23, v20);
  v41 = v103;
  v42 = v85;
  sub_100027FE8(v103, v85, type metadata accessor for CustodianRecord);
  v43 = (_QWORD *)swift_allocObject(&unk_1002608A8, 48, 7);
  v44 = v100;
  v43[2] = v38;
  v43[3] = v44;
  v45 = v104;
  v43[4] = v39;
  v43[5] = v45;
  v46 = v38;
  swift_retain(v44);
  v47 = v39;
  sub_10017EB7C(v42, (uint64_t)sub_10003DA7C, (uint64_t)v43);
  swift_release(v43);
  sub_100028388(v42, type metadata accessor for CustodianRecord);
  sub_100006F58(aBlock);
  dispatch_group_enter(v47);
  v48 = (void (*)(char *, uint64_t, uint64_t))v84;
  ((void (*)(char *, uint64_t, uint64_t))v84)(v23, v102, v20);
  Dependency.wrappedValue.getter(aBlock, v20);
  ((void (*)(char *, uint64_t))v101)(v23, v20);
  v49 = type metadata accessor for CustodianshipRecords(0);
  v50 = v41 + *(int *)(v49 + 24);
  v51 = v87;
  sub_100027FE8(v50, v87, type metadata accessor for CustodianHealthRecord);
  v52 = (_QWORD *)swift_allocObject(&unk_1002608D0, 48, 7);
  v53 = v100;
  v52[2] = v46;
  v52[3] = v53;
  v52[4] = v47;
  v52[5] = v45;
  v54 = v46;
  v55 = v53;
  swift_retain(v53);
  v56 = v47;
  sub_10017EDDC(v51, (uint64_t)sub_10003DAC8, (uint64_t)v52);
  swift_release(v52);
  sub_100028388(v51, type metadata accessor for CustodianHealthRecord);
  sub_100006F58(aBlock);
  dispatch_group_enter(v56);
  v48(v23, v102, v20);
  Dependency.wrappedValue.getter(aBlock, v20);
  ((void (*)(char *, uint64_t))v101)(v23, v20);
  v57 = v89;
  sub_100027FE8(v103 + *(int *)(v49 + 20), v89, type metadata accessor for CustodianRecoveryInfoRecord);
  v58 = (_QWORD *)swift_allocObject(&unk_1002608F8, 48, 7);
  v58[2] = v54;
  v58[3] = v55;
  v59 = v55;
  v60 = v104;
  v58[4] = v56;
  v58[5] = v60;
  v61 = v54;
  swift_retain(v55);
  v62 = v56;
  sub_10017F03C(v57, (uint64_t)sub_10003DB48, (uint64_t)v58);
  swift_release(v58);
  sub_100028388(v57, type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100006F58(aBlock);
  v64 = v91;
  v63 = v92;
  v65 = v90;
  (*(void (**)(char *, _QWORD, uint64_t))(v91 + 104))(v90, enum case for DispatchQoS.QoSClass.default(_:), v92);
  v66 = (void *)static OS_dispatch_queue.global(qos:)(v65);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v63);
  v67 = (_QWORD *)swift_allocObject(&unk_100260920, 56, 7);
  v67[2] = v61;
  v67[3] = v59;
  v68 = v96;
  v67[4] = v95;
  v67[5] = v68;
  v67[6] = v60;
  aBlock[4] = sub_10003DBC4;
  v107 = v67;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100260938;
  v69 = _Block_copy(aBlock);
  v70 = v61;
  swift_retain(v59);
  v71 = swift_retain(v68);
  v72 = v88;
  static DispatchQoS.unspecified.getter(v71);
  v105 = _swiftEmptyArrayStorage;
  v73 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v74 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v75 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  v76 = v97;
  v77 = v74;
  v78 = v98;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v105, v77, v75, v98, v73);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v66, v69);
  _Block_release(v69);

  (*(void (**)(char *, uint64_t))(v99 + 8))(v76, v78);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v72, v94);
  v79 = v107;
  swift_release(v59);
  return swift_release(v79);
}

uint64_t sub_100037300(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v6 = v5;
  v42 = a4;
  v43 = a5;
  v39 = a3;
  v40 = a1;
  v41 = a2;
  v44 = *v5;
  v7 = type metadata accessor for CustodianshipRecords(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = type metadata accessor for KeyRepairContext(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v37 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028C448);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, (uint64_t)v6 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v15);
  Dependency.wrappedValue.getter(v45, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v38 = sub_10000732C(v45, v45[3]);
  v20 = swift_allocObject(&unk_100260718, 24, 7);
  swift_weakInit(v20 + 16, v6);
  sub_100027FE8(v39, (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for KeyRepairContext);
  v21 = v40;
  v22 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(v40, (uint64_t)v22, type metadata accessor for CustodianshipRecords);
  v23 = *(unsigned __int8 *)(v12 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = (v13 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v8 + 80);
  v28 = (v27 + v26 + 16) & ~v27;
  v29 = (v9 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_100260808, v29 + 8, v23 | v27 | 7);
  v31 = v41;
  *(_QWORD *)(v30 + 16) = v41;
  sub_10003B730(v37, v30 + v24, type metadata accessor for KeyRepairContext);
  *(_QWORD *)(v30 + v25) = v20;
  v32 = (_QWORD *)(v30 + v26);
  v33 = v43;
  *v32 = v42;
  v32[1] = v33;
  sub_10003B730((uint64_t)v22, v30 + v28, type metadata accessor for CustodianshipRecords);
  *(_QWORD *)(v30 + v29) = v44;
  v34 = v31;
  swift_retain(v20);
  swift_retain(v33);
  sub_1001C1C74(v21, (uint64_t)sub_10003D680, v30);
  swift_release(v20);
  swift_release(v30);
  return sub_100006F58(v45);
}

uint64_t sub_100037584(uint64_t a1, char *a2, NSObject *a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  Class isa;
  Class v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t Strong;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_t v64;
  char *v65;
  char *v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69[3];
  uint64_t v70;
  uint64_t v71;

  v67 = a5;
  v68 = a6;
  v64 = a3;
  v65 = a2;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v66 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v61 - v16;
  v18 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v22, v23);
  v25 = (uint64_t *)((char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v25, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v25, v22) == 1)
  {
    v26 = *v25;
    v27 = a7 + *(int *)(type metadata accessor for CustodianRecord(0) + 20);
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v28(v17, v27, v10);
    v29 = v10;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v30 = type metadata accessor for Logger(0);
    sub_100005288(v30, (uint64_t)qword_1002A8A08);
    v31 = v66;
    v28(v66, (uint64_t)v17, v10);
    swift_errorRetain(v26);
    v32 = swift_errorRetain(v26);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v63 = v11;
      v64 = v33;
      v65 = v17;
      v35 = swift_slowAlloc(32, -1);
      v36 = (uint64_t *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(64, -1);
      v69[0] = v62;
      *(_DWORD *)v35 = 136315650;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v38 = qword_10028C7A0;
      v37 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v70 = sub_1001DEF4C(v38, v37, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v35 + 12) = 2080;
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = v66;
      v29 = v10;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v10, v39);
      v43 = v42;
      v70 = sub_1001DEF4C(v41, v42, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v43);
      v44 = *(void (**)(char *, uint64_t))(v63 + 8);
      v44(v40, v29);
      *(_WORD *)(v35 + 22) = 2112;
      v45 = _convertErrorToNSError(_:)(v26);
      v70 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v36 = v45;
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      v46 = v64;
      _os_log_impl((void *)&_mh_execute_header, v64, v34, "%s - failed to save custodianship records %s: %@", (uint8_t *)v35, 0x20u);
      v47 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v36, 1, v47);
      swift_slowDealloc(v36, -1, -1);
      v48 = v62;
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      v17 = v65;
    }
    else
    {
      v44 = *(void (**)(char *, uint64_t))(v11 + 8);
      v44(v31, v29);
      swift_errorRelease(v26);
      swift_errorRelease(v26);

    }
    swift_errorRetain(v26);
    v67(v26);
    swift_errorRelease(v26);
    swift_errorRelease(v26);
    return ((uint64_t (*)(char *, uint64_t))v44)(v17, v29);
  }
  else
  {
    v49 = a4 + 16;
    sub_10003B730((uint64_t)v25, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    v50 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
    v51 = objc_msgSend(v65, "aa_altDSID");
    objc_msgSend(v50, "setAltDSID:", v51);

    v52 = type metadata accessor for CustodianRecord(0);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v50, "setCustodianUUID:", isa);

    v54 = 0;
    v55 = &v21[*(int *)(v52 + 40)];
    v56 = *((_QWORD *)v55 + 1);
    if (v56 >> 60 != 15)
    {
      v57 = *(_QWORD *)v55;
      sub_10000F450(*(_QWORD *)v55, *((_QWORD *)v55 + 1));
      v54 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000144D8(v57, v56);
    }
    objc_msgSend(v50, "setWrappingKeyRKC:", v54);

    objc_msgSend(v50, "setCustodianSyncAction:", *((unsigned __int8 *)&v64->isa + *(int *)(type metadata accessor for KeyRepairContext(0) + 24)));
    swift_beginAccess(v49, v69, 0, 0);
    Strong = swift_weakLoadStrong(v49);
    if (Strong)
    {
      v59 = Strong;
      sub_100037B60((uint64_t)v50, v67, v68);
      swift_release(v59);
    }

    return sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_100037B60(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26[5];

  v7 = *v3;
  v8 = sub_1000080B4(&qword_10028CD18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v26[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend((id)objc_opt_self(AAPreferences), "shouldSkipIdMSKeyUpdate") & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A8A08);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v26[0] = v18;
      *(_DWORD *)v17 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v19 = qword_10028C7A0;
      v20 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v25 = sub_1001DEF4C(v19, v20, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - 🚨 TCS IdMS Endpoint Testing: SkipIdMSKeyUpdate. Custodian recovery key update skipped.", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    return a2(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__idmsRequestController, v8);
    Dependency.wrappedValue.getter(v26, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v22 = (void **)sub_10000732C(v26, v26[3]);
    v23 = (_QWORD *)swift_allocObject(&unk_100260830, 40, 7);
    v23[2] = a2;
    v23[3] = a3;
    v23[4] = v7;
    v24 = *v22;
    swift_retain(a3);
    sub_1000441A0(a1, (uint64_t)sub_10003D74C, (uint64_t)v23, v24);
    swift_release(v23);
    return sub_100006F58(v26);
  }
}

uint64_t sub_100037E1C(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8A08);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v24 = a2;
      v8 = swift_slowAlloc(22, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      v10 = swift_slowAlloc(32, -1);
      v26 = v10;
      *(_DWORD *)v8 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v12 = qword_10028C7A0;
      v11 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v25 = sub_1001DEF4C(v12, v11, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease(v11);
      *(_WORD *)(v8 + 12) = 2112;
      v13 = _convertErrorToNSError(_:)(a1);
      v25 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      *v9 = v13;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - error updating recovery key: %@", (uint8_t *)v8, 0x16u);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v9, 1, v14);
      swift_slowDealloc(v9, -1, -1);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      a2 = v24;
    }
    else
    {
      swift_errorRelease(a1);

    }
    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v26 = v20;
      *(_DWORD *)v19 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v21 = qword_10028C7A0;
      v22 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v25 = sub_1001DEF4C(v21, v22, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - custodian recovery key update complete!", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

void sub_100038208(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5, const char *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t aBlock[5];
  _QWORD *v60;

  v53 = a7;
  v54 = a8;
  v52 = a6;
  v55 = a3;
  v56 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v57 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v20, v21);
  v23 = (uint64_t *)((char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v23, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v23, v20) == 1)
  {
    v49 = a4;
    v50 = v16;
    v51 = a2;
    v24 = *v23;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v25 = a9;
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v27 = swift_errorRetain(v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v47 = a9;
      v48 = v12;
      v30 = swift_slowAlloc(22, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(32, -1);
      aBlock[0] = v46;
      *(_DWORD *)v30 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v33 = qword_10028C7A0;
      v32 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v58 = (_QWORD *)sub_1001DEF4C(v33, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v30 + 12) = 2112;
      v34 = _convertErrorToNSError(_:)(v24);
      v58 = (_QWORD *)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, aBlock);
      *v31 = v34;
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v52, (uint8_t *)v30, 0x16u);
      v35 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v31, 1, v35);
      swift_slowDealloc(v31, -1, -1);
      v36 = v46;
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      v12 = v48;
      v37 = v49;
      v25 = v47;
    }
    else
    {
      swift_errorRelease(v24);

      v37 = v49;
    }
    v38 = (_QWORD *)swift_allocObject(v53, 40, 7);
    v39 = v54;
    v40 = v55;
    v38[2] = v55;
    v38[3] = v24;
    v38[4] = v37;
    aBlock[4] = v39;
    v60 = v38;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000051D0;
    aBlock[3] = v25;
    v41 = _Block_copy(aBlock);
    swift_errorRetain(v24);
    swift_retain(v40);
    static DispatchQoS.unspecified.getter(v37);
    v58 = _swiftEmptyArrayStorage;
    v42 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v43 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v44 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    v45 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v43, v44, v56, v42);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v15, v41);
    _Block_release(v41);
    swift_errorRelease(v24);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v45);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v50);
    swift_release(v60);
  }
  else
  {
    sub_100004934((uint64_t)v23, (uint64_t *)&unk_10028CD50);
    dispatch_group_leave(a4);
  }
}

void sub_1000386A0(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  swift_beginAccess(a1 + 16, v13, 33, 0);
  swift_errorRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_10001F710(a2, a4, a5, isUniquelyReferenced_nonNull_native);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  swift_bridgeObjectRelease(v11);
  swift_endAccess(v13);
  dispatch_group_leave(a3);
}

uint64_t sub_100038750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v27 = a1;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject(&unk_100260970, 48, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  aBlock[4] = sub_10003DC1C;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100260988;
  v19 = _Block_copy(aBlock);
  swift_retain(a2);
  v20 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v23 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v9, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v12, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release(v30);
}

void sub_100038950(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  void (*v34)(_QWORD);
  uint64_t v35[3];
  _BYTE v36[80];
  uint64_t v37;
  void *v38;
  _BYTE v39[32];

  v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v39, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    v6 = v5;
    v37 = -4408;
    v7 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v7, v36);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v9;
    swift_beginAccess(v4, v35, 0, 0);
    v10 = *v4;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v10;
    swift_bridgeObjectRetain(v10);
    v11 = sub_100015894(inited);
    v12 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v11, v6, v12);
    v13 = v38;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8A08);
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v34 = a2;
      v18 = swift_slowAlloc(22, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      v20 = swift_slowAlloc(32, -1);
      v38 = (void *)v20;
      *(_DWORD *)v18 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v22 = qword_10028C7A0;
      v21 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v37 = sub_1001DEF4C(v22, v21, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v18 + 12) = 2112;
      v23 = _convertErrorToNSError(_:)(v15);
      v37 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *v19 = v23;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - failed to delete all custodianship records from cloud store: %@", (uint8_t *)v18, 0x16u);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v19, 1, v24);
      swift_slowDealloc(v19, -1, -1);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      a2 = v34;
    }
    else
    {

    }
    v33 = v15;
    a2(v15);

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A8A08);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v35[0] = v30;
      *(_DWORD *)v29 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v31 = qword_10028C7A0;
      v32 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v38 = (void *)sub_1001DEF4C(v31, v32, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - custodianship records deleted successfully from cloud store.", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    a2(0);
  }
}

uint64_t sub_100038E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v35 - v11;
  v13 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a2 + 16))
    return 1;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
  {
    v17 = a2;
    v39 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v18 = *(_QWORD *)(v5 + 72);
    v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v41 = a2 + 56;
    v42 = v18;
    v35 = a1;
    v20 = swift_bridgeObjectRetain(a1);
    v21 = 0;
    v37 = v16;
    do
    {
      v19(v16, v39 + v42 * v21, v4, v20);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
      v23 = 1;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v16, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4) == 1)
        goto LABEL_14;
      v40 = v21;
      v36 = v22;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v16, v4);
      if (*(_QWORD *)(v17 + 16))
      {
        v24 = *(_QWORD *)(v17 + 40);
        v25 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v26 = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v4, v25);
        v27 = -1 << *(_BYTE *)(v17 + 32);
        v28 = v26 & ~v27;
        if (((*(_QWORD *)(v41 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) != 0)
        {
          v29 = ~v27;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v19)(v9, *(_QWORD *)(v17 + 48) + v28 * v42, v4);
            v30 = sub_100005150(&qword_10028CC98, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v31 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v12, v4, v30);
            v32 = *(void (**)(char *, uint64_t))(v5 + 8);
            v32(v9, v4);
            if ((v31 & 1) != 0)
              break;
            v28 = (v28 + 1) & v29;
            if (((*(_QWORD *)(v41 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
              goto LABEL_4;
          }
          v32(v12, v4);
          v23 = 0;
LABEL_14:
          a1 = v35;
          goto LABEL_17;
        }
      }
LABEL_4:
      v21 = v40 + 1;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      v16 = v37;
    }
    while (v21 != v38);
    a1 = v35;
    v33 = v36;
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56);
    v20 = swift_bridgeObjectRetain(a1);
  }
  v23 = 1;
  v33(v16, 1, 1, v4, v20);
LABEL_17:
  swift_bridgeObjectRelease(a1);
  return v23;
}

uint64_t sub_100039114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (**v27)(_QWORD, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  unsigned __int8 v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  id v61;
  __n128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  BOOL v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  id v148;
  char *v149;
  void (**v150)(_QWORD, uint64_t);
  id v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint8_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;

  v157 = a7;
  v158 = a8;
  v155 = (uint8_t *)a6;
  v156 = a5;
  v154 = a4;
  v136 = a3;
  v135 = a2;
  v138 = a1;
  v153 = a13;
  v159 = a10;
  v160 = a15;
  v151 = a12;
  v141 = type metadata accessor for URL(0);
  v139 = *(_QWORD *)(v141 - 8);
  v18 = __chkstk_darwin(v141, v17);
  v137 = (char *)&v132 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v140 = (char *)&v132 - v21;
  v134 = sub_1000080B4(&qword_10028C448);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134, v22);
  v132 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v24);
  v142 = (char *)&v132 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_10028FA50);
  v150 = *(void (***)(_QWORD, uint64_t))(v26 - 8);
  v27 = v150;
  __chkstk_darwin(v26, v28);
  v30 = (char *)&v132 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = v30;
  v31 = (_QWORD *)swift_allocObject(&unk_100260600, 88, 7);
  v31[2] = a7;
  v31[3] = a8;
  v146 = a9;
  v32 = v159;
  v31[4] = a9;
  v31[5] = v32;
  v31[6] = a11;
  v31[7] = a12;
  v33 = v153;
  v31[8] = v153;
  v31[9] = a14;
  v145 = a14;
  v34 = v160;
  v31[10] = v160;
  v35 = (_QWORD *)swift_allocObject(&unk_100260628, 48, 7);
  v37 = (uint64_t)v155;
  v36 = v156;
  v35[2] = v156;
  v35[3] = sub_100039F0C;
  v35[4] = v31;
  v35[5] = v37;
  v152 = v35;
  ((void (*)(char *, uint64_t, uint64_t))v27[2])(v30, v154 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__accountStore, v26);
  v147 = a11;
  v38 = a11;
  swift_retain_n(v157, 2);
  swift_retain_n(v158, 2);
  swift_bridgeObjectRetain_n(v32, 2);
  v39 = v151;
  swift_retain_n(v33, 2);
  swift_retain_n(v34, 2);
  v40 = v38;
  swift_bridgeObjectRetain(v36);
  v151 = v31;
  swift_retain(v31);
  swift_retain(v37);
  v41 = v39;
  v42 = v26;
  v43 = v26;
  v44 = v149;
  Dependency.wrappedValue.getter(&v162, v43);
  ((void (**)(char *, uint64_t))v150)[1](v44, v42);
  v45 = objc_msgSend(*(id *)(*sub_10000732C(&v162, v163) + 16), "aa_primaryAppleAccount");

  sub_100006F58(&v162);
  if (!v45)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_100005288(v67, (uint64_t)qword_1002A8A08);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter(v69);
    v71 = os_log_type_enabled(v69, v70);
    v72 = v159;
    v73 = v40;
    v148 = v41;
    if (v71)
    {
      v150 = (void (**)(_QWORD, uint64_t))v40;
      v74 = v33;
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v162 = (void *)v76;
      *(_DWORD *)v75 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v77 = qword_10028C7A0;
      v78 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v161 = sub_1001DEF4C(v77, v78, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
      swift_bridgeObjectRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s - not logged in to AppleAccount, unable to repair keys", v75, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      v41 = v148;
      v73 = v150;
    }
    else
    {

      v74 = v33;
    }
    type metadata accessor for AACustodianError(0);
    v94 = v93;
    v161 = -7002;
    v95 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v96 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v162, &v161, v95, v94, v96);
    v97 = v162;
    v98 = v157;
    swift_retain(v157);
    v99 = v158;
    swift_retain(v158);
    v100 = v72;
    swift_bridgeObjectRetain(v72);
    v101 = v41;
    swift_retain(v74);
    v102 = v160;
    swift_retain(v160);
    v103 = v73;
    v104 = v73;
    v105 = v156;
    sub_100083F40((uint64_t)v97, v156, (uint64_t)v155, v98, v99, v146, v100, v147, v101, v74, v145, v102);
    swift_release(v151);
    swift_bridgeObjectRelease(v105);
    swift_release(v152);

    swift_release_n(v98, 2);
    swift_release_n(v99, 2);
    v106 = v100;
    goto LABEL_25;
  }
  v46 = v154;
  v47 = v143;
  v48 = v142;
  v49 = v144;
  (*(void (**)(char *, uint64_t, uint64_t))(v143 + 16))(v142, v154 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__cdpController, v144);
  Dependency.wrappedValue.getter(&v162, v49);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  v50 = *(void **)(*sub_10000732C(&v162, v163) + 24);
  v161 = 0;
  v51 = objc_msgSend(v50, "isManateeAvailable:", &v161);
  v52 = v161;
  if ((v51 & 1) == 0)
  {
    v79 = (id)v161;
    v80 = _convertNSErrorToError(_:)(v52);

    swift_willThrow(v81);
    swift_errorRelease(v80);
    sub_100006F58(&v162);
    v82 = v159;
    v83 = v40;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v84 = type metadata accessor for Logger(0);
    v85 = sub_100005288(v84, (uint64_t)qword_1002A8A08);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter(v86);
    v88 = os_log_type_enabled(v86, v87);
    v148 = v41;
    if (v88)
    {
      v150 = (void (**)(_QWORD, uint64_t))v40;
      v74 = v33;
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      v162 = (void *)v90;
      *(_DWORD *)v89 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v91 = qword_10028C7A0;
      v92 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v161 = sub_1001DEF4C(v91, v92, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
      swift_bridgeObjectRelease(v92);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "%s - no manatee available, stopping custodian key repair.", v89, 0xCu);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);

      v41 = v148;
      v83 = v150;
    }
    else
    {

      v74 = v33;
    }
    type metadata accessor for AACustodianError(0);
    v122 = v121;
    v161 = -7024;
    v123 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v124 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v162, &v161, v123, v122, v124);
    v125 = v162;
    v126 = v157;
    swift_retain(v157);
    v127 = v158;
    swift_retain(v158);
    v128 = v82;
    swift_bridgeObjectRetain(v82);
    v101 = v41;
    swift_retain(v74);
    v102 = v160;
    swift_retain(v160);
    v103 = v83;
    v104 = v83;
    v129 = v156;
    sub_100083F40((uint64_t)v125, v156, (uint64_t)v155, v126, v127, v146, v128, v147, v101, v74, v145, v102);
    swift_release(v151);
    swift_bridgeObjectRelease(v129);
    swift_release(v152);

    v100 = v128;
    swift_release_n(v126, 2);
    swift_release_n(v127, 2);
    v106 = v128;
LABEL_25:
    swift_bridgeObjectRelease(v106);

    swift_release(v74);
    v130 = v102;
    v41 = v148;
    swift_release(v130);
    goto LABEL_26;
  }
  v53 = (id)v161;
  sub_100006F58(&v162);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v150 = (void (**)(_QWORD, uint64_t))v40;
  v54 = type metadata accessor for Logger(0);
  sub_100005288(v54, (uint64_t)qword_1002A89D8);
  v55 = v138;
  v56 = swift_bridgeObjectRetain_n(v138, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v162 = (void *)v60;
    *(_DWORD *)v59 = 136315138;
    v155 = v59 + 4;
    type metadata accessor for UUID(0);
    v61 = v41;
    v62 = swift_bridgeObjectRetain(v55);
    v63 = Array.description.getter(v62);
    v65 = v64;
    swift_bridgeObjectRelease(v55);
    v66 = v63;
    v41 = v61;
    v161 = sub_1001DEF4C(v66, v65, (uint64_t *)&v162);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162);
    swift_bridgeObjectRelease_n(v55, 2);
    swift_bridgeObjectRelease(v65);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Starting Custodian Repair for UUIDs: %s", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v55, 2);
  }
  v107 = (_QWORD *)swift_allocObject(&unk_100260650, 64, 7);
  v107[2] = v46;
  v107[3] = v55;
  v108 = v136;
  v107[4] = v135;
  v107[5] = v108;
  v109 = v152;
  v107[6] = sub_100039F74;
  v107[7] = v109;
  v110 = v133;
  v111 = v132;
  v112 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v46 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__custodianStorage, v134);
  swift_bridgeObjectRetain(v108);
  swift_retain(v109);
  swift_bridgeObjectRetain(v55);
  swift_retain(v46);
  Dependency.wrappedValue.getter(&v162, v112);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v112);
  v113 = sub_10000732C(&v162, v163);
  v114 = (_QWORD *)swift_allocObject(&unk_100260678, 40, 7);
  v114[2] = v55;
  v114[3] = sub_100039FBC;
  v114[4] = v107;
  v115 = sub_10000732C((_QWORD *)(*v113 + 16), *(_QWORD *)(*v113 + 40));
  type metadata accessor for LocalCache();
  swift_bridgeObjectRetain(v55);
  swift_retain(v107);
  v116 = v137;
  sub_10000840C();
  v117 = (uint64_t)v140;
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v118 = *(void (**)(char *, uint64_t))(v139 + 8);
  v119 = v116;
  v120 = v141;
  v118(v119, v141);
  sub_10000732C((_QWORD *)(*v115 + 16), *(_QWORD *)(*v115 + 40));
  sub_10009D320(v117, (uint64_t)sub_100039FDC, (uint64_t)v114);
  v118((char *)v117, v120);
  swift_release(v114);
  sub_100006F58(&v162);
  swift_release(v158);
  swift_release(v157);
  swift_release(v151);
  swift_bridgeObjectRelease(v156);
  swift_release(v109);
  swift_release(v107);
  v104 = v150;
  v100 = v159;
  v74 = v153;
LABEL_26:
  swift_release(v160);
  swift_release(v74);

  return swift_bridgeObjectRelease(v100);
}

uint64_t sub_100039EB8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100039F0C()
{
  uint64_t v0;

  return sub_100081BD8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100039F40()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100039F74(uint64_t a1)
{
  uint64_t v1;

  return sub_100082208(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100039F80()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100039FBC(uint64_t a1)
{
  uint64_t v1;

  return sub_10002FEF4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100039FCC()
{
  return sub_10003DBE0((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

void sub_100039FDC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10002FF64(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

_QWORD *sub_100039FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v24 = a2;
  v6 = (int *)type metadata accessor for KeyRepairContext(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6, v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v20[1] = v3;
    v25 = _swiftEmptyArrayStorage;
    sub_1001D4BD0(0, v11, 0);
    v12 = v25;
    v13 = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v22 = *(_QWORD *)(v14 + 72);
    v23 = v13;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    do
    {
      v21(v10, v15, v23);
      v10[v6[5]] = 1;
      v10[v6[6]] = 0;
      v16 = &v10[v6[7]];
      *(_QWORD *)v16 = v24;
      *((_QWORD *)v16 + 1) = a3;
      v25 = v12;
      v18 = v12[2];
      v17 = v12[3];
      swift_bridgeObjectRetain(a3);
      if (v18 >= v17 >> 1)
      {
        sub_1001D4BD0(v17 > 1, v18 + 1, 1);
        v12 = v25;
      }
      v12[2] = v18 + 1;
      sub_10003B730((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, type metadata accessor for KeyRepairContext);
      v15 += v22;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_10003A190(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10003A1A8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10003A310(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecoveryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000332D4(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void ***)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003A384()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v4 + v5) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = v13 + v0;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v16 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 8));
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10003A4F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecoveryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003A944(a1, v1 + v4, *(unsigned __int8 *)(v1 + v5), *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(void (**)(uint64_t))(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10003A568(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[3];
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v27 = v9;
      *(_DWORD *)v8 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v10 = qword_10028C7A0;
      v11 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v26 = sub_1001DEF4C(v10, v11, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v11);
      *(_WORD *)(v8 + 12) = 2080;
      swift_getErrorValue(a1, v25, v24);
      v12 = Error.localizedDescription.getter(v24[1], v24[2]);
      v14 = v13;
      v26 = sub_1001DEF4C(v12, v13, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - failed to send CKShare message: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v27 = v20;
      *(_DWORD *)v19 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v21 = qword_10028C7A0;
      v22 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v26 = sub_1001DEF4C(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - CKShare message sent.", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_10003A944(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *object;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  __n128 v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  NSObject *v81;
  __n128 v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  NSString v107;
  id v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  NSObject *v112;
  __n128 v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t);
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[2];

  v141 = a8;
  v142 = a2;
  v136 = a5;
  v137 = a6;
  v132 = a4;
  v139 = a3;
  v10 = sub_1000080B4(&qword_10028CCC8);
  v133 = *(_QWORD *)(v10 - 8);
  v134 = v10;
  __chkstk_darwin(v10, v11);
  v131 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for ShareMessageContext(0);
  v14 = __chkstk_darwin(v135, v13);
  v16 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v125 - v18;
  v140 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v21 = __chkstk_darwin(v140, v20);
  v23 = (char *)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v125 - v25;
  v27 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v125 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v31, v32);
  v34 = (uint64_t *)((char *)&v125 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v34, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v34, v31) == 1)
  {
    v35 = *v34;
    v143 = 0;
    v144 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    v36 = v144;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v38 = qword_10028C7A0;
    v37 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    swift_bridgeObjectRelease(v36);
    v143 = v38;
    v144 = v37;
    v39._object = (void *)0x8000000100209DB0;
    v39._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v39);
    v40 = type metadata accessor for UUID(0);
    v41 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v40, v41);
    object = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(object);
    v147 = 0x7272652068746977;
    v148[0] = 0xEB0000000020726FLL;
    v44 = (void *)_convertErrorToNSError(_:)(v35);
    v45 = objc_msgSend(v44, "description");
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v49._countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);

    swift_bridgeObjectRelease(v48);
    v50._countAndFlagsBits = v147;
    v51 = v148[0];
    v50._object = (void *)v148[0];
    String.append(_:)(v50);
    swift_bridgeObjectRelease(v51);
    v52 = a7;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v53 = type metadata accessor for Logger(0);
    sub_100005288(v53, (uint64_t)qword_1002A8A08);
    v55 = v143;
    v54 = v144;
    swift_bridgeObjectRetain(v144);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(12, -1);
      v142 = v35;
      v60 = (uint8_t *)v59;
      v61 = swift_slowAlloc(32, -1);
      v147 = v61;
      *(_DWORD *)v60 = 136315138;
      swift_bridgeObjectRetain(v54);
      v146 = sub_1001DEF4C(v55, v54, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147);
      swift_bridgeObjectRelease_n(v54, 3);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      v62 = v60;
      v35 = v142;
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v54, 2);
    }
    swift_errorRetain(v35);
    v52(v35);
    swift_errorRelease(v35);
    return swift_errorRelease(v35);
  }
  else
  {
    v130 = v19;
    sub_10003B730((uint64_t)v34, (uint64_t)v30, type metadata accessor for CloudShareInfo);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v128 = type metadata accessor for Logger(0);
    v63 = sub_100005288(v128, (uint64_t)qword_1002A8A08);
    v64 = sub_100027FE8(v142, (uint64_t)v26, type metadata accessor for CustodianRecoveryInfoRecord);
    v65 = Logger.logObject.getter(v64);
    v67 = static os_log_type_t.default.getter(v66);
    v68 = os_log_type_enabled(v65, v67);
    v129 = a7;
    v138 = v30;
    if (v68)
    {
      v127 = v63;
      v69 = swift_slowAlloc(28, -1);
      v126 = swift_slowAlloc(64, -1);
      v143 = v126;
      *(_DWORD *)v69 = 136315650;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v70 = qword_10028C7A0;
      v71 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v147 = sub_1001DEF4C(v70, v71, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease(v71);
      *(_WORD *)(v69 + 12) = 2080;
      v72 = type metadata accessor for UUID(0);
      v73 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v74 = dispatch thunk of CustomStringConvertible.description.getter(v72, v73);
      v76 = v75;
      v147 = sub_1001DEF4C(v74, v75, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease(v76);
      sub_100028388((uint64_t)v26, type metadata accessor for CustodianRecoveryInfoRecord);
      *(_WORD *)(v69 + 22) = 1024;
      LODWORD(v147) = v139 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, (char *)&v147 + 4);
      _os_log_impl((void *)&_mh_execute_header, v65, v67, "%s - created CKShare for custodianship: %s willFinalize: %{BOOL}d", (uint8_t *)v69, 0x1Cu);
      v77 = v126;
      swift_arrayDestroy(v126, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      v78 = v141;
    }
    else
    {
      sub_100028388((uint64_t)v26, type metadata accessor for CustodianRecoveryInfoRecord);

      v78 = v141;
    }
    v80 = sub_100027FE8(v142, (uint64_t)v23, type metadata accessor for CustodianRecoveryInfoRecord);
    v81 = Logger.logObject.getter(v80);
    v83 = static os_log_type_t.default.getter(v82);
    v84 = os_log_type_enabled(v81, v83);
    v85 = (uint64_t)v130;
    if (v84)
    {
      v86 = swift_slowAlloc(22, -1);
      v127 = swift_slowAlloc(64, -1);
      v143 = v127;
      *(_DWORD *)v86 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v87 = qword_10028C7A0;
      v88 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v147 = sub_1001DEF4C(v87, v88, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease(v88);
      *(_WORD *)(v86 + 12) = 2080;
      v89 = v140;
      v90 = type metadata accessor for UUID(0);
      v91 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v92 = dispatch thunk of CustomStringConvertible.description.getter(v90, v91);
      v94 = v93;
      v147 = sub_1001DEF4C(v92, v93, &v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
      swift_bridgeObjectRelease(v94);
      sub_100028388((uint64_t)v23, type metadata accessor for CustodianRecoveryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v81, v83, "%s - sending new share to custodian %s", (uint8_t *)v86, 0x16u);
      v95 = v127;
      swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v78 = v141;
      v85 = (uint64_t)v130;
    }
    else
    {
      sub_100028388((uint64_t)v23, type metadata accessor for CustodianRecoveryInfoRecord);

      v89 = v140;
    }
    v96 = v142 + *(int *)(v89 + 20);
    v97 = type metadata accessor for UUID(0);
    v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 16);
    v98(v85, v96, v97);
    v99 = v135;
    sub_100027FE8((uint64_t)v138, v85 + *(int *)(v135 + 20), type metadata accessor for CloudShareInfo);
    *(_BYTE *)(v85 + *(int *)(v99 + 24)) = v139 & 1;
    v100 = v133;
    v101 = v131;
    v102 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v131, v132 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__messenger, v134);
    Dependency.wrappedValue.getter(&v143, v102);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v102);
    sub_10000732C(&v143, v145);
    sub_100027FE8(v85, (uint64_t)v16, type metadata accessor for ShareMessageContext);
    v103 = type metadata accessor for ShareMessage(0);
    v104 = swift_allocObject(v103, *(unsigned int *)(v103 + 48), *(unsigned __int16 *)(v103 + 52));
    *(_BYTE *)(v104 + 16) = 2;
    v98(v104 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, (uint64_t)v16, v97);
    sub_100027FE8((uint64_t)&v16[*(int *)(v99 + 20)], v104 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, type metadata accessor for CloudShareInfo);
    LOBYTE(v97) = v16[*(int *)(v99 + 24)];
    swift_retain(v78);
    sub_100028388((uint64_t)v16, type metadata accessor for ShareMessageContext);
    *(_BYTE *)(v104 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = v97;
    v105 = objc_allocWithZone((Class)AAMessagingDestination);
    v106 = v137;
    swift_bridgeObjectRetain(v137);
    v107 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v106);
    v108 = objc_msgSend(v105, "initWithHandle:", v107);

    if (v108)
    {
      v109 = qword_10028ADB0;
      v110 = v108;
      if (v109 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v111 = sub_100005288(v128, (uint64_t)qword_1002A8990);
      v112 = Logger.logObject.getter(v111);
      v114 = static os_log_type_t.default.getter(v113);
      if (os_log_type_enabled(v112, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v112, v114, "Destination is valid!", v115, 2u);
        swift_slowDealloc(v115, -1, -1);
      }

      sub_1001B2638(v104, v110);
      sub_10003A568(0, v129);
      swift_release(v78);
      swift_release(v104);

    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v116 = sub_100005288(v128, (uint64_t)qword_1002A89D8);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.error.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v119 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "Unable to generate destination from handle.", v119, 2u);
        swift_slowDealloc(v119, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v121 = v120;
      v146 = -7004;
      v122 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v123 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v147, &v146, v122, v121, v123);
      v124 = (void *)v147;
      sub_10003A568(v147, v129);
      swift_release(v78);
      swift_release(v104);

    }
    sub_100028388(v85, type metadata accessor for ShareMessageContext);
    sub_100028388((uint64_t)v138, type metadata accessor for CloudShareInfo);
    return sub_100006F58(&v143);
  }
}

uint64_t sub_10003B704()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003B728(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E9D98(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10003B730(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for KeyRepairContext(uint64_t a1)
{
  return sub_100004C78(a1, qword_10028CDC0, (uint64_t)&nominal type descriptor for KeyRepairContext);
}

uint64_t sub_10003B788()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003B7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 28) + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10003B868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000321E4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), v1 + v4, *(void (**)(uint64_t))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_10003B8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1001BCDC0(a1, a2, a3, a4, *(void (**)(NSObject **))(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_10003B8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  int *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v34 = *(unsigned __int8 *)(v2 + 80);
  v32 = *(_QWORD *)(v2 + 64);
  v35 = type metadata accessor for KeyRepairContext(0);
  v3 = *(_QWORD *)(v35 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v31 = *(_QWORD *)(v3 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v33 = (v34 + 40) & ~v34;
  v5 = v0 + v33;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v33, v6);
  v9 = (int *)type metadata accessor for CustodianRecord(0);
  v8(v0 + v33 + v9[5], v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[8] + 8));
  v10 = (uint64_t *)(v0 + v33 + v9[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v5 + v9[11]), *(_QWORD *)(v5 + v9[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[14] + 8));
  v12 = v5 + v9[16];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v13(v12, 1, v6))
    v8(v12, v6);
  v14 = v5 + *(int *)(v1 + 20);
  v8(v14, v6);
  v15 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v8(v14 + v15[5], v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  sub_10000F494(*(_QWORD *)(v14 + v15[7]), *(_QWORD *)(v14 + v15[7] + 8));
  v16 = (uint64_t *)(v14 + v15[8]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10000F494(*v16, v17);
  sub_10000F494(*(_QWORD *)(v14 + v15[9]), *(_QWORD *)(v14 + v15[9] + 8));
  v18 = v14 + v15[11];
  if (!v13(v18, 1, v6))
    v8(v18, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[12] + 8));
  v19 = v5 + *(int *)(v1 + 24);
  v8(v19, v6);
  v20 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v8(v19 + v20[5], v6);
  v21 = v19 + v20[6];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = (uint64_t *)(v19 + v20[7]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10000F494(*v23, v24);
  v25 = (v32 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + v4 + 8) & ~v4;
  v27 = v4;
  v28 = (v31 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = v34 | v27 | 7;
  sub_10000F494(*(_QWORD *)(v19 + v20[8]), *(_QWORD *)(v19 + v20[8] + 8));

  v8(v0 + v26, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v26 + *(int *)(v35 + 28) + 8));

  return swift_deallocObject(v0, ((v28 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v29);
}

void sub_10003BC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_100033D0C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *(void **)(v1 + v5), v1 + v7, *(void **)(v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10003BCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  int *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v34 = *(unsigned __int8 *)(v2 + 80);
  v32 = *(_QWORD *)(v2 + 64);
  v35 = type metadata accessor for KeyRepairContext(0);
  v3 = *(_QWORD *)(v35 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v31 = *(_QWORD *)(v3 + 64);
  v33 = (v34 + 16) & ~v34;
  v5 = v0 + v33;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v33, v6);
  v9 = (int *)type metadata accessor for CustodianRecord(0);
  v8(v0 + v33 + v9[5], v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v33 + v9[8] + 8));
  v10 = (uint64_t *)(v0 + v33 + v9[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v5 + v9[11]), *(_QWORD *)(v5 + v9[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + v9[14] + 8));
  v12 = v5 + v9[16];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v13(v12, 1, v6))
    v8(v12, v6);
  v14 = v5 + *(int *)(v1 + 20);
  v8(v14, v6);
  v15 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v8(v14 + v15[5], v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[6] + 8));
  sub_10000F494(*(_QWORD *)(v14 + v15[7]), *(_QWORD *)(v14 + v15[7] + 8));
  v16 = (uint64_t *)(v14 + v15[8]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10000F494(*v16, v17);
  sub_10000F494(*(_QWORD *)(v14 + v15[9]), *(_QWORD *)(v14 + v15[9] + 8));
  v18 = v14 + v15[11];
  if (!v13(v18, 1, v6))
    v8(v18, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v14 + v15[12] + 8));
  v19 = v5 + *(int *)(v1 + 24);
  v8(v19, v6);
  v20 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v8(v19 + v20[5], v6);
  v21 = v19 + v20[6];
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = (uint64_t *)(v19 + v20[7]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10000F494(*v23, v24);
  v25 = (v32 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = v4;
  v28 = (v4 + v26 + 8) & ~v4;
  v29 = v34 | v27 | 7;
  sub_10000F494(*(_QWORD *)(v19 + v20[8]), *(_QWORD *)(v19 + v20[8] + 8));
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  swift_release(*(_QWORD *)(v0 + v26));
  v8(v0 + v28, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v28 + *(int *)(v35 + 28) + 8));
  return swift_deallocObject(v0, ((v31 + v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v29);
}

uint64_t sub_10003C008(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = type metadata accessor for KeyRepairContext(0);
  return sub_100035270(a1, a2, v2 + v6, *(void (**)(_QWORD *))(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), v2+ ((*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80) + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80)));
}

uint64_t sub_10003C0B4(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  _BOOL4 v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD *);
  uint64_t v74;
  void (*v76)(_QWORD *);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD *);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95[8];
  uint64_t v96;
  uint64_t v97;
  char v98[8];
  uint64_t v99;
  uint64_t v100[4];
  _QWORD v101[3];
  char v102[8];
  _QWORD v103[3];
  char v104[8];
  _QWORD v105[3];
  char v106[8];
  uint64_t v107;
  char v108[8];

  v89 = a4;
  v7 = sub_1000080B4(&qword_10028CCE0);
  v90 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v88 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v91 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v14, v15);
  v17 = (_QWORD **)((char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
  {
    type metadata accessor for AACustodianError(0);
    v30 = v29;
    v107 = -7025;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v99, &v107, v31, v30, v32);
    *v17 = v99;
    swift_storeEnumTagMultiPayload(v17, v14, 1);
    a2(v17);
    return sub_100004934((uint64_t)v17, (uint64_t *)&unk_10028CCF0);
  }
  v84 = v7;
  v85 = v11;
  v86 = v10;
  swift_getErrorValue(a1, v106, v105);
  v18 = v105[1];
  v19 = v105[2];
  swift_errorRetain(a1);
  if (qword_10028AD88 != -1)
    swift_once(&qword_10028AD88, sub_10002FC20);
  v87 = a2;
  v94 = sub_10002F768(qword_1002A8970, v18, v19);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v93 = v21;
  v92 = a3;
  v83 = v14;
  if (v24)
  {
    v25 = swift_slowAlloc(18, -1);
    v26 = swift_slowAlloc(32, -1);
    v99 = v26;
    *(_DWORD *)v25 = 136315394;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v27 = qword_10028C7A0;
    v28 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v107 = sub_1001DEF4C(v27, v28, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v107) = v94 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, (char *)&v107 + 4);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - isMissingCRK: %{BOOL}d", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    a3 = v92;
  }
  else
  {

  }
  swift_getErrorValue(a1, v104, v103);
  v33 = v103[1];
  v34 = v103[2];
  if (qword_10028AD90 != -1)
    swift_once(&qword_10028AD90, sub_10002FC48);
  v35 = sub_10002F768(qword_1002A8978, v33, v34);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v82 = v17;
    v38 = swift_slowAlloc(18, -1);
    v39 = swift_slowAlloc(32, -1);
    v99 = v39;
    *(_DWORD *)v38 = 136315394;
    if (qword_10028ADA8 != -1)
      swift_once(&qword_10028ADA8, sub_10002FEAC);
    v40 = qword_10028C7A0;
    v41 = *(_QWORD *)algn_10028C7A8;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
    v107 = sub_1001DEF4C(v40, v41, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v38 + 12) = 1024;
    LODWORD(v107) = v35 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, (char *)&v107 + 4);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - isUntrustedCRK: %{BOOL}d", (uint8_t *)v38, 0x12u);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    a3 = v92;
    v17 = v82;
  }
  else
  {

  }
  swift_getErrorValue(a1, v102, v101);
  v42 = v101[1];
  v43 = v101[2];
  if (qword_10028AD98 != -1)
    swift_once(&qword_10028AD98, sub_10002FC70);
  v44 = sub_10002F768(qword_1002A8980, v42, v43);
  if ((v44 & 1) != 0)
  {
    swift_getErrorValue(a1, v98, v95);
    v45 = v96;
    v46 = v97;
    if (qword_10028ADA0 != -1)
      swift_once(&qword_10028ADA0, sub_10002FC98);
    v47 = sub_10002F93C(qword_1002A8988, v45, v46);
    v48 = v47;
    v49 = Logger.logObject.getter(v47);
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      LODWORD(v82) = v35;
      v51 = swift_slowAlloc(18, -1);
      v35 = swift_slowAlloc(32, -1);
      v99 = v35;
      *(_DWORD *)v51 = 136315394;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v53 = qword_10028C7A0;
      v52 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v107 = sub_1001DEF4C(v53, v52, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v51 + 12) = 1024;
      LODWORD(v107) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, (char *)&v107 + 4);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - isError31WithUnderlyingError9: %{BOOL}d", (uint8_t *)v51, 0x12u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      a3 = v92;
      LODWORD(v35) = (_DWORD)v82;
    }
    else
    {

    }
    if (((v94 | v35 | v48) & 1) == 0)
    {
LABEL_34:
      swift_errorRetain(a1);
      v59 = swift_errorRetain(a1);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v62 = 138412290;
        swift_errorRetain(a1);
        v64 = _swift_stdlib_bridgeErrorToNSError(a1);
        v99 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        *v63 = v64;
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Preflight error other than repairable errors: %@", v62, 0xCu);
        v65 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v63, 1, v65);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }
      v73 = v87;
      v74 = v83;

      *v17 = a1;
      swift_storeEnumTagMultiPayload(v17, v74, 1);
      swift_errorRetain(a1);
      v73(v17);
      swift_errorRelease(a1);
      return sub_100004934((uint64_t)v17, (uint64_t *)&unk_10028CCF0);
    }
  }
  else
  {
    v54 = Logger.logObject.getter(v44);
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      LODWORD(v82) = v35;
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v99 = v35;
      *(_DWORD *)v56 = 136315138;
      if (qword_10028ADA8 != -1)
        swift_once(&qword_10028ADA8, sub_10002FEAC);
      v57 = qword_10028C7A0;
      v58 = *(_QWORD *)algn_10028C7A8;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028C7A8);
      v107 = sub_1001DEF4C(v57, v58, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v58);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s - isError31WithUnderlyingError9: false", v56, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v56, -1, -1);

      LODWORD(v35) = (_DWORD)v82;
    }
    else
    {

    }
    if (((v94 | v35) & 1) == 0)
      goto LABEL_34;
  }
  swift_errorRetain(a1);
  v66 = swift_errorRetain(a1);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v69 = 138412290;
    swift_errorRetain(a1);
    v71 = _swift_stdlib_bridgeErrorToNSError(a1);
    v99 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    *v70 = v71;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Recreating decoupled CRK due to preflight error: %@", v69, 0xCu);
    v72 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v70, 1, v72);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v69, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  v76 = v87;

  v77 = (uint64_t)v91;
  UUID.init()(v78);
  v79 = v90;
  v80 = v88;
  v81 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v88, v89 + OBJC_IVAR____TtC13appleaccountd18CustodianKeyRepair__securityController, v84);
  Dependency.wrappedValue.getter(&v99, v81);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
  sub_10000732C(&v99, v100[2]);
  sub_10018A2E8(v77, v76, a3);
  swift_errorRelease(a1);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v77, v86);
  return sub_100006F58(&v99);
}

uint64_t sub_10003CD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v47 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v47 + 48) & ~v47;
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for CustodianshipRecords(0);
  v6 = *(_QWORD *)(v5 - 8);
  v49 = *(unsigned __int8 *)(v6 + 80);
  v50 = v5;
  v7 = (v3 + v4 + v49) & ~v49;
  v8 = *(_QWORD *)(v6 + 64);
  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  v9 = v0 + v3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v1 + 28) + 8));
  v13 = v0 + v7;
  v12(v0 + v7, v10);
  v14 = (int *)type metadata accessor for CustodianRecord(0);
  v12(v0 + v7 + v14[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + v14[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + v14[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + v14[8] + 8));
  v15 = (uint64_t *)(v0 + v7 + v14[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[11]), *(_QWORD *)(v13 + v14[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[14] + 8));
  v17 = v13 + v14[16];
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v48(v17, 1, v10))
    v12(v17, v10);
  v46 = v8;
  v18 = v8 + v49;
  v19 = v13 + *(int *)(v50 + 20);
  v12(v19, v10);
  v20 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v12(v19 + v20[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[6] + 8));
  sub_10000F494(*(_QWORD *)(v19 + v20[7]), *(_QWORD *)(v19 + v20[7] + 8));
  v21 = (uint64_t *)(v19 + v20[8]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10000F494(*v21, v22);
  v23 = v18 + v7;
  sub_10000F494(*(_QWORD *)(v19 + v20[9]), *(_QWORD *)(v19 + v20[9] + 8));
  v24 = v19 + v20[11];
  if (!v48(v24, 1, v10))
    v12(v24, v10);
  v25 = v23 & ~v49;
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[12] + 8));
  v26 = v13 + *(int *)(v50 + 24);
  v12(v26, v10);
  v27 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v12(v26 + v27[5], v10);
  v28 = v26 + v27[6];
  v29 = type metadata accessor for Date(0);
  v44 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 8);
  v44(v28, v29);
  v30 = (uint64_t *)(v26 + v27[7]);
  v31 = v30[1];
  if (v31 >> 60 != 15)
    sub_10000F494(*v30, v31);
  sub_10000F494(*(_QWORD *)(v26 + v27[8]), *(_QWORD *)(v26 + v27[8] + 8));
  v32 = v0 + v25;
  v12(v0 + v25, v10);
  v12(v0 + v25 + v14[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v25 + v14[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v25 + v14[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v25 + v14[8] + 8));
  v33 = (uint64_t *)(v0 + v25 + v14[10]);
  v34 = v33[1];
  if (v34 >> 60 != 15)
    sub_10000F494(*v33, v34);
  sub_10000F494(*(_QWORD *)(v32 + v14[11]), *(_QWORD *)(v32 + v14[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v32 + v14[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v32 + v14[14] + 8));
  v35 = v32 + v14[16];
  if (!v48(v35, 1, v10))
    v12(v35, v10);
  v45 = v25;
  v36 = v32 + *(int *)(v50 + 20);
  v12(v36, v10);
  v12(v36 + v20[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v36 + v20[6] + 8));
  sub_10000F494(*(_QWORD *)(v36 + v20[7]), *(_QWORD *)(v36 + v20[7] + 8));
  v37 = (uint64_t *)(v36 + v20[8]);
  v38 = v37[1];
  if (v38 >> 60 != 15)
    sub_10000F494(*v37, v38);
  sub_10000F494(*(_QWORD *)(v36 + v20[9]), *(_QWORD *)(v36 + v20[9] + 8));
  v39 = v36 + v20[11];
  if (!v48(v39, 1, v10))
    v12(v39, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v36 + v20[12] + 8));
  v40 = v32 + *(int *)(v50 + 24);
  v12(v40, v10);
  v12(v40 + v27[5], v10);
  v44(v40 + v27[6], v29);
  v41 = (uint64_t *)(v40 + v27[7]);
  v42 = v41[1];
  if (v42 >> 60 != 15)
    sub_10000F494(*v41, v42);
  sub_10000F494(*(_QWORD *)(v40 + v27[8]), *(_QWORD *)(v40 + v27[8] + 8));
  return swift_deallocObject(v0, ((v46 + v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v47 | v49 | 7);
}

uint64_t sub_10003D2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  return sub_100036360(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, v1 + ((v4 + v5 + v7) & ~v7), v1 + ((*(_QWORD *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7));
}

uint64_t sub_10003D344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int (*v18)(unint64_t, uint64_t, uint64_t);
  unint64_t v19;
  int *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 24) & ~v33;
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for CustodianshipRecords(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v5 + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v31 = *(_QWORD *)(v7 + 64);
  v32 = *(unsigned __int8 *)(v7 + 80);

  v9 = v0 + v3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v1 + 28) + 8));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  v13 = v0 + v8;
  v12(v0 + v8, v10);
  v14 = (int *)type metadata accessor for CustodianRecord(0);
  v12(v0 + v8 + v14[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v14[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v14[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v14[8] + 8));
  v15 = (uint64_t *)(v0 + v8 + v14[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[11]), *(_QWORD *)(v13 + v14[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[14] + 8));
  v17 = v13 + v14[16];
  v18 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v18(v17, 1, v10))
    v12(v17, v10);
  v19 = v13 + *(int *)(v6 + 20);
  v12(v19, v10);
  v20 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v12(v19 + v20[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[6] + 8));
  sub_10000F494(*(_QWORD *)(v19 + v20[7]), *(_QWORD *)(v19 + v20[7] + 8));
  v21 = (uint64_t *)(v19 + v20[8]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10000F494(*v21, v22);
  sub_10000F494(*(_QWORD *)(v19 + v20[9]), *(_QWORD *)(v19 + v20[9] + 8));
  v23 = v19 + v20[11];
  if (!v18(v23, 1, v10))
    v12(v23, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v19 + v20[12] + 8));
  v24 = v13 + *(int *)(v6 + 24);
  v12(v24, v10);
  v25 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v12(v24 + v25[5], v10);
  v26 = v24 + v25[6];
  v27 = type metadata accessor for Date(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v26, v27);
  v28 = (uint64_t *)(v24 + v25[7]);
  v29 = v28[1];
  if (v29 >> 60 != 15)
    sub_10000F494(*v28, v29);
  sub_10000F494(*(_QWORD *)(v24 + v25[8]), *(_QWORD *)(v24 + v25[8] + 8));
  return swift_deallocObject(v0, ((v31 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v33 | v32 | 7);
}

uint64_t sub_10003D680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for CustodianshipRecords(0);
  return sub_100037584(a1, *(char **)(v1 + 16), (v1 + v4), *(_QWORD *)(v1 + v5), *(uint64_t (**)(uint64_t))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)));
}

uint64_t sub_10003D728()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003D74C(uint64_t a1)
{
  uint64_t v1;

  return sub_100037E1C(a1, *(void (**)(_QWORD))(v1 + 16));
}

uint64_t sub_10003D758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  return swift_deallocObject(v0, ((v3 + 40) & ~v3) + v25, v3 | 7);
}

uint64_t sub_10003DA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8) + 80);
  return sub_100036A3C(a1, *(void (**)(uint64_t))(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_10003DA54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10003DA7C(uint64_t a1)
{
  uint64_t v1;

  sub_100038208(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40), "%s - failed to delete custodian record from cloud store: %@", (uint64_t)&unk_100260A60, (uint64_t)sub_10003DCD0, (uint64_t)&unk_100260A78);
}

void sub_10003DAC8(uint64_t a1)
{
  uint64_t v1;

  sub_100038208(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40), "%s - failed to delete health record from cloud store: %@", (uint64_t)&unk_100260A10, (uint64_t)sub_10003DC64, (uint64_t)&unk_100260A28);
}

uint64_t sub_10003DB14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10003DB48(uint64_t a1)
{
  uint64_t v1;

  sub_100038208(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40), "%s - failed to delete recovery info record from cloud store: %@", (uint64_t)&unk_1002609C0, (uint64_t)sub_10003DC2C, (uint64_t)&unk_1002609D8);
}

uint64_t sub_10003DB90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003DBC4()
{
  return sub_10003DE7C(sub_100038750);
}

uint64_t sub_10003DBD0()
{
  return sub_10003DBE0((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10003DBE0(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

void sub_10003DC1C()
{
  uint64_t v0;

  sub_100038950(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

void sub_10003DC2C()
{
  uint64_t v0;

  sub_1000386A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000017, 0x8000000100209E20);
}

void sub_10003DC64()
{
  uint64_t v0;

  sub_1000386A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000020, 0x8000000100209E40);
}

uint64_t sub_10003DC9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10003DCD0()
{
  uint64_t v0;

  sub_1000386A0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(NSObject **)(v0 + 32), 0xD000000000000014, 0x8000000100209E70);
}

uint64_t sub_10003DD04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v1 + 28) + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10003DDC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10003086C(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003DE34()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10003DE70()
{
  return sub_10003DE7C(sub_1000314C8);
}

uint64_t sub_10003DE7C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10003DE90()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10003DEC4()
{
  uint64_t v0;

  sub_1000316DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_10003DED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  v10 = v0 + v4;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v1 + 28) + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  swift_release(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, v9 + 8, v5);
}

uint64_t sub_10003DFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000309C0(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1+ ((((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10003E02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 28) + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10003E0D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10003129C(*(_QWORD *)(v0 + 16), v0 + v2, *(uint64_t (**)(uint64_t))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10003E120()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for KeyRepairContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v1 + 28) + 8));
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10003E1E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for KeyRepairContext(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000313F4(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(uint64_t (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

_QWORD *sub_10003E238(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    v9 = a3[7];
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_10003E2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t sub_10003E328(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_10003E3A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_10003E438(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003E4A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_10003E528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E534);
}

uint64_t sub_10003E534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10003E5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E5CC);
}

uint64_t sub_10003E5CC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_10003E648(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100219CF8;
    v4[2] = &unk_100219CF8;
    v4[3] = &unk_100219D10;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10003E704(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, void (*)(char, uint64_t), _QWORD, uint64_t, uint64_t, __n128);
  __n128 v45;
  uint64_t v46;
  uint8_t *buf;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53[4];

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 128);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_10;
  v5 = sub_10010A9E0(0x736D657469, 0xE500000000000000);
  if ((v6 & 1) == 0)
    goto LABEL_10;
  sub_1000244B0(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)v53);
  v7 = sub_1000080B4(&qword_10028CEB0);
  if ((swift_dynamicCast(&v52, v53, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    goto LABEL_10;
  v8 = v52;
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
  {
    swift_bridgeObjectRelease(v52);
LABEL_10:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v25, v26))
      goto LABEL_15;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = "CFU Data did not contain any items to process or IdMS information";
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A8990);
  v12 = swift_bridgeObjectRetain_n(v8, 2);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  v48 = v10;
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = swift_slowAlloc(32, -1);
    v53[0] = v49;
    *(_DWORD *)v16 = 136315138;
    buf = v16;
    swift_bridgeObjectRetain(v8);
    sub_1000080B4(&qword_10028C088);
    v18 = Array.description.getter(v17);
    v19 = v11;
    v21 = v20;
    swift_bridgeObjectRelease(v8);
    v52 = sub_1001DEF4C(v18, v21, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    swift_bridgeObjectRelease_n(v8, 2);
    v22 = v21;
    v11 = v19;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Embargo delegate service asked to process push with items: %s", buf, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(buf, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  v29 = *(unsigned __int8 *)(a1 + 8);
  if (v29 != 2)
  {
    if (v29 == 1)
    {
      v30 = *(_QWORD *)(v8 + 16);
      if (v30)
      {
        v31 = *(_QWORD *)(a1 + 40);
        v32 = *(_QWORD *)(a1 + 48);
        v50 = v31;
        swift_bridgeObjectRetain(v8);
        v33 = 0;
        do
        {
          v34 = *(_QWORD *)(v8 + 8 * v33++ + 32);
          sub_10000732C((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40));
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v32);
          swift_bridgeObjectRetain(v9);
          sub_10003EC64(v34, v50, v32, v48, v9);
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v9);
        }
        while (v30 != v33);
LABEL_26:
        swift_bridgeObjectRelease_n(v8, 2);
        return;
      }
      goto LABEL_31;
    }
    swift_bridgeObjectRelease(v8);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v46 = sub_100005288(v11, (uint64_t)qword_1002A89D8);
    v25 = Logger.logObject.getter(v46);
    v26 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v25, v26))
    {
LABEL_15:

      return;
    }
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = "Unknown command send to Embargo push delegate";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
    swift_slowDealloc(v27, -1, -1);
    goto LABEL_15;
  }
  v35 = *(_QWORD *)(v8 + 16);
  if (v35)
  {
    v51 = (_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain(v8);
    v36 = 0;
    do
    {
      v37 = *(_QWORD *)(v8 + 8 * v36++ + 32);
      v38 = sub_10000732C(v51, *(_QWORD *)(v2 + 40));
      v39 = *(_QWORD *)(*v38 + 120);
      v40 = *(_QWORD *)(*v38 + 128);
      sub_10000732C((_QWORD *)(*v38 + 96), v39);
      v41 = AAFollowUpIdentifierCustodianEmbargo;
      v42 = v2;
      v43 = v8;
      v44 = *(void (**)(uint64_t, void (*)(char, uint64_t), _QWORD, uint64_t, uint64_t, __n128))(v40 + 24);
      v45 = swift_bridgeObjectRetain(v37);
      v44(v41, sub_10003F470, 0, v39, v40, v45);
      v8 = v43;
      v2 = v42;
      swift_bridgeObjectRelease(v37);
    }
    while (v35 != v36);
    goto LABEL_26;
  }
LABEL_31:
  swift_bridgeObjectRelease(v8);
}

uint64_t sub_10003EC0C()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for EmbargoPushServiceDelegate()
{
  return objc_opt_self(_TtC13appleaccountd26EmbargoPushServiceDelegate);
}

uint64_t sub_10003EC54(char a1)
{
  return (6u >> a1) & 1;
}

void sub_10003EC64(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;

  v6 = v5;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain_n(a3, 4);
  swift_bridgeObjectRetain_n(a5, 4);
  v12 = swift_bridgeObjectRetain_n(a1, 2);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = swift_slowAlloc(32, -1);
    v17 = swift_slowAlloc(96, -1);
    v39 = v17;
    *(_DWORD *)v16 = 136315650;
    swift_bridgeObjectRetain(a1);
    v36 = v6;
    v19 = Dictionary.description.getter(v18, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v21 = v20;
    swift_bridgeObjectRelease(a1);
    v38 = sub_1001DEF4C(v19, v21, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v38 = sub_1001DEF4C(a2, a3, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v16 + 22) = 2080;
    swift_bridgeObjectRetain(a5);
    v38 = sub_1001DEF4C(a4, a5, &v39);
    v6 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(a5, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Asked to verify CFU item: %s \n with IdMS Info: %s altDISD: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v17, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 4);
    swift_bridgeObjectRelease_n(a3, 4);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  v22 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v23 = objc_msgSend(v22, "aa_primaryAppleAccount");

  v25 = Logger.logObject.getter(v24);
  if (v23)
  {
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v27))
    {
      v28 = a4;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v27, "There is already a primary account on this device, ignoring Notification", v29, 2u);
      v30 = v29;
      a4 = v28;
      swift_slowDealloc(v30, -1, -1);
    }

    sub_10004048C(0, a1, a2, a3, a4, a5, 0, 0);
  }
  else
  {
    v31 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v25, (os_log_type_t)v31))
    {
      v32 = a4;
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v31, "We don't have an account, Looking for custodian information ", v33, 2u);
      v34 = v33;
      a4 = v32;
      swift_slowDealloc(v34, -1, -1);
    }

    v35 = swift_allocObject(&unk_100260CC8, 24, 7);
    swift_weakInit(v35 + 16, v6);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a1);
    swift_retain(v35);
    sub_100040AA0(a1, v6, v35, a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a1);
    swift_release_n(v35, 2);
  }

}

uint64_t sub_10003F10C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t Strong;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v14 = a9;
  v15 = a4 + 16;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v34 = a7;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v29 = _convertErrorToNSError(_:)(a1);
      v36 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *v33 = v29;
      v14 = a9;
      sub_100041178(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Ignoring CFU Item as we failed to get CRToken with error: %@", v28, 0xCu);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v33, 1, v30);
      swift_slowDealloc(v33, -1, -1);
      v31 = v28;
      a7 = v34;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_100041178(a1, a2, 1);
    }

    swift_beginAccess(v15, &v36, 0, 0);
    Strong = swift_weakLoadStrong(v15);
    if (Strong)
    {
      v23 = Strong;
      sub_10004048C(0, a5, a6, a7, a8, v14, 0, 0);
      sub_100041178(a1, a2, 1);
      return swift_release(v23);
    }
    return sub_100041178(a1, a2, 1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100005288(v16, (uint64_t)qword_1002A89D8);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "We have a CRT stored. Posting CFU... ", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    swift_beginAccess(v15, &v36, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v23 = result;
      sub_10003F728(a5, a6, a7, a8, a9, a1, a2);
      return swift_release(v23);
    }
  }
  return result;
}

void sub_10003F470(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *oslog;
  uint64_t v21;
  uint64_t v22;

  if ((a1 & 1) != 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100005288(v2, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Successfully dismissed followups for custodian emabrgo", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    goto LABEL_15;
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Unable to dismiss followups for custodian embargo", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  if (a2)
  {
    v14 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v15))
    {
      swift_errorRelease(a2);
LABEL_15:

      return;
    }
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v16 = 138412290;
    v18 = _convertErrorToNSError(_:)(a2);
    v21 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    *v17 = v18;
    _os_log_impl((void *)&_mh_execute_header, oslog, v15, "Failed to dismiss CFU with error: %@", v16, 0xCu);
    v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v17, 1, v19);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    swift_errorRelease(a2);
  }
}

uint64_t sub_10003F728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t (*)(char, uint64_t), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v21;
  _OWORD v25[2];
  __int128 v26;
  void *v27;

  v27 = &type metadata for String;
  *(_QWORD *)&v26 = a4;
  *((_QWORD *)&v26 + 1) = a5;
  sub_1000080F4(&v26, v25);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  sub_10001F9E0(v25, 0x44495344746C61, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = v7[15];
  v13 = v7[16];
  sub_10000732C(v7 + 12, v14);
  v21 = AAFollowUpIdentifierCustodianEmbargo;
  v15 = sub_1001CCDFC(a1);
  swift_bridgeObjectRelease(a1);
  v16 = swift_allocObject(&unk_100260CC8, 24, 7);
  swift_weakInit(v16 + 16, v7);
  v17 = (_QWORD *)swift_allocObject(&unk_100260CF0, 80, 7);
  v17[2] = a1;
  v17[3] = v16;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  v17[7] = a5;
  v17[8] = a6;
  v17[9] = a7;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(char, uint64_t), _QWORD *, uint64_t, uint64_t, __n128))(v13 + 8);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a5);
  swift_retain(v16);
  swift_bridgeObjectRetain(a3);
  v19 = swift_bridgeObjectRetain(a7);
  v18(v21, v15, sub_100040A70, v17, v14, v13, v19);
  swift_bridgeObjectRelease(v15);
  swift_release(v16);
  return swift_release(v17);
}

uint64_t sub_10003F8DC(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t result;
  uint64_t v43;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  __n128 v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v14 = a4 + 16;
  if ((a1 & 1) != 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v17, v19))
    {
      v70 = a8;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = v14;
      v21 = swift_slowAlloc(32, -1);
      v74 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(a3);
      v23 = Dictionary.description.getter(v22, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v67 = a5;
      v25 = v24;
      swift_bridgeObjectRelease(a3);
      v73 = sub_1001DEF4C(v23, v25, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_bridgeObjectRelease_n(a3, 2);
      v26 = v25;
      a5 = v67;
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Successfully posted CFU for Item: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      v27 = v21;
      v14 = v65;
      swift_slowDealloc(v27, -1, -1);
      v28 = v20;
      a8 = v70;
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    swift_beginAccess(v14, &v74, 0, 0);
    result = swift_weakLoadStrong(v14);
    if (result)
    {
      v43 = result;
      v46 = 1;
      v47 = a3;
      v48 = a5;
      v49 = a6;
      v50 = a7;
      v51 = a8;
LABEL_22:
      sub_10004048C(v46, v47, v48, v49, v50, v51, a9, a10);
      return swift_release(v43);
    }
  }
  else
  {
    v30 = &off_10028A000;
    if (a2)
    {
      swift_errorRetain(a2);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v31 = type metadata accessor for Logger(0);
      sub_100005288(v31, (uint64_t)qword_1002A89D8);
      v32 = swift_errorRetain(a2);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = a8;
        v68 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v35 = 138412290;
        v36 = v14;
        v37 = a3;
        v38 = a5;
        v39 = _convertErrorToNSError(_:)(a2);
        v74 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
        *v68 = v39;
        a5 = v38;
        a3 = v37;
        v14 = v36;
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to post CFU with error: %@", v35, 0xCu);
        v40 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v68, 1, v40);
        a8 = v71;
        swift_slowDealloc(v68, -1, -1);
        v41 = v35;
        v30 = &off_10028A000;
        swift_slowDealloc(v41, -1, -1);

        swift_errorRelease(a2);
      }
      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);

      }
    }
    if (v30[441] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v52 = type metadata accessor for Logger(0);
    sub_100005288(v52, (uint64_t)qword_1002A89D8);
    v53 = swift_bridgeObjectRetain_n(a3, 2);
    v54 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v54, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = v14;
      v58 = swift_slowAlloc(32, -1);
      v74 = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain(a3);
      v60 = Dictionary.description.getter(v59, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v69 = a5;
      v62 = v61;
      swift_bridgeObjectRelease(a3);
      v73 = sub_1001DEF4C(v60, v62, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
      swift_bridgeObjectRelease_n(a3, 2);
      v63 = v62;
      a5 = v69;
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "Failed to post CFU item %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      v64 = v58;
      v14 = v66;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    swift_beginAccess(v14, &v74, 0, 0);
    result = swift_weakLoadStrong(v14);
    if (result)
    {
      v43 = result;
      v46 = 0;
      v47 = a3;
      v48 = a5;
      v49 = a6;
      v50 = a7;
      v51 = a8;
      a9 = 0;
      a10 = 0;
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t sub_10003FEB8(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, _QWORD);
  uint64_t v55;
  void *v56;
  uint64_t v57;

  v10 = type metadata accessor for CustodianRecoverySessionRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000410B0(a1, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    v18 = *v17;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      v25 = _convertErrorToNSError(_:)(v18);
      v56 = (void *)v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      *v24 = v25;
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to get recovery record with error: %@", v23, 0xCu);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
    }

    swift_errorRetain(v18);
    a4(v18, 0, 1);
    swift_errorRelease(v18);
    return swift_errorRelease(v18);
  }
  else
  {
    sub_1000410F8((uint64_t)v17, (uint64_t)v13);
    v27 = &v13[*(int *)(v10 + 44)];
    v28 = *((_QWORD *)v27 + 1);
    if (v28)
    {
      v54 = a4;
      v29 = *(_QWORD *)v27;
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v30 = type metadata accessor for Logger(0);
      sub_100005288(v30, (uint64_t)qword_1002A89D8);
      v31 = swift_bridgeObjectRetain_n(a3, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = swift_slowAlloc(12, -1);
        v53 = a5;
        v35 = (uint8_t *)v34;
        v36 = swift_slowAlloc(32, -1);
        v52 = v29;
        v37 = v36;
        v56 = (void *)v36;
        *(_DWORD *)v35 = 136315138;
        swift_bridgeObjectRetain(a3);
        v55 = sub_1001DEF4C(a2, a3, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Found recovery record for sessionID: %s, posting CFU", v35, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        v38 = v37;
        v29 = v52;
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      v54(v29, v28, 0);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v40 = type metadata accessor for Logger(0);
      sub_100005288(v40, (uint64_t)qword_1002A89D8);
      v41 = swift_bridgeObjectRetain_n(a3, 2);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v56 = (void *)v45;
        v53 = a5;
        *(_DWORD *)v44 = 136315138;
        swift_bridgeObjectRetain(a3);
        v55 = sub_1001DEF4C(a2, a3, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Found recovery record for sessionID: %s, but does not contain recovery token, failing...", v44, 0xCu);
        swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v44, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      type metadata accessor for AACustodianError(0);
      v47 = v46;
      v55 = -7005;
      v48 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v49 = sub_100041030();
      _BridgedStoredNSError.init(_:userInfo:)(&v56, &v55, v48, v47, v49);
      v50 = v56;
      a4((uint64_t)v56, 0, 1);

    }
    return sub_10004113C((uint64_t)v13);
  }
}

void sub_10004048C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  id v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  NSString v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  NSString v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v9 = v8;
  v12 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = sub_10010A9E0(0x6E6F697373657372, 0xEA00000000006449);
    if ((v14 & 1) != 0)
    {
      sub_1000244B0(*(_QWORD *)(a2 + 56) + 32 * v13, (uint64_t)aBlock);
      if ((swift_dynamicCast(&v29, aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v27 = v9;
        v15 = v30;
        v16 = String._bridgeToObjectiveC()();
        v17 = v15;
        v9 = v27;
        swift_bridgeObjectRelease(v17);
        objc_msgSend(v12, "setRecoverySessionID:", v16);

      }
    }
  }
  if (a8)
  {
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setCustodianRecoveryToken:", v18);

  }
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setTransactionID:", v19);

  v20 = String._bridgeToObjectiveC()();
  objc_msgSend(v12, "setAltDSID:", v20);

  objc_msgSend(v12, "setNotificationAction:", a1 & 1);
  if (*(_QWORD *)(a2 + 16)
    && (v21 = sub_10010A9E0(0x79654B6C72556266, 0xE800000000000000), (v22 & 1) != 0)
    && (sub_1000244B0(*(_QWORD *)(a2 + 56) + 32 * v21, (uint64_t)aBlock),
        swift_dynamicCast(&v29, aBlock, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v23 = v30;
  }
  else
  {
    v23 = 0;
  }
  v24 = (void *)*sub_10000732C((_QWORD *)(v9 + 56), *(_QWORD *)(v9 + 80));
  if (v23)
    v25 = String._bridgeToObjectiveC()();
  else
    v25 = 0;
  aBlock[4] = sub_100045160;
  v32 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DC548;
  aBlock[3] = &unk_100260C90;
  v26 = _Block_copy(aBlock);
  swift_release(v32);
  objc_msgSend(v24, "sendEmbargoEndNotificationFeedbackWithContext:urlKey:completion:", v12, v25, v26);
  _Block_release(v26);

  swift_bridgeObjectRelease(v23);
}

void sub_100040750(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A89D8);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v15 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Encountered error while sending cfu feedback to IdMS: %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Successfully sent cfu feedback to IdMS", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }

}

uint64_t sub_1000409B4()
{
  _QWORD *v0;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for CustodianRecoveryFollowUpController()
{
  return objc_opt_self(_TtC13appleaccountd35CustodianRecoveryFollowUpController);
}

uint64_t sub_100040A08()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100040A2C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100040A70(char a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10003F8DC(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

void sub_100040AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56[4];

  v16 = (_QWORD *)swift_allocObject(&unk_100260D18, 64, 7);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v16[6] = a7;
  v16[7] = a8;
  v17 = *(_QWORD *)(a1 + 16);
  swift_retain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a8);
  if (v17
    && (v18 = sub_10010A9E0(0x6E6F697373657372, 0xEA00000000006449), (v19 & 1) != 0)
    && (sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v18, (uint64_t)v56),
        swift_dynamicCast(&v54, v56, (char *)&type metadata for Any + 8, &type metadata for String, 6)))
  {
    v21 = v54;
    v20 = v55;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v23 = swift_bridgeObjectRetain_n(v20, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v56[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(v20);
      v54 = sub_1001DEF4C(v21, v20, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Asked to post CFU for sessionID: %s, fetching session data", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
    }
    sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
    v48 = (_QWORD *)swift_allocObject(&unk_100260D40, 48, 7);
    v48[2] = v21;
    v48[3] = v20;
    v48[4] = sub_100041000;
    v48[5] = v16;
    swift_bridgeObjectRetain(v20);
    swift_retain(v16);
    sub_1001C1444(v21, v20, (uint64_t)sub_1000410A4, (uint64_t)v48);
    swift_release(v16);
    swift_bridgeObjectRelease(v20);
    swift_release(v48);
  }
  else
  {
    v53 = a8;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v28 = type metadata accessor for Logger(0);
    sub_100005288(v28, (uint64_t)qword_1002A89D8);
    v29 = swift_bridgeObjectRetain_n(a1, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v52 = a7;
      v50 = a5;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = a6;
      v33 = swift_slowAlloc(32, -1);
      v56[0] = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(a1);
      v35 = a3;
      v36 = Dictionary.description.getter(v34, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
      v49 = a4;
      v38 = v37;
      swift_bridgeObjectRelease(a1);
      v39 = v36;
      a3 = v35;
      v54 = sub_1001DEF4C(v39, v38, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(a1, 2);
      v40 = v38;
      a4 = v49;
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to find sessionID on CFU Item: %s", v32, 0xCu);
      a7 = v52;
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      v41 = v33;
      a6 = v51;
      swift_slowDealloc(v41, -1, -1);
      v42 = v32;
      a5 = v50;
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    type metadata accessor for AACustodianError(0);
    v44 = v43;
    v54 = -7009;
    v45 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v46 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(v56, &v54, v45, v44, v46);
    v47 = (void *)v56[0];
    sub_10003F10C(v56[0], 0, 1, a3, a4, a5, a6, a7, v53);
    swift_release(v16);

  }
}

uint64_t sub_100040FC4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100041000(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  return sub_10003F10C(a1, a2, a3 & 1, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

unint64_t sub_100041030()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B640;
  if (!qword_10028B640)
  {
    type metadata accessor for AACustodianError(255);
    result = swift_getWitnessTable(&unk_100218378, v1);
    atomic_store(result, (unint64_t *)&qword_10028B640);
  }
  return result;
}

uint64_t sub_100041078()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000410A4(uint64_t a1)
{
  uint64_t v1;

  return sub_10003FEB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000410B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028E7F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000410F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoverySessionRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004113C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianRecoverySessionRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100041178(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100041188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v12);
  v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v18 = swift_allocObject(&unk_100260D88, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = sub_100042740;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100260DA0;
  v19 = _Block_copy(aBlock);
  swift_retain(a1);
  v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  v28 = _swiftEmptyArrayStorage;
  v21 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v23 = sub_100008628();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
  return swift_release(v30);
}

uint64_t sub_1000413E4(char a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  int v12;
  uint64_t v13;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    v12 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did dismiss previously posted custodian invitation CFUs? %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }

  return a3(a2);
}

uint64_t sub_100041510(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];

  v3 = v2;
  v39 = a1;
  v5 = *v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v36 - v13;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v37 = v7;
    v19 = swift_slowAlloc(12, -1);
    v38 = v6;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v36 = a2;
    v22 = v21;
    v40 = v5;
    v41[0] = v21;
    *(_DWORD *)v20 = 136315138;
    v23 = sub_1000080B4(&qword_10028D070);
    v24 = String.init<A>(describing:)(&v40, v23);
    v26 = v25;
    v40 = sub_1001DEF4C(v24, v25, v41);
    v7 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - Starting scheduled invitation status check for all custodianships.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v27 = v22;
    a2 = v36;
    swift_slowDealloc(v27, -1, -1);
    v28 = v20;
    v6 = v38;
    swift_slowDealloc(v28, -1, -1);
  }

  sub_100006CA4((uint64_t)(v3 + 2), (uint64_t)v41);
  v29 = sub_10000732C(v41, v41[3]);
  v30 = swift_allocObject(&unk_100260E28, 24, 7);
  swift_weakInit(v30 + 16, v3);
  v31 = (_QWORD *)swift_allocObject(&unk_100260E50, 40, 7);
  v32 = v39;
  v31[2] = v30;
  v31[3] = v32;
  v31[4] = a2;
  v33 = sub_10000732C((_QWORD *)(*v29 + 16), *(_QWORD *)(*v29 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v30);
  swift_retain(a2);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v34 = *(void (**)(char *, uint64_t))(v7 + 8);
  v34(v11, v6);
  sub_10000732C((_QWORD *)(*v33 + 16), *(_QWORD *)(*v33 + 40));
  sub_10009D070((uint64_t)v14, (uint64_t)sub_100042F00, (uint64_t)v31);
  v34(v14, v6);
  swift_release(v30);
  swift_release(v31);
  return sub_100006F58(v41);
}

void sub_100041830(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t);
  char *v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t Strong;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t aBlock[5];
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v94 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS.QoSClass(0);
  v21 = __chkstk_darwin(v19, v20);
  v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v47 = type metadata accessor for Logger(0);
    sub_100005288(v47, (uint64_t)qword_1002A89D8);
    swift_errorRetain(a1);
    v48 = swift_errorRetain(a1);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      aBlock[0] = v52;
      *(_DWORD *)v51 = 136315138;
      v98 = a1;
      swift_errorRetain(a1);
      v53 = sub_1000080B4(&qword_10028E850);
      v54 = String.init<A>(describing:)(&v98, v53);
      v56 = v55;
      v98 = sub_1001DEF4C(v54, v55, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99);
      swift_bridgeObjectRelease(v56);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to fetch custodianships - %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a4(a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v89 = v24;
    v90 = v22;
    v91 = v21;
    v92 = v10;
    v93 = v9;
    v25 = a3 + 16;
    v26 = qword_10028ADC8;
    swift_bridgeObjectRetain(a1);
    if (v26 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v27 = type metadata accessor for Logger(0);
    v88 = sub_100005288(v27, (uint64_t)qword_1002A89D8);
    v28 = Logger.logObject.getter(v88);
    v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = v18;
      v31 = v15;
      v32 = v14;
      v33 = a4;
      v34 = v13;
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully fetched Custodianship info.", v35, 2u);
      v36 = v35;
      v13 = v34;
      a4 = v33;
      v14 = v32;
      v15 = v31;
      v18 = v30;
      swift_slowDealloc(v36, -1, -1);
    }

    swift_beginAccess(v25, &v98, 0, 0);
    Strong = swift_weakLoadStrong(v25);
    if (Strong)
    {
      v38 = Strong;
      v87 = v13;
      v88 = (uint64_t)a4;
      v39 = dispatch_group_create();
      v40 = swift_allocObject(&unk_100260E78, 24, 7);
      *(_QWORD *)(v40 + 16) = 0;
      swift_retain(v38);
      v41 = sub_100042F34(a1);
      swift_release(v38);
      sub_1000057B0(a1, 0);
      v42 = v41[2];
      v86 = v15;
      if (v42)
      {
        v85 = v14;
        v43 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
        v44 = (uint64_t)v41
            + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
        v45 = *(_QWORD *)(v43 + 72);
        do
        {
          sub_100042004(v44, v39, v38, v40);
          v44 += v45;
          --v42;
        }
        while (v42);
        v46 = v18;
        swift_bridgeObjectRelease(v41);
        v14 = v85;
      }
      else
      {
        v46 = v18;
        swift_bridgeObjectRelease(v41);
      }
      sub_100007764();
      v72 = v89;
      v71 = v90;
      v73 = v91;
      (*(void (**)(char *, _QWORD, uint64_t))(v90 + 104))(v89, enum case for DispatchQoS.QoSClass.default(_:), v91);
      v85 = static OS_dispatch_queue.global(qos:)(v72);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v72, v73);
      v74 = (_QWORD *)swift_allocObject(&unk_100260EA0, 40, 7);
      v75 = v94;
      v74[2] = v88;
      v74[3] = v75;
      v74[4] = v40;
      aBlock[4] = (uint64_t)sub_100043394;
      v96 = v74;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000051D0;
      aBlock[3] = (uint64_t)&unk_100260EB8;
      v76 = _Block_copy(aBlock);
      swift_retain(v75);
      v77 = swift_retain(v40);
      static DispatchQoS.unspecified.getter(v77);
      v97 = (uint64_t)_swiftEmptyArrayStorage;
      v78 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v79 = sub_1000080B4((uint64_t *)&unk_100295A00);
      v80 = sub_100008628();
      v81 = v87;
      v82 = v93;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v79, v80, v93, v78);
      v83 = (void *)v85;
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v46, v81, v85, v76);

      swift_release(v38);
      _Block_release(v76);

      (*(void (**)(char *, uint64_t))(v92 + 8))(v81, v82);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v46, v14);
      v84 = v96;
      swift_release(v40);
      swift_release(v84);
    }
    else
    {
      v57 = sub_1000057B0(a1, 0);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        aBlock[0] = v61;
        *(_DWORD *)v60 = 136315138;
        v97 = type metadata accessor for CustodianInvitationStatusChecker(0);
        v62 = sub_1000080B4(&qword_10028D070);
        v63 = String.init<A>(describing:)(&v97, v62);
        v65 = v64;
        v97 = sub_1001DEF4C(v63, v64, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        swift_bridgeObjectRelease(v65);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "%s is nil", v60, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v67 = v66;
      v97 = -7000;
      v68 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v69 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v97, v68, v67, v69);
      v70 = (void *)aBlock[0];
      a4(aBlock[0]);

    }
  }
}

uint64_t sub_100042004(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[4];
  __int128 v64[3];
  uint64_t v65;

  v61 = a4;
  v57 = a3;
  v65 = a1;
  v5 = sub_1000080B4(&qword_10028D068);
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  __chkstk_darwin(v5, v6);
  v58 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v56, v8);
  v55 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CustodianshipInfoRecord(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v53 - v16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "CustodianshipRecord invitation has been pending for more than threshold time limit.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v23 = v65;
  sub_1000433A0(v65, (uint64_t)v17);
  v24 = sub_1000433A0(v23, (uint64_t)v14);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v64[0] = v53;
    *(_DWORD *)v27 = 136315394;
    v54 = a2;
    v28 = type metadata accessor for UUID(0);
    v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    v32 = v31;
    v62 = sub_1001DEF4C(v30, v31, (uint64_t *)v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
    swift_bridgeObjectRelease(v32);
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
    *(_WORD *)(v27 + 12) = 2080;
    v33 = (uint64_t *)&v14[*(int *)(v10 + 24)];
    v34 = *v33;
    v35 = v33[1];
    swift_bridgeObjectRetain(v35);
    v62 = sub_1001DEF4C(v34, v35, (uint64_t *)v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
    v36 = v35;
    a2 = v54;
    swift_bridgeObjectRelease(v36);
    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Notifying User for CustodianshipRecord - %s - %s", (uint8_t *)v27, 0x16u);
    v37 = v53;
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
  }

  dispatch_group_enter(a2);
  v38 = sub_1000080B4((uint64_t *)&unk_100295040);
  v39 = (uint64_t)v55;
  v40 = &v55[*(int *)(v38 + 48)];
  v41 = v65;
  v42 = v65 + *(int *)(v10 + 20);
  v43 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v39, v42, v43);
  v44 = (_QWORD *)(v41 + *(int *)(v10 + 24));
  v45 = v44[1];
  *(_QWORD *)v40 = *v44;
  *((_QWORD *)v40 + 1) = v45;
  swift_storeEnumTagMultiPayload(v39, v56, 0);
  v46 = v58;
  v48 = v59;
  v47 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v57 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager, v60);
  swift_bridgeObjectRetain(v45);
  Dependency.wrappedValue.getter(&v62, v47);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v47);
  sub_10000732C(&v62, v63[2]);
  sub_100171484((uint64_t)v64);
  v49 = swift_allocObject(&unk_100260EF0, 32, 7);
  v50 = v61;
  *(_QWORD *)(v49 + 16) = v61;
  *(_QWORD *)(v49 + 24) = a2;
  swift_retain(v50);
  v51 = a2;
  sub_1001CEA64(v64);
  swift_release(v49);
  sub_100043418((uint64_t)v64);
  sub_100028388(v39, type metadata accessor for TrustedContactUserNotification);
  return sub_100006F58(&v62);
}

void sub_1000424EC(uint64_t a1, uint64_t a2, dispatch_group_t group)
{
  uint64_t v6;
  _BYTE v7[24];

  if (a1)
  {
    swift_beginAccess(a2 + 16, v7, 1, 0);
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v6);
  }
  dispatch_group_leave(group);
}

uint64_t sub_100042558(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 0, 0);
  v5 = *(_QWORD *)(a3 + 16);
  swift_errorRetain(v5);
  a1(v5);
  return swift_errorRelease(v5);
}

uint64_t sub_1000425BC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  sub_100006F58(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager;
  v2 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__accountStore;
  v4 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100042644()
{
  return type metadata accessor for CustodianInvitationStatusChecker(0);
}

uint64_t type metadata accessor for CustodianInvitationStatusChecker(uint64_t a1)
{
  uint64_t result;

  result = qword_10028CFC8;
  if (!qword_10028CFC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianInvitationStatusChecker);
  return result;
}

void sub_100042688(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = "(";
  sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_100042740()
{
  sub_10002B13C();
}

__n128 sub_100042760@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(_BYTE *)a1 & 1 | ((unint64_t)(*(_BYTE *)(a1 + 1) & 1) << 8);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100042788(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, id, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t Strong;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _QWORD v42[3];
  uint64_t v43;
  char v44[24];

  v7 = sub_1000080B4(&qword_10028D068);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028FA50);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12, v14);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a3)
  {
    case 4:
      return sub_10002B6C0();
    case 3:
      return sub_10002B6A8();
    case 2:
      swift_beginAccess(a4 + 16, v44, 0, 0);
      result = swift_weakLoadStrong(a4 + 16);
      if (result)
      {
        v18 = result;
        v19 = swift_allocObject(&unk_100260DD8, 32, 7);
        *(_QWORD *)(v19 + 16) = a4;
        *(_QWORD *)(v19 + 24) = a1;
        v39 = v19;
        v40 = v18;
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v18 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__accountStore, v12);
        swift_retain_n(a4, 2);
        swift_retain_n(a1, 2);
        Dependency.wrappedValue.getter(v42, v12);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
        v20 = objc_msgSend(*(id *)(*sub_10000732C(v42, v43) + 16), "aa_primaryAppleAccount");
        sub_100006F58(v42);
        if (v20)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v40 + OBJC_IVAR____TtC13appleaccountd32CustodianInvitationStatusChecker__userNotificationManager, v7);
          Dependency.wrappedValue.getter(v42, v7);
          (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
          v21 = sub_10000732C(v42, v43);
          v22 = AAFollowUpIdentifierCustodianInvitationReminder;
          v23 = swift_allocObject(&unk_100260E00, 32, 7);
          v24 = v39;
          *(_QWORD *)(v23 + 16) = sub_100042BDC;
          *(_QWORD *)(v23 + 24) = v24;
          v25 = (_QWORD *)(*v21 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
          v26 = v25[3];
          v27 = v25[4];
          sub_10000732C(v25, v26);
          v28 = *(void (**)(uint64_t, id, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t))(v27 + 48);
          swift_retain(v24);
          v28(v22, v20, sub_100042EA8, v23, v26, v27);
          swift_release(v23);

          sub_100006F58(v42);
          swift_release(v40);
          swift_release(a1);
          swift_release(a4);
          return swift_release(v24);
        }
        else
        {
          v29 = v39;
          v30 = v40;
          type metadata accessor for AACustodianError(0);
          v32 = v31;
          v42[0] = -7002;
          v33 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          v34 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
          _BridgedStoredNSError.init(_:userInfo:)(&v41, v42, v33, v32, v34);
          v35 = v41;
          swift_beginAccess(a4 + 16, v42, 0, 0);
          Strong = swift_weakLoadStrong(a4 + 16);
          if (Strong)
          {
            v37 = Strong;
            swift_retain(a1);
            sub_100041510((uint64_t)sub_100042E7C, a1);
            swift_release(v29);

            swift_release(v37);
            swift_release(a1);
          }
          else
          {
            swift_release(v29);

          }
          swift_release(v30);
          swift_release(a1);
          return swift_release(a4);
        }
      }
      break;
  }
  return result;
}

uint64_t sub_100042B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    swift_retain(a3);
    sub_100041510((uint64_t)sub_100042E7C, a3);
    swift_release(v6);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_100042BB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100042BDC(uint64_t a1)
{
  uint64_t v1;

  return sub_100042B38(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL sub_100042BE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A89D8);
    v4 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v14, "Scheduled Custodian Invitation Status check is complete.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    goto LABEL_11;
  }
  swift_errorRetain(a1);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A89D8);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (!os_log_type_enabled(v4, v5))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
LABEL_11:

    return sub_10002B6D8();
  }
  v6 = (uint8_t *)swift_slowAlloc(12, -1);
  v7 = swift_slowAlloc(32, -1);
  v17 = a1;
  v18 = v7;
  *(_DWORD *)v6 = 136315138;
  swift_errorRetain(a1);
  v8 = sub_1000080B4(&qword_10028E850);
  v9 = String.init<A>(describing:)(&v17, v8);
  v11 = v10;
  v17 = sub_1001DEF4C(v9, v10, &v18);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
  swift_bridgeObjectRelease(v11);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Scheduled Custodian Invitation Status check completed with error: %s", v6, 0xCu);
  swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1, -1);
  swift_slowDealloc(v6, -1, -1);

  swift_errorRelease(a1);
  return sub_10002B6D8();
}

BOOL sub_100042E7C(uint64_t a1)
{
  return sub_100042BE4(a1);
}

uint64_t sub_100042E84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100042EA8(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000413E4(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_100042EB0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100042ED4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100042F00(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100041830(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100042F10()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_100042F34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *result;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  double v50;
  void (*v51)(char *, uint64_t);
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD v55[2];
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;

  v3 = sub_1000080B4(&qword_10028E810);
  v5 = __chkstk_darwin(v3, v4);
  v57 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v55 - v8;
  v10 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v61 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v16 = (char *)v55 - v15;
  v62 = type metadata accessor for CustodianshipInfoRecord(0);
  v18 = __chkstk_darwin(v62, v17);
  v60 = (uint64_t)v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)v55 - v22;
  __chkstk_darwin(v21, v24);
  v27 = (char *)v55 - v26;
  result = _swiftEmptyArrayStorage;
  v65 = _swiftEmptyArrayStorage;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v58 = v9;
    v30 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    v64 = *(_QWORD *)(v25 + 72);
    v55[1] = v1;
    v56 = v30;
    v31 = a1 + v30;
    v32 = type metadata accessor for CustodianshipInfoRecord;
    v33 = v62;
    v59 = v16;
    while (1)
    {
      v34 = v32;
      sub_1000433A0(v31, (uint64_t)v27);
      v35 = *(_QWORD *)&v27[*(int *)(v33 + 28)];
      sub_1000433A0((uint64_t)v27, (uint64_t)v23);
      if (v35 != 1)
      {
        v32 = v34;
        sub_100028388((uint64_t)v23, v34);
        goto LABEL_4;
      }
      v36 = (uint64_t *)&v23[*(int *)(v33 + 32)];
      v37 = *v36;
      v38 = v36[1];
      sub_10000F450(*v36, v38);
      sub_1000FADB8(v37, v38);
      v40 = v39;
      sub_10000F494(v37, v38);
      if (!v40)
        break;
      v41 = objc_msgSend(v40, "creationDate");

      if (v41)
      {
        v42 = (uint64_t)v57;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

        v43 = 0;
      }
      else
      {
        v43 = 1;
        v42 = (uint64_t)v57;
      }
      v44 = (uint64_t)v58;
      v47 = v63;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v42, v43, 1, v10);
      sub_100043504(v42, v44);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, 1, v10);
      v46 = v59;
      if ((_DWORD)v45 == 1)
        goto LABEL_13;
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 32))(v59, v44, v10);
LABEL_15:
      v49 = v61;
      Date.init()(v48);
      v50 = Date.timeIntervalSince(_:)(v46);
      v51 = *(void (**)(char *, uint64_t))(v63 + 8);
      v51(v49, v10);
      v51(v46, v10);
      v32 = v34;
      sub_100028388((uint64_t)v23, v34);
      v33 = v62;
      if (v50 > 604800.0)
      {
        sub_100027FA4((uint64_t)v27, v60);
        v52 = v65;
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
        {
          sub_1001D4C28(0, v52[2] + 1, 1);
          v52 = v65;
        }
        v54 = v52[2];
        v53 = v52[3];
        if (v54 >= v53 >> 1)
        {
          sub_1001D4C28(v53 > 1, v54 + 1, 1);
          v52 = v65;
        }
        v52[2] = v54 + 1;
        sub_100027FA4(v60, (uint64_t)v52 + v56 + v54 * v64);
        v33 = v62;
        v32 = v34;
        goto LABEL_5;
      }
LABEL_4:
      sub_100028388((uint64_t)v27, v32);
LABEL_5:
      v31 += v64;
      if (!--v29)
        return v65;
    }
    v44 = (uint64_t)v58;
    v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v58, 1, 1, v10);
    v46 = v59;
LABEL_13:
    Date.init()(v45);
    v48 = sub_1000434C4(v44);
    goto LABEL_15;
  }
  return result;
}

uint64_t sub_100043368()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100043394()
{
  uint64_t v0;

  return sub_100042558(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000433A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianshipInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000433E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100043410(uint64_t a1)
{
  uint64_t v1;

  sub_1000424EC(a1, *(_QWORD *)(v1 + 16), *(dispatch_group_t *)(v1 + 24));
}

uint64_t sub_100043418(uint64_t a1)
{
  sub_10004344C(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

void *sub_10004344C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;

  v8 = a2;
  switch(a6)
  {
    case 0:
    case 1:

      goto LABEL_4;
    case 2:
    case 3:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a4);
      v8 = a5;
LABEL_4:
      result = (void *)swift_bridgeObjectRelease(v8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000434C4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_10028E810);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100043504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028E810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100043554(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Setting up custodian with idMS", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_100260FB8, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v16[4] = sub_10004575C;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100043E24;
  v16[3] = &unk_100260FD0;
  v14 = _Block_copy(v16);
  v15 = v17;
  swift_retain(a3);
  swift_release(v15);
  objc_msgSend(a4, "initiateCustodianSetupWithContext:completion:", a1, v14);
  _Block_release(v14);
}

void sub_1000436D8(void *a1, uint64_t a2, void (*a3)(unint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89D8);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v11 = _convertErrorToNSError(_:)(a2);
      v67 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v10 = v11;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error during idMS custodian setup: %@", v9, 0xCu);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    v67 = a2;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 1;
    swift_errorRetain(a2);
    a3(&v67);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    return;
  }
  if (a1)
  {
    v63 = a1;
    v13 = objc_msgSend(v63, "encryptedPRKC");
    if (v13)
    {
      v14 = v13;
      v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v18 = objc_msgSend(v63, "ownerCustodianAltDSID");
      if (v18)
      {
        v19 = v18;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v22 = v21;

        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v23 = type metadata accessor for Logger(0);
        v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "idMS custodian setup was successful", v27, 2u);
          swift_slowDealloc(v27, -1, -1);
        }

        v67 = v15;
        v68 = v17;
        v69 = v20;
        v70 = v22;
        v71 = 0;
        sub_10000F450(v15, v17);
        a3(&v67);
        sub_10000F494(v15, v17);
        swift_bridgeObjectRelease(v22);
        sub_10000F494(v15, v17);

        return;
      }
      sub_10000F494(v15, v17);
    }
    v38 = 0xD000000000000018;
    v65 = 0xD00000000000002ELL;
    v66 = 0x800000010020A010;
    v39 = objc_msgSend(v63, "encryptedPRKC");
    if (v39)
    {
      v40 = v39;
      v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v43 = v42;

      sub_10000F494(v41, v43);
      v44 = 0;
      v45 = 0xE000000000000000;
    }
    else
    {
      v44 = 0xD000000000000019;
      v45 = 0x800000010020A040;
    }
    v46 = v45;
    String.append(_:)(*(Swift::String *)&v44);
    swift_bridgeObjectRelease(v45);
    v47 = objc_msgSend(v63, "ownerCustodianAltDSID");
    if (v47)
    {

      v38 = 0;
      v48 = (void *)0xE000000000000000;
    }
    else
    {
      v48 = (void *)0x800000010020A060;
    }
    v49._countAndFlagsBits = v38;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v48);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v50 = type metadata accessor for Logger(0);
    sub_100005288(v50, (uint64_t)qword_1002A89D8);
    v52 = v65;
    v51 = v66;
    swift_bridgeObjectRetain(v66);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v67 = v57;
      *(_DWORD *)v56 = 136315138;
      swift_bridgeObjectRetain(v51);
      v64 = sub_1001DEF4C(v52, v51, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease_n(v51, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v66, 2);
    }
    type metadata accessor for AACustodianError(0);
    v59 = v58;
    v67 = -7009;
    v60 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v61 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v64, &v67, v60, v59, v61);
    v62 = (void *)v64;
    v67 = v64;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 1;
    a3(&v67);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100005288(v28, (uint64_t)qword_1002A89D8);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "idMS custodian setup did not return results.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v34 = v33;
    v67 = -7009;
    v35 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v36 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v65, &v67, v35, v34, v36);
    v37 = (void *)v65;
    v67 = v65;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 1;
    a3(&v67);

  }
}

void sub_100043E24(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100043E98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Finalizing custodianship with idMS", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_100260F68, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v16[4] = sub_10004573C;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1001DC548;
  v16[3] = &unk_100260F80;
  v14 = _Block_copy(v16);
  v15 = v17;
  swift_retain(a3);
  swift_release(v15);
  objc_msgSend(a4, "finalizeCustodianSetupWithContext:completion:", a1, v14);
  _Block_release(v14);
}

void sub_10004401C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Revoking custodianship with idMS", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_100260F18, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v16[4] = sub_10004571C;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1001DC548;
  v16[3] = &unk_100260F30;
  v14 = _Block_copy(v16);
  v15 = v17;
  swift_retain(a3);
  swift_release(v15);
  objc_msgSend(a4, "revokeCustodianWithContext:completion:", a1, v14);
  _Block_release(v14);
}

void sub_1000441A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Updating recovery key with idMS", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = swift_allocObject(&unk_100261008, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  v16[4] = sub_100045764;
  v17 = v13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1001DC548;
  v16[3] = &unk_100261020;
  v14 = _Block_copy(v16);
  v15 = v17;
  swift_retain(a3);
  swift_release(v15);
  objc_msgSend(a4, "updateCustodianRecoveryKeyWithContext:completion:", a1, v14);
  _Block_release(v14);
}

uint64_t sub_100044324(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *format;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      format = a4;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(a1);
      v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *v12 = v13;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, format, v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a2(a1);
}

void sub_1000444E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  sub_10004452C(a1, a2, a3, a4, (uint64_t (*)(void))&static os_log_type_t.debug.getter, "Call to IdMS to initiate recovery completed with result: %s", "Call to IdMS to initiate recovery failed with error: %@", "No Response was obtained from startCustodianRecoveryRequest");
}

void sub_100044508(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  sub_10004452C(a1, a2, a3, a4, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Call to IdMS to fetch recovery configuration completed with result: %s", "Call to IdMS to fetch recovery configuration failed with error: %@", "No Response was obtained from startCustodianRecoveryRequest");
}

void sub_10004452C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(void), const char *a6, const char *a7, const char *a8)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  if (a1)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A89D8);
    v12 = swift_bridgeObjectRetain_n(a1, 2);
    v13 = Logger.logObject.getter(v12);
    v14 = a5();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v44 = (void *)v16;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain(a1);
      v18 = Dictionary.description.getter(v17, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v20 = v19;
      swift_bridgeObjectRelease(a1);
      v43 = sub_1001DEF4C(v18, v20, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, a6, v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    a3(a1, 0);
  }
  else if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v24 = swift_errorRetain(a2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v29 = _convertErrorToNSError(_:)(a2);
      v44 = (void *)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *v28 = v29;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, a7, v27, 0xCu);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    a3(a2, 1);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A89D8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, a8, v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v38 = v37;
    v43 = -7009;
    v39 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v40 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v44, &v43, v39, v38, v40);
    v41 = v44;
    a3((uint64_t)v44, 1);

  }
}

void sub_1000449D8(char a1, void *a2, void (*a3)(void *))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  if ((a1 & 1) != 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Call to IdMS for recovery transaction completed with success!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    a3(0);
  }
  else if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A89D8);
    v12 = swift_errorRetain(a2);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v17 = _convertErrorToNSError(_:)(a2);
      v25 = (void *)v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      *v16 = v17;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Call to IdMS for recovery transaction completed with error: %@", v15, 0xCu);
      v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    a3(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    v20 = v19;
    v24 = -7009;
    v21 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v25, &v24, v21, v20, v22);
    v23 = v25;
    a3(v25);

  }
}

void sub_100044CCC(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __n128 v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  if (a2)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_bridgeObjectRetain_n(a2, 2);
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v34 = (void *)v13;
      *(_DWORD *)v12 = 136315138;
      swift_bridgeObjectRetain(a2);
      v33 = sub_1001DEF4C(a1, a2, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "Spake flow verified successfully! obtained new token: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a4(a1, a2, 0);
  }
  else if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v16 = swift_errorRetain(a3);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v21 = _convertErrorToNSError(_:)(a3);
      v34 = (void *)v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      *v20 = v21;
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Call to IdMS to verify Spake and fetch new token failed with error: %@", v19, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
    }

    swift_errorRetain(a3);
    a4(a3, 0, 1);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No Response was obtained from verifyRecoveryTransaction", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v29 = v28;
    v33 = -7009;
    v30 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v31 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v34, &v33, v30, v29, v31);
    v32 = v34;
    a4((uint64_t)v34, 0, 1);

  }
}

void sub_10004513C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  sub_10004452C(a1, a2, a3, a4, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Call to IdMS to fetch wrapping key completed with result: %s", "Call to IdMS to fetch wrapping key failed with error: %@", "No Response was obtained from fetchRecoveryWrappingKey");
}

void sub_100045160(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A89D8);
    v3 = swift_errorRetain(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138412290;
      v8 = _convertErrorToNSError(_:)(a1);
      v10 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
      *v7 = v8;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during idMS notification feedback call: %@", v6, 0xCu);
      v9 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  sub_100040750(a1);
}

uint64_t sub_100045308(id a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  char v45;

  if (!a2)
  {
    if (a1)
    {
      v14 = objc_msgSend(a1, "custodianListVersion");
      if (v14)
      {
        v15 = v14;
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v18 = v17;

      }
      else
      {
        v16 = 0;
        v18 = 0xE000000000000000;
      }
      v24 = objc_msgSend(a1, "beneficiaryListVersion");
      if (v24)
      {
        v25 = v24;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v23 = v26;

      }
      else
      {
        v21 = 0;
        v23 = 0xE000000000000000;
      }
      v27 = objc_msgSend(a1, "custodianOperationsByID", v16);
      if (v27)
      {
        v28 = v27;
        v29 = type metadata accessor for UUID(0);
        type metadata accessor for AKTrustedContactsSyncOperation(0);
        v31 = v30;
        v32 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v28, v29, v31, v32);

      }
      else
      {
        v20 = sub_100015F98((uint64_t)_swiftEmptyArrayStorage);
      }
      v33 = objc_msgSend(a1, "beneficiaryOperationsByID");
      if (v33)
      {
        v34 = v33;
        v35 = type metadata accessor for UUID(0);
        type metadata accessor for AKTrustedContactsSyncOperation(0);
        v37 = v36;
        v38 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v34, v35, v37, v38);

        v22 = v40;
LABEL_23:
        v41 = v22;
        *(_QWORD *)&v42 = v18;
        *((_QWORD *)&v42 + 1) = v21;
        *(_QWORD *)&v43 = v23;
        *((_QWORD *)&v43 + 1) = v20;
        v44 = v39;
        v45 = 0;
        a3(&v41);
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v23);
        return swift_bridgeObjectRelease(v18);
      }
      v22 = v40;
    }
    else
    {
      v20 = sub_100015F98((uint64_t)_swiftEmptyArrayStorage);
      v21 = 0;
      v22 = 0;
      v23 = 0xE000000000000000;
      v18 = 0xE000000000000000;
    }
    v39 = sub_100015F98((uint64_t)_swiftEmptyArrayStorage);
    goto LABEL_23;
  }
  swift_errorRetain(a2);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89D8);
  v6 = swift_errorRetain(a2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v11 = _convertErrorToNSError(_:)(a2);
    v41 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    *v10 = v11;
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error during IdMS trusted contacts sync call: %@", v9, 0xCu);
    v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
  }

  v41 = a2;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  v45 = 1;
  swift_errorRetain(a2);
  a3(&v41);
  swift_errorRelease(a2);
  return swift_errorRelease(a2);
}

uint64_t sub_1000456F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004571C(uint64_t a1)
{
  uint64_t v1;

  return sub_100044324(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error during idMS custodian revoke: %@");
}

uint64_t sub_10004573C(uint64_t a1)
{
  uint64_t v1;

  return sub_100044324(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error during idMS custodian setup: %@");
}

void sub_10004575C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000436D8(a1, a2, *(void (**)(unint64_t *))(v2 + 16));
}

uint64_t sub_100045764(uint64_t a1)
{
  uint64_t v1;

  return sub_100044324(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error during idMS update recovery key: %@");
}

uint64_t destroy for SetupResult(uint64_t *a1)
{
  sub_10000F494(*a1, a1[1]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for SetupResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for SetupResult(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000F494(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for SetupResult(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for SetupResult(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000F494(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupResult()
{
  return &type metadata for SetupResult;
}

ValueMetadata *type metadata accessor for CustodianIDMSRequestManager()
{
  return &type metadata for CustodianIDMSRequestManager;
}

uint64_t destroy for TrustedContactsSyncResult(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for TrustedContactsSyncResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for TrustedContactsSyncResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for TrustedContactsSyncResult(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrustedContactsSyncResult(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrustedContactsSyncResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactsSyncResult()
{
  return &type metadata for TrustedContactsSyncResult;
}

void sub_100045BC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_100045C20(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  sub_1000461EC(a1, a2, a3, a4, a5);
  swift_release(a2);
  return swift_release(a4);
}

uint64_t sub_100045C50(char a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void (*v32)(_QWORD);
  _OWORD v33[2];
  _OWORD v34[2];

  if (qword_10028AE10 != -1)
    swift_once(&qword_10028AE10, sub_100046EBC);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A8AB0);
  swift_errorRetain(a2);
  v10 = swift_errorRetain(a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v32 = a5;
    v13 = swift_slowAlloc(18, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109378;
    LODWORD(v34[0]) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 4);
    *(_WORD *)(v13 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v15 = _swift_stdlib_bridgeErrorToNSError(a2);
      *(_QWORD *)&v34[0] = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 8);
    }
    else
    {
      *(_QWORD *)&v34[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, (char *)v34 + 8);
      v15 = 0;
    }
    *v14 = v15;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "isWalrusStatusMismatchDetectionEnabled: Fetched new urlBag with success: %{BOOL}d and with error: %@", (uint8_t *)v13, 0x12u);
    v16 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v14, 1, v16);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    a5 = v32;
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(a3, "configurationAtKey:", v17);

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)(v33, v18);
    swift_unknownObjectRelease(v18);
    sub_1000080F4(v33, v34);
    *(_QWORD *)&v33[0] = 0;
    *((_QWORD *)&v33[0] + 1) = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)(v34, v33, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v20 = *((_QWORD *)&v33[0] + 1);
    v21 = String.lowercased()();
    swift_bridgeObjectRelease(v20);
    if (v21._countAndFlagsBits == 49 && v21._object == (void *)0xE100000000000000)
    {
      object = (void *)0xE100000000000000;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v21._countAndFlagsBits, v21._object, 49, 0xE100000000000000, 0) & 1) != 0)goto LABEL_17;
      if (v21._countAndFlagsBits == 1702195828 && v21._object == (void *)0xE400000000000000)
      {
        object = (void *)0xE400000000000000;
        goto LABEL_21;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v21._countAndFlagsBits, v21._object, 1702195828, 0xE400000000000000, 0) & 1) != 0)
      {
LABEL_17:
        object = v21._object;
      }
      else
      {
        if (v21._countAndFlagsBits != 7562617 || v21._object != (void *)0xE300000000000000)
        {
          v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v21._countAndFlagsBits, v21._object, 7562617, 0xE300000000000000, 0);
          v27 = swift_bridgeObjectRelease(v21._object);
          goto LABEL_22;
        }
        object = (void *)0xE300000000000000;
      }
    }
LABEL_21:
    v27 = swift_bridgeObjectRelease(object);
    v28 = 1;
LABEL_22:
    v29 = Logger.logObject.getter(v27);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v31 = 67109120;
      LODWORD(v33[0]) = v28 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v33, (char *)v33 + 4);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "isWalrusStatusMismatchDetectionEnabled: %{BOOL}d", v31, 8u);
      swift_slowDealloc(v31, -1, -1);
    }

    a5(v28 & 1);
    return sub_100006F58(v34);
  }
  v23 = Logger.logObject.getter(v19);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "isWalrusStatusMismatchDetectionEnabled: configuration(atKey) nil", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  return ((uint64_t (*)(_QWORD))a5)(0);
}

uint64_t sub_10004612C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for UrlBagProvider()
{
  return objc_opt_self(_TtC13appleaccountd14UrlBagProvider);
}

uint64_t sub_100046178(uint64_t (*a1)(void))
{
  uint64_t result;

  result = a1();
  if (result)
    return _swift_stdlib_bridgeErrorToNSError(result);
  return result;
}

uint64_t sub_1000461A0(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t sub_1000461C4@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void sub_1000461EC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD *v27;

  v10 = (_QWORD *)swift_allocObject(&unk_100261228, 48, 7);
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v11 = (void *)objc_opt_self(AAPreferences);
  swift_retain(a2);
  swift_retain(a4);
  if (objc_msgSend(v11, "disableADPStateHealing"))
  {
    if (qword_10028AE10 != -1)
      swift_once(&qword_10028AE10, sub_100046EBC);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8AB0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (!os_log_type_enabled(v14, v15))
      goto LABEL_13;
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    v17 = "isWalrusStatusMismatchDetectionEnabled: Defaults are in place to prevent ADP State Healing";
    goto LABEL_12;
  }
  v18 = objc_msgSend((id)objc_opt_self(AKURLBag), "sharedBag");
  if (v18)
  {
    v19 = v18;
    v20 = (_QWORD *)swift_allocObject(&unk_100261250, 48, 7);
    v20[2] = v19;
    v20[3] = a1;
    v20[4] = sub_1000464FC;
    v20[5] = v10;
    v26[4] = sub_10004653C;
    v27 = v20;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1107296256;
    v26[2] = sub_100045BC0;
    v26[3] = &unk_100261268;
    v21 = _Block_copy(v26);
    v22 = v27;
    v23 = v19;
    swift_retain(a1);
    swift_retain(v10);
    swift_release(v22);
    objc_msgSend(v23, "requestNewURLBagIfNecessaryWithCompletion:", v21);
    _Block_release(v21);
    swift_release(v10);

    return;
  }
  if (qword_10028AE10 != -1)
    swift_once(&qword_10028AE10, sub_100046EBC);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100005288(v24, (uint64_t)qword_1002A8AB0);
  v14 = Logger.logObject.getter(v25);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    v17 = "isWalrusStatusMismatchDetectionEnabled: urlBag is nil";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v17, v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
LABEL_13:

  sub_1000BFB40(0, a2, a3, a4);
  swift_release(v10);
}

uint64_t sub_1000464D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000464FC(uint64_t a1)
{
  _QWORD *v1;

  return sub_1000BFB3C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100046508()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004653C(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100045C50(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(_QWORD))(v2 + 32));
}

void *sub_100046548()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = *(void **)(v0 + 24);
  v2 = objc_msgSend(v1, "primaryAuthKitAccount");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v1, "DSIDForAccount:", v2);
  v5 = v4;
  if (v4)
  {
    v6 = objc_msgSend(v4, "stringValue");

    v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  }

  return v5;
}

uint64_t sub_100046604()
{
  return sub_100046700((SEL *)&selRef_custodianListVersionForAccount_);
}

void *sub_100046610()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, "aa_primaryAppleAccount");
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "aa_altDSID");
    v5 = objc_msgSend(v1, "aa_authKitAccountForAltDSID:", v4);

    if (v5)
    {
      v6 = objc_msgSend(*(id *)(v0 + 24), "custodianInfosForAccount:", v5);
      if (v6)
      {
        v7 = v6;
        v8 = sub_1000080B4(&qword_10028C088);
        v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

        return v3;
      }

    }
    return 0;
  }
  return v3;
}

uint64_t sub_1000466F4()
{
  return sub_100046700((SEL *)&selRef_beneficiaryListVersionForAccount_);
}

uint64_t sub_100046700(SEL *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;

  v3 = *(void **)(v1 + 16);
  v4 = objc_msgSend(v3, "aa_primaryAppleAccount");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = objc_msgSend(v4, "aa_altDSID");
  v7 = objc_msgSend(v3, "aa_authKitAccountForAltDSID:", v6);

  if (!v7)
    return 0;
  v8 = objc_msgSend(*(id *)(v1 + 24), *a1, v7);
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  return v10;
}

unint64_t sub_1000467E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  id v4;
  id v5;
  id v6;

  v1 = *(void **)(v0 + 16);
  v2 = objc_msgSend(v1, "aa_primaryAppleAccount");
  v3 = (unint64_t)v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, "aa_altDSID");
    v5 = objc_msgSend(v1, "aa_authKitAccountForAltDSID:", v4);

    if (!v5)
      return 0;
    v6 = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    v3 = (unint64_t)objc_msgSend(v6, "securityLevelForAccount:", v5);

    if ((v3 & 0x8000000000000000) != 0)
    {
      __break(1u);
      return 0;
    }
  }
  return v3;
}

id sub_1000468BC()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)(v0 + 16);
  result = objc_msgSend(v1, "aa_primaryAppleAccount");
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "aa_altDSID");
    v5 = objc_msgSend(v1, "aa_authKitAccountForAltDSID:", v4);

    if (v5)
    {
      v6 = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
      v7 = objc_msgSend(v6, "securityLevelForAccount:", v5);

      return (id)(v7 == (id)4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_100046994(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  id v8;

  v3 = *(void **)(v1 + 16);
  v8 = 0;
  v4 = objc_msgSend(v3, "saveVerifiedAccount:error:", a1, &v8);
  v5 = v8;
  if (v4)
    return v8;
  v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

void sub_100046A3C(unsigned __int8 a1, unsigned __int8 a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  void *v9;
  id v10;
  void *v11;
  id v12;
  NSString v13;
  id v14;
  NSString v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;
  uint64_t v26;

  v9 = *(void **)(v4 + 16);
  v10 = objc_msgSend(v9, "aa_primaryAppleAccount");
  if (v10)
  {
    v11 = v10;
    v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1);
    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setAccountProperty:forKey:", v12, v13);

    v14 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a2);
    v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setAccountProperty:forKey:", v14, v15);

    v16 = swift_allocObject(&unk_100261318, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    aBlock[4] = sub_100046C84;
    v25 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100045BC0;
    aBlock[3] = &unk_100261330;
    v17 = _Block_copy(aBlock);
    v18 = v25;
    v19 = v11;
    swift_retain(a4);
    swift_release(v18);
    objc_msgSend(v9, "saveAccount:withCompletionHandler:", v19, v17);
    _Block_release(v17);

  }
  else
  {
    type metadata accessor for AACustodianError(0);
    v21 = v20;
    v26 = -7002;
    v22 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v23 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v26, v22, v21, v23);
    v19 = (id)aBlock[0];
    a3(aBlock[0]);
  }

}

uint64_t sub_100046C60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100046C84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t type metadata accessor for DaemonMessageUtil()
{
  return objc_opt_self(_TtC13appleaccountd17DaemonMessageUtil);
}

uint64_t sub_100046CC8(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8990, 0x6E6F6D656164, 0xE600000000000000);
}

uint64_t sub_100046CE4(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A89A8, 0x74694B64756F6C63, 0xE800000000000000);
}

uint64_t sub_100046D04(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A89C0, 0x74694B64756F6C63, 0xEC000000636E7953);
}

uint64_t sub_100046D2C(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A89D8, 0x6169646F74737563, 0xE90000000000006ELL);
}

uint64_t sub_100046D50(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A89F0, 0x6174697265686E69, 0xEB0000000065636ELL);
}

uint64_t sub_100046D78(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A08, 0x616E65746E69616DLL, 0xEB0000000065636ELL);
}

uint64_t sub_100046DA0(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A20, 0xD000000000000012, 0x800000010020A240);
}

uint64_t sub_100046DC4(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A38, 0x656761726F7473, 0xE700000000000000);
}

uint64_t sub_100046DE4(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A50, 0xD000000000000010, 0x800000010020A260);
}

uint64_t sub_100046E08(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A68, 0xD000000000000014, 0x800000010020A220);
}

uint64_t sub_100046E2C(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A80, 0x4D656574616E616DLL, 0xEF726F7461726769);
}

uint64_t sub_100046E58(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8A98, 0xD000000000000014, 0x800000010020A200);
}

uint64_t *sub_100046E7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_100046EBC(uint64_t a1)
{
  return sub_100046ED4(a1, qword_1002A8AB0, 7365731, 0xE300000000000000);
}

uint64_t sub_100046ED4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = type metadata accessor for Logger(0);
  sub_100046E7C(v7, a2);
  sub_100005288(v7, (uint64_t)a2);
  v8 = qword_10028D328;
  v9 = off_10028D330;
  swift_bridgeObjectRetain(off_10028D330);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

unint64_t sub_100046F58@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100048C24(*a1);
  *a2 = result;
  return result;
}

void sub_100046F80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8990);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = a1;
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_errorRetain(a1);
    v7 = sub_1000080B4((uint64_t *)&unk_10028FB70);
    v8 = String.init<A>(describing:)(&v12, v7);
    v10 = v9;
    v12 = sub_1001DEF4C(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error repairing walrus status - %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

id sub_10004715C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v17;
  uint64_t v18;

  v1 = v0;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8990);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Initiating combined walrus status fetch", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(void **)(v1 + 16);
  v17 = 0;
  v9 = objc_msgSend(v8, "combinedWalrusStatus:", &v17);
  v10 = v9;
  if (v17)
  {
    v11 = v17;

    swift_willThrow(v12);
    v10 = 0;
LABEL_14:

    return v10;
  }
  if (v9)
  {
    if (qword_10028AE10 != -1)
      swift_once(&qword_10028AE10, sub_100046EBC);
    sub_100005288(v2, (uint64_t)qword_1002A8AB0);
    v11 = v10;
    v13 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 134218496;
      v17 = -[NSObject pcsWalrusStatus](v11, "pcsWalrusStatus");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *(_WORD *)(v15 + 12) = 2048;
      v17 = -[NSObject octagonWalrusStatus](v11, "octagonWalrusStatus");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *(_WORD *)(v15 + 22) = 2048;
      v17 = -[NSObject escrowWalrusStatus](v11, "escrowWalrusStatus");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "CombinedWalrusStatus: pcs:%lu octagon:%lu escrow:%lu", (uint8_t *)v15, 0x20u);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

      v13 = v11;
    }

    v10 = -[NSObject mismatchDetected](v11, "mismatchDetected");
    goto LABEL_14;
  }
  return v10;
}

uint64_t sub_100047440(char a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  _BYTE v26[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v26, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    if (a2)
    {
      swift_errorRetain(a2);
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v10 = type metadata accessor for Logger(0);
      sub_100005288(v10, (uint64_t)qword_1002A8990);
      v11 = swift_errorRetain(a2);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = a4;
        v15 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 138412290;
        v16 = _convertErrorToNSError(_:)(a2);
        v25 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
        *v15 = v16;
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error fetch walrus recovery key availability: %@", v14, 0xCu);
        v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v15, 1, v17);
        v18 = v15;
        a4 = v24;
        swift_slowDealloc(v18, -1, -1);
        swift_slowDealloc(v14, -1, -1);
      }
      else
      {
        swift_errorRelease(a2);
      }

      a4(1);
      swift_errorRelease(a2);
    }
    else
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100005288(v19, (uint64_t)qword_1002A8990);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.debug.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v23 = 67109120;
        LODWORD(v25) = a1 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Walrus Recovery Key isAvailable: %{BOOL}d", v23, 8u);
        swift_slowDealloc(v23, -1, -1);
      }

      a4(a1 & 1);
    }
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_100047714()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;

  v1 = *(void **)(v0 + 24);
  v37 = 0;
  v2 = objc_msgSend(v1, "verifyRecoveryKeyObservingSystemsHaveMatchingStateWithError:", &v37);
  v3 = v37;
  if (v2)
  {
    v4 = v37;
    return 1;
  }
  v5 = v37;
  v6 = (void *)_convertNSErrorToError(_:)(v3);

  swift_willThrow(v7);
  v37 = v6;
  swift_errorRetain(v6);
  v8 = sub_1000080B4(&qword_10028E850);
  v9 = sub_10004973C();
  if (swift_dynamicCast(&v34, &v37, v8, v9, 0))
  {
    v10 = v34;
    if (objc_msgSend(v34, "cdp_isCDPErrorWithCode:", -5317))
    {
      swift_errorRelease(v6);
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v11 = type metadata accessor for Logger(0);
      sub_100005288(v11, (uint64_t)qword_1002A8990);
      v12 = v10;
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v36 = v16;
        *(_DWORD *)v15 = 136315138;
        v17 = v12;
        v18 = objc_msgSend(v17, "description");
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        v33 = sub_1001DEF4C(v19, v21, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

        swift_bridgeObjectRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "recoveryKeyObservingSystemsHaveMatchingState error: %s", v15, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

      }
      swift_errorRelease(v37);
      return 0;
    }

  }
  swift_errorRelease(v37);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A8990);
  swift_errorRetain(v6);
  v23 = swift_errorRetain(v6);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (!os_log_type_enabled(v24, v25))
  {
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    swift_errorRelease(v6);

    return 1;
  }
  v26 = (uint8_t *)swift_slowAlloc(12, -1);
  v27 = (void *)swift_slowAlloc(32, -1);
  v37 = v27;
  *(_DWORD *)v26 = 136315138;
  v34 = v6;
  swift_errorRetain(v6);
  v28 = String.init<A>(describing:)(&v34, v8);
  v30 = v29;
  v34 = (id)sub_1001DEF4C(v28, v29, (uint64_t *)&v37);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
  swift_bridgeObjectRelease(v30);
  swift_errorRelease(v6);
  swift_errorRelease(v6);
  _os_log_impl((void *)&_mh_execute_header, v24, v25, "recoveryKeyObservingSystemsHaveMatchingState error: %s", v26, 0xCu);
  v31 = 1;
  swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v27, -1, -1);
  swift_slowDealloc(v26, -1, -1);

  swift_errorRelease(v6);
  return v31;
}

uint64_t sub_100047B74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  id v46;
  uint64_t v47;
  id v48;

  v1 = *(void **)(v0 + 24);
  v48 = 0;
  v2 = 1;
  objc_msgSend(v1, "shouldPerformRepairWithOptionForceFetch:error:", 1, &v48);
  if (!v48)
    return v2;
  v3 = v48;
  swift_willThrow(v3);
  v48 = v3;
  v4 = v3;
  v5 = sub_1000080B4(&qword_10028E850);
  v6 = sub_10004973C();
  if ((swift_dynamicCast(&v46, &v48, v5, v6, 0) & 1) != 0)
  {
    v7 = v46;
    v8 = objc_msgSend(v7, "cdp_isCDPErrorWithCode:", -5305);

    if (v8)
    {

      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v9 = type metadata accessor for Logger(0);
      sub_100005288(v9, (uint64_t)qword_1002A8990);
      v10 = v7;
      v11 = Logger.logObject.getter(v10);
      v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v11, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = swift_slowAlloc(32, -1);
        v47 = v15;
        *(_DWORD *)v14 = 136315138;
        v16 = v10;
        v17 = objc_msgSend(v16, "description");
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v45 = sub_1001DEF4C(v18, v20, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v11, v13, "Missing escrow record detected: %s", v14, 0xCu);
        swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

      }
      swift_errorRelease(v48);
      return 2;
    }
    if (objc_msgSend(v7, "cdp_isCDPErrorWithCode:", -5322))
    {

      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v21 = type metadata accessor for Logger(0);
      sub_100005288(v21, (uint64_t)qword_1002A8990);
      v22 = v7;
      v23 = Logger.logObject.getter(v22);
      v25 = static os_log_type_t.default.getter(v24);
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v27 = swift_slowAlloc(32, -1);
        v47 = v27;
        *(_DWORD *)v26 = 136315138;
        v28 = v22;
        v29 = objc_msgSend(v28, "description");
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v32 = v31;

        v45 = sub_1001DEF4C(v30, v32, &v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

        swift_bridgeObjectRelease(v32);
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "Out of sync escrow record detected: %s", v26, 0xCu);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

      }
      else
      {

      }
      swift_errorRelease(v48);
      return 4;
    }

  }
  swift_errorRelease(v48);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v33 = type metadata accessor for Logger(0);
  sub_100005288(v33, (uint64_t)qword_1002A8990);
  v34 = v4;
  v2 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled((os_log_t)v2, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (void *)swift_slowAlloc(32, -1);
    v48 = v38;
    *(_DWORD *)v37 = 136315138;
    v46 = v34;
    v39 = v34;
    v40 = String.init<A>(describing:)(&v46, v5);
    v42 = v41;
    v46 = (id)sub_1001DEF4C(v40, v41, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);

    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, v36, "Could not determine escrow record state: %s", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

  }
  swift_willThrow(v43);
  return v2;
}

uint64_t sub_10004817C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_1000080B4(&qword_10028E850);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1000481FC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_1000080B4(&qword_10028E850);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_DWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t type metadata accessor for CDPRequestController()
{
  return objc_opt_self(_TtC13appleaccountd20CDPRequestController);
}

void sub_10004829C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000482D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  type metadata accessor for AAError(0);
  v2 = v1;
  *(_QWORD *)(v0 - 64) = -4418;
  v3 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v4 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 - 56), v0 - 64, v3, v2, v4);
  return *(_QWORD *)(v0 - 56);
}

id sub_100048588()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSString v6;

  v0 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v1 = objc_msgSend(v0, "aa_primaryAppleAccount");

  if (v1)
  {
    v2 = objc_msgSend(v1, "aa_personID");

    if (v2)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v4 = v3;

      v5 = (void *)objc_opt_self(CDPAccount);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v4);
      v1 = objc_msgSend(v5, "isICDPEnabledForDSID:", v6);

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_10004866C()
{
  return swift_task_switch(sub_100048680, 0, 0);
}

id sub_100048680()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = (void *)objc_opt_self(CDPAccount);
  result = objc_msgSend(v1, "sharedInstance");
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v3 = result;
  v4 = objc_msgSend(result, "contextForPrimaryAccount");
  *(_QWORD *)(v0 + 128) = v4;

  if (v4)
  {
    result = objc_msgSend(v1, "sharedInstance");
    *(_QWORD *)(v0 + 136) = result;
    if (result)
    {
      v5 = result;
      v6 = v0 + 16;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100048860;
      v7 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v8 = (_QWORD *)(v0 + 80);
      v8[1] = 0x40000000;
      v8[2] = sub_10004817C;
      v8[3] = &unk_1002613F0;
      v8[4] = v7;
      objc_msgSend(v5, "octagonStatusForContext:withCompletion:", v4, v8);
      return (id)swift_continuation_await(v6);
    }
    goto LABEL_11;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100005288(v9, (uint64_t)qword_1002A8990);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing context, reporting CliqueStatus.error", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(-1);
}

uint64_t sub_100048860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 144) = v1;
  if (v1)
    v2 = sub_100048900;
  else
    v2 = sub_1000488C0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000488C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 136);

  v2 = *(_QWORD *)(v0 + 120);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100048900()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 128);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100048948()
{
  return swift_task_switch(sub_10004895C, 0, 0);
}

id sub_10004895C()
{
  uint64_t v0;
  void *v1;
  id result;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = (void *)objc_opt_self(CDPAccount);
  result = objc_msgSend(v1, "sharedInstance");
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v3 = result;
  v4 = objc_msgSend(result, "contextForPrimaryAccount");
  *(_QWORD *)(v0 + 120) = v4;

  if (v4)
  {
    result = objc_msgSend(v1, "sharedInstance");
    *(_QWORD *)(v0 + 128) = result;
    if (result)
    {
      v5 = result;
      v6 = v0 + 16;
      *(_QWORD *)(v0 + 56) = v0 + 144;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_100048B3C;
      v7 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v8 = (_QWORD *)(v0 + 80);
      v8[1] = 0x40000000;
      v8[2] = sub_1000481FC;
      v8[3] = &unk_1002613D8;
      v8[4] = v7;
      objc_msgSend(v5, "sosStatusForContext:withCompletion:", v4, v8);
      return (id)swift_continuation_await(v6);
    }
    goto LABEL_11;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100005288(v9, (uint64_t)qword_1002A8990);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing context, reporting SOSCCStatus.error", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  return (id)(*(uint64_t (**)(uint64_t))(v0 + 8))(0xFFFFFFFFLL);
}

uint64_t sub_100048B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_100048BDC;
  else
    v2 = sub_100048B9C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100048B9C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 128);

  v2 = *(unsigned int *)(v0 + 144);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100048BDC()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 128);
  v2 = *(void **)(v0 + 120);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100048C24(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

uint64_t sub_100048C34(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  NSString *v8;
  SEL v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v25[5];
  _QWORD *v26;

  v6 = swift_allocObject(&unk_100261530, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_retain(a2);
  v7 = a3;
  v8 = (NSString *)String._bridgeToObjectiveC()();
  v9 = NSSelectorFromString(v8);

  if (objc_msgSend(*(id *)(a1 + 24), "respondsToSelector:", v9))
  {
    v10 = swift_allocObject(&unk_100261440, 24, 7);
    swift_weakInit(v10 + 16, a1);
    v11 = (_QWORD *)swift_allocObject(&unk_100261558, 40, 7);
    v11[2] = v10;
    v11[3] = sub_100049704;
    v11[4] = v6;
    v25[4] = sub_10004989C;
    v26 = v11;
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 1107296256;
    v25[2] = sub_100045BC0;
    v25[3] = &unk_100261570;
    v12 = _Block_copy(v25);
    v13 = v26;
    swift_retain(v6);
    swift_release(v13);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A8990);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 24)), "performSelector:withObject:", v9, v12);
    _Block_release(v12);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A8990);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    swift_beginAccess(a2 + 16, v25, 1, 0);
    *(_BYTE *)(a2 + 16) = 0;
    dispatch_group_leave(v7);
  }
  return swift_release(v6);
}

uint64_t sub_100048F30(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  NSString *v9;
  SEL v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD v26[5];
  _QWORD *v27;

  v8 = (_QWORD *)swift_allocObject(&unk_1002614B8, 40, 7);
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  swift_retain(a3);
  swift_retain(a4);
  v9 = (NSString *)String._bridgeToObjectiveC()();
  v10 = NSSelectorFromString(v9);

  if (objc_msgSend(*(id *)(a1 + 24), "respondsToSelector:", v10))
  {
    v11 = swift_allocObject(&unk_100261440, 24, 7);
    swift_weakInit(v11 + 16, a1);
    v12 = (_QWORD *)swift_allocObject(&unk_1002614E0, 40, 7);
    v12[2] = v11;
    v12[3] = sub_1000496C8;
    v12[4] = v8;
    v26[4] = sub_10004989C;
    v27 = v12;
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1107296256;
    v26[2] = sub_100045BC0;
    v26[3] = &unk_1002614F8;
    v13 = _Block_copy(v26);
    v14 = v27;
    swift_retain(v8);
    swift_release(v14);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8990);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 24)), "performSelector:withObject:", v10, v13);
    _Block_release(v13);
    return swift_release(v8);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A8990);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    sub_1000D2F20(0, a2, a3, a4);
    return swift_release(v8);
  }
}

void sub_100049244(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  _QWORD *v10;
  id v11;
  NSString *v12;
  SEL v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  id v32;
  _BOOL8 v33;
  uint64_t v34;
  _QWORD aBlock[5];
  _QWORD *v36;
  uint64_t v37;

  v10 = (_QWORD *)swift_allocObject(&unk_100261418, 48, 7);
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v11 = a5;
  swift_retain(a2);
  a4;
  v12 = (NSString *)String._bridgeToObjectiveC()();
  v13 = NSSelectorFromString(v12);

  if (objc_msgSend(*(id *)(a1 + 24), "respondsToSelector:", v13))
  {
    v14 = swift_allocObject(&unk_100261440, 24, 7);
    swift_weakInit(v14 + 16, a1);
    v15 = (_QWORD *)swift_allocObject(&unk_100261468, 40, 7);
    v15[2] = v14;
    v15[3] = sub_10004965C;
    v15[4] = v10;
    aBlock[4] = sub_100049690;
    v36 = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100045BC0;
    aBlock[3] = &unk_100261480;
    v16 = _Block_copy(aBlock);
    v17 = v36;
    swift_retain(v10);
    swift_release(v17);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A8990);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.debug.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Calling stateController.isWalrusRecoveryKeyAvailable via selector", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 24)), "performSelector:withObject:", v13, v16);
    _Block_release(v16);
    swift_release(v10);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A8990);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "AppleAccount change for isWalrusRecoveryKeyAvailable has not been integrated yet", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = (_QWORD *)(a2 + 16);
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess(a2 + 16, aBlock, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 16));
    v37 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0x8000000000000000;
    sub_10001FC90((uint64_t)isa, 0x766F636552736168, 0xEE0079654B797265, isUniquelyReferenced_nonNull_native);
    v31 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v37;
    swift_bridgeObjectRelease(v31);
    swift_endAccess(aBlock);
    if (a5)
    {
      v32 = v11;
      a5 = (void *)sub_1001FE9A0();

    }
    v33 = a3 > 0;
    swift_beginAccess(a2 + 16, aBlock, 0, 0);
    v34 = *v28;
    swift_bridgeObjectRetain(*v28);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(v33, a5, v34);
    swift_release(v10);
    swift_bridgeObjectRelease(v34);

  }
}

uint64_t sub_100049628()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10004965C(char a1)
{
  uint64_t v1;

  sub_1000EBF48(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100049668()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100049690(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100047440(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24));
}

uint64_t sub_10004969C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000496C8(char a1)
{
  uint64_t v1;

  return sub_1000D2F20(a1, *(uint64_t (**)(uint64_t, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000496D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100049704(char a1)
{
  uint64_t v1;

  sub_1000C38F4(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100049710()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_10004973C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028FB90;
  if (!qword_10028FB90)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028FB90);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EscrowRecordState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000497C4 + 4 * byte_10021A07A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000497F8 + 4 * byte_10021A075[v4]))();
}

uint64_t sub_1000497F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049800(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100049808);
  return result;
}

uint64_t sub_100049814(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004981CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100049820(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049828(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EscrowRecordState()
{
  return &type metadata for EscrowRecordState;
}

unint64_t sub_100049848()
{
  unint64_t result;

  result = qword_10028D488;
  if (!qword_10028D488)
  {
    result = swift_getWitnessTable(&unk_10021A17C, &type metadata for EscrowRecordState);
    atomic_store(result, (unint64_t *)&qword_10028D488);
  }
  return result;
}

Class sub_1000498A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  Class v10;
  uint64_t v12;
  Class v13;

  v1 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  v7 = *v6;
  v8 = v6[1];
  sub_10000F450(*v6, v8);
  sub_1000FADB8(v7, v8);
  v10 = v9;
  sub_10000F494(v7, v8);
  sub_100027FE8(v0, (uint64_t)v4, type metadata accessor for BeneficiaryInfoRecord);
  if (!v10)
    v10 = sub_10005C77C((uint64_t)v4);
  sub_100028388((uint64_t)v4, type metadata accessor for BeneficiaryInfoRecord);
  v13 = v10;
  sub_100012BE8((id *)&v13);
  objc_autoreleasePoolPop(v5);
  return v10;
}

Class sub_10004999C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  Class v10;
  uint64_t v12;
  Class v13;

  v1 = type metadata accessor for IdentityRecord(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t *)(v0 + *(int *)(v1 + 60));
  v7 = *v6;
  v8 = v6[1];
  sub_10000F450(*v6, v8);
  sub_1000FADB8(v7, v8);
  v10 = v9;
  sub_10000F494(v7, v8);
  sub_100027FE8(v0, (uint64_t)v4, type metadata accessor for IdentityRecord);
  if (!v10)
    v10 = sub_10005C944((uint64_t)v4, 0x797469746E656449, (void *)0xEE0064726F636552);
  sub_100028388((uint64_t)v4, type metadata accessor for IdentityRecord);
  v13 = v10;
  sub_100070180((id *)&v13);
  objc_autoreleasePoolPop(v5);
  return v10;
}

Class sub_100049AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  Class v10;
  uint64_t v12;
  Class v13;

  v1 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t *)(v0 + *(int *)(v1 + 44));
  v7 = *v6;
  v8 = v6[1];
  sub_10000F450(*v6, v8);
  sub_1000FADB8(v7, v8);
  v10 = v9;
  sub_10000F494(v7, v8);
  sub_100027FE8(v0, (uint64_t)v4, type metadata accessor for CustodianRecord);
  if (!v10)
    v10 = sub_10005C944((uint64_t)v4, 0x6169646F74737543, (void *)0xEF64726F6365526ELL);
  sub_100028388((uint64_t)v4, type metadata accessor for CustodianRecord);
  v13 = v10;
  sub_1000950CC((id *)&v13);
  objc_autoreleasePoolPop(v5);
  return v10;
}

Class sub_100049BD4()
{
  return sub_100049D94(type metadata accessor for BenefactorInfoRecord, 0xD00000000000001FLL, (void *)0x800000010020A500, (void (*)(Class *))sub_10016F9E4);
}

Class sub_100049C00()
{
  return sub_100049C2C(type metadata accessor for CustodianHealthRecord, 0xD000000000000015, (void *)0x800000010020A450, (void (*)(Class *))sub_10016AE40);
}

Class sub_100049C2C(uint64_t (*a1)(_QWORD), uint64_t a2, void *a3, void (*a4)(Class *))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  objc_class *v17;
  Class v18;
  uint64_t v20;
  Class v21;

  v9 = a1(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = objc_autoreleasePoolPush();
  v14 = (uint64_t *)(v4 + *(int *)(v9 + 32));
  v15 = *v14;
  v16 = v14[1];
  sub_10000F450(*v14, v16);
  sub_1000FADB8(v15, v16);
  v18 = v17;
  sub_10000F494(v15, v16);
  sub_100027FE8(v4, (uint64_t)v12, a1);
  if (!v18)
    v18 = sub_10005CB00((uint64_t)v12, a1, a2, a3);
  sub_100028388((uint64_t)v12, a1);
  v21 = v18;
  a4(&v21);
  objc_autoreleasePoolPop(v13);
  return v18;
}

Class sub_100049D3C()
{
  return sub_100049C2C(type metadata accessor for CustodianshipInfoRecord, 0xD000000000000017, (void *)0x8000000100209FC0, (void (*)(Class *))sub_1000ED6BC);
}

Class sub_100049D68()
{
  return sub_100049D94(type metadata accessor for InheritanceHealthRecord, 0xD000000000000017, (void *)0x800000010020A430, (void (*)(Class *))sub_1000C4E24);
}

Class sub_100049D94(uint64_t (*a1)(_QWORD), uint64_t a2, void *a3, void (*a4)(Class *))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  objc_class *v17;
  Class v18;
  uint64_t v20;
  Class v21;

  v9 = a1(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v20 - v11;
  v13 = objc_autoreleasePoolPush();
  v14 = (uint64_t *)(v4 + *(int *)(v9 + 32));
  v15 = *v14;
  v16 = v14[1];
  sub_10000F450(*v14, v16);
  sub_1000FADB8(v15, v16);
  v18 = v17;
  sub_10000F494(v15, v16);
  sub_100027FE8(v4, (uint64_t)v12, a1);
  if (!v18)
    v18 = sub_10005CCCC((uint64_t)v12, a1, a2, a3);
  sub_100028388((uint64_t)v12, a1);
  v21 = v18;
  a4(&v21);
  objc_autoreleasePoolPop(v13);
  return v18;
}

Class sub_100049EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  Class v10;
  uint64_t v12;
  Class v13;

  v1 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  v7 = *v6;
  v8 = v6[1];
  sub_10000F450(*v6, v8);
  sub_1000FADB8(v7, v8);
  v10 = v9;
  sub_10000F494(v7, v8);
  sub_100027FE8(v0, (uint64_t)v4, type metadata accessor for CustodianRecoveryInfoRecord);
  if (!v10)
    v10 = sub_10005CB00((uint64_t)v4, type metadata accessor for CustodianRecoveryInfoRecord, 0xD00000000000001BLL, (void *)0x800000010020A490);
  sub_100028388((uint64_t)v4, type metadata accessor for CustodianRecoveryInfoRecord);
  v13 = v10;
  sub_1001FA904((id *)&v13);
  objc_autoreleasePoolPop(v5);
  return v10;
}

Class sub_100049FC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  objc_class *v9;
  Class v10;
  uint64_t v12;
  Class v13;

  v1 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_autoreleasePoolPush();
  v6 = (uint64_t *)(v0 + *(int *)(v1 + 40));
  v7 = *v6;
  v8 = v6[1];
  sub_10000F450(*v6, v8);
  sub_1000FADB8(v7, v8);
  v10 = v9;
  sub_10000F494(v7, v8);
  sub_100027FE8(v0, (uint64_t)v4, type metadata accessor for InheritanceInvitationRecord);
  if (!v10)
    v10 = sub_10005CE98();
  sub_100028388((uint64_t)v4, type metadata accessor for InheritanceInvitationRecord);
  v13 = v10;
  sub_100200390((id *)&v13);
  objc_autoreleasePoolPop(v5);
  return v10;
}

uint64_t sub_10004A0C4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for BenefactorHealthCheck(0);
  v0 = sub_1000080B4(&qword_10028D568);
  result = String.init<A>(describing:)(&v3, v0);
  qword_10028D490 = result;
  *(_QWORD *)algn_10028D498 = v2;
  return result;
}

uint64_t sub_10004A10C(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  void (*v54)(uint64_t);
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  _QWORD *v77;
  _BYTE v78[12];
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t);
  uint64_t v85;
  NSObject *v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t aBlock[5];
  _QWORD *v93;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = &v78[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v17 - 8);
  v90 = v17;
  __chkstk_darwin(v17, v18);
  v88 = &v78[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for DispatchQoS.QoSClass(0);
  v22 = __chkstk_darwin(v20, v21);
  v25 = &v78[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v38 = swift_errorRetain(a1);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      aBlock[0] = v42;
      *(_DWORD *)v41 = 136315394;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v43 = qword_10028D490;
      v44 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v91 = (void *)sub_1001DEF4C(v43, v44, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, aBlock);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v41 + 12) = 2080;
      v91 = (void *)a1;
      swift_errorRetain(a1);
      v45 = sub_1000080B4(&qword_10028E850);
      v46 = String.init<A>(describing:)(&v91, v45);
      v48 = v47;
      v91 = (void *)sub_1001DEF4C(v46, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, aBlock);
      swift_bridgeObjectRelease(v48);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s - failed to start health check. An error occured while fetching benefactors. Error :- %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);

    }
    swift_errorRetain(a1);
    a3(a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v87 = v16;
    v26 = *(char **)(a1 + 16);
    if (v26)
    {
      v80 = v23;
      v81 = v22;
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v82 = v13;
      v83 = v12;
      v27 = type metadata accessor for Logger(0);
      sub_100005288(v27, (uint64_t)qword_1002A8A08);
      swift_bridgeObjectRetain(a1);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter();
      v86 = v29;
      v31 = os_log_type_enabled(v29, (os_log_type_t)v30);
      v84 = a3;
      v85 = a4;
      if (v31)
      {
        v79 = v30;
        v32 = swift_slowAlloc(22, -1);
        v33 = swift_slowAlloc(32, -1);
        aBlock[0] = v33;
        *(_DWORD *)v32 = 136315394;
        if (qword_10028AE18 != -1)
          swift_once(&qword_10028AE18, sub_10004A0C4);
        v34 = qword_10028D490;
        v35 = *(_QWORD *)algn_10028D498;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
        v91 = (void *)sub_1001DEF4C(v34, v35, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, aBlock);
        swift_bridgeObjectRelease(v35);
        *(_WORD *)(v32 + 12) = 2048;
        v91 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, aBlock);
        sub_1000057B0(a1, 0);
        v36 = v86;
        _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v79, "%s - performing health check on %ld benefactors", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {
        sub_1000057B0(a1, 0);

      }
      v59 = dispatch_group_create();
      v60 = swift_allocObject(&unk_1002616E0, 24, 7);
      *(_QWORD *)(v60 + 16) = 0;
      v61 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
      v62 = a1 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
      v63 = *(_QWORD *)(v61 + 72);
      swift_bridgeObjectRetain(a1);
      do
      {
        sub_10004A9D4(v62, v59, a5, v60, a6);
        v62 += v63;
        --v26;
      }
      while (v26);
      sub_1000057B0(a1, 0);
      sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
      v65 = v80;
      v64 = v81;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v80 + 104))(v25, enum case for DispatchQoS.QoSClass.background(_:), v81);
      v66 = (void *)static OS_dispatch_queue.global(qos:)(v25);
      (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v25, v64);
      v67 = (_QWORD *)swift_allocObject(&unk_100261708, 40, 7);
      v68 = v85;
      v67[2] = v84;
      v67[3] = v68;
      v67[4] = v60;
      aBlock[4] = (uint64_t)sub_100043394;
      v93 = v67;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000051D0;
      aBlock[3] = (uint64_t)&unk_100261720;
      v69 = _Block_copy(aBlock);
      swift_retain(v68);
      v70 = swift_retain(v60);
      v71 = v88;
      static DispatchQoS.unspecified.getter(v70);
      v91 = &_swiftEmptyArrayStorage;
      v72 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v73 = sub_1000080B4((uint64_t *)&unk_100295A00);
      v74 = sub_100008628();
      v75 = v87;
      v76 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v73, v74, v83, v72);
      OS_dispatch_group.notify(qos:flags:queue:execute:)(v71, v75, v66, v69);

      _Block_release(v69);
      (*(void (**)(_BYTE *, uint64_t))(v82 + 8))(v75, v76);
      (*(void (**)(_BYTE *, uint64_t))(v89 + 8))(v71, v90);
      v77 = v93;
      swift_release(v60);
      return swift_release(v77);
    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v50 = type metadata accessor for Logger(0);
      v51 = sub_100005288(v50, (uint64_t)qword_1002A8A08);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = a3;
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        aBlock[0] = v56;
        *(_DWORD *)v55 = 136315138;
        if (qword_10028AE18 != -1)
          swift_once(&qword_10028AE18, sub_10004A0C4);
        v57 = qword_10028D490;
        v58 = *(_QWORD *)algn_10028D498;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
        v91 = (void *)sub_1001DEF4C(v57, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, aBlock);
        swift_bridgeObjectRelease(v58);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s - no benefactors found. Skipping Benefactor Health Check", v55, 0xCu);
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);

        return ((uint64_t (*)(_QWORD))v54)(0);
      }
      else
      {

        return ((uint64_t (*)(_QWORD))a3)(0);
      }
    }
  }
}

void sub_10004A9D4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v41 = a5;
  v10 = type metadata accessor for BenefactorInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v15 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v40 - v18;
  if (*(_QWORD *)(a1 + *(int *)(v17 + 24)) == 2)
  {
    dispatch_group_enter(a2);
    sub_100027FE8(a1, (uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
    v20 = *(unsigned __int8 *)(v11 + 80);
    v21 = (v20 + 16) & ~v20;
    v40 = a3;
    v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v42 = v5;
    v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject(&unk_100261758, v24 + 8, v20 | 7);
    sub_10003B730((uint64_t)v19, v25 + v21, type metadata accessor for BenefactorInfoRecord);
    *(_QWORD *)(v25 + v22) = a4;
    *(_QWORD *)(v25 + v23) = a2;
    *(_QWORD *)(v25 + v24) = v41;
    swift_retain(a4);
    v26 = a2;
    sub_10004B04C(a1, (uint64_t)sub_10005D554, v25);
    swift_release(v25);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v28 = sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v42 = v5;
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v45 = v32;
      *(_DWORD *)v31 = 136315394;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v33 = qword_10028D490;
      v34 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v43 = sub_1001DEF4C(v33, v34, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v31 + 12) = 2080;
      v35 = type metadata accessor for UUID(0);
      v36 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
      v39 = v38;
      v43 = sub_1001DEF4C(v37, v38, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v39);
      sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - BenefactorInfoRecord with beneficiaryID - %s is not accepted. Skipping health check.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);

    }
  }
}

void sub_10004AD6C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30[3];

  v8 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = (uint64_t *)(a3 + 16);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A8A08);
    v14 = sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v28 = a4;
      v17 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v30[0] = v27;
      *(_DWORD *)v17 = 136315394;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v19 = qword_10028D490;
      v18 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v29 = sub_1001DEF4C(v19, v18, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v17 + 12) = 2080;
      v20 = type metadata accessor for UUID(0);
      v21 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      v24 = v23;
      v29 = sub_1001DEF4C(v22, v23, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease(v24);
      sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - failed for benefactor - %s", (uint8_t *)v17, 0x16u);
      v25 = v27;
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      a4 = v28;
    }
    else
    {
      sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);

    }
    swift_beginAccess(v12, v30, 1, 0);
    v26 = *v12;
    *v12 = a1;
    swift_errorRelease(v26);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_10004B04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[6];

  v4 = v3;
  v54 = a2;
  v55 = *v3;
  v56 = a3;
  v6 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_100295380);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BenefactorInfoRecord(0);
  v51 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v52 = v17;
  v53 = (uint64_t)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v46 - v19;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v22 = sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for BenefactorInfoRecord);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v47 = v10;
    v48 = v3;
    v49 = a1;
    v50 = (_QWORD *)v6;
    v25 = swift_slowAlloc(22, -1);
    v46 = swift_slowAlloc(64, -1);
    v60[0] = v46;
    *(_DWORD *)v25 = 136315394;
    if (qword_10028AE18 != -1)
      swift_once(&qword_10028AE18, sub_10004A0C4);
    v26 = qword_10028D490;
    v27 = *(_QWORD *)algn_10028D498;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
    v59 = sub_1001DEF4C(v26, v27, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v25 + 12) = 2080;
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v6 = (uint64_t)v50;
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v50, v28);
    v31 = v30;
    v59 = sub_1001DEF4C(v29, v30, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v20, type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - fetching health record for beneficiaryID: %s", (uint8_t *)v25, 0x16u);
    v32 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    v33 = v58;
    v4 = v48;
    a1 = v49;
    v10 = v47;
  }
  else
  {
    sub_100028388((uint64_t)v20, type metadata accessor for BenefactorInfoRecord);

    v33 = v58;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v9);
  Dependency.wrappedValue.getter(v60, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v50 = sub_10000732C(v60, v60[3]);
  v34 = (uint64_t)v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v57, a1, v6);
  v35 = swift_allocObject(&unk_100261780, 24, 7);
  swift_weakInit(v35 + 16, v4);
  v36 = v53;
  sub_100027FE8(a1, v53, type metadata accessor for BenefactorInfoRecord);
  v37 = *(unsigned __int8 *)(v51 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = (v52 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8;
  v42 = swift_allocObject(&unk_1002617A8, v41 + 8, v37 | 7);
  sub_10003B730(v36, v42 + v38, type metadata accessor for BenefactorInfoRecord);
  v43 = (_QWORD *)(v42 + v39);
  v44 = v56;
  *v43 = v54;
  v43[1] = v44;
  *(_QWORD *)(v42 + v40) = v35;
  *(_QWORD *)(v42 + v41) = v55;
  swift_retain(v44);
  swift_retain(v35);
  sub_1000CE0F0(v34, (uint64_t)sub_10005D6D0, v42);
  swift_release(v42);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v34, v6);
  swift_release(v35);
  return sub_100006F58(v60);
}

uint64_t sub_10004B50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];

  v52 = a3;
  v5 = *v3;
  v49 = a2;
  v50 = v5;
  v6 = sub_1000080B4((uint64_t *)&unk_100295380);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v48 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v41 - v16;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A8A08);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19 = v46(v17, a1, v10);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v20, v22))
  {
    v43 = v12;
    v44 = v6;
    v45 = a1;
    v23 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v54[0] = v42;
    *(_DWORD *)v23 = 136315394;
    if (qword_10028AE18 != -1)
      swift_once(&qword_10028AE18, sub_10004A0C4);
    v24 = qword_10028D490;
    v25 = *(_QWORD *)algn_10028D498;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
    v53 = sub_1001DEF4C(v24, v25, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v23 + 12) = 2080;
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v10, v26);
    v29 = v28;
    v53 = sub_1001DEF4C(v27, v28, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "%s - starting individual beneficiary health check for %s", (uint8_t *)v23, 0x16u);
    v30 = v42;
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v6 = v44;
    a1 = v45;
    v12 = v43;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);

  }
  v31 = v51;
  v32 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v9, v51 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v6);
  Dependency.wrappedValue.getter(v54, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  sub_10000732C(v54, v54[3]);
  v33 = v48;
  v46(v48, a1, v10);
  v34 = *(unsigned __int8 *)(v11 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = (v12 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (char *)swift_allocObject(&unk_100261ED8, v36 + 8, v34 | 7);
  v38 = v49;
  *((_QWORD *)v37 + 2) = v31;
  *((_QWORD *)v37 + 3) = v38;
  v39 = v52;
  *((_QWORD *)v37 + 4) = v52;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v37[v35], v33, v10);
  *(_QWORD *)&v37[v36] = v50;
  swift_retain(v31);
  swift_retain(v39);
  sub_1000CC928(a1, (uint64_t)sub_10005F8F8, (uint64_t)v37);
  swift_release(v37);
  return sub_100006F58(v54);
}

uint64_t sub_10004B914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t *v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v47 = a5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v48 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v45 = (void (*)(uint64_t))a3;
    v46 = a4;
    v20 = *v19;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    v22 = v9;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v24 = v48;
    v25 = v8;
    v23(v48, v47, v8);
    swift_errorRetain(v20);
    v26 = swift_errorRetain(v20);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(32, -1);
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      v47 = swift_slowAlloc(64, -1);
      v50 = v47;
      *(_DWORD *)v29 = 136315650;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v30 = qword_10028D490;
      v31 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v49 = sub_1001DEF4C(v30, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v29 + 12) = 2080;
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = v48;
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v25, v32);
      v36 = v35;
      v49 = sub_1001DEF4C(v34, v35, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v36);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v33, v25);
      *(_WORD *)(v29 + 22) = 2112;
      v37 = _convertErrorToNSError(_:)(v20);
      v49 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      v38 = v44;
      *v44 = v37;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s - error fetching beneficiary record for %s: %@", (uint8_t *)v29, 0x20u);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v38, 1, v39);
      swift_slowDealloc(v38, -1, -1);
      v40 = v47;
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v8);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    v42 = v45;
    swift_errorRetain(v20);
    v42(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  else
  {
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    sub_10004B04C((uint64_t)v15, a3, a4);
    return sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_10004BD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage;
  v2 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__storageController;
  v4 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004BDDC()
{
  return type metadata accessor for BenefactorHealthCheck(0);
}

uint64_t type metadata accessor for BenefactorHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_10028D4D8;
  if (!qword_10028D4D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BenefactorHealthCheck);
  return result;
}

void sub_10004BE20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

uint64_t sub_10004BEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10005D144(a3, a4);
}

uint64_t sub_10004BEF0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t Strong;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (**v66)(uint64_t);
  void (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  void (*v81)(uint64_t);
  uint64_t v82;
  uint64_t v83[5];
  uint64_t v84;
  _BYTE v85[24];

  v75 = a6;
  v79 = a5;
  v80 = a3;
  v81 = a4;
  v78 = a2;
  v82 = type metadata accessor for UUID(0);
  v77 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v7);
  v76 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_100295380);
  v71 = *(_QWORD **)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InheritanceHealthRecord(0);
  v73 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v73 + 64);
  v16 = __chkstk_darwin(v13, v15);
  v74 = (uint64_t)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v70 - v18;
  v20 = type metadata accessor for BenefactorInfoRecord(0);
  v70 = *(_QWORD *)(v20 - 8);
  v21 = *(_QWORD *)(v70 + 64);
  v23 = __chkstk_darwin(v20, v22);
  v72 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v70 - v25;
  v27 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v70 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v30, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
  {
    v31 = *v30;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A8A08);
    sub_100027FE8(v78, (uint64_t)v26, type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain(v31);
    v33 = swift_errorRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(96, -1);
      v83[0] = v37;
      *(_DWORD *)v36 = 136315650;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v38 = qword_10028D490;
      v39 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v84 = sub_1001DEF4C(v38, v39, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
      swift_bridgeObjectRelease(v39);
      *(_WORD *)(v36 + 12) = 2080;
      v40 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v82, v40);
      v43 = v42;
      v84 = sub_1001DEF4C(v41, v42, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
      swift_bridgeObjectRelease(v43);
      sub_100028388((uint64_t)v26, type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v36 + 22) = 2080;
      v84 = v31;
      swift_errorRetain(v31);
      v44 = sub_1000080B4(&qword_10028E850);
      v45 = String.init<A>(describing:)(&v84, v44);
      v47 = v46;
      v84 = sub_1001DEF4C(v45, v46, v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
      swift_bridgeObjectRelease(v47);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - failed to fetch InheritanceHealthRecord for %s. Error :- %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v26, type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
    }

    swift_errorRetain(v31);
    v80(v31);
    swift_errorRelease(v31);
    return swift_errorRelease(v31);
  }
  else
  {
    v48 = v79 + 16;
    v49 = (uint64_t)v30;
    v50 = (uint64_t)v19;
    sub_10003B730(v49, (uint64_t)v19, type metadata accessor for InheritanceHealthRecord);
    swift_beginAccess(v48, &v84, 0, 0);
    Strong = swift_weakLoadStrong(v48);
    if (Strong)
    {
      v52 = Strong;
      v53 = v71;
      ((void (*)(char *, uint64_t, uint64_t))v71[2])(v12, Strong + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v9);
      Dependency.wrappedValue.getter(v83, v9);
      swift_release(v52);
      ((void (*)(char *, uint64_t))v53[1])(v12, v9);
      v71 = sub_10000732C(v83, v83[3]);
      v54 = (uint64_t)v76;
      v55 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v76, v78, v82);
      v56 = v72;
      sub_100027FE8(v55, v72, type metadata accessor for BenefactorInfoRecord);
      v57 = v74;
      sub_100027FE8(v50, v74, type metadata accessor for InheritanceHealthRecord);
      v58 = *(unsigned __int8 *)(v70 + 80);
      v78 = v50;
      v59 = (v58 + 16) & ~v58;
      v60 = (v21 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
      v61 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8;
      v62 = *(unsigned __int8 *)(v73 + 80);
      v63 = (v62 + v61 + 8) & ~v62;
      v64 = (v14 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
      v65 = swift_allocObject(&unk_1002617D0, v64 + 8, v58 | v62 | 7);
      sub_10003B730(v56, v65 + v59, type metadata accessor for BenefactorInfoRecord);
      v66 = (void (**)(uint64_t))(v65 + v60);
      v67 = v81;
      *v66 = v80;
      v66[1] = v67;
      v68 = v79;
      *(_QWORD *)(v65 + v61) = v79;
      sub_10003B730(v57, v65 + v63, type metadata accessor for InheritanceHealthRecord);
      *(_QWORD *)(v65 + v64) = v75;
      swift_retain(v67);
      swift_retain(v68);
      sub_1000CA860(v54, (uint64_t)sub_10005D8C8, v65);
      swift_release(v65);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v54, v82);
      sub_100028388(v78, type metadata accessor for InheritanceHealthRecord);
      return sub_100006F58(v83);
    }
    else
    {
      return sub_100028388((uint64_t)v19, type metadata accessor for InheritanceHealthRecord);
    }
  }
}

uint64_t sub_10004C59C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t Strong;
  uint64_t v42;
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47[3];

  v45 = a3;
  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v44 = a4;
      v28 = swift_slowAlloc(32, -1);
      v29 = swift_slowAlloc(96, -1);
      v47[0] = v29;
      *(_DWORD *)v28 = 136315650;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v30 = qword_10028D490;
      v31 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v46 = sub_1001DEF4C(v30, v31, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v28 + 12) = 2080;
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      v36 = v35;
      v46 = sub_1001DEF4C(v34, v35, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      swift_bridgeObjectRelease(v36);
      sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v28 + 22) = 2080;
      v46 = v23;
      swift_errorRetain(v23);
      v37 = sub_1000080B4(&qword_10028E850);
      v38 = String.init<A>(describing:)(&v46, v37);
      v40 = v39;
      v46 = sub_1001DEF4C(v38, v39, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - failed to fetch BeneficiaryInfoRecord for %s. Error :- %s", (uint8_t *)v28, 0x20u);
      swift_arrayDestroy(v29, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
    swift_errorRetain(v23);
    v45(v23);
    swift_errorRelease(v23);
    return swift_errorRelease(v23);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    swift_beginAccess(a5 + 16, v47, 0, 0);
    Strong = swift_weakLoadStrong(a5 + 16);
    if (Strong)
    {
      v42 = Strong;
      sub_10004CA08(a6, (uint64_t)v14, (uint64_t)v45, a4);
      swift_release(v42);
    }
    return sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
  }
}

uint64_t sub_10004CA08(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124[24];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[5];
  uint64_t v128;
  _BYTE v129[24];

  v120 = a3;
  v121 = a4;
  v119 = *v4;
  v117 = sub_1000080B4(&qword_10028CCC0);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117, v7);
  v114 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for UUID(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110, v9);
  v108 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111, v12);
  v14 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for InheritanceHealthRecord(0);
  v16 = __chkstk_darwin(v122, v15);
  v118 = (uint64_t)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v107 - v19;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v112 = a1;
  v23 = sub_100027FE8((uint64_t)a1, (uint64_t)v20, type metadata accessor for InheritanceHealthRecord);
  v123 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v113 = a2;
    v26 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v127[0] = v27;
    *(_DWORD *)v26 = 136315394;
    if (qword_10028AE18 != -1)
      swift_once(&qword_10028AE18, sub_10004A0C4);
    v28 = qword_10028D490;
    v29 = *(_QWORD *)algn_10028D498;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
    v128 = sub_1001DEF4C(v28, v29, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v26 + 12) = 2080;
    v30 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v110, v30);
    v33 = v32;
    v128 = sub_1001DEF4C(v31, v32, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
    swift_bridgeObjectRelease(v33);
    sub_100028388((uint64_t)v20, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - verifying benefactor health record for beneficiaryID - %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {
    sub_100028388((uint64_t)v20, type metadata accessor for InheritanceHealthRecord);

  }
  sub_100013528();
  v35 = v34;
  v37 = v36;
  v38 = v122;
  v39 = swift_allocBox(v122);
  v41 = v40;
  v42 = sub_100027FE8((uint64_t)v112, v40, type metadata accessor for InheritanceHealthRecord);
  Date.init()(v42);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 40))(v41 + *(int *)(v38 + 20), v14, v111);
  v43 = (uint64_t *)(v41 + *(int *)(v38 + 24));
  v44 = *v43;
  v45 = v43[1];
  sub_10000F450(*v43, v45);
  sub_10000EA4C(v35, v37);
  v47 = v46;
  v48 = sub_10000F494(v44, v45);
  v113 = v39;
  if ((v47 & 1) != 0)
  {
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v127[0] = v52;
      *(_DWORD *)v51 = 136315138;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v53 = qword_10028D490;
      v54 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v128 = sub_1001DEF4C(v53, v54, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "%s - verified accessKeyHash matches with healthRecord. We're good.", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v39 = v113;
    }
    else
    {

    }
    v75 = swift_retain_n(v39, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      LODWORD(v123) = v77;
      v78 = swift_slowAlloc(22, -1);
      v122 = swift_slowAlloc(64, -1);
      v127[0] = v122;
      *(_DWORD *)v78 = 136315394;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v79 = qword_10028D490;
      v80 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v128 = sub_1001DEF4C(v79, v80, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v80);
      *(_WORD *)(v78 + 12) = 2080;
      v112 = (v78 + 14);
      swift_beginAccess(v41, &v128, 0, 0);
      v81 = v109;
      v82 = v108;
      v83 = v110;
      (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v108, v41, v110);
      v84 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v83, v84);
      v87 = v86;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v83);
      v125 = sub_1001DEF4C(v85, v87, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
      v39 = v113;
      swift_release_n(v113, 2);
      swift_bridgeObjectRelease(v87);
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v123, "%s - benefactor Record %s is healthy!", (uint8_t *)v78, 0x16u);
      v88 = v122;
      swift_arrayDestroy(v122, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

      swift_release_n(v39, 2);
    }
  }
  else
  {
    swift_retain(v39);
    sub_10000F450(v35, v37);
    swift_retain(v39);
    v55 = sub_10000F450(v35, v37);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.info.getter();
    v112 = v56;
    if (os_log_type_enabled(v56, (os_log_type_t)v57))
    {
      LODWORD(v111) = v57;
      v58 = swift_slowAlloc(32, -1);
      v110 = swift_slowAlloc(96, -1);
      v127[0] = v110;
      *(_DWORD *)v58 = 136315650;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v59 = qword_10028D490;
      v60 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v128 = sub_1001DEF4C(v59, v60, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v58 + 12) = 2080;
      swift_beginAccess(v41, v124, 0, 0);
      v61 = (uint64_t *)(v41 + *(int *)(v122 + 24));
      v62 = *v61;
      v63 = v61[1];
      sub_10000F450(*v61, v63);
      v64 = Data.description.getter(v62, v63);
      v66 = v65;
      sub_10000F494(v62, v63);
      v128 = sub_1001DEF4C(v64, v66, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      v67 = v113;
      swift_release_n(v113, 2);
      swift_bridgeObjectRelease(v66);
      *(_WORD *)(v58 + 22) = 2080;
      sub_10000F450(v35, v37);
      v68 = Data.description.getter(v35, v37);
      v70 = v69;
      sub_10000F494(v35, v37);
      v128 = sub_1001DEF4C(v68, v70, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v70);
      sub_10000F494(v35, v37);
      sub_10000F494(v35, v37);
      v71 = v112;
      _os_log_impl((void *)&_mh_execute_header, v112, (os_log_type_t)v111, "%s - accessKey hash did not match! Previous hash: %s New Hash: %s", (uint8_t *)v58, 0x20u);
      v72 = v110;
      swift_arrayDestroy(v110, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      v73 = v58;
      v39 = v67;
      swift_slowDealloc(v73, -1, -1);

    }
    else
    {
      swift_release_n(v39, 2);
      sub_10000F494(v35, v37);
      sub_10000F494(v35, v37);

    }
    v89 = Logger.logObject.getter(v74);
    v90 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(32, -1);
      v127[0] = v92;
      *(_DWORD *)v91 = 136315138;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v93 = qword_10028D490;
      v94 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v128 = sub_1001DEF4C(v93, v94, v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129);
      swift_bridgeObjectRelease(v94);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "%s - updating health record access key hash so owner knows we have the new hash.", v91, 0xCu);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v91, -1, -1);

      v39 = v113;
    }
    else
    {

    }
    swift_beginAccess(v41, &v128, 1, 0);
    v95 = (uint64_t *)(v41 + *(int *)(v122 + 24));
    v96 = *v95;
    v97 = v95[1];
    *v95 = v35;
    v95[1] = v37;
    sub_10000F450(v35, v37);
    sub_10000F494(v96, v97);
  }
  v98 = v116;
  v99 = v114;
  v100 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v114, v115 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__storageController, v117);
  Dependency.wrappedValue.getter(v127, v100);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v99, v100);
  sub_10000732C(v127, v127[3]);
  swift_beginAccess(v41, &v125, 0, 0);
  v101 = v118;
  sub_100027FE8(v41, v118, type metadata accessor for InheritanceHealthRecord);
  v102 = (_QWORD *)swift_allocObject(&unk_1002617F8, 48, 7);
  v103 = v120;
  v104 = v121;
  v102[2] = v39;
  v102[3] = v103;
  v105 = v119;
  v102[4] = v104;
  v102[5] = v105;
  swift_retain(v39);
  swift_retain(v104);
  sub_10004DDD0(v101, (uint64_t)sub_10005D974, (uint64_t)v102);
  swift_release(v102);
  sub_10000F494(v35, v37);
  sub_100028388(v101, type metadata accessor for InheritanceHealthRecord);
  sub_100006F58(v127);
  return swift_release(v39);
}

uint64_t sub_10004D730(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[16];
  uint64_t v59;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v13, v14);
  v16 = (uint64_t *)((char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v16, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v16, v13) == 1)
  {
    v53 = v9;
    v55 = a3;
    v17 = *v16;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A8A08);
    swift_retain(a2);
    swift_errorRetain(v17);
    swift_retain(a2);
    v19 = swift_errorRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      LODWORD(v52) = v21;
      v54 = a4;
      v22 = swift_slowAlloc(32, -1);
      v51 = swift_slowAlloc(96, -1);
      v59 = v51;
      *(_DWORD *)v22 = 136315650;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v24 = qword_10028D490;
      v23 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v57 = sub_1001DEF4C(v24, v23, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v22 + 12) = 2080;
      type metadata accessor for InheritanceHealthRecord(0);
      v25 = swift_projectBox(a2);
      swift_beginAccess(v25, &v57, 0, 0);
      v26 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v12, v25, v8);
      v27 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v8, v27);
      v30 = v29;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v8);
      v56 = sub_1001DEF4C(v28, v30, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v22 + 22) = 2080;
      v56 = v17;
      swift_errorRetain(v17);
      v31 = sub_1000080B4(&qword_10028E850);
      v32 = String.init<A>(describing:)(&v56, v31);
      v34 = v33;
      v56 = sub_1001DEF4C(v32, v33, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_bridgeObjectRelease(v34);
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v52, "%s - error updating InheritanceHealthRecord %s: %s", (uint8_t *)v22, 0x20u);
      v35 = v51;
      swift_arrayDestroy(v51, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {
      swift_release_n(a2, 2);
      swift_errorRelease(v17);
      swift_errorRelease(v17);

    }
    swift_errorRetain(v17);
    v55(v17);
    swift_errorRelease(v17);
    return swift_errorRelease(v17);
  }
  else
  {
    v54 = a4;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A08);
    v37 = swift_retain_n(a2, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v53 = v9;
      v55 = a3;
      v40 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v59 = v52;
      *(_DWORD *)v40 = 136315394;
      if (qword_10028AE18 != -1)
        swift_once(&qword_10028AE18, sub_10004A0C4);
      v41 = qword_10028D490;
      v42 = *(_QWORD *)algn_10028D498;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
      v57 = sub_1001DEF4C(v41, v42, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      swift_bridgeObjectRelease(v42);
      *(_WORD *)(v40 + 12) = 2080;
      v51 = v40 + 14;
      type metadata accessor for InheritanceHealthRecord(0);
      v43 = swift_projectBox(a2);
      swift_beginAccess(v43, &v57, 0, 0);
      v44 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v12, v43, v8);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v8, v45);
      v48 = v47;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v8);
      v56 = sub_1001DEF4C(v46, v48, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - inheritanceHealthRecord %s was updated.", (uint8_t *)v40, 0x16u);
      v49 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v55(0);
    }
    else
    {

      swift_release_n(a2, 2);
      a3(0);
    }
    return sub_100004934((uint64_t)v16, (uint64_t *)&unk_100295390);
  }
}

void sub_10004DDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_100261820, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for InheritanceHealthRecord(0) + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "sharedCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_1000546AC(a1, v13, (uint64_t)sub_10005D9C0, (uint64_t)v7);
  swift_release(v7);

}

uint64_t sub_10004DF64(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v7 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4((uint64_t *)&unk_100295390);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (uint64_t *)((char *)&v39 - v17);
  sub_100024A20(a1, (uint64_t)&v39 - v17, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v18, v11) == 1)
  {
    v19 = *v18;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v41 = v19;
      v42 = v25;
      *(_DWORD *)v24 = 136315138;
      v39 = v24 + 4;
      swift_errorRetain(v19);
      v26 = sub_1000080B4(&qword_10028E850);
      v27 = String.init<A>(describing:)(&v41, v26);
      v28 = a3;
      v30 = v29;
      v41 = sub_1001DEF4C(v27, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      v31 = v30;
      a3 = v28;
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error saving to shared DB: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }

    *v15 = v19;
    swift_storeEnumTagMultiPayload(v15, v11, 1);
    swift_errorRetain(v19);
    a3(v15);
    swift_errorRelease(v19);
    return sub_100004934((uint64_t)v15, (uint64_t *)&unk_100295390);
  }
  else
  {
    sub_10003B730((uint64_t)v18, (uint64_t)v10, type metadata accessor for InheritanceHealthRecord);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A8A38);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Cloud record saved to shared DB in CloudKitStorage.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
    sub_10004E3DC((uint64_t)v10, 0, 2, (uint64_t)a3, v40, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_100261910, (uint64_t)sub_10005E304, (uint64_t)&unk_100261928);
    return sub_100028388((uint64_t)v10, type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_10004E35C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_100261A28, (uint64_t)sub_10005E7A0, (uint64_t)&unk_100261A40);
}

uint64_t sub_10004E39C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_100261C58, (uint64_t)sub_10005F0B0, (uint64_t)&unk_100261C70);
}

uint64_t sub_10004E3DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _QWORD aBlock[5];
  uint64_t v54;

  v41 = a7;
  v42 = a2;
  v11 = v9;
  v44 = a4;
  v45 = a5;
  v43 = a3;
  v46 = a9;
  v47 = a8;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v17 - 8);
  v50 = v17;
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(_QWORD *)(v22 + 64);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v41 - v25;
  v48 = *(_QWORD *)(v11 + 32);
  sub_100027FE8(a1, (uint64_t)&v41 - v25, a6);
  v27 = *(unsigned __int8 *)(v22 + 80);
  v28 = (v27 + 24) & ~v27;
  v29 = (v28 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v28 + v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(v41, v30 + 16, v27 | 7);
  *(_QWORD *)(v31 + 16) = v11;
  sub_10003B730((uint64_t)v26, v31 + v28, a6);
  v32 = v31 + v29;
  *(_QWORD *)v32 = v42;
  *(_BYTE *)(v32 + 8) = v43;
  v33 = (_QWORD *)(v31 + v30);
  v34 = v45;
  *v33 = v44;
  v33[1] = v34;
  aBlock[4] = v47;
  v54 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = v46;
  v35 = _Block_copy(aBlock);
  swift_retain(v11);
  v36 = swift_retain(v34);
  static DispatchQoS.unspecified.getter(v36);
  v52 = &_swiftEmptyArrayStorage;
  v37 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v39 = sub_100008628();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v38, v39, v13, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v16, v35);
  _Block_release(v35);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v50);
  return swift_release(v54);
}

uint64_t sub_10004E664(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for CustodianRecord, (uint64_t)&unk_100261B40, (uint64_t)sub_10005EC6C, (uint64_t)&unk_100261B58);
}

uint64_t sub_10004E6A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_100261910, (uint64_t)sub_10005E304, (uint64_t)&unk_100261928);
}

uint64_t sub_10004E6E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_100261CF8, (uint64_t)sub_10005F2A8, (uint64_t)&unk_100261D10);
}

uint64_t sub_10004E724(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_100261CA8, (uint64_t)sub_10005F19C, (uint64_t)&unk_100261CC0);
}

uint64_t sub_10004E764(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_100261E88, (uint64_t)sub_10005F85C, (uint64_t)&unk_100261EA0);
}

uint64_t sub_10004E7A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for IdentityRecord, (uint64_t)&unk_100261E38, (uint64_t)sub_10005F770, (uint64_t)&unk_100261E50);
}

uint64_t sub_10004E7E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_100261DE8, (uint64_t)sub_10005F5DC, (uint64_t)&unk_100261E00);
}

uint64_t sub_10004E824(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_100261D98, (uint64_t)sub_10005F4F0, (uint64_t)&unk_100261DB0);
}

uint64_t sub_10004E864(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_100261D48, (uint64_t)sub_10005F408, (uint64_t)&unk_100261D60);
}

uint64_t sub_10004E8A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_10004E3DC(a1, a2, a3, a4, a5, type metadata accessor for CustodianRecoverySessionRecord, (uint64_t)&unk_100261F00, (uint64_t)sub_10005FABC, (uint64_t)&unk_100261F18);
}

uint64_t sub_10004E8E4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE v65[12];
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];
  _OWORD v86[3];

  v84 = a6;
  v81 = a5;
  LODWORD(v78) = a4;
  v79 = a3;
  v83 = sub_1000080B4(&qword_10028D5B8);
  __chkstk_darwin(v83, v8);
  v82 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for URLResourceValues(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v10);
  v77 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v65[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v65[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v65[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v65[-v27];
  v80 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for CustodianHealthRecord(0);
  v31 = sub_100005150(&qword_10028D5C0, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10021ECF4);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v68 = v25;
  v69 = v28;
  v73 = v13;
  v67 = v17;
  v70 = v21;
  v71 = v12;
  v72 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v80 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v86, sub_10005E318, v36, &type metadata for Data);
  v38 = v86[0];
  v74 = v33;
  v80 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v86[0], *((uint64_t *)&v86[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v85[0] = v86[0];
  v85[1] = v86[1];
  v85[2] = v86[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v82;
  v45 = v42;
  v47 = v46;
  v66 = v78;
  swift_release(v40);
  sub_10005E374((uint64_t *)v86);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v68;
  sub_10000840C();
  v78 = v45;
  v49 = (uint64_t)v69;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A450, 1);
  v50 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
  v51 = v71;
  v50(v48, v71);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((_BYTE *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A450, 1);
  v52 = ((uint64_t (*)(_BYTE *, uint64_t))v50)(v48, v51);
  v53 = v72;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v70;
  URL.appendingPathComponent(_:)(v54);
  v58 = v66;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v78;
  v50((_BYTE *)v59, v51);
  if (v58 == 2)
    v61 = 1073741825;
  else
    v61 = v79;
  v62 = Data.write(to:options:)(v57, v61, v60, v47);
  if ((v58 & 1) == 0)
  {
    v63 = v77;
    URLResourceValues.init()(v62);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v64 = v67;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16))(v67, v57, v51);
    URL.setResourceValues(_:)(v63);
    v50(v64, v51);
    (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v63, v76);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for CustodianHealthRecord);
  swift_storeEnumTagMultiPayload(v43, v83, 0);
  v81(v43);
  sub_10000F494(v74, v80);
  sub_10000F494(v60, v47);
  return sub_100004934(v43, &qword_10028D5B8);
}

uint64_t sub_10004F014(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE v65[12];
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];
  _OWORD v86[3];

  v84 = a6;
  v81 = a5;
  LODWORD(v78) = a4;
  v79 = a3;
  v83 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v83, v8);
  v82 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for URLResourceValues(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v10);
  v77 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v65[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v65[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v65[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v65[-v27];
  v80 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v31 = sub_100005150(&qword_10028D5E8, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_100222A94);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v68 = v25;
  v69 = v28;
  v73 = v13;
  v67 = v17;
  v70 = v21;
  v71 = v12;
  v72 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v80 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v86, sub_10005E318, v36, &type metadata for Data);
  v38 = v86[0];
  v74 = v33;
  v80 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v86[0], *((uint64_t *)&v86[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v85[0] = v86[0];
  v85[1] = v86[1];
  v85[2] = v86[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v82;
  v45 = v42;
  v47 = v46;
  v66 = v78;
  swift_release(v40);
  sub_10005E374((uint64_t *)v86);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v68;
  sub_10000840C();
  v78 = v45;
  v49 = (uint64_t)v69;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A490, 1);
  v50 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
  v51 = v71;
  v50(v48, v71);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((_BYTE *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A490, 1);
  v52 = ((uint64_t (*)(_BYTE *, uint64_t))v50)(v48, v51);
  v53 = v72;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v70;
  URL.appendingPathComponent(_:)(v54);
  v58 = v66;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v78;
  v50((_BYTE *)v59, v51);
  if (v58 == 2)
    v61 = 1073741825;
  else
    v61 = v79;
  v62 = Data.write(to:options:)(v57, v61, v60, v47);
  if ((v58 & 1) == 0)
  {
    v63 = v77;
    URLResourceValues.init()(v62);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v64 = v67;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16))(v67, v57, v51);
    URL.setResourceValues(_:)(v63);
    v50(v64, v51);
    (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v63, v76);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for CustodianRecoveryInfoRecord);
  swift_storeEnumTagMultiPayload(v43, v83, 0);
  v81(v43);
  sub_10000F494(v74, v80);
  sub_10000F494(v60, v47);
  return sub_100004934(v43, &qword_100293AB0);
}

uint64_t sub_10004F744(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  int v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[3];
  _OWORD v87[3];

  v85 = a6;
  v82 = a5;
  LODWORD(v79) = a4;
  v80 = a3;
  v84 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v84, v8);
  v83 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for URLResourceValues(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v10);
  v78 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v66 - v20;
  v23 = __chkstk_darwin(v19, v22);
  v25 = (char *)&v66 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v66 - v27;
  v81 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for CustodianRecord(0);
  v31 = sub_100005150(&qword_10028D5D8, type metadata accessor for CustodianRecord, (uint64_t)&unk_10021B160);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v69 = v25;
  v70 = v28;
  v74 = v13;
  v68 = v17;
  v71 = v21;
  v72 = v12;
  v73 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v81 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v87, sub_10005E318, v36, &type metadata for Data);
  v38 = v87[0];
  v75 = v33;
  v81 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v87[0], *((uint64_t *)&v87[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v86[0] = v87[0];
  v86[1] = v87[1];
  v86[2] = v87[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v86, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v83;
  v45 = v42;
  v47 = v46;
  v67 = v79;
  swift_release(v40);
  sub_10005E374((uint64_t *)v87);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v69;
  sub_10000840C();
  v79 = v45;
  v66 = v47;
  v49 = (uint64_t)v70;
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v50 = *(void (**)(char *, uint64_t))(v74 + 8);
  v51 = v72;
  v50(v48, v72);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((char *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v52 = ((uint64_t (*)(char *, uint64_t))v50)(v48, v51);
  v53 = v73;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v71;
  URL.appendingPathComponent(_:)(v54);
  v58 = v67;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v66;
  v61 = v79;
  v50((char *)v59, v51);
  if (v58 == 2)
    v62 = 1073741825;
  else
    v62 = v80;
  v63 = Data.write(to:options:)(v57, v62, v61, v60);
  if ((v58 & 1) == 0)
  {
    v64 = v78;
    URLResourceValues.init()(v63);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v65 = v68;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v68, v57, v51);
    URL.setResourceValues(_:)(v64);
    v50(v65, v51);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v77);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload(v43, v84, 0);
  v82(v43);
  sub_10000F494(v75, v81);
  sub_10000F494(v61, v60);
  return sub_100004934(v43, &qword_10028D5D0);
}

uint64_t sub_10004FE9C(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE v70[4];
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  void (*v87)(uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];

  v90 = a6;
  v87 = a5;
  LODWORD(v84) = a4;
  v85 = a3;
  v89 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v89, v8);
  v88 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for URLResourceValues(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v83 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v70[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v70[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v70[-v27];
  v86 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for InheritanceHealthRecord(0);
  v31 = sub_100005150(&qword_10028D5A0, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_10021BD78);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v73 = v30;
  v74 = v25;
  v75 = v28;
  v79 = v13;
  v72 = v17;
  v76 = v21;
  v77 = v12;
  v78 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v86 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v92, sub_10005E318, v36, &type metadata for Data);
  v39 = *((_QWORD *)&v92[0] + 1);
  v38 = *(_QWORD *)&v92[0];
  v80 = v33;
  v86 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v92[0], *((uint64_t *)&v92[0] + 1));
  sub_10000F494(v38, v39);
  v40 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = JSONEncoder.init()();
  v91[0] = v92[0];
  v91[1] = v92[1];
  v91[2] = v92[2];
  v42 = sub_10005E330();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v91, &type metadata for EncryptedData, v42);
  v44 = (uint64_t)v88;
  v46 = v43;
  v48 = v47;
  v71 = v84;
  swift_release(v41);
  sub_10005E374((uint64_t *)v92);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v84 = v46;
  v49 = v74;
  sub_10000840C();
  v50 = (uint64_t)v75;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x800000010020A430, 1);
  v51 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
  v52 = v77;
  v51(v49, v77);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v50, 0);
  v51((_BYTE *)v50, v52);
  sub_10000840C();
  v53 = v48;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x800000010020A430, 1);
  v54 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v49, v52);
  v55 = v78;
  v56 = UUID.uuidString.getter(v54);
  v58 = v57;
  v59 = v76;
  URL.appendingPathComponent(_:)(v56);
  v60 = (void (*)(uint64_t, uint64_t))v51;
  v61 = v71;
  v62 = v58;
  v63 = v84;
  swift_bridgeObjectRelease(v62);
  v60(v50, v52);
  if (v61 == 2)
    v64 = 1073741825;
  else
    v64 = (uint64_t)v85;
  v65 = Data.write(to:options:)(v59, v64, v63, v53);
  v66 = v87;
  if ((v61 & 1) == 0)
  {
    v85 = v60;
    v67 = v83;
    URLResourceValues.init()(v65);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v68 = v72;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v72, v59, v52);
    URL.setResourceValues(_:)(v67);
    v69 = v68;
    v60 = v85;
    v85((uint64_t)v69, v52);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v67, v82);
    v63 = v84;
  }
  v60((uint64_t)v59, v52);
  sub_100027FE8(v55, v44, type metadata accessor for InheritanceHealthRecord);
  swift_storeEnumTagMultiPayload(v44, v89, 0);
  v66(v44);
  sub_10000F494(v80, v86);
  sub_10000F494(v63, v53);
  return sub_100004934(v44, (uint64_t *)&unk_100295390);
}

uint64_t sub_100050610(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE v70[4];
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  void (*v87)(uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];

  v90 = a6;
  v87 = a5;
  LODWORD(v84) = a4;
  v85 = a3;
  v89 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v89, v8);
  v88 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for URLResourceValues(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v83 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v70[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v70[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v70[-v27];
  v86 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for InheritanceInvitationRecord(0);
  v31 = sub_100005150(&qword_10028D5F8, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_100222ED8);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v73 = v30;
  v74 = v25;
  v75 = v28;
  v79 = v13;
  v72 = v17;
  v76 = v21;
  v77 = v12;
  v78 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v86 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v92, sub_10005E318, v36, &type metadata for Data);
  v39 = *((_QWORD *)&v92[0] + 1);
  v38 = *(_QWORD *)&v92[0];
  v80 = v33;
  v86 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v92[0], *((uint64_t *)&v92[0] + 1));
  sub_10000F494(v38, v39);
  v40 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = JSONEncoder.init()();
  v91[0] = v92[0];
  v91[1] = v92[1];
  v91[2] = v92[2];
  v42 = sub_10005E330();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v91, &type metadata for EncryptedData, v42);
  v44 = (uint64_t)v88;
  v46 = v43;
  v48 = v47;
  v71 = v84;
  swift_release(v41);
  sub_10005E374((uint64_t *)v92);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v84 = v46;
  v49 = v74;
  sub_10000840C();
  v50 = (uint64_t)v75;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A4B0, 1);
  v51 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
  v52 = v77;
  v51(v49, v77);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v50, 0);
  v51((_BYTE *)v50, v52);
  sub_10000840C();
  v53 = v48;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A4B0, 1);
  v54 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v49, v52);
  v55 = v78;
  v56 = UUID.uuidString.getter(v54);
  v58 = v57;
  v59 = v76;
  URL.appendingPathComponent(_:)(v56);
  v60 = (void (*)(uint64_t, uint64_t))v51;
  v61 = v71;
  v62 = v58;
  v63 = v84;
  swift_bridgeObjectRelease(v62);
  v60(v50, v52);
  if (v61 == 2)
    v64 = 1073741825;
  else
    v64 = (uint64_t)v85;
  v65 = Data.write(to:options:)(v59, v64, v63, v53);
  v66 = v87;
  if ((v61 & 1) == 0)
  {
    v85 = v60;
    v67 = v83;
    URLResourceValues.init()(v65);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v68 = v72;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v72, v59, v52);
    URL.setResourceValues(_:)(v67);
    v69 = v68;
    v60 = v85;
    v85((uint64_t)v69, v52);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v67, v82);
    v63 = v84;
  }
  v60((uint64_t)v59, v52);
  sub_100027FE8(v55, v44, type metadata accessor for InheritanceInvitationRecord);
  swift_storeEnumTagMultiPayload(v44, v89, 0);
  v66(v44);
  sub_10000F494(v80, v86);
  sub_10000F494(v63, v53);
  return sub_100004934(v44, (uint64_t *)&unk_10028FA70);
}

uint64_t sub_100050D84(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE v65[12];
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];
  _OWORD v86[3];

  v84 = a6;
  v81 = a5;
  LODWORD(v78) = a4;
  v79 = a3;
  v83 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v83, v8);
  v82 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for URLResourceValues(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v10);
  v77 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v65[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v65[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v65[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v65[-v27];
  v80 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for CustodianshipInfoRecord(0);
  v31 = sub_100005150(&qword_10028D5F0, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_10021CB80);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v68 = v25;
  v69 = v28;
  v73 = v13;
  v67 = v17;
  v70 = v21;
  v71 = v12;
  v72 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v80 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v86, sub_10005E318, v36, &type metadata for Data);
  v38 = v86[0];
  v74 = v33;
  v80 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v86[0], *((uint64_t *)&v86[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v85[0] = v86[0];
  v85[1] = v86[1];
  v85[2] = v86[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v82;
  v45 = v42;
  v47 = v46;
  v66 = v78;
  swift_release(v40);
  sub_10005E374((uint64_t *)v86);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v68;
  sub_10000840C();
  v78 = v45;
  v49 = (uint64_t)v69;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v50 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
  v51 = v71;
  v50(v48, v71);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((_BYTE *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v52 = ((uint64_t (*)(_BYTE *, uint64_t))v50)(v48, v51);
  v53 = v72;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v70;
  URL.appendingPathComponent(_:)(v54);
  v58 = v66;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v78;
  v50((_BYTE *)v59, v51);
  if (v58 == 2)
    v61 = 1073741825;
  else
    v61 = v79;
  v62 = Data.write(to:options:)(v57, v61, v60, v47);
  if ((v58 & 1) == 0)
  {
    v63 = v77;
    URLResourceValues.init()(v62);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v64 = v67;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16))(v67, v57, v51);
    URL.setResourceValues(_:)(v63);
    v50(v64, v51);
    (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v63, v76);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for CustodianshipInfoRecord);
  swift_storeEnumTagMultiPayload(v43, v83, 0);
  v81(v43);
  sub_10000F494(v74, v80);
  sub_10000F494(v60, v47);
  return sub_100004934(v43, &qword_10028C450);
}

uint64_t sub_1000514B4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE v65[12];
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void (*v81)(uint64_t);
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[3];
  _OWORD v86[3];

  v84 = a6;
  v81 = a5;
  LODWORD(v78) = a4;
  v79 = a3;
  v83 = sub_1000080B4(&qword_10028D628);
  __chkstk_darwin(v83, v8);
  v82 = &v65[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v76 = type metadata accessor for URLResourceValues(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v10);
  v77 = &v65[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v65[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v65[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v65[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v65[-v27];
  v80 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for IdentityServiceRecord(0);
  v31 = sub_100005150(&qword_10028D630, type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_10021CEE0);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v68 = v25;
  v69 = v28;
  v73 = v13;
  v67 = v17;
  v70 = v21;
  v71 = v12;
  v72 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v80 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v86, sub_10005E318, v36, &type metadata for Data);
  v38 = v86[0];
  v74 = v33;
  v80 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v86[0], *((uint64_t *)&v86[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v85[0] = v86[0];
  v85[1] = v86[1];
  v85[2] = v86[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v85, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v82;
  v45 = v42;
  v47 = v46;
  v66 = v78;
  swift_release(v40);
  sub_10005E374((uint64_t *)v86);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v68;
  sub_10000840C();
  v78 = v45;
  v49 = (uint64_t)v69;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A520, 1);
  v50 = *(void (**)(_BYTE *, uint64_t))(v73 + 8);
  v51 = v71;
  v50(v48, v71);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((_BYTE *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A520, 1);
  v52 = ((uint64_t (*)(_BYTE *, uint64_t))v50)(v48, v51);
  v53 = v72;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v70;
  URL.appendingPathComponent(_:)(v54);
  v58 = v66;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v78;
  v50((_BYTE *)v59, v51);
  if (v58 == 2)
    v61 = 1073741825;
  else
    v61 = v79;
  v62 = Data.write(to:options:)(v57, v61, v60, v47);
  if ((v58 & 1) == 0)
  {
    v63 = v77;
    URLResourceValues.init()(v62);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v64 = v67;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v73 + 16))(v67, v57, v51);
    URL.setResourceValues(_:)(v63);
    v50(v64, v51);
    (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v63, v76);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for IdentityServiceRecord);
  swift_storeEnumTagMultiPayload(v43, v83, 0);
  v81(v43);
  sub_10000F494(v74, v80);
  sub_10000F494(v60, v47);
  return sub_100004934(v43, &qword_10028D628);
}

uint64_t sub_100051BE4(unint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  int v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v86[3];
  _OWORD v87[3];

  v85 = a6;
  v82 = a5;
  LODWORD(v79) = a4;
  v80 = a3;
  v84 = sub_1000080B4(&qword_10028D618);
  __chkstk_darwin(v84, v8);
  v83 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for URLResourceValues(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v10);
  v78 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v66 - v20;
  v23 = __chkstk_darwin(v19, v22);
  v25 = (char *)&v66 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v66 - v27;
  v81 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for IdentityRecord(0);
  v31 = sub_100005150(&qword_10028D620, type metadata accessor for IdentityRecord, (uint64_t)&unk_10021A808);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v69 = v25;
  v70 = v28;
  v74 = v13;
  v68 = v17;
  v71 = v21;
  v72 = v12;
  v73 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v81 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v87, sub_10005E318, v36, &type metadata for Data);
  v38 = v87[0];
  v75 = v33;
  v81 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v87[0], *((uint64_t *)&v87[0] + 1));
  sub_10000F494(v38, *((unint64_t *)&v38 + 1));
  v39 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  v40 = JSONEncoder.init()();
  v86[0] = v87[0];
  v86[1] = v87[1];
  v86[2] = v87[2];
  v41 = sub_10005E330();
  v42 = dispatch thunk of JSONEncoder.encode<A>(_:)(v86, &type metadata for EncryptedData, v41);
  v43 = (uint64_t)v83;
  v45 = v42;
  v47 = v46;
  v67 = v79;
  swift_release(v40);
  sub_10005E374((uint64_t *)v87);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v48 = v69;
  sub_10000840C();
  v79 = v45;
  v66 = v47;
  v49 = (uint64_t)v70;
  URL.appendingPathComponent(_:isDirectory:)(0x797469746E656449, 0xEE0064726F636552, 1);
  v50 = *(void (**)(char *, uint64_t))(v74 + 8);
  v51 = v72;
  v50(v48, v72);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v49, 0);
  v50((char *)v49, v51);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x797469746E656449, 0xEE0064726F636552, 1);
  v52 = ((uint64_t (*)(char *, uint64_t))v50)(v48, v51);
  v53 = v73;
  v54 = UUID.uuidString.getter(v52);
  v56 = v55;
  v57 = v71;
  URL.appendingPathComponent(_:)(v54);
  v58 = v67;
  swift_bridgeObjectRelease(v56);
  v59 = v49;
  v60 = v66;
  v61 = v79;
  v50((char *)v59, v51);
  if (v58 == 2)
    v62 = 1073741825;
  else
    v62 = v80;
  v63 = Data.write(to:options:)(v57, v62, v61, v60);
  if ((v58 & 1) == 0)
  {
    v64 = v78;
    URLResourceValues.init()(v63);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v65 = v68;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v68, v57, v51);
    URL.setResourceValues(_:)(v64);
    v50(v65, v51);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v64, v77);
  }
  v50(v57, v51);
  sub_100027FE8(v53, v43, type metadata accessor for IdentityRecord);
  swift_storeEnumTagMultiPayload(v43, v84, 0);
  v82(v43);
  sub_10000F494(v75, v81);
  sub_10000F494(v61, v60);
  return sub_100004934(v43, &qword_10028D618);
}

uint64_t sub_10005233C(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE v70[4];
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  void (*v87)(uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];

  v90 = a6;
  v87 = a5;
  LODWORD(v84) = a4;
  v85 = a3;
  v89 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v89, v8);
  v88 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for URLResourceValues(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v83 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v70[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v70[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v70[-v27];
  v86 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for BenefactorInfoRecord(0);
  v31 = sub_100005150(&qword_10028D610, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10021F268);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v73 = v30;
  v74 = v25;
  v75 = v28;
  v79 = v13;
  v72 = v17;
  v76 = v21;
  v77 = v12;
  v78 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v86 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v92, sub_10005E318, v36, &type metadata for Data);
  v39 = *((_QWORD *)&v92[0] + 1);
  v38 = *(_QWORD *)&v92[0];
  v80 = v33;
  v86 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v92[0], *((uint64_t *)&v92[0] + 1));
  sub_10000F494(v38, v39);
  v40 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = JSONEncoder.init()();
  v91[0] = v92[0];
  v91[1] = v92[1];
  v91[2] = v92[2];
  v42 = sub_10005E330();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v91, &type metadata for EncryptedData, v42);
  v44 = (uint64_t)v88;
  v46 = v43;
  v48 = v47;
  v71 = v84;
  swift_release(v41);
  sub_10005E374((uint64_t *)v92);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v84 = v46;
  v49 = v74;
  sub_10000840C();
  v50 = (uint64_t)v75;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001FLL, 0x800000010020A500, 1);
  v51 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
  v52 = v77;
  v51(v49, v77);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v50, 0);
  v51((_BYTE *)v50, v52);
  sub_10000840C();
  v53 = v48;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001FLL, 0x800000010020A500, 1);
  v54 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v49, v52);
  v55 = v78;
  v56 = UUID.uuidString.getter(v54);
  v58 = v57;
  v59 = v76;
  URL.appendingPathComponent(_:)(v56);
  v60 = (void (*)(uint64_t, uint64_t))v51;
  v61 = v71;
  v62 = v58;
  v63 = v84;
  swift_bridgeObjectRelease(v62);
  v60(v50, v52);
  if (v61 == 2)
    v64 = 1073741825;
  else
    v64 = (uint64_t)v85;
  v65 = Data.write(to:options:)(v59, v64, v63, v53);
  v66 = v87;
  if ((v61 & 1) == 0)
  {
    v85 = v60;
    v67 = v83;
    URLResourceValues.init()(v65);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v68 = v72;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v72, v59, v52);
    URL.setResourceValues(_:)(v67);
    v69 = v68;
    v60 = v85;
    v85((uint64_t)v69, v52);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v67, v82);
    v63 = v84;
  }
  v60((uint64_t)v59, v52);
  sub_100027FE8(v55, v44, type metadata accessor for BenefactorInfoRecord);
  swift_storeEnumTagMultiPayload(v44, v89, 0);
  v66(v44);
  sub_10000F494(v80, v86);
  sub_10000F494(v63, v53);
  return sub_100004934(v44, (uint64_t *)&unk_10028FA40);
}

uint64_t sub_100052AB0(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE v70[4];
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  void (*v87)(uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];

  v90 = a6;
  v87 = a5;
  LODWORD(v84) = a4;
  v85 = a3;
  v89 = sub_1000080B4(&qword_10028D600);
  __chkstk_darwin(v89, v8);
  v88 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for URLResourceValues(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v83 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v70[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v70[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v70[-v27];
  v86 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for BeneficiaryManifestRecord(0);
  v31 = sub_100005150(&qword_10028D608, type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_10021A5D0);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v73 = v30;
  v74 = v25;
  v75 = v28;
  v79 = v13;
  v72 = v17;
  v76 = v21;
  v77 = v12;
  v78 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v86 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v92, sub_10005E318, v36, &type metadata for Data);
  v39 = *((_QWORD *)&v92[0] + 1);
  v38 = *(_QWORD *)&v92[0];
  v80 = v33;
  v86 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v92[0], *((uint64_t *)&v92[0] + 1));
  sub_10000F494(v38, v39);
  v40 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = JSONEncoder.init()();
  v91[0] = v92[0];
  v91[1] = v92[1];
  v91[2] = v92[2];
  v42 = sub_10005E330();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v91, &type metadata for EncryptedData, v42);
  v44 = (uint64_t)v88;
  v46 = v43;
  v48 = v47;
  v71 = v84;
  swift_release(v41);
  sub_10005E374((uint64_t *)v92);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v84 = v46;
  v49 = v74;
  sub_10000840C();
  v50 = (uint64_t)v75;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000024, 0x800000010020A4D0, 1);
  v51 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
  v52 = v77;
  v51(v49, v77);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v50, 0);
  v51((_BYTE *)v50, v52);
  sub_10000840C();
  v53 = v48;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000024, 0x800000010020A4D0, 1);
  v54 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v49, v52);
  v55 = v78;
  v56 = UUID.uuidString.getter(v54);
  v58 = v57;
  v59 = v76;
  URL.appendingPathComponent(_:)(v56);
  v60 = (void (*)(uint64_t, uint64_t))v51;
  v61 = v71;
  v62 = v58;
  v63 = v84;
  swift_bridgeObjectRelease(v62);
  v60(v50, v52);
  if (v61 == 2)
    v64 = 1073741825;
  else
    v64 = (uint64_t)v85;
  v65 = Data.write(to:options:)(v59, v64, v63, v53);
  v66 = v87;
  if ((v61 & 1) == 0)
  {
    v85 = v60;
    v67 = v83;
    URLResourceValues.init()(v65);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v68 = v72;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v72, v59, v52);
    URL.setResourceValues(_:)(v67);
    v69 = v68;
    v60 = v85;
    v85((uint64_t)v69, v52);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v67, v82);
    v63 = v84;
  }
  v60((uint64_t)v59, v52);
  sub_100027FE8(v55, v44, type metadata accessor for BeneficiaryManifestRecord);
  swift_storeEnumTagMultiPayload(v44, v89, 0);
  v66(v44);
  sub_10000F494(v80, v86);
  sub_10000F494(v63, v53);
  return sub_100004934(v44, &qword_10028D600);
}

uint64_t sub_100053224(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  void (*v60)(uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t);
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE v70[4];
  int v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  unint64_t v86;
  void (*v87)(uint64_t);
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[3];
  _OWORD v92[3];

  v90 = a6;
  v87 = a5;
  LODWORD(v84) = a4;
  v85 = a3;
  v89 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v89, v8);
  v88 = &v70[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v82 = type metadata accessor for URLResourceValues(0);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v10);
  v83 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = &v70[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v15, v18);
  v21 = &v70[-v20];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v70[-v24];
  __chkstk_darwin(v23, v26);
  v28 = &v70[-v27];
  v86 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for BeneficiaryInfoRecord(0);
  v31 = sub_100005150(&qword_10028BB88, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_100218EE0);
  swift_retain(v29);
  v32 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v73 = v30;
  v74 = v25;
  v75 = v28;
  v79 = v13;
  v72 = v17;
  v76 = v21;
  v77 = v12;
  v78 = a2;
  v33 = v32;
  v35 = v34;
  swift_release(v29);
  v36 = *(_QWORD *)(v86 + 40);
  swift_retain(v36);
  v37 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v92, sub_10005E318, v36, &type metadata for Data);
  v39 = *((_QWORD *)&v92[0] + 1);
  v38 = *(_QWORD *)&v92[0];
  v80 = v33;
  v86 = v35;
  Data.encrypt(using:)(*(uint64_t *)&v92[0], *((uint64_t *)&v92[0] + 1));
  sub_10000F494(v38, v39);
  v40 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  v41 = JSONEncoder.init()();
  v91[0] = v92[0];
  v91[1] = v92[1];
  v91[2] = v92[2];
  v42 = sub_10005E330();
  v43 = dispatch thunk of JSONEncoder.encode<A>(_:)(v91, &type metadata for EncryptedData, v42);
  v44 = (uint64_t)v88;
  v46 = v43;
  v48 = v47;
  v71 = v84;
  swift_release(v41);
  sub_10005E374((uint64_t *)v92);
  objc_autoreleasePoolPop(v37);
  swift_release(v36);
  type metadata accessor for LocalCache();
  v84 = v46;
  v49 = v74;
  sub_10000840C();
  v50 = (uint64_t)v75;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v51 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
  v52 = v77;
  v51(v49, v77);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v50, 0);
  v51((_BYTE *)v50, v52);
  sub_10000840C();
  v53 = v48;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v54 = ((uint64_t (*)(_BYTE *, uint64_t))v51)(v49, v52);
  v55 = v78;
  v56 = UUID.uuidString.getter(v54);
  v58 = v57;
  v59 = v76;
  URL.appendingPathComponent(_:)(v56);
  v60 = (void (*)(uint64_t, uint64_t))v51;
  v61 = v71;
  v62 = v58;
  v63 = v84;
  swift_bridgeObjectRelease(v62);
  v60(v50, v52);
  if (v61 == 2)
    v64 = 1073741825;
  else
    v64 = (uint64_t)v85;
  v65 = Data.write(to:options:)(v59, v64, v63, v53);
  v66 = v87;
  if ((v61 & 1) == 0)
  {
    v85 = v60;
    v67 = v83;
    URLResourceValues.init()(v65);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v68 = v72;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v72, v59, v52);
    URL.setResourceValues(_:)(v67);
    v69 = v68;
    v60 = v85;
    v85((uint64_t)v69, v52);
    (*(void (**)(_BYTE *, uint64_t))(v81 + 8))(v67, v82);
    v63 = v84;
  }
  v60((uint64_t)v59, v52);
  sub_100027FE8(v55, v44, type metadata accessor for BeneficiaryInfoRecord);
  swift_storeEnumTagMultiPayload(v44, v89, 0);
  v66(v44);
  sub_10000F494(v80, v86);
  sub_10000F494(v63, v53);
  return sub_100004934(v44, &qword_100295630);
}

uint64_t sub_100053998(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;

  v82 = a6;
  v80 = a5;
  LODWORD(v75) = a4;
  v76 = a3;
  v81 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v81, v8);
  v79 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URLResourceValues(0);
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  __chkstk_darwin(v10, v11);
  v72 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v77 - 8);
  v15 = __chkstk_darwin(v77, v14);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v64 - v20;
  v23 = __chkstk_darwin(v19, v22);
  v25 = (char *)&v64 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v64 - v27;
  v78 = a1;
  v29 = *(_QWORD *)(a1 + 16);
  v30 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v31 = sub_100005150(&qword_10028D638, type metadata accessor for CustodianRecoverySessionRecord, (uint64_t)&unk_10021D718);
  swift_retain(v29);
  v32 = a2;
  v33 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v30, v31);
  v35 = v34;
  v68 = v25;
  v69 = v28;
  v70 = v21;
  v71 = v13;
  v67 = v17;
  v36 = v77;
  swift_release(v29);
  v37 = *(_QWORD *)(v78 + 40);
  swift_retain(v37);
  v38 = sub_1001A8440();
  v41 = v40;
  v64 = v33;
  v66 = v35;
  v65 = v75;
  v78 = v38;
  swift_release(v37);
  type metadata accessor for LocalCache();
  v75 = v41;
  v42 = v68;
  sub_10000840C();
  v43 = (uint64_t)v69;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A540, 1);
  v44 = *(void (**)(char *, uint64_t))(v71 + 8);
  v45 = v36;
  v44(v42, v36);
  _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(v43, 0);
  v44((char *)v43, v36);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A540, 1);
  v46 = ((uint64_t (*)(char *, uint64_t))v44)(v42, v36);
  v47 = UUID.uuidString.getter(v46);
  v49 = v48;
  v50 = v70;
  URL.appendingPathComponent(_:)(v47);
  v51 = v65;
  v52 = v49;
  v53 = v75;
  swift_bridgeObjectRelease(v52);
  v54 = v43;
  v55 = v44;
  v44((char *)v54, v36);
  if (v51 == 2)
    v56 = 1073741825;
  else
    v56 = v76;
  v57 = Data.write(to:options:)(v50, v56, v78, v53);
  v58 = (uint64_t)v79;
  v59 = v80;
  v60 = v64;
  if ((v51 & 1) == 0)
  {
    v61 = v64;
    v62 = v72;
    URLResourceValues.init()(v57);
    URLResourceValues.isExcludedFromBackup.setter(1);
    v63 = v67;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v67, v50, v45);
    URL.setResourceValues(_:)(v62);
    v55(v63, v45);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v62, v74);
    v60 = v61;
    v53 = v75;
  }
  v55(v50, v45);
  sub_100027FE8(v32, v58, type metadata accessor for CustodianRecoverySessionRecord);
  swift_storeEnumTagMultiPayload(v58, v81, 0);
  v59(v58);
  sub_10000F494(v78, v53);
  sub_10000F494(v60, v66);
  return sub_100004934(v58, &qword_10028E7F0);
}

uint64_t sub_100053F90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10005C6B4(a1, a2, a3, a4, (unint64_t *)&qword_10028D578, CKRecord_ptr, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
}

void sub_100053FB4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a4;
  v30 = a3;
  v8 = type metadata accessor for CustodianHealthRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v14 = sub_1000080B4(&qword_10028D570);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021A1B0;
  v16 = sub_100049C2C(type metadata accessor for CustodianHealthRecord, 0xD000000000000015, (void *)0x800000010020A450, (void (*)(Class *))sub_10016AE40);
  *(_QWORD *)(v15 + 32) = v16;
  aBlock[0] = v15;
  specialized Array._endMutation()(v16);
  v17 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v13, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for CustodianHealthRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_100261960, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = v5;
  sub_10003B730((uint64_t)v12, v23 + v20, type metadata accessor for CustodianHealthRecord);
  *(_QWORD *)(v23 + v21) = a2;
  v24 = (_QWORD *)(v23 + v22);
  v25 = v29;
  *v24 = v30;
  v24[1] = v25;
  aBlock[4] = sub_10005E4EC;
  v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100261978;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(v25);
  swift_release(v27);
  objc_msgSend(v13, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v13);

}

void sub_10005421C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v30 = a3;
  v9 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  v17 = sub_100049EA4();
  *(_QWORD *)(v16 + 32) = v17;
  aBlock[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v14, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for CustodianRecoveryInfoRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_100261B90, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v5;
  sub_10003B730((uint64_t)v13, v24 + v21, type metadata accessor for CustodianRecoveryInfoRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v30;
  v25[1] = a4;
  aBlock[4] = sub_10005EDDC;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100261BA8;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(a4);
  swift_release(v27);
  objc_msgSend(v14, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v14);

}

void sub_100054464(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v30 = a3;
  v9 = type metadata accessor for CustodianRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  v17 = sub_100049AB8();
  *(_QWORD *)(v16 + 32) = v17;
  aBlock[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v14, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for CustodianRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_100261A78, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v5;
  sub_10003B730((uint64_t)v13, v24 + v21, type metadata accessor for CustodianRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v30;
  v25[1] = a4;
  aBlock[4] = sub_10005E930;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100261A90;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(a4);
  swift_release(v27);
  objc_msgSend(v14, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v14);

}

void sub_1000546AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a4;
  v30 = a3;
  v8 = type metadata accessor for InheritanceHealthRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v14 = sub_1000080B4(&qword_10028D570);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021A1B0;
  v16 = sub_100049D94(type metadata accessor for InheritanceHealthRecord, 0xD000000000000017, (void *)0x800000010020A430, (void (*)(Class *))sub_1000C4E24);
  *(_QWORD *)(v15 + 32) = v16;
  aBlock[0] = v15;
  specialized Array._endMutation()(v16);
  v17 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v13, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for InheritanceHealthRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_100261848, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = v5;
  sub_10003B730((uint64_t)v12, v23 + v20, type metadata accessor for InheritanceHealthRecord);
  *(_QWORD *)(v23 + v21) = a2;
  v24 = (_QWORD *)(v23 + v22);
  v25 = v29;
  *v24 = v30;
  v24[1] = v25;
  aBlock[4] = sub_10005DAE0;
  v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100261860;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(v25);
  swift_release(v27);
  objc_msgSend(v13, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v13);

}

void sub_100054914(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v30 = a3;
  v9 = type metadata accessor for InheritanceInvitationRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  v17 = sub_100049FC8();
  *(_QWORD *)(v16 + 32) = v17;
  aBlock[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v14, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1002621A8, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v5;
  sub_10003B730((uint64_t)v13, v24 + v21, type metadata accessor for InheritanceInvitationRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v30;
  v25[1] = a4;
  aBlock[4] = sub_100060ECC;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_1002621C0;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(a4);
  swift_release(v27);
  objc_msgSend(v14, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v14);

}

void sub_100054B5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a4;
  v30 = a3;
  v8 = type metadata accessor for CustodianshipInfoRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v14 = sub_1000080B4(&qword_10028D570);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021A1B0;
  v16 = sub_100049C2C(type metadata accessor for CustodianshipInfoRecord, 0xD000000000000017, (void *)0x8000000100209FC0, (void (*)(Class *))sub_1000ED6BC);
  *(_QWORD *)(v15 + 32) = v16;
  aBlock[0] = v15;
  specialized Array._endMutation()(v16);
  v17 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v13, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_100261F50, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = v5;
  sub_10003B730((uint64_t)v12, v23 + v20, type metadata accessor for CustodianshipInfoRecord);
  *(_QWORD *)(v23 + v21) = a2;
  v24 = (_QWORD *)(v23 + v22);
  v25 = v29;
  *v24 = v30;
  v24[1] = v25;
  aBlock[4] = sub_10005FC30;
  v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100261F68;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(v25);
  swift_release(v27);
  objc_msgSend(v13, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v13);

}

void sub_100054DC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v30 = a3;
  v9 = type metadata accessor for BeneficiaryInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  v17 = sub_1000498A0();
  *(_QWORD *)(v16 + 32) = v17;
  aBlock[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v14, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for BeneficiaryInfoRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1002620E0, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v5;
  sub_10003B730((uint64_t)v13, v24 + v21, type metadata accessor for BeneficiaryInfoRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v30;
  v25[1] = a4;
  aBlock[4] = sub_100060C58;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_1002620F8;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(a4);
  swift_release(v27);
  objc_msgSend(v14, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v14);

}

void sub_10005500C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a4;
  v30 = a3;
  v8 = type metadata accessor for BenefactorInfoRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v14 = sub_1000080B4(&qword_10028D570);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10021A1B0;
  v16 = sub_100049D94(type metadata accessor for BenefactorInfoRecord, 0xD00000000000001FLL, (void *)0x800000010020A500, (void (*)(Class *))sub_10016F9E4);
  *(_QWORD *)(v15 + 32) = v16;
  aBlock[0] = v15;
  specialized Array._endMutation()(v16);
  v17 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v13, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for BenefactorInfoRecord);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_100262018, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = v5;
  sub_10003B730((uint64_t)v12, v23 + v20, type metadata accessor for BenefactorInfoRecord);
  *(_QWORD *)(v23 + v21) = a2;
  v24 = (_QWORD *)(v23 + v22);
  v25 = v29;
  *v24 = v30;
  v24[1] = v25;
  aBlock[4] = sub_100060410;
  v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100262030;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(v25);
  swift_release(v27);
  objc_msgSend(v13, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v13);

}

void sub_100055274(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  uint64_t v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v30 = a3;
  v9 = type metadata accessor for IdentityRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)CKModifyRecordsOperation), "init");
  sub_1001AE8D8();
  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  v17 = sub_10004999C();
  *(_QWORD *)(v16 + 32) = v17;
  aBlock[0] = v16;
  specialized Array._endMutation()(v17);
  v18 = aBlock[0];
  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v14, "setRecordsToSave:", isa);

  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for IdentityRecord);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_100262270, v23 + 16, v20 | 7);
  *(_QWORD *)(v24 + 16) = v5;
  sub_10003B730((uint64_t)v13, v24 + v21, type metadata accessor for IdentityRecord);
  *(_QWORD *)(v24 + v22) = a2;
  v25 = (_QWORD *)(v24 + v23);
  *v25 = v30;
  v25[1] = a4;
  aBlock[4] = sub_10006116C;
  v32 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100053F90;
  aBlock[3] = &unk_100262288;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v5);
  v28 = a2;
  swift_retain(a4);
  swift_release(v27);
  objc_msgSend(v14, "setModifyRecordsCompletionBlock:", v26);
  _Block_release(v26);
  objc_msgSend(v28, "addOperation:", v14);

}

void sub_1000554BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  void *v70;
  uint64_t v71[2];

  v68 = a8;
  v69 = a7;
  v64 = a6;
  v65 = (char *)a4;
  v67 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v15, v16);
  v18 = (NSObject **)((char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for CustodianHealthRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v61 - v26;
  v28 = sub_1000080B4(&qword_10028D5B8);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v66 = (uint64_t *)((char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v71[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v70, v71, v33, v34, 6))
    {
      v35 = v70;
      sub_10005883C(v70, (uint64_t)v67, v64, v69, v68);

    }
    else
    {
      v42 = v66;
      *v66 = a3;
      swift_storeEnumTagMultiPayload(v42, v32, 1);
      swift_errorRetain(a3);
      v69((uint64_t)v42);
      sub_100004934((uint64_t)v42, &qword_10028D5B8);
    }
    return;
  }
  v65 = v24;
  if (!a1)
    return;
  v64 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v59 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v59 = a1;
  swift_bridgeObjectRetain(a1);
  v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  v38 = v10;
  if (!v60)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v63 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = (uint64_t)v67;
  swift_bridgeObjectRelease(a1);
  v41 = *(unsigned __int8 *)(v36 + *(int *)(v19 + 36));
  v14 = (char *)v40;
  sub_10016A448(v14, v41, v18);
  (*(void (**)(NSObject **, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for CustodianHealthRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v43 = type metadata accessor for Logger(0);
  sub_100005288(v43, (uint64_t)qword_1002A89A8);
  v44 = v36;
  v45 = (uint64_t)v65;
  v46 = sub_100027FE8(v44, (uint64_t)v65, type metadata accessor for CustodianHealthRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v47, v49))
  {
    v50 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v71[0] = v62;
    *(_DWORD *)v50 = 136315394;
    v70 = (void *)sub_1001DEF4C(0xD000000000000015, 0x800000010020A450, v71);
    v67 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    *(_WORD *)(v50 + 12) = 2080;
    v61 = v50 + 14;
    v51 = v63;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v45, v63);
    sub_100028388(v45, type metadata accessor for CustodianHealthRecord);
    v52 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
    v54 = v39;
    v56 = v55;
    (*((void (**)(char *, uint64_t))v54 + 1))(v11, v51);
    v70 = (void *)sub_1001DEF4C(v53, v56, v71);
    v27 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "%s %s saved successfully", (uint8_t *)v50, 0x16u);
    v57 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for CustodianHealthRecord);
  }

  v58 = v66;
  sub_100027FE8((uint64_t)v27, (uint64_t)v66, type metadata accessor for CustodianHealthRecord);
  swift_storeEnumTagMultiPayload(v58, v64, 0);
  v69((uint64_t)v58);

  sub_100004934((uint64_t)v58, &qword_10028D5B8);
  sub_100028388((uint64_t)v27, type metadata accessor for CustodianHealthRecord);
}

void sub_100055A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  void *v70;
  uint64_t v71[2];

  v68 = a8;
  v69 = a7;
  v64 = a6;
  v65 = (char *)a4;
  v67 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v61 - v26;
  v28 = sub_1000080B4(&qword_100293AB0);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v66 = (uint64_t *)((char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v71[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v70, v71, v33, v34, 6))
    {
      v35 = v70;
      sub_100058DE4(v70, (uint64_t)v67, v64, v69, v68);

    }
    else
    {
      v42 = v66;
      *v66 = a3;
      swift_storeEnumTagMultiPayload(v42, v32, 1);
      swift_errorRetain(a3);
      v69((uint64_t)v42);
      sub_100004934((uint64_t)v42, &qword_100293AB0);
    }
    return;
  }
  v65 = v24;
  if (!a1)
    return;
  v64 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v59 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v59 = a1;
  swift_bridgeObjectRetain(a1);
  v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  v38 = v10;
  if (!v60)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v63 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = (uint64_t)v67;
  swift_bridgeObjectRelease(a1);
  v41 = *(unsigned __int8 *)(v36 + *(int *)(v19 + 40));
  v14 = (char *)v40;
  sub_1001F9C24(v14, v41, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for CustodianRecoveryInfoRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v43 = type metadata accessor for Logger(0);
  sub_100005288(v43, (uint64_t)qword_1002A89A8);
  v44 = v36;
  v45 = (uint64_t)v65;
  v46 = sub_100027FE8(v44, (uint64_t)v65, type metadata accessor for CustodianRecoveryInfoRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v47, v49))
  {
    v50 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v71[0] = v62;
    *(_DWORD *)v50 = 136315394;
    v70 = (void *)sub_1001DEF4C(0xD00000000000001BLL, 0x800000010020A490, v71);
    v67 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    *(_WORD *)(v50 + 12) = 2080;
    v61 = v50 + 14;
    v51 = v63;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v45, v63);
    sub_100028388(v45, type metadata accessor for CustodianRecoveryInfoRecord);
    v52 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
    v54 = v39;
    v56 = v55;
    (*((void (**)(char *, uint64_t))v54 + 1))(v11, v51);
    v70 = (void *)sub_1001DEF4C(v53, v56, v71);
    v27 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "%s %s saved successfully", (uint8_t *)v50, 0x16u);
    v57 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for CustodianRecoveryInfoRecord);
  }

  v58 = v66;
  sub_100027FE8((uint64_t)v27, (uint64_t)v66, type metadata accessor for CustodianRecoveryInfoRecord);
  swift_storeEnumTagMultiPayload(v58, v64, 0);
  v69((uint64_t)v58);

  sub_100004934((uint64_t)v58, &qword_100293AB0);
  sub_100028388((uint64_t)v27, type metadata accessor for CustodianRecoveryInfoRecord);
}

void sub_10005601C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  __n128 v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  void *v69;
  uint64_t v70[2];

  v67 = a8;
  v68 = a7;
  v63 = a6;
  v64 = (char *)a4;
  v66 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D5C8);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v60 - v26;
  v28 = sub_1000080B4(&qword_10028D5D0);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v65 = (uint64_t *)((char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v70[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v69, v70, v33, v34, 6))
    {
      v35 = v69;
      sub_100059370(v69, (uint64_t)v66, v63, v68, v67);

    }
    else
    {
      v42 = v65;
      *v65 = a3;
      swift_storeEnumTagMultiPayload(v42, v32, 1);
      swift_errorRetain(a3);
      v68((uint64_t)v42);
      sub_100004934((uint64_t)v42, &qword_10028D5D0);
    }
    return;
  }
  v64 = v24;
  if (!a1)
    return;
  v63 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v58 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v58 = a1;
  swift_bridgeObjectRetain(a1);
  v59 = _CocoaArrayWrapper.endIndex.getter(v58);
  v38 = v10;
  if (!v59)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v62 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = (uint64_t)v66;
  swift_bridgeObjectRelease(a1);
  v41 = *(unsigned __int8 *)(v36 + *(int *)(v19 + 48));
  v14 = (char *)v40;
  sub_1000940B4(v14, v41, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for CustodianRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v43 = type metadata accessor for Logger(0);
  sub_100005288(v43, (uint64_t)qword_1002A89A8);
  v44 = (uint64_t)v64;
  v45 = sub_100027FE8(v36, (uint64_t)v64, type metadata accessor for CustodianRecord);
  v46 = Logger.logObject.getter(v45);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v46, v48))
  {
    v49 = swift_slowAlloc(22, -1);
    v61 = swift_slowAlloc(64, -1);
    v70[0] = v61;
    *(_DWORD *)v49 = 136315394;
    v69 = (void *)sub_1001DEF4C(0x6169646F74737543, 0xEF64726F6365526ELL, v70);
    v66 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    *(_WORD *)(v49 + 12) = 2080;
    v60 = v49 + 14;
    v50 = v62;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v44, v62);
    sub_100028388(v44, type metadata accessor for CustodianRecord);
    v51 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
    v53 = v39;
    v55 = v54;
    (*((void (**)(char *, uint64_t))v53 + 1))(v11, v50);
    v69 = (void *)sub_1001DEF4C(v52, v55, v70);
    v27 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v46, v48, "%s %s saved successfully", (uint8_t *)v49, 0x16u);
    v56 = v61;
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    sub_100028388(v44, type metadata accessor for CustodianRecord);
  }

  v57 = v65;
  sub_100027FE8((uint64_t)v27, (uint64_t)v65, type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload(v57, v63, 0);
  v68((uint64_t)v57);

  sub_100004934((uint64_t)v57, &qword_10028D5D0);
  sub_100028388((uint64_t)v27, type metadata accessor for CustodianRecord);
}

void sub_1000565D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  void *v74;
  uint64_t v75[2];

  v72 = a8;
  v73 = a7;
  v68 = a6;
  v69 = (char *)a4;
  v71 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D588);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for InheritanceHealthRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v65 - v26;
  v28 = sub_1000080B4((uint64_t *)&unk_100295390);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v70 = (uint64_t *)((char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v75[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v74, v75, v33, v34, 6))
    {
      v35 = v74;
      sub_1000598FC(v74, (uint64_t)v71, v68, v73, v72);

    }
    else
    {
      v43 = v70;
      *v70 = a3;
      swift_storeEnumTagMultiPayload(v43, v32, 1);
      swift_errorRetain(a3);
      v73((uint64_t)v43);
      sub_100004934((uint64_t)v43, (uint64_t *)&unk_100295390);
    }
    return;
  }
  v69 = v24;
  if (!a1)
    return;
  v68 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v63 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v63 = a1;
  swift_bridgeObjectRetain(a1);
  v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  v38 = v10;
  if (!v64)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v67 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = v19;
  swift_bridgeObjectRelease(a1);
  v41 = *(int *)(v19 + 36);
  v19 = (uint64_t)v71;
  v42 = v71[v41];
  v14 = (char *)v40;
  sub_1000C426C(v14, v42, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v36);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for InheritanceHealthRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A89A8);
  v45 = (uint64_t)v69;
  v46 = sub_100027FE8(v19, (uint64_t)v69, type metadata accessor for InheritanceHealthRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  if (os_log_type_enabled(v47, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    v52 = v36;
    v53 = swift_slowAlloc(64, -1);
    v75[0] = v53;
    *(_DWORD *)v51 = 136315394;
    v66 = v50;
    v74 = (void *)sub_1001DEF4C(0xD000000000000017, 0x800000010020A430, v75);
    v71 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    *(_WORD *)(v51 + 12) = 2080;
    v65 = v51 + 14;
    v54 = v45 + *(int *)(v52 + 28);
    v55 = v67;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v54, v67);
    sub_100028388(v45, type metadata accessor for InheritanceHealthRecord);
    v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    v58 = v39;
    v59 = v57;
    v61 = v60;
    (*((void (**)(char *, uint64_t))v58 + 1))(v11, v55);
    v74 = (void *)sub_1001DEF4C(v59, v61, v75);
    v27 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v66, "%s %s saved successfully", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for InheritanceHealthRecord);
  }

  v62 = v70;
  sub_100027FE8((uint64_t)v27, (uint64_t)v70, type metadata accessor for InheritanceHealthRecord);
  swift_storeEnumTagMultiPayload(v62, v68, 0);
  v73((uint64_t)v62);

  sub_100004934((uint64_t)v62, (uint64_t *)&unk_100295390);
  sub_100028388((uint64_t)v27, type metadata accessor for InheritanceHealthRecord);
}

void sub_100056B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  void *v74;
  uint64_t v75[2];

  v72 = a8;
  v73 = a7;
  v68 = a6;
  v69 = (char *)a4;
  v71 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D658);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for InheritanceInvitationRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v65 - v26;
  v28 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v70 = (uint64_t *)((char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v75[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v74, v75, v33, v34, 6))
    {
      v35 = v74;
      sub_100059EA4(v74, (uint64_t)v71, v68, v73, v72);

    }
    else
    {
      v43 = v70;
      *v70 = a3;
      swift_storeEnumTagMultiPayload(v43, v32, 1);
      swift_errorRetain(a3);
      v73((uint64_t)v43);
      sub_100004934((uint64_t)v43, (uint64_t *)&unk_10028FA70);
    }
    return;
  }
  v69 = v24;
  if (!a1)
    return;
  v68 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v63 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v63 = a1;
  swift_bridgeObjectRetain(a1);
  v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  v38 = v10;
  if (!v64)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v67 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = v19;
  swift_bridgeObjectRelease(a1);
  v41 = *(int *)(v19 + 44);
  v19 = (uint64_t)v71;
  v42 = v71[v41];
  v14 = (char *)v40;
  sub_1001FEF48(v14, v42, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v36);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for InheritanceInvitationRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A89A8);
  v45 = (uint64_t)v69;
  v46 = sub_100027FE8(v19, (uint64_t)v69, type metadata accessor for InheritanceInvitationRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  if (os_log_type_enabled(v47, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    v52 = v36;
    v53 = swift_slowAlloc(64, -1);
    v75[0] = v53;
    *(_DWORD *)v51 = 136315394;
    v66 = v50;
    v74 = (void *)sub_1001DEF4C(0xD00000000000001BLL, 0x800000010020A4B0, v75);
    v71 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    *(_WORD *)(v51 + 12) = 2080;
    v65 = v51 + 14;
    v54 = v45 + *(int *)(v52 + 36);
    v55 = v67;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v54, v67);
    sub_100028388(v45, type metadata accessor for InheritanceInvitationRecord);
    v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    v58 = v39;
    v59 = v57;
    v61 = v60;
    (*((void (**)(char *, uint64_t))v58 + 1))(v11, v55);
    v74 = (void *)sub_1001DEF4C(v59, v61, v75);
    v27 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v66, "%s %s saved successfully", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for InheritanceInvitationRecord);
  }

  v62 = v70;
  sub_100027FE8((uint64_t)v27, (uint64_t)v70, type metadata accessor for InheritanceInvitationRecord);
  swift_storeEnumTagMultiPayload(v62, v68, 0);
  v73((uint64_t)v62);

  sub_100004934((uint64_t)v62, (uint64_t *)&unk_10028FA70);
  sub_100028388((uint64_t)v27, type metadata accessor for InheritanceInvitationRecord);
}

void sub_100057154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  char *v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  void *v70;
  uint64_t v71[2];

  v68 = a8;
  v69 = a7;
  v64 = a6;
  v65 = (char *)a4;
  v67 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D640);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianshipInfoRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v61 - v26;
  v28 = sub_1000080B4(&qword_10028C450);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v66 = (uint64_t *)((char *)&v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v71[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v70, v71, v33, v34, 6))
    {
      v35 = v70;
      sub_10005A430(v70, (uint64_t)v67, v64, v69, v68);

    }
    else
    {
      v42 = v66;
      *v66 = a3;
      swift_storeEnumTagMultiPayload(v42, v32, 1);
      swift_errorRetain(a3);
      v69((uint64_t)v42);
      sub_100004934((uint64_t)v42, &qword_10028C450);
    }
    return;
  }
  v65 = v24;
  if (!a1)
    return;
  v64 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v59 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v59 = a1;
  swift_bridgeObjectRetain(a1);
  v60 = _CocoaArrayWrapper.endIndex.getter(v59);
  v38 = v10;
  if (!v60)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v63 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = (uint64_t)v67;
  swift_bridgeObjectRelease(a1);
  v41 = *(unsigned __int8 *)(v36 + *(int *)(v19 + 36));
  v14 = (char *)v40;
  sub_1000ECBBC(v14, v41, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for CustodianshipInfoRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v43 = type metadata accessor for Logger(0);
  sub_100005288(v43, (uint64_t)qword_1002A89A8);
  v44 = v36;
  v45 = (uint64_t)v65;
  v46 = sub_100027FE8(v44, (uint64_t)v65, type metadata accessor for CustodianshipInfoRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v47, v49))
  {
    v50 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v71[0] = v62;
    *(_DWORD *)v50 = 136315394;
    v70 = (void *)sub_1001DEF4C(0xD000000000000017, 0x8000000100209FC0, v71);
    v67 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    *(_WORD *)(v50 + 12) = 2080;
    v61 = v50 + 14;
    v51 = v63;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v45, v63);
    sub_100028388(v45, type metadata accessor for CustodianshipInfoRecord);
    v52 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
    v54 = v39;
    v56 = v55;
    (*((void (**)(char *, uint64_t))v54 + 1))(v11, v51);
    v70 = (void *)sub_1001DEF4C(v53, v56, v71);
    v27 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    swift_bridgeObjectRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v47, v49, "%s %s saved successfully", (uint8_t *)v50, 0x16u);
    v57 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for CustodianshipInfoRecord);
  }

  v58 = v66;
  sub_100027FE8((uint64_t)v27, (uint64_t)v66, type metadata accessor for CustodianshipInfoRecord);
  swift_storeEnumTagMultiPayload(v58, v64, 0);
  v69((uint64_t)v58);

  sub_100004934((uint64_t)v58, &qword_10028C450);
  sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipInfoRecord);
}

void sub_100057704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  void *v74;
  uint64_t v75[2];

  v72 = a8;
  v73 = a7;
  v68 = a6;
  v69 = (char *)a4;
  v71 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D650);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BeneficiaryInfoRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v65 - v26;
  v28 = sub_1000080B4(&qword_100295630);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v70 = (uint64_t *)((char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v75[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v74, v75, v33, v34, 6))
    {
      v35 = v74;
      sub_10005A9D8(v74, (uint64_t)v71, v68, v73, v72);

    }
    else
    {
      v43 = v70;
      *v70 = a3;
      swift_storeEnumTagMultiPayload(v43, v32, 1);
      swift_errorRetain(a3);
      v73((uint64_t)v43);
      sub_100004934((uint64_t)v43, &qword_100295630);
    }
    return;
  }
  v69 = v24;
  if (!a1)
    return;
  v68 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v63 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v63 = a1;
  swift_bridgeObjectRetain(a1);
  v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  v38 = v10;
  if (!v64)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v67 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = v19;
  swift_bridgeObjectRelease(a1);
  v41 = *(int *)(v19 + 40);
  v19 = (uint64_t)v71;
  v42 = v71[v41];
  v14 = (char *)v40;
  sub_100011C84(v14, v42, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v36);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for BeneficiaryInfoRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A89A8);
  v45 = (uint64_t)v69;
  v46 = sub_100027FE8(v19, (uint64_t)v69, type metadata accessor for BeneficiaryInfoRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  if (os_log_type_enabled(v47, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    v52 = v36;
    v53 = swift_slowAlloc(64, -1);
    v75[0] = v53;
    *(_DWORD *)v51 = 136315394;
    v66 = v50;
    v74 = (void *)sub_1001DEF4C(0xD000000000000015, 0x800000010020A580, v75);
    v71 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    *(_WORD *)(v51 + 12) = 2080;
    v65 = v51 + 14;
    v54 = v45 + *(int *)(v52 + 32);
    v55 = v67;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v54, v67);
    sub_100028388(v45, type metadata accessor for BeneficiaryInfoRecord);
    v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    v58 = v39;
    v59 = v57;
    v61 = v60;
    (*((void (**)(char *, uint64_t))v58 + 1))(v11, v55);
    v74 = (void *)sub_1001DEF4C(v59, v61, v75);
    v27 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v66, "%s %s saved successfully", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for BeneficiaryInfoRecord);
  }

  v62 = v70;
  sub_100027FE8((uint64_t)v27, (uint64_t)v70, type metadata accessor for BeneficiaryInfoRecord);
  swift_storeEnumTagMultiPayload(v62, v68, 0);
  v73((uint64_t)v62);

  sub_100004934((uint64_t)v62, &qword_100295630);
  sub_100028388((uint64_t)v27, type metadata accessor for BeneficiaryInfoRecord);
}

void sub_100057CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  void (*v73)(uint64_t);
  void *v74;
  uint64_t v75[2];

  v72 = a8;
  v73 = a7;
  v68 = a6;
  v69 = (char *)a4;
  v71 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D648);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for BenefactorInfoRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v65 - v26;
  v28 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v70 = (uint64_t *)((char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v75[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if (swift_dynamicCast(&v74, v75, v33, v34, 6))
    {
      v35 = v74;
      sub_10005AF64(v74, (uint64_t)v71, v68, v73, v72);

    }
    else
    {
      v43 = v70;
      *v70 = a3;
      swift_storeEnumTagMultiPayload(v43, v32, 1);
      swift_errorRetain(a3);
      v73((uint64_t)v43);
      sub_100004934((uint64_t)v43, (uint64_t *)&unk_10028FA40);
    }
    return;
  }
  v69 = v24;
  if (!a1)
    return;
  v68 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v63 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v63 = a1;
  swift_bridgeObjectRetain(a1);
  v64 = _CocoaArrayWrapper.endIndex.getter(v63);
  v38 = v10;
  if (!v64)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v67 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = v19;
  swift_bridgeObjectRelease(a1);
  v41 = *(int *)(v19 + 36);
  v19 = (uint64_t)v71;
  v42 = v71[v41];
  v14 = (char *)v40;
  sub_10016E820(v14, v42, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v36);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for BenefactorInfoRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A89A8);
  v45 = (uint64_t)v69;
  v46 = sub_100027FE8(v19, (uint64_t)v69, type metadata accessor for BenefactorInfoRecord);
  v47 = Logger.logObject.getter(v46);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = v49;
  if (os_log_type_enabled(v47, v49))
  {
    v51 = swift_slowAlloc(22, -1);
    v52 = v36;
    v53 = swift_slowAlloc(64, -1);
    v75[0] = v53;
    *(_DWORD *)v51 = 136315394;
    v66 = v50;
    v74 = (void *)sub_1001DEF4C(0xD000000000000014, 0x800000010020A560, v75);
    v71 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    *(_WORD *)(v51 + 12) = 2080;
    v65 = v51 + 14;
    v54 = v45 + *(int *)(v52 + 28);
    v55 = v67;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v54, v67);
    sub_100028388(v45, type metadata accessor for BenefactorInfoRecord);
    v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    v58 = v39;
    v59 = v57;
    v61 = v60;
    (*((void (**)(char *, uint64_t))v58 + 1))(v11, v55);
    v74 = (void *)sub_1001DEF4C(v59, v61, v75);
    v27 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v66, "%s %s saved successfully", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    sub_100028388(v45, type metadata accessor for BenefactorInfoRecord);
  }

  v62 = v70;
  sub_100027FE8((uint64_t)v27, (uint64_t)v70, type metadata accessor for BenefactorInfoRecord);
  swift_storeEnumTagMultiPayload(v62, v68, 0);
  v73((uint64_t)v62);

  sub_100004934((uint64_t)v62, (uint64_t *)&unk_10028FA40);
  sub_100028388((uint64_t)v27, type metadata accessor for BenefactorInfoRecord);
}

void sub_100058284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t *), uint64_t a8)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  __n128 v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t *);
  void *v69;
  uint64_t v70[2];

  v67 = a8;
  v68 = a7;
  v63 = a6;
  v64 = (char *)a4;
  v66 = (char *)a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D660);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for IdentityRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v60 - v26;
  v28 = sub_1000080B4(&qword_10028D618);
  v30 = (void *)__chkstk_darwin(v28, v29);
  v65 = (uint64_t *)((char *)&v60 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a3)
  {
    v32 = v30;
    v70[0] = a3;
    swift_errorRetain(a3);
    v33 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    if ((swift_dynamicCast(&v69, v70, v33, v34, 6) & 1) != 0)
    {
      v35 = v69;
      sub_10005B50C(v69, (uint64_t)v66, v63, v68, v67);

    }
    else
    {
      v42 = v65;
      *v65 = a3;
      swift_storeEnumTagMultiPayload(v42, v32, 1);
      swift_errorRetain(a3);
      v68(v42);
      sub_100004934((uint64_t)v42, &qword_10028D618);
    }
    return;
  }
  v64 = v24;
  if (!a1)
    return;
  v63 = v30;
  v36 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!((unint64_t)a1 >> 62))
  {
    v37 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v38 = v10;
    if (v37)
      goto LABEL_7;
LABEL_22:
    swift_bridgeObjectRelease(a1);
    return;
  }
  if (a1 >= 0)
    v58 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v58 = a1;
  swift_bridgeObjectRetain(a1);
  v59 = _CocoaArrayWrapper.endIndex.getter(v58);
  v38 = v10;
  if (!v59)
    goto LABEL_22;
LABEL_7:
  v39 = v11;
  v62 = v38;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v11 = v14;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_25:
      swift_once(&qword_10028ADB8, sub_100046CE4);
      goto LABEL_14;
    }
    v11 = v14;
    v40 = *(id *)(a1 + 32);
  }
  v36 = (uint64_t)v66;
  swift_bridgeObjectRelease(a1);
  v41 = *(unsigned __int8 *)(v36 + *(int *)(v19 + 64));
  v14 = (char *)v40;
  sub_10006ED5C(v14, v41, (uint64_t)v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_10003B730((uint64_t)v18, (uint64_t)v27, type metadata accessor for IdentityRecord);
  if (qword_10028ADB8 != -1)
    goto LABEL_25;
LABEL_14:
  v43 = type metadata accessor for Logger(0);
  sub_100005288(v43, (uint64_t)qword_1002A89A8);
  v44 = (uint64_t)v64;
  v45 = sub_100027FE8(v36, (uint64_t)v64, type metadata accessor for IdentityRecord);
  v46 = Logger.logObject.getter(v45);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v46, v48))
  {
    v49 = swift_slowAlloc(22, -1);
    v61 = swift_slowAlloc(64, -1);
    v70[0] = v61;
    *(_DWORD *)v49 = 136315394;
    v69 = (void *)sub_1001DEF4C(0x797469746E656449, 0xEE0064726F636552, v70);
    v66 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    *(_WORD *)(v49 + 12) = 2080;
    v60 = v49 + 14;
    v50 = v62;
    (*((void (**)(char *, uint64_t, uint64_t))v39 + 2))(v11, v44, v62);
    sub_100028388(v44, type metadata accessor for IdentityRecord);
    v51 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
    v53 = v39;
    v55 = v54;
    (*((void (**)(char *, uint64_t))v53 + 1))(v11, v50);
    v69 = (void *)sub_1001DEF4C(v52, v55, v70);
    v27 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v46, v48, "%s %s saved successfully", (uint8_t *)v49, 0x16u);
    v56 = v61;
    swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    sub_100028388(v44, type metadata accessor for IdentityRecord);
  }

  v57 = v65;
  sub_100027FE8((uint64_t)v27, (uint64_t)v65, type metadata accessor for IdentityRecord);
  swift_storeEnumTagMultiPayload(v57, v63, 0);
  v68(v57);

  sub_100004934((uint64_t)v57, &qword_10028D618);
  sub_100028388((uint64_t)v27, type metadata accessor for IdentityRecord);
}

uint64_t sub_10005883C(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4(&qword_10028D5B8);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CustodianHealthRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for CustodianHealthRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for CustodianHealthRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_1002619B0, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for CustodianHealthRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_100060028((uint64_t)v17, (uint64_t)sub_10005E5FC, (uint64_t)v29, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_1002619D8, (uint64_t)sub_100061720, (uint64_t)&unk_1002619F0);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianHealthRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, &qword_10028D5B8);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, &qword_10028D5B8);
    }
  }
}

uint64_t sub_100058DE4(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for CustodianRecoveryInfoRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100261BE0, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for CustodianRecoveryInfoRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_10005DC04((uint64_t)v17, (uint64_t)sub_10005EF2C, (uint64_t)v29);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecoveryInfoRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, &qword_100293AB0);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, &qword_100293AB0);
    }
  }
}

uint64_t sub_100059370(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CustodianRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for CustodianRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for CustodianRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100261AC8, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for CustodianRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_10005DF00((uint64_t)v17, (uint64_t)sub_10005EA98, (uint64_t)v29);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, &qword_10028D5D0);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, &qword_10028D5D0);
    }
  }
}

uint64_t sub_1000598FC(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for InheritanceHealthRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for InheritanceHealthRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100261898, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for InheritanceHealthRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_100060808((uint64_t)v17, (uint64_t)sub_10005DBE0, (uint64_t)v29, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_1002618C0, (uint64_t)sub_10005E1F8, (uint64_t)&unk_1002618D8);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for InheritanceHealthRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, (uint64_t *)&unk_100295390);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, (uint64_t *)&unk_100295390);
    }
  }
}

uint64_t sub_100059EA4(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for InheritanceInvitationRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for InheritanceInvitationRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_1002621F8, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for InheritanceInvitationRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_10005FD30((uint64_t)v17, (uint64_t)sub_100060FC8, (uint64_t)v29);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for InheritanceInvitationRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, (uint64_t *)&unk_10028FA70);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, (uint64_t *)&unk_10028FA70);
    }
  }
}

uint64_t sub_10005A430(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for CustodianshipInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100261FA0, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for CustodianshipInfoRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_100060028((uint64_t)v17, (uint64_t)sub_10005FD0C, (uint64_t)v29, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_100261FC8, (uint64_t)sub_100061720, (uint64_t)&unk_100261FE0);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, &qword_10028C450);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, &qword_10028C450);
    }
  }
}

uint64_t sub_10005A9D8(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for BeneficiaryInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100262130, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for BeneficiaryInfoRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_100060510((uint64_t)v17, (uint64_t)sub_100060DA8, (uint64_t)v29);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, &qword_100295630);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, &qword_100295630);
    }
  }
}

uint64_t sub_10005AF64(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;

  v64 = a4;
  v65 = a5;
  v59 = a3;
  v60 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v60, v7);
  v61 = (void **)((char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for BenefactorInfoRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  type metadata accessor for CKError(0);
  v19 = v18;
  v67 = 26;
  v20 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v21 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v20, v19, v21);
  v22 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v62 = a1;
  v23 = (void *)sub_10015D724(v67, a1);

  if (v23)
    goto LABEL_3;
  v67 = 28;
  v24 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v24, v19, v21);
  v25 = v68;
  v66 = (uint64_t)v68;
  _BridgedStoredNSError.code.getter(&v67, v19, v21);

  v26 = (void *)sub_10015D724(v67, v62);
  if (v26)
  {
LABEL_3:
    sub_100027FE8(a2, (uint64_t)v17, type metadata accessor for BenefactorInfoRecord);
    sub_100027FE8(a2, (uint64_t)v14, type metadata accessor for BenefactorInfoRecord);
    v27 = *(unsigned __int8 *)(v10 + 80);
    v28 = (v27 + 40) & ~v27;
    v29 = (_QWORD *)swift_allocObject(&unk_100262068, v28 + v11, v27 | 7);
    v30 = v65;
    v29[2] = v64;
    v29[3] = v30;
    v31 = v63;
    v29[4] = v63;
    sub_10003B730((uint64_t)v14, (uint64_t)v29 + v28, type metadata accessor for BenefactorInfoRecord);
    swift_retain(v30);
    swift_retain(v31);
    sub_100060808((uint64_t)v17, (uint64_t)sub_1000604EC, (uint64_t)v29, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_100262090, (uint64_t)sub_100061720, (uint64_t)&unk_1002620A8);
    swift_release(v29);
    return sub_100028388((uint64_t)v17, type metadata accessor for BenefactorInfoRecord);
  }
  else
  {
    v67 = 14;
    v33 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v68, &v67, v33, v19, v21);
    v34 = v68;
    v66 = (uint64_t)v68;
    _BridgedStoredNSError.code.getter(&v67, v19, v21);

    v35 = v62;
    v36 = (void *)sub_10015D724(v67, v62);

    if (v36)
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Conflicted record. Need to resolve the conflict before saving.", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_1001B1750(v35, v59);
      v42 = v60;
      v43 = (uint64_t)v61;
      *v61 = v35;
      swift_storeEnumTagMultiPayload(v43, v42, 1);
      v44 = v35;
      v64(v43);
      return sub_100004934(v43, (uint64_t *)&unk_10028FA40);
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89A8);
      v46 = v35;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v68 = (void *)v50;
        *(_DWORD *)v49 = 136315138;
        v51 = v46;
        v52 = related decl 'e' for CKErrorCode.description.getter(v51);
        v54 = v53;

        v67 = sub_1001DEF4C(v52, v54, (uint64_t *)&v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);

        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unknown error while saving the record %s.", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

      }
      else
      {

      }
      v55 = v64;
      v56 = v60;
      v57 = (uint64_t)v61;
      *v61 = v46;
      swift_storeEnumTagMultiPayload(v57, v56, 1);
      v58 = v46;
      v55(v57);
      return sub_100004934(v57, (uint64_t *)&unk_10028FA40);
    }
  }
}

uint64_t sub_10005B50C(void *a1, uint64_t a2, void *a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint8_t *v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD *);
  uint64_t v49;
  uint64_t v50;

  v6 = v5;
  v48 = a4;
  v47 = sub_1000080B4(&qword_10028D618);
  __chkstk_darwin(v47, v11);
  v13 = (uint8_t **)((char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for IdentityRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = __chkstk_darwin(v14, v17);
  v19 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v45 - v21;
  if (sub_10015D658(a1) || sub_10015D660(a1))
  {
    sub_100027FE8(a2, (uint64_t)v22, type metadata accessor for IdentityRecord);
    sub_100027FE8(a2, (uint64_t)v19, type metadata accessor for IdentityRecord);
    v23 = *(unsigned __int8 *)(v15 + 80);
    v24 = (v23 + 40) & ~v23;
    v25 = (_QWORD *)swift_allocObject(&unk_1002622C0, v24 + v16, v23 | 7);
    v25[2] = v48;
    v25[3] = a5;
    v25[4] = v6;
    sub_10003B730((uint64_t)v19, (uint64_t)v25 + v24, type metadata accessor for IdentityRecord);
    swift_retain(a5);
    swift_retain(v6);
    sub_100061390((uint64_t)v22, (uint64_t)sub_10006137C, (uint64_t)v25);
    swift_release(v25);
    return sub_100028388((uint64_t)v22, type metadata accessor for IdentityRecord);
  }
  else
  {
    if (sub_10015D1F8(a1))
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_100005288(v27, (uint64_t)qword_1002A89A8);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Conflicted record. Need to resolve the conflict before saving.", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

      sub_1001B1750(a1, a3);
      *v13 = a1;
      swift_storeEnumTagMultiPayload(v13, v47, 1);
      v32 = a1;
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v33 = type metadata accessor for Logger(0);
      sub_100005288(v33, (uint64_t)qword_1002A89A8);
      v34 = a1;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = swift_slowAlloc(32, -1);
        v50 = v46;
        *(_DWORD *)v37 = 136315138;
        v45 = v37 + 4;
        v38 = v37;
        v39 = v34;
        v40 = related decl 'e' for CKErrorCode.description.getter(v39);
        v42 = v41;

        v49 = sub_1001DEF4C(v40, v42, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);

        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unknown error while saving the record %s.", v37, 0xCu);
        v43 = v46;
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v38, -1, -1);

      }
      else
      {

      }
      *v13 = v34;
      swift_storeEnumTagMultiPayload(v13, v47, 1);
      v44 = v34;
    }
    v48(v13);
    return sub_100004934((uint64_t)v13, &qword_10028D618);
  }
}

void sub_10005B934(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v9 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v9, v9);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (uint64_t *)((char *)&v18 - v12);
  if (a1)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload((char *)&v18 - v12, v10, 1);
    swift_errorRetain(a1);
    a2(v13);
    sub_100004934((uint64_t)v13, &qword_100293AB0);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 40)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v14 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v14 = &qword_1002A8C70;
    }
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_1001FD4C0(v16, v15);
    v19 = objc_msgSend(v17, "privateCloudDatabase");
    swift_bridgeObjectRelease(v15);

    sub_10005421C(a5, v19, a2, a3);
  }
}

void sub_10005BB18(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v9 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v9, v9);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (uint64_t *)((char *)&v18 - v12);
  if (a1)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload((char *)&v18 - v12, v10, 1);
    swift_errorRetain(a1);
    a2(v13);
    sub_100004934((uint64_t)v13, &qword_10028D5D0);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(type metadata accessor for CustodianRecord(0) + 48)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v14 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v14 = &qword_1002A8C70;
    }
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_1001FD4C0(v16, v15);
    v19 = objc_msgSend(v17, "privateCloudDatabase");
    swift_bridgeObjectRelease(v15);

    sub_100054464(a5, v19, a2, a3);
  }
}

void sub_10005BCFC(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v9 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v9, v9);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (uint64_t *)((char *)&v18 - v12);
  if (a1)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload((char *)&v18 - v12, v10, 1);
    swift_errorRetain(a1);
    a2(v13);
    sub_100004934((uint64_t)v13, (uint64_t *)&unk_10028FA70);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 44)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v14 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v14 = &qword_1002A8C90;
    }
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_1001FD4C0(v16, v15);
    v19 = objc_msgSend(v17, "privateCloudDatabase");
    swift_bridgeObjectRelease(v15);

    sub_100054914(a5, v19, a2, a3);
  }
}

void sub_10005BEE0(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, id, void (*)(_QWORD), uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;

  v15 = sub_1000080B4(a6);
  __chkstk_darwin(v15, v15);
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (uint64_t *)((char *)&v24 - v18);
  if (a1)
  {
    *v19 = a1;
    swift_storeEnumTagMultiPayload((char *)&v24 - v18, v16, 1);
    swift_errorRetain(a1);
    a2(v19);
    sub_100004934((uint64_t)v19, a6);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(a7(0) + 36)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v20 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v20 = &qword_1002A8C70;
    }
    v22 = *v20;
    v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    v23 = sub_1001FD4C0(v22, v21);
    v25 = objc_msgSend(v23, "privateCloudDatabase");
    swift_bridgeObjectRelease(v21);

    a8(a5, v25, (void (*)(_QWORD))a2, a3);
  }
}

void sub_10005C0D4(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v9 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v9, v9);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (uint64_t *)((char *)&v18 - v12);
  if (a1)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload((char *)&v18 - v12, v10, 1);
    swift_errorRetain(a1);
    a2(v13);
    sub_100004934((uint64_t)v13, &qword_100295630);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 40)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v14 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v14 = &qword_1002A8C90;
    }
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_1001FD4C0(v16, v15);
    v19 = objc_msgSend(v17, "privateCloudDatabase");
    swift_bridgeObjectRelease(v15);

    sub_100054DC4(a5, v19, a2, a3);
  }
}

void sub_10005C2B8(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, id, void (*)(_QWORD), uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;

  v15 = sub_1000080B4(a6);
  __chkstk_darwin(v15, v15);
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = (uint64_t *)((char *)&v24 - v18);
  if (a1)
  {
    *v19 = a1;
    swift_storeEnumTagMultiPayload((char *)&v24 - v18, v16, 1);
    swift_errorRetain(a1);
    a2(v19);
    sub_100004934((uint64_t)v19, a6);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(a7(0) + 36)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v20 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v20 = &qword_1002A8C90;
    }
    v22 = *v20;
    v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    v23 = sub_1001FD4C0(v22, v21);
    v25 = objc_msgSend(v23, "privateCloudDatabase");
    swift_bridgeObjectRelease(v21);

    a8(a5, v25, (void (*)(_QWORD))a2, a3);
  }
}

void sub_10005C4AC(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v9 = sub_1000080B4(&qword_10028D618);
  __chkstk_darwin(v9, v9);
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v13 = (uint64_t *)((char *)&v18 - v12);
  if (a1)
  {
    *v13 = a1;
    swift_storeEnumTagMultiPayload((char *)&v18 - v12, v10, 1);
    swift_errorRetain(a1);
    a2(v13);
    sub_100004934((uint64_t)v13, &qword_10028D618);
  }
  else
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(type metadata accessor for IdentityRecord(0) + 64)) == 1)
    {
      if (qword_10028AF30 != -1)
        swift_once(&qword_10028AF30, sub_1001FDE6C);
      v14 = &qword_1002A8CC0;
    }
    else
    {
      if (qword_10028AF28 != -1)
        swift_once(&qword_10028AF28, sub_1001FDE34);
      v14 = &qword_1002A8CB0;
    }
    v16 = *v14;
    v15 = v14[1];
    swift_bridgeObjectRetain(v15);
    v17 = sub_1001FD4C0(v16, v15);
    v19 = objc_msgSend(v17, "privateCloudDatabase");
    swift_bridgeObjectRelease(v15);

    sub_100055274(a5, v19, a2, a3);
  }
}

uint64_t sub_10005C690(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return sub_10005C6B4(a1, a2, a3, a4, &qword_10028D598, CKRecordZone_ptr, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
}

uint64_t sub_10005C6B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unint64_t *a5, _QWORD *a6, unint64_t *a7, _QWORD *a8)
{
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, void *);
  uint64_t v15;
  uint64_t v16;
  id v17;

  v12 = a2;
  v14 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v15 = sub_1000067D4(0, a5, a6);
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v15);
  }
  if (a3)
  {
    v16 = sub_1000067D4(0, a7, a8);
    a3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v16);
  }
  swift_retain(v13);
  v17 = a4;
  v14(v12, a3, a4);
  swift_release(v13);

  swift_bridgeObjectRelease(a3);
  return swift_bridgeObjectRelease(v12);
}

Class sub_10005C77C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  objc_class *v9;
  Swift::String v10;
  CKRecordID v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  Swift::String v18;
  Class isa;

  if (qword_10028AF00 != -1)
    a1 = swift_once(&qword_10028AF00, sub_1001FD458);
  v1 = UUID.uuidString.getter(a1);
  v3 = v2;
  v4 = sub_1001FDA64(v1, v2);
  swift_bridgeObjectRelease(v3);
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v5 = type metadata accessor for BeneficiaryInfoRecord(0);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  v9 = v4;
  v10._countAndFlagsBits = v6;
  v10._object = v8;
  v11.super.isa = CKRecordID.init(recordName:zoneID:)(v10, (CKRecordZoneID)v9).super.isa;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A89A8);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "Failed to unarchive record -- creating new one", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  v18._object = (void *)0x80000001002094E0;
  v18._countAndFlagsBits = 0xD000000000000020;
  isa = CKRecord.init(recordType:recordID:)(v18, v11).super.isa;

  return isa;
}

Class sub_10005C944(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  objc_class *v10;
  Swift::String v11;
  CKRecordID v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  __n128 v16;
  os_log_type_t v17;
  uint8_t *v18;
  Swift::String v19;
  Class isa;

  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v5 = sub_1001FDA64(0xD000000000000011, (void *)0x800000010020A470);
  v6 = sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v7 = UUID.uuidString.getter(v6);
  v9 = v8;
  v10 = v5;
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  v12.super.isa = CKRecordID.init(recordName:zoneID:)(v11, (CKRecordZoneID)v10).super.isa;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89A8);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v15, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "Failed to unarchive record -- creating new one", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  v19._countAndFlagsBits = a2;
  v19._object = a3;
  isa = CKRecord.init(recordType:recordID:)(v19, v12).super.isa;

  return isa;
}

Class sub_10005CB00(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  objc_class *v16;
  Swift::String v17;
  CKRecordID v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint8_t *v24;
  Swift::String v25;
  Class isa;

  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v7 = a2(0);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  v11 = sub_1001FDA64(v8, v9);
  swift_bridgeObjectRelease(v10);
  v12 = sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  v16 = v11;
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  v18.super.isa = CKRecordID.init(recordName:zoneID:)(v17, (CKRecordZoneID)v16).super.isa;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100005288(v19, (uint64_t)qword_1002A89A8);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Failed to unarchive record -- creating new one", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  v25._countAndFlagsBits = a3;
  v25._object = a4;
  isa = CKRecord.init(recordType:recordID:)(v25, v18).super.isa;

  return isa;
}

Class sub_10005CCCC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, void *a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  objc_class *v15;
  Swift::String v16;
  CKRecordID v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  Swift::String v24;
  Class isa;

  if (qword_10028AF00 != -1)
    a1 = swift_once(&qword_10028AF00, sub_1001FD458);
  v7 = UUID.uuidString.getter(a1);
  v9 = v8;
  v10 = sub_1001FDA64(v7, v8);
  swift_bridgeObjectRelease(v9);
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v11 = a2(0);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  v15 = v10;
  v16._countAndFlagsBits = v12;
  v16._object = v14;
  v17.super.isa = CKRecordID.init(recordName:zoneID:)(v16, (CKRecordZoneID)v15).super.isa;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A89A8);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v20, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "Failed to unarchive record -- creating new one", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  v24._countAndFlagsBits = a3;
  v24._object = a4;
  isa = CKRecord.init(recordType:recordID:)(v24, v17).super.isa;

  return isa;
}

Class sub_10005CE98()
{
  objc_class *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  objc_class *v5;
  Swift::String v6;
  CKRecordID v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::String v14;
  Class isa;

  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v0 = sub_1001FDA64(0xD000000000000011, (void *)0x800000010020A470);
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v1 = type metadata accessor for InheritanceInvitationRecord(0);
  v2 = UUID.uuidString.getter(v1);
  v4 = v3;
  v5 = v0;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  v7.super.isa = CKRecordID.init(recordName:zoneID:)(v6, (CKRecordZoneID)v5).super.isa;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89A8);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "Failed to unarchive record -- creating new one", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_10028D578, CKRecord_ptr);
  v14._countAndFlagsBits = 0xD00000000000001BLL;
  v14._object = (void *)0x800000010020A4B0;
  isa = CKRecord.init(recordType:recordID:)(v14, v7).super.isa;

  return isa;
}

void *sub_10005D064(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t sub_10005D0F8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_10005D120(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _typeName(_:qualified:)(v1, 0);
}

uint64_t sub_10005D144(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v23 = v8;
    v24 = a1;
    v25 = v6;
    v26 = a2;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v28[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (qword_10028AE18 != -1)
      swift_once(&qword_10028AE18, sub_10004A0C4);
    v20 = qword_10028D490;
    v19 = *(_QWORD *)algn_10028D498;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028D498);
    v27 = sub_1001DEF4C(v20, v19, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "%s - started.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v6 = v25;
    a2 = v26;
    v8 = v23;
    a1 = v24;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd21BenefactorHealthCheck__inheritanceStorage, v7);
  Dependency.wrappedValue.getter(v28, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_10000732C(v28, v28[3]);
  v21 = (_QWORD *)swift_allocObject(&unk_1002616B8, 48, 7);
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = v3;
  v21[5] = v6;
  swift_retain(a2);
  swift_retain(v3);
  sub_1000CC71C((uint64_t)sub_10005D3F4, (uint64_t)v21);
  swift_release(v21);
  return sub_100006F58(v28);
}

uint64_t sub_10005D3EC()
{
  return sub_10005D430(48);
}

uint64_t sub_10005D3F4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10004A10C(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_10005D404()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005D428()
{
  return sub_10005D430(40);
}

uint64_t sub_10005D430(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10005D468()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  v10(v8 + v1[7], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[8]), *(_QWORD *)(v8 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6));

  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_10005D554(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10004AD6C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10005D5BC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005D5E0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  v10(v8 + v1[7], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[8]), *(_QWORD *)(v8 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10005D6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10004BEF0(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(void (**)(uint64_t))(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10005D73C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + v6 + 8) & ~v9;
  v19 = v3 | v9 | 7;
  v11 = ((*(_QWORD *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = v0 + v4;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v1[5] + 8));
  v14(v12 + v1[7], v13);
  sub_10000F494(*(_QWORD *)(v12 + v1[8]), *(_QWORD *)(v12 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  v15 = v0 + v10;
  v14(v0 + v10, v13);
  v16 = v0 + v10 + v7[5];
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  sub_10000F494(*(_QWORD *)(v15 + v7[6]), *(_QWORD *)(v15 + v7[6] + 8));
  v14(v0 + v10 + v7[7], v13);
  sub_10000F494(*(_QWORD *)(v15 + v7[8]), *(_QWORD *)(v15 + v7[8] + 8));
  return swift_deallocObject(v0, v11, v19);
}

uint64_t sub_10005D8C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for InheritanceHealthRecord(0);
  return sub_10004C59C(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), (v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))));
}

uint64_t sub_10005D96C()
{
  return sub_10005D988(48);
}

uint64_t sub_10005D974(uint64_t a1)
{
  uint64_t v1;

  return sub_10004D730(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10005D980()
{
  return sub_10005D988(40);
}

uint64_t sub_10005D988(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10005D9C0(uint64_t a1)
{
  uint64_t v1;

  return sub_10004DF64(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10005D9CC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v8 + v1[5];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_10000F494(*(_QWORD *)(v8 + v1[6]), *(_QWORD *)(v8 + v1[6] + 8));
  v10(v8 + v1[7], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[8]), *(_QWORD *)(v8 + v1[8] + 8));

  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10005DAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1000565D4);
}

uint64_t sub_10005DAF4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005DBE0(uint64_t a1)
{
  return sub_10005E620(a1, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_100295390, (uint64_t)sub_1000546AC, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t (*)(_QWORD), uint64_t))sub_10005C2B8);
}

uint64_t sub_10005DC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  CKModifyRecordZonesOperation v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD aBlock[5];
  uint64_t v32;
  Swift::OpaquePointer_optional v33;
  Swift::OpaquePointer_optional v34;

  v6 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100027FE8(a1, (uint64_t)v9, v10);
  if (qword_10028AF00 != -1)
    v11 = swift_once(&qword_10028AF00, sub_1001FD458);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  v15 = sub_1001FDA64(v12, v13);
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v15);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v17 = sub_1000080B4(&qword_10028D570);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v18 + 32) = v16;
  aBlock[0] = v18;
  specialized Array._endMutation()(v18);
  v19 = (void *)aBlock[0];
  v20 = v16;
  v33.value._rawValue = v19;
  v33.is_nil = 0;
  v21.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v33, v34).super.super.super.super.isa;
  sub_1001AE8D8();
  v22 = swift_allocObject(&unk_100261C08, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  aBlock[4] = sub_100061720;
  v32 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = &unk_100261C20;
  v23 = _Block_copy(aBlock);
  v24 = v32;
  swift_retain(a3);
  swift_release(v24);
  -[objc_class setModifyRecordZonesCompletionBlock:](v21.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v23);
  _Block_release(v23);
  if (v9[*(int *)(v6 + 40)] == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v25 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v25 = &qword_1002A8C70;
  }
  v27 = *v25;
  v26 = v25[1];
  swift_bridgeObjectRetain(v26);
  v28 = sub_1001FD4C0(v27, v26);
  v29 = objc_msgSend(v28, "privateCloudDatabase");
  swift_bridgeObjectRelease(v26);

  objc_msgSend(v29, "addOperation:", v21.super.super.super.super.isa);
  return sub_100028388((uint64_t)v9, type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_10005DF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  CKModifyRecordZonesOperation v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v28;
  Swift::OpaquePointer_optional v29;
  Swift::OpaquePointer_optional v30;

  v6 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v9, v10);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v11 = sub_1001FDA64(0xD000000000000011, (void *)0x800000010020A470);
  v12 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v11);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v13 = sub_1000080B4(&qword_10028D570);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v14 + 32) = v12;
  aBlock[0] = v14;
  specialized Array._endMutation()(v14);
  v15 = (void *)aBlock[0];
  v16 = v12;
  v29.value._rawValue = v15;
  v29.is_nil = 0;
  v17.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v29, v30).super.super.super.super.isa;
  sub_1001AE8D8();
  v18 = swift_allocObject(&unk_100261AF0, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  aBlock[4] = sub_100061720;
  v28 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = &unk_100261B08;
  v19 = _Block_copy(aBlock);
  v20 = v28;
  swift_retain(a3);
  swift_release(v20);
  -[objc_class setModifyRecordZonesCompletionBlock:](v17.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v19);
  _Block_release(v19);
  if (v9[*(int *)(v6 + 48)] == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v21 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v21 = &qword_1002A8C70;
  }
  v23 = *v21;
  v22 = v21[1];
  swift_bridgeObjectRetain(v22);
  v24 = sub_1001FD4C0(v23, v22);
  v25 = objc_msgSend(v24, "privateCloudDatabase");
  swift_bridgeObjectRelease(v22);

  objc_msgSend(v25, "addOperation:", v17.super.super.super.super.isa);
  return sub_100028388((uint64_t)v9, type metadata accessor for CustodianRecord);
}

uint64_t sub_10005E1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001B14C8(a1, a2, a3, *(uint64_t (**)(uint64_t))(v3 + 16));
}

uint64_t sub_10005E200()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005E304()
{
  return sub_10005FAD0(type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004FE9C);
}

uint64_t sub_10005E318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001A7A98(v1, a1);
}

unint64_t sub_10005E330()
{
  unint64_t result;

  result = qword_10028D5A8;
  if (!qword_10028D5A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EncryptedData, &type metadata for EncryptedData);
    atomic_store(result, (unint64_t *)&qword_10028D5A8);
  }
  return result;
}

uint64_t *sub_10005E374(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_10000F494(*a1, a1[1]);
  sub_10000F494(v2, v3);
  sub_10000F494(v4, v5);
  return a1;
}

uint64_t sub_10005E3D0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));

  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_10005E4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1000554BC);
}

uint64_t sub_10005E500()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v7(v0 + v4 + v1[5], v6);
  v8 = v0 + v4 + v1[6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (uint64_t *)(v0 + v4 + v1[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v0 + v4 + v1[8]), *(_QWORD *)(v0 + v4 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005E5FC(uint64_t a1)
{
  return sub_10005E620(a1, type metadata accessor for CustodianHealthRecord, (uint64_t)&qword_10028D5B8, (uint64_t)sub_100053FB4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t (*)(_QWORD), uint64_t))sub_10005BEE0);
}

uint64_t sub_10005E620(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t (*)(_QWORD), uint64_t))
{
  char *v5;
  uint64_t v11;

  v11 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a5(a1, *((_QWORD *)v5 + 2), *((_QWORD *)v5 + 3), *((_QWORD *)v5 + 4), &v5[(v11 + 40) & ~v11], a3, a2, a4);
}

uint64_t sub_10005E694()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_10005E7A0()
{
  return sub_10005FAD0(type metadata accessor for CustodianHealthRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004E8E4);
}

uint64_t sub_10005E7B4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_10005E930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10005601C);
}

uint64_t sub_10005E944()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005EA98(uint64_t a1)
{
  return sub_10005EAAC(a1, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10005BB18);
}

uint64_t sub_10005EAAC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4), &v3[(v5 + 40) & ~v5]);
}

uint64_t sub_10005EB00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10005EC6C()
{
  return sub_10005FAD0(type metadata accessor for CustodianRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004F744);
}

uint64_t sub_10005EC80()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));

  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_10005EDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100055A6C);
}

uint64_t sub_10005EDF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005EF2C(uint64_t a1)
{
  return sub_10005EAAC(a1, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10005B934);
}

uint64_t sub_10005EF40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005EF64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_10005F0B0()
{
  return sub_10005FAD0(type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004F014);
}

uint64_t sub_10005F0C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005F19C()
{
  return sub_10005FAD0(type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100050D84);
}

uint64_t sub_10005F1B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005F2A8()
{
  return sub_10005FAD0(type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100050610);
}

uint64_t sub_10005F2BC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_10005F408()
{
  return sub_10005FAD0(type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100053224);
}

uint64_t sub_10005F41C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BeneficiaryManifestRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5]));
  v9(v7 + v1[6], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005F4F0()
{
  return sub_10005FAD0(type metadata accessor for BeneficiaryManifestRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100052AB0);
}

uint64_t sub_10005F504()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005F5DC()
{
  return sub_10005FAD0(type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_10005233C);
}

uint64_t sub_10005F5F0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for IdentityRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[9]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  v11 = (uint64_t *)(v6 + v1[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (uint64_t *)(v6 + v1[11]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);
  v15 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[15]), *(_QWORD *)(v6 + v1[15] + 8));
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v3 | 7);
}

uint64_t sub_10005F770()
{
  return sub_10005FAD0(type metadata accessor for IdentityRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100051BE4);
}

uint64_t sub_10005F784()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for IdentityServiceRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10005F85C()
{
  return sub_10005FAD0(type metadata accessor for IdentityServiceRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000514B4);
}

uint64_t sub_10005F870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10005F8F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10004B914(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_10005F950()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoverySessionRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[9]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[10]), *(_QWORD *)(v6 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[11] + 8));
  v12 = v6 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_10005FABC()
{
  return sub_10005FAD0(type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100053998);
}

uint64_t sub_10005FAD0(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  return a2(*(_QWORD *)(v2 + 16), v2 + v4, *(_QWORD *)(v2 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v2 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10005FB40()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v8 + v1[5], v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v8 + v1[8]), *(_QWORD *)(v8 + v1[8] + 8));

  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10005FC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100057154);
}

uint64_t sub_10005FC44()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10005FD0C(uint64_t a1)
{
  return sub_10005E620(a1, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&qword_10028C450, (uint64_t)sub_100054B5C, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t (*)(_QWORD), uint64_t))sub_10005BEE0);
}

uint64_t sub_10005FD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  CKModifyRecordZonesOperation v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v28;
  Swift::OpaquePointer_optional v29;
  Swift::OpaquePointer_optional v30;

  v6 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v9, v10);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v11 = sub_1001FDA64(0xD000000000000011, (void *)0x800000010020A470);
  v12 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v11);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v13 = sub_1000080B4(&qword_10028D570);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v14 + 32) = v12;
  aBlock[0] = v14;
  specialized Array._endMutation()(v14);
  v15 = (void *)aBlock[0];
  v16 = v12;
  v29.value._rawValue = v15;
  v29.is_nil = 0;
  v17.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v29, v30).super.super.super.super.isa;
  sub_1001AE8D8();
  v18 = swift_allocObject(&unk_100262220, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  aBlock[4] = sub_100061720;
  v28 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = &unk_100262238;
  v19 = _Block_copy(aBlock);
  v20 = v28;
  swift_retain(a3);
  swift_release(v20);
  -[objc_class setModifyRecordZonesCompletionBlock:](v17.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v19);
  _Block_release(v19);
  if (v9[*(int *)(v6 + 44)] == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v21 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v21 = &qword_1002A8C90;
  }
  v23 = *v21;
  v22 = v21[1];
  swift_bridgeObjectRetain(v22);
  v24 = sub_1001FD4C0(v23, v22);
  v25 = objc_msgSend(v24, "privateCloudDatabase");
  swift_bridgeObjectRelease(v22);

  objc_msgSend(v25, "addOperation:", v17.super.super.super.super.isa);
  return sub_100028388((uint64_t)v9, type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_100060028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CKModifyRecordZonesOperation v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[5];
  uint64_t v40;
  Swift::OpaquePointer_optional v41;
  Swift::OpaquePointer_optional v42;

  v36 = a6;
  v37 = a7;
  v12 = a4(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v35 - v14;
  v16 = sub_100027FE8(a1, (uint64_t)&v35 - v14, a4);
  if (qword_10028AF00 != -1)
    v16 = swift_once(&qword_10028AF00, sub_1001FD458);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  v20 = sub_1001FDA64(v17, v18);
  swift_bridgeObjectRelease(v19);
  v21 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v20);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v22 = sub_1000080B4(&qword_10028D570);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v23 + 32) = v21;
  aBlock[0] = v23;
  specialized Array._endMutation()(v23);
  v24 = (void *)aBlock[0];
  v38 = v21;
  v41.value._rawValue = v24;
  v41.is_nil = 0;
  v25.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v41, v42).super.super.super.super.isa;
  sub_1001AE8D8();
  v26 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  aBlock[4] = v36;
  v40 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = v37;
  v27 = _Block_copy(aBlock);
  v28 = v40;
  swift_retain(a3);
  swift_release(v28);
  -[objc_class setModifyRecordZonesCompletionBlock:](v25.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v27);
  _Block_release(v27);
  if (v15[*(int *)(v12 + 36)] == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v29 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v29 = &qword_1002A8C70;
  }
  v31 = *v29;
  v30 = v29[1];
  swift_bridgeObjectRetain(v30);
  v32 = sub_1001FD4C0(v31, v30);
  v33 = objc_msgSend(v32, "privateCloudDatabase");
  swift_bridgeObjectRelease(v30);

  objc_msgSend(v33, "addOperation:", v25.super.super.super.super.isa);
  return sub_100028388((uint64_t)v15, a4);
}

uint64_t sub_100060320()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  v10(v8 + v1[7], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[8]), *(_QWORD *)(v8 + v1[8] + 8));

  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100060410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100057CC4);
}

uint64_t sub_100060424()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000604EC(uint64_t a1)
{
  return sub_10005E620(a1, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10028FA40, (uint64_t)sub_10005500C, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t (*)(_QWORD), uint64_t))sub_10005C2B8);
}

uint64_t sub_100060510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  objc_class *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  CKModifyRecordZonesOperation v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  _QWORD aBlock[5];
  uint64_t v32;
  Swift::OpaquePointer_optional v33;
  Swift::OpaquePointer_optional v34;

  v6 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100027FE8(a1, (uint64_t)v9, v10);
  if (qword_10028AF00 != -1)
    v11 = swift_once(&qword_10028AF00, sub_1001FD458);
  v12 = UUID.uuidString.getter(v11);
  v14 = v13;
  v15 = sub_1001FDA64(v12, v13);
  swift_bridgeObjectRelease(v14);
  v16 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v15);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v17 = sub_1000080B4(&qword_10028D570);
  v18 = swift_allocObject(v17, 40, 7);
  *(_OWORD *)(v18 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v18 + 32) = v16;
  aBlock[0] = v18;
  specialized Array._endMutation()(v18);
  v19 = (void *)aBlock[0];
  v20 = v16;
  v33.value._rawValue = v19;
  v33.is_nil = 0;
  v21.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v33, v34).super.super.super.super.isa;
  sub_1001AE8D8();
  v22 = swift_allocObject(&unk_100262158, 32, 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  aBlock[4] = sub_100061720;
  v32 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = &unk_100262170;
  v23 = _Block_copy(aBlock);
  v24 = v32;
  swift_retain(a3);
  swift_release(v24);
  -[objc_class setModifyRecordZonesCompletionBlock:](v21.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v23);
  _Block_release(v23);
  if (v9[*(int *)(v6 + 40)] == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v25 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v25 = &qword_1002A8C90;
  }
  v27 = *v25;
  v26 = v25[1];
  swift_bridgeObjectRetain(v26);
  v28 = sub_1001FD4C0(v27, v26);
  v29 = objc_msgSend(v28, "privateCloudDatabase");
  swift_bridgeObjectRelease(v26);

  objc_msgSend(v29, "addOperation:", v21.super.super.super.super.isa);
  return sub_100028388((uint64_t)v9, type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_100060808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  objc_class *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  CKModifyRecordZonesOperation v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  _QWORD aBlock[5];
  uint64_t v40;
  Swift::OpaquePointer_optional v41;
  Swift::OpaquePointer_optional v42;

  v36 = a6;
  v37 = a7;
  v12 = a4(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v35 - v14;
  v16 = sub_100027FE8(a1, (uint64_t)&v35 - v14, a4);
  if (qword_10028AF00 != -1)
    v16 = swift_once(&qword_10028AF00, sub_1001FD458);
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  v20 = sub_1001FDA64(v17, v18);
  swift_bridgeObjectRelease(v19);
  v21 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v20);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v22 = sub_1000080B4(&qword_10028D570);
  v23 = swift_allocObject(v22, 40, 7);
  *(_OWORD *)(v23 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v23 + 32) = v21;
  aBlock[0] = v23;
  specialized Array._endMutation()(v23);
  v24 = (void *)aBlock[0];
  v38 = v21;
  v41.value._rawValue = v24;
  v41.is_nil = 0;
  v25.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v41, v42).super.super.super.super.isa;
  sub_1001AE8D8();
  v26 = swift_allocObject(a5, 32, 7);
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  aBlock[4] = v36;
  v40 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = v37;
  v27 = _Block_copy(aBlock);
  v28 = v40;
  swift_retain(a3);
  swift_release(v28);
  -[objc_class setModifyRecordZonesCompletionBlock:](v25.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v27);
  _Block_release(v27);
  if (v15[*(int *)(v12 + 36)] == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v29 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v29 = &qword_1002A8C90;
  }
  v31 = *v29;
  v30 = v29[1];
  swift_bridgeObjectRetain(v30);
  v32 = sub_1001FD4C0(v31, v30);
  v33 = objc_msgSend(v32, "privateCloudDatabase");
  swift_bridgeObjectRelease(v30);

  objc_msgSend(v33, "addOperation:", v25.super.super.super.super.isa);
  return sub_100028388((uint64_t)v15, a4);
}

uint64_t sub_100060AFC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));

  swift_release(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, v12 + 16, v3 | 7);
}

uint64_t sub_100060C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100057704);
}

uint64_t sub_100060C6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100060DA8(uint64_t a1)
{
  return sub_10005EAAC(a1, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10005C0D4);
}

uint64_t sub_100060DBC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[7] + 8));
  v10(v8 + v1[9], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[10]), *(_QWORD *)(v8 + v1[10] + 8));

  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100060ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100056B94);
}

uint64_t sub_100060EE0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100060FC8(uint64_t a1)
{
  return sub_10005EAAC(a1, type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10005BCFC);
}

uint64_t sub_100060FDC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v1 = (int *)type metadata accessor for IdentityRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[9]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  v11 = (uint64_t *)(v6 + v1[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (uint64_t *)(v6 + v1[11]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);
  v15 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[15]), *(_QWORD *)(v6 + v1[15] + 8));

  swift_release(*(_QWORD *)(v0 + v16 + 8));
  return swift_deallocObject(v0, v16 + 16, v3 | 7);
}

uint64_t sub_10006116C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100061180(a1, a2, a3, type metadata accessor for IdentityRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100058284);
}

uint64_t sub_100061180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(a4(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a5(a1, a2, a3, *(_QWORD *)(v5 + 16), v5 + v10, *(_QWORD *)(v5 + v11), *(_QWORD *)(v5 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v5 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10006120C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for IdentityRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[9]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  v11 = (uint64_t *)(v6 + v1[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (uint64_t *)(v6 + v1[11]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[15]), *(_QWORD *)(v6 + v1[15] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10006137C(uint64_t a1)
{
  return sub_10005EAAC(a1, type metadata accessor for IdentityRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10005C4AC);
}

uint64_t sub_100061390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  objc_class *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  CKModifyRecordZonesOperation v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD aBlock[5];
  uint64_t v28;
  Swift::OpaquePointer_optional v29;
  Swift::OpaquePointer_optional v30;

  v6 = type metadata accessor for IdentityRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v9, v10);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v11 = sub_1001FDA64(0xD000000000000011, (void *)0x800000010020A470);
  v12 = objc_msgSend(objc_allocWithZone((Class)CKRecordZone), "initWithZoneID:", v11);
  sub_1000067D4(0, &qword_10028D590, CKModifyRecordZonesOperation_ptr);
  v13 = sub_1000080B4(&qword_10028D570);
  v14 = swift_allocObject(v13, 40, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v14 + 32) = v12;
  aBlock[0] = v14;
  specialized Array._endMutation()(v14);
  v15 = (void *)aBlock[0];
  v16 = v12;
  v29.value._rawValue = v15;
  v29.is_nil = 0;
  v17.super.super.super.super.isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v29, v30).super.super.super.super.isa;
  sub_1001AE8D8();
  v18 = swift_allocObject(&unk_1002622E8, 32, 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  aBlock[4] = sub_100061720;
  v28 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10005C690;
  aBlock[3] = &unk_100262300;
  v19 = _Block_copy(aBlock);
  v20 = v28;
  swift_retain(a3);
  swift_release(v20);
  -[objc_class setModifyRecordZonesCompletionBlock:](v17.super.super.super.super.isa, "setModifyRecordZonesCompletionBlock:", v19);
  _Block_release(v19);
  if (v9[*(int *)(v6 + 64)] == 1)
  {
    if (qword_10028AF30 != -1)
      swift_once(&qword_10028AF30, sub_1001FDE6C);
    v21 = &qword_1002A8CC0;
  }
  else
  {
    if (qword_10028AF28 != -1)
      swift_once(&qword_10028AF28, sub_1001FDE34);
    v21 = &qword_1002A8CB0;
  }
  v23 = *v21;
  v22 = v21[1];
  swift_bridgeObjectRetain(v22);
  v24 = sub_1001FD4C0(v23, v22);
  v25 = objc_msgSend(v24, "privateCloudDatabase");
  swift_bridgeObjectRelease(v22);

  objc_msgSend(v25, "addOperation:", v17.super.super.super.super.isa);
  return sub_100028388((uint64_t)v9, type metadata accessor for IdentityRecord);
}

BOOL sub_10006179C(char *a1, char *a2)
{
  return qword_10021A360[*a1] == qword_10021A360[*a2];
}

Swift::Int sub_1000617C0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021A360[v1]);
  return Hasher._finalize()();
}

void sub_10006180C()
{
  char *v0;

  Hasher._combine(_:)(qword_10021A360[*v0]);
}

Swift::Int sub_100061840()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021A360[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100061888@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100061AC8(*a1);
  *a2 = result;
  return result;
}

void sub_1000618B0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_10021A360[*v1];
}

uint64_t storeEnumTagSinglePayload for InheritanceMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100061914 + 4 * byte_10021A205[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100061948 + 4 * byte_10021A200[v4]))();
}

uint64_t sub_100061948(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061950(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100061958);
  return result;
}

uint64_t sub_100061964(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006196CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100061970(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100061978(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageType()
{
  return &type metadata for InheritanceMessageType;
}

unint64_t sub_100061998()
{
  unint64_t result;

  result = qword_10028D668;
  if (!qword_10028D668)
  {
    result = swift_getWitnessTable(&unk_10021A2E0, &type metadata for InheritanceMessageType);
    atomic_store(result, (unint64_t *)&qword_10028D668);
  }
  return result;
}

uint64_t sub_1000619DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061A84();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100061A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100061A84();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100061A84()
{
  unint64_t result;

  result = qword_10028D670;
  if (!qword_10028D670)
  {
    result = swift_getWitnessTable(&unk_10021A268, &type metadata for InheritanceMessageType);
    atomic_store(result, (unint64_t *)&qword_10028D670);
  }
  return result;
}

uint64_t sub_100061AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 101;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    default:
      result = 5;
      break;
  }
  return result;
}

uint64_t sub_100061B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v4 = v3;
  v74 = a2;
  v75 = a3;
  v6 = type metadata accessor for CloudShareInfo(0);
  v76 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6, v7);
  v77 = v9;
  v78 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v79 = (uint64_t)&v68 - v11;
  v12 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v73 = (uint64_t)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v68 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v68 - v22;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v24 = type metadata accessor for Logger(0);
  sub_100005288(v24, (uint64_t)qword_1002A89F0);
  sub_100027FE8(a1, (uint64_t)v23, type metadata accessor for InheritanceAccessKeyMessage);
  v72 = a1;
  v25 = sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v71 = v3;
    v29 = v28;
    v69 = swift_slowAlloc(64, -1);
    v81 = v69;
    *(_DWORD *)v29 = 136315394;
    v30 = type metadata accessor for URL(0);
    v70 = v13;
    v31 = v30;
    v32 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
    v35 = v34;
    v80 = sub_1001DEF4C(v33, v34, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
    swift_bridgeObjectRelease(v35);
    sub_100028388((uint64_t)v23, type metadata accessor for InheritanceAccessKeyMessage);
    *(_WORD *)(v29 + 12) = 2080;
    v36 = type metadata accessor for UUID(0);
    v37 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
    v40 = v39;
    v80 = sub_1001DEF4C(v38, v39, &v81);
    v13 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
    swift_bridgeObjectRelease(v40);
    sub_100028388((uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Attempting to accept share with URL %s from %s", (uint8_t *)v29, 0x16u);
    v41 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v42 = v29;
    v4 = v71;
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v23, type metadata accessor for InheritanceAccessKeyMessage);
    sub_100028388((uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
  }

  v43 = sub_10000732C((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  v44 = v72;
  sub_100027FE8(v72 + *(int *)(v12 + 24), v79, type metadata accessor for CloudShareInfo);
  v45 = swift_allocObject(&unk_100262590, 24, 7);
  swift_weakInit(v45 + 16, v4);
  v46 = v73;
  sub_100027FE8(v44, v73, type metadata accessor for InheritanceAccessKeyMessage);
  v47 = *(unsigned __int8 *)(v13 + 80);
  v48 = (v47 + 24) & ~v47;
  v49 = (v14 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  v50 = swift_allocObject(&unk_1002625B8, v49 + 16, v47 | 7);
  *(_QWORD *)(v50 + 16) = v45;
  sub_10003B730(v46, v50 + v48, type metadata accessor for InheritanceAccessKeyMessage);
  v51 = (_QWORD *)(v50 + v49);
  v52 = v75;
  *v51 = v74;
  v51[1] = v52;
  v53 = *v43;
  v54 = qword_10028AF20;
  swift_retain(v45);
  swift_retain(v52);
  if (v54 != -1)
    swift_once(&qword_10028AF20, sub_1001FDDFC);
  v55 = qword_1002A8CA0;
  v56 = *(_QWORD *)algn_1002A8CA8;
  v57 = qword_10028AF00;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1002A8CA8);
  if (v57 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v58 = sub_1001FD4C0(v55, v56);
  swift_bridgeObjectRelease(v56);
  v59 = v78;
  v60 = v79;
  sub_100027FE8(v79, v78, type metadata accessor for CloudShareInfo);
  v61 = *(unsigned __int8 *)(v76 + 80);
  v62 = (v61 + 32) & ~v61;
  v63 = (v77 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
  v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF8;
  v65 = swift_allocObject(&unk_1002625E0, v64 + 8, v61 | 7);
  *(_QWORD *)(v65 + 16) = sub_100066FB4;
  *(_QWORD *)(v65 + 24) = v50;
  sub_10003B730(v59, v65 + v62, type metadata accessor for CloudShareInfo);
  *(_QWORD *)(v65 + v63) = v53;
  *(_QWORD *)(v65 + v64) = v58;
  swift_retain(v50);
  swift_retain(v53);
  v66 = v58;
  sub_10014F070(v66, v60, (uint64_t)sub_1000670D8, v65);
  swift_release(v50);
  swift_release(v65);

  sub_100028388(v60, type metadata accessor for CloudShareInfo);
  return swift_release(v45);
}

uint64_t sub_1000620B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28[3];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v27 = a1;
      v28[0] = v11;
      *(_DWORD *)v10 = 136315138;
      swift_errorRetain(a1);
      v12 = sub_1000080B4(&qword_10028E850);
      v13 = String.init<A>(describing:)(&v27, v12);
      v15 = v14;
      v27 = sub_1001DEF4C(v13, v14, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to accept BeneficiaryInfoRecord share. Error - %s.", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    v17 = a2 + 16;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89F0);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Successfully accepted BeneficiaryInfoRecord share.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    swift_beginAccess(v17, v28, 0, 0);
    Strong = swift_weakLoadStrong(v17);
    if (Strong)
    {
      v24 = Strong;
      v25 = type metadata accessor for InheritanceAccessKeyMessage(0);
      sub_100067148(a3 + *(int *)(v25 + 20));
      swift_release(v24);
    }
  }
  return a4(a1);
}

uint64_t sub_1000623A8(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), uint64_t a5, const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a5;
  v11 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_1002953C0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (uint64_t *)((char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17, v20);
  v22 = (uint64_t *)((char *)&v47 - v21);
  sub_100066BA0(a1, (uint64_t)&v47 - v21);
  if (swift_getEnumCaseMultiPayload(v22, v15) == 1)
  {
    v23 = *v22;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89F0);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v23);
    swift_bridgeObjectRetain(a3);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = v15;
      v29 = a2;
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(64, -1);
      v52 = v31;
      *(_DWORD *)v30 = 136315394;
      v49 = a4;
      swift_bridgeObjectRetain(a3);
      v32 = v29;
      v15 = v28;
      v51 = sub_1001DEF4C(v32, a3, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v30 + 12) = 2080;
      v51 = v23;
      swift_errorRetain(v23);
      v33 = sub_1000080B4(&qword_10028E850);
      v34 = String.init<A>(describing:)(&v51, v33);
      v36 = v35;
      v51 = sub_1001DEF4C(v34, v35, &v52);
      a4 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v36);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to share record with %s. Error - %s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    *v19 = v23;
    swift_storeEnumTagMultiPayload(v19, v15, 1);
    swift_errorRetain(v23);
    a4(v19);
    swift_errorRelease(v23);
    return sub_100004934((uint64_t)v19, &qword_1002953C0);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v14, type metadata accessor for CloudShareInfo);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89F0);
    v38 = swift_bridgeObjectRetain_n(a3, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v48 = v15;
      v41 = swift_slowAlloc(12, -1);
      v47 = a6;
      v42 = (uint8_t *)v41;
      v43 = swift_slowAlloc(32, -1);
      v49 = a4;
      v44 = v43;
      v52 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_bridgeObjectRetain(a3);
      v15 = v48;
      v51 = sub_1001DEF4C(a2, a3, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, v47, v42, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      v45 = v44;
      a4 = v49;
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    sub_100027FE8((uint64_t)v14, (uint64_t)v19, type metadata accessor for CloudShareInfo);
    swift_storeEnumTagMultiPayload(v19, v15, 0);
    a4(v19);
    sub_100004934((uint64_t)v19, &qword_1002953C0);
    return sub_100028388((uint64_t)v14, type metadata accessor for CloudShareInfo);
  }
}

uint64_t type metadata accessor for InheritanceCloudSharingController()
{
  return objc_opt_self(_TtC13appleaccountd33InheritanceCloudSharingController);
}

void sub_1000628E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v36 - v11;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89F0);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, a2, v4);
    swift_errorRetain(a1);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v36 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v39 = v37;
      *(_DWORD *)v17 = 136315394;
      v18 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
      v21 = v20;
      v38 = sub_1001DEF4C(v19, v20, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v21);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      *(_WORD *)(v17 + 12) = 2112;
      v22 = _convertErrorToNSError(_:)(a1);
      v38 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      v23 = v36;
      *v36 = v22;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed performing initial health check for %s. Error: %@", (uint8_t *)v17, 0x16u);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      v25 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A89F0);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v12, a2, v4);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v39 = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
      v35 = v34;
      v38 = sub_1001DEF4C(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Completed initial health check for %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    }

  }
}

void sub_100062D6C(void *a1, char a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Class isa;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  CKModifyRecordsOperation v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  Class v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  void *v58;
  id v59;
  _QWORD aBlock[5];
  _QWORD *v61;
  Swift::OpaquePointer_optional v62;
  Swift::OpaquePointer_optional v63;

  v59 = a8;
  v13 = type metadata accessor for BeneficiaryInfoRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v17, v17);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (uint64_t *)((char *)&v54 - v20);
  if ((a2 & 1) != 0)
  {
    *v21 = a1;
    swift_storeEnumTagMultiPayload((char *)&v54 - v20, v18, 1);
    swift_errorRetain(a1);
    a3(v21);
    sub_100004934((uint64_t)v21, &qword_1002953C0);
  }
  else
  {
    v56 = (void (*)(_QWORD))a3;
    v57 = v13;
    v22 = qword_10028ADB8;
    v58 = a1;
    v23 = a1;
    if (v22 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89A8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetched CK Participant success", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    v33._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v33._object = v34;
    v35._countAndFlagsBits = v30;
    v35._object = v32;
    isa = CKRecordZoneID.init(zoneName:ownerName:)(v35, v33).super.isa;
    v37 = objc_allocWithZone((Class)CKShare);
    v55 = isa;
    v38 = objc_msgSend(v37, "initWithRecordZoneID:", isa);
    objc_msgSend(v23, "setPermission:", v59);
    objc_msgSend(v38, "addParticipant:", v23);
    sub_1000067D4(0, &qword_10028D718, CKModifyRecordsOperation_ptr);
    v39 = sub_1000080B4(&qword_10028D570);
    v40 = swift_allocObject(v39, 40, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v40 + 32) = v38;
    aBlock[0] = v40;
    specialized Array._endMutation()(v40);
    v41 = (void *)aBlock[0];
    v59 = v38;
    v62.value._rawValue = v41;
    v62.is_nil = 0;
    v42.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v62, v63).super.super.super.super.isa;
    sub_100027FE8(a5, (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
    v43 = *(unsigned __int8 *)(v14 + 80);
    v44 = (v43 + 40) & ~v43;
    v45 = (_QWORD *)swift_allocObject(&unk_1002624C8, v44 + v15, v43 | 7);
    v45[2] = v56;
    v45[3] = a4;
    v45[4] = v23;
    sub_10003B730((uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v45 + v44, type metadata accessor for BeneficiaryInfoRecord);
    aBlock[4] = sub_100066B74;
    v61 = v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100053F90;
    aBlock[3] = &unk_1002624E0;
    v46 = _Block_copy(aBlock);
    v47 = v61;
    v48 = v58;
    sub_100066B88(v58, 0);
    swift_retain(a4);
    swift_release(v47);
    -[objc_class setModifyRecordsCompletionBlock:](v42.super.super.super.super.isa, "setModifyRecordsCompletionBlock:", v46);
    _Block_release(v46);
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(v57 + 40)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v49 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v49 = &qword_1002A8C90;
    }
    v51 = *v49;
    v50 = v49[1];
    swift_bridgeObjectRetain(v50);
    v52 = sub_1001FD4C0(v51, v50);
    v53 = objc_msgSend(v52, "privateCloudDatabase");
    swift_bridgeObjectRelease(v50);

    objc_msgSend(v53, "addOperation:", v42.super.super.super.super.isa);
    sub_100066B94(v48, 0);
  }
}

void sub_100063240(void *a1, char a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Class isa;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  CKModifyRecordsOperation v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  Class v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  void *v58;
  id v59;
  _QWORD aBlock[5];
  _QWORD *v61;
  Swift::OpaquePointer_optional v62;
  Swift::OpaquePointer_optional v63;

  v59 = a8;
  v13 = type metadata accessor for InheritanceHealthRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v17, v17);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (uint64_t *)((char *)&v54 - v20);
  if ((a2 & 1) != 0)
  {
    *v21 = a1;
    swift_storeEnumTagMultiPayload((char *)&v54 - v20, v18, 1);
    swift_errorRetain(a1);
    a3(v21);
    sub_100004934((uint64_t)v21, &qword_1002953C0);
  }
  else
  {
    v56 = (void (*)(_QWORD))a3;
    v57 = v13;
    v22 = qword_10028ADB8;
    v58 = a1;
    v23 = a1;
    if (v22 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89A8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetched CK Participant success", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    v33._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v33._object = v34;
    v35._countAndFlagsBits = v30;
    v35._object = v32;
    isa = CKRecordZoneID.init(zoneName:ownerName:)(v35, v33).super.isa;
    v37 = objc_allocWithZone((Class)CKShare);
    v55 = isa;
    v38 = objc_msgSend(v37, "initWithRecordZoneID:", isa);
    objc_msgSend(v23, "setPermission:", v59);
    objc_msgSend(v38, "addParticipant:", v23);
    sub_1000067D4(0, &qword_10028D718, CKModifyRecordsOperation_ptr);
    v39 = sub_1000080B4(&qword_10028D570);
    v40 = swift_allocObject(v39, 40, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v40 + 32) = v38;
    aBlock[0] = v40;
    specialized Array._endMutation()(v40);
    v41 = (void *)aBlock[0];
    v59 = v38;
    v62.value._rawValue = v41;
    v62.is_nil = 0;
    v42.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v62, v63).super.super.super.super.isa;
    sub_100027FE8(a5, (uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
    v43 = *(unsigned __int8 *)(v14 + 80);
    v44 = (v43 + 40) & ~v43;
    v45 = (_QWORD *)swift_allocObject(&unk_100262680, v44 + v15, v43 | 7);
    v45[2] = v56;
    v45[3] = a4;
    v45[4] = v23;
    sub_10003B730((uint64_t)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v45 + v44, type metadata accessor for InheritanceHealthRecord);
    aBlock[4] = sub_100067C0C;
    v61 = v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100053F90;
    aBlock[3] = &unk_100262698;
    v46 = _Block_copy(aBlock);
    v47 = v61;
    v48 = v58;
    sub_100066B88(v58, 0);
    swift_retain(a4);
    swift_release(v47);
    -[objc_class setModifyRecordsCompletionBlock:](v42.super.super.super.super.isa, "setModifyRecordsCompletionBlock:", v46);
    _Block_release(v46);
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(v57 + 36)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v49 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v49 = &qword_1002A8C90;
    }
    v51 = *v49;
    v50 = v49[1];
    swift_bridgeObjectRetain(v50);
    v52 = sub_1001FD4C0(v51, v50);
    v53 = objc_msgSend(v52, "privateCloudDatabase");
    swift_bridgeObjectRelease(v50);

    objc_msgSend(v53, "addOperation:", v42.super.super.super.super.isa);
    sub_100066B94(v48, 0);
  }
}

void sub_100063714(void *a1, char a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  void *v34;
  Swift::String v35;
  Class isa;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  CKModifyRecordsOperation v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  Class v56;
  void (*v57)(_QWORD);
  uint64_t v58;
  void *v59;
  id v60;
  _QWORD aBlock[5];
  _QWORD *v62;
  Swift::OpaquePointer_optional v63;
  Swift::OpaquePointer_optional v64;

  v60 = a8;
  v13 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v17, v17);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (uint64_t *)((char *)&v55 - v20);
  if ((a2 & 1) != 0)
  {
    *v21 = a1;
    swift_storeEnumTagMultiPayload((char *)&v55 - v20, v18, 1);
    swift_errorRetain(a1);
    a3(v21);
    sub_100004934((uint64_t)v21, &qword_1002953C0);
  }
  else
  {
    v57 = (void (*)(_QWORD))a3;
    v58 = a4;
    v22 = qword_10028ADB8;
    v59 = a1;
    v23 = a1;
    if (v22 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89A8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetched CK Participant success", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    v30 = UUID.uuidString.getter(v29);
    v32 = v31;
    v33._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
    v33._object = v34;
    v35._countAndFlagsBits = v30;
    v35._object = v32;
    isa = CKRecordZoneID.init(zoneName:ownerName:)(v35, v33).super.isa;
    v37 = objc_allocWithZone((Class)CKShare);
    v56 = isa;
    v38 = objc_msgSend(v37, "initWithRecordZoneID:", isa);
    objc_msgSend(v23, "setPermission:", v60);
    objc_msgSend(v38, "addParticipant:", v23);
    sub_1000067D4(0, &qword_10028D718, CKModifyRecordsOperation_ptr);
    v39 = sub_1000080B4(&qword_10028D570);
    v40 = swift_allocObject(v39, 40, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v40 + 32) = v38;
    aBlock[0] = v40;
    specialized Array._endMutation()(v40);
    v41 = (void *)aBlock[0];
    v60 = v38;
    v63.value._rawValue = v41;
    v63.is_nil = 0;
    v42.super.super.super.super.isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v63, v64).super.super.super.super.isa;
    sub_100027FE8(a5, (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoveryInfoRecord);
    v43 = *(unsigned __int8 *)(v14 + 80);
    v44 = (v43 + 40) & ~v43;
    v45 = (_QWORD *)swift_allocObject(&unk_100262540, v44 + v15, v43 | 7);
    v46 = v58;
    v45[2] = v57;
    v45[3] = v46;
    v45[4] = v23;
    sub_10003B730((uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v45 + v44, type metadata accessor for CustodianRecoveryInfoRecord);
    aBlock[4] = sub_100066E84;
    v62 = v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100053F90;
    aBlock[3] = &unk_100262558;
    v47 = _Block_copy(aBlock);
    v48 = v62;
    v49 = v59;
    sub_100066B88(v59, 0);
    swift_retain(v46);
    swift_release(v48);
    -[objc_class setModifyRecordsCompletionBlock:](v42.super.super.super.super.isa, "setModifyRecordsCompletionBlock:", v47);
    _Block_release(v47);
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(a5 + *(int *)(v13 + 40)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v50 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v50 = &qword_1002A8C70;
    }
    v52 = *v50;
    v51 = v50[1];
    swift_bridgeObjectRetain(v51);
    v53 = sub_1001FD4C0(v52, v51);
    v54 = objc_msgSend(v53, "privateCloudDatabase");
    swift_bridgeObjectRelease(v51);

    objc_msgSend(v54, "addOperation:", v42.super.super.super.super.isa);
    sub_100066B94(v49, 0);
  }
}

uint64_t sub_100063BE8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  void (*v38)(uint64_t);
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char *v54;
  void *v55;
  id v56;
  void *v57;
  void (*v58)(char *, id, uint64_t);
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  char *v67;
  id v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  BOOL v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  id v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t);
  _QWORD v142[3];
  char v143[16];
  uint64_t v144;
  uint64_t v145;

  v140 = a5;
  v141 = a4;
  v11 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v131 - v23;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v131 - v26;
  v139 = sub_1000080B4(&qword_1002953C0);
  v29 = __chkstk_darwin(v139, v28);
  __chkstk_darwin(v29, v30);
  v138 = (void (*)(char *, char *, uint64_t))((char *)&v131 - v32);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v34 = swift_errorRetain(a3);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v38 = v141;
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v145 = v40;
      *(_DWORD *)v39 = 136315138;
      swift_getErrorValue(a3, v143, v142);
      v41 = Error.localizedDescription.getter(v142[1], v142[2]);
      v43 = v42;
      v144 = sub_1001DEF4C(v41, v42, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error saving shared cloudKit Record: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    v87 = v139;
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = a3;
    swift_storeEnumTagMultiPayload(v88, v87, 1);
    swift_errorRetain(a3);
    v38(v88);
    swift_errorRelease(a3);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v136 = v20;
  v137 = v24;
  v134 = v27;
  v135 = v15;
  v44 = v141;
  if (!a1)
  {
LABEL_47:
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v120 = type metadata accessor for Logger(0);
    v121 = sub_100005288(v120, (uint64_t)qword_1002A89A8);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    v124 = os_log_type_enabled(v122, v123);
    v125 = v139;
    if (v124)
    {
      v126 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v126 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Saved share record not found.", v126, 2u);
      swift_slowDealloc(v126, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v128 = v127;
    v144 = -7005;
    v129 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v130 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v129, v128, v130);
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v88, v125, 1);
    v44(v88);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v133 = v31;
  if (!((unint64_t)a1 >> 62))
  {
    v45 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v46 = a6;
    if (v45)
      goto LABEL_9;
LABEL_46:
    swift_bridgeObjectRelease(a1);
    v44 = v141;
    goto LABEL_47;
  }
  if (a1 >= 0)
    v119 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v119 = a1;
  swift_bridgeObjectRetain(a1);
  v46 = a6;
  if (!_CocoaArrayWrapper.endIndex.getter(v119))
    goto LABEL_46;
LABEL_9:
  v47 = (uint64_t)v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v44 = v141;
    v50 = v16;
    v48 = v137;
  }
  else
  {
    v48 = v137;
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_55;
    }
    v49 = *(id *)(a1 + 32);
    v44 = v141;
    v50 = v16;
  }
  swift_bridgeObjectRelease(a1);
  v51 = objc_opt_self(CKShare);
  v52 = (void *)swift_dynamicCastObjCClass(v49, v51);
  v53 = v49;
  v54 = v136;
  if (!v52)
  {

    goto LABEL_47;
  }
  v55 = v52;
  v137 = v53;
  v56 = objc_msgSend(v52, "URL");
  if (!v56)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v14, 1, 1, v135);
LABEL_24:
    sub_100004934(v47, (uint64_t *)&unk_10028DC30);
    if (qword_10028ADB8 == -1)
    {
LABEL_25:
      v89 = type metadata accessor for Logger(0);
      v90 = sub_100005288(v89, (uint64_t)qword_1002A89A8);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.error.getter(v91);
      v93 = os_log_type_enabled(v91, v92);
      v94 = v139;
      if (v93)
      {
        v95 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Saved share missing URL.", v95, 2u);
        swift_slowDealloc(v95, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v97 = v96;
      v144 = -7005;
      v98 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v99 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v98, v97, v99);
      v88 = (uint64_t)v138;
      *(_QWORD *)v138 = v145;
      swift_storeEnumTagMultiPayload(v88, v94, 1);
      v44(v88);

      return sub_100004934(v88, &qword_1002953C0);
    }
LABEL_55:
    swift_once(&qword_10028ADB8, sub_100046CE4);
    goto LABEL_25;
  }
  v57 = v56;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

  v58 = *(void (**)(char *, id, uint64_t))(v50 + 32);
  v59 = v14;
  v60 = v135;
  v58(v59, v48, v135);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v47, 1, v60) == 1)
    goto LABEL_24;
  v58(v134, (id)v47, v60);
  v61 = objc_msgSend(v55, "participants");
  v62 = sub_1000067D4(0, &qword_10028D720, CKShareParticipant_ptr);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v62);

  v64 = v46;
  v65 = sub_100066108(v63);
  swift_bridgeObjectRelease(v63);

  if (v65)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v66 = type metadata accessor for Logger(0);
    sub_100005288(v66, (uint64_t)qword_1002A89A8);
    v67 = v134;
    v138 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v138(v54, v134, v60);
    v68 = v65;
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.default.getter(v70);
    v132 = v71;
    v72 = &off_100287000;
    v73 = v60;
    if (os_log_type_enabled(v69, v71))
    {
      v74 = swift_slowAlloc(22, -1);
      v131 = swift_slowAlloc(64, -1);
      v145 = v131;
      *(_DWORD *)v74 = 136315394;
      v75 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v60, v75);
      v78 = v77;
      v144 = sub_1001DEF4C(v76, v77, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v78);
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);
      *(_WORD *)(v74 + 12) = 2080;
      v144 = (uint64_t)objc_msgSend(v68, "invitationToken");
      v80 = sub_1000080B4(&qword_10028D728);
      v81 = String.init<A>(describing:)(&v144, v80);
      v83 = v82;
      v144 = sub_1001DEF4C(v81, v82, &v145);
      v44 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);

      v84 = v83;
      v72 = &off_100287000;
      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v132, "Successfully created share with url: %s and token: %s", (uint8_t *)v74, 0x16u);
      v85 = v131;
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      v86 = v74;
      v67 = v134;
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);

    }
    v138((char *)v133, v67, v73);
    if (*(_BYTE *)(a7 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 40)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v112 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v112 = &qword_1002A8C90;
    }
    v114 = *v112;
    v113 = v112[1];
    v115 = objc_msgSend(v68, v72[369], swift_bridgeObjectRetain(v113).n128_f64[0]);
    v116 = type metadata accessor for CloudShareInfo(0);
    v117 = v133;
    v118 = (uint64_t *)(v133 + *(int *)(v116 + 20));
    *v118 = v114;
    v118[1] = v113;
    *(_QWORD *)(v117 + *(int *)(v116 + 24)) = v115;
    swift_storeEnumTagMultiPayload(v117, v139, 0);
    v44(v117);

    sub_100004934(v117, &qword_1002953C0);
    return ((uint64_t (*)(char *, uint64_t))v79)(v67, v135);
  }
  else
  {
    v100 = v139;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v101 = type metadata accessor for Logger(0);
    v102 = sub_100005288(v101, (uint64_t)qword_1002A89A8);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Saved share missing matching participant.", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v107 = v106;
    v144 = -7005;
    v108 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v109 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v108, v107, v109);
    v110 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v110, v100, 1);
    v44(v110);

    sub_100004934(v110, &qword_1002953C0);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v134, v60);
  }
}

uint64_t sub_100064848(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  void (*v38)(uint64_t);
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char *v54;
  void *v55;
  id v56;
  void *v57;
  void (*v58)(char *, id, uint64_t);
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  char *v67;
  id v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  BOOL v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  id v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t);
  _QWORD v142[3];
  char v143[16];
  uint64_t v144;
  uint64_t v145;

  v140 = a5;
  v141 = a4;
  v11 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v131 - v23;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v131 - v26;
  v139 = sub_1000080B4(&qword_1002953C0);
  v29 = __chkstk_darwin(v139, v28);
  __chkstk_darwin(v29, v30);
  v138 = (void (*)(char *, char *, uint64_t))((char *)&v131 - v32);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v34 = swift_errorRetain(a3);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v38 = v141;
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v145 = v40;
      *(_DWORD *)v39 = 136315138;
      swift_getErrorValue(a3, v143, v142);
      v41 = Error.localizedDescription.getter(v142[1], v142[2]);
      v43 = v42;
      v144 = sub_1001DEF4C(v41, v42, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error saving shared cloudKit Record: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    v87 = v139;
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = a3;
    swift_storeEnumTagMultiPayload(v88, v87, 1);
    swift_errorRetain(a3);
    v38(v88);
    swift_errorRelease(a3);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v136 = v20;
  v137 = v24;
  v134 = v27;
  v135 = v15;
  v44 = v141;
  if (!a1)
  {
LABEL_47:
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v120 = type metadata accessor for Logger(0);
    v121 = sub_100005288(v120, (uint64_t)qword_1002A89A8);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    v124 = os_log_type_enabled(v122, v123);
    v125 = v139;
    if (v124)
    {
      v126 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v126 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Saved share record not found.", v126, 2u);
      swift_slowDealloc(v126, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v128 = v127;
    v144 = -7005;
    v129 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v130 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v129, v128, v130);
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v88, v125, 1);
    v44(v88);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v133 = v31;
  if (!((unint64_t)a1 >> 62))
  {
    v45 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v46 = a6;
    if (v45)
      goto LABEL_9;
LABEL_46:
    swift_bridgeObjectRelease(a1);
    v44 = v141;
    goto LABEL_47;
  }
  if (a1 >= 0)
    v119 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v119 = a1;
  swift_bridgeObjectRetain(a1);
  v46 = a6;
  if (!_CocoaArrayWrapper.endIndex.getter(v119))
    goto LABEL_46;
LABEL_9:
  v47 = (uint64_t)v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v44 = v141;
    v50 = v16;
    v48 = v137;
  }
  else
  {
    v48 = v137;
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_55;
    }
    v49 = *(id *)(a1 + 32);
    v44 = v141;
    v50 = v16;
  }
  swift_bridgeObjectRelease(a1);
  v51 = objc_opt_self(CKShare);
  v52 = (void *)swift_dynamicCastObjCClass(v49, v51);
  v53 = v49;
  v54 = v136;
  if (!v52)
  {

    goto LABEL_47;
  }
  v55 = v52;
  v137 = v53;
  v56 = objc_msgSend(v52, "URL");
  if (!v56)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v14, 1, 1, v135);
LABEL_24:
    sub_100004934(v47, (uint64_t *)&unk_10028DC30);
    if (qword_10028ADB8 == -1)
    {
LABEL_25:
      v89 = type metadata accessor for Logger(0);
      v90 = sub_100005288(v89, (uint64_t)qword_1002A89A8);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.error.getter(v91);
      v93 = os_log_type_enabled(v91, v92);
      v94 = v139;
      if (v93)
      {
        v95 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Saved share missing URL.", v95, 2u);
        swift_slowDealloc(v95, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v97 = v96;
      v144 = -7005;
      v98 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v99 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v98, v97, v99);
      v88 = (uint64_t)v138;
      *(_QWORD *)v138 = v145;
      swift_storeEnumTagMultiPayload(v88, v94, 1);
      v44(v88);

      return sub_100004934(v88, &qword_1002953C0);
    }
LABEL_55:
    swift_once(&qword_10028ADB8, sub_100046CE4);
    goto LABEL_25;
  }
  v57 = v56;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

  v58 = *(void (**)(char *, id, uint64_t))(v50 + 32);
  v59 = v14;
  v60 = v135;
  v58(v59, v48, v135);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v47, 1, v60) == 1)
    goto LABEL_24;
  v58(v134, (id)v47, v60);
  v61 = objc_msgSend(v55, "participants");
  v62 = sub_1000067D4(0, &qword_10028D720, CKShareParticipant_ptr);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v62);

  v64 = v46;
  v65 = sub_100066108(v63);
  swift_bridgeObjectRelease(v63);

  if (v65)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v66 = type metadata accessor for Logger(0);
    sub_100005288(v66, (uint64_t)qword_1002A89A8);
    v67 = v134;
    v138 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v138(v54, v134, v60);
    v68 = v65;
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.default.getter(v70);
    v132 = v71;
    v72 = &off_100287000;
    v73 = v60;
    if (os_log_type_enabled(v69, v71))
    {
      v74 = swift_slowAlloc(22, -1);
      v131 = swift_slowAlloc(64, -1);
      v145 = v131;
      *(_DWORD *)v74 = 136315394;
      v75 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v60, v75);
      v78 = v77;
      v144 = sub_1001DEF4C(v76, v77, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v78);
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);
      *(_WORD *)(v74 + 12) = 2080;
      v144 = (uint64_t)objc_msgSend(v68, "invitationToken");
      v80 = sub_1000080B4(&qword_10028D728);
      v81 = String.init<A>(describing:)(&v144, v80);
      v83 = v82;
      v144 = sub_1001DEF4C(v81, v82, &v145);
      v44 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);

      v84 = v83;
      v72 = &off_100287000;
      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v132, "Successfully created share with url: %s and token: %s", (uint8_t *)v74, 0x16u);
      v85 = v131;
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      v86 = v74;
      v67 = v134;
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);

    }
    v138((char *)v133, v67, v73);
    if (*(_BYTE *)(a7 + *(int *)(type metadata accessor for InheritanceHealthRecord(0) + 36)) == 1)
    {
      if (qword_10028AF20 != -1)
        swift_once(&qword_10028AF20, sub_1001FDDFC);
      v112 = &qword_1002A8CA0;
    }
    else
    {
      if (qword_10028AF18 != -1)
        swift_once(&qword_10028AF18, sub_1001FDDC4);
      v112 = &qword_1002A8C90;
    }
    v114 = *v112;
    v113 = v112[1];
    v115 = objc_msgSend(v68, v72[369], swift_bridgeObjectRetain(v113).n128_f64[0]);
    v116 = type metadata accessor for CloudShareInfo(0);
    v117 = v133;
    v118 = (uint64_t *)(v133 + *(int *)(v116 + 20));
    *v118 = v114;
    v118[1] = v113;
    *(_QWORD *)(v117 + *(int *)(v116 + 24)) = v115;
    swift_storeEnumTagMultiPayload(v117, v139, 0);
    v44(v117);

    sub_100004934(v117, &qword_1002953C0);
    return ((uint64_t (*)(char *, uint64_t))v79)(v67, v135);
  }
  else
  {
    v100 = v139;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v101 = type metadata accessor for Logger(0);
    v102 = sub_100005288(v101, (uint64_t)qword_1002A89A8);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Saved share missing matching participant.", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v107 = v106;
    v144 = -7005;
    v108 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v109 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v108, v107, v109);
    v110 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v110, v100, 1);
    v44(v110);

    sub_100004934(v110, &qword_1002953C0);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v134, v60);
  }
}

uint64_t sub_1000654A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  void (*v38)(uint64_t);
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  char *v54;
  void *v55;
  id v56;
  void *v57;
  void (*v58)(char *, id, uint64_t);
  char *v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  uint64_t v66;
  char *v67;
  id v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  char **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  id v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t);
  _QWORD v142[3];
  char v143[16];
  uint64_t v144;
  uint64_t v145;

  v140 = a5;
  v141 = a4;
  v11 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v131 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v131 - v23;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v131 - v26;
  v139 = sub_1000080B4(&qword_1002953C0);
  v29 = __chkstk_darwin(v139, v28);
  __chkstk_darwin(v29, v30);
  v138 = (void (*)(char *, char *, uint64_t))((char *)&v131 - v32);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v34 = swift_errorRetain(a3);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v38 = v141;
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v145 = v40;
      *(_DWORD *)v39 = 136315138;
      swift_getErrorValue(a3, v143, v142);
      v41 = Error.localizedDescription.getter(v142[1], v142[2]);
      v43 = v42;
      v144 = sub_1001DEF4C(v41, v42, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error saving shared cloudKit Record: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    v87 = v139;
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = a3;
    swift_storeEnumTagMultiPayload(v88, v87, 1);
    swift_errorRetain(a3);
    v38(v88);
    swift_errorRelease(a3);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v136 = v20;
  v137 = v24;
  v134 = v27;
  v135 = v15;
  v44 = v141;
  if (!a1)
  {
LABEL_47:
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v120 = type metadata accessor for Logger(0);
    v121 = sub_100005288(v120, (uint64_t)qword_1002A89A8);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    v124 = os_log_type_enabled(v122, v123);
    v125 = v139;
    if (v124)
    {
      v126 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v126 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Saved share record not found.", v126, 2u);
      swift_slowDealloc(v126, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v128 = v127;
    v144 = -7005;
    v129 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v130 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v129, v128, v130);
    v88 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v88, v125, 1);
    v44(v88);
    return sub_100004934(v88, &qword_1002953C0);
  }
  v133 = v31;
  if (!((unint64_t)a1 >> 62))
  {
    v45 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    v46 = a6;
    if (v45)
      goto LABEL_9;
LABEL_46:
    swift_bridgeObjectRelease(a1);
    v44 = v141;
    goto LABEL_47;
  }
  if (a1 >= 0)
    v119 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v119 = a1;
  swift_bridgeObjectRetain(a1);
  v46 = a6;
  if (!_CocoaArrayWrapper.endIndex.getter(v119))
    goto LABEL_46;
LABEL_9:
  v47 = (uint64_t)v14;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    v44 = v141;
    v50 = v16;
    v48 = v137;
  }
  else
  {
    v48 = v137;
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_55;
    }
    v49 = *(id *)(a1 + 32);
    v44 = v141;
    v50 = v16;
  }
  swift_bridgeObjectRelease(a1);
  v51 = objc_opt_self(CKShare);
  v52 = (void *)swift_dynamicCastObjCClass(v49, v51);
  v53 = v49;
  v54 = v136;
  if (!v52)
  {

    goto LABEL_47;
  }
  v55 = v52;
  v137 = v53;
  v56 = objc_msgSend(v52, "URL");
  if (!v56)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v14, 1, 1, v135);
LABEL_24:
    sub_100004934(v47, (uint64_t *)&unk_10028DC30);
    if (qword_10028ADB8 == -1)
    {
LABEL_25:
      v89 = type metadata accessor for Logger(0);
      v90 = sub_100005288(v89, (uint64_t)qword_1002A89A8);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.error.getter(v91);
      v93 = os_log_type_enabled(v91, v92);
      v94 = v139;
      if (v93)
      {
        v95 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v95 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Saved share missing URL.", v95, 2u);
        swift_slowDealloc(v95, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v97 = v96;
      v144 = -7005;
      v98 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v99 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v98, v97, v99);
      v88 = (uint64_t)v138;
      *(_QWORD *)v138 = v145;
      swift_storeEnumTagMultiPayload(v88, v94, 1);
      v44(v88);

      return sub_100004934(v88, &qword_1002953C0);
    }
LABEL_55:
    swift_once(&qword_10028ADB8, sub_100046CE4);
    goto LABEL_25;
  }
  v57 = v56;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v56);

  v58 = *(void (**)(char *, id, uint64_t))(v50 + 32);
  v59 = v14;
  v60 = v135;
  v58(v59, v48, v135);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v47, 1, v60) == 1)
    goto LABEL_24;
  v58(v134, (id)v47, v60);
  v61 = objc_msgSend(v55, "participants");
  v62 = sub_1000067D4(0, &qword_10028D720, CKShareParticipant_ptr);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v61, v62);

  v64 = v46;
  v65 = sub_100066108(v63);
  swift_bridgeObjectRelease(v63);

  if (v65)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v66 = type metadata accessor for Logger(0);
    sub_100005288(v66, (uint64_t)qword_1002A89A8);
    v67 = v134;
    v138 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
    v138(v54, v134, v60);
    v68 = v65;
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.default.getter(v70);
    v132 = v71;
    v72 = &off_100287000;
    v73 = v60;
    if (os_log_type_enabled(v69, v71))
    {
      v74 = swift_slowAlloc(22, -1);
      v131 = swift_slowAlloc(64, -1);
      v145 = v131;
      *(_DWORD *)v74 = 136315394;
      v75 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v60, v75);
      v78 = v77;
      v144 = sub_1001DEF4C(v76, v77, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);
      swift_bridgeObjectRelease(v78);
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);
      *(_WORD *)(v74 + 12) = 2080;
      v144 = (uint64_t)objc_msgSend(v68, "invitationToken");
      v80 = sub_1000080B4(&qword_10028D728);
      v81 = String.init<A>(describing:)(&v144, v80);
      v83 = v82;
      v144 = sub_1001DEF4C(v81, v82, &v145);
      v44 = v141;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145);

      v84 = v83;
      v72 = &off_100287000;
      swift_bridgeObjectRelease(v84);
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v132, "Successfully created share with url: %s and token: %s", (uint8_t *)v74, 0x16u);
      v85 = v131;
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      v86 = v74;
      v67 = v134;
      swift_slowDealloc(v86, -1, -1);

    }
    else
    {
      v79 = *(void (**)(char *, uint64_t))(v50 + 8);
      v79(v54, v73);

    }
    v138((char *)v133, v67, v73);
    if (*(_BYTE *)(a7 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 40)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v112 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v112 = &qword_1002A8C70;
    }
    v114 = *v112;
    v113 = v112[1];
    v115 = objc_msgSend(v68, v72[369], swift_bridgeObjectRetain(v113).n128_f64[0]);
    v116 = type metadata accessor for CloudShareInfo(0);
    v117 = v133;
    v118 = (uint64_t *)(v133 + *(int *)(v116 + 20));
    *v118 = v114;
    v118[1] = v113;
    *(_QWORD *)(v117 + *(int *)(v116 + 24)) = v115;
    swift_storeEnumTagMultiPayload(v117, v139, 0);
    v44(v117);

    sub_100004934(v117, &qword_1002953C0);
    return ((uint64_t (*)(char *, uint64_t))v79)(v67, v135);
  }
  else
  {
    v100 = v139;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v101 = type metadata accessor for Logger(0);
    v102 = sub_100005288(v101, (uint64_t)qword_1002A89A8);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Saved share missing matching participant.", v105, 2u);
      swift_slowDealloc(v105, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v107 = v106;
    v144 = -7005;
    v108 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v109 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v145, &v144, v108, v107, v109);
    v110 = (uint64_t)v138;
    *(_QWORD *)v138 = v145;
    swift_storeEnumTagMultiPayload(v110, v100, 1);
    v44(v110);

    sub_100004934(v110, &qword_1002953C0);
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v134, v60);
  }
}

void *sub_100066108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter(v14))
  {
    v3 = 4;
    while (1)
    {
      v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1)
         : *(id *)(a1 + 8 * v3);
      v5 = v4;
      v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v7 = CKShareParticipant.participantID.getter();
      v9 = v8;
      v11 = CKShareParticipant.participantID.getter();
      v12 = v10;
      if (v7 == v11 && v9 == v10)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v9);
LABEL_15:
        swift_bridgeObjectRelease(v9);
        return v5;
      }
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v11, v10, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v12);
      if ((v13 & 1) != 0)
      {
        v9 = a1;
        goto LABEL_15;
      }

      ++v3;
      if (v6 == v2)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_100066288(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;
  void **v25;

  v24 = a5;
  v25 = a4;
  v10 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v10 + 40)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v15 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v15 = &qword_1002A8C70;
  }
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  v18 = sub_1001FD4C0(v16, v17);
  swift_bridgeObjectRelease(v17);
  sub_100027FE8(a1, (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoveryInfoRecord);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_100262518, v21 + 24, v19 | 7);
  *(_QWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 24) = a6;
  sub_10003B730((uint64_t)v14, v22 + v20, type metadata accessor for CustodianRecoveryInfoRecord);
  v23 = (void ***)(v22 + v21);
  *v23 = a2;
  v23[1] = (void **)a3;
  v23[2] = v25;
  swift_retain(a6);
  swift_bridgeObjectRetain(a3);
  sub_10014F6BC(a2, a3, v18, (uint64_t)sub_100066D34, v22);
  swift_release(v22);

}

void sub_100066484(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;
  void **v25;

  v24 = a5;
  v25 = a4;
  v10 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v10 + 40)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v15 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v15 = &qword_1002A8C90;
  }
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  v18 = sub_1001FD4C0(v16, v17);
  swift_bridgeObjectRelease(v17);
  sub_100027FE8(a1, (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_1002624A0, v21 + 24, v19 | 7);
  *(_QWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 24) = a6;
  sub_10003B730((uint64_t)v14, v22 + v20, type metadata accessor for BeneficiaryInfoRecord);
  v23 = (void ***)(v22 + v21);
  *v23 = a2;
  v23[1] = (void **)a3;
  v23[2] = v25;
  swift_retain(a6);
  swift_bridgeObjectRetain(a3);
  sub_10014F6BC(a2, a3, v18, (uint64_t)sub_100066A24, v22);
  swift_release(v22);

}

uint64_t sub_100066680(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v10 = qword_10028ADD0;
  swift_bridgeObjectRetain(a3);
  if (v10 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89F0);
  v12 = swift_bridgeObjectRetain_n(a3, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v20 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a3);
    v19 = sub_1001DEF4C((uint64_t)a2, a3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sharing record with beneficiary - %s...", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v17 = (_QWORD *)swift_allocObject(&unk_100262478, 48, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  sub_100066484(a1, a2, a3, (void **)2, (uint64_t)sub_1000668B4, (uint64_t)v17);
  swift_bridgeObjectRelease(a3);
  return swift_release(v17);
}

uint64_t sub_1000668B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000623A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), "Successfully shared the record with %s");
}

uint64_t sub_1000668D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 24, v3 | 7);
}

uint64_t sub_100066A24(uint64_t a1, char a2)
{
  return sub_100067AA4(a1, a2, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100062D6C);
}

uint64_t sub_100066A38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100066B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100067C20(a1, a2, a3, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100063BE8);
}

id sub_100066B88(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

void sub_100066B94(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_100066BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_1002953C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066BE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 24, v3 | 7);
}

uint64_t sub_100066D34(uint64_t a1, char a2)
{
  return sub_100067AA4(a1, a2, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100063714);
}

uint64_t sub_100066D48()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100066E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100067C20(a1, a2, a3, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_1000654A8);
}

uint64_t sub_100066E98()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100066EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 24);
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = type metadata accessor for CloudShareInfo(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v12 + 20) + 8));

  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100066FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceAccessKeyMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000620B8(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10006700C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for CloudShareInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v8 = v0 + v4;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v1 + 20) + 8));

  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1000670D8(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for CloudShareInfo(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10014D200(a1, v4, *(void (**)(void *))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100067148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v6 = __chkstk_darwin(v2, v5);
  v7 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v31 - v9;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89F0);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12 = v34(v10, a1, v2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v32 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
    v17 = v16;
    v36 = v16;
    v33 = a1;
    *(_DWORD *)v15 = 136315138;
    v31 = v15 + 4;
    v18 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v2, v18);
    v21 = v20;
    v35 = sub_1001DEF4C(v19, v20, &v36);
    a1 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting initial health check for %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v22 = v17;
    v7 = v32;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
  }

  v23 = type metadata accessor for BenefactorHealthCheck(0);
  v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v25 = sub_1000080B4(&qword_100294B10);
  Dependency.init(dependencyId:config:)(0, 0, 0, v25);
  v26 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v26);
  v34(v7, a1, v2);
  v27 = *(unsigned __int8 *)(v3 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = swift_allocObject(&unk_100262608, v28 + v4, v27 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v29 + v28, v7, v2);
  sub_10004B50C(a1, (uint64_t)sub_1000674D0, v29);
  swift_release(v29);
  return swift_release(v24);
}

uint64_t sub_100067470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000674D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_1000628E0(a1, v1 + ((v3 + 16) & ~v3));
}

void sub_10006750C(uint64_t a1, void **a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void ***v23;
  uint64_t v24;
  void **v25;

  v24 = a5;
  v25 = a4;
  v10 = type metadata accessor for InheritanceHealthRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v10 + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v15 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v15 = &qword_1002A8C90;
  }
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  v18 = sub_1001FD4C0(v16, v17);
  swift_bridgeObjectRelease(v17);
  sub_100027FE8(a1, (uint64_t)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
  v19 = *(unsigned __int8 *)(v11 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (v12 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_100262658, v21 + 24, v19 | 7);
  *(_QWORD *)(v22 + 16) = v24;
  *(_QWORD *)(v22 + 24) = a6;
  sub_10003B730((uint64_t)v14, v22 + v20, type metadata accessor for InheritanceHealthRecord);
  v23 = (void ***)(v22 + v21);
  *v23 = a2;
  v23[1] = (void **)a3;
  v23[2] = v25;
  swift_retain(a6);
  swift_bridgeObjectRetain(a3);
  sub_10014F6BC(a2, a3, v18, (uint64_t)sub_100067A90, v22);
  swift_release(v22);

}

uint64_t sub_100067708(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v10 = qword_10028ADD0;
  swift_bridgeObjectRetain(a3);
  if (v10 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89F0);
  v12 = swift_bridgeObjectRetain_n(a3, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v20 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a3);
    v19 = sub_1001DEF4C((uint64_t)a2, a3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Sharing health record with beneficiary - %s...", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v17 = (_QWORD *)swift_allocObject(&unk_100262630, 48, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  swift_bridgeObjectRetain(a3);
  swift_retain(a5);
  sub_10006750C(a1, a2, a3, (void **)3, (uint64_t)sub_100067968, (uint64_t)v17);
  swift_bridgeObjectRelease(a3);
  return swift_release(v17);
}

uint64_t sub_10006793C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100067968(uint64_t a1)
{
  uint64_t v1;

  return sub_1000623A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), "Successfully shared the health record with %s");
}

uint64_t sub_10006798C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 24, v5);
}

uint64_t sub_100067A90(uint64_t a1, char a2)
{
  return sub_100067AA4(a1, a2, type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100063240);
}

uint64_t sub_100067AA4(uint64_t a1, char a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v6 = a2 & 1;
  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(a1, v6, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + v8, *v9, v9[1], v9[2]);
}

uint64_t sub_100067B20()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));

  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100067C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100067C20(a1, a2, a3, type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100064848);
}

uint64_t sub_100067C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v5;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a4(0) - 8) + 80);
  return a5(a1, a2, a3, *((_QWORD *)v5 + 2), *((_QWORD *)v5 + 3), *((_QWORD *)v5 + 4), &v5[(v9 + 40) & ~v9]);
}

void sub_100067C9C(_QWORD *a1)
{
  id v2;
  id v3;
  unint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v2 = objc_msgSend(*(id *)(*sub_10000732C(a1 + 2, a1[5]) + 16), "aa_primaryAppleAccount");
  if (v2)
  {

    v3 = objc_allocWithZone((Class)type metadata accessor for InheritanceMigrationAnalyticsEvent(0));
    v4 = sub_10006A7EC((uint64_t)&_swiftEmptyArrayStorage);
    v5 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002BLL, 0x800000010020A6A0, v4);
    v6 = (_QWORD *)swift_allocObject(&unk_1002627F8, 48, 7);
    v6[2] = a1;
    v6[3] = v5;
    v6[4] = OSTransaction.complete();
    v6[5] = 0;
    v7 = qword_10028AE00;
    swift_retain(a1);
    v8 = v5;
    if (v7 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8A80);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting beneficiary manatee migration.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    sub_10000732C(a1 + 7, a1[10]);
    v14 = (_QWORD *)swift_allocObject(&unk_100262820, 40, 7);
    v14[2] = sub_10006AF28;
    v14[3] = v6;
    v14[4] = a1;
    swift_retain(a1);
    swift_retain(v6);
    sub_100006A8C((uint64_t)sub_10006AF2C, (uint64_t)v14);

    swift_release(v6);
    swift_release(v14);
  }
  else
  {
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A80);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not logged in to AppleAccount, Aborting migration!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v21 = v20;
    v24 = 10;
    v22 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v23 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v25, &v24, v22, v21, v23);

  }
}

void sub_100067FB8(void (*a1)(void *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  id v7;
  unint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;

  v3 = v2;
  v6 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 40)) + 16), "aa_primaryAppleAccount");
  if (v6)
  {

    v7 = objc_allocWithZone((Class)type metadata accessor for InheritanceMigrationAnalyticsEvent(0));
    v8 = sub_10006A7EC((uint64_t)&_swiftEmptyArrayStorage);
    v9 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002BLL, 0x800000010020A6A0, v8);
    v10 = (_QWORD *)swift_allocObject(&unk_1002626E0, 48, 7);
    v10[2] = v3;
    v10[3] = v9;
    v10[4] = a1;
    v10[5] = a2;
    v11 = qword_10028AE00;
    swift_retain(v3);
    v12 = v9;
    swift_retain(a2);
    if (v11 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A8A80);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting beneficiary manatee migration.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
    v18 = (_QWORD *)swift_allocObject(&unk_100262708, 40, 7);
    v18[2] = sub_10006A908;
    v18[3] = v10;
    v18[4] = v3;
    swift_retain(v3);
    swift_retain(v10);
    sub_100006A8C((uint64_t)sub_10006A918, (uint64_t)v18);

    swift_release(v10);
    swift_release(v18);
  }
  else
  {
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A8A80);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Not logged in to AppleAccount, Aborting migration!", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v25 = v24;
    v29 = 10;
    v26 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v27 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v30, &v29, v26, v25, v27);
    v28 = v30;
    a1(v30);

  }
}

uint64_t sub_1000682E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  void *v7;
  char v8;
  _BYTE v10[24];

  if (*(uint64_t *)(a2 + 112) > 0)
  {
    if (!a1)
    {
      v7 = 0;
      v8 = 1;
LABEL_6:
      swift_beginAccess(a2 + 120, v10, 0, 0);
      sub_1001CC950(v8, (uint64_t)v7);

      return a4(a1);
    }
LABEL_5:
    v7 = (void *)_convertErrorToNSError(_:)(a1);
    v8 = 0;
    goto LABEL_6;
  }
  if (a1)
    goto LABEL_5;
  return a4(a1);
}

uint64_t sub_1000683A4(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t *v34;
  uint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  __int128 v92;
  uint64_t v93;
  uint8_t *v94;
  void *v95;
  uint64_t aBlock[5];
  _QWORD *v97;

  v10 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v20 - 8);
  v90 = v20;
  __chkstk_darwin(v20, v21);
  v88 = (char *)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS.QoSClass(0);
  v25 = __chkstk_darwin(v23, v24);
  v28 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v54 = type metadata accessor for Logger(0);
    sub_100005288(v54, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v55 = swift_errorRetain(a1);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v95 = (void *)a1;
      aBlock[0] = v59;
      *(_DWORD *)v58 = 136315138;
      v94 = v58 + 4;
      swift_errorRetain(a1);
      v60 = sub_1000080B4(&qword_10028E850);
      v61 = String.init<A>(describing:)(&v95, v60);
      v63 = v62;
      v95 = (void *)sub_1001DEF4C(v61, v62, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, aBlock);
      swift_bridgeObjectRelease(v63);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to fetch Beneficiaries. Aborting migration : %s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v82 = v28;
    v83 = v26;
    v84 = v25;
    v85 = v19;
    v86 = v16;
    v87 = v15;
    v29 = a1;
    v30 = *(_QWORD *)(a1 + 16);
    if (v30)
    {
      v80 = a3;
      v81 = a4;
      v31 = v29 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v32 = qword_10028AE00;
      v79 = v29;
      swift_bridgeObjectRetain(v29);
      if (v32 != -1)
        swift_once(&qword_10028AE00, sub_100046E2C);
      v33 = *(NSObject **)(a5 + 96);
      v34 = *(uint8_t **)(v11 + 72);
      v35 = type metadata accessor for Logger(0);
      *(_QWORD *)&v36 = 136315138;
      v92 = v36;
      v91 = (char *)&type metadata for Any + 8;
      v93 = v35;
      v94 = v34;
      do
      {
        sub_100005288(v35, (uint64_t)qword_1002A8A80);
        v38 = sub_100027FE8(v31, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v39, v40))
        {
          v41 = swift_slowAlloc(12, -1);
          v42 = swift_slowAlloc(32, -1);
          aBlock[0] = v42;
          *(_DWORD *)v41 = v92;
          v43 = v14;
          v44 = a5;
          v45 = v33;
          v46 = type metadata accessor for UUID(0);
          v47 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v48 = v46;
          v33 = v45;
          a5 = v44;
          v14 = v43;
          v49 = dispatch thunk of CustomStringConvertible.description.getter(v48, v47);
          v51 = v50;
          *(_QWORD *)(v41 + 4) = sub_1001DEF4C(v49, v50, aBlock);
          swift_bridgeObjectRelease(v51);
          sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Migrating Records for beneficiaryID - %s.", (uint8_t *)v41, 0xCu);
          swift_arrayDestroy(v42, 1, v91);
          v52 = v42;
          v35 = v93;
          swift_slowDealloc(v52, -1, -1);
          v53 = v41;
          v34 = v94;
          swift_slowDealloc(v53, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
        }

        dispatch_group_enter(v33);
        v37 = (char *)swift_allocObject(&unk_100262730, 24, 7);
        swift_weakInit(v37 + 16, a5);
        sub_10006A928(v31, a5, v37);
        swift_release(v37);
        v31 += (uint64_t)v34;
        --v30;
      }
      while (v30);
      sub_1000057B0(v79, 0);
      a4 = v81;
      a3 = v80;
    }
    sub_100007764();
    v65 = v82;
    v64 = v83;
    v66 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v82, enum case for DispatchQoS.QoSClass.default(_:), v84);
    v67 = (void *)static OS_dispatch_queue.global(qos:)(v65);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
    v68 = (_QWORD *)swift_allocObject(&unk_100262758, 40, 7);
    v68[2] = a3;
    v68[3] = a4;
    v68[4] = a5;
    aBlock[4] = (uint64_t)sub_10006AD70;
    v97 = v68;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000051D0;
    aBlock[3] = (uint64_t)&unk_100262770;
    v69 = _Block_copy(aBlock);
    swift_retain(a4);
    v70 = swift_retain(a5);
    v71 = v88;
    static DispatchQoS.unspecified.getter(v70);
    v95 = &_swiftEmptyArrayStorage;
    v72 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v74 = sub_100008628();
    v75 = v85;
    v76 = v87;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v73, v74, v87, v72);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v71, v75, v67, v69);
    _Block_release(v69);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v90);
    return swift_release(v97);
  }
}

uint64_t sub_100068AB4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100005288(v5, (uint64_t)qword_1002A8A80);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Beneficiary Manatee migration complete.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  swift_beginAccess(a3 + 120, v13, 0, 0);
  v10 = *(_QWORD *)(a3 + 120);
  if (*(_QWORD *)(v10 + 16))
  {
    v11 = *(_QWORD *)(v10 + 32);
    swift_errorRetain(v11);
  }
  else
  {
    v11 = 0;
  }
  a1(v11);
  return swift_errorRelease(v11);
}

uint64_t sub_100068BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100006F58((_QWORD *)(v0 + 16));
  sub_100006F58((_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  v1 = v0 + OBJC_IVAR____TtC13appleaccountd26BeneficiaryManateeMigrator__accessKeyRepairHandler;
  v2 = sub_1000080B4(&qword_10028D828);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100068C58()
{
  return type metadata accessor for BeneficiaryManateeMigrator(0);
}

uint64_t type metadata accessor for BeneficiaryManateeMigrator(uint64_t a1)
{
  uint64_t result;

  result = qword_10028D760;
  if (!qword_10028D760)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryManateeMigrator);
  return result;
}

void sub_100068C9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.RawPointer + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100068D4C(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_100068D4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028D770)
  {
    v2 = sub_10000D908((uint64_t *)&unk_10028D778);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028D770);
  }
}

void sub_100068DA4(void (*a1)(void *), uint64_t a2)
{
  sub_100067FB8(a1, a2);
}

uint64_t sub_100068DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8A80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Manatee status changed, fetching new manatee status.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_allocObject(&unk_100262730, 24, 7);
  swift_weakInit(v7 + 16, v1);
  swift_retain(v7);
  sub_1000D0C00((uint64_t)sub_10006AEA8, v7);
  return swift_release_n(v7, 2);
}

void sub_100068EDC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *Strong;
  _QWORD *v24;
  NSObject *oslog;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v9 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v26[0] = v12;
      *(_DWORD *)v11 = 136315138;
      v27 = a1;
      swift_errorRetain(a1);
      v13 = sub_1000080B4(&qword_10028E850);
      v14 = String.init<A>(describing:)(&v27, v13);
      v16 = v15;
      v27 = sub_1001DEF4C(v14, v15, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease(v16);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Failed to fetch manatee status: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      sub_10006AEB4(a1, 1);
      return;
    }
    sub_10006AEB4(a1, 1);
    sub_10006AEB4(a1, 1);
    swift_errorRelease(a1);
    goto LABEL_19;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Account is not manatee, skipping manatee migration.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
LABEL_19:

    return;
  }
  v17 = a3 + 16;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A8A80);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Account is now manatee, kicking off migration.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  swift_beginAccess(v17, v26, 0, 0);
  Strong = (_QWORD *)swift_weakLoadStrong(v17);
  if (Strong)
  {
    v24 = Strong;
    sub_100067C9C(Strong);
    swift_release(v24);
  }
}

void sub_1000692A8(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (**v50)(uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t Strong;
  os_unfair_lock_s *v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  os_unfair_lock_s *v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  _QWORD v65[2];
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];
  _BYTE v71[24];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[3];

  v4 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v4 - 8);
  v69 = v4;
  v5 = *(_QWORD *)(v68 + 64);
  v7 = __chkstk_darwin(v4, v6);
  v8 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v65 - v10;
  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (os_unfair_lock_s *)sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v16, v17);
  v19 = (_QWORD *)((char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a2 + 16;
  sub_100024A20(a1, (uint64_t)v19, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    a1 = *v19;
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v22 = swift_errorRetain(a1);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v74[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v72 = a1;
      swift_errorRetain(a1);
      v27 = sub_1000080B4(&qword_10028E850);
      v28 = String.init<A>(describing:)(&v72, v27);
      v30 = v29;
      v72 = sub_1001DEF4C(v28, v29, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      swift_bridgeObjectRelease(v30);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error migrating BeneficiaryInfoRecord : %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v20, v74, 0, 0);
    Strong = swift_weakLoadStrong(v20);
    if (Strong)
    {
      v55 = *(os_unfair_lock_s **)(Strong + 104);
      swift_release(Strong);
      os_unfair_lock_lock(v55);
    }
    swift_beginAccess(v20, &v72, 0, 0);
    v56 = swift_weakLoadStrong(v20);
    if (!v56)
      goto LABEL_23;
    v8 = (char *)v56;
    v16 = (os_unfair_lock_s *)(v56 + 120);
    swift_beginAccess(v56 + 120, v71, 33, 0);
    a2 = (char *)*((_QWORD *)v8 + 15);
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
    *((_QWORD *)v8 + 15) = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
LABEL_20:
      v59 = *((_QWORD *)a2 + 2);
      v58 = *((_QWORD *)a2 + 3);
      if (v59 >= v58 >> 1)
      {
        a2 = sub_10013428C((char *)(v58 > 1), v59 + 1, 1, a2);
        *(_QWORD *)&v16->_os_unfair_lock_opaque = a2;
      }
      *((_QWORD *)a2 + 2) = v59 + 1;
      *(_QWORD *)&a2[8 * v59 + 32] = a1;
      swift_endAccess(v71);
      swift_release(v8);
LABEL_23:
      swift_beginAccess(v20, v71, 0, 0);
      v60 = swift_weakLoadStrong(v20);
      if (v60)
      {
        v61 = *(os_unfair_lock_s **)(v60 + 104);
        swift_release(v60);
        os_unfair_lock_unlock(v61);
      }
      swift_beginAccess(v20, v70, 0, 0);
      v62 = swift_weakLoadStrong(v20);
      if (v62)
      {
        v63 = v62;
        v64 = *(id *)(v62 + 96);
        swift_release(v63);
        dispatch_group_leave(v64);
        swift_errorRelease(a1);

      }
      else
      {
        swift_errorRelease(a1);
      }
      return;
    }
LABEL_31:
    a2 = sub_10013428C(0, *((_QWORD *)a2 + 2) + 1, 1, a2);
    *(_QWORD *)&v16->_os_unfair_lock_opaque = a2;
    goto LABEL_20;
  }
  sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
  swift_beginAccess(a2 + 16, v74, 0, 0);
  v31 = swift_weakLoadStrong(a2 + 16);
  if (v31)
  {
    v16 = *(os_unfair_lock_s **)(v31 + 104);
    swift_release(v31);
    os_unfair_lock_lock(v16);
  }
  swift_beginAccess(a2 + 16, &v72, 0, 0);
  v32 = swift_weakLoadStrong(a2 + 16);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 112);
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
    {
      __break(1u);
      goto LABEL_31;
    }
    *(_QWORD *)(v32 + 112) = v35;
    swift_release(v32);
  }
  swift_beginAccess(a2 + 16, v71, 0, 0);
  v36 = swift_weakLoadStrong(a2 + 16);
  if (v36)
  {
    v37 = *(os_unfair_lock_s **)(v36 + 104);
    swift_release(v36);
    os_unfair_lock_unlock(v37);
  }
  swift_beginAccess(a2 + 16, v70, 0, 0);
  v38 = swift_weakLoadStrong(a2 + 16);
  if (v38)
  {
    v39 = v38;
    v66 = a2;
    v41 = v68;
    v40 = v69;
    v42 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
    v42(v11, v15, v69);
    v65[1] = sub_10000732C((_QWORD *)(v39 + 56), *(_QWORD *)(v39 + 80));
    v43 = swift_allocObject(&unk_100262730, 24, 7);
    v67 = v15;
    v44 = v43;
    swift_weakInit(v43 + 16, v39);
    v42(v8, v11, v40);
    v45 = *(unsigned __int8 *)(v41 + 80);
    v46 = (v45 + 16) & ~v45;
    v47 = (v5 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
    v49 = swift_allocObject(&unk_1002627A8, v48 + 8, v45 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v49 + v46, v8, v40);
    v50 = (void (**)(uint64_t))(v49 + v47);
    v51 = v66;
    *v50 = sub_10006AD84;
    v50[1] = (void (*)(uint64_t))v51;
    *(_QWORD *)(v49 + v48) = v44;
    v52 = v51;
    swift_retain_n(v51, 2);
    swift_retain(v44);
    sub_1000C8F4C((uint64_t)v11, (uint64_t)sub_10006AE1C, v49);
    swift_release(v39);
    swift_release(v52);
    swift_release(v44);
    swift_release(v49);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v40);
    v53 = (uint64_t)v67;
  }
  else
  {
    v53 = (uint64_t)v15;
  }
  sub_100028388(v53, type metadata accessor for BeneficiaryInfoRecord);
}

void sub_10006990C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t Strong;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v2 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v32[0] = v9;
      *(_DWORD *)v8 = 136315138;
      v30 = a1;
      swift_errorRetain(a1);
      v10 = sub_1000080B4(&qword_10028E850);
      v11 = String.init<A>(describing:)(&v30, v10);
      v13 = v12;
      v30 = sub_1001DEF4C(v11, v12, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error migrating other records : %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v2, &v30, 0, 0);
    Strong = swift_weakLoadStrong(v2);
    if (Strong)
    {
      v15 = *(os_unfair_lock_s **)(Strong + 104);
      swift_release(Strong);
      os_unfair_lock_lock(v15);
    }
    swift_beginAccess(v2, v29, 0, 0);
    v16 = swift_weakLoadStrong(v2);
    if (v16)
    {
      v17 = v16;
      v18 = (char **)(v16 + 120);
      swift_beginAccess(v16 + 120, v32, 33, 0);
      v19 = *(char **)(v17 + 120);
      swift_errorRetain(a1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      *(_QWORD *)(v17 + 120) = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v19 = sub_10013428C(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
        *v18 = v19;
      }
      v22 = *((_QWORD *)v19 + 2);
      v21 = *((_QWORD *)v19 + 3);
      if (v22 >= v21 >> 1)
      {
        v19 = sub_10013428C((char *)(v21 > 1), v22 + 1, 1, v19);
        *v18 = v19;
      }
      *((_QWORD *)v19 + 2) = v22 + 1;
      *(_QWORD *)&v19[8 * v22 + 32] = a1;
      swift_endAccess(v32);
      swift_release(v17);
    }
    swift_beginAccess(v2, &v28, 0, 0);
    v23 = swift_weakLoadStrong(v2);
    if (v23)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 104);
      swift_release(v23);
      os_unfair_lock_unlock(v24);
    }
    swift_errorRelease(a1);
  }
  swift_beginAccess(v2, v32, 0, 0);
  v25 = swift_weakLoadStrong(v2);
  if (v25)
  {
    v26 = v25;
    v27 = *(id *)(v25 + 96);
    swift_release(v26);
    dispatch_group_leave(v27);

  }
}

void sub_100069C58(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t Strong;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[5];
  uint64_t v90;
  _BYTE v91[16];

  v86 = a3;
  v87 = a4;
  v82 = a2;
  v7 = type metadata accessor for InheritanceInvitationRecord(0);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v81 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v85 = (uint8_t *)&v81 - v18;
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v81 - v20;
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v83 = v22;
  v84 = v23;
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v30, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
  {
    v89[0] = *v30;
    v31 = v89[0];
    swift_errorRetain(v89[0]);
    v32 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v34 = v33;
    if ((swift_dynamicCast(&v90, v89, v32, v33, 6) & 1) != 0)
    {
      v35 = (void *)v90;
      v88 = 3;
      v89[0] = v90;
      v36 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v37 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v90, &v88, v36, v34, v37);
      v38 = (void *)v90;
      v88 = v90;
      LOBYTE(v36) = static _BridgedStoredNSError.== infix(_:_:)(v89, &v88, v34, v37);

      if ((v36 & 1) != 0)
      {
        if (qword_10028AE00 != -1)
          swift_once(&qword_10028AE00, sub_100046E2C);
        v39 = type metadata accessor for Logger(0);
        sub_100005288(v39, (uint64_t)qword_1002A8A80);
        v41 = v83;
        v40 = v84;
        v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 16))(v26, v82, v83);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc(12, -1);
          v46 = swift_slowAlloc(32, -1);
          v89[0] = v46;
          *(_DWORD *)v45 = 136315138;
          v85 = v45 + 4;
          v47 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v48 = dispatch thunk of CustomStringConvertible.description.getter(v41, v47);
          v50 = v49;
          v90 = sub_1001DEF4C(v48, v49, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
          swift_bridgeObjectRelease(v50);
          (*(void (**)(char *, uint64_t))(v84 + 8))(v26, v41);
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "There is no InheritanceInvitationRecord for beneficiaryID - %s.", v45, 0xCu);
          swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v45, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v41);
        }

        v86(0);
        swift_errorRelease(v31);

        return;
      }

    }
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v68 = type metadata accessor for Logger(0);
    sub_100005288(v68, (uint64_t)qword_1002A8A80);
    swift_errorRetain(v31);
    v69 = swift_errorRetain(v31);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      v89[0] = v73;
      *(_DWORD *)v72 = 136315138;
      v90 = v31;
      swift_errorRetain(v31);
      v74 = String.init<A>(describing:)(&v90, v32);
      v76 = v75;
      v90 = sub_1001DEF4C(v74, v75, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_bridgeObjectRelease(v76);
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Error fetching InheritanceInvitationRecord. Aborting migration - %s", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }
    else
    {
      swift_errorRelease(v31);
      swift_errorRelease(v31);
    }

    swift_errorRetain(v31);
    v86(v31);
    swift_errorRelease(v31);
    swift_errorRelease(v31);
  }
  else
  {
    sub_10003B730((uint64_t)v30, (uint64_t)v21, type metadata accessor for InheritanceInvitationRecord);
    if ((v21[*(int *)(v7 + 44)] & 1) != 0)
    {
      if (qword_10028AE00 != -1)
        swift_once(&qword_10028AE00, sub_100046E2C);
      v51 = type metadata accessor for Logger(0);
      v52 = sub_100005288(v51, (uint64_t)qword_1002A8A80);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "InheritanceInvitationRecord is already in Manatee.", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }

      v86(0);
      v56 = (uint64_t)v21;
    }
    else
    {
      v57 = a5 + 16;
      sub_100027FE8((uint64_t)v21, (uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
      v58 = (uint64_t)v85;
      sub_1001FEDC0((uint64_t)v15, 0, 0, 0, 1, 1, (uint64_t)v85);
      if (qword_10028AE00 != -1)
        swift_once(&qword_10028AE00, sub_100046E2C);
      v59 = type metadata accessor for Logger(0);
      sub_100005288(v59, (uint64_t)qword_1002A8A80);
      v60 = sub_100027FE8(v58, (uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v89[0] = v64;
        *(_DWORD *)v63 = 136315138;
        v65 = sub_10020082C();
        v67 = v66;
        v90 = sub_1001DEF4C(v65, v66, v89);
        v58 = (uint64_t)v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
        swift_bridgeObjectRelease(v67);
        sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Created new InheritanceHealthRecord - %s", v63, 0xCu);
        swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v63, -1, -1);
      }
      else
      {
        sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
      }

      swift_beginAccess(v57, &v90, 0, 0);
      Strong = swift_weakLoadStrong(v57);
      if (Strong)
      {
        v78 = Strong;
        sub_100006CA4(Strong + 56, (uint64_t)v89);
        swift_release(v78);
        sub_10000732C(v89, v89[3]);
        v79 = swift_allocObject(&unk_1002627D0, 32, 7);
        *(_QWORD *)(v79 + 16) = v86;
        v80 = v87;
        *(_QWORD *)(v79 + 24) = v87;
        swift_retain(v80);
        sub_1000C993C(v58, (uint64_t)sub_10006AEA0, v79);
        swift_release(v79);
        sub_100028388(v58, type metadata accessor for InheritanceInvitationRecord);
        sub_100028388((uint64_t)v21, type metadata accessor for InheritanceInvitationRecord);
        sub_100006F58(v89);
        return;
      }
      sub_100028388(v58, type metadata accessor for InheritanceInvitationRecord);
      v56 = (uint64_t)v21;
    }
    sub_100028388(v56, type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_10006A568(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v7, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = *v7;
    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    a2(0);
    return sub_100004934((uint64_t)v7, (uint64_t *)&unk_10028FA70);
  }
}

unint64_t sub_10006A644(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10006A6A8(a1, a2, v4);
}

unint64_t sub_10006A6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_10006A7EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000080B4(&qword_10028C118);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10006A644(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10006A908(uint64_t a1)
{
  uint64_t v1;

  return sub_1000682E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_10006A918(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000683A4(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10006A928(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  _QWORD v40[2];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[5];

  v44 = a2;
  v5 = sub_1000080B4(&qword_10028D828);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeneficiaryInfoRecord(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(unsigned __int8 *)(a1 + *(int *)(v16 + 40));
  v20 = qword_10028AE00;
  swift_retain(a3);
  if (v19 == 1)
  {
    if (v20 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A8A80);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "BeneficiaryInfoRecord is already in Manatee.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload(v13, v10, 0);
    sub_1000692A8((uint64_t)v13, a3);
    sub_100004934((uint64_t)v13, &qword_100295630);
  }
  else
  {
    if (v20 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8A80);
    v43 = a1;
    v27 = sub_100027FE8(a1, (uint64_t)v18, type metadata accessor for BeneficiaryInfoRecord);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v42 = a3;
      v31 = (uint8_t *)v30;
      v41 = swift_slowAlloc(32, -1);
      v46[0] = v41;
      *(_DWORD *)v31 = 136315138;
      v40[1] = v31 + 4;
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      v36 = v35;
      v45 = sub_1001DEF4C(v34, v35, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
      swift_bridgeObjectRelease(v36);
      sub_100028388((uint64_t)v18, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Migrating BeneficiaryInfoRecord with beneficiaryID %s...", v31, 0xCu);
      v37 = v41;
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      v38 = v31;
      a3 = v42;
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v18, type metadata accessor for BeneficiaryInfoRecord);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v44 + OBJC_IVAR____TtC13appleaccountd26BeneficiaryManateeMigrator__accessKeyRepairHandler, v5);
    Dependency.wrappedValue.getter(v46, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_10000732C(v46, v46[3]);
    sub_100178374(v43, 1, (uint64_t)sub_10006AD7C, (uint64_t)a3);
    sub_100006F58(v46);
  }
  return swift_release(a3);
}

uint64_t sub_10006AD48()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006AD70()
{
  uint64_t v0;

  return sub_100068AB4(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_10006AD7C(uint64_t a1)
{
  char *v1;

  sub_1000692A8(a1, v1);
}

void sub_10006AD84(uint64_t a1)
{
  uint64_t v1;

  sub_10006990C(a1, v1);
}

uint64_t sub_10006AD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_10006AE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100069C58(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10006AE7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006AEA0(uint64_t a1)
{
  uint64_t v1;

  return sub_10006A568(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_10006AEA8(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100068EDC(a1, a2 & 1, v2);
}

uint64_t sub_10006AEB4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10006AEC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10006AEFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = a1;
  v16[1] = a2;
  static CharacterSet.whitespacesAndNewlines.getter(v7);
  v10 = sub_10006B00C();
  v11 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = v11 & 0xFFFFFFFFFFFFLL;
  if (!v14)
  {
    swift_bridgeObjectRelease(v13);
    return 0;
  }
  return v11;
}

unint64_t sub_10006B00C()
{
  unint64_t result;

  result = qword_10028D830;
  if (!qword_10028D830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10028D830);
  }
  return result;
}

uint64_t *sub_10006B050(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    v12 = v10;
    v13 = v11;
  }
  return a1;
}

void sub_10006B0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);

}

uint64_t sub_10006B138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = v9;
  v12 = v10;
  return a1;
}

uint64_t sub_10006B1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a2 + v7);
  v9 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  v10 = v8;

  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a2 + v11);
  v13 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  v14 = v12;

  return a1;
}

uint64_t sub_10006B224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10006B288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(void **)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);

  v9 = *(int *)(a3 + 24);
  v10 = *(void **)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);

  return a1;
}

uint64_t sub_10006B300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006B30C);
}

uint64_t sub_10006B30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10006B388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006B394);
}

uint64_t sub_10006B394(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for URLConfigurationCache(uint64_t a1)
{
  uint64_t result;

  result = qword_10028D890;
  if (!qword_10028D890)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for URLConfigurationCache);
  return result;
}

uint64_t sub_10006B448(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10006B4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  os_log_t v64;
  uint64_t *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];

  v68 = a3;
  v5 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v67 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v10, v13);
  v16 = (char *)&v63 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v63 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v63 - v22;
  v24 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v72, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v29 = Strong;
    sub_100027F5C(a1, (uint64_t)v27);
    if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
    {
      v30 = *v27;
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v31 = type metadata accessor for Logger(0);
      sub_100005288(v31, (uint64_t)qword_1002A89D8);
      v32 = v68;
      swift_retain(v68);
      swift_errorRetain(v30);
      swift_retain(v32);
      v33 = swift_errorRetain(v30);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(22, -1);
        v65 = (uint64_t *)swift_slowAlloc(8, -1);
        v66 = swift_slowAlloc(32, -1);
        v71 = v66;
        *(_DWORD *)v36 = 136315394;
        v63 = v36 + 4;
        v37 = v69;
        v38 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
        v64 = v34;
        v39 = v67;
        v38(v67, v32 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v5);
        v40 = sub_10002A848();
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v5, v40);
        v43 = v42;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v5);
        v70 = sub_1001DEF4C(v41, v43, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_release_n(v32, 2);
        swift_bridgeObjectRelease(v43);
        *(_WORD *)(v36 + 12) = 2112;
        v44 = _convertErrorToNSError(_:)(v30);
        v70 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        v45 = v65;
        *v65 = v44;
        swift_errorRelease(v30);
        swift_errorRelease(v30);
        v46 = v64;
        _os_log_impl((void *)&_mh_execute_header, v64, v35, "Error fetching custodianship %s: %@", (uint8_t *)v36, 0x16u);
        v47 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v45, 1, v47);
        swift_slowDealloc(v45, -1, -1);
        v48 = v66;
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v36, -1, -1);
        swift_release(v29);

        swift_errorRelease(v30);
      }
      else
      {
        swift_release(v29);
        swift_errorRelease(v30);
        swift_release_n(v32, 2);
        swift_errorRelease(v30);
        swift_errorRelease(v30);

      }
    }
    else
    {
      sub_100027FA4((uint64_t)v27, (uint64_t)v23);
      sub_1000433A0((uint64_t)v23, (uint64_t)v16);
      v54 = &v23[v8[6]];
      v56 = *(_QWORD *)v54;
      v55 = *((_QWORD *)v54 + 1);
      v57 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v57(v12, v16, v5);
      v57(&v12[v8[5]], &v16[v8[5]], v5);
      v58 = v8[8];
      v59 = *(_QWORD *)&v16[v58];
      v60 = *(_QWORD *)&v16[v58 + 8];
      v61 = (uint64_t *)&v12[v58];
      *v61 = v59;
      v61[1] = v60;
      v62 = &v12[v8[6]];
      *(_QWORD *)v62 = v56;
      *((_QWORD *)v62 + 1) = v55;
      *(_QWORD *)&v12[v8[7]] = 4;
      LOBYTE(v56) = v16[v8[9]];
      swift_bridgeObjectRetain(v55);
      sub_10000F450(v59, v60);
      sub_10006BD98((uint64_t)v16);
      v12[v8[9]] = v56;
      sub_100027FA4((uint64_t)v12, (uint64_t)v20);
      sub_10000732C((_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 40));
      sub_1001E5A68((uint64_t)v20, (uint64_t)sub_10006BA88, 0);
      swift_release(v29);
      sub_10006BD98((uint64_t)v20);
      sub_10006BD98((uint64_t)v23);
    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100005288(v49, (uint64_t)qword_1002A89D8);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error updating custodianship - couldn't get strong ref", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

  }
}

void sub_10006BA88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100027F5C(a1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v6 = *v5;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(v6);
      v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v12 = v13;
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error updating custodianship %@", v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  else
  {
    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Custodianship status updated", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_10006BDD4((uint64_t)v5);
  }
}

uint64_t sub_10006BD4C()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));
  sub_100006F58((_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for DaemonCustodianRemovedHandler()
{
  return objc_opt_self(_TtC13appleaccountd29DaemonCustodianRemovedHandler);
}

uint64_t sub_10006BD98(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianshipInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006BDD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_10028C450);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006BE14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v5);
  v2[14] = swift_task_alloc(v5);
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for IdentityRecord(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v6);
  v2[16] = swift_task_alloc(v6);
  v2[17] = swift_task_alloc(v6);
  return swift_task_switch(sub_10006BEC0, 0, 0);
}

uint64_t sub_10006BEC0()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(*(_QWORD *)(v0 + 80) + 104), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 128))+ 16), "aa_primaryAppleAccount");
  *(_QWORD *)(v0 + 144) = v1;
  if (!v1)
    goto LABEL_6;
  v2 = v1;
  if (!objc_msgSend(v1, "isEnabledForDataclass:", ACAccountDataclassContacts))
  {

LABEL_6:
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005288(v10, (uint64_t)qword_1002A8A68);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing primary apple account or contacts dataclass is not enabled for account. Skipping updating identity with me card data!", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }
    goto LABEL_15;
  }
  v3 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 80) + 56), "contactForMe");
  *(_QWORD *)(v0 + 152) = v3;
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 72);
    sub_10000732C((_QWORD *)(*(_QWORD *)(v0 + 80) + 64), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 88));
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;
    *(_QWORD *)(v0 + 160) = v6;
    v8 = (_QWORD *)swift_task_alloc(dword_10028E9BC);
    *(_QWORD *)(v0 + 168) = v8;
    *v8 = v0;
    v8[1] = sub_10006C16C;
    return sub_10008A6EC(*(_QWORD *)(v0 + 136), v5, v7);
  }
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A8A68);
  v12 = Logger.logObject.getter(v16);
  v17 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v17, "Unable to fetch me card to update identity", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

LABEL_15:
  v19 = *(_QWORD *)(v0 + 128);
  v21 = *(_QWORD *)(v0 + 112);
  v20 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C16C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006C47C;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 160));
    v4 = sub_10006C1D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006C1D8()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  id v6;
  Class isa;
  NSString v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  Class v15;
  NSString v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = objc_msgSend(*(id *)(v0 + 152), "imageData");
  v2 = v1;
  if (v1)
  {
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v5 = v4;

    v6 = objc_allocWithZone((Class)CKAsset);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v8 = String._bridgeToObjectiveC()();
    v2 = objc_msgSend(v6, "initWithAssetContent:itemTypeHint:", isa, v8);
    sub_10000F494(v3, v5);

  }
  *(_QWORD *)(v0 + 184) = v2;
  v9 = objc_msgSend(*(id *)(v0 + 152), "thumbnailImageData");
  v10 = v9;
  if (v9)
  {
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    v14 = objc_allocWithZone((Class)CKAsset);
    v15 = Data._bridgeToObjectiveC()().super.isa;
    v16 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v14, "initWithAssetContent:itemTypeHint:", v15, v16);
    sub_10000F494(v11, v13);

  }
  *(_QWORD *)(v0 + 192) = v10;
  v17 = objc_msgSend(*(id *)(v0 + 152), "memojiMetadata");
  if (v17)
  {
    v18 = v17;
    v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = 0;
    v21 = 0xF000000000000000;
  }
  *(_QWORD *)(v0 + 200) = v19;
  *(_QWORD *)(v0 + 208) = v21;
  v22 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 80);
  sub_10006CCF4(*(_QWORD *)(v0 + 136), v23);
  sub_100014534(v19, v21);
  v25 = v10;
  v26 = v2;
  sub_10006E970(v23, 0, 0, 0, 0, 0, 0, v19, v22, v21, v2, v10, 0, 0, 2);
  v27 = *sub_10000732C((_QWORD *)(v24 + 64), *(_QWORD *)(v24 + 88));
  v28 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 216) = v28;
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v22;
  v29 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 224) = v29;
  *v29 = v0;
  v29[1] = sub_10006C6A4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 112), 0, 0, 0x6564692865766173, 0xEF293A797469746ELL, sub_10006CD38, v28, *(_QWORD *)(v0 + 88));
}

uint64_t sub_10006C47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  v1 = *(_QWORD *)(v0 + 176);
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A68);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v1, v0 + 40, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v10 = v9;
    *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v10);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error updating identity with me card data: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = *(void **)(v0 + 144);
  v11 = *(void **)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 136);
  v16 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 104);
  swift_willThrow(v18);

  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C6A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006CA40;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 216));
    v4 = sub_10006C710;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006C710()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *log;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t type;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v1 = *(void **)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A8A68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  v7 = Logger.logObject.getter(v1);
  type = static os_log_type_t.debug.getter(v7);
  v8 = os_log_type_enabled(v7, type);
  v10 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 208);
  v39 = *(void **)(v0 + 144);
  v40 = *(void **)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 136);
  v41 = *(_QWORD *)(v0 + 128);
  v42 = *(void **)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 104);
  v43 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(void **)(v0 + 72);
  if (v8)
  {
    v36 = *(_QWORD *)(v0 + 200);
    v35 = *(void **)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 136);
    v16 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v44 = v34;
    *(_DWORD *)v16 = 136315394;
    log = v7;
    v17 = sub_10002A848();
    v18 = v13;
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    v21 = v20;
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v19, v20, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v21);
    v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v12, v18);
    *(_WORD *)(v16 + 12) = 2080;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v25 = v24;
    *(_QWORD *)(v0 + 64) = sub_1001DEF4C(v23, v24, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    swift_bridgeObjectRelease(v25);

    _os_log_impl((void *)&_mh_execute_header, log, type, "Updated identity: %s for serviceID: %s with me card data", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    sub_1000144D8(v36, v9);
    v22(v43, v18);
    sub_10006CD40(v41);
    v26 = v37;
  }
  else
  {

    v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v27(v12, v13);

    sub_1000144D8(v10, v9);
    v27(v43, v13);
    sub_10006CD40(v41);
    v26 = v11;
  }
  sub_10006CD40(v26);
  v28 = *(_QWORD *)(v0 + 128);
  v30 = *(_QWORD *)(v0 + 112);
  v29 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CA40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(void **)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));

  sub_1000144D8(v2, v1);
  sub_10006CD40(v6);
  sub_10006CD40(v5);
  v7 = *(_QWORD *)(v0 + 232);
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A8A68);
  swift_errorRetain(v7);
  v9 = swift_errorRetain(v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v26 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    v14 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    v16 = v15;
    *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error updating identity with me card data: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  v18 = *(void **)(v0 + 144);
  v17 = *(void **)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 104);
  swift_willThrow(v24);

  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006CC98()
{
  _QWORD *v0;

  sub_100006F58(v0 + 2);
  swift_unknownObjectRelease(v0[7]);
  sub_100006F58(v0 + 8);
  sub_100006F58(v0 + 13);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for IdentityContactsNotificationHandler()
{
  return objc_opt_self(_TtC13appleaccountd35IdentityContactsNotificationHandler);
}

uint64_t sub_10006CCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdentityRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006CD38(uint64_t a1)
{
  uint64_t v1;

  return sub_10008B888(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10006CD40(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IdentityRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006CD7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10006CDBC
                                                                     + 4 * asc_10021A5C0[a1]))(0xD000000000000015, 0x800000010020A7C0);
}

uint64_t sub_10006CDBC()
{
  return 0x69636966656E6562;
}

uint64_t sub_10006CDE0()
{
  return 0x444964726F636572;
}

unint64_t sub_10006CDF8()
{
  return 0xD000000000000010;
}

uint64_t sub_10006CE14()
{
  uint64_t v0;

  return v0 + 3;
}

uint64_t sub_10006CE2C()
{
  unsigned __int8 *v0;

  return sub_10006CD7C(*v0);
}

uint64_t sub_10006CE34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006E744(a1, a2);
  *a3 = result;
  return result;
}

void sub_10006CE58(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10006CE64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006DEE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006CE8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006DEE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006CEB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  void (*v37)(void);
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v45[2];
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  char v57;

  v49 = a2;
  v3 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v3 - 8);
  v51 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v7 = (_QWORD *)((char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  v10 = (char *)v45 - v9;
  v53 = sub_1000080B4(&qword_10028DA88);
  v11 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53, v12);
  v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeneficiaryManifestRecord(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v19 = a1[4];
  v54 = a1;
  sub_10000732C(a1, v20);
  v21 = sub_10006DEE4();
  v52 = v14;
  v22 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeneficiaryManifestRecord.CodingKeys, &type metadata for BeneficiaryManifestRecord.CodingKeys, v21, v20, v19);
  if (v22)
    return sub_100006F58(v54);
  v23 = v10;
  v47 = v7;
  v48 = v15;
  v55 = v11;
  v24 = v18;
  v25 = v51;
  v26 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v57 = 0;
  v27 = sub_10006DFA8((unint64_t *)&unk_10028DAA0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v28 = v26;
  v29 = v53;
  v30 = v26;
  v31 = v52;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v56, v28, &v57, v53, v30, v27);
  v32 = *(int *)(v48 + 20);
  *(_QWORD *)&v24[v32] = v56;
  LOBYTE(v56) = 1;
  v33 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34 = v23;
  v35 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v25, &v56, v29, v25, v33);
  v36 = v24;
  v37 = *(void (**)(void))(v50 + 32);
  v45[1] = v32;
  v46 = (uint64_t)v36;
  v37();
  LOBYTE(v56) = 2;
  v38 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v47, v25, &v56, v29, v25, v35);
  v39 = v29;
  v40 = v48;
  ((void (*)(uint64_t, _QWORD *, uint64_t))v37)(v46 + *(int *)(v48 + 24), v38, v25);
  v57 = 3;
  v41 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v56, &type metadata for Data, &v57, v39, &type metadata for Data, v41);
  v42 = v46;
  *(_OWORD *)(v46 + *(int *)(v40 + 28)) = v56;
  LOBYTE(v56) = 4;
  v43 = KeyedDecodingContainer.decode(_:forKey:)(&v56, v53);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v53);
  *(_BYTE *)(v42 + *(int *)(v40 + 32)) = v43 & 1;
  sub_10006DF28(v42, v49);
  sub_100006F58(v54);
  return sub_10006DF6C(v42);
}

uint64_t sub_10006D314(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v22;
  char v23;

  v3 = v1;
  v5 = sub_1000080B4(&qword_10028DAB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10006DEE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeneficiaryManifestRecord.CodingKeys, &type metadata for BeneficiaryManifestRecord.CodingKeys, v12, v10, v11);
  v13 = (int *)type metadata accessor for BeneficiaryManifestRecord(0);
  *(_QWORD *)&v22 = *(_QWORD *)(v3 + v13[5]);
  v23 = 0;
  v14 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v15 = sub_10006DFA8((unint64_t *)&unk_10028DAC0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, v14, v15);
  if (!v2)
  {
    LOBYTE(v22) = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v16, v17);
    v18 = v3 + v13[6];
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v22, v5, v16, v17);
    v22 = *(_OWORD *)(v3 + v13[7]);
    v23 = 3;
    v19 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v19);
    v20 = *(unsigned __int8 *)(v3 + v13[8]);
    LOBYTE(v22) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_10006D554(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  NSObject **v48;
  NSObject *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  NSString v57;
  id v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  NSObject *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t);
  id v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;

  LODWORD(v91) = a2;
  v90 = a3;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v87 - v10;
  v12 = type metadata accessor for UUID(0);
  v94 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v92 = (char *)&v87 - v19;
  v20 = CKRecord.recordType.getter(v18);
  v22 = v21;
  if (v20 == 0xD000000000000024 && v21 == 0x800000010020A4D0)
  {
    swift_bridgeObjectRelease(0x800000010020A4D0);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000024, 0x800000010020A4D0, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      v33 = v32;
      v97 = 2;
      v34 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v35 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v36 = _BridgedStoredNSError.init(_:userInfo:)(&v95, &v97, v34, v33, v35);
      swift_willThrow(v36);

      return;
    }
  }
  v24 = objc_msgSend(a1, "recordID");
  v25 = objc_msgSend(v24, "recordName");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v93 = v12;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v29 = v93;
  swift_bridgeObjectRelease(v28);
  v30 = v94;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48);
  if (v31(v11, 1, v29) == 1)
  {
    sub_100013AAC((uint64_t)v11);
    goto LABEL_7;
  }
  v88 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v88(v92, v11, v29);
  v37 = objc_msgSend(a1, "encryptedValuesByKey");
  v38 = String._bridgeToObjectiveC()();
  v89 = v37;
  v39 = objc_msgSend(v37, "objectForKeyedSubscript:", v38);

  if (!v39)
    goto LABEL_12;
  v97 = (uint64_t)v39;
  v40 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v95, &v97, v40, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v41 = v96;
  UUID.init(uuidString:)(v95, v96);
  swift_bridgeObjectRelease(v41);
  v42 = v93;
  if (v31(v8, 1, v93) == 1)
  {
    sub_100013AAC((uint64_t)v8);
LABEL_12:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v43 = type metadata accessor for Logger(0);
    sub_100005288(v43, (uint64_t)qword_1002A89F0);
    v44 = a1;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v47 = 138412290;
      v95 = v44;
      v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96);
      *v48 = v44;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Missing Inheritance beneficiaryID - %@", v47, 0xCu);
      v50 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v48, 1, v50);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {

      v45 = v44;
    }
    v51 = v89;

    type metadata accessor for InheritanceError(0);
    v53 = v52;
    v97 = 2;
    v54 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v55 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v56 = _BridgedStoredNSError.init(_:userInfo:)(&v95, &v97, v54, v53, v55);
    swift_willThrow(v56);
    swift_unknownObjectRelease(v51);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v92, v93);
    return;
  }
  v88(v16, v8, v42);
  v57 = String._bridgeToObjectiveC()();
  v58 = v89;
  v59 = objc_msgSend(v89, "objectForKeyedSubscript:", v57);

  if (v59
    && (v95 = v59,
        v60 = sub_1000080B4((uint64_t *)&unk_10028E800),
        (swift_dynamicCast(&v97, &v95, v40, v60, 6) & 1) != 0))
  {
    v61 = v97;
    v62 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v62);
    objc_msgSend(v62, "finishEncoding");
    v63 = objc_msgSend(v62, "encodedData");
    v64 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;
    swift_unknownObjectRelease(v58);

    v67 = (int *)type metadata accessor for BeneficiaryManifestRecord(0);
    v68 = v90;
    v69 = (uint64_t *)(v90 + v67[7]);
    *v69 = v64;
    v69[1] = v66;
    v70 = v93;
    v71 = (void (*)(uint64_t, char *, uint64_t))v88;
    v88((char *)(v68 + v67[6]), v92, v93);
    v71(v68, v16, v70);
    *(_QWORD *)(v68 + v67[5]) = v61;
    *(_BYTE *)(v68 + v67[8]) = v91 & 1;
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v72 = type metadata accessor for Logger(0);
    sub_100005288(v72, (uint64_t)qword_1002A89F0);
    v73 = a1;
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(8, -1);
      *(_DWORD *)v76 = 138412290;
      v95 = v73;
      v77 = v73;
      v58 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96);
      v78 = v91;
      *(_QWORD *)v91 = v73;

      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Missing Inheritance altDSID - %@", v76, 0xCu);
      v79 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v78, 1, v79);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {

      v74 = v73;
    }

    type metadata accessor for InheritanceError(0);
    v81 = v80;
    v97 = 2;
    v82 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v83 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v84 = _BridgedStoredNSError.init(_:userInfo:)(&v95, &v97, v82, v81, v83);
    swift_willThrow(v84);
    swift_unknownObjectRelease(v58);

    v85 = v93;
    v86 = *(void (**)(char *, uint64_t))(v94 + 8);
    v86(v16, v93);
    v86(v92, v85);
  }
}

uint64_t sub_10006DDE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10006CEB4(a1, a2);
}

uint64_t sub_10006DDFC(_QWORD *a1)
{
  return sub_10006D314(a1);
}

uint64_t sub_10006DE10(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_10028DA70, type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_10021A5F8);
  result = sub_100005150(&qword_10028D608, type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_10021A5D0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for BeneficiaryManifestRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10028DB90;
  if (!qword_10028DB90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryManifestRecord);
  return result;
}

uint64_t sub_10006DEA8(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_10028DA80, type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_10021A620);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10006DEE4()
{
  unint64_t result;

  result = qword_10028DA90;
  if (!qword_10028DA90)
  {
    result = swift_getWitnessTable(&unk_10021A788, &type metadata for BeneficiaryManifestRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DA90);
  }
  return result;
}

uint64_t sub_10006DF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeneficiaryManifestRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006DF6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeneficiaryManifestRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006DFA8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10000D908((uint64_t *)&unk_10028E800);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeneficiaryManifestRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10006E054 + 4 * byte_10021A5CA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006E088 + 4 * byte_10021A5C5[v4]))();
}

uint64_t sub_10006E088(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E090(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006E098);
  return result;
}

uint64_t sub_10006E0A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006E0ACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10006E0B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E0B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryManifestRecord.CodingKeys()
{
  return &type metadata for BeneficiaryManifestRecord.CodingKeys;
}

_QWORD *sub_10006E0D4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t, __n128);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v8)(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v11;
    v12 = (char *)a1 + v10;
    v13 = (char *)a2 + v10;
    v14 = swift_bridgeObjectRetain(v11);
    v8(v12, v13, v7, v14);
    v15 = a3[7];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = *v17;
    v19 = v17[1];
    sub_10000F450(*v17, v19);
    *v16 = v18;
    v16[1] = v19;
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_10006E1B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  v5(a1 + a2[6], v4);
  return sub_10000F494(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t sub_10006E228(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a1 + v9;
  v12 = a2 + v9;
  v13 = swift_bridgeObjectRetain(v10);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(v11, v12, v6, v13);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10000F450(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006E2E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10000F450(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_10000F494(v16, v17);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006E3A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7(a1 + v8, a2 + v8, v6);
  v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t sub_10006E42C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v10 = a3[7];
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_10000F494(v11, v12);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10006E4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006E4E0);
}

uint64_t sub_10006E4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10006E55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10006E568);
}

uint64_t sub_10006E568(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10006E5E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = v4[0];
    v4[3] = &unk_10021A6A0;
    v4[4] = &unk_10021A6B8;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10006E670()
{
  unint64_t result;

  result = qword_10028DBD8;
  if (!qword_10028DBD8)
  {
    result = swift_getWitnessTable(&unk_10021A760, &type metadata for BeneficiaryManifestRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DBD8);
  }
  return result;
}

unint64_t sub_10006E6B8()
{
  unint64_t result;

  result = qword_10028DBE0;
  if (!qword_10028DBE0)
  {
    result = swift_getWitnessTable(&unk_10021A6D0, &type metadata for BeneficiaryManifestRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DBE0);
  }
  return result;
}

unint64_t sub_10006E700()
{
  unint64_t result;

  result = qword_10028DBE8;
  if (!qword_10028DBE8)
  {
    result = swift_getWitnessTable(&unk_10021A6F8, &type metadata for BeneficiaryManifestRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DBE8);
  }
  return result;
}

uint64_t sub_10006E744(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x800000010020A7C0;
    if (a2 == 0x800000010020A7C0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020A7C0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v6 = 0xED00004449797261;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_22;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_10006E970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  int *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v50;
  id v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  char v55;
  uint64_t result;

  v21 = (int *)type metadata accessor for IdentityRecord(0);
  *(_OWORD *)(a9 + v21[9]) = xmmword_10021A7E0;
  *(_OWORD *)(a9 + v21[10]) = xmmword_10021A7E0;
  v22 = type metadata accessor for UUID(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v23(a9, a1, v22);
  v23(a9 + v21[5], a1 + v21[5], v22);
  if (a15 == 2 || ((((a15 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v21[16])) & 1) != 0)
  {
    v24 = v21[15];
    v25 = *(_QWORD *)(a1 + v24);
    v26 = *(_QWORD *)(a1 + v24 + 8);
    v27 = (uint64_t *)(a9 + v24);
    *v27 = v25;
    v27[1] = v26;
    sub_10000F450(v25, v26);
  }
  else
  {
    *(_OWORD *)(a9 + v21[15]) = xmmword_100218E90;
  }
  v28 = v21[6];
  v29 = (_QWORD *)(a9 + v28);
  v30 = a4;
  if (!a3)
  {
    v31 = (uint64_t *)(a1 + v28);
    a2 = *v31;
    a3 = v31[1];
    swift_bridgeObjectRetain(a3);
  }
  *v29 = a2;
  v29[1] = a3;
  v32 = v21[7];
  v33 = (_QWORD *)(a9 + v32);
  if (!a5)
  {
    v34 = (uint64_t *)(a1 + v32);
    v30 = *v34;
    a5 = v34[1];
    swift_bridgeObjectRetain(a5);
  }
  *v33 = v30;
  v33[1] = a5;
  v35 = v21[8];
  v36 = (_QWORD *)(a9 + v35);
  v37 = a6;
  if (!a7)
  {
    v38 = (uint64_t *)(a1 + v35);
    v37 = *v38;
    a7 = v38[1];
    swift_bridgeObjectRetain(a7);
  }
  v39 = a11;
  *v36 = v37;
  v36[1] = a7;
  v40 = v21[11];
  v41 = (uint64_t *)(a9 + v40);
  if (a10 >> 60 == 15)
  {
    v42 = (uint64_t *)(a1 + v40);
    v43 = *v42;
    v44 = v42[1];
    *v41 = *v42;
    v41[1] = v44;
    sub_100014534(v43, v44);
  }
  else
  {
    *v41 = a8;
    v41[1] = a10;
  }
  v45 = a12;
  v46 = v21[12];
  if (!a11)
  {
    v39 = *(void **)(a1 + v46);
    v47 = v39;
  }
  v48 = a14;
  *(_QWORD *)(a9 + v46) = v39;
  v50 = v21[13];
  if (!a12)
  {
    v45 = *(void **)(a1 + v50);
    v51 = v45;
  }
  *(_QWORD *)(a9 + v50) = v45;
  v52 = v21[14];
  v53 = (_QWORD *)(a9 + v52);
  if (!a14)
  {
    v54 = (uint64_t *)(a1 + v52);
    a13 = *v54;
    v48 = v54[1];
    swift_bridgeObjectRetain(v48);
  }
  *v53 = a13;
  v53[1] = v48;
  if (a15 == 2)
    v55 = *(_BYTE *)(a1 + v21[16]);
  else
    v55 = a15 & 1;
  result = sub_10006CD40(a1);
  *(_BYTE *)(a9 + v21[16]) = v55;
  return result;
}

uint64_t sub_10006EB9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006EBD0 + 4 * byte_10021A7F0[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_10006EBD0()
{
  return 0x797469746E656469;
}

unint64_t sub_10006EC48()
{
  return 0xD000000000000012;
}

uint64_t sub_10006ECC0()
{
  return 0x6144696A6F6D656DLL;
}

uint64_t sub_10006ECE0()
{
  unsigned __int8 *v0;

  return sub_10006EB9C(*v0);
}

uint64_t sub_10006ECE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100072360(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006ED0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100071450();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006ED34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100071450();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006ED5C@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  _OWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(char *, char *, uint64_t);
  id v64;
  NSString v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  NSObject **v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t result;
  NSString v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  NSString v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  NSString v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  NSString v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  NSString v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint8_t *v115;
  void *v116;
  uint64_t v117;
  void *v118;
  id v119;
  void *v120;
  os_log_t v121;
  void (*v122)(char *, os_log_t, uint64_t);
  os_log_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(uint8_t *, char *, uint64_t);
  uint8_t *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char **v143;
  NSString v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  void *v150;
  id v151;
  void *v152;
  os_log_t v153;
  void (*v154)(char *, os_log_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  os_log_t v157;
  uint64_t v158;
  unsigned int (*v159)(uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  int v167;
  uint64_t v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint8_t *v174;
  char *v175;
  void (*v176)(char *, uint64_t, uint64_t, uint64_t);
  NSString v177;
  id v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  void (*v183)(uint64_t, char *, uint64_t);
  id v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t);
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(char *, uint64_t);
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint8_t *v209;
  uint64_t v210;
  os_log_t v211;
  uint8_t *v212;
  uint64_t v213;
  id v214;
  id v215;
  char *v216;
  uint8_t *v217;
  char *v218;
  char *v219;
  char *v220;
  os_log_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  _OWORD *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;

  v222 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  v7 = __chkstk_darwin(v5, v6);
  v220 = (char *)&v209 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v209 - v10;
  v223 = type metadata accessor for URL(0);
  v225 = *(_QWORD *)(v223 - 8);
  v13 = __chkstk_darwin(v223, v12);
  v216 = (char *)&v209 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v218 = (char *)&v209 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v217 = (uint8_t *)&v209 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v221 = (os_log_t)((char *)&v209 - v23);
  __chkstk_darwin(v22, v24);
  v219 = (char *)&v209 - v25;
  v26 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v28 = __chkstk_darwin(v26, v27);
  v30 = (char *)&v209 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v31);
  v33 = (char *)&v209 - v32;
  v34 = type metadata accessor for UUID(0);
  v238 = *(_QWORD *)(v34 - 8);
  v239 = v34;
  v36 = __chkstk_darwin(v34, v35);
  v226 = (char *)&v209 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v38);
  v228 = (char *)&v209 - v39;
  v40 = (int *)type metadata accessor for IdentityRecord(0);
  v41 = (uint64_t *)(a3 + v40[6]);
  *v41 = 0;
  v41[1] = 0;
  v234 = v41;
  v42 = (uint64_t *)(a3 + v40[7]);
  *v42 = 0;
  v42[1] = 0;
  v233 = v42;
  v43 = (uint64_t *)(a3 + v40[8]);
  *v43 = 0;
  v43[1] = 0;
  v232 = v43;
  v44 = (_OWORD *)(a3 + v40[9]);
  *v44 = xmmword_10021A7E0;
  v229 = a3 + v40[10];
  v230 = v44;
  *(_OWORD *)v229 = xmmword_10021A7E0;
  v235 = a3 + v40[11];
  *(_OWORD *)v235 = xmmword_10021A7E0;
  v237 = v40[12];
  *(_QWORD *)(a3 + v237) = 0;
  v236 = v40[13];
  *(_QWORD *)(a3 + v236) = 0;
  v45 = (uint64_t *)(a3 + v40[14]);
  *v45 = 0;
  v45[1] = 0;
  v231 = v45;
  v46 = CKRecord.recordType.getter(v40);
  v48 = v47;
  if (v46 == 0x797469746E656449 && v47 == 0xEE0064726F636552)
  {
    swift_bridgeObjectRelease(0xEE0064726F636552);
  }
  else
  {
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, 0x797469746E656449, 0xEE0064726F636552, 0);
    swift_bridgeObjectRelease(v48);
    if ((v49 & 1) == 0)
    {
      type metadata accessor for IdentityError(0);
      v78 = v77;
      v242 = -3001;
      v79 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v80 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
      v81 = _BridgedStoredNSError.init(_:userInfo:)(&v240, &v242, v79, v78, v80);
      swift_willThrow(v81);

      goto LABEL_18;
    }
  }
  v227 = a3;
  v50 = objc_msgSend(a1, "recordID");
  v51 = objc_msgSend(v50, "recordName");

  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v54 = v53;

  UUID.init(uuidString:)(v52, v54);
  swift_bridgeObjectRelease(v54);
  v56 = v238;
  v55 = v239;
  v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v238 + 48);
  if (v57(v33, 1, v239) == 1)
  {
    sub_100004934((uint64_t)v33, (uint64_t *)&unk_1002904F0);
    type metadata accessor for IdentityError(0);
    v59 = v58;
    v242 = -3001;
    v60 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v61 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
    v62 = _BridgedStoredNSError.init(_:userInfo:)(&v240, &v242, v60, v59, v61);
    swift_willThrow(v62);

    a3 = v227;
LABEL_18:
    swift_bridgeObjectRelease(v234[1]);
    swift_bridgeObjectRelease(v233[1]);
    swift_bridgeObjectRelease(v232[1]);
    sub_1000144D8(*(_QWORD *)v230, *((_QWORD *)v230 + 1));
    sub_1000144D8(*(_QWORD *)v229, *(_QWORD *)(v229 + 8));
    sub_1000144D8(*(_QWORD *)v235, *(_QWORD *)(v235 + 8));

    return swift_bridgeObjectRelease(v231[1]);
  }
  v63 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v63(v228, v33, v55);
  v64 = objc_msgSend(a1, "encryptedValuesByKey");
  v215 = objc_msgSend(a1, "valuesByKey");
  v65 = String._bridgeToObjectiveC()();
  v214 = v64;
  v66 = objc_msgSend(v64, "objectForKeyedSubscript:", v65);

  if (!v66
    || (v242 = (uint64_t)v66,
        v213 = sub_1000080B4(&qword_10028DB30),
        (swift_dynamicCast(&v240, &v242, v213, &type metadata for String, 6) & 1) == 0))
  {
LABEL_11:
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v69 = type metadata accessor for Logger(0);
    sub_100005288(v69, (uint64_t)qword_1002A8A68);
    v70 = a1;
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v73 = 138412290;
      v240 = (char *)v70;
      v75 = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, &v241);
      *v74 = v70;

      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Missing identityID - %@", v73, 0xCu);
      v76 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v74, 1, v76);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v73, -1, -1);
    }
    else
    {

      v71 = v70;
    }
    a3 = v227;
    v82 = v214;

    type metadata accessor for IdentityError(0);
    v84 = v83;
    v242 = -3001;
    v85 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v86 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
    v87 = _BridgedStoredNSError.init(_:userInfo:)(&v240, &v242, v85, v84, v86);
    swift_willThrow(v87);
    swift_unknownObjectRelease(v82);
    swift_unknownObjectRelease(v215);

    (*(void (**)(char *, uint64_t))(v238 + 8))(v228, v239);
    goto LABEL_18;
  }
  v67 = v241;
  UUID.init(uuidString:)(v240, v241);
  swift_bridgeObjectRelease(v67);
  v68 = v239;
  if (v57(v30, 1, v239) == 1)
  {
    sub_100004934((uint64_t)v30, (uint64_t *)&unk_1002904F0);
    goto LABEL_11;
  }
  v63(v226, v30, v68);
  v89 = String._bridgeToObjectiveC()();
  v90 = v214;
  v91 = objc_msgSend(v214, "objectForKeyedSubscript:", v89);

  a3 = v227;
  v92 = v225;
  if (v91)
  {
    v242 = (uint64_t)v91;
    if ((swift_dynamicCast(&v240, &v242, v213, &type metadata for String, 6) & 1) != 0)
    {
      v93 = (uint64_t)v240;
      v94 = v241;
      v95 = v234;
      swift_bridgeObjectRelease(v234[1]);
      *v95 = v93;
      v95[1] = v94;
      v92 = v225;
    }
  }
  v96 = String._bridgeToObjectiveC()();
  v97 = objc_msgSend(v90, "objectForKeyedSubscript:", v96);

  if (v97)
  {
    v242 = (uint64_t)v97;
    if ((swift_dynamicCast(&v240, &v242, v213, &type metadata for String, 6) & 1) != 0)
    {
      v98 = (uint64_t)v240;
      v99 = v241;
      v100 = v233;
      swift_bridgeObjectRelease(v233[1]);
      *v100 = v98;
      v100[1] = v99;
      v92 = v225;
    }
  }
  v101 = String._bridgeToObjectiveC()();
  v102 = objc_msgSend(v90, "objectForKeyedSubscript:", v101);

  if (v102)
  {
    v242 = (uint64_t)v102;
    if ((swift_dynamicCast(&v240, &v242, v213, &type metadata for String, 6) & 1) != 0)
    {
      v103 = (uint64_t)v240;
      v104 = v241;
      v105 = v232;
      swift_bridgeObjectRelease(v232[1]);
      *v105 = v103;
      v105[1] = v104;
      v92 = v225;
    }
  }
  v106 = String._bridgeToObjectiveC()();
  v107 = objc_msgSend(v90, "objectForKeyedSubscript:", v106);

  if (v107)
  {
    v242 = (uint64_t)v107;
    if ((swift_dynamicCast(&v240, &v242, v213, &type metadata for Data, 6) & 1) != 0)
    {
      v108 = (uint64_t)v240;
      v109 = v241;
      v110 = (uint64_t *)v235;
      sub_1000144D8(*(_QWORD *)v235, *(_QWORD *)(v235 + 8));
      *v110 = v108;
      v110[1] = v109;
      v92 = v225;
    }
  }
  v111 = String._bridgeToObjectiveC()();
  v112 = (uint8_t *)objc_msgSend(v215, "objectForKeyedSubscript:", v111);

  if (!v112)
    goto LABEL_40;
  v113 = objc_opt_self(CKAsset);
  v114 = swift_dynamicCastObjCClass(v112, v113);
  v115 = v112;
  if (!v114)
  {
    swift_unknownObjectRelease(v112);
LABEL_40:
    v142 = v92;
    v143 = &off_100287000;
    goto LABEL_43;
  }
  v116 = (void *)v114;
  v117 = v237;
  v118 = *(void **)(a3 + v237);
  v212 = v115;
  swift_unknownObjectRetain(v115);

  *(_QWORD *)(a3 + v117) = v116;
  v119 = objc_msgSend(v116, "fileURL");
  if (!v119)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v11, 1, 1, v223);
    goto LABEL_42;
  }
  v120 = v119;
  v121 = v221;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v119);

  v122 = *(void (**)(char *, os_log_t, uint64_t))(v92 + 32);
  v123 = v121;
  v124 = v223;
  v122(v11, v123, v223);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v11, 0, 1, v124);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v11, 1, v124) == 1)
  {
LABEL_42:
    swift_unknownObjectRelease(v212);
    sub_100004934((uint64_t)v11, (uint64_t *)&unk_10028DC30);
    v142 = v92;
    v143 = &off_100287000;
    goto LABEL_43;
  }
  v125 = v219;
  v126 = v11;
  v127 = v223;
  v122(v219, (os_log_t)v126, v223);
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v128 = type metadata accessor for Logger(0);
  sub_100005288(v128, (uint64_t)qword_1002A8A68);
  v129 = v92;
  v130 = *(uint64_t (**)(uint8_t *, char *, uint64_t))(v92 + 16);
  v131 = v217;
  v132 = v130(v217, v125, v127);
  v133 = Logger.logObject.getter(v132);
  v134 = static os_log_type_t.debug.getter();
  v135 = v131;
  if (os_log_type_enabled(v133, v134))
  {
    v211 = v133;
    v136 = (uint8_t *)swift_slowAlloc(12, -1);
    v210 = swift_slowAlloc(32, -1);
    v240 = (char *)v210;
    *(_DWORD *)v136 = 136315138;
    v209 = v136 + 4;
    v137 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v138 = dispatch thunk of CustomStringConvertible.description.getter(v127, v137);
    v140 = v139;
    v242 = sub_1001DEF4C(v138, v139, (uint64_t *)&v240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243);
    swift_bridgeObjectRelease(v140);
    v217 = *(uint8_t **)(v225 + 8);
    ((void (*)(uint8_t *, uint64_t))v217)(v135, v127);
    v133 = v211;
    _os_log_impl((void *)&_mh_execute_header, v211, v134, "File URL: %s", v136, 0xCu);
    v141 = v210;
    swift_arrayDestroy(v210, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v141, -1, -1);
    swift_slowDealloc(v136, -1, -1);
  }
  else
  {
    v217 = *(uint8_t **)(v129 + 8);
    ((void (*)(uint8_t *, uint64_t))v217)(v131, v127);
  }

  v191 = v224;
  v90 = v214;
  v143 = &off_100287000;
  v192 = v219;
  v193 = Data.init(contentsOf:options:)(v219, 0);
  if (v191)
  {
    swift_unknownObjectRelease(v212);
    swift_unknownObjectRelease(v90);
    swift_unknownObjectRelease(v215);

    ((void (*)(char *, uint64_t))v217)(v192, v223);
    v195 = v239;
    v196 = *(void (**)(char *, uint64_t))(v238 + 8);
    v196(v226, v239);
    v196(v228, v195);
    goto LABEL_18;
  }
  v203 = v193;
  v204 = v194;
  v224 = 0;
  ((void (*)(char *, uint64_t))v217)(v192, v223);
  swift_unknownObjectRelease(v212);
  v205 = (uint64_t *)v230;
  sub_1000144D8(*(_QWORD *)v230, *((_QWORD *)v230 + 1));
  *v205 = v203;
  v205[1] = v204;
  v142 = v225;
LABEL_43:
  v144 = String._bridgeToObjectiveC()();
  v145 = objc_msgSend(v215, v143[257], v144);

  if (!v145)
    goto LABEL_54;
  v146 = objc_opt_self(CKAsset);
  v147 = swift_dynamicCastObjCClass(v145, v146);
  if (!v147)
  {
    swift_unknownObjectRelease(v145);
    goto LABEL_54;
  }
  v148 = (void *)v147;
  v149 = v236;
  v150 = *(void **)(a3 + v236);
  swift_unknownObjectRetain(v145);

  *(_QWORD *)(a3 + v149) = v148;
  v151 = objc_msgSend(v148, "fileURL");
  if (!v151)
  {
    v176 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56);
    v156 = (uint64_t)v220;
    v176(v220, 1, 1, v223);
    goto LABEL_53;
  }
  v152 = v151;
  v153 = v221;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v151);

  v154 = *(void (**)(char *, os_log_t, uint64_t))(v142 + 32);
  v155 = v142;
  v156 = (uint64_t)v220;
  v157 = v153;
  v158 = v223;
  v154(v220, v157, v223);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v155 + 56))(v156, 0, 1, v158);
  v159 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  v143 = &off_100287000;
  if (v159(v156, 1, v158) == 1)
  {
LABEL_53:
    swift_unknownObjectRelease(v145);
    sub_100004934(v156, (uint64_t *)&unk_10028DC30);
    goto LABEL_54;
  }
  v160 = v156;
  v161 = v218;
  v154(v218, (os_log_t)v160, v158);
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v162 = type metadata accessor for Logger(0);
  sub_100005288(v162, (uint64_t)qword_1002A8A68);
  v163 = v216;
  v164 = (*(uint64_t (**)(char *, char *, uint64_t))(v225 + 16))(v216, v161, v158);
  v165 = Logger.logObject.getter(v164);
  v166 = static os_log_type_t.debug.getter();
  v167 = v166;
  if (os_log_type_enabled(v165, v166))
  {
    v221 = v165;
    v168 = swift_slowAlloc(12, -1);
    LODWORD(v219) = v167;
    v169 = (uint8_t *)v168;
    v220 = (char *)swift_slowAlloc(32, -1);
    v240 = v220;
    v217 = v169;
    *(_DWORD *)v169 = 136315138;
    v212 = v169 + 4;
    v170 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v171 = dispatch thunk of CustomStringConvertible.description.getter(v158, v170);
    v173 = v172;
    v242 = sub_1001DEF4C(v171, v172, (uint64_t *)&v240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243);
    swift_bridgeObjectRelease(v173);
    v225 = *(_QWORD *)(v225 + 8);
    ((void (*)(char *, uint64_t))v225)(v163, v158);
    v165 = v221;
    v174 = v217;
    _os_log_impl((void *)&_mh_execute_header, v221, (os_log_type_t)v219, "File URL: %s", v217, 0xCu);
    v175 = v220;
    swift_arrayDestroy(v220, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v175, -1, -1);
    swift_slowDealloc(v174, -1, -1);
  }
  else
  {
    v225 = *(_QWORD *)(v225 + 8);
    ((void (*)(char *, uint64_t))v225)(v163, v158);
  }

  v90 = v214;
  v197 = v218;
  v198 = v224;
  v199 = Data.init(contentsOf:options:)(v218, 0);
  v224 = v198;
  if (v198)
  {
    swift_unknownObjectRelease(v145);
    swift_unknownObjectRelease(v90);
    swift_unknownObjectRelease(v215);

    ((void (*)(char *, uint64_t))v225)(v197, v223);
    v201 = v239;
    v202 = *(void (**)(char *, uint64_t))(v238 + 8);
    v202(v226, v239);
    v202(v228, v201);
    goto LABEL_18;
  }
  v206 = v199;
  v207 = v200;
  ((void (*)(char *, uint64_t))v225)(v197, v223);
  swift_unknownObjectRelease(v145);
  v208 = (uint64_t *)v229;
  sub_1000144D8(*(_QWORD *)v229, *(_QWORD *)(v229 + 8));
  *v208 = v206;
  v208[1] = v207;
LABEL_54:
  v177 = String._bridgeToObjectiveC()();
  v178 = objc_msgSend(v90, v143[257], v177);

  if (v178)
  {
    v242 = (uint64_t)v178;
    if ((swift_dynamicCast(&v240, &v242, v213, &type metadata for String, 6) & 1) != 0)
    {
      v179 = (uint64_t)v240;
      v180 = v241;
      v181 = v231;
      swift_bridgeObjectRelease(v231[1]);
      *v181 = v179;
      v181[1] = v180;
    }
  }
  v182 = v239;
  v183 = *(void (**)(uint64_t, char *, uint64_t))(v238 + 16);
  v183(a3, v228, v239);
  v183(a3 + v40[5], v226, v182);
  v184 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v184);
  objc_msgSend(v184, "finishEncoding");
  v185 = objc_msgSend(v184, "encodedData");
  v186 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v185);
  v188 = v187;
  swift_unknownObjectRelease(v214);
  swift_unknownObjectRelease(v215);

  v189 = *(void (**)(char *, uint64_t))(v238 + 8);
  v189(v226, v182);
  result = ((uint64_t (*)(char *, uint64_t))v189)(v228, v182);
  v190 = (uint64_t *)(a3 + v40[15]);
  *v190 = v186;
  v190[1] = v188;
  *(_BYTE *)(a3 + v40[16]) = v222 & 1;
  return result;
}

uint64_t sub_100070180(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  __int128 v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  char v42;
  id v43;
  NSString v44;
  void *v45;
  id v46;
  id v47;
  char v48;
  id v49;
  NSString v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  id v56;
  char v57;
  id v58;
  __int128 v59;
  __int128 v60;
  void *v61;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v4);
  v58 = objc_msgSend(v3, "valuesByKey");
  swift_getObjectType(v58);
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x797469746E656469, 0xEA00000000004449);
  v6 = *((_QWORD *)&v59 + 1);
  v7 = v59;
  v8 = (int *)type metadata accessor for IdentityRecord(0);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  if (!v6)
  {
    v14 = swift_bridgeObjectRelease(v10);
    goto LABEL_9;
  }
  if (v7 == v9 && v6 == v10)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v11);
    goto LABEL_11;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v9, v10, 0);
  swift_bridgeObjectRelease(v6);
  v14 = swift_bridgeObjectRelease(v11);
  if ((v13 & 1) == 0)
  {
LABEL_9:
    v15 = UUID.uuidString.getter(v14);
    *((_QWORD *)&v60 + 1) = &type metadata for String;
    v61 = &protocol witness table for String;
    *(_QWORD *)&v59 = v15;
    *((_QWORD *)&v59 + 1) = v16;
    CKRecordKeyValueSetting.subscript.setter(&v59, 0x797469746E656469, 0xEA00000000004449, ObjectType);
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x6D614E6E65766967, 0xE900000000000065);
  v17 = *((_QWORD *)&v59 + 1);
  v18 = (unint64_t *)(v2 + v8[6]);
  v20 = *v18;
  v19 = v18[1];
  if (*((_QWORD *)&v59 + 1))
  {
    if (!v19)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
LABEL_20:
      swift_bridgeObjectRetain(v19);
      CKRecordKeyValueSetting.subscript.setter(&v59, 0x6D614E6E65766967, 0xE900000000000065, ObjectType);
      goto LABEL_21;
    }
    if (v59 == __PAIR128__(v19, v20))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      goto LABEL_21;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, *((_QWORD *)&v59 + 1), *v18, v18[1], 0);
    swift_bridgeObjectRelease(v17);
    if ((v21 & 1) == 0)
    {
LABEL_19:
      *((_QWORD *)&v60 + 1) = &type metadata for String;
      v61 = &protocol witness table for String;
      *(_QWORD *)&v59 = v20;
      *((_QWORD *)&v59 + 1) = v19;
      goto LABEL_20;
    }
  }
  else if (v19)
  {
    goto LABEL_19;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x614E656C6464696DLL, 0xEA0000000000656DLL);
  v22 = *((_QWORD *)&v59 + 1);
  v23 = (unint64_t *)(v2 + v8[7]);
  v25 = *v23;
  v24 = v23[1];
  if (*((_QWORD *)&v59 + 1))
  {
    if (!v24)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
LABEL_30:
      swift_bridgeObjectRetain(v24);
      CKRecordKeyValueSetting.subscript.setter(&v59, 0x614E656C6464696DLL, 0xEA0000000000656DLL, ObjectType);
      goto LABEL_31;
    }
    if (v59 == __PAIR128__(v24, v25))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      goto LABEL_31;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, *((_QWORD *)&v59 + 1), *v23, v23[1], 0);
    swift_bridgeObjectRelease(v22);
    if ((v26 & 1) == 0)
    {
LABEL_29:
      *((_QWORD *)&v60 + 1) = &type metadata for String;
      v61 = &protocol witness table for String;
      *(_QWORD *)&v59 = v25;
      *((_QWORD *)&v59 + 1) = v24;
      goto LABEL_30;
    }
  }
  else if (v24)
  {
    goto LABEL_29;
  }
LABEL_31:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x614E796C696D6166, 0xEA0000000000656DLL);
  v27 = *((_QWORD *)&v59 + 1);
  v28 = (unint64_t *)(v2 + v8[8]);
  v30 = *v28;
  v29 = v28[1];
  if (*((_QWORD *)&v59 + 1))
  {
    if (!v29)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
LABEL_40:
      swift_bridgeObjectRetain(v29);
      CKRecordKeyValueSetting.subscript.setter(&v59, 0x614E796C696D6166, 0xEA0000000000656DLL, ObjectType);
      goto LABEL_41;
    }
    if (v59 == __PAIR128__(v29, v30))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      goto LABEL_41;
    }
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, *((_QWORD *)&v59 + 1), *v28, v28[1], 0);
    swift_bridgeObjectRelease(v27);
    if ((v31 & 1) == 0)
    {
LABEL_39:
      *((_QWORD *)&v60 + 1) = &type metadata for String;
      v61 = &protocol witness table for String;
      *(_QWORD *)&v59 = v30;
      *((_QWORD *)&v59 + 1) = v29;
      goto LABEL_40;
    }
  }
  else if (v29)
  {
    goto LABEL_39;
  }
LABEL_41:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x6144696A6F6D656DLL, 0xEA00000000006174);
  v32 = v59;
  v33 = (uint64_t *)(v2 + v8[11]);
  v35 = *v33;
  v34 = v33[1];
  if (*((_QWORD *)&v59 + 1) >> 60 == 15)
  {
    if (v34 >> 60 == 15)
      goto LABEL_49;
    sub_100014534(v35, v34);
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    sub_1000144D8(v35, v34);
LABEL_47:
    *((_QWORD *)&v60 + 1) = &type metadata for Data;
    v61 = &protocol witness table for Data;
    *(_QWORD *)&v59 = v35;
    *((_QWORD *)&v59 + 1) = v34;
    goto LABEL_48;
  }
  sub_100014534(v35, v34);
  if (v34 >> 60 != 15)
  {
    sub_100014534(v32, *((unint64_t *)&v32 + 1));
    sub_10000EA4C(v32, *((uint64_t *)&v32 + 1));
    v37 = v36;
    sub_1000144D8(v35, v34);
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    if ((v37 & 1) != 0)
      goto LABEL_49;
    goto LABEL_47;
  }
  sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
  sub_1000144D8(v35, v34);
  v61 = 0;
  v59 = 0u;
  v60 = 0u;
LABEL_48:
  sub_100014534(v35, v34);
  CKRecordKeyValueSetting.subscript.setter(&v59, 0x6144696A6F6D656DLL, 0xEA00000000006174, ObjectType);
LABEL_49:
  sub_100071494();
  v38 = v58;
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x6567616D69, 0xE500000000000000);
  v39 = (void *)v59;
  v40 = *(id *)(v2 + v8[12]);
  if ((_QWORD)v59)
  {
    if (v40)
    {
      v40 = v40;
      v41 = v39;
      v42 = static NSObject.== infix(_:_:)(v41, v40);

      if ((v42 & 1) != 0)
        goto LABEL_57;
    }
    else
    {

    }
LABEL_56:
    v43 = v40;
    v44 = String._bridgeToObjectiveC()();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v43, v44);

    goto LABEL_57;
  }
  if (v40)
    goto LABEL_56;
LABEL_57:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x7568546567616D69, 0xEA0000000000626DLL);
  v45 = (void *)v59;
  v46 = *(id *)(v2 + v8[13]);
  if ((_QWORD)v59)
  {
    if (v46)
    {
      v46 = v46;
      v47 = v45;
      v48 = static NSObject.== infix(_:_:)(v47, v46);

      v38 = v58;
      if ((v48 & 1) != 0)
        goto LABEL_65;
    }
    else
    {

    }
LABEL_64:
    v49 = v46;
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v38, "setObject:forKeyedSubscript:", v49, v50);

    goto LABEL_65;
  }
  if (v46)
    goto LABEL_64;
LABEL_65:
  CKRecordKeyValueSetting.subscript.getter(&v59, 0x6F72436567616D69, 0xED00007463655270);
  v51 = *((_QWORD *)&v59 + 1);
  v52 = (unint64_t *)(v2 + v8[14]);
  v54 = *v52;
  v53 = v52[1];
  if (*((_QWORD *)&v59 + 1))
  {
    if (!v53)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v59 + 1));
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
      goto LABEL_72;
    }
    if (v59 == __PAIR128__(v53, v54))
    {
      swift_unknownObjectRelease(v4);
      swift_unknownObjectRelease(v38);
      return swift_bridgeObjectRelease(v51);
    }
    v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v59, *((_QWORD *)&v59 + 1), *v52, v52[1], 0);
    swift_bridgeObjectRelease(v51);
    if ((v57 & 1) != 0)
      goto LABEL_74;
  }
  else if (!v53)
  {
LABEL_74:
    swift_unknownObjectRelease(v4);
    v56 = v38;
    return swift_unknownObjectRelease(v56);
  }
  *((_QWORD *)&v60 + 1) = &type metadata for String;
  v61 = &protocol witness table for String;
  *(_QWORD *)&v59 = v54;
  *((_QWORD *)&v59 + 1) = v53;
LABEL_72:
  swift_bridgeObjectRetain(v53);
  CKRecordKeyValueSetting.subscript.setter(&v59, 0x6F72436567616D69, 0xED00007463655270, ObjectType);
  swift_unknownObjectRelease(v38);
  v56 = v4;
  return swift_unknownObjectRelease(v56);
}

uint64_t sub_1000709FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, _QWORD *);
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  void (*v53)(char *, _QWORD *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  _OWORD v71[2];
  char v72;

  v55 = a2;
  v3 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (void (**)(char *, _QWORD *))((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  v57 = (void (**)(char *, _QWORD *))((char *)&v53 - v9);
  v58 = sub_1000080B4(&qword_10028DC08);
  v10 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for IdentityRecord(0);
  v16 = (int *)__chkstk_darwin(v14, v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v18[v16[6]];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v70 = (uint64_t *)v19;
  v20 = &v18[v16[7]];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v69 = (uint64_t *)v20;
  v21 = &v18[v16[8]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v68 = (uint64_t *)v21;
  v22 = &v18[v16[9]];
  *(_OWORD *)v22 = xmmword_10021A7E0;
  v66 = &v18[v16[10]];
  v67 = v22;
  *(_OWORD *)v66 = xmmword_10021A7E0;
  v65 = &v18[v16[11]];
  *(_OWORD *)v65 = xmmword_10021A7E0;
  v60 = v16[12];
  *(_QWORD *)&v18[v60] = 0;
  v61 = v16[13];
  v62 = a1;
  *(_QWORD *)&v18[v61] = 0;
  v23 = &v18[v16[14]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v64 = v23;
  v25 = a1[3];
  v24 = a1[4];
  sub_10000732C(a1, v25);
  v26 = sub_100071450();
  v59 = v13;
  v27 = v63;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityRecord.CodingKeys, &type metadata for IdentityRecord.CodingKeys, v26, v25, v24);
  if (v27)
  {
    v31 = v64;
    sub_100006F58(v62);
    v33 = v60;
    v32 = v61;
    swift_bridgeObjectRelease(v70[1]);
    swift_bridgeObjectRelease(v69[1]);
    swift_bridgeObjectRelease(v68[1]);
    sub_1000144D8(*(_QWORD *)v67, *((_QWORD *)v67 + 1));
    sub_1000144D8(*(_QWORD *)v66, *((_QWORD *)v66 + 1));
    sub_1000144D8(*(_QWORD *)v65, *((_QWORD *)v65 + 1));

    return swift_bridgeObjectRelease(*((_QWORD *)v31 + 1));
  }
  else
  {
    v63 = v7;
    v28 = v10;
    LOBYTE(v71[0]) = 1;
    v29 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = v58;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v57, v3, v71, v58, v3, v29);
    v34 = (_QWORD *)v3;
    v35 = &v18[v14[5]];
    v36 = v57;
    v37 = *(void (**)(char *, _QWORD *))(v56 + 32);
    v57 = v34;
    v37(v35, v36);
    LOBYTE(v71[0]) = 2;
    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v71, v30);
    v39 = v64;
    v53 = v37;
    v54 = v29;
    v40 = v70;
    *v70 = v38;
    v40[1] = v41;
    LOBYTE(v71[0]) = 3;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v71, v58);
    v43 = v69;
    *v69 = v42;
    v43[1] = v44;
    LOBYTE(v71[0]) = 4;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v71, v58);
    v46 = v68;
    *v68 = v45;
    v46[1] = v47;
    v72 = 5;
    v48 = sub_10000F40C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v72, v58, &type metadata for Data, v48);
    *(_OWORD *)v67 = v71[0];
    v72 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v72, v58, &type metadata for Data, v48);
    *(_OWORD *)v66 = v71[0];
    LOBYTE(v71[0]) = 7;
    *(_QWORD *)v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v71, v58);
    *((_QWORD *)v39 + 1) = v49;
    v72 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v72, v58, &type metadata for Data, v48);
    *(_OWORD *)v65 = v71[0];
    LOBYTE(v71[0]) = 0;
    v50 = v63;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v57, v71, v58, v57, v54);
    v53(v18, v50);
    v72 = 9;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v71, &type metadata for Data, &v72, v58, &type metadata for Data, v48);
    *(_OWORD *)&v18[v14[15]] = v71[0];
    LOBYTE(v71[0]) = 10;
    v51 = KeyedDecodingContainer.decode(_:forKey:)(v71, v58);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v59, v58);
    v18[v14[16]] = v51 & 1;
    sub_10006CCF4((uint64_t)v18, v55);
    sub_100006F58(v62);
    return sub_10006CD40((uint64_t)v18);
  }
}

uint64_t sub_100070FF4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  char v34;

  v3 = v1;
  v5 = sub_1000080B4(&qword_10028DC18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_100071450();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityRecord.CodingKeys, &type metadata for IdentityRecord.CodingKeys, v12, v10, v11);
  v13 = (int *)type metadata accessor for IdentityRecord(0);
  v14 = v3 + v13[5];
  LOBYTE(v33) = 1;
  v15 = type metadata accessor for UUID(0);
  v16 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v33, v5, v15, v16);
  if (!v2)
  {
    v17 = (uint64_t *)(v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v33, v5);
    v20 = (uint64_t *)(v3 + v13[7]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v33) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v33, v5);
    v23 = (uint64_t *)(v3 + v13[8]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v33, v5);
    v33 = *(_OWORD *)(v3 + v13[9]);
    v34 = 5;
    v32 = sub_10000F4D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for Data, v32);
    v33 = *(_OWORD *)(v3 + v13[10]);
    v34 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for Data, v32);
    v26 = (uint64_t *)(v3 + v13[14]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v33) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v33, v5);
    v33 = *(_OWORD *)(v3 + v13[11]);
    v34 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for Data, v32);
    LOBYTE(v33) = 0;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v33, v5, v15, v16);
    v33 = *(_OWORD *)(v3 + v13[15]);
    v34 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v34, v5, &type metadata for Data, v32);
    v29 = *(unsigned __int8 *)(v3 + v13[16]);
    LOBYTE(v33) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v29, &v33, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100071354@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000709FC(a1, a2);
}

uint64_t sub_100071368(_QWORD *a1)
{
  return sub_100070FF4(a1);
}

uint64_t sub_10007137C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_10028DBF0, type metadata accessor for IdentityRecord, (uint64_t)&unk_10021A830);
  result = sub_100005150(&qword_10028D620, type metadata accessor for IdentityRecord, (uint64_t)&unk_10021A808);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for IdentityRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10028DCA0;
  if (!qword_10028DCA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityRecord);
  return result;
}

uint64_t sub_100071414(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_10028DC00, type metadata accessor for IdentityRecord, (uint64_t)&unk_10021A858);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100071450()
{
  unint64_t result;

  result = qword_10028DC10;
  if (!qword_10028DC10)
  {
    result = swift_getWitnessTable(&unk_10021A9E8, &type metadata for IdentityRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DC10);
  }
  return result;
}

unint64_t sub_100071494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028DC40;
  if (!qword_10028DC40)
  {
    v1 = objc_opt_self(CKAsset);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028DC40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for IdentityRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10007151C + 4 * byte_10021A800[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100071550 + 4 * byte_10021A7FB[v4]))();
}

uint64_t sub_100071550(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100071558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100071560);
  return result;
}

uint64_t sub_10007156C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100071574);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100071578(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100071580(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityRecord.CodingKeys()
{
  return &type metadata for IdentityRecord.CodingKeys;
}

_QWORD *sub_10007159C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  id v50;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[8];
    v18 = a3[9];
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (char *)a1 + v18;
    v23 = (_QWORD *)((char *)a2 + v18);
    v24 = *(_QWORD *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v21);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v26 = *v23;
      sub_10000F450(*v23, v24);
      *(_QWORD *)v22 = v26;
      *((_QWORD *)v22 + 1) = v24;
    }
    v27 = a3[10];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = *((_QWORD *)v29 + 1);
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    else
    {
      v31 = *(_QWORD *)v29;
      sub_10000F450(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
    }
    v32 = a3[11];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = *((_QWORD *)v34 + 1);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v36 = *(_QWORD *)v34;
      sub_10000F450(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
    }
    v37 = a3[12];
    v38 = a3[13];
    v39 = *(void **)((char *)a2 + v37);
    *(_QWORD *)((char *)a1 + v37) = v39;
    v40 = *(void **)((char *)a2 + v38);
    *(_QWORD *)((char *)a1 + v38) = v40;
    v41 = a3[14];
    v42 = a3[15];
    v43 = (_QWORD *)((char *)a1 + v41);
    v44 = (_QWORD *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    v46 = (_QWORD *)((char *)a1 + v42);
    v47 = *(_QWORD *)((char *)a2 + v42);
    v48 = *(_QWORD *)((char *)a2 + v42 + 8);
    v49 = v39;
    v50 = v40;
    swift_bridgeObjectRetain(v45);
    sub_10000F450(v47, v48);
    *v46 = v47;
    v46[1] = v48;
    *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  }
  return a1;
}

uint64_t sub_10007179C(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v6 = (uint64_t *)(a1 + a2[9]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_10000F494(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[10]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_10000F494(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[11]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  return sub_10000F494(*(_QWORD *)(a1 + a2[15]), *(_QWORD *)(a1 + a2[15] + 8));
}

uint64_t sub_1000718B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  id v48;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a1 + v17;
  v22 = (uint64_t *)(a2 + v17);
  v23 = *(_QWORD *)(a2 + v17 + 8);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    sub_10000F450(*v22, v23);
    *(_QWORD *)v21 = v24;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v25 = a3[10];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    sub_10000F450(*v27, v27[1]);
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = v28;
  }
  v30 = a3[11];
  v31 = a1 + v30;
  v32 = (uint64_t *)(a2 + v30);
  v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_10000F450(*v32, v32[1]);
    *(_QWORD *)v31 = v34;
    *(_QWORD *)(v31 + 8) = v33;
  }
  v35 = a3[12];
  v36 = a3[13];
  v37 = *(void **)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v37;
  v38 = *(void **)(a2 + v36);
  *(_QWORD *)(a1 + v36) = v38;
  v39 = a3[14];
  v40 = a3[15];
  v41 = (_QWORD *)(a1 + v39);
  v42 = (_QWORD *)(a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = (uint64_t *)(a1 + v40);
  v45 = *(_QWORD *)(a2 + v40);
  v46 = *(_QWORD *)(a2 + v40 + 8);
  v47 = v37;
  v48 = v38;
  swift_bridgeObjectRetain(v43);
  sub_10000F450(v45, v46);
  *v44 = v45;
  v44[1] = v46;
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100071A8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      sub_10000F450(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v26 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v24);
LABEL_6:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_8;
  }
  v28 = *v25;
  sub_10000F450(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  sub_10000F494(v29, v30);
LABEL_8:
  v31 = a3[10];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_10000F450(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v34 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v32);
LABEL_13:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_15;
  }
  v36 = *v33;
  sub_10000F450(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_10000F494(v37, v38);
LABEL_15:
  v39 = a3[11];
  v40 = (uint64_t *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v42 = *(_QWORD *)(a2 + v39 + 8);
  if (*(_QWORD *)(a1 + v39 + 8) >> 60 != 15)
  {
    if (v42 >> 60 != 15)
    {
      v44 = *v41;
      sub_10000F450(v44, v42);
      v45 = *v40;
      v46 = v40[1];
      *v40 = v44;
      v40[1] = v42;
      sub_10000F494(v45, v46);
      goto LABEL_22;
    }
    sub_100071D90((uint64_t)v40);
    goto LABEL_20;
  }
  if (v42 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_22;
  }
  v43 = *v41;
  sub_10000F450(v43, v42);
  *v40 = v43;
  v40[1] = v42;
LABEL_22:
  v47 = a3[12];
  v48 = *(void **)(a1 + v47);
  v49 = *(void **)(a2 + v47);
  *(_QWORD *)(a1 + v47) = v49;
  v50 = v49;

  v51 = a3[13];
  v52 = *(void **)(a1 + v51);
  v53 = *(void **)(a2 + v51);
  *(_QWORD *)(a1 + v51) = v53;
  v54 = v53;

  v55 = a3[14];
  v56 = (_QWORD *)(a1 + v55);
  v57 = (_QWORD *)(a2 + v55);
  *v56 = *v57;
  v58 = v57[1];
  v59 = v56[1];
  v56[1] = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease(v59);
  v60 = a3[15];
  v61 = (uint64_t *)(a1 + v60);
  v62 = (uint64_t *)(a2 + v60);
  v63 = *v62;
  v64 = v62[1];
  sub_10000F450(*v62, v64);
  v65 = *v61;
  v66 = v61[1];
  *v61 = v63;
  v61[1] = v64;
  sub_10000F494(v65, v66);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100071D90(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t sub_100071DC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  v11 = a3[13];
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100071EA4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = *(_QWORD *)(a1 + v26 + 8);
  if (v29 >> 60 == 15)
    goto LABEL_4;
  v30 = *(_QWORD *)(v28 + 8);
  if (v30 >> 60 == 15)
  {
    sub_100071D90(v27);
LABEL_4:
    *(_OWORD *)v27 = *(_OWORD *)v28;
    goto LABEL_6;
  }
  v31 = *(_QWORD *)v27;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_QWORD *)(v27 + 8) = v30;
  sub_10000F494(v31, v29);
LABEL_6:
  v32 = a3[10];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v35 = *(_QWORD *)(a1 + v32 + 8);
  if (v35 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v33 = *(_OWORD *)v34;
    goto LABEL_11;
  }
  v36 = *(_QWORD *)(v34 + 8);
  if (v36 >> 60 == 15)
  {
    sub_100071D90(v33);
    goto LABEL_9;
  }
  v37 = *(_QWORD *)v33;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_QWORD *)(v33 + 8) = v36;
  sub_10000F494(v37, v35);
LABEL_11:
  v38 = a3[11];
  v39 = (uint64_t *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = *(_QWORD *)(a1 + v38 + 8);
  if (v41 >> 60 != 15)
  {
    v42 = v40[1];
    if (v42 >> 60 != 15)
    {
      v43 = *v39;
      *v39 = *v40;
      v39[1] = v42;
      sub_10000F494(v43, v41);
      goto LABEL_16;
    }
    sub_100071D90((uint64_t)v39);
  }
  *(_OWORD *)v39 = *(_OWORD *)v40;
LABEL_16:
  v44 = a3[12];
  v45 = *(void **)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);

  v46 = a3[13];
  v47 = *(void **)(a1 + v46);
  *(_QWORD *)(a1 + v46) = *(_QWORD *)(a2 + v46);

  v48 = a3[14];
  v49 = (_QWORD *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v52 = *v50;
  v51 = v50[1];
  v53 = v49[1];
  *v49 = v52;
  v49[1] = v51;
  swift_bridgeObjectRelease(v53);
  v54 = a3[15];
  v55 = *(_QWORD *)(a1 + v54);
  v56 = *(_QWORD *)(a1 + v54 + 8);
  *(_OWORD *)(a1 + v54) = *(_OWORD *)(a2 + v54);
  sub_10000F494(v55, v56);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_1000720C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000720CC);
}

uint64_t sub_1000720CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100072158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072164);
}

uint64_t sub_100072164(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_1000721E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[4] = &unk_10021A8B8;
    v4[5] = &unk_10021A8D0;
    v4[6] = &unk_10021A8D0;
    v4[7] = &unk_10021A8D0;
    v4[8] = &unk_10021A8E8;
    v4[9] = &unk_10021A8E8;
    v4[2] = &unk_10021A8B8;
    v4[3] = &unk_10021A8B8;
    v4[10] = &unk_10021A8B8;
    v4[11] = &unk_10021A900;
    v4[12] = &unk_10021A918;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10007228C()
{
  unint64_t result;

  result = qword_10028DD08;
  if (!qword_10028DD08)
  {
    result = swift_getWitnessTable(&unk_10021A9C0, &type metadata for IdentityRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DD08);
  }
  return result;
}

unint64_t sub_1000722D4()
{
  unint64_t result;

  result = qword_10028DD10;
  if (!qword_10028DD10)
  {
    result = swift_getWitnessTable(&unk_10021A930, &type metadata for IdentityRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DD10);
  }
  return result;
}

unint64_t sub_10007231C()
{
  unint64_t result;

  result = qword_10028DD18;
  if (!qword_10028DD18)
  {
    result = swift_getWitnessTable(&unk_10021A958, &type metadata for IdentityRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028DD18);
  }
  return result;
}

uint64_t sub_100072360(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x797469746E656469 && a2 == 0xEA00000000004449)
  {
    v7 = 0xEA00000000004449;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D614E6E65766967 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6E65766967, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x614E656C6464696DLL && a2 == 0xEA0000000000656DLL)
  {
    v9 = 0xEA0000000000656DLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E656C6464696DLL, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x614E796C696D6166 && a2 == 0xEA0000000000656DLL)
  {
    v10 = 0xEA0000000000656DLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E796C696D6166, 0xEA0000000000656DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x797469746E656469 && a2 == 0xED00006567616D49)
  {
    v11 = 0xED00006567616D49;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xED00006567616D49, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0xD000000000000012)
  {
    v12 = 0x800000010020A7E0;
    if (a2 == 0x800000010020A7E0)
      goto LABEL_43;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020A7E0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x6F72436567616D69 && a2 == 0xED00007463655270)
  {
    v13 = 0xED00007463655270;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F72436567616D69, 0xED00007463655270, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6144696A6F6D656DLL && a2 == 0xEA00000000006174)
  {
    v14 = 0xEA00000000006174;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144696A6F6D656DLL, 0xEA00000000006174, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000010)
  {
    v15 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

void sub_10007281C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  id v26;
  void *v27;
  Class v28;
  char v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Class v38;
  char v39;
  uint64_t v40;
  Class v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  Class v49;
  char v50;
  uint64_t v51;
  Class v52;
  char v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  Class v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Class v63;
  char v64;
  uint64_t v65;
  Class v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  id v85;
  _QWORD v86[3];
  uint64_t v87;

  v84 = a1;
  v1 = sub_1000080B4(qword_10028DF38);
  v79 = *(_QWORD *)(v1 - 8);
  v80 = v1;
  __chkstk_darwin(v1, v2);
  v78 = (char *)&v74 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000080B4(&qword_10028FA50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v14 = type metadata accessor for Logger(0);
  v81 = sub_100005288(v14, (uint64_t)qword_1002A8A08);
  v15 = Logger.logObject.getter(v81);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Generating common fields for analytics...", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = sub_100016138((uint64_t)_swiftEmptyArrayStorage);
  v19 = v84 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController;
  v83 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v83(v13, v84 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController, v9);
  Dependency.wrappedValue.getter(v86, v9);
  v82 = *(void (**)(char *, uint64_t))(v10 + 8);
  v82(v13, v9);
  v20 = *(void **)(*sub_10000732C(v86, v87) + 16);
  v85 = 0;
  objc_msgSend(v20, "walrusStatus:", &v85);
  if (v85)
  {
    v21 = v85;
    swift_willThrow(v21);

  }
  sub_100006F58(v86);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  v86[0] = v18;
  sub_10001FB10((uint64_t)isa, 0xD000000000000014, 0x800000010020A880, isUniquelyReferenced_nonNull_native);
  v24 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v76 = v84 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__accountStore;
  v77 = v25;
  ((void (*)(char *))v25)(v8);
  Dependency.wrappedValue.getter(v86, v4);
  v75 = *(void (**)(char *, uint64_t))(v5 + 8);
  v75(v8, v4);
  v26 = objc_msgSend(*(id *)(*sub_10000732C(v86, v87) + 16), "aa_primaryAppleAccount");
  if (v26)
  {
    v27 = v26;
    objc_msgSend(v26, "aa_isSuspended");

  }
  sub_100006F58(v86);
  v28 = Bool._bridgeToObjectiveC()().super.super.isa;
  v29 = swift_isUniquelyReferenced_nonNull_native(v24);
  v86[0] = v24;
  sub_10001FB10((uint64_t)v28, 0xD000000000000013, 0x800000010020A8A0, v29);
  v30 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v83(v13, v19, v9);
  Dependency.wrappedValue.getter(v86, v9);
  v82(v13, v9);
  v31 = *(void **)(*sub_10000732C(v86, v87) + 24);
  v85 = 0;
  v32 = objc_msgSend(v31, "isManateeAvailable:", &v85);
  v33 = v85;
  if (v32)
  {
    v34 = v85;
  }
  else
  {
    v35 = v85;
    v36 = _convertNSErrorToError(_:)(v33);

    swift_willThrow(v37);
    swift_errorRelease(v36);
  }
  sub_100006F58(v86);
  v38 = Bool._bridgeToObjectiveC()().super.super.isa;
  v39 = swift_isUniquelyReferenced_nonNull_native(v30);
  v86[0] = v30;
  sub_10001FB10((uint64_t)v38, 0xD000000000000012, 0x800000010020A8C0, v39);
  v40 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v83(v13, v19, v9);
  Dependency.wrappedValue.getter(v86, v9);
  v82(v13, v9);
  sub_100048588();
  sub_100006F58(v86);
  v41 = Bool._bridgeToObjectiveC()().super.super.isa;
  v42 = swift_isUniquelyReferenced_nonNull_native(v40);
  v86[0] = v40;
  sub_10001FB10((uint64_t)v41, 0x616E455044437369, 0xEC00000064656C62, v42);
  v43 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v44 = v84;
  v45 = v78;
  v46 = v79;
  v47 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, v84 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__deviceState, v80);
  Dependency.wrappedValue.getter(v86, v47);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
  v48 = objc_msgSend(objc_allocWithZone((Class)AKDevice), "init");
  objc_msgSend(v48, "isProtectedWithPasscode");

  sub_100006F58(v86);
  v49 = Bool._bridgeToObjectiveC()().super.super.isa;
  v50 = swift_isUniquelyReferenced_nonNull_native(v43);
  v86[0] = v43;
  sub_10001FB10((uint64_t)v49, 0xD000000000000011, 0x800000010020A8E0, v50);
  v51 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v77(v8, v76, v4);
  Dependency.wrappedValue.getter(v86, v4);
  v75(v8, v4);
  sub_10000732C(v86, v87);
  sub_1000467E0();
  sub_100006F58(v86);
  v52 = Int._bridgeToObjectiveC()().super.super.isa;
  v53 = swift_isUniquelyReferenced_nonNull_native(v51);
  v86[0] = v51;
  sub_10001FB10((uint64_t)v52, 0x7974697275636573, 0xED00006C6576656CLL, v53);
  v54 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v55 = (_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController);
  v56 = *(_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController + 24);
  v57 = *(_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController + 32);
  sub_10000732C((_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController), v56);
  (*(void (**)(uint64_t, uint64_t))(v57 + 32))(v56, v57);
  v58 = Bool._bridgeToObjectiveC()().super.super.isa;
  v59 = swift_isUniquelyReferenced_nonNull_native(v54);
  v86[0] = v54;
  sub_10001FB10((uint64_t)v58, 0xD000000000000019, 0x800000010020A900, v59);
  v60 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v61 = v55[3];
  v62 = v55[4];
  sub_10000732C(v55, v61);
  (*(void (**)(uint64_t, uint64_t))(v62 + 40))(v61, v62);
  v63 = Bool._bridgeToObjectiveC()().super.super.isa;
  v64 = swift_isUniquelyReferenced_nonNull_native(v60);
  v86[0] = v60;
  sub_10001FB10((uint64_t)v63, 0xD000000000000014, 0x800000010020A920, v64);
  v65 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v66 = Double._bridgeToObjectiveC()().super.super.isa;
  v67 = swift_isUniquelyReferenced_nonNull_native(v65);
  v86[0] = v65;
  sub_10001FB10((uint64_t)v66, 0xD000000000000013, 0x800000010020A940, v67);
  v68 = v86[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  v69 = *(_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields);
  *(_QWORD *)(v44 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields) = v68;
  v70 = swift_bridgeObjectRelease(v69);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Generated common fields for analytics!", v73, 2u);
    swift_slowDealloc(v73, -1, -1);
  }

}

uint64_t sub_100073090@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields);
  *a2 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000730B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController;
  v2 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__deviceState;
  v4 = sub_1000080B4(qword_10028DF38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__accountStore;
  v6 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100073190()
{
  return type metadata accessor for DaemonAnalyticsAccountModel(0);
}

uint64_t type metadata accessor for DaemonAnalyticsAccountModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10028DD78;
  if (!qword_10028DD78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonAnalyticsAccountModel);
  return result;
}

void sub_1000731D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028DD88, (uint64_t *)&unk_10028DD90);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        v8[3] = "(";
        v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v8[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000732CC(uint64_t a1)
{
  _QWORD v2[3];

  v2[1] = &unk_10021AB60;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 104);
}

uint64_t sub_100073324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 40);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_100075348;
  return v12(a1, a2, a3, a4);
}

uint64_t sub_1000733AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4[6] = a3;
  v4[7] = v3;
  v4[5] = a2;
  v7 = *v3;
  v4[8] = *v3;
  v8 = *(_QWORD *)(v7 + 88);
  v4[9] = v8;
  v9 = sub_10000D908(&qword_10028E028);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v8, v9, "inner expiration ", 0);
  v4[10] = TupleTypeMetadata2;
  v11 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v4[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v7 + 80);
  v4[12] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[13] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v4[14] = v14;
  v4[15] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4((uint64_t *)&unk_100294B20);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_task_alloc(dword_10028DFCC);
  v4[17] = v16;
  *v16 = v4;
  v16[1] = sub_1000734C8;
  return sub_100074958(a1, a3);
}

uint64_t sub_1000734C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_100073520, v1, 0);
}

uint64_t sub_100073520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v27 = v1;
  v3 = *(_QWORD *)(v0 + 104);
  v21 = v2;
  v22 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 48);
  v24 = v9;
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 40);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v1, 1, 1, v10);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v23(v2, v9, v4);
  v11 = *(_QWORD *)(v7 + 96);
  v12 = type metadata accessor for ExpiringValueCache(255, v4, v6, v11);
  WitnessTable = swift_getWitnessTable(&unk_10021AC30, v12);
  v14 = *(unsigned __int8 *)(v3 + 80);
  v15 = (v14 + 64) & ~v14;
  v16 = (char *)swift_allocObject(&unk_100262D88, v15 + v22, v14 | 7);
  *((_QWORD *)v16 + 2) = v8;
  *((_QWORD *)v16 + 3) = WitnessTable;
  *((_QWORD *)v16 + 4) = v4;
  *((_QWORD *)v16 + 5) = v6;
  *((_QWORD *)v16 + 6) = v11;
  *((_QWORD *)v16 + 7) = v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(&v16[v15], v21, v4);
  swift_retain_n(v8, 2);
  v17 = sub_10007482C(v27, (uint64_t)&unk_10028E038, (uint64_t)v16);
  v23(v21, v24, v4);
  v18 = *(int *)(v5 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v25, v26, v6);
  *(_QWORD *)(v25 + v18) = v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v25, 0, 1, v5);
  swift_beginAccess(v8 + 128, v0 + 16, 33, 0);
  v19 = type metadata accessor for Dictionary(0, v4, v5, v11);
  swift_retain(v17);
  Dictionary.subscript.setter(v25, v21, v19);
  swift_endAccess(v0 + 16);
  swift_release(v17);
  swift_task_dealloc(v27);
  swift_task_dealloc(v21);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100073738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5[8] = a4;
  v5[9] = a5;
  v7 = *a4;
  v5[10] = *a4;
  v8 = *(_QWORD *)(v7 + 80);
  v5[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[12] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[13] = swift_task_alloc(v10);
  v5[14] = swift_task_alloc(v10);
  v5[15] = swift_task_alloc(v10);
  v11 = type metadata accessor for CancellationError(0);
  v5[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[17] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[18] = swift_task_alloc(v13);
  v5[19] = swift_task_alloc(v13);
  v14 = *(_QWORD *)(v7 + 88);
  v5[20] = v14;
  v15 = type metadata accessor for Optional(0, v14);
  v5[21] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[22] = v16;
  v5[23] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ContinuousClock(0);
  v5[24] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v5[25] = v18;
  v5[26] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100073854, a4, 0);
}

uint64_t sub_100073854()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10028E040 + dword_10028E040);
  v1 = (_QWORD *)swift_task_alloc(unk_10028E044);
  *(_QWORD *)(v0 + 216) = v1;
  *v1 = v0;
  v1[1] = sub_1000738D4;
  return v3(0x86AC351052600000, 32, 0, 0, 1);
}

uint64_t sub_1000738D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v5 = v2[25];
  v4 = v2[26];
  v6 = v2[24];
  v7 = v2[8];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_100073FEC;
  else
    v8 = sub_10007394C;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10007394C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78[2];

  v1 = *(_QWORD *)(v0 + 224);
  static Task<>.checkCancellation()();
  if (!v1)
  {
    v27 = *(_QWORD *)(v0 + 160);
    v29 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v0 + 64);
    v30 = (_QWORD *)swift_task_alloc(dword_10028E04C);
    *(_QWORD *)(v0 + 232) = v30;
    v31 = type metadata accessor for ExpiringValueCache(0, v28, v27, *(_QWORD *)(v29 + 96));
    WitnessTable = swift_getWitnessTable(&unk_10021ABF8, v31);
    v33 = WitnessTable;
    v34 = sub_100074624;
LABEL_16:
    *v30 = v0;
    v30[1] = v34;
    v69 = *(_QWORD *)(v0 + 184);
    v70 = *(_QWORD *)(v0 + 72);
    v71 = *(int **)(WitnessTable + 40);
    v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v71 + *v71);
    v72 = (_QWORD *)swift_task_alloc(v71[1]);
    v30[2] = v72;
    *v72 = v30;
    v72[1] = sub_100075348;
    return v77(v69, v70, v31, v33);
  }
  *(_QWORD *)(v0 + 240) = v1;
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 16) = v1;
  swift_errorRetain(v1);
  v4 = sub_1000080B4(&qword_10028E850);
  if (!swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v36 = *(_QWORD *)(v0 + 96);
    v35 = *(_QWORD *)(v0 + 104);
    v37 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 72);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A8990);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
    v40(v35, v38, v37);
    swift_errorRetain(v1);
    v41 = swift_errorRetain(v1);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v45 = *(_QWORD *)(v0 + 104);
      v44 = *(_QWORD *)(v0 + 112);
      v46 = *(_QWORD *)(v0 + 88);
      v73 = *(_QWORD *)(v0 + 96);
      v47 = swift_slowAlloc(22, -1);
      v74 = (uint64_t *)swift_slowAlloc(8, -1);
      v76 = swift_slowAlloc(32, -1);
      v78[0] = v76;
      *(_DWORD *)v47 = 136315394;
      v40(v44, v45, v46);
      v48 = String.init<A>(describing:)(v44, v46);
      v50 = v49;
      *(_QWORD *)(v0 + 32) = sub_1001DEF4C(v48, v49, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
      swift_bridgeObjectRelease(v50);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v45, v46);
      *(_WORD *)(v47 + 12) = 2112;
      swift_errorRetain(v1);
      v51 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 40) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
      *v74 = v51;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Expiration task failed for key (%s with error: %@)", (uint8_t *)v47, 0x16u);
      v52 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v74, 1, v52);
      swift_slowDealloc(v74, -1, -1);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v66 = *(_QWORD *)(v0 + 160);
    v68 = *(_QWORD *)(v0 + 80);
    v67 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 64);
    v30 = (_QWORD *)swift_task_alloc(dword_10028E04C);
    *(_QWORD *)(v0 + 248) = v30;
    v31 = type metadata accessor for ExpiringValueCache(0, v67, v66, *(_QWORD *)(v68 + 96));
    WitnessTable = swift_getWitnessTable(&unk_10021ABF8, v31);
    v33 = WitnessTable;
    v34 = sub_100074720;
    goto LABEL_16;
  }
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v6, v7);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 72);
  v13 = type metadata accessor for Logger(0);
  sub_100005288(v13, (uint64_t)qword_1002A8990);
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v15 = v14(v9, v12, v10);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_QWORD *)(v0 + 120);
  if (v18)
  {
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 88);
    v75 = *(_QWORD *)(v0 + 96);
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v78[0] = v23;
    *(_DWORD *)v22 = 136315138;
    v14(v20, v19, v21);
    v24 = String.init<A>(describing:)(v20, v21);
    v26 = v25;
    *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v24, v25, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Expiration cancelled, skipping value removal for key: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
  }

  v54 = *(_QWORD *)(v0 + 136);
  v53 = *(_QWORD *)(v0 + 144);
  v55 = *(_QWORD *)(v0 + 128);
  v56 = sub_100005150(&qword_10028E050, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
  swift_allocError(v55, v56, 0, 0);
  v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v57, v53, v55);
  swift_willThrow(v58);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  v59 = *(_QWORD *)(v0 + 184);
  v61 = *(_QWORD *)(v0 + 144);
  v60 = *(_QWORD *)(v0 + 152);
  v63 = *(_QWORD *)(v0 + 112);
  v62 = *(_QWORD *)(v0 + 120);
  v64 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100073FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t WitnessTable;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73[2];

  v1 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 240) = v1;
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 128);
  swift_errorRetain(v1);
  v4 = sub_1000080B4(&qword_10028E850);
  if (swift_dynamicCast(v2, v0 + 16, v4, v3, 0))
  {
    v5 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 136);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5, v6, v7);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A8990);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v15 = v14(v9, v12, v10);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 120);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 112);
      v21 = *(_QWORD *)(v0 + 88);
      v70 = *(_QWORD *)(v0 + 96);
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v73[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v14(v20, v19, v21);
      v24 = String.init<A>(describing:)(v20, v21);
      v26 = v25;
      *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v24, v25, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Expiration cancelled, skipping value removal for key: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88));
    }

    v46 = *(_QWORD *)(v0 + 136);
    v45 = *(_QWORD *)(v0 + 144);
    v47 = *(_QWORD *)(v0 + 128);
    v48 = sub_100005150(&qword_10028E050, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v47, v48, 0, 0);
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v49, v45, v47);
    swift_willThrow(v50);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    v51 = *(_QWORD *)(v0 + 184);
    v53 = *(_QWORD *)(v0 + 144);
    v52 = *(_QWORD *)(v0 + 152);
    v55 = *(_QWORD *)(v0 + 112);
    v54 = *(_QWORD *)(v0 + 120);
    v56 = *(_QWORD *)(v0 + 104);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 16));
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v28 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 88);
    v30 = *(_QWORD *)(v0 + 72);
    v31 = type metadata accessor for Logger(0);
    sub_100005288(v31, (uint64_t)qword_1002A8990);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
    v32(v27, v30, v29);
    swift_errorRetain(v1);
    v33 = swift_errorRetain(v1);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v37 = *(_QWORD *)(v0 + 104);
      v36 = *(_QWORD *)(v0 + 112);
      v38 = *(_QWORD *)(v0 + 88);
      v68 = *(_QWORD *)(v0 + 96);
      v39 = swift_slowAlloc(22, -1);
      v69 = (uint64_t *)swift_slowAlloc(8, -1);
      v71 = swift_slowAlloc(32, -1);
      v73[0] = v71;
      *(_DWORD *)v39 = 136315394;
      v32(v36, v37, v38);
      v40 = String.init<A>(describing:)(v36, v38);
      v42 = v41;
      *(_QWORD *)(v0 + 32) = sub_1001DEF4C(v40, v41, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v37, v38);
      *(_WORD *)(v39 + 12) = 2112;
      swift_errorRetain(v1);
      v43 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v0 + 40) = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
      *v69 = v43;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Expiration task failed for key (%s with error: %@)", (uint8_t *)v39, 0x16u);
      v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v69, 1, v44);
      swift_slowDealloc(v69, -1, -1);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    v58 = *(_QWORD *)(v0 + 160);
    v60 = *(_QWORD *)(v0 + 80);
    v59 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 64);
    v61 = (_QWORD *)swift_task_alloc(dword_10028E04C);
    *(_QWORD *)(v0 + 248) = v61;
    v62 = type metadata accessor for ExpiringValueCache(0, v59, v58, *(_QWORD *)(v60 + 96));
    WitnessTable = swift_getWitnessTable(&unk_10021ABF8, v62);
    *v61 = v0;
    v61[1] = sub_100074720;
    v64 = *(_QWORD *)(v0 + 184);
    v65 = *(_QWORD *)(v0 + 72);
    v66 = *(int **)(WitnessTable + 40);
    v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v66 + *v66);
    v67 = (_QWORD *)swift_task_alloc(v66[1]);
    v61[2] = v67;
    *v67 = v61;
    v67[1] = sub_100075348;
    return v72(v64, v65, v62, WitnessTable);
  }
}

uint64_t sub_100074624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10007469C, v4, 0);
}

uint64_t sub_10007469C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100074720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100074798, v4, 0);
}

uint64_t sub_100074798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_willThrow();
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007482C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100075038(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100074958(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = *v2;
  v3[11] = *v2;
  v5 = *(_QWORD *)(v4 + 80);
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 88);
  v3[15] = v7;
  v8 = sub_10000D908(&qword_10028E028);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v8, "inner expiration ", 0);
  v3[16] = TupleTypeMetadata2;
  v10 = type metadata accessor for Optional(0, TupleTypeMetadata2);
  v3[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[18] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v12);
  v3[20] = swift_task_alloc(v12);
  v3[21] = swift_task_alloc(v12);
  v3[22] = swift_task_alloc(v12);
  return swift_task_switch(sub_100074A48, v2, 0);
}

uint64_t sub_100074A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v39 = (_QWORD *)(*(_QWORD *)(v0 + 80) + 128);
  v40 = v0 + 40;
  swift_beginAccess(v39, v0 + 16, 0, 0);
  v9 = *v39;
  v10 = *(_QWORD *)(v6 + 96);
  v11 = swift_bridgeObjectRetain(*v39);
  Dictionary.subscript.getter(v8, v9, v7, v5, v10, v11);
  swift_bridgeObjectRelease(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v12 = *(_QWORD *)(v5 - 8);
  v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  v13 = v38(v2, 1, v5);
  v14 = *(_QWORD *)(v0 + 168);
  if (v13 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v14 + *(int *)(*(_QWORD *)(v0 + 128) + 48));
    sub_1000080B4(&qword_10028E850);
    Task.cancel()();
    swift_release(v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  }
  v37 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 104) + 16))(v22, *(_QWORD *)(v0 + 72), v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, 1, 1, v21);
  swift_beginAccess(v39, v40, 33, 0);
  v24 = type metadata accessor for Dictionary(0, v23, v21, v10);
  Dictionary.subscript.setter(v18, v22, v24);
  swift_endAccess(v40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v17, v37, v20);
  v25 = v38(v17, 1, v21);
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 120);
  if (v25 == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    v28 = *(_QWORD *)(v27 - 8);
    v29 = 1;
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 64);
    swift_release(*(_QWORD *)(v26 + *(int *)(*(_QWORD *)(v0 + 128) + 48)));
    v28 = *(_QWORD *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v30, v26, v27);
    v29 = 0;
  }
  v31 = *(_QWORD *)(v0 + 168);
  v32 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 152);
  v33 = *(_QWORD *)(v0 + 160);
  v35 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v28 + 56))(*(_QWORD *)(v0 + 64), v29, 1, *(_QWORD *)(v0 + 120));
  swift_task_dealloc(v32);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100074CEC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100074D10()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 128));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ExpiringValueCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10007531C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExpiringValueCache);
}

unint64_t sub_100074D40(uint64_t a1)
{
  unint64_t result;

  result = sub_100074D64();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100074D64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028DFD0;
  if (!qword_10028DFD0)
  {
    v1 = sub_10000D908(&qword_10028DFD8);
    result = swift_getWitnessTable(&unk_10021AC14, v1);
    atomic_store(result, (unint64_t *)&qword_10028DFD0);
  }
  return result;
}

uint64_t sub_100074DB0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 96);
}

uint64_t sub_100074DB8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_100074DC4()
{
  return sub_100074DB8();
}

uint64_t sub_100074DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_10028DFC4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100075348;
  return sub_1000733AC(a1, a2, a3);
}

uint64_t sub_100074E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10028DFCC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000224D8;
  return sub_100074958(a1, a2);
}

uint64_t sub_100074EAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&unk_10021ABF8, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

double sub_100074ED8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_1000080B4(&qword_10028DFD8);
  v1 = swift_allocObject(v0, 136, 15);
  swift_defaultActor_initialize();
  *(_QWORD *)(v1 + 128) = sub_100016258((uint64_t)_swiftEmptyArrayStorage);
  result = -1.59123824e-276;
  *(_OWORD *)(v1 + 112) = xmmword_10021AAC0;
  qword_1002A8AC8 = v1;
  return result;
}

uint64_t sub_100074F34()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)v0 + 4);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 7));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100074FA8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[3];
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v1[4] - 8) + 80);
  v6 = v1[2];
  v7 = (uint64_t *)v1[7];
  v8 = (uint64_t)v1 + ((v5 + 64) & ~v5);
  v9 = (_QWORD *)swift_task_alloc(dword_10028E034);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000224D8;
  return sub_100073738(a1, v6, v4, v7, v8);
}

uint64_t sub_100075038(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_100294B20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100075078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10007511C, 0, 0);
}

uint64_t sub_10007511C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100005150(&qword_10028E058, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100005150((unint64_t *)&unk_10028E060, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100075234;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100075234()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1000752E0, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000752E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007531C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void *sub_10007534C(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  char v8;
  id v9;
  uint64_t v11;
  void *v12;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v7 = sub_10010ABA8((uint64_t)a1);
      if ((v8 & 1) != 0)
      {
        v6 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v7);
        v9 = v6;
        return v6;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = __CocoaDictionary.lookup(_:)();

  if (!v4)
    return 0;
  v11 = v4;
  v5 = sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
  swift_unknownObjectRetain(v4);
  swift_dynamicCast(&v12, &v11, (char *)&type metadata for Swift.AnyObject + 8, v5, 7);
  v6 = v12;
  swift_unknownObjectRelease(v4);
  return v6;
}

void sub_100075420(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(id), uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  char **v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2 && (v13 = a4, v14 = sub_10007534C(v13, a2), v13, v14))
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A8990);
    swift_bridgeObjectRetain_n(a8, 2);
    v16 = a9;
    v17 = v14;
    v18 = v16;
    v19 = v17;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter();
    v22 = &off_100287000;
    if (os_log_type_enabled(v20, v21))
    {
      v23 = swift_slowAlloc(28, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      v27 = swift_slowAlloc(32, -1);
      v29 = v27;
      *(_DWORD *)v23 = 136315650;
      swift_bridgeObjectRetain(a8);
      v28 = sub_1001DEF4C(a7, a8, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease_n(a8, 3);
      *(_WORD *)(v23 + 12) = 2112;
      v28 = (uint64_t)v18;
      v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v26 = v18;

      *(_WORD *)(v23 + 22) = 1024;
      LODWORD(v24) = objc_msgSend(v19, "BOOLValue");

      LODWORD(v28) = (_DWORD)v24;
      v22 = &off_100287000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 4);

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Recipient %s has device capable of %@: %{BOOL}d", (uint8_t *)v23, 0x1Cu);
      v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v25);
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a8, 2);
    }
    a5(objc_msgSend(v19, v22[382]));

  }
  else
  {
    a5(0);
  }
}

uint64_t sub_10007571C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, void *);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;

  v5 = a3;
  v8 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a3)
  {
    v9 = sub_1000067D4(0, (unint64_t *)&qword_10028E140, AAMessagingDestination_ptr);
    v10 = sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
    v11 = sub_100075BE8();
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, v9, v10, v11);
  }
  swift_retain(v7);
  v12 = a4;
  v8(a2, v5, a4);
  swift_release(v7);

  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000757E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_100006F58((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for DaemonIDSMessenger()
{
  return objc_opt_self(_TtC13appleaccountd18DaemonIDSMessenger);
}

void sub_100075830(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (**a5)(_QWORD, _QWORD))
{
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSArray v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD aBlock[5];
  _QWORD *v34;
  uint64_t v35;

  v10 = swift_allocObject(&unk_100262DF0, 24, 7);
  *(_QWORD *)(v10 + 16) = a5;
  v11 = objc_allocWithZone((Class)AAMessagingDestination);
  _Block_copy(a5);
  swift_bridgeObjectRetain(a2);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = objc_msgSend(v11, "initWithHandle:", v12);

  if (v13)
  {
    v14 = *(void **)(a4 + 16);
    v15 = sub_1000080B4(&qword_10028D570);
    v16 = swift_allocObject(v15, 40, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v16 + 32) = v13;
    aBlock[0] = v16;
    specialized Array._endMutation()(v16);
    sub_1000067D4(0, (unint64_t *)&qword_10028E140, AAMessagingDestination_ptr);
    v17 = v13;
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(aBlock[0]);
    v19 = (_QWORD *)swift_allocObject(&unk_100262E18, 64, 7);
    v19[2] = v17;
    v19[3] = sub_100075B6C;
    v19[4] = v10;
    v19[5] = a1;
    v19[6] = a2;
    v19[7] = a3;
    aBlock[4] = sub_100075BBC;
    v34 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007571C;
    aBlock[3] = &unk_100262E30;
    v20 = _Block_copy(aBlock);
    v21 = v34;
    swift_bridgeObjectRetain(a2);
    v22 = v17;
    swift_retain(v10);
    v23 = a3;
    swift_release(v21);
    objc_msgSend(v14, "fetchCapability:destinations:completion:", v23, v18.super.isa, v20);

    _Block_release(v20);
    swift_release(v10);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to generate destination from handle.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v30 = v29;
    v35 = -7004;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v35, v31, v30, v32);
    v18.super.isa = (Class)aBlock[0];
    a5[2](a5, 0);
    swift_release(v10);
  }

}

uint64_t sub_100075B48()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100075B6C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_100075B80()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

void sub_100075BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100075420(a1, a2, a3, *(void **)(v3 + 16), *(void (**)(id))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(void **)(v3 + 56));
}

unint64_t sub_100075BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E150;
  if (!qword_10028E150)
  {
    v1 = sub_1000067D4(255, (unint64_t *)&qword_10028E140, AAMessagingDestination_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10028E150);
  }
  return result;
}

uint64_t sub_100075C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 472);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 472);
  }
  else
  {
    v3 = type metadata accessor for TrustedContactsDataSync(0);
    v2 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v4 = sub_1000080B4(&qword_10028C860);
    Dependency.init(dependencyId:config:)(0, 0, 0, v4);
    v5 = sub_1000080B4(&qword_10028C880);
    Dependency.init(dependencyId:config:)(0, 0, 0, v5);
    v6 = sub_1000080B4(&qword_100294B10);
    Dependency.init(dependencyId:config:)(0, 0, 0, v6);
    v7 = sub_1000080B4(&qword_10028C890);
    Dependency.init(dependencyId:config:)(0, 0, 0, v7);
    v8 = sub_1000067D4(0, (unint64_t *)&qword_10028E828, NSUserDefaults_ptr);
    Dependency.init(dependencyId:config:)(0, 0, 0, v8);
    v9 = sub_1000080B4(&qword_10028E2C0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v9);
    v10 = sub_1000080B4(&qword_10028C8D0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v10);
    v11 = *(_QWORD *)(v0 + 472);
    *(_QWORD *)(v0 + 472) = v2;
    swift_retain(v2);
    swift_release(v11);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100075E04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  void *v16;
  _QWORD v17[3];

  v1 = v0;
  v2 = *(void **)(v0 + 56);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v15, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  sub_100006988((uint64_t)v15, (uint64_t)&v16);
  if (v17[2])
  {
    if ((swift_dynamicCast(&v14, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v14 & 1) != 0)
    {
      return 1;
    }
  }
  else
  {
    sub_100004934((uint64_t)&v16, (uint64_t *)&unk_10028E7E0);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v16 = v2;
    v12 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17);
    *v11 = v2;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client is missing management entitlement: %@", v10, 0xCu);
    v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  return 0;
}

uint64_t sub_100076064(uint64_t a1, uint64_t a2, void *a3, void (*a4)(char *, void *), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint8_t *v28;
  id v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Strong;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  id v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v11 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v54[0] = a2;
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    v15 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for AACustodianError(0);
    v17 = v16;
    if ((swift_dynamicCast(&v53, v54, v15, v16, 6) & 1) != 0)
    {
      v18 = (void *)v53;
      v54[0] = v53;
      v52 = -7014;
      v19 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v20 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v53, &v52, v19, v17, v20);
      v21 = (void *)v53;
      v52 = v53;
      v22 = static _BridgedStoredNSError.== infix(_:_:)(v54, &v52, v17, v20);

      if ((v22 & 1) != 0)
      {
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v23 = type metadata accessor for Logger(0);
        sub_100005288(v23, (uint64_t)qword_1002A89D8);
        v24 = a3;
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.error.getter(v25);
        v27 = v26;
        if (os_log_type_enabled(v25, v26))
        {
          v51 = v27;
          v28 = (uint8_t *)swift_slowAlloc(12, -1);
          v49 = swift_slowAlloc(32, -1);
          v54[0] = v49;
          *(_DWORD *)v28 = 136315138;
          v48 = v28;
          v29 = objc_msgSend(v24, "handle", v28 + 4);
          v50 = v18;
          v30 = v29;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v33 = v32;

          v53 = sub_1001DEF4C(v31, v33, v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);

          swift_bridgeObjectRelease(v33);
          v34 = v48;
          _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v51, "Custodianship already exists with handle %s. Abandoning custodian setup.", v48, 0xCu);
          v35 = v49;
          swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1, -1);
          swift_slowDealloc(v34, -1, -1);

        }
        else
        {

        }
      }
      else
      {

      }
    }
    v46 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v14, 1, 1, v46);
    swift_errorRetain(a2);
    a4(v14, (void *)a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    v36 = a6 + 16;
    swift_beginAccess(v36, v54, 0, 0);
    Strong = swift_weakLoadStrong(v36);
    if (Strong)
    {
      v38 = Strong;
      sub_100076914(a3, a4, a5);
      return swift_release(v38);
    }
    v40 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v14, 1, 1, v40);
    type metadata accessor for AACustodianError(0);
    v42 = v41;
    v52 = -7022;
    v43 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v44 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v53, &v52, v43, v42, v44);
    v45 = (void *)v53;
    a4(v14, (void *)v53);

  }
  return sub_100004934((uint64_t)v14, (uint64_t *)&unk_1002904F0);
}

void sub_1000764AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  uint64_t v14;

  v6 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A20(a1, (uint64_t)v9, (uint64_t *)&unk_1002904F0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  if (a2)
    v13 = (void *)_convertErrorToNSError(_:)(a2);
  else
    v13 = 0;
  (*(void (**)(uint64_t, Class, void *))(a3 + 16))(a3, isa, v13);

}

uint64_t sub_1000765AC(uint64_t a1, char a2, void *a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD);
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v40 - v16;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89D8);
    v28 = swift_errorRetain(a1);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(8, -1);
      v40 = a5;
      v33 = a4;
      v34 = (_QWORD *)v32;
      *(_DWORD *)v31 = 138412290;
      v35 = _convertErrorToNSError(_:)(a1);
      v42 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      *v34 = v35;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to fetch custodians with error %@.", v31, 0xCu);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      v37 = v34;
      a4 = v33;
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    v38 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v14, 1, 1, v38);
    swift_errorRetain(a1);
    a4(v14, a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
    v17 = v14;
  }
  else
  {
    v18 = a3;
    sub_1000057BC(a1, 0);
    v19 = sub_100083D14(a1, v18);

    sub_1000057B0(a1, 0);
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
    v21 = v19[2];
    swift_bridgeObjectRelease(v19);
    if (v21)
    {
      type metadata accessor for AACustodianError(0);
      v23 = v22;
      v41 = -7014;
      v24 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v25 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v42, &v41, v24, v23, v25);
      v26 = v42;
    }
    else
    {
      v26 = 0;
    }
    a4(v17, v26);
    swift_errorRelease(v26);
  }
  return sub_100004934((uint64_t)v17, (uint64_t *)&unk_1002904F0);
}

uint64_t sub_100076914(void *a1, void (*a2)(char *, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  void (*v31)(char *, void *);
  _QWORD v32[3];
  uint64_t v33;
  _UNKNOWN **v34;

  v31 = a2;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[CustodianDaemonService buildRecords] was called.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *sub_10000732C((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  v33 = type metadata accessor for CustodianDaemonContainer();
  v34 = &off_10026DE60;
  v32[0] = v11;
  v12 = type metadata accessor for CustodianshipRecordBuilder();
  v13 = swift_allocObject(v12, 184, 7);
  v14 = sub_1000067AC((uint64_t)v32, v33);
  __chkstk_darwin(v14, v14);
  v16 = (_QWORD *)((char *)&v32[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v16;
  v19 = a1;
  swift_retain(v11);
  v20 = sub_100084D64(v19, v18, v13);

  sub_100006F58(v32);
  v33 = v12;
  v34 = &off_1002676F8;
  v32[0] = v20;
  v21 = sub_10000732C(v32, v12);
  v22 = swift_allocObject(&unk_100262F30, 24, 7);
  swift_weakInit(v22 + 16, v3);
  v23 = *v21;
  swift_retain_n(a3, 2);
  v24 = swift_retain(v22);
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v25, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v27, "Begin building custodianship records.", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  swift_retain(a3);
  swift_retain(v22);
  v29 = swift_retain(v23);
  sub_1000F80D0(v29, v23, v22, v31, a3);
  swift_release_n(v22, 3);
  swift_release_n(a3, 3);
  return sub_100006F58(v32);
}

uint64_t sub_100076BF4(uint64_t a1, uint64_t a2, void (*a3)(char *, void *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t Strong;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  _BYTE v44[24];

  v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v44, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A89D8);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Self is nil. Failed to build custodianship record. Abandoning custodian setup.", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v11, 1, 1, v34);
    type metadata accessor for AACustodianError(0);
    v36 = v35;
    v42 = -7022;
    v37 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v38 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v43, &v42, v37, v36, v38);
    v39 = v43;
    a3(v11, v43);

    return sub_100004934((uint64_t)v11, (uint64_t *)&unk_1002904F0);
  }
  v21 = Strong;
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v22 = (void *)*v19;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to build custodianship record. Abandoning custodian setup.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 1, 1, v28);
    swift_errorRetain(v22);
    a3(v11, v22);
    swift_release(v21);
    swift_errorRelease(v22);
    swift_errorRelease(v22);
    return sub_100004934((uint64_t)v11, (uint64_t *)&unk_1002904F0);
  }
  sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
  sub_100076FD4((uint64_t)v15, (uint64_t)a3, a4);
  swift_release(v21);
  return sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
}

uint64_t sub_100076FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v4 = v3;
  v8 = type metadata accessor for CustodianshipRecords(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89D8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Saving freshly built records.", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + 184), *(_QWORD *)(v4 + 208));
  sub_100027FE8(a1, (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1002632A0, v20 + 16, v18 | 7);
  *(_QWORD *)(v21 + 16) = v4;
  sub_10003B730((uint64_t)v12, v21 + v19, type metadata accessor for CustodianshipRecords);
  v22 = (_QWORD *)(v21 + v20);
  *v22 = a2;
  v22[1] = a3;
  swift_retain(v4);
  swift_retain(a3);
  sub_1001C1C74(a1, (uint64_t)sub_100086CB4, v21);
  return swift_release(v21);
}

uint64_t sub_1000771A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;

  v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v13, v14);
  v16 = (uint64_t *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v16, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v16, v13) == 1)
  {
    v17 = *v16;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to save custodianship records. Abandoning custodian setup.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
    swift_errorRetain(v17);
    a4((uint64_t)v12, v17);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    v24 = (uint64_t *)&unk_1002904F0;
    v25 = (uint64_t)v12;
  }
  else
  {
    sub_1000773BC(a3, a4, a5);
    v24 = (uint64_t *)&unk_10028CCD0;
    v25 = (uint64_t)v16;
  }
  return sub_100004934(v25, v24);
}

uint64_t sub_1000773BC(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  __n128 v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(uint64_t, _QWORD);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;

  v4 = v3;
  v77 = a2;
  v7 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v7, v8);
  v73 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v76 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CustodianRecord(0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v69 - v19;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v75 = type metadata accessor for Logger(0);
  v21 = sub_100005288(v75, (uint64_t)qword_1002A89D8);
  v22 = sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for CustodianRecord);
  v74 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  v25 = os_log_type_enabled(v23, v24);
  v78 = v13;
  if (v25)
  {
    v71 = v10;
    v26 = swift_slowAlloc(12, -1);
    v69 = v4;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v70 = a1;
    v29 = v28;
    v72 = v17;
    *(_DWORD *)v27 = 136315138;
    v81 = (void *)v28;
    v30 = (uint64_t *)&v20[*(int *)(v78 + 24)];
    v32 = *v30;
    v31 = v30[1];
    swift_bridgeObjectRetain(v31);
    v80 = sub_1001DEF4C(v32, v31, (uint64_t *)&v81);
    v13 = v78;
    v17 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
    v33 = v31;
    v10 = v71;
    swift_bridgeObjectRelease(v33);
    sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sending custodian invitation to %s.", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    v34 = v29;
    a1 = v70;
    swift_slowDealloc(v34, -1, -1);
    v35 = v27;
    v4 = v69;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecord);
  }

  sub_10000732C((_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 168));
  sub_100027FE8(a1, (uint64_t)v17, type metadata accessor for CustodianRecord);
  v36 = v79;
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  v38 = v76;
  v37(v76, a1 + *(int *)(v13 + 20), v10);
  v39 = type metadata accessor for CustodianInvitationMessage(0);
  v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  *(_BYTE *)(v40 + 16) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v40 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v38, v10);
  v41 = *(_QWORD *)(a1 + *(int *)(v13 + 24) + 8);
  v42 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(a3);
  swift_bridgeObjectRetain(v41);
  v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  v44 = objc_msgSend(v42, "initWithHandle:", v43);

  if (v44)
  {
    v46 = v10;
    v47 = qword_10028ADB0;
    v48 = v44;
    if (v47 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v49 = sub_100005288(v75, (uint64_t)qword_1002A8990);
    v50 = Logger.logObject.getter(v49);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v50, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v52, "Destination is valid!", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    v54 = sub_1001B2688(v40, v48);
    v63 = Logger.logObject.getter(v54);
    v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v66 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Custodian invitation sent!", v66, 2u);
      swift_slowDealloc(v66, -1, -1);
    }

    v67 = (uint64_t)v73;
    v37(v73, (uint64_t)&v17[*(int *)(v78 + 20)], v46);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v67, 0, 1, v46);
    v77(v67, 0);
    sub_100004934(v67, (uint64_t *)&unk_1002904F0);
    swift_release(a3);
    swift_release(v40);

  }
  else
  {
    v55 = Logger.logObject.getter(v45);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, (os_log_type_t)v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "Unable to generate destination from handle.", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v59 = v58;
    v80 = -7004;
    v60 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v61 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v81, &v80, v60, v59, v61);
    v62 = v81;
    sub_100077A84((uint64_t)v81, v77, a3, (uint64_t)v17);
    swift_release(a3);
    swift_release(v40);

  }
  return sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
}

uint64_t sub_100077A84(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89D8);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(8, -1);
      v33 = a3;
      v18 = a2;
      v19 = (_QWORD *)v17;
      *(_DWORD *)v16 = 138412290;
      v20 = _convertErrorToNSError(_:)(a1);
      v34 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      *v19 = v20;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error sending custodian invitation over IDS: %@", v16, 0xCu);
      v21 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v19, 1, v21);
      v22 = v19;
      a2 = v18;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    v31 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v11, 1, 1, v31);
    swift_errorRetain(a1);
    a2(v11, a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Custodian invitation sent!", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    v28 = a4 + *(int *)(type metadata accessor for CustodianRecord(0) + 20);
    v29 = type metadata accessor for UUID(0);
    v30 = *(_QWORD *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v11, v28, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
    a2(v11, 0);
  }
  return sub_100004934((uint64_t)v11, (uint64_t *)&unk_1002904F0);
}

void sub_100077DD4(uint64_t a1, objc_class *a2, objc_class *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  NSObject *v37;
  objc_class *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  objc_class **v46;
  uint64_t (**v47)(uint64_t, uint64_t);
  NSObject *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t (*v57)(char *, uint64_t, NSObject *);
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  objc_class *v63;
  objc_class *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;

  v64 = a3;
  v65 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v55 - v12;
  v66 = type metadata accessor for UUID(0);
  isa = v66[-1].isa;
  v15 = *((_QWORD *)isa + 8);
  v17 = __chkstk_darwin(v66, v16);
  v62 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v55 - v19;
  if ((sub_100075E04() & 1) != 0)
  {
    v58 = v10;
    v60 = v13;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v63 = a2;
    v59 = v6;
    v61 = v5;
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89D8);
    v22 = v66;
    v57 = (uint64_t (*)(char *, uint64_t, NSObject *))*((_QWORD *)isa + 2);
    v23 = v57(v20, v65, v66);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    v26 = v3;
    if (os_log_type_enabled(v24, v25))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v68 = v28;
      *(_DWORD *)v27 = 136315138;
      v56 = v27 + 4;
      v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v66, v29);
      v32 = v31;
      v67 = sub_1001DEF4C(v30, v31, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_bridgeObjectRelease(v32);
      (*((void (**)(char *, NSObject *))isa + 1))(v20, v66);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Resending custodian invitation to %s.", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v22 = v66;
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      (*((void (**)(char *, NSObject *))isa + 1))(v20, v22);
    }

    v37 = swift_allocObject(&unk_100263250, 32, 7);
    v66 = v37;
    v38 = v64;
    v37[2].isa = v63;
    v37[3].isa = v38;
    v56 = sub_10000732C((_QWORD *)(v26 + 184), *(_QWORD *)(v26 + 208));
    v39 = v62;
    v57(v62, v65, v22);
    v40 = *((unsigned __int8 *)isa + 80);
    v41 = (v40 + 16) & ~v40;
    v42 = (v15 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v45 = swift_allocObject(&unk_100263278, v44 + 16, v40 | 7);
    (*((void (**)(uint64_t, char *, NSObject *))isa + 4))(v45 + v41, v39, v22);
    v46 = (objc_class **)(v45 + v42);
    *v46 = v63;
    v46[1] = v38;
    *(_QWORD *)(v45 + v43) = v26;
    v47 = (uint64_t (**)(uint64_t, uint64_t))(v45 + v44);
    v48 = v66;
    *v47 = sub_100046C84;
    v47[1] = (uint64_t (*)(uint64_t, uint64_t))v48;
    v49 = sub_10000732C((_QWORD *)(*v56 + 16), *(_QWORD *)(*v56 + 40));
    type metadata accessor for LocalCache();
    swift_retain_n(v38, 2);
    swift_retain(v26);
    swift_retain(v48);
    v50 = v58;
    sub_10000840C();
    v51 = (uint64_t)v60;
    URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
    v52 = *(void (**)(char *, uint64_t))(v59 + 8);
    v53 = v50;
    v54 = v61;
    v52(v53, v61);
    sub_10000732C((_QWORD *)(*v49 + 16), *(_QWORD *)(*v49 + 40));
    sub_10009D320(v51, (uint64_t)sub_10008696C, v45);
    v52((char *)v51, v54);
    swift_release(v45);
    swift_release(v48);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v66 = Logger.logObject.getter(v34);
    v35 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v35, "Client is missing management entitlement, rejecting request to reSendCustodianInvitation", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

  }
}

void sub_1000782EC(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, void (*a7)(uint64_t, _QWORD), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  void (*v64)(uint64_t, _QWORD);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;

  v65 = a6;
  v66 = a8;
  v64 = a7;
  v13 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v67 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianRecord(0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v61 - v23;
  __chkstk_darwin(v22, v25);
  v28 = (char *)&v61 - v27;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v48 = type metadata accessor for Logger(0);
    sub_100005288(v48, (uint64_t)qword_1002A89D8);
    v49 = swift_errorRetain(a1);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v54 = _convertErrorToNSError(_:)(a1);
      v70 = (void *)v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v53 = v54;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Error fetching custodian record for resending invitation: %@", v52, 0xCu);
      v55 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v53, 1, v55);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a4(a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v62 = a4;
    v63 = v13;
    v29 = *(_QWORD *)(a1 + 16);
    if (v29)
    {
      v61 = a5;
      v30 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
      v31 = *(_QWORD *)(v26 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v30, (uint64_t)v20, type metadata accessor for CustodianRecord);
        if ((static UUID.== infix(_:_:)(&v20[*(int *)(v16 + 20)]) & 1) != 0)
          break;
        sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecord);
        v30 += v31;
        if (!--v29)
        {
          sub_1000057B0(a1, 0);
          a4 = v62;
          goto LABEL_7;
        }
      }
      sub_1000057B0(a1, 0);
      sub_10003B730((uint64_t)v20, (uint64_t)v24, type metadata accessor for CustodianRecord);
      sub_10003B730((uint64_t)v24, (uint64_t)v28, type metadata accessor for CustodianRecord);
      sub_1000773BC((uint64_t)v28, v64, v66);
      sub_100028388((uint64_t)v28, type metadata accessor for CustodianRecord);
    }
    else
    {
LABEL_7:
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v32 = type metadata accessor for Logger(0);
      sub_100005288(v32, (uint64_t)qword_1002A89D8);
      v34 = v67;
      v33 = v68;
      v35 = v63;
      v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, a3, v63);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = v34;
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        v70 = (void *)v41;
        *(_DWORD *)v40 = 136315138;
        v42 = v35;
        v43 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v44 = v39;
        v45 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
        v47 = v46;
        v69 = sub_1001DEF4C(v45, v46, (uint64_t *)&v70);
        a4 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
        swift_bridgeObjectRelease(v47);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v42);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to find custodian with id: %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
      }

      type metadata accessor for AACustodianError(0);
      v57 = v56;
      v69 = -7003;
      v58 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v59 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v58, v57, v59);
      v60 = v70;
      a4((uint64_t)v70);

    }
  }
}

uint64_t sub_100078894(void *a1, uint64_t a2, _QWORD *a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(void *))
{
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];

  v13 = (uint64_t *)(a6 + 16);
  v14 = sub_10000732C(a3, a3[3]);
  sub_100083A74(*v14, (uint64_t)a1, a2);
  sub_100082E30(a4, a1 == 0, a1);
  objc_msgSend(a5, "unlock");
  swift_beginAccess(v13, v18, 0, 0);
  if (*(_QWORD *)(a6 + 16))
  {
    swift_beginAccess(v13, &v17, 1, 0);
    v15 = *v13;
    *v13 = 0;
    swift_unknownObjectRelease(v15);
  }
  return a7(a1);
}

uint64_t sub_100078978(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, _QWORD *);
  _QWORD *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint8_t *v62;
  uint64_t Strong;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  NSString v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  __n128 v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  _QWORD v100[2];
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  void (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112[3];
  void *v113;
  uint64_t v114;

  v107 = a4;
  v108 = a5;
  v109 = a2;
  v110 = (_QWORD *)type metadata accessor for UUID(0);
  v7 = *(v110 - 1);
  v9 = __chkstk_darwin(v110, v8);
  v11 = (char *)v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v105 = (char *)v100 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)v100 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)v100 - v20;
  v104 = type metadata accessor for CustodianRecord(0);
  v23 = __chkstk_darwin(v104, v22);
  v106 = (uint64_t)v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v25);
  v27 = (char *)v100 - v26;
  v28 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v28, v29);
  v31 = (_QWORD *)((char *)v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v31, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v31, v28) == 1)
  {
    v32 = *v31;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v34 = v110;
    (*(void (**)(char *, uint64_t, _QWORD *))(v7 + 16))(v11, v109, v110);
    swift_errorRetain(v32);
    v35 = swift_errorRetain(v32);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v109 = v7;
      v39 = v38;
      v40 = (uint64_t *)swift_slowAlloc(8, -1);
      v41 = swift_slowAlloc(32, -1);
      v106 = v41;
      v112[0] = v41;
      *(_DWORD *)v39 = 136315394;
      v42 = UUID.uuidString.getter(v41);
      v44 = v43;
      v113 = (void *)sub_1001DEF4C(v42, v43, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(char *, _QWORD *))(v109 + 8))(v11, v34);
      *(_WORD *)(v39 + 12) = 2112;
      v45 = _convertErrorToNSError(_:)(v32);
      v113 = (void *)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      *v40 = v45;
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error removing custodian %s: %@", (uint8_t *)v39, 0x16u);
      v46 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v40, 1, v46);
      swift_slowDealloc(v40, -1, -1);
      v47 = v106;
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      (*(void (**)(char *, _QWORD *))(v7 + 8))(v11, v34);
      swift_errorRelease(v32);
      swift_errorRelease(v32);
    }

    swift_errorRetain(v32);
    v107(v32);
    swift_errorRelease(v32);
    return swift_errorRelease(v32);
  }
  else
  {
    v103 = v18;
    v48 = a3 + 16;
    v102 = v27;
    sub_10003B730((uint64_t)v31, (uint64_t)v27, type metadata accessor for CustodianRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v101 = type metadata accessor for Logger(0);
    v49 = sub_100005288(v101, (uint64_t)qword_1002A89D8);
    v50 = v7;
    v51 = *(uint64_t (**)(char *, uint64_t, _QWORD *))(v7 + 16);
    v52 = v110;
    v53 = v51(v21, v109, v110);
    v100[1] = v49;
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v112[0] = v57;
      v109 = v7;
      *(_DWORD *)v56 = 136315138;
      v58 = UUID.uuidString.getter(v57);
      v60 = v59;
      v113 = (void *)sub_1001DEF4C(v58, v59, v112);
      v50 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease(v60);
      v61 = *(_QWORD **)(v50 + 8);
      ((void (*)(char *, _QWORD *))v61)(v21, v110);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Custodian %s successfully removed.", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      v62 = v56;
      v52 = v110;
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      v61 = *(_QWORD **)(v7 + 8);
      ((void (*)(char *, _QWORD *))v61)(v21, v52);
    }

    swift_beginAccess(v48, v112, 0, 0);
    Strong = swift_weakLoadStrong(v48);
    v65 = (uint64_t)v102;
    if (Strong)
    {
      v66 = Strong;
      v110 = v61;
      sub_10000732C((_QWORD *)(Strong + 144), *(_QWORD *)(Strong + 168));
      v68 = v103;
      v67 = v104;
      v51(v103, v65 + *(int *)(v104 + 20), v52);
      v69 = *(_QWORD *)(v65 + *(int *)(v67 + 24) + 8);
      sub_100027FE8(v65, v106, type metadata accessor for CustodianRecord);
      v70 = v105;
      v51(v105, (uint64_t)v68, v52);
      v71 = type metadata accessor for CustodianRemovedMessage(0);
      v72 = swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
      v73 = v50;
      v74 = v72;
      *(_BYTE *)(v72 + 16) = 4;
      (*(void (**)(uint64_t, char *, _QWORD *))(v73 + 32))(v72 + OBJC_IVAR____TtC13appleaccountd23CustodianRemovedMessage_custodianID, v70, v52);
      v75 = objc_allocWithZone((Class)AAMessagingDestination);
      v76 = v108;
      swift_retain(v108);
      swift_bridgeObjectRetain(v69);
      v77 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v69);
      v78 = objc_msgSend(v75, "initWithHandle:", v77);

      if (v78)
      {
        v80 = qword_10028ADB0;
        v81 = v78;
        if (v80 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v82 = sub_100005288(v101, (uint64_t)qword_1002A8990);
        v83 = Logger.logObject.getter(v82);
        v85 = static os_log_type_t.default.getter(v84);
        if (os_log_type_enabled(v83, v85))
        {
          v86 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v86 = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, v85, "Destination is valid!", v86, 2u);
          swift_slowDealloc(v86, -1, -1);
        }

        v87 = sub_1001B26D8(v74, v81);
        v97 = Logger.logObject.getter(v87);
        v98 = static os_log_type_t.debug.getter(v97);
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "informCustodianOfRemoval success", v99, 2u);
          swift_slowDealloc(v99, -1, -1);
        }

        v107(0);
        swift_release(v76);
        swift_release(v74);

        v96 = v106;
      }
      else
      {
        v88 = Logger.logObject.getter(v79);
        v89 = static os_log_type_t.error.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v90 = 0;
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "Unable to generate destination from handle.", v90, 2u);
          swift_slowDealloc(v90, -1, -1);
        }

        type metadata accessor for AACustodianError(0);
        v92 = v91;
        v111 = -7004;
        v93 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v94 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v113, &v111, v93, v92, v94);
        v95 = v113;
        v96 = v106;
        sub_100079504((uint64_t)v113, v107, v76, v106);
        swift_release(v76);
        swift_release(v74);

      }
      sub_100028388(v96, type metadata accessor for CustodianRecord);
      ((void (*)(char *, _QWORD *))v110)(v103, v52);
      swift_release(v66);
    }
    return sub_100028388(v65, type metadata accessor for CustodianRecord);
  }
}

void sub_100079338(uint64_t a1, char a2, _QWORD *a3, uint64_t a4)
{
  void *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v12;
  uint64_t inited;
  _QWORD v14[3];
  _BYTE v15[8];
  _BYTE v16[56];
  _QWORD v17[3];
  _BYTE v18[8];
  _BYTE v19[56];

  if ((a2 & 1) != 0)
  {
    sub_10000732C(a3, a3[3]);
    if (a4)
    {
      swift_getErrorValue(a4, v18, v17);
      v5 = (void *)sub_10015D0F8(v17[1], v17[2]);
    }
    else
    {
      v5 = 0;
    }
    v11 = a4 == 0;
    v12 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v12, v19);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    strcpy((char *)(inited + 32), "numOfRelation");
    *(_WORD *)(inited + 46) = -4864;
    sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
    *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(-1);
    v9 = sub_10001612C(inited);
    v10 = v11;
  }
  else
  {
    sub_10000732C(a3, a3[3]);
    if (a4)
    {
      swift_getErrorValue(a4, v15, v14);
      v5 = (void *)sub_10015D0F8(v14[1], v14[2]);
    }
    else
    {
      v5 = 0;
    }
    v6 = a4 == 0;
    v7 = sub_1000080B4(&qword_10028E7F8);
    v8 = swift_initStackObject(v7, v16);
    *(_OWORD *)(v8 + 16) = xmmword_100218E30;
    strcpy((char *)(v8 + 32), "numOfRelation");
    *(_WORD *)(v8 + 46) = -4864;
    *(NSNumber *)(v8 + 48) = Int._bridgeToObjectiveC()();
    v9 = sub_10001612C(v8);
    v10 = v6;
  }
  sub_10008CD0C(v10, (uint64_t)v5, v9);
  swift_bridgeObjectRelease(v9);

}

uint64_t sub_100079504(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;

  v8 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89D8);
    sub_100027FE8(a4, (uint64_t)v11, type metadata accessor for CustodianRecord);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v34 = a2;
      v17 = v16;
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      v19 = swift_slowAlloc(32, -1);
      v33 = a3;
      v20 = v19;
      v36 = v19;
      *(_DWORD *)v17 = 136315394;
      v21 = UUID.uuidString.getter(v19);
      v23 = v22;
      v35 = sub_1001DEF4C(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease(v23);
      sub_100028388((uint64_t)v11, type metadata accessor for CustodianRecord);
      *(_WORD *)(v17 + 12) = 2112;
      v24 = _convertErrorToNSError(_:)(a1);
      v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      *v18 = v24;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error sending removal message to custodian %s: %@", (uint8_t *)v17, 0x16u);
      v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v18, 1, v25);
      swift_slowDealloc(v18, -1, -1);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      v26 = v17;
      a2 = v34;
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v11, type metadata accessor for CustodianRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A89D8);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "informCustodianOfRemoval success", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_100079894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  void *v6;

  *(_BYTE *)(a2 + qword_1002981C8) = 4;
  if (a1)
    v6 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v6 = 0;
  sub_1001D2A60(a1 == 0, v6);

  return a4(a1);
}

uint64_t sub_100079924(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, uint64_t, void *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v15;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  _Block_copy(v13);
  swift_retain(a1);
  a5(v12, a1, v13);
  _Block_release(v13);
  _Block_release(v13);
  swift_release(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100079A00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = v0;
  v2 = sub_1000080B4((uint64_t *)&unk_10028E818);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v1[10] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100079A64, 0, 0);
}

uint64_t sub_100079A64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[7] + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianFetcher, v3);
  Dependency.wrappedValue.getter(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10000732C(v0 + 2, v0[5]);
  v4 = (_QWORD *)swift_task_alloc(dword_100295A84);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_100079B04;
  return sub_1001921BC();
}

uint64_t sub_100079B04(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100079BBC;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = a1;
    v6 = sub_100079B78;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100079B78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_100006F58((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

uint64_t sub_100079BBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  sub_100006F58((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100079D1C(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10028E254;
  swift_retain(a2);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100079D7C;
  return sub_100079A00();
}

uint64_t sub_100079D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 32);
  v7 = *(_QWORD *)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v6);
  swift_release(v7);
  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    sub_1000067D4(0, (unint64_t *)&qword_10028E888, AATrustedContact_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_100079E64(uint64_t a1, uint64_t a2, void (*a3)(__n128), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  uint64_t v20;
  NSString v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  _QWORD v28[2];
  void (*v29)(__n128);
  unint64_t v30;

  v8 = type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    return ((uint64_t (*)(_QWORD, uint64_t))a3)(0, a2);
  v14 = &_swiftEmptyArrayStorage;
  v30 = (unint64_t)&_swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v28[1] = a4;
    v29 = a3;
    v16 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v28[0] = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_100027FE8(v16, (uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
      v18 = objc_allocWithZone((Class)AACustodianshipInfo);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v20 = *(_QWORD *)&v12[*(int *)(v8 + 28)];
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v18, "initWithID:status:ownerHandle:", isa, v20, v21);

      v23 = sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      v25 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v22);
      specialized Array._endMutation()(v26);
      v16 += v17;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v28[0]);
    a3 = v29;
    v14 = (void *)v30;
  }
  v27 = swift_bridgeObjectRetain(v14);
  a3(v27);
  return swift_bridgeObjectRelease_n(v14, 2);
}

uint64_t sub_10007A050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v31 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89D8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v28 = v3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v30 = a1;
    v19 = v18;
    v33 = v18;
    v29 = a3;
    *(_DWORD *)v17 = 136315138;
    v20 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v7, v20);
    v23 = v22;
    v32 = sub_1001DEF4C(v21, v22, &v33);
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Fetching custodianship information with the following: %s", v17, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    v24 = v19;
    a1 = v30;
    swift_slowDealloc(v24, -1, -1);
    v25 = v17;
    v4 = v28;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  sub_10000732C((_QWORD *)(v4 + 184), *(_QWORD *)(v4 + 208));
  v26 = swift_allocObject(&unk_100263228, 32, 7);
  *(_QWORD *)(v26 + 16) = v31;
  *(_QWORD *)(v26 + 24) = a3;
  swift_retain(a3);
  sub_1001BFD24(a1, (uint64_t)sub_1000868C0, v26);
  return swift_release(v26);
}

uint64_t sub_10007A2D8(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  uint64_t v32;
  NSString v33;
  id v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  id v47;
  _QWORD v48[2];
  uint64_t v49;
  void (*v50)(id, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v52 = a3;
  v5 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CustodianshipInfoRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)v48 - v15;
  v17 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v17, v18);
  v20 = (_QWORD *)((char *)v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v20, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v21 = *v20;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138412290;
      v28 = _convertErrorToNSError(_:)(v21);
      v54 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      *v27 = v28;
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to fetch custodianship info: %@", v26, 0xCu);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
    }

    swift_errorRetain(v21);
    a2(0, v21);
    swift_errorRelease(v21);
    return swift_errorRelease(v21);
  }
  else
  {
    v50 = a2;
    sub_10003B730((uint64_t)v20, (uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
    sub_100027FE8((uint64_t)v16, (uint64_t)v13, type metadata accessor for CustodianshipInfoRecord);
    v30 = objc_allocWithZone((Class)AACustodianshipInfo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v32 = *(_QWORD *)&v13[*(int *)(v9 + 28)];
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v30, "initWithID:status:ownerHandle:", isa, v32, v33);

    sub_100028388((uint64_t)v13, type metadata accessor for CustodianshipInfoRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A89D8);
    v36 = v34;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v54 = v49;
      *(_DWORD *)v39 = 136315138;
      v48[1] = v39 + 4;
      v40 = objc_msgSend(v36, "custodianID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

      v41 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v5, v41);
      v44 = v43;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v5);
      v53 = sub_1001DEF4C(v42, v44, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Found custodianship info: %s", v39, 0xCu);
      v45 = v49;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    v47 = v36;
    v50(v36, 0);

    return sub_100028388((uint64_t)v16, type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_10007A840(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0)
    return a3(a1, 0);
  swift_errorRetain(a1);
  a3((uint64_t)&_swiftEmptyArrayStorage, a1);
  return sub_1000057B0(a1, 1);
}

uint64_t sub_10007A8A4(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0)
    return a3(a1, 0);
  swift_errorRetain(a1);
  a3(0, a1);
  return sub_1000057B0(a1, 1);
}

uint64_t sub_10007A9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v25 - v13;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching health status for all custodians & custodianships.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + 184), *(_QWORD *)(v3 + 208));
  v21 = swift_allocObject(&unk_100263200, 32, 7);
  *(_QWORD *)(v21 + 16) = a1;
  *(_QWORD *)(v21 + 24) = a2;
  v22 = sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  type metadata accessor for LocalCache();
  swift_retain(a2);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A450, 1);
  v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  v23(v11, v6);
  sub_10000732C((_QWORD *)(*v22 + 16), *(_QWORD *)(*v22 + 40));
  sub_10009D358((uint64_t)v14, (uint64_t)sub_1000868B4, v21);
  v23(v14, v6);
  return swift_release(v21);
}

uint64_t sub_10007ABF0(uint64_t a1, char a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSUUID v27;
  Class isa;
  uint64_t v30;
  void (*v31)(void *, uint64_t);
  uint64_t v32;
  _QWORD *v33;

  v8 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianHealthRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(&_swiftEmptyArrayStorage, a1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 16);
    v18 = &_swiftEmptyArrayStorage;
    if (v17)
    {
      v30 = a4;
      v31 = a3;
      v33 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v17);
      v19 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v32 = *(_QWORD *)(v13 + 72);
      do
      {
        sub_100027FE8(v19, (uint64_t)v16, type metadata accessor for CustodianHealthRecord);
        v24 = &v16[*(int *)(v12 + 24)];
        v25 = type metadata accessor for Date(0);
        v26 = *(_QWORD *)(v25 - 8);
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v11, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v11, 0, 1, v25);
        v27.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v25) != 1)
        {
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v25);
        }
        v20 = objc_msgSend(objc_allocWithZone((Class)AATrustedContactHealthInfo), "initWithID:lastValidCheckTimeStamp:", v27.super.isa, isa);

        v21 = sub_100028388((uint64_t)v16, type metadata accessor for CustodianHealthRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v22 = v33[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized ContiguousArray._endMutation()(v23);
        v19 += v32;
        --v17;
      }
      while (v17);
      v18 = v33;
      a3 = v31;
    }
    a3(v18, 0);
    return swift_bridgeObjectRelease(v18);
  }
}

uint64_t sub_10007AE6C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v4 = v3;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = a3;
    v25 = v9;
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    *v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting recovery with IdMS with context: %@", v12, 0xCu);
    v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v13, 1, v15);
    v16 = v13;
    a3 = v24;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  v17 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  v18 = objc_msgSend(v9, "ownerAppleID");
  objc_msgSend(v17, "setOwnerAppleID:", v18);

  v19 = objc_msgSend(v9, "recoverySessionID");
  objc_msgSend(v17, "setRecoverySessionID:", v19);

  objc_msgSend(v17, "set_cliMode:", objc_msgSend(v9, "CLIMode"));
  sub_10000732C((_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 128));
  v20 = swift_allocObject(&unk_100262F30, 24, 7);
  swift_weakInit(v20 + 16, v4);
  v21 = (_QWORD *)swift_allocObject(&unk_1002631D8, 48, 7);
  v21[2] = v20;
  v21[3] = a2;
  v21[4] = a3;
  v21[5] = v17;
  swift_retain(v20);
  swift_retain(a3);
  v22 = v17;
  sub_10018FA48((void (*)(uint64_t, unint64_t, _QWORD))sub_10008684C, (uint64_t)v21);

  swift_release(v20);
  return swift_release(v21);
}

void sub_10007B15C(uint64_t a1, unint64_t a2, char a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD), uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t *v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  NSObject *log;
  void *v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[24];

  v13 = a4 + 16;
  swift_beginAccess(a4 + 16, v50, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (Strong)
  {
    v15 = Strong;
    if ((a3 & 1) != 0)
    {
      swift_errorRetain(a1);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v36 = type metadata accessor for Logger(0);
      sub_100005288(v36, (uint64_t)qword_1002A89D8);
      v37 = swift_errorRetain(a1);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter(v38);
      if (!os_log_type_enabled(v38, v39))
      {
        sub_1000868A8(a1, a2, 1);
        sub_1000868A8(a1, a2, 1);

        goto LABEL_15;
      }
      log = v38;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = a7;
      v41 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 138412290;
      v42 = a5;
      v43 = _convertErrorToNSError(_:)(a1);
      v49 = (void *)v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
      *v41 = v43;
      a5 = v42;
      sub_1000868A8(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v39, "Failed to obtain Push Token with error: %@, continuing without AA Push Token", v40, 0xCu);
      v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v41, 1, v44);
      v45 = v41;
      a7 = v47;
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v23 = a1;
      v24 = a2;
      v25 = 1;
    }
    else
    {
      sub_10000F450(a1, a2);
      sub_1001D34B0(a1, a2);
      v17 = v16;
      v49 = v16;
      v18 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v19 = sub_10008685C();
      BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v18, v19);
      v21 = v20;
      swift_bridgeObjectRelease(v17);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
      objc_msgSend(a7, "setPushToken:", v22);

      v23 = a1;
      v24 = a2;
      v25 = 0;
    }
    sub_1000868A8(v23, v24, v25);
LABEL_15:
    sub_10007B580((uint64_t)a7, (uint64_t)a5, a6);
    swift_release(v15);
    return;
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100005288(v26, (uint64_t)qword_1002A89D8);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "startCustodianRecovery: Custodian Daemon Service is no longer retained, nothing to do here", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  type metadata accessor for AACustodianError(0);
  v32 = v31;
  v48 = -7000;
  v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v34 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  _BridgedStoredNSError.init(_:userInfo:)(&v49, &v48, v33, v32, v34);
  v35 = v49;
  a5(0, 0, v49);

}

uint64_t sub_10007B580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void **v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v21[5];
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100005288(v9, (uint64_t)qword_1002A89D8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Calling out to IdMS to initiate a custodian recovery", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (void **)sub_10000732C(v4 + 8, v4[11]);
  v15 = (_QWORD *)swift_allocObject(&unk_100263160, 40, 7);
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = v8;
  v16 = *v14;
  v17 = swift_allocObject(&unk_100263188, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_100086800;
  *(_QWORD *)(v17 + 24) = v15;
  v21[4] = sub_100086810;
  v22 = v17;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256;
  v21[2] = sub_10013DB54;
  v21[3] = &unk_1002631A0;
  v18 = _Block_copy(v21);
  v19 = v22;
  swift_retain(a3);
  swift_retain(v15);
  swift_release(v19);
  objc_msgSend(v16, "startCustodianRecoveryRequestWithContext:completion:", a1, v18);
  _Block_release(v18);
  return swift_release(v15);
}

void sub_10007B754(uint64_t a1, char a2, void (*a3)(uint64_t, unint64_t, void *))
{
  __n128 v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void (*v40)(uint64_t, unint64_t, void *);
  unint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89D8);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      v14 = _convertErrorToNSError(_:)(a1);
      v43 = (void *)v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      *v13 = v14;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to initiate recovery with IdMS with error: %@", v12, 0xCu);
      v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, 0, (void *)a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v41 = 0xD000000000000011;
    v42 = 0x800000010020ACB0;
    v5 = swift_bridgeObjectRetain(a1);
    AnyHashable.init<A>(_:)(&v43, &v41, &type metadata for String, &protocol witness table for String, v5);
    if (*(_QWORD *)(a1 + 16) && (v6 = sub_10010AAE0((uint64_t)&v43), (v7 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v6, (uint64_t)&v45);
    }
    else
    {
      v45 = 0u;
      v46 = 0u;
    }
    sub_1000839B4((uint64_t)&v43);
    if (*((_QWORD *)&v46 + 1))
    {
      if ((swift_dynamicCast(&v41, &v45, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        sub_1000057B0(a1, 0);
        v17 = v41;
        v16 = v42;
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v18 = type metadata accessor for Logger(0);
        sub_100005288(v18, (uint64_t)qword_1002A89D8);
        v19 = swift_bridgeObjectRetain_n(v16, 2);
        v20 = Logger.logObject.getter(v19);
        v22 = static os_log_type_t.default.getter(v21);
        if (os_log_type_enabled(v20, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc(12, -1);
          v24 = swift_slowAlloc(32, -1);
          v43 = (void *)v24;
          *(_DWORD *)v23 = 136315138;
          swift_bridgeObjectRetain(v16);
          *(_QWORD *)&v45 = sub_1001DEF4C(v17, v16, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8);
          swift_bridgeObjectRelease_n(v16, 3);
          _os_log_impl((void *)&_mh_execute_header, v20, v22, "IdMS came back with a recovery session ID: %s", v23, 0xCu);
          swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v24, -1, -1);
          swift_slowDealloc(v23, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v16, 2);
        }
        a3(v17, v16, 0);
        swift_bridgeObjectRelease(v16);
        return;
      }
    }
    else
    {
      sub_100004934((uint64_t)&v45, (uint64_t *)&unk_10028E7E0);
    }
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v40 = a3;
    v25 = type metadata accessor for Logger(0);
    sub_100005288(v25, (uint64_t)qword_1002A89D8);
    swift_bridgeObjectRetain(a1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v43 = (void *)v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain(a1);
      v32 = Dictionary.description.getter(v31, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v34 = v33;
      sub_1000057B0(a1, 0);
      *(_QWORD *)&v45 = sub_1001DEF4C(v32, v34, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8);
      swift_bridgeObjectRelease(v34);
      sub_1000057B0(a1, 0);
      sub_1000057B0(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "IdMS came back with a result, but transaction ID was not found there: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 0);
      sub_1000057B0(a1, 0);
    }

    type metadata accessor for AACustodianError(0);
    v36 = v35;
    *(_QWORD *)&v45 = -7009;
    v37 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v38 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v43, &v45, v37, v36, v38);
    v39 = v43;
    v40(0, 0, v43);

  }
}

uint64_t sub_10007BDBC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    v13 = sub_1001DEF4C(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Canceling recovery session with id: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10000732C((_QWORD *)(v3 + 304), *(_QWORD *)(v3 + 328));
  return sub_100146154(a1, a2);
}

uint64_t sub_10007C030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void **v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;

  v3 = v2;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Calling out to IdMS to fetch Custodian recovery configuration", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (void **)sub_10000732C((_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 88));
  v12 = swift_allocObject(&unk_1002630E8, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = *v11;
  v14 = swift_allocObject(&unk_100263110, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1000867C8;
  *(_QWORD *)(v14 + 24) = v12;
  v18[4] = sub_1000867D4;
  v19 = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_10013DB54;
  v18[3] = &unk_100263128;
  v15 = _Block_copy(v18);
  v16 = v19;
  swift_retain(a2);
  swift_retain(v12);
  swift_release(v16);
  objc_msgSend(v13, "fetchCustodianRecoveryCodeConfigurationWithCompletion:", v15);
  _Block_release(v15);
  return swift_release(v12);
}

void sub_10007C1EC(uint64_t a1, char a2, void (*a3)(id, uint64_t))
{
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  void (*v13)(id, uint64_t);
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v43;
  id v44;
  uint64_t v45;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v19 = swift_errorRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138412290;
      v24 = _convertErrorToNSError(_:)(a1);
      v44 = (id)v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *v23 = v24;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to fetch Custodian recovery configuration with error: %@", v22, 0xCu);
      v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v5 = objc_allocWithZone((Class)AACustodianRecoveryConfiguration);
    swift_bridgeObjectRetain(a1);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v5, "initWithConfigurationDictionary:", isa);

    if ((uint64_t)objc_msgSend(v7, "codeLength") <= 0)
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v26 = type metadata accessor for Logger(0);
      sub_100005288(v26, (uint64_t)qword_1002A89D8);
      swift_bridgeObjectRetain(a1);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v44 = (id)v31;
        *(_DWORD *)v30 = 136315138;
        swift_bridgeObjectRetain(a1);
        v33 = Dictionary.description.getter(v32, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
        v35 = v34;
        sub_1000057B0(a1, 0);
        v43 = sub_1001DEF4C(v33, v35, (uint64_t *)&v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
        swift_bridgeObjectRelease(v35);
        sub_1000057B0(a1, 0);
        sub_1000057B0(a1, 0);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "IdMS came back with a result, but codeLength was missing or 0: %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        sub_1000057B0(a1, 0);
        sub_1000057B0(a1, 0);
      }

      type metadata accessor for AACustodianError(0);
      v38 = v37;
      v43 = -7009;
      v39 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v40 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v44, &v43, v39, v38, v40);
      v41 = v44;
      a3(0, (uint64_t)v44);

    }
    else
    {
      sub_1000057B0(a1, 0);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v8 = type metadata accessor for Logger(0);
      sub_100005288(v8, (uint64_t)qword_1002A89D8);
      v9 = v7;
      v10 = Logger.logObject.getter(v9);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = a3;
      if (os_log_type_enabled(v10, v12))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 138412290;
        v44 = v9;
        v16 = v9;
        v13 = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
        *v15 = v9;

        _os_log_impl((void *)&_mh_execute_header, v10, v12, "IdMS came back with configuration: %@", v14, 0xCu);
        v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v15, 1, v17);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

      }
      v36 = v9;
      v13(v9, 0);

    }
  }
}

uint64_t sub_10007C80C(uint64_t a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v10;
  uint64_t v11;

  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject(a4, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  swift_retain(a1);
  a6(a5, v11);
  swift_release(a1);
  return swift_release(v11);
}

uint64_t sub_10007C88C(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  id v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  os_log_t log;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89D8);
    v18 = a4;
    v19 = sub_100088B38(a1, a2, 1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      v23 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v22 = 138412546;
      v29 = a2;
      v30 = (uint64_t)v18;
      v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v23 = v18;

      *(_WORD *)(v22 + 12) = 2112;
      v25 = _convertErrorToNSError(_:)(a1);
      v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      v23[1] = v25;
      a2 = v29;
      sub_100041178(a1, v29, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to generate code for context: %@ with error: %@", (uint8_t *)v22, 0x16u);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 2, v26);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

      sub_100041178(a1, a2, 1);
    }

    swift_errorRetain(a1);
    a5(0, 0, a1);
    sub_100041178(a1, a2, 1);
    return sub_100041178(a1, a2, 1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v10 = a4;
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      log = (os_log_t)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v30 = (uint64_t)v10;
      v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      log->isa = (Class)v10;

      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Successfully generated code for context: %@", v14, 0xCu);
      v16 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(log, 1, v16);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    return a5(a1, a2, 0);
  }
}

uint64_t sub_10007CC8C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t inited;
  unint64_t v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _BYTE v29[56];

  v4 = v3;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = a3;
    v27 = v4;
    v13 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    v28 = v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    *v13 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting Custodian recovery verification with context: %@", v12, 0xCu);
    v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v13, 1, v15);
    v16 = v13;
    a3 = v26;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  objc_msgSend(v9, "isDataOnlyRecovery", v26, v27, v28);
  v17 = objc_allocWithZone((Class)type metadata accessor for CustodianRecoveryAnalyticsEvent(0));
  v18 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v18, v29);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000010020AC90;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v20 = sub_10001612C(inited);
  v21 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000028, 0x800000010020AC60, v20);
  v22 = (_QWORD *)swift_allocObject(&unk_1002630C0, 40, 7);
  v22[2] = v21;
  v22[3] = a2;
  v22[4] = a3;
  v23 = (_QWORD *)*sub_10000732C((_QWORD *)(v4 + 304), *(_QWORD *)(v4 + 328));
  swift_retain(v22);
  v24 = v21;
  swift_retain(a3);
  sub_10014B1F0(v9, v23, (void (*)(void *, void *))sub_100083A68, (uint64_t)v22);

  return swift_release_n(v22, 2);
}

uint64_t sub_10007CF44(id a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id, uint64_t))
{
  id v7;
  char v8;
  void *v9;

  if (!a1 || (v7 = objc_msgSend(a1, "custodianRecoveryToken")) == 0)
  {
    v8 = 0;
    if (!a2)
      goto LABEL_4;
LABEL_6:
    v9 = (void *)_convertErrorToNSError(_:)(a2);
    goto LABEL_7;
  }

  v8 = 1;
  if (a2)
    goto LABEL_6;
LABEL_4:
  v9 = 0;
LABEL_7:
  sub_1000B9E9C(v8, v9);

  return a4(a1, a2);
}

void sub_10007CFF4(void *a1, char a2, void (*a3)(void *, void *))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89D8);
    v6 = swift_errorRetain(a1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v11 = _convertErrorToNSError(_:)(a1);
      v28 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v10 = v11;
      sub_100066B94(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Code validation completed with error: %@", v9, 0xCu);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_100066B94(a1, 1);
    }

    swift_errorRetain(a1);
    v23 = 0;
    v24 = a1;
  }
  else
  {
    v13 = qword_10028ADC8;
    v14 = a1;
    if (v13 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v16 = v14;
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v28 = (uint64_t)v16;
      v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v26 = a1;
      sub_100066B94(a1, 0);
      sub_100066B94(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Code validation completed with context: %@", v20, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v22);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_100066B94(a1, 0);
      sub_100066B94(a1, 0);
    }

    v25 = v16;
    v23 = a1;
    v24 = 0;
  }
  a3(v23, v24);
  sub_100066B94(a1, a2 & 1);
  sub_100066B94(a1, a2 & 1);
}

uint64_t sub_10007D38C(uint64_t a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  id v14;

  v12 = _Block_copy(aBlock);
  v13 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v13 + 16) = v12;
  v14 = a3;
  swift_retain(a1);
  a7(v14, a6, v13);

  swift_release(a1);
  return swift_release(v13);
}

uint64_t sub_10007D420(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = v4;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A89D8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v12, v14))
  {
    v20 = a3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v22 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a2);
    v21 = sub_1001DEF4C(a1, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "Fetching existing custodian recovery token for sessionID: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v17 = v15;
    a3 = v20;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10000732C((_QWORD *)(v5 + 184), *(_QWORD *)(v5 + 208));
  v18 = (_QWORD *)swift_allocObject(&unk_100263098, 48, 7);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  sub_1001C1444(a1, a2, (uint64_t)sub_100083A58, (uint64_t)v18);
  return swift_release(v18);
}

uint64_t sub_10007D63C(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  NSString v40;
  id v41;
  id v42;
  NSObject *v43;
  __n128 v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  void *v56;

  v10 = type metadata accessor for CustodianRecoverySessionRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v17, &qword_10028E7F0);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    v18 = *v17;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v20 = swift_bridgeObjectRetain_n(a3, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v54 = a4;
      v25 = v24;
      v56 = (void *)v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(a3);
      v55 = sub_1001DEF4C(a2, a3, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No record found for the requested SessionID: %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v26 = v25;
      a4 = v54;
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    swift_errorRetain(v18);
    a4(0, v18);
    swift_errorRelease(v18);
    return swift_errorRelease(v18);
  }
  else
  {
    sub_10003B730((uint64_t)v17, (uint64_t)v13, type metadata accessor for CustodianRecoverySessionRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89D8);
    v28 = swift_bridgeObjectRetain_n(a3, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v53 = a5;
    v54 = a4;
    if (v31)
    {
      v52 = a2;
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v56 = (void *)v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(a3);
      v55 = sub_1001DEF4C(v52, a3, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found record matching sessionID: %s, getting token", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      v34 = swift_bridgeObjectRelease_n(a3, 2);
    }
    v36 = *(_QWORD *)&v13[*(int *)(v10 + 44) + 8];
    if (v36)
    {
      v37 = *(_QWORD *)&v13[*(int *)(v10 + 32) + 8];
      v38 = objc_allocWithZone((Class)AACustodianPasswordResetInformation);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
      v41 = objc_msgSend(v38, "initWithRecoveryToken:ownerAppleID:", v39, v40);

      v42 = v41;
      v54(v41, 0);

    }
    else
    {
      v43 = Logger.logObject.getter(v34);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v43, (os_log_type_t)v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v45, "Record did not contain CRT, failing...", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v48 = v47;
      v55 = -7003;
      v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v50 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v56, &v55, v49, v48, v50);
      v42 = v56;
      v54(0, v56);
    }

    return sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_10007DC04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = v4;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A89D8);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v12, v14))
  {
    v21 = a3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v23 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain(a2);
    v22 = sub_1001DEF4C(a1, a2, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "Fetching existing custodian recovery keys for sessionID: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v17 = v15;
    a3 = v21;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_10000732C((_QWORD *)(v5 + 184), *(_QWORD *)(v5 + 208));
  v18 = swift_allocObject(&unk_100262F30, 24, 7);
  swift_weakInit(v18 + 16, v5);
  v19 = (_QWORD *)swift_allocObject(&unk_100263070, 56, 7);
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = a3;
  v19[5] = a4;
  v19[6] = v18;
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  swift_retain(v18);
  sub_1001C1444(a1, a2, (uint64_t)sub_100083A1C, (uint64_t)v19);
  swift_release(v18);
  return swift_release(v19);
}

uint64_t sub_10007DE58(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  NSObject *v58;
  __n128 v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t Strong;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;
  uint64_t v72;

  v68 = a6;
  v69 = a2;
  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecoverySessionRecord(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v18, v19);
  v21 = (uint64_t *)((char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v21, &qword_10028E7F0);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    v22 = *v21;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v24 = swift_bridgeObjectRetain_n(a3, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = a3;
      v29 = swift_slowAlloc(32, -1);
      v70[0] = v29;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain(v28);
      v71 = sub_1001DEF4C(v69, v28, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No record found for the requested SessionID: %s", v27, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    swift_errorRetain(v22);
    a4(0, v22);
    swift_errorRelease(v22);
    return swift_errorRelease(v22);
  }
  else
  {
    sub_10003B730((uint64_t)v21, (uint64_t)v17, type metadata accessor for CustodianRecoverySessionRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A89D8);
    v32 = swift_bridgeObjectRetain_n(a3, 2);
    v67 = v31;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(12, -1);
      v66 = a4;
      v36 = (uint8_t *)v35;
      v37 = swift_slowAlloc(32, -1);
      v65 = a5;
      v38 = v37;
      v70[0] = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(a3);
      v71 = sub_1001DEF4C(v69, a3, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Found record matching sessionID: %s, getting keys", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      v39 = v38;
      a5 = v65;
      swift_slowDealloc(v39, -1, -1);
      v40 = v36;
      a4 = v66;
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      v41 = swift_bridgeObjectRelease_n(a3, 2);
    }
    if (*(_QWORD *)&v17[*(int *)(v14 + 36) + 8] >> 60 == 15)
    {
      v43 = Logger.logObject.getter(v41);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v43, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v45, "Record did not contain RKC, seems to be a non CDP account ?...", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v48 = v47;
      v71 = -7003;
      v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v50 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v70, &v71, v49, v48, v50);
      v51 = (void *)v70[0];
      a4(0, v70[0]);

    }
    else
    {
      v52 = a3;
      v53 = (uint64_t)a4;
      v54 = v68 + 16;
      sub_100024A20((uint64_t)&v17[*(int *)(v14 + 48)], (uint64_t)v13, (uint64_t *)&unk_1002904F0);
      v55 = type metadata accessor for UUID(0);
      v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v13, 1, v55);
      v57 = sub_100004934((uint64_t)v13, (uint64_t *)&unk_1002904F0);
      if (v56 == 1)
      {
        v58 = Logger.logObject.getter(v57);
        v60 = static os_log_type_t.default.getter(v59);
        if (os_log_type_enabled(v58, v60))
        {
          v61 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, v60, "decoupleCRK: CustodianRecoverySessionRecord does not contain otCustodianID, either using first created CRK or custodian device running pre DawnburstE", v61, 2u);
          swift_slowDealloc(v61, -1, -1);
        }

      }
      swift_beginAccess(v54, v70, 0, 0);
      Strong = swift_weakLoadStrong(v54);
      if (Strong)
      {
        v63 = Strong;
        sub_10007E5EC(v69, v52, (uint64_t)v17, v53, a5);
        swift_release(v63);
      }
    }
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_10007E4E8(uint64_t a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = _Block_copy(aBlock);
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v15 = v14;
  v16 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v16 + 16) = v12;
  swift_retain(a1);
  a7(v13, v15, a6, v16);
  swift_release(a1);
  swift_bridgeObjectRelease(v15);
  return swift_release(v16);
}

void sub_10007E594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void sub_10007E5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Class isa;
  NSString v16;
  NSString v17;
  uint64_t v18;
  NSString v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v6 = v5;
  v34 = a4;
  v8 = *v5;
  v32 = a5;
  v33 = v8;
  v9 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setCustodianUUID:", isa);

  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setRecoverySessionID:", v16);

  if (*(_QWORD *)(a3 + *(int *)(v9 + 44) + 8))
    v17 = String._bridgeToObjectiveC()();
  else
    v17 = 0;
  v18 = v32;
  objc_msgSend(v14, "setCustodianRecoveryToken:", v17);

  if (objc_msgSend(v14, "respondsToSelector:", Selector.init(_:)(0xD000000000000012, 0x800000010020AC10)))
  {
    if (*(_QWORD *)(a3 + *(int *)(v9 + 52) + 8))
      v19 = String._bridgeToObjectiveC()();
    else
      v19 = 0;
    objc_msgSend(v14, "setRecordBuildVersion:", v19);

  }
  v20 = (void **)sub_10000732C(v6 + 8, v6[11]);
  sub_100027FE8(a3, (uint64_t)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoverySessionRecord);
  v21 = *(unsigned __int8 *)(v10 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_100262FF8, v24 + 8, v21 | 7);
  sub_10003B730((uint64_t)v13, v25 + v22, type metadata accessor for CustodianRecoverySessionRecord);
  v26 = (_QWORD *)(v25 + v23);
  *v26 = v34;
  v26[1] = v18;
  *(_QWORD *)(v25 + v24) = v33;
  v27 = *v20;
  v28 = swift_allocObject(&unk_100263020, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_10008393C;
  *(_QWORD *)(v28 + 24) = v25;
  aBlock[4] = sub_1000839AC;
  v36 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10013DB54;
  aBlock[3] = &unk_100263038;
  v29 = _Block_copy(aBlock);
  v30 = v36;
  swift_retain(v18);
  swift_retain(v25);
  swift_release(v30);
  objc_msgSend(v27, "fetchCustodianDataRecoveryKeyWithContext:completion:", v14, v29);
  _Block_release(v29);
  swift_release(v25);

}

void sub_10007E8D4(uint64_t a1, char a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  NSData v52;
  NSUUID v53;
  NSString v54;
  id v55;
  Class v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  Class isa;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(id, uint64_t);
  _QWORD v66[2];
  void *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v19 = swift_errorRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138412290;
      v24 = _convertErrorToNSError(_:)(a1);
      v67 = (void *)v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v23 = v24;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to fetch custodian recovery wrapping key with error: %@", v22, 0xCu);
      v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v25);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a4(0, a1);
    sub_1000057B0(a1, 1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    strcpy((char *)v66, "wrappingKeyRKC");
    HIBYTE(v66[1]) = -18;
    sub_1000057BC(a1, 0);
    AnyHashable.init<A>(_:)(&v67, v66, &type metadata for String, &protocol witness table for String, v15);
    if (*(_QWORD *)(a1 + 16) && (v16 = sub_10010AAE0((uint64_t)&v67), (v17 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v69);
    }
    else
    {
      v69 = 0u;
      v70 = 0u;
    }
    sub_1000839B4((uint64_t)&v67);
    if (*((_QWORD *)&v70 + 1))
    {
      if ((swift_dynamicCast(v66, &v69, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v26 = v66[1];
        v63 = Data.init(base64Encoded:options:)(v66[0], v66[1], 0);
        v28 = v27;
        swift_bridgeObjectRelease(v26);
        if (v28 >> 60 != 15)
        {
          v29 = v28;
          v64 = a5;
          v65 = a4;
          v30 = type metadata accessor for CustodianRecoverySessionRecord(0);
          v31 = a3 + *(int *)(v30 + 36);
          v32 = *(_QWORD *)(v31 + 8);
          if (v32 >> 60 != 15)
          {
            v48 = v30;
            v49 = *(_QWORD *)v31;
            sub_100014534(*(_QWORD *)v31, *(_QWORD *)(v31 + 8));
            sub_1000057B0(a1, 0);
            sub_100014534(v49, v32);
            sub_100014534(v63, v28);
            sub_1001E4FB8((uint64_t)v14);
            v50 = (_QWORD *)(a3 + *(int *)(v48 + 52));
            v51 = v50[1];
            v60[1] = *v50;
            swift_bridgeObjectRetain(v51);
            v62 = v49;
            isa = Data._bridgeToObjectiveC()().super.isa;
            v52.super.isa = Data._bridgeToObjectiveC()().super.isa;
            v53.super.isa = UUID._bridgeToObjectiveC()().super.isa;
            if (v51)
            {
              v54 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v51);
            }
            else
            {
              v54 = 0;
            }
            v55 = objc_allocWithZone((Class)AACustodianDataRecoveryKeys);
            v56 = isa;
            v57 = objc_msgSend(v55, "initWithWrappedRKC:wrappingKey:custodianUUID:recordBuildVersion:", isa, v52.super.isa, v53.super.isa, v54);

            (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
            v58 = v63;
            sub_1000144D8(v63, v29);
            v59 = v62;
            sub_1000144D8(v62, v32);
            v65(v57, 0);

            sub_1000144D8(v59, v32);
            sub_1000144D8(v58, v29);
            return;
          }
          sub_1000144D8(v63, v28);
          a5 = v64;
          a4 = v65;
        }
      }
    }
    else
    {
      sub_100004934((uint64_t)&v69, (uint64_t *)&unk_10028E7E0);
    }
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89D8);
    swift_bridgeObjectRetain(a1);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v67 = (void *)v38;
      *(_DWORD *)v37 = 136315138;
      v65 = a4;
      swift_bridgeObjectRetain(a1);
      v64 = a5;
      v40 = Dictionary.description.getter(v39, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
      v42 = v41;
      sub_1000057B0(a1, 0);
      *(_QWORD *)&v69 = sub_1001DEF4C(v40, v42, (uint64_t *)&v67);
      a4 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, (char *)&v69 + 8);
      swift_bridgeObjectRelease(v42);
      sub_1000057B0(a1, 0);
      sub_1000057B0(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Could not parse wrapping key from result dictionary: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 0);
      sub_1000057B0(a1, 0);
    }

    type metadata accessor for AACustodianError(0);
    v44 = v43;
    *(_QWORD *)&v69 = -7009;
    v45 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v46 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v67, &v69, v45, v44, v46);
    v47 = v67;
    a4(0, (uint64_t)v67);

  }
}

uint64_t sub_10007EFAC(uint64_t a1, int a2, void *a3, void *aBlock, void (*a5)(id, uint64_t, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  swift_retain(a1);
  a5(v9, a1, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_release(a1);
}

uint64_t sub_10007F020(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v17;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000732C((_QWORD *)(v3 + 184), *(_QWORD *)(v3 + 208));
  v12 = objc_msgSend(a1, "custodianID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  v13 = swift_allocObject(&unk_100262F30, 24, 7);
  swift_weakInit(v13 + 16, v3);
  v14 = (_QWORD *)swift_allocObject(&unk_100262F58, 48, 7);
  v14[2] = a1;
  v14[3] = v13;
  v14[4] = a2;
  v14[5] = a3;
  v15 = a1;
  swift_retain(v13);
  swift_retain(a3);
  sub_1001BFD24((uint64_t)v11, (uint64_t)sub_100083578, (uint64_t)v14);
  swift_release(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return swift_release(v13);
}

uint64_t sub_10007F168(uint64_t a1, void *a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  void (*v50)(_QWORD);
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  uint8_t *v62;
  id v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint8_t *v73;
  int *v75;
  id v76;
  int v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t Strong;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t (**v106)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v107;
  uint64_t *v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t (**v141)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  unint64_t v148;
  uint64_t v149;
  id v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  NSString v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  uint64_t v168;
  NSObject *v169;
  __n128 v170;
  os_log_type_t v171;
  uint8_t *v172;
  uint8_t *v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  void *v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  _QWORD v186[2];
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(_QWORD);
  char *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210[4];
  uint64_t v211;
  uint64_t v212;

  v205 = a5;
  v9 = type metadata accessor for UUID(0);
  v203 = *(_QWORD *)(v9 - 8);
  v204 = v9;
  __chkstk_darwin(v9, v10);
  v201 = (char *)v186 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v199 = *((_QWORD *)v206 - 1);
  v12 = *(_QWORD *)(v199 + 64);
  v14 = __chkstk_darwin(v206, v13);
  v193 = (_QWORD *)((char *)v186 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __chkstk_darwin(v14, v15);
  v195 = (uint64_t)v186 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)v186 - v20;
  v23 = __chkstk_darwin(v19, v22);
  v196 = (char *)v186 - v24;
  v26 = __chkstk_darwin(v23, v25);
  v192 = (uint64_t)v186 - v27;
  v29 = __chkstk_darwin(v26, v28);
  v198 = (char *)v186 - v30;
  v32 = __chkstk_darwin(v29, v31);
  v197 = (uint64_t)v186 - v33;
  v35 = __chkstk_darwin(v32, v34);
  v194 = (_QWORD *)((char *)v186 - v36);
  __chkstk_darwin(v35, v37);
  v39 = (char *)v186 - v38;
  v40 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v40, v41);
  v43 = (_QWORD *)((char *)v186 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v43, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v43, v40) == 1)
  {
    v44 = *v43;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v45 = type metadata accessor for Logger(0);
    sub_100005288(v45, (uint64_t)qword_1002A89D8);
    v46 = swift_errorRetain(v44);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = a4;
      v51 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = 138412290;
      v52 = _convertErrorToNSError(_:)(v44);
      v209 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, v210);
      *v51 = v52;
      swift_errorRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to fetch custodianship info: %@", v49, 0xCu);
      v53 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v51, 1, v53);
      v54 = v51;
      a4 = v50;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_errorRelease(v44);
    }

    swift_errorRetain(v44);
    a4(v44);
    swift_errorRelease(v44);
    return swift_errorRelease(v44);
  }
  v191 = v21;
  sub_10003B730((uint64_t)v43, (uint64_t)v39, type metadata accessor for CustodianshipInfoRecord);
  v202 = v39;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v200 = a3 + 16;
  v55 = type metadata accessor for Logger(0);
  v56 = sub_100005288(v55, (uint64_t)qword_1002A89D8);
  v57 = a2;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.info.getter();
  v60 = os_log_type_enabled(v58, v59);
  v190 = a4;
  v188 = v55;
  if (v60)
  {
    v61 = swift_slowAlloc(12, -1);
    v189 = v56;
    v62 = (uint8_t *)v61;
    v187 = swift_slowAlloc(32, -1);
    v209 = v187;
    *(_DWORD *)v62 = 136315138;
    v186[1] = v62 + 4;
    v63 = objc_msgSend(v57, "custodianID");
    v64 = v57;
    v65 = v201;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v63);

    v66 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v67 = v204;
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v204, v66);
    v70 = v69;
    v71 = v65;
    v57 = v64;
    (*(void (**)(char *, uint64_t))(v203 + 8))(v71, v67);
    v211 = sub_1001DEF4C(v68, v70, &v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v211, &v212);

    swift_bridgeObjectRelease(v70);
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Found custodianship info: %s", v62, 0xCu);
    v72 = v187;
    swift_arrayDestroy(v187, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    v73 = v62;
    v56 = v189;
    swift_slowDealloc(v73, -1, -1);

  }
  else
  {

  }
  v75 = v206;
  v76 = objc_msgSend(v57, "isAccepted");
  v77 = (int)v76;
  v78 = Logger.logObject.getter(v76);
  v79 = static os_log_type_t.info.getter();
  v80 = os_log_type_enabled(v78, v79);
  if (v77)
  {
    if (v80)
    {
      v81 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Accepting invitation.", v81, 2u);
      swift_slowDealloc(v81, -1, -1);
    }

    v82 = v200;
    swift_beginAccess(v200, &v211, 0, 0);
    Strong = swift_weakLoadStrong(v82);
    if (!Strong)
      goto LABEL_42;
    v196 = v57;
    v195 = Strong;
    v84 = sub_10000732C((_QWORD *)(Strong + 224), *(_QWORD *)(Strong + 248));
    v85 = *v84;
    v193 = sub_10000732C((_QWORD *)(*v84 + 56), *(_QWORD *)(*v84 + 80));
    v86 = (uint64_t)v202;
    v87 = v197;
    sub_100027FE8((uint64_t)v202, v197, type metadata accessor for CustodianshipInfoRecord);
    v88 = v204;
    v89 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    v90 = (uint64_t)v198;
    v89(v198, v87, v204);
    v89((char *)(v90 + v75[5]), v87 + v75[5], v88);
    v91 = v75[8];
    v92 = *(_QWORD *)(v87 + v91);
    v93 = *(_QWORD *)(v87 + v91 + 8);
    v94 = (uint64_t *)(v90 + v91);
    *v94 = v92;
    v94[1] = v93;
    v95 = v75[6];
    v96 = *(_QWORD *)(v87 + v95);
    v97 = *(_QWORD *)(v87 + v95 + 8);
    v98 = (_QWORD *)(v90 + v95);
    *v98 = v96;
    v98[1] = v97;
    *(_QWORD *)(v90 + v75[7]) = 2;
    LOBYTE(v88) = *(_BYTE *)(v87 + v75[9]);
    sub_10000F450(v92, v93);
    swift_bridgeObjectRetain(v97);
    sub_100028388(v87, type metadata accessor for CustodianshipInfoRecord);
    *(_BYTE *)(v90 + v75[9]) = v88;
    v99 = v194;
    sub_10003B730(v90, (uint64_t)v194, type metadata accessor for CustodianshipInfoRecord);
    v100 = v86;
    v101 = v192;
    sub_100027FE8(v100, v192, type metadata accessor for CustodianshipInfoRecord);
    v102 = *(unsigned __int8 *)(v199 + 80);
    v103 = (v102 + 48) & ~v102;
    v104 = (v12 + v103 + 7) & 0xFFFFFFFFFFFFFFF8;
    v105 = (_QWORD *)swift_allocObject(&unk_100262FD0, v104 + 16, v102 | 7);
    v105[2] = v85;
    v105[3] = sub_10008087C;
    v105[4] = 0;
    v105[5] = 0;
    sub_10003B730(v101, (uint64_t)v105 + v103, type metadata accessor for CustodianshipInfoRecord);
    v106 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v105 + v104);
    *v106 = sub_100080764;
    v106[1] = 0;
    v107 = qword_10028AF00;
    swift_retain(v85);
    if (v107 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*((_BYTE *)v99 + v75[9]) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v108 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v108 = &qword_1002A8C70;
    }
    v145 = *v108;
    v144 = v108[1];
    swift_bridgeObjectRetain(v144);
    v146 = sub_1001FD4C0(v145, v144);
    v147 = objc_msgSend(v146, "privateCloudDatabase");
    swift_bridgeObjectRelease(v144);

    sub_100054B5C((uint64_t)v99, v147, (uint64_t)sub_10008368C, (uint64_t)v105);
    swift_release(v105);

    sub_100028388((uint64_t)v99, type metadata accessor for CustodianshipInfoRecord);
    swift_release(v195);
    goto LABEL_41;
  }
  if (v80)
  {
    v109 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Declining invitation.", v109, 2u);
    swift_slowDealloc(v109, -1, -1);
  }

  v110 = (uint64_t)v202;
  v111 = (uint64_t)v196;
  sub_100027FE8((uint64_t)v202, (uint64_t)v196, type metadata accessor for CustodianshipInfoRecord);
  v112 = (uint64_t)v191;
  sub_100027FE8(v111, (uint64_t)v191, type metadata accessor for CustodianshipInfoRecord);
  v113 = *(unsigned __int8 *)(v199 + 80);
  v114 = (v113 + 16) & ~v113;
  v199 = v113 | 7;
  v115 = swift_allocObject(&unk_100262F80, v114 + v12, v113 | 7);
  sub_10003B730(v111, v115 + v114, type metadata accessor for CustodianshipInfoRecord);
  v116 = v200;
  swift_beginAccess(v200, &v211, 0, 0);
  v117 = swift_weakLoadStrong(v116);
  if (v117)
  {
    v118 = v117;
    v196 = v57;
    v189 = v56;
    v192 = ~v113;
    sub_100006CA4(v117 + 224, (uint64_t)&v209);
    swift_release(v118);
    v187 = *sub_10000732C(&v209, v210[2]);
    v194 = sub_10000732C((_QWORD *)(v187 + 56), *(_QWORD *)(v187 + 80));
    v119 = v115;
    v120 = v197;
    sub_100027FE8(v110, v197, type metadata accessor for CustodianshipInfoRecord);
    v121 = (uint64_t *)(v112 + v206[6]);
    v122 = *v121;
    v123 = v121[1];
    v124 = v204;
    v125 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    v126 = (uint64_t)v198;
    v125(v198, v120, v204);
    v125((char *)(v126 + v206[5]), v120 + v206[5], v124);
    v127 = v206[8];
    v128 = *(_QWORD *)(v120 + v127);
    v129 = *(_QWORD *)(v120 + v127 + 8);
    v130 = (uint64_t *)(v126 + v127);
    *v130 = v128;
    v130[1] = v129;
    v131 = (_QWORD *)(v126 + v206[6]);
    *v131 = v122;
    v131[1] = v123;
    *(_QWORD *)(v126 + v206[7]) = 4;
    LOBYTE(v122) = *(_BYTE *)(v120 + v206[9]);
    swift_retain(v119);
    swift_bridgeObjectRetain(v123);
    v132 = v110;
    v75 = v206;
    sub_10000F450(v128, v129);
    v133 = v120;
    v134 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v119;
    sub_100028388(v133, type metadata accessor for CustodianshipInfoRecord);
    *(_BYTE *)(v126 + v75[9]) = v122;
    v135 = v195;
    sub_10003B730(v126, v195, type metadata accessor for CustodianshipInfoRecord);
    v136 = v193;
    sub_100027FE8(v132, (uint64_t)v193, type metadata accessor for CustodianshipInfoRecord);
    v137 = (v113 + 48) & v192;
    v138 = (v12 + v137 + 7) & 0xFFFFFFFFFFFFFFF8;
    v139 = (_QWORD *)swift_allocObject(&unk_100262FA8, v138 + 16, v199);
    v140 = v187;
    v139[2] = v187;
    v139[3] = sub_100080490;
    v139[4] = 0;
    v139[5] = 0;
    sub_10003B730((uint64_t)v136, (uint64_t)v139 + v137, type metadata accessor for CustodianshipInfoRecord);
    v141 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v139 + v138);
    *v141 = sub_10008363C;
    v141[1] = v134;
    v142 = qword_10028AF00;
    swift_retain(v134);
    swift_retain(v140);
    if (v142 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(v135 + v75[9]) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v143 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v143 = &qword_1002A8C70;
    }
    v149 = *v143;
    v148 = v143[1];
    swift_bridgeObjectRetain(v148);
    v150 = sub_1001FD4C0(v149, v148);
    v151 = objc_msgSend(v150, "privateCloudDatabase");
    swift_bridgeObjectRelease(v148);

    sub_100054B5C(v135, v151, (uint64_t)sub_10008368C, (uint64_t)v139);
    swift_release(v139);

    sub_100028388(v135, type metadata accessor for CustodianshipInfoRecord);
    swift_release(v134);
    sub_100028388((uint64_t)v191, type metadata accessor for CustodianshipInfoRecord);
    swift_release(v134);
    sub_100006F58(&v209);
LABEL_41:
    v57 = v196;
    goto LABEL_42;
  }
  swift_release(v115);
  sub_100028388(v112, type metadata accessor for CustodianshipInfoRecord);
  v75 = v206;
LABEL_42:
  v152 = v200;
  swift_beginAccess(v200, &v209, 0, 0);
  v153 = swift_weakLoadStrong(v152);
  if (v153)
  {
    v154 = v153;
    v155 = v57;
    v156 = *(_QWORD *)&v202[v75[6] + 8];
    sub_10000732C((_QWORD *)(v153 + 144), *(_QWORD *)(v153 + 168));
    swift_bridgeObjectRetain(v156);
    v157 = v205;
    swift_retain(v205);
    v158 = objc_msgSend(v155, "custodianID");
    v159 = v201;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v158);

    LOBYTE(v155) = objc_msgSend(v155, "isAccepted");
    v160 = type metadata accessor for CustodianInvitationResponseMessage(0);
    v161 = swift_allocObject(v160, *(unsigned int *)(v160 + 48), *(unsigned __int16 *)(v160 + 52));
    *(_BYTE *)(v161 + 16) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v203 + 32))(v161 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v159, v204);
    *(_BYTE *)(v161 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = (_BYTE)v155;
    v162 = objc_allocWithZone((Class)AAMessagingDestination);
    swift_bridgeObjectRetain(v156);
    v163 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v156);
    v164 = objc_msgSend(v162, "initWithHandle:", v163);

    if (v164)
    {
      v166 = qword_10028ADB0;
      v167 = v164;
      if (v166 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v168 = sub_100005288(v188, (uint64_t)qword_1002A8990);
      v169 = Logger.logObject.getter(v168);
      v171 = static os_log_type_t.default.getter(v170);
      if (os_log_type_enabled(v169, v171))
      {
        v172 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v172 = 0;
        _os_log_impl((void *)&_mh_execute_header, v169, v171, "Destination is valid!", v172, 2u);
        v173 = v172;
        v157 = v205;
        swift_slowDealloc(v173, -1, -1);
      }

      v174 = sub_1001B2728(v161, v167);
      v183 = Logger.logObject.getter(v174);
      v184 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v183, v184))
      {
        v185 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v185 = 0;
        _os_log_impl((void *)&_mh_execute_header, v183, v184, "Invitation response sent.", v185, 2u);
        swift_slowDealloc(v185, -1, -1);
      }

      v190(0);
      swift_release(v157);
      swift_release(v161);

    }
    else
    {
      v175 = Logger.logObject.getter(v165);
      v176 = static os_log_type_t.error.getter(v175);
      if (os_log_type_enabled(v175, v176))
      {
        v177 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v177 = 0;
        _os_log_impl((void *)&_mh_execute_header, v175, v176, "Unable to generate destination from handle.", v177, 2u);
        swift_slowDealloc(v177, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v179 = v178;
      v207 = -7004;
      v180 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v181 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v208, &v207, v180, v179, v181);
      v182 = v208;
      sub_1000815D0((uint64_t)v208, v190, v157, "Failed to send invitation result message: %@", "Invitation response sent.");
      swift_release(v157);
      swift_release(v161);

    }
    swift_release(v154);
    swift_bridgeObjectRelease(v156);
  }
  return sub_100028388((uint64_t)v202, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100080360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v21;

  v6 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v9, type metadata accessor for CustodianshipInfoRecord);
  v10 = (uint64_t *)(a2 + v6[6]);
  v12 = *v10;
  v11 = v10[1];
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(a3, v9, v13);
  v14(a3 + v6[5], &v9[v6[5]], v13);
  v15 = v6[8];
  v16 = *(_QWORD *)&v9[v15];
  v17 = *(_QWORD *)&v9[v15 + 8];
  v18 = (uint64_t *)(a3 + v15);
  *v18 = v16;
  v18[1] = v17;
  v19 = (_QWORD *)(a3 + v6[6]);
  *v19 = v12;
  v19[1] = v11;
  *(_QWORD *)(a3 + v6[7]) = 4;
  LOBYTE(v12) = v9[v6[9]];
  swift_bridgeObjectRetain(v11);
  sub_10000F450(v16, v17);
  result = sub_100028388((uint64_t)v9, type metadata accessor for CustodianshipInfoRecord);
  *(_BYTE *)(a3 + v6[9]) = v12;
  return result;
}

id sub_100080490(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v5, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v6 = *v5;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(v6);
      v22 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      *v12 = v13;
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error updating custodianship %@", v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Custodianship status updated!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100004934((uint64_t)v5, &qword_10028C450);
  }
  return objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
}

uint64_t sub_100080764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(uint64_t, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  uint64_t v19;

  v4 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v7, type metadata accessor for CustodianshipInfoRecord);
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v9(a2, v7, v8);
  v9(a2 + v4[5], &v7[v4[5]], v8);
  v10 = v4[8];
  v11 = *(_QWORD *)&v7[v10];
  v12 = *(_QWORD *)&v7[v10 + 8];
  v13 = (uint64_t *)(a2 + v10);
  *v13 = v11;
  v13[1] = v12;
  v14 = v4[6];
  v15 = *(_QWORD *)&v7[v14];
  v16 = *(_QWORD *)&v7[v14 + 8];
  v17 = (_QWORD *)(a2 + v14);
  *v17 = v15;
  v17[1] = v16;
  *(_QWORD *)(a2 + v4[7]) = 2;
  LOBYTE(v9) = v7[v4[9]];
  sub_10000F450(v11, v12);
  swift_bridgeObjectRetain(v16);
  result = sub_100028388((uint64_t)v7, type metadata accessor for CustodianshipInfoRecord);
  *(_BYTE *)(a2 + v4[9]) = (_BYTE)v9;
  return result;
}

void sub_10008087C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v5, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v6 = *v5;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(v6);
      v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v12 = v13;
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error updating custodianship %@", v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  else
  {
    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "CustodianRequest record updated!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100004934((uint64_t)v5, &qword_10028C450);
  }
}

uint64_t sub_100080B74(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v10;
  uint64_t v11;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Completed triggered sync of trusted contacts with CloudKit. Success: %{BOOL}d.", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a2(0);
}

void sub_100080CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;

  v4 = v3;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Displaying trusted contact flow using Springboard.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(void **)(v4 + 384);
  v14 = swift_allocObject(&unk_100262EE0, 32, 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  v17[4] = sub_1000834F8;
  v18 = v14;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_1001DC548;
  v17[3] = &unk_100262EF8;
  v15 = _Block_copy(v17);
  v16 = v18;
  swift_retain(a3);
  swift_release(v16);
  objc_msgSend(v13, "presentModel:completion:", a1, v15);
  _Block_release(v15);
}

uint64_t sub_100080EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;

  v4 = v3;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Launching custodian invite UI.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + 184), *(_QWORD *)(v4 + 208));
  v13 = (_QWORD *)swift_allocObject(&unk_100262E68, 40, 7);
  v13[2] = v4;
  v13[3] = a2;
  v13[4] = a3;
  swift_retain(v4);
  swift_retain(a3);
  sub_1001BFD24(a1, (uint64_t)sub_1000834C4, (uint64_t)v13);
  return swift_release(v13);
}

uint64_t sub_100081000(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void ***v28;
  void **v29;
  uint64_t v30;
  id v31;
  Class isa;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void **v46;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[2];
  void **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  void **aBlock;
  _QWORD v60[4];
  uint64_t v61;

  v56 = a2;
  v57 = a3;
  v6 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CustodianshipInfoRecord(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)v52 - v16;
  v18 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v18, v19);
  v21 = (_QWORD *)((char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v21, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    v22 = *v21;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v29 = (void **)_convertErrorToNSError(_:)(v22);
      aBlock = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v60);
      *v28 = v29;
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to fetch custodianship info: %@", v27, 0xCu);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(v22);
    }

    swift_errorRetain(v22);
    v57(v22);
    swift_errorRelease(v22);
    return swift_errorRelease(v22);
  }
  else
  {
    sub_10003B730((uint64_t)v21, (uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
    sub_100027FE8((uint64_t)v17, (uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
    v31 = objc_allocWithZone((Class)AACustodianshipInfo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v33 = *(_QWORD *)&v14[*(int *)(v10 + 28)];
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v31, "initWithID:status:ownerHandle:", isa, v33, v34);

    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A89D8);
    v37 = v35;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (void **)swift_slowAlloc(32, -1);
      aBlock = v53;
      v54 = a4;
      *(_DWORD *)v40 = 136315138;
      v52[1] = v40 + 4;
      v41 = objc_msgSend(v37, "custodianID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

      v42 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v6, v42);
      v45 = v44;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v6);
      v58 = sub_1001DEF4C(v43, v45, (uint64_t *)&aBlock);
      a4 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &aBlock);

      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Custodianship info found: %s", v40, 0xCu);
      v46 = v53;
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    v48 = *(void **)(v56 + 384);
    v49 = swift_allocObject(&unk_100262E90, 32, 7);
    *(_QWORD *)(v49 + 16) = v57;
    *(_QWORD *)(v49 + 24) = a4;
    v60[3] = sub_1000834D0;
    v61 = v49;
    aBlock = _NSConcreteStackBlock;
    v60[0] = 1107296256;
    v60[1] = sub_1001DC548;
    v60[2] = &unk_100262EA8;
    v50 = _Block_copy(&aBlock);
    v51 = v61;
    swift_retain(a4);
    swift_release(v51);
    objc_msgSend(v48, "presentInvitationUIWithCustodianshipInfo:completion:", v37, v50);
    _Block_release(v50);

    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
  }
}

uint64_t sub_1000815D0(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void (*v13)(_QWORD);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89D8);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = a2;
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      v15 = _convertErrorToNSError(_:)(a1);
      v25 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      *v14 = v15;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 0xCu);
      v16 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v14, 1, v16);
      v17 = v14;
      a2 = v13;
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, a5, v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_100081874(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;

  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v18 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v18 + 16) = v17;
  swift_retain(a1);
  a7(v16, a6, v18);
  swift_release(a1);
  swift_release(v18);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t sub_10008196C(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0)
    return a3(a1, 0);
  swift_errorRetain(a1);
  a3(8, a1);
  return sub_10006AEB4(a1, 1);
}

uint64_t sub_100081BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t);
  id v46;
  id v47;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;

  v54 = a8;
  v55 = a5;
  v56 = a6;
  v57 = a7;
  v58 = a3;
  v59 = a4;
  v11 = sub_1000080B4(&qword_10028E848);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A8A08);
  v17 = swift_retain_n(a1, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v51 = v16;
    v20 = swift_slowAlloc(12, -1);
    v52 = v15;
    v21 = (uint8_t *)v20;
    v50 = swift_slowAlloc(32, -1);
    v62[0] = v50;
    *(_DWORD *)v21 = 136315138;
    v49[1] = v21 + 4;
    swift_beginAccess(a1 + 24, v61, 0, 0);
    v22 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v22);
    v23 = sub_1000080B4(&qword_10028E850);
    v24 = Dictionary.description.getter(v22, &type metadata for String, v23, &protocol witness table for String);
    v53 = v12;
    v25 = v11;
    v26 = a2;
    v28 = v27;
    swift_bridgeObjectRelease(v22);
    v29 = v24;
    v16 = v51;
    v60 = sub_1001DEF4C(v29, v28, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_release_n(a1, 2);
    v30 = v28;
    a2 = v26;
    v11 = v25;
    v12 = v53;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Errors from Repair custodians: %s", v21, 0xCu);
    v31 = v50;
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v21;
    v15 = v52;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v33 = sub_100005288(v16, (uint64_t)qword_1002A89D8);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "RepairCustodians: 2/2 Starting preflight", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__custodianPreflight, v11);
  Dependency.wrappedValue.getter(v62, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v37 = v63;
  v38 = v64;
  sub_10000732C(v62, v63);
  v39 = (_QWORD *)swift_allocObject(&unk_100263368, 72, 7);
  v39[2] = a1;
  v39[3] = a2;
  v40 = v55;
  v41 = v56;
  v39[4] = v55;
  v39[5] = v41;
  v42 = v57;
  v43 = v54;
  v39[6] = v57;
  v39[7] = v43;
  v39[8] = a9;
  v44 = *(_QWORD *)(v38 + 8);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), _QWORD *, uint64_t, uint64_t))(v44 + 16);
  v46 = v40;
  v47 = v41;
  swift_retain(v42);
  swift_retain(a9);
  swift_retain(a1);
  swift_retain(a2);
  v45(v58, v59, sub_100088A80, v39, v37, v44);
  swift_release(v39);
  return sub_100006F58(v62);
}

uint64_t sub_100081FDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE v27[24];
  _BYTE v28[24];
  _BYTE v29[24];

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100005288(v11, (uint64_t)qword_1002A89D8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "RepairCustodians: 2/2 Finished preflight", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }
  v16 = (uint64_t *)(a6 + 16);

  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "RepairCustodians: Posting Recovery Contact Changed Notification", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
  swift_beginAccess(a2 + 24, v29, 0, 0);
  v21 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v21);
  v23 = sub_1001A1574(v22);
  swift_release(v23);
  swift_bridgeObjectRelease(v21);
  sub_1000882B4(a4);
  objc_msgSend(a5, "unlock");
  swift_beginAccess(v16, v28, 0, 0);
  if (*v16)
  {
    swift_beginAccess(v16, v27, 1, 0);
    v24 = *v16;
    *v16 = 0;
    swift_unknownObjectRelease(v24);
  }
  return a7(0);
}

uint64_t sub_100082208(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __n128 v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a2);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v26 = a3;
    v27 = a4;
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v14 = swift_slowAlloc(32, -1);
    v29 = v14;
    *(_DWORD *)v12 = 136315394;
    type metadata accessor for UUID(0);
    v15 = swift_bridgeObjectRetain(a2);
    v16 = Array.description.getter(v15);
    v18 = v17;
    swift_bridgeObjectRelease(a2);
    v28 = sub_1001DEF4C(v16, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v12 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain(a1);
      v19 = _swift_stdlib_bridgeErrorToNSError(a1);
      v28 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    }
    else
    {
      v28 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      v19 = 0;
    }
    *v13 = v19;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RepairCustodians: 1/2 Finished repairing custodians: %s with error: %@", (uint8_t *)v12, 0x16u);
    v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v13, 1, v25);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    a4 = v27;
    a3 = v26;
    if (!a1)
      return a3();
LABEL_7:
    v29 = 0x3A726961706552;
    v30 = 0xE700000000000000;
    swift_errorRetain(a1);
    type metadata accessor for UUID(0);
    v21._countAndFlagsBits = Array.description.getter(v20);
    object = v21._object;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(object);
    v23 = v30;
    sub_100155AC4(v29, v30, a1, (uint64_t)a3, a4);
    swift_bridgeObjectRelease(v23);
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease_n(a2, 2);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a1)
    goto LABEL_7;
  return a3();
}

uint64_t sub_100082608(uint64_t a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  void *v6;
  uint64_t v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = swift_retain(a1);
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);
  return swift_release(a1);
}

void sub_100082664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  NSString v22;
  NSString v23;
  id v24;
  Class isa;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  _QWORD *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(_QWORD, _QWORD, _QWORD);
  id v42;
  uint64_t v43;
  _QWORD *v44;
  uint8_t *v45;
  uint64_t v46;
  void (**v47)(_QWORD, _QWORD, _QWORD);
  NSObject *v48;
  uint64_t v49;

  v3 = v2;
  v5 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v47 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v3 + 264), *(_QWORD *)(v3 + 288)) + 16), "aa_primaryAppleAccount");
  if (v14
    && (v15 = v14, v16 = objc_msgSend(v14, "aa_altDSID"), v15, v16))
  {
    v46 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v18 = v17;

    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v3 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v9);
    Dependency.wrappedValue.getter(&v48, v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianRepairCFUActionBeginEvent);
    v20 = v19;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v18);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v24 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v21, v22, v23);
    swift_bridgeObjectRelease(v18);

    sub_100006F58(&v48);
    if (v24)
    {
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v24, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      if (qword_10028ADE0 != -1)
        swift_once(&qword_10028ADE0, sub_100046DA0);
      v26 = type metadata accessor for Logger(0);
      sub_100005288(v26, (uint64_t)qword_1002A8A20);
      v27 = v24;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.debug.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = (_QWORD *)swift_slowAlloc(8, -1);
        v45 = v30;
        *(_DWORD *)v30 = 138412290;
        v48 = v27;
        v31 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
        v32 = v44;
        *v44 = v24;

        v33 = v45;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reporting Repair CFU Action End Event %@", v45, 0xCu);
        v34 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v32, 1, v34);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {

        v28 = v27;
      }
      v39 = v46;

      v40 = v3 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter;
      v41 = v47;
      ((void (**)(char *, uint64_t, uint64_t))v47)[2](v8, v40, v39);
      Dependency.wrappedValue.getter(&v48, v39);
      ((void (*)(char *, uint64_t))v41[1])(v8, v39);
      v42 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v42, "sendEvent:", v27);

      sub_100006F58(&v48);
    }
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100005288(v35, (uint64_t)qword_1002A8A20);
    v47 = (void (**)(_QWORD, _QWORD, _QWORD))Logger.logObject.getter(v36);
    v37 = static os_log_type_t.debug.getter(v47);
    if (os_log_type_enabled((os_log_t)v47, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v47, v37, "Account is nil. Not reporting Repair action begin Event.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

  }
}

id sub_100082B74(uint64_t a1, uint64_t a2)
{
  return sub_100082B9C(a1, a2, &kAACustodianRepairCFUActionEndEvent, "Account is nil. Not reporting Repair action end Event.");
}

id sub_100082B88(uint64_t a1, uint64_t a2)
{
  return sub_100082B9C(a1, a2, &kAACustodianRemoveEvent, "Account is nil. Not reporting Repair action begin Event.");
}

id sub_100082B9C(uint64_t a1, uint64_t a2, _QWORD *a3, const char *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _QWORD v31[5];

  v8 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v4 + 264), *(_QWORD *)(v4 + 288)) + 16), "aa_primaryAppleAccount");
  if (v13
    && (v14 = v13, v15 = objc_msgSend(v13, "aa_altDSID"), v14, v15))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v17 = v16;

    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v4 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v8);
    Dependency.wrappedValue.getter(v31, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)(*a3);
    v19 = v18;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v17);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v23 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v20, v21, v22);
    swift_bridgeObjectRelease(v17);

    sub_100006F58(v31);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A8A20);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, a4, v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    return 0;
  }
  return v23;
}

void sub_100082E30(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  Class isa;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  _QWORD v32[2];
  _QWORD *v33;
  uint8_t *v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;

  v4 = v3;
  v7 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v4 + 264), *(_QWORD *)(v4 + 288)) + 16), "aa_primaryAppleAccount");
  if (v12
    && (v13 = v12, v14 = objc_msgSend(v12, "aa_altDSID"), v13, v14))
  {

    if (a1)
    {
      v15 = a1;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v15, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      if (a3)
        a3 = (void *)_convertErrorToNSError(_:)(a3);
      objc_msgSend(v15, "populateUnderlyingErrorsStartingWithRootError:", a3);

      if (qword_10028ADE0 != -1)
        swift_once(&qword_10028ADE0, sub_100046DA0);
      v17 = type metadata accessor for Logger(0);
      sub_100005288(v17, (uint64_t)qword_1002A8A20);
      v18 = v15;
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.debug.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = (_QWORD *)swift_slowAlloc(8, -1);
        v34 = v21;
        *(_DWORD *)v21 = 138412290;
        v32[1] = v21 + 4;
        v36 = v18;
        v22 = v18;
        v35 = v18;
        v23 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        v24 = v33;
        *v33 = a1;

        v25 = v34;
        v18 = v35;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Reporting Repair CFU Action End Event %@", v34, 0xCu);
        v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v24, 1, v26);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v25, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v4 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter, v7);
      Dependency.wrappedValue.getter(&v36, v7);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v31 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v31, "sendEvent:", v18);

      sub_100006F58(&v36);
    }
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8A20);
    v35 = Logger.logObject.getter(v28);
    v29 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v29, "Account is nil. Not reporting Repair action begin Event.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
}

uint64_t sub_100083220()
{
  return type metadata accessor for CustodianDaemonService(0);
}

void sub_100083228(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[25];

  v24[0] = "(";
  v24[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v24[2] = "(";
  v24[3] = "(";
  v24[4] = "(";
  v24[5] = "(";
  v24[6] = "(";
  v24[7] = "(";
  v24[8] = "(";
  v24[9] = "(";
  v24[10] = &unk_10021AD90;
  v24[11] = "(";
  v24[12] = "(";
  v24[13] = &unk_10021ADA8;
  sub_100017464(319, &qword_10028E258, &qword_10028E260);
  if (v3 <= 0x3F)
  {
    v24[14] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028E268, &qword_10028E270);
    if (v5 <= 0x3F)
    {
      v24[15] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028E278, &qword_10028E280);
      if (v7 <= 0x3F)
      {
        v24[16] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
        if (v9 <= 0x3F)
        {
          v24[17] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028E288, (uint64_t *)&unk_10028E290);
          if (v11 <= 0x3F)
          {
            v24[18] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, (unint64_t *)&qword_100294A60, &qword_10028E2A0);
            if (v13 <= 0x3F)
            {
              v24[19] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028E2A8, &qword_10028E2B0);
              if (v15 <= 0x3F)
              {
                v24[20] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028E2B8, &qword_10028E2C0);
                if (v17 <= 0x3F)
                {
                  v24[21] = *(_QWORD *)(v16 - 8) + 64;
                  sub_100017464(319, &qword_10028E2C8, (uint64_t *)&unk_10028E2D0);
                  if (v19 <= 0x3F)
                  {
                    v24[22] = *(_QWORD *)(v18 - 8) + 64;
                    sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
                    if (v21 <= 0x3F)
                    {
                      v24[23] = *(_QWORD *)(v20 - 8) + 64;
                      sub_100017464(319, qword_100293830, (uint64_t *)&unk_10028C910);
                      if (v23 <= 0x3F)
                      {
                        v24[24] = *(_QWORD *)(v22 - 8) + 64;
                        swift_updateClassMetadata2(a1, 256, 25, v24, a1 + 80);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100083498()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000834C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100081000(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000834D0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000815D0(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Error occured displaying invite UI: %@", "Successfully displayed invite UI");
}

uint64_t sub_1000834F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000815D0(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Error occurred displaying Springboard UI: %@", "Successfully displayed Springboard UI.");
}

uint64_t sub_100083520()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100083544()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100083578(uint64_t a1)
{
  uint64_t v1;

  return sub_10007F168(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100083584()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10008363C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8) + 80);
  return sub_100080360(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_100083694()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100083774(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001E69E4(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1000837D0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoverySessionRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[9]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[10]), *(_QWORD *)(v6 + v1[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[11] + 8));
  v12 = v6 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_10008393C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for CustodianRecoverySessionRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10007E8D4(a1, v4, v2 + v6, *(void (**)(id, uint64_t))v7, *(_QWORD *)(v7 + 8));
}

void sub_1000839AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10004513C(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000839B4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

uint64_t sub_1000839E8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100083A1C(uint64_t a1)
{
  uint64_t v1;

  return sub_10007DE58(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100083A2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100083A58(uint64_t a1)
{
  uint64_t v1;

  return sub_10007D63C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100083A68(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10007CF44(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(id, uint64_t))(v2 + 24));
}

uint64_t sub_100083A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;
  __int128 v22[2];
  _QWORD v23[5];
  _QWORD v24[5];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v21 - v13;
  v24[3] = type metadata accessor for CAEvent();
  v24[4] = &off_100263B20;
  v24[0] = a1;
  v15 = sub_10000732C((_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 40));
  sub_100006CA4(*v15 + 64, (uint64_t)v23);
  v16 = sub_10000732C(v23, v23[3]);
  sub_100006CA4((uint64_t)v24, (uint64_t)v22);
  v17 = swift_allocObject(&unk_100263908, 64, 7);
  sub_10003A190(v22, v17 + 16);
  *(_QWORD *)(v17 + 56) = a2;
  v18 = sub_10000732C((_QWORD *)(*v16 + 16), *(_QWORD *)(*v16 + 40));
  type metadata accessor for LocalCache();
  swift_retain(a1);
  swift_errorRetain(a2);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v11, v6);
  sub_10000732C((_QWORD *)(*v18 + 16), *(_QWORD *)(*v18 + 40));
  sub_10009D320((uint64_t)v14, (uint64_t)sub_10008909C, v17);
  v19(v14, v6);
  swift_release(v17);
  sub_100006F58(v23);
  return sub_100006F58(v24);
}

uint64_t sub_100083C54(uint64_t a1, id a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unsigned int v8;
  unsigned int v9;
  char v10;
  char v11;
  void *v12;

  v8 = objc_msgSend(a2, "isAccepted");
  v9 = objc_msgSend(a2, "isAutoAction");
  v10 = v9 ^ 1;
  if (v9)
    v11 = 2;
  else
    v11 = 3;
  if (!v8)
    v10 = v11;
  *(_BYTE *)(a3 + qword_1002981C8) = v10;
  if (a1)
    v12 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v12 = 0;
  sub_1001D2A60(a1 == 0, v12);

  return a4(a1);
}

_QWORD *sub_100083D14(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD *v36;

  v34 = a2;
  v33 = type metadata accessor for CustodianRecord(0);
  v5 = __chkstk_darwin(v33, v4);
  v35 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v10 = (char *)&v30 - v9;
  result = &_swiftEmptyArrayStorage;
  v36 = &_swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v30 = v2;
    v13 = *(_QWORD *)(v8 + 72);
    v31 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v14 = a1 + v31;
    v15 = type metadata accessor for CustodianRecord;
    v32 = v13;
    while (1)
    {
      v17 = v15;
      sub_100027FE8(v14, (uint64_t)v10, v15);
      v18 = &v10[*(int *)(v33 + 24)];
      v20 = *(_QWORD *)v18;
      v19 = *((_QWORD *)v18 + 1);
      v21 = objc_msgSend(v34, "handle");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      if (v20 == v22 && v19 == v24)
        break;
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v19, v22, v24, 0);
      swift_bridgeObjectRelease(v24);
      if ((v26 & 1) != 0)
        goto LABEL_12;
      v15 = v17;
      sub_100028388((uint64_t)v10, v17);
      v16 = v32;
LABEL_4:
      v14 += v16;
      if (!--v12)
        return v36;
    }
    swift_bridgeObjectRelease(v19);
LABEL_12:
    v15 = v17;
    sub_10003B730((uint64_t)v10, v35, v17);
    v27 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
    {
      sub_1001D4CAC(0, v27[2] + 1, 1);
      v27 = v36;
    }
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
    {
      sub_1001D4CAC(v28 > 1, v29 + 1, 1);
      v27 = v36;
    }
    v27[2] = v29 + 1;
    v16 = v32;
    sub_10003B730(v35, (uint64_t)v27 + v31 + v29 * v32, v17);
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_100083F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  Swift::String v40;
  void *object;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v18 = (_QWORD *)swift_allocObject(&unk_100263340, 88, 7);
  v18[2] = a4;
  v18[3] = a5;
  v50 = a6;
  v18[4] = a6;
  v18[5] = a7;
  v19 = (uint64_t)v18;
  v18[6] = a8;
  v18[7] = a9;
  v18[8] = a10;
  v18[9] = a11;
  v47 = a4;
  v18[10] = a12;
  v20 = qword_10028ADC8;
  swift_retain(a4);
  v49 = a5;
  swift_retain(a5);
  v51 = a7;
  swift_bridgeObjectRetain(a7);
  v52 = a8;
  v21 = a8;
  v22 = a9;
  swift_retain(a10);
  swift_retain(a12);
  if (v20 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v23 = type metadata accessor for Logger(0);
  sub_100005288(v23, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a2);
  v24 = swift_errorRetain(a1);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = a1;
  if (os_log_type_enabled(v25, v26))
  {
    v46 = v22;
    v28 = swift_slowAlloc(22, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    v45 = swift_slowAlloc(32, -1);
    v54 = v45;
    *(_DWORD *)v28 = 136315394;
    type metadata accessor for UUID(0);
    v30 = swift_bridgeObjectRetain(a2);
    v31 = Array.description.getter(v30);
    v33 = v32;
    swift_bridgeObjectRelease(a2);
    v53 = sub_1001DEF4C(v31, v33, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v28 + 12) = 2112;
    if (a1)
    {
      swift_errorRetain(a1);
      v34 = _swift_stdlib_bridgeErrorToNSError(a1);
      v53 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    }
    else
    {
      v53 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v34 = 0;
    }
    *v29 = v34;
    swift_errorRelease(v27);
    swift_errorRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "RepairCustodians: 1/2 Finished repairing custodians: %s with error: %@", (uint8_t *)v28, 0x16u);
    v43 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v29, 1, v43);
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    v35 = v52;
    v36 = v50;
    v37 = v51;
    v38 = v49;
    v22 = v46;
    if (!v27)
      goto LABEL_10;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    v35 = a8;
    v36 = v50;
    v37 = a7;
    v38 = a5;
    if (!a1)
    {
LABEL_10:
      sub_100081BD8(v47, v38, v36, v37, v35, v22, a10, a11, a12);
      return swift_release(v19);
    }
  }
  v54 = 0x3A726961706552;
  v55 = 0xE700000000000000;
  swift_errorRetain(v27);
  type metadata accessor for UUID(0);
  v40._countAndFlagsBits = Array.description.getter(v39);
  object = v40._object;
  String.append(_:)(v40);
  swift_bridgeObjectRelease(object);
  v42 = v55;
  sub_100155AC4(v54, v55, v27, (uint64_t)sub_100039F0C, v19);
  swift_bridgeObjectRelease(v42);
  swift_errorRelease(v27);
  return swift_release(v19);
}

void sub_10008436C(NSObject *a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  Class isa;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t inited;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  NSObject *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  char *v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  char v99[56];
  __int128 v100[2];
  uint64_t v101[6];

  v98 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v97 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v90 - v11;
  v13 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v95 = *(_QWORD *)(v13 - 8);
  v96 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v24 = (char *)v90 - v23;
  v25 = swift_allocObject(&unk_100263958, 24, 7);
  *(_QWORD *)(v25 + 16) = a3;
  _Block_copy(a3);
  if ((sub_100075E04() & 1) != 0)
  {
    v92 = v12;
    v93 = v5;
    v26 = objc_msgSend(*(id *)(*sub_10000732C(a2 + 33, a2[36]) + 16), "aa_primaryAppleAccount");
    v94 = v25;
    v91 = v6;
    if (v26
      && (v27 = v26,
          v28 = objc_msgSend(v26, "aa_primaryEmail"),
          v27,
          v28))
    {
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v36 = -[NSObject handle](v98, "handle");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    if (v31)
    {
      if (v29 == v37 && v31 == v39)
      {
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v39);
LABEL_17:
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v41 = type metadata accessor for Logger(0);
        v42 = sub_100005288(v41, (uint64_t)qword_1002A89D8);
        v43 = Logger.logObject.getter(v42);
        v44 = static os_log_type_t.error.getter(v43);
        if (os_log_type_enabled(v43, v44))
        {
          v45 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Cannot invite self as Custodian.", v45, 2u);
          swift_slowDealloc(v45, -1, -1);
        }

        v46 = type metadata accessor for UUID(0);
        v47 = *(_QWORD *)(v46 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v24, 1, 1, v46);
        type metadata accessor for AACustodianError(0);
        v49 = v48;
        *(_QWORD *)&v100[0] = -7020;
        v50 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v51 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(v101, v100, v50, v49, v51);
        v52 = (void *)v101[0];
        sub_100024A20((uint64_t)v24, (uint64_t)v21, (uint64_t *)&unk_1002904F0);
        isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v21, 1, v46) != 1)
        {
          isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v46);
        }
        v54 = (void *)_convertErrorToNSError(_:)(v52);
        ((void (**)(_QWORD, Class, void *))a3)[2](a3, isa, v54);

        sub_100004934((uint64_t)v24, (uint64_t *)&unk_1002904F0);
        v55 = v94;
LABEL_30:
        swift_release(v55);
        return;
      }
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v37, v39, 0);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v39);
      if ((v40 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      swift_bridgeObjectRelease(v39);
    }
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v56 = type metadata accessor for Logger(0);
    sub_100005288(v56, (uint64_t)qword_1002A89D8);
    v57 = v98;
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v98 = swift_slowAlloc(32, -1);
      v101[0] = (uint64_t)v98;
      *(_DWORD *)v60 = 136315138;
      v90[1] = v60 + 4;
      v61 = -[NSObject handle](v57, "handle");
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      v64 = v63;

      *(_QWORD *)&v100[0] = sub_1001DEF4C(v62, v64, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);

      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Begin custodianship setup for %s.", v60, 0xCu);
      v65 = v98;
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

    }
    v67 = v95;
    v66 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v16, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v96);
    Dependency.wrappedValue.getter(v100, v66);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v16, v66);
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianInviteEvent);
    v70 = v69;
    v71 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v71, v99);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = 0x766F6D6552736177;
    *(_QWORD *)(inited + 40) = 0xEF6E6F6974634165;
    sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
    *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(0);
    v73 = sub_10001612C(inited);
    v74 = type metadata accessor for CAEvent();
    v75 = (_QWORD *)swift_allocObject(v74, 48, 7);
    v75[2] = v68;
    v75[3] = v70;
    v75[4] = v73;
    v76 = objc_allocWithZone((Class)type metadata accessor for AAFTimedAnalyticsEvent(0));
    swift_bridgeObjectRetain_n(v70, 2);
    swift_bridgeObjectRetain_n(v73, 2);
    v75[5] = AAFTimedAnalyticsEvent.init(eventName:initialData:)(v68, v70, v73);
    v101[3] = v74;
    v101[4] = (uint64_t)&off_100263B20;
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v73);
    v101[0] = (uint64_t)v75;
    sub_100006F58(v100);
    sub_100006CA4((uint64_t)v101, (uint64_t)v100);
    v77 = (_QWORD *)swift_allocObject(&unk_100263980, 80, 7);
    v77[2] = a2;
    sub_10003A190(v100, (uint64_t)(v77 + 3));
    v78 = v94;
    v77[8] = sub_1000890AC;
    v77[9] = v78;
    v79 = swift_allocObject(&unk_100262F30, 24, 7);
    swift_weakInit(v79 + 16, a2);
    v80 = (_QWORD *)swift_allocObject(&unk_1002639A8, 48, 7);
    v80[2] = v57;
    v80[3] = sub_1000890E8;
    v80[4] = v77;
    v80[5] = v79;
    v81 = sub_10000732C(a2 + 23, a2[26]);
    v82 = (_QWORD *)swift_allocObject(&unk_1002639D0, 40, 7);
    v82[2] = v57;
    v82[3] = sub_100089180;
    v82[4] = v80;
    v83 = sub_10000732C((_QWORD *)(*v81 + 16), *(_QWORD *)(*v81 + 40));
    type metadata accessor for LocalCache();
    v84 = v57;
    swift_retain(a2);
    swift_retain(v78);
    swift_retain(v77);
    swift_retain(v79);
    swift_retain(v80);
    v85 = v97;
    sub_10000840C();
    v86 = (uint64_t)v92;
    URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
    v87 = *(void (**)(char *, uint64_t))(v91 + 8);
    v88 = v85;
    v89 = v93;
    v87(v88, v93);
    sub_10000732C((_QWORD *)(*v83 + 16), *(_QWORD *)(*v83 + 40));
    sub_10009D320(v86, (uint64_t)sub_1000891BC, (uint64_t)v82);
    v87((char *)v86, v89);
    swift_release(v77);
    swift_release(v80);
    swift_release(v82);
    sub_100006F58(v101);
    swift_release(v78);
    v55 = v79;
    goto LABEL_30;
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A89D8);
  v98 = Logger.logObject.getter(v33);
  v34 = static os_log_type_t.error.getter(v98);
  if (os_log_type_enabled(v98, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, v34, "Client is missing management entitlement, rejecting request to setupCustodianship", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
  swift_release(v25);

}

uint64_t sub_100084D64(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  __int128 v12[2];
  _QWORD v13[3];
  uint64_t v14;
  _UNKNOWN **v15;

  v6 = type metadata accessor for CustodianDaemonContainer();
  v14 = v6;
  v15 = &off_10026DE60;
  v13[0] = a2;
  *(_QWORD *)(a3 + 176) = a1;
  v7 = sub_10000732C(v13, v6);
  sub_100006CA4(*v7 + 104, a3 + 16);
  v8 = sub_10000732C(v13, v14);
  sub_100006CA4(*v8 + 144, a3 + 56);
  sub_10000732C(v13, v14);
  v9 = a1;
  sub_1001B8334(v12);
  sub_10003A190(v12, a3 + 96);
  v10 = sub_10000732C(v13, v14);
  sub_100006CA4(*v10 + 24, a3 + 136);
  sub_100006F58(v13);
  return a3;
}

void sub_100084E3C(NSObject *a1, _QWORD *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void (**v59)(_QWORD, _QWORD, _QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t inited;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  id v68;
  _QWORD *v69;
  id v70;
  uint64_t (*v71)(void *);
  id v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  void (*v76)(char *, NSObject *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(void *);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t (**v96)(uint64_t);
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t (*v105)(char *, NSObject *, uint64_t);
  _QWORD *v106;
  uint64_t v107;
  id v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  char *v112;
  void (**v113)(_QWORD, _QWORD, _QWORD);
  uint64_t updated;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  NSObject *v121;
  char v122[56];
  __int128 v123;
  uint64_t v124;
  uint64_t v125[5];

  v121 = a1;
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  v115 = *(_QWORD *)(updated - 8);
  v6 = __chkstk_darwin(updated, v5);
  v117 = (uint64_t)v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = v7;
  __chkstk_darwin(v6, v8);
  v10 = (char *)v101 - v9;
  v11 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v113 = *(void (***)(_QWORD, _QWORD, _QWORD))(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v120 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v120 + 64);
  v18 = __chkstk_darwin(v15, v17);
  v118 = (char *)v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)v101 - v21;
  __chkstk_darwin(v20, v23);
  v119 = (char *)v101 - v24;
  v25 = swift_allocObject(&unk_100263868, 24, 7);
  *(_QWORD *)(v25 + 16) = a3;
  _Block_copy(a3);
  if ((sub_100075E04() & 1) != 0)
  {
    v26 = objc_msgSend(*(id *)(*sub_10000732C(a2 + 33, a2[36]) + 16), "aa_primaryAppleAccount");

    if (v26)
    {
      v112 = v10;
      v28 = v119;
      v29 = UUID.init()(v27);
      v103 = UUID.uuidString.getter(v29);
      v104 = v30;
      v31 = v120;
      v109 = *(void (**)(char *, uint64_t))(v120 + 8);
      v109(v28, v15);
      v32 = swift_allocObject(&unk_100263318, 24, 7);
      v33 = os_transaction_create("com.apple.aa.custodian.remove");
      v110 = v32;
      *(_QWORD *)(v32 + 16) = v33;
      v108 = objc_msgSend((id)objc_opt_self(AAFKeybagLockAssertion), "lock");
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v111 = v25;
      v34 = type metadata accessor for Logger(0);
      sub_100005288(v34, (uint64_t)qword_1002A89D8);
      v105 = *(uint64_t (**)(char *, NSObject *, uint64_t))(v31 + 16);
      v35 = v105(v22, v121, v15);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.info.getter();
      v38 = os_log_type_enabled(v36, v37);
      v106 = a2;
      v107 = v15;
      v102 = v16;
      if (v38)
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v125[0] = v40;
        *(_DWORD *)v39 = 136315138;
        v101[1] = v39 + 4;
        v41 = UUID.uuidString.getter(v40);
        v43 = v42;
        *(_QWORD *)&v123 = sub_1001DEF4C(v41, v42, v125);
        a2 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, (char *)&v123 + 8);
        swift_bridgeObjectRelease(v43);
        v109(v22, v15);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Removing custodian %s.", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {
        v109(v22, v15);
      }

      v59 = v113;
      ((void (**)(char *, char *, uint64_t))v113)[2](v14, (char *)a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v11);
      Dependency.wrappedValue.getter(&v123, v11);
      ((void (*)(char *, uint64_t))v59[1])(v14, v11);
      v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianInviteEvent);
      v62 = v61;
      v63 = sub_1000080B4(&qword_10028E7F8);
      inited = swift_initStackObject(v63, v122);
      *(_OWORD *)(inited + 16) = xmmword_100218E30;
      *(_QWORD *)(inited + 32) = 0x766F6D6552736177;
      *(_QWORD *)(inited + 40) = 0xEF6E6F6974634165;
      sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
      *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
      v65 = sub_10001612C(inited);
      v66 = type metadata accessor for CAEvent();
      v67 = (_QWORD *)swift_allocObject(v66, 48, 7);
      v67[2] = v60;
      v67[3] = v62;
      v67[4] = v65;
      v68 = objc_allocWithZone((Class)type metadata accessor for AAFTimedAnalyticsEvent(0));
      swift_bridgeObjectRetain_n(v62, 2);
      swift_bridgeObjectRetain_n(v65, 2);
      v67[5] = AAFTimedAnalyticsEvent.init(eventName:initialData:)(v60, v62, v65);
      v125[3] = v66;
      v125[4] = (uint64_t)&off_100263B20;
      swift_bridgeObjectRelease(v62);
      swift_bridgeObjectRelease(v65);
      v125[0] = (uint64_t)v67;
      sub_100006F58(&v123);
      v69 = v104;
      v70 = sub_100082B88(v103, (uint64_t)v104);
      v113 = (void (**)(_QWORD, _QWORD, _QWORD))v70;
      swift_bridgeObjectRelease(v69);
      sub_100006CA4((uint64_t)v125, (uint64_t)&v123);
      v71 = (uint64_t (*)(void *))swift_allocObject(&unk_100263890, 104, 7);
      *((_QWORD *)v71 + 2) = a2;
      sub_10003A190(&v123, (uint64_t)v71 + 24);
      v72 = v108;
      *((_QWORD *)v71 + 8) = v70;
      *((_QWORD *)v71 + 9) = v72;
      *((_QWORD *)v71 + 10) = v110;
      *((_QWORD *)v71 + 11) = sub_1000891D0;
      *((_QWORD *)v71 + 12) = v111;
      v73 = (uint64_t)v112;
      v74 = v121;
      v75 = v107;
      v76 = (void (*)(char *, NSObject *, uint64_t))v105;
      v105(v112, v121, v107);
      v77 = updated;
      *(_QWORD *)(v73 + *(int *)(updated + 20)) = 4;
      *(_BYTE *)(v73 + *(int *)(v77 + 24)) = 0;
      v104 = sub_10000732C(a2 + 54, a2[57]);
      v78 = swift_allocObject(&unk_100262F30, 24, 7);
      updated = v78;
      swift_weakInit(v78 + 16, a2);
      v79 = v119;
      v76(v119, v74, v75);
      v80 = v120;
      v81 = *(unsigned __int8 *)(v120 + 80);
      v82 = (v81 + 16) & ~v81;
      v83 = (v102 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
      v84 = (v83 + 15) & 0xFFFFFFFFFFFFFFF8;
      v85 = swift_allocObject(&unk_1002638B8, v84 + 16, v81 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v85 + v82, v79, v75);
      *(_QWORD *)(v85 + v83) = v78;
      v86 = (uint64_t (**)(void *))(v85 + v84);
      *v86 = sub_100088E90;
      v86[1] = v71;
      v87 = *v104;
      sub_100006CA4(*v104 + 16, (uint64_t)&v123);
      v121 = sub_10000732C(&v123, v124);
      v88 = (uint64_t)v118;
      v89 = (uint64_t)v112;
      v76(v118, v112, v75);
      v90 = v117;
      sub_100027FE8(v89, v117, type metadata accessor for CustodianStatusUpdateRequest);
      v91 = *(unsigned __int8 *)(v115 + 80);
      v92 = (v91 + 16) & ~v91;
      v93 = (v116 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
      v94 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8;
      v95 = swift_allocObject(&unk_1002638E0, v94 + 16, v91 | 7);
      sub_10003B730(v90, v95 + v92, type metadata accessor for CustodianStatusUpdateRequest);
      *(_QWORD *)(v95 + v93) = v87;
      v96 = (uint64_t (**)(uint64_t))(v95 + v94);
      *v96 = sub_100088F38;
      v96[1] = (uint64_t (*)(uint64_t))v85;
      v121 = v113;
      v97 = v108;
      v98 = v110;
      swift_retain(v110);
      v99 = v111;
      swift_retain(v111);
      v100 = updated;
      swift_retain(updated);
      swift_retain(v71);
      swift_retain(v87);
      swift_retain(v85);
      swift_retain(v106);
      sub_1001BF958(v88, (uint64_t)sub_100088FEC, v95);
      swift_release(v95);
      v109((char *)v88, v107);
      sub_100006F58(&v123);

      swift_release(v71);
      swift_release(v85);
      sub_100028388((uint64_t)v112, type metadata accessor for CustodianStatusUpdateRequest);
      sub_100006F58(v125);
      swift_release(v99);
      swift_release(v98);
      swift_release(v100);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v48 = type metadata accessor for Logger(0);
      v49 = sub_100005288(v48, (uint64_t)qword_1002A89D8);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Not logged in to AppleAccount, unable to remove custodian", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v54 = v53;
      *(_QWORD *)&v123 = -7002;
      v55 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v56 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v125, &v123, v55, v54, v56);
      v57 = (void *)v125[0];
      v58 = (void *)_convertErrorToNSError(_:)(v125[0]);
      ((void (**)(_QWORD, void *))a3)[2](a3, v58);
      swift_release(v25);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100005288(v44, (uint64_t)qword_1002A89D8);
    v121 = Logger.logObject.getter(v45);
    v46 = static os_log_type_t.error.getter(v121);
    if (os_log_type_enabled(v121, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v46, "Client is missing management entitlement, rejecting request to removeCustodian", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }
    swift_release(v25);

  }
}

void sub_100085948(NSObject *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  Class isa;
  id v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57[5];

  v55 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_100263818, 24, 7);
  *(_QWORD *)(v15 + 16) = a3;
  _Block_copy(a3);
  if ((sub_100075E04() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v10);
    Dependency.wrappedValue.getter(v57, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v16 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent(0));
    v17 = (void *)sub_1001D2980();
    sub_100006F58(v57);
    v18 = (_QWORD *)swift_allocObject(&unk_100263840, 48, 7);
    v18[2] = v17;
    v18[3] = &off_10026EE30;
    v18[4] = sub_1000891D0;
    v18[5] = v15;
    v19 = *(void **)(*sub_10000732C((_QWORD *)(a2 + 264), *(_QWORD *)(a2 + 288)) + 16);
    swift_retain(v15);
    v54 = v17;
    v20 = objc_msgSend(v19, "aa_primaryAppleAccount");

    if (v20)
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v21 = type metadata accessor for Logger(0);
      sub_100005288(v21, (uint64_t)qword_1002A89D8);
      v22 = (*(uint64_t (**)(char *, NSObject *, uint64_t))(v6 + 16))(v9, v55, v5);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v52 = v26;
        v57[0] = v26;
        v53 = v15;
        *(_DWORD *)v25 = 136315138;
        v51[1] = v25 + 4;
        v27 = UUID.uuidString.getter(v26);
        v29 = v28;
        v56 = sub_1001DEF4C(v27, v28, v57);
        v15 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
        swift_bridgeObjectRelease(v29);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Ending custodianship %s.", v25, 0xCu);
        v30 = v52;
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }

      v48 = objc_allocWithZone((Class)AACustodianInvitationResponseContext);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v50 = objc_msgSend(v48, "initWithCustodianID:didAccept:", isa, 0);

      sub_10007F020(v50, (uint64_t)sub_100088E38, (uint64_t)v18);
      swift_release(v15);

      swift_release(v18);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v35 = type metadata accessor for Logger(0);
      v36 = sub_100005288(v35, (uint64_t)qword_1002A89D8);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not logged in to AppleAccount, unable to end custodianship", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v41 = v40;
      v56 = -7002;
      v42 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v43 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v57, &v56, v42, v41, v43);
      v44 = (void *)v57[0];
      v45 = v54;
      *((_BYTE *)v54 + qword_1002981C8) = 4;
      v46 = (void *)_convertErrorToNSError(_:)(v44);
      sub_1001D2A60(0, v46);

      v47 = (void *)_convertErrorToNSError(_:)(v44);
      ((void (**)(_QWORD, void *))a3)[2](a3, v47);
      swift_release(v15);

      swift_release(v18);
    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A89D8);
    v55 = Logger.logObject.getter(v32);
    v33 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v33, "Client is missing management entitlement, rejecting request to stopBeingCustodian", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    swift_release(v15);

  }
}

void sub_100085F40(_QWORD *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD v33[5];
  uint64_t v34;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)v33 - v11;
  v13 = swift_allocObject(&unk_1002636D8, 24, 7);
  *(_QWORD *)(v13 + 16) = a2;
  v14 = *(void **)(*sub_10000732C(a1 + 33, a1[36]) + 16);
  _Block_copy(a2);
  v15 = objc_msgSend(v14, "aa_primaryAppleAccount");

  if (v15)
  {
    v16 = swift_allocObject(&unk_100263700, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_100088B84;
    *(_QWORD *)(v16 + 24) = v13;
    v17 = sub_10000732C(a1 + 2, a1[5]);
    sub_100006CA4(*v17 + 64, (uint64_t)v33);
    v18 = sub_10000732C(v33, v33[3]);
    v19 = swift_allocObject(&unk_100263728, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_100088BAC;
    *(_QWORD *)(v19 + 24) = v16;
    v20 = sub_10000732C((_QWORD *)(*v18 + 16), *(_QWORD *)(*v18 + 40));
    type metadata accessor for LocalCache();
    swift_retain(v13);
    swift_retain(v16);
    sub_10000840C();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v9, v4);
    sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
    sub_10009D070((uint64_t)v12, (uint64_t)sub_100088BB4, v19);
    v21(v12, v4);
    swift_release(v19);
    sub_100006F58(v33);
    swift_release(v13);
    swift_release(v16);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Not logged in to AppleAccount, unable to fetch", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v28 = v27;
    v34 = -7002;
    v29 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v30 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v33, &v34, v29, v28, v30);
    v31 = (void *)v33[0];
    v32 = (void *)_convertErrorToNSError(_:)(v33[0]);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v32);
    swift_release(v13);

  }
}

void sub_1000862B0(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v19 = a4;
    v20 = sub_100088B38(a1, a2, 1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = (_QWORD *)swift_slowAlloc(16, -1);
      *(_DWORD *)v23 = 138412546;
      v30 = a2;
      v31 = (uint64_t)v19;
      v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      *v24 = v19;

      *(_WORD *)(v23 + 12) = 2112;
      v26 = _convertErrorToNSError(_:)(a1);
      v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      v24[1] = v26;
      a2 = v30;
      sub_100041178(a1, v30, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to generate code for context: %@ with error: %@", (uint8_t *)v23, 0x16u);
      v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 2, v27);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {

      sub_100041178(a1, a2, 1);
    }

    swift_errorRetain(a1);
    v29 = (void *)_convertErrorToNSError(_:)(a1);
    (*(void (**)(uint64_t, _QWORD, void *))(a5 + 16))(a5, 0, v29);

    sub_100041178(a1, a2, 1);
    sub_100041178(a1, a2, 1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v10 = a4;
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      v31 = (uint64_t)v10;
      *(_DWORD *)v14 = 138412290;
      v16 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      *v15 = v10;

      _os_log_impl((void *)&_mh_execute_header, v11, v13, "Successfully generated code for context: %@", v14, 0xCu);
      v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    v28 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, NSString, _QWORD))(a5 + 16))(a5, v28, 0);

  }
}

void sub_1000866A4(void *a1, uint64_t a2, void *aBlock)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  _Block_copy(aBlock);
  if ((sub_100075E04() & 1) != 0)
  {
    v6 = *sub_10000732C((_QWORD *)(a2 + 304), *(_QWORD *)(a2 + 328));
    _Block_copy(aBlock);
    v7 = a1;
    sub_100148FC0(v7, v6, v7, aBlock);
    _Block_release(aBlock);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005288(v8, (uint64_t)qword_1002A89D8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Client is missing management entitlement, rejecting request to generateCustodianRecoveryCode", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  _Block_release(aBlock);
}

void sub_1000867C8(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10007C1EC(a1, a2 & 1, *(void (**)(id, uint64_t))(v2 + 16));
}

void sub_1000867D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100044508(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000867DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100086800(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10007B754(a1, a2 & 1, *(void (**)(uint64_t, unint64_t, void *))(v2 + 16));
}

void sub_100086810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000444E4(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100086818()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_10008684C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  sub_10007B15C(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 24), *(_QWORD *)(v3 + 32), *(void **)(v3 + 40));
}

unint64_t sub_10008685C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C790;
  if (!qword_10028C790)
  {
    v1 = sub_10000D908((uint64_t *)&unk_10028E800);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10028C790);
  }
  return result;
}

uint64_t sub_1000868A8(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_10000F494(a1, a2);
}

uint64_t sub_1000868B4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10007ABF0(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000868C0(uint64_t a1)
{
  uint64_t v1;

  return sub_10007A2D8(a1, *(void (**)(id, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000868C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

void sub_10008696C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000782EC(a1, v4, v2 + v6, *(void (**)(uint64_t))(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t, _QWORD))(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000869EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v26 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, v24 + 16, v3 | 7);
}

uint64_t sub_100086CB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000771A4(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(uint64_t, uint64_t))v5, *(_QWORD *)(v5 + 8));
}

void sub_100086D0C(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  char v36;
  void *v37;
  void *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  _QWORD v42[5];

  v6 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_100263520, 24, 7);
  *(_QWORD *)(v11 + 16) = a3;
  _Block_copy(a3);
  if ((sub_100075E04() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsEventFactory, v6);
    Dependency.wrappedValue.getter(v42, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent(0));
    v13 = (void *)sub_1001D2980();
    sub_100006F58(v42);
    v14 = (_QWORD *)swift_allocObject(&unk_100263548, 56, 7);
    v14[2] = a1;
    v14[3] = v13;
    v14[4] = &off_10026EE30;
    v14[5] = sub_1000891D0;
    v14[6] = v11;
    v15 = *(void **)(*sub_10000732C((_QWORD *)(a2 + 264), *(_QWORD *)(a2 + 288)) + 16);
    swift_retain(v11);
    v16 = a1;
    v17 = v13;
    v18 = objc_msgSend(v15, "aa_primaryAppleAccount");

    if (v18)
    {
      sub_10007F020(v16, (uint64_t)sub_100088B2C, (uint64_t)v14);
      swift_release(v11);

      swift_release(v14);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not logged in to AppleAccount, unable to fetch", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v29 = v28;
      v41 = -7002;
      v30 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v31 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v42, &v41, v30, v29, v31);
      v32 = (void *)v42[0];
      v33 = objc_msgSend(v16, "isAccepted");
      v34 = objc_msgSend(v16, "isAutoAction");
      v35 = v34 ^ 1;
      if (v34)
        v36 = 2;
      else
        v36 = 3;
      if (!v33)
        v35 = v36;
      *((_BYTE *)v17 + qword_1002981C8) = v35;
      v37 = (void *)_convertErrorToNSError(_:)(v32);
      sub_1001D2A60(0, v37);

      v38 = (void *)_convertErrorToNSError(_:)(v32);
      ((void (**)(_QWORD, void *))a3)[2](a3, v38);
      swift_release(v11);

      swift_release(v14);
    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v40 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v21, "Client is missing management entitlement, rejecting request to respondToInvite", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    swift_release(v11);

  }
}

void sub_100087150(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = sub_1000080B4(&qword_10028E868);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_1002634F8, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  v10 = *(void **)(*sub_10000732C((_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288)) + 16);
  _Block_copy(a2);
  v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__healthCheckScheduler, v4);
    Dependency.wrappedValue.getter(v25, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v12 = v26;
    v13 = v27;
    sub_10000732C(v25, v26);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v13 + 16))(sub_1000891D0, v9, v12, v13);
    sub_100006F58(v25);
    swift_release(v9);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A89D8);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not logged in to AppleAccount, unable to fetch", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v20 = v19;
    v28 = -7002;
    v21 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v25, &v28, v21, v20, v22);
    v23 = (void *)v25[0];
    v24 = (void *)_convertErrorToNSError(_:)(v25[0]);
    ((void (**)(_QWORD, void *))a2)[2](a2, v24);
    swift_release(v9);

  }
}

void sub_1000873DC(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v4 = swift_allocObject(&unk_1002634A8, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = *(void **)(*sub_10000732C((_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288)) + 16);
  _Block_copy(a2);
  v6 = objc_msgSend(v5, "aa_primaryAppleAccount");

  if (v6)
  {
    v7 = sub_100075C40();
    v8 = swift_allocObject(&unk_1002634D0, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000891D0;
    *(_QWORD *)(v8 + 24) = v4;
    swift_retain(v4);
    sub_1000FF190((uint64_t (*)(_QWORD))sub_10002E4D0, v8);
    swift_release(v4);
    swift_release(v7);
    swift_release(v8);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Not logged in to AppleAccount, unable to perform data sync", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v15 = v14;
    v20 = -7002;
    v16 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v17 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    v18 = v21;
    v19 = (void *)_convertErrorToNSError(_:)(v21);
    ((void (**)(_QWORD, void *))a2)[2](a2, v19);
    swift_release(v4);

  }
}

void sub_100087618(_QWORD *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;

  v4 = swift_allocObject(&unk_100263480, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100005288(v5, (uint64_t)qword_1002A89D8);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Kicking off manatee migration.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = objc_msgSend(*(id *)(*sub_10000732C(a1 + 33, a1[36]) + 16), "aa_primaryAppleAccount");
  if (v11)
  {
    v13 = a1 + 43;
    v14 = a1[46];
    v15 = a1[47];
    sub_10000732C(v13, v14);
    (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v15 + 8))(sub_1000891D0, v4, v14, v15);
    swift_release(v4);
  }
  else
  {
    v16 = Logger.logObject.getter(v12);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not logged in to AppleAccount, unable to fetch", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v20 = v19;
    v25 = -7002;
    v21 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v22 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v26, &v25, v21, v20, v22);
    v23 = v26;
    v24 = (void *)_convertErrorToNSError(_:)(v26);
    ((void (**)(_QWORD, void *))a2)[2](a2, v24);
    swift_release(v4);

  }
}

void sub_1000878A4(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[5];
  uint64_t v30;

  v4 = sub_1000080B4(&qword_10028E860);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_100263430, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  v10 = *(void **)(*sub_10000732C((_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288)) + 16);
  _Block_copy(a2);
  v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (v11)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A89D8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Triggering a sync of trusted contacts with CloudKit.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__syncManager, v4);
    Dependency.wrappedValue.getter(v29, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_10000732C(v29, v29[3]);
    v17 = swift_allocObject(&unk_100263458, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_1000891D0;
    *(_QWORD *)(v17 + 24) = v9;
    swift_retain(v9);
    sub_10011EDC0(3, 1, (uint64_t)sub_100088AF0, v17);
    swift_release(v17);
    sub_100006F58(v29);
    swift_release(v9);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not logged in to AppleAccount, cannot trigger sync with CloudKit", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v24 = v23;
    v30 = -7002;
    v25 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v29, &v30, v25, v24, v26);
    v27 = (void *)v29[0];
    v28 = (void *)_convertErrorToNSError(_:)(v29[0]);
    ((void (**)(_QWORD, void *))a2)[2](a2, v28);
    swift_release(v9);

  }
}

void sub_100087C04(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[5];

  v6 = sub_1000080B4(&qword_10028E840);
  v63 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = swift_allocObject(&unk_1002632F0, 24, 7);
  *(_QWORD *)(v65 + 16) = a3;
  _Block_copy(a3);
  v15 = sub_100075E04();
  if ((v15 & 1) != 0)
  {
    v62 = v6;
    v16 = UUID.init()(v15);
    v17 = UUID.uuidString.getter(v16);
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_100082664(v17, v19);
    v61 = v17;
    v64 = sub_100082B74(v17, v19);
    if (a1)
    {
      v20 = swift_allocObject(&unk_100263318, 24, 7);
      *(_QWORD *)(v20 + 16) = os_transaction_create("com.apple.aa.custodian.repair");
      v21 = objc_msgSend((id)objc_opt_self(AAFKeybagLockAssertion), "lock");
      v22 = type metadata accessor for PartialErrorHandler();
      swift_allocObject(v22, 32, 7);
      v23 = sub_1001561E0();
      v24 = qword_10028ADC8;
      swift_retain_n(v23, 2);
      swift_retain_n(a2, 2);
      swift_bridgeObjectRetain_n(v19, 2);
      v25 = v64;
      v26 = v21;
      v60 = v20;
      swift_retain_n(v20, 2);
      swift_retain_n(v65, 2);
      v58 = v26;
      v59 = v25;
      if (v24 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v27 = type metadata accessor for Logger(0);
      sub_100005288(v27, (uint64_t)qword_1002A89D8);
      v28 = swift_bridgeObjectRetain_n(a1, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = swift_slowAlloc(32, -1);
        v67[0] = v56;
        v57 = v23;
        *(_DWORD *)v31 = 136315138;
        v55[1] = v31 + 4;
        v32 = swift_bridgeObjectRetain(a1);
        v33 = Array.description.getter(v32);
        v35 = v34;
        swift_bridgeObjectRelease(a1);
        v66 = sub_1001DEF4C(v33, v35, v67);
        v23 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
        swift_bridgeObjectRelease_n(a1, 2);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "RepairCustodians: 1/2 Repairing custodians %s", v31, 0xCu);
        v36 = v56;
        swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a1, 2);
      }
      v47 = v62;
      v48 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v9, a2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__keyRepair, v62);
      Dependency.wrappedValue.getter(v67, v47);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v47);
      v49 = *sub_10000732C(v67, v67[3]);
      swift_bridgeObjectRetain(v19);
      swift_retain(a2);
      v50 = v65;
      swift_retain(v65);
      v51 = v60;
      swift_retain(v60);
      v52 = v58;
      swift_retain(v23);
      v53 = v59;
      swift_bridgeObjectRetain(a1);
      sub_100039114(v54, v61, v19, v49, a1, v23, v23, a2, v61, v19, v64, v52, v51, (uint64_t)sub_1000891D0, v50);
      swift_release_n(v23, 4);
      swift_release_n(a2, 3);
      swift_bridgeObjectRelease_n(v19, 4);

      swift_release_n(v51, 3);
      swift_release_n(v50, 3);
      sub_100006F58(v67);
      swift_release(v50);
      swift_release(v51);
    }
    else
    {
      swift_bridgeObjectRelease(v19);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v42 = type metadata accessor for Logger(0);
      v43 = sub_100005288(v42, (uint64_t)qword_1002A89D8);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "RepairCustodians: Nothing to repair", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      a3[2](a3, 0);
      swift_release(v65);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100005288(v37, (uint64_t)qword_1002A89D8);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "RepairCustodians: Client is missing management entitlement, rejecting request to repairCustodians", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    a3[2](a3, 0);
    swift_release(v65);
  }
}

void sub_1000882B4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  Class isa;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  _QWORD *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint8_t *v28;
  id v29;
  NSObject *v30;
  id v31;
  uint64_t v32;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v5 = *(NSObject **)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v9 = a1;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v9, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A8A20);
    v12 = v9;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v30 = v5;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v28 = v15;
      *(_DWORD *)v15 = 138412290;
      v31 = v12;
      v16 = v12;
      v29 = v12;
      v17 = v16;
      v5 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      v18 = v27;
      *v27 = a1;

      v19 = v28;
      v12 = v29;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Reporting Repair CFU Action End Event %@", v28, 0xCu);
      v20 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v18, 1, v20);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

    }
    ((void (*)(char *, uint64_t, uint64_t))v5[2].isa)(v8, v2 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__analyticsRTCReporter, v4);
    Dependency.wrappedValue.getter(&v31, v4);
    ((void (*)(char *, uint64_t))v5[1].isa)(v8, v4);
    v25 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
    objc_msgSend(v25, "sendEvent:", v12);

    sub_100006F58(&v31);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A8A20);
    v30 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v23, "Event creation failed. Not reporting Repair Event.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

void sub_100088644(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = sub_1000080B4(&qword_10028E838);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_1002632C8, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  _Block_copy(a2);
  if ((sub_100075E04() & 1) != 0)
  {
    v10 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(a1 + 264), *(_QWORD *)(a1 + 288)) + 16), "aa_primaryAppleAccount");

    if (v10)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC13appleaccountd22CustodianDaemonService__preflightScheduler, v4);
      Dependency.wrappedValue.getter(v29, v4);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v11 = v30;
      v12 = v31;
      sub_10000732C(v29, v30);
      (*(void (**)(void (*)(uint64_t), uint64_t, uint64_t))(*(_QWORD *)(v12 + 8) + 16))(sub_1000889B4, v9, v11);
      sub_100006F58(v29);
      swift_release(v9);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not logged in to AppleAccount, unable to fetch", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v24 = v23;
      v32 = -7002;
      v25 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v26 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(v29, &v32, v25, v24, v26);
      v27 = (void *)v29[0];
      v28 = (void *)_convertErrorToNSError(_:)(v29[0]);
      ((void (**)(_QWORD, void *))a2)[2](a2, v28);
      swift_release(v9);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A89D8);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "PreflightCustodianRecovery: Client is missing management entitlement, rejecting request to preflight", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    a2[2](a2, 0);
    swift_release(v9);
  }
}

void sub_1000889B4(uint64_t a1)
{
  uint64_t v1;

  sub_1001DC59C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000889BC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000889E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100088A34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100088A80(uint64_t a1)
{
  uint64_t v1;

  return sub_100081FDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(uint64_t (**)(_QWORD))(v1 + 56));
}

uint64_t sub_100088A94()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100088AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10007E594(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100088AC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100088AE4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10008196C(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100088AF0(char a1)
{
  uint64_t v1;

  return sub_100080B74(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100088AF8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100088B2C(uint64_t a1)
{
  uint64_t v1;

  return sub_100083C54(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_100088B38(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

void sub_100088B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_10013DC68(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void sub_100088B50(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AAE58(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100088B58(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000AAE44(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100088B60(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10007A8A4(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_100088B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10007E594(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100088B84(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&unk_10028E870, AACustodianshipInfo_ptr);
}

uint64_t sub_100088BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100079E64(a1, a2, *(void (**)(__n128))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100088BB4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10007A840(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100088BC0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100088BF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100295CC4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100075348;
  return sub_1001928E4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100088C74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100088CA0()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10028E894);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1000224D8;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_10028E890 + dword_10028E890))(v2, v3);
}

uint64_t sub_100088D08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002941B4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100075348;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002941B0 + dword_1002941B0))(v2, v3, v4);
}

uint64_t sub_100088D84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002941BC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100075348;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002941B8 + dword_1002941B8))(a1, v4, v5, v6);
}

uint64_t sub_100088E0C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100088E38(uint64_t a1)
{
  uint64_t v1;

  return sub_100079894(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100088E44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100006F58((_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100088E90(void *a1)
{
  uint64_t v1;

  return sub_100078894(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), *(void **)(v1 + 64), *(void **)(v1 + 72), *(_QWORD *)(v1 + 80), *(uint64_t (**)(void *))(v1 + 88));
}

uint64_t sub_100088EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100088F38(uint64_t a1)
{
  return sub_100089000(a1, (uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_100078978);
}

uint64_t sub_100088F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v3;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v4);
}

uint64_t sub_100088FEC(uint64_t a1)
{
  return sub_100089000(a1, type metadata accessor for CustodianStatusUpdateRequest, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1001DA26C);
}

uint64_t sub_100089000(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, v3 + v6, *(_QWORD *)(v3 + v7), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100089070()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10008909C(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100079338(a1, a2 & 1, (_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 56));
}

void sub_1000890AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000764AC(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000890B4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100006F58(v0 + 3);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1000890E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t *v7;

  v5 = v2[2];
  v6 = (uint64_t (*)(uint64_t, uint64_t))v2[8];
  v7 = sub_10000732C(v2 + 3, v2[6]);
  sub_100083A74(*v7, a2, v5);
  return v6(a1, a2);
}

uint64_t sub_10008914C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100089180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100076064(a1, a2, *(void **)(v2 + 16), *(void (**)(char *, void *))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100089190()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000891BC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000765AC(a1, a2 & 1, *(void **)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

NSString sub_100089288()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10028E8D0 = (uint64_t)result;
  return result;
}

NSString sub_1000892BC()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10028E8D8 = (uint64_t)result;
  return result;
}

NSString sub_1000892F0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10028E8E0 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for WalrusPCSSignatureValidator()
{
  return objc_opt_self(_TtC13appleaccountd27WalrusPCSSignatureValidator);
}

SecKeyRef sub_100089344()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *ApplePinned;
  Class isa;
  OSStatus v4;
  __SecTrust *v5;
  _BOOL4 v6;
  CFErrorRef v7;
  SecKeyRef v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  CFErrorRef *v19;
  uint64_t v20;
  __CFError *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  NSObject *v36;
  NSObject *v38;
  uint64_t v39;
  CFErrorRef error;
  SecTrustRef trust;

  if (qword_10028AE38 != -1)
    swift_once(&qword_10028AE38, sub_1000892F0);
  v0 = qword_10028E8E0;
  if (qword_10028AE30 != -1)
    swift_once(&qword_10028AE30, sub_1000892BC);
  v1 = qword_10028E8D8;
  if (qword_10028AE28 != -1)
    swift_once(&qword_10028AE28, sub_100089288);
  ApplePinned = SecPolicyCreateApplePinned(v0, v1, qword_10028E8D0);
  trust = 0;
  type metadata accessor for SecCertificate(0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = SecTrustCreateWithCertificates(isa, ApplePinned, &trust);

  if (v4 || !trust)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8990);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 67109120;
      LODWORD(error) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&error, (char *)&error + 4);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error creating SecTrust from certificates, unable to generate public signing key: %d", v13, 8u);
      swift_slowDealloc(v13, -1, -1);
      v14 = ApplePinned;
    }
    else
    {
      v14 = v11;
      v11 = ApplePinned;
    }

    goto LABEL_31;
  }
  error = 0;
  v5 = trust;
  v6 = SecTrustEvaluateWithError(v5, &error);
  v7 = error;
  if (!v6)
  {
    if (error)
    {
      type metadata accessor for CFError(0);
      v16 = v15;
      v17 = sub_100089DCC();
      v18 = swift_allocError(v16, v17, 0, 0);
      *v19 = v7;
      v20 = qword_10028ADB0;
      v21 = v7;
      if (v20 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v22 = type metadata accessor for Logger(0);
      sub_100005288(v22, (uint64_t)qword_1002A8990);
      swift_errorRetain(v18);
      v23 = swift_errorRetain(v18);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v38 = v21;
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v27 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v26 = 138412290;
        v28 = _convertErrorToNSError(_:)(v18);
        v39 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &error);
        *v27 = v28;
        v29 = v38;
        swift_errorRelease(v18);
        swift_errorRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error evaluating certificate trust, unable to generate public signing key: %@", v26, 0xCu);
        v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v27, 1, v30);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

        swift_errorRelease(v18);
      }
      else
      {

        swift_errorRelease(v18);
        swift_errorRelease(v18);
        swift_errorRelease(v18);
        v29 = v24;
      }

    }
    else
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100005288(v31, (uint64_t)qword_1002A8990);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Certificates are not trusted, unable to generate public signing key.", v35, 2u);
        swift_slowDealloc(v35, -1, -1);
        v36 = ApplePinned;
      }
      else
      {
        v36 = v33;
        v33 = v5;
        v5 = (__SecTrust *)ApplePinned;
      }

    }
LABEL_31:

    return 0;
  }
  v8 = SecTrustCopyKey(v5);

  return v8;
}

BOOL sub_100089868(__SecKey *a1)
{
  const __CFData *isa;
  const __CFData *v3;
  int v4;
  CFErrorRef v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFErrorRef *v10;
  uint64_t v11;
  __CFError *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  CFErrorRef error;

  error = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v3 = Data._bridgeToObjectiveC()().super.isa;
  v4 = SecKeyVerifySignature(a1, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, isa, v3, &error);

  v5 = error;
  if (!error)
    return v4 != 0;
  type metadata accessor for CFError(0);
  v7 = v6;
  v8 = sub_100089DCC();
  v9 = swift_allocError(v7, v8, 0, 0);
  *v10 = v5;
  v11 = qword_10028ADB0;
  v12 = v5;
  if (v11 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v13 = type metadata accessor for Logger(0);
  sub_100005288(v13, (uint64_t)qword_1002A8990);
  v14 = swift_errorRetain(v9);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    v19 = _convertErrorToNSError(_:)(v9);
    v22 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &error);
    *v18 = v19;
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error validating signature: %@", v17, 0xCu);
    v20 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {

    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return 0;
}

BOOL sub_100089AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  const __CFData *isa;
  SecCertificateRef v9;
  __SecCertificate *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;

  v3 = *(_QWORD *)(a3 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(a3);
    v5 = (unint64_t *)(a3 + 40);
    while (1)
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      sub_10000F450(v7, *v5);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v9 = SecCertificateCreateWithData(0, isa);

      if (!v9)
        break;
      v10 = v9;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v11 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v12 >= v11 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v5 += 2;
      v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized Array._endMutation()(v13);
      sub_10000F494(v7, v6);

      if (!--v3)
      {
        swift_bridgeObjectRelease(a3);
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A8990);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to create certificate from data.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    sub_10000F494(v7, v6);
    goto LABEL_19;
  }
LABEL_13:
  v16 = sub_100089344();
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  if (!v16)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A8990);
    v16 = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v22, "Unable to extract public signing key from certificate chain.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
LABEL_19:
    v19 = 0;
    goto LABEL_20;
  }
  v19 = sub_100089868((__SecKey *)v16);
LABEL_20:

  return v19;
}

unint64_t sub_100089DCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E988;
  if (!qword_10028E988)
  {
    type metadata accessor for CFError(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CFErrorRef, v1);
    atomic_store(result, (unint64_t *)&qword_10028E988);
  }
  return result;
}

uint64_t sub_100089E14(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v7 = type metadata accessor for IdentityRecord(0);
  v26 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7, v8);
  v25 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9, v11);
  v14 = (char *)v22 - v13;
  v15 = _swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage;
  v24 = *(_QWORD *)(a3 + 16);
  if (v24)
  {
    v16 = 0;
    v17 = _swiftEmptyArrayStorage;
    v22[1] = a2;
    v23 = a3;
    v22[0] = a1;
    while (v16 < *(_QWORD *)(a3 + 16))
    {
      v18 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      v15 = *(_QWORD **)(v26 + 72);
      sub_100027FE8(a3 + v18 + (_QWORD)v15 * v16, (uint64_t)v14, type metadata accessor for IdentityRecord);
      v19 = a1(v14);
      if (v3)
      {
        sub_100028388((uint64_t)v14, type metadata accessor for IdentityRecord);
        swift_release(v17);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v15;
      }
      if ((v19 & 1) != 0)
      {
        sub_10003B730((uint64_t)v14, v25, type metadata accessor for IdentityRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          sub_1001D4C54(0, v17[2] + 1, 1);
        v17 = v27;
        v21 = v27[2];
        v20 = v27[3];
        if (v21 >= v20 >> 1)
        {
          sub_1001D4C54(v20 > 1, v21 + 1, 1);
          v17 = v27;
        }
        v17[2] = v21 + 1;
        result = sub_10003B730(v25, (uint64_t)v17 + v18 + v21 * (_QWORD)v15, type metadata accessor for IdentityRecord);
        a3 = v23;
        a1 = (uint64_t (*)(char *))v22[0];
      }
      else
      {
        result = sub_100028388((uint64_t)v14, type metadata accessor for IdentityRecord);
      }
      if (v24 == ++v16)
      {
        v15 = v27;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v15;
  }
  return result;
}

uint64_t sub_10008A02C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;

  v4 = sub_1000080B4(&qword_10028EA78);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v22 - v15;
  v23 = sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x797469746E656449, 0xEE0064726F636552, 1);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v13, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_100263A28, v19 + v6, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v20 + v19, (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_10000732C((_QWORD *)(*v23 + 16), *(_QWORD *)(*v23 + 40));
  sub_10009D3C8((uint64_t)v16, (uint64_t)sub_10008C010, v20);
  swift_release(v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v8);
}

uint64_t sub_10008A1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;

  v4 = sub_1000080B4(&qword_10028EA80);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v22 - v15;
  v23 = sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A520, 1);
  v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v13, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v18 = *(unsigned __int8 *)(v5 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_100263A50, v19 + v6, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v20 + v19, (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  sub_10000732C((_QWORD *)(*v23 + 16), *(_QWORD *)(*v23 + 40));
  sub_10009D3E4((uint64_t)v16, (uint64_t)sub_10008C038, v20);
  swift_release(v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v8);
}

uint64_t sub_10008A3B4(uint64_t a1, char a2, uint64_t a3, const char *a4, uint64_t *a5, const char *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A68);
    swift_errorRetain(a1);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = a1;
      v21 = swift_slowAlloc(32, -1);
      v30 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_errorRetain(a1);
      v22 = sub_1000080B4(&qword_10028E850);
      v23 = String.init<A>(describing:)(&v29, v22);
      v25 = v24;
      v29 = sub_1001DEF4C(v23, v24, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v25);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, a4, v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    v30 = a1;
    v28 = sub_1000080B4(a5);
    return CheckedContinuation.resume(throwing:)(&v30, v28);
  }
  else
  {
    v9 = qword_10028ADF8;
    swift_bridgeObjectRetain(a1);
    if (v9 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v10 = type metadata accessor for Logger(0);
    sub_100005288(v10, (uint64_t)qword_1002A8A68);
    swift_bridgeObjectRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v14 = 134217984;
      v30 = *(_QWORD *)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      sub_1000057B0(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, a6, v14, 0xCu);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 0);
    }

    v30 = a1;
    v26 = sub_1000080B4(a5);
    return CheckedContinuation.resume(returning:)(&v30, v26);
  }
}

uint64_t sub_10008A6EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v5 = sub_1000080B4(&qword_10028D660);
  v4[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4(&qword_10028EA60);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityServiceRecord(0);
  v4[20] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[21] = v8;
  v4[22] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10008A798, 0, 0);
}

uint64_t sub_10008A798()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 184) = v1;
  v2 = sub_1000080B4(&qword_10028EA68);
  *v1 = v0;
  v1[1] = sub_10008A828;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001DLL, 0x800000010020ADE0, sub_10008BD60, *(_QWORD *)(v0 + 136), v2);
}

uint64_t sub_10008A828()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10008AD98;
  else
    v3 = sub_10008A88C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008A88C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _UNKNOWN **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unint64_t v36;
  _QWORD *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];

  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v1);
  v4 = sub_10008BD68(v3, v2, v1);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  if (v4[2])
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80);
    sub_100027FE8((uint64_t)v4 + ((v5 + 32) & ~v5), *(_QWORD *)(v0 + 152), type metadata accessor for IdentityServiceRecord);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v9, v6, 1, v7);
  swift_bridgeObjectRelease(v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    sub_100004934(*(_QWORD *)(v0 + 152), &qword_10028EA60);
    v10 = &off_10028A000;
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v11 = (_QWORD *)(v0 + 32);
    v12 = *(_QWORD *)(v0 + 128);
    v45 = type metadata accessor for Logger(0);
    sub_100005288(v45, (uint64_t)qword_1002A8A68);
    v13 = swift_bridgeObjectRetain_n(v12, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(_QWORD *)(v0 + 128);
    if (v16)
    {
      v18 = *(_QWORD *)(v0 + 120);
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v46[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(v17);
      v21 = v18;
      v10 = &off_10028A000;
      *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v21, v17, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
      swift_bridgeObjectRelease_n(v17, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to find record for serviceID: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      v22 = v19;
      v11 = (_QWORD *)(v0 + 32);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    }

    type metadata accessor for IdentityError(0);
    v27 = v26;
    *(_QWORD *)(v0 + 40) = -3008;
    v28 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_10008BF58();
    v30 = _BridgedStoredNSError.init(_:userInfo:)(v11, v0 + 40, v28, v27, v29);
    swift_willThrow(v30);
    if (v10[447] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v31 = *(_QWORD *)(v0 + 128);
    sub_100005288(v45, (uint64_t)qword_1002A8A68);
    v32 = swift_bridgeObjectRetain_n(v31, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = os_log_type_enabled(v33, v34);
    v36 = *(_QWORD *)(v0 + 128);
    if (v35)
    {
      v44 = *(_QWORD *)(v0 + 120);
      v37 = v11;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v46[0] = v39;
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain(v36);
      *(_QWORD *)(v0 + 24) = sub_1001DEF4C(v44, v36, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v37);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Error attempting to fetch identity for serviceID: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    }

    v40 = *(_QWORD *)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 144);
    v41 = *(_QWORD *)(v0 + 152);
    swift_willThrow(v43);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_10003B730(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176), type metadata accessor for IdentityServiceRecord);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 200) = v23;
    v24 = sub_1000080B4(&qword_10028EA70);
    *v23 = v0;
    v23[1] = sub_10008AF80;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD000000000000016, 0x800000010020AE00, sub_10008BFA0, *(_QWORD *)(v0 + 136), v24);
  }
}

uint64_t sub_10008AD98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A68);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 24) = sub_1001DEF4C(v8, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error attempting to fetch identity for serviceID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
  }

  v11 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  swift_willThrow(v14);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008AF80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10008B690;
  else
    v3 = sub_10008AFE4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10008AFE4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _UNKNOWN **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  unint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66[2];

  v1 = v0 + 11;
  v2 = v0[7];
  v3 = &off_10028A000;
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = v0[22];
    v5 = swift_task_alloc(32);
    *(_QWORD *)(v5 + 16) = v4;
    v6 = sub_100089E14((uint64_t (*)(char *))sub_10008BFA8, v5, v2);
    swift_task_dealloc(v5);
    v7 = *(_QWORD *)(v6 + 16);
    v8 = type metadata accessor for IdentityRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (v7)
    {
      sub_100027FE8(v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v0[18], type metadata accessor for IdentityRecord);
      v10 = 0;
    }
    else
    {
      v10 = 1;
    }
    v23 = v0[18];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v23, v10, 1, v8);
    swift_bridgeObjectRelease(v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v23, 1, v8) != 1)
    {
      v36 = v0[22];
      v38 = v0[18];
      v37 = v0[19];
      v39 = v0[14];
      sub_100028388(v36, type metadata accessor for IdentityServiceRecord);
      sub_10003B730(v38, v39, type metadata accessor for IdentityRecord);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      v40 = (uint64_t (*)(void))v0[1];
      return v40();
    }
    v24 = v0 + 9;
    sub_100004934(v0[18], &qword_10028D660);
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v25 = v0[16];
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8A68);
    v27 = swift_bridgeObjectRetain_n(v25, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = os_log_type_enabled(v28, v29);
    v31 = v0[16];
    if (v30)
    {
      v32 = v0[15];
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v66[0] = swift_slowAlloc(32, -1);
      v34 = v66[0];
      *(_DWORD *)v33 = 136315138;
      swift_bridgeObjectRetain(v31);
      v0[10] = sub_1001DEF4C(v32, v31, v66);
      v3 = &off_10028A000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11);
      swift_bridgeObjectRelease_n(v31, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "No identity record found for serviceID: %s", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      v35 = v34;
      v24 = v0 + 9;
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v0[16], 2);
    }

    v41 = v0[22];
    type metadata accessor for IdentityError(0);
    v48 = v47;
    v0[9] = -3007;
    v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_10008BF58();
    v46 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 8, v24, v49, v48, v50);
  }
  else
  {
    v11 = v0 + 12;
    swift_bridgeObjectRelease(v0[7]);
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v12 = v0[16];
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A8A68);
    v14 = swift_bridgeObjectRetain_n(v12, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    v17 = os_log_type_enabled(v15, v16);
    v18 = v0[16];
    if (v17)
    {
      v19 = v0[15];
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v66[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain(v18);
      v0[13] = sub_1001DEF4C(v19, v18, v66);
      v11 = v0 + 12;
      v1 = v0 + 11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14);
      swift_bridgeObjectRelease_n(v18, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No identity record found for serviceID: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      v22 = v21;
      v3 = &off_10028A000;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v0[16], 2);
    }

    v41 = v0[22];
    type metadata accessor for IdentityError(0);
    v43 = v42;
    v0[12] = -3007;
    v44 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v45 = sub_10008BF58();
    v46 = _BridgedStoredNSError.init(_:userInfo:)(v1, v11, v44, v43, v45);
  }
  swift_willThrow(v46);
  sub_100028388(v41, type metadata accessor for IdentityServiceRecord);
  if (v3[447] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v51 = v0[16];
  v52 = type metadata accessor for Logger(0);
  sub_100005288(v52, (uint64_t)qword_1002A8A68);
  v53 = swift_bridgeObjectRetain_n(v51, 2);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter(v54);
  v56 = os_log_type_enabled(v54, v55);
  v57 = v0[16];
  if (v56)
  {
    v58 = v0[15];
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v60 = swift_slowAlloc(32, -1);
    v66[0] = v60;
    *(_DWORD *)v59 = 136315138;
    swift_bridgeObjectRetain(v57);
    v0[3] = sub_1001DEF4C(v58, v57, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4);
    swift_bridgeObjectRelease_n(v57, 3);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Error attempting to fetch identity for serviceID: %s", v59, 0xCu);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[16], 2);
  }

  v61 = v0[22];
  v63 = v0[18];
  v62 = v0[19];
  swift_willThrow(v64);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

uint64_t sub_10008B690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  sub_100028388(*(_QWORD *)(v0 + 176), type metadata accessor for IdentityServiceRecord);
  if (qword_10028ADF8 != -1)
    swift_once(&qword_10028ADF8, sub_100046E08);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A68);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 120);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v0 + 24) = sub_1001DEF4C(v8, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error attempting to fetch identity for serviceID: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
  }

  v11 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  swift_willThrow(v14);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10008B888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_1000080B4(&qword_10028EA88);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100263A78, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_1001E60B8(a3, (uint64_t)sub_10008C12C, v12);
  return swift_release(v12);
}

uint64_t sub_10008B980(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for IdentityRecord(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028D618);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10008C16C(a1, (uint64_t)v14);
  if (swift_getEnumCaseMultiPayload(v14, v11) == 1)
  {
    v15 = *v14;
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A68);
    swift_errorRetain(v15);
    v17 = swift_errorRetain(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v34 = v15;
      v35 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_errorRetain(v15);
      v22 = sub_1000080B4(&qword_10028E850);
      v23 = String.init<A>(describing:)(&v34, v22);
      v25 = v24;
      v34 = sub_1001DEF4C(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error saving IdentityRecord : %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
    }

    v35 = v15;
    v33 = sub_1000080B4(&qword_10028EA88);
    return CheckedContinuation.resume(throwing:)(&v35, v33);
  }
  else
  {
    sub_10003B730((uint64_t)v14, (uint64_t)v10, type metadata accessor for IdentityRecord);
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A68);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully saved IdentityRecord.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, &v10[*(int *)(v7 + 20)], v2);
    v31 = sub_1000080B4(&qword_10028EA88);
    CheckedContinuation.resume(returning:)(v6, v31);
    return sub_100028388((uint64_t)v10, type metadata accessor for IdentityRecord);
  }
}

uint64_t type metadata accessor for IdentityStorageController()
{
  return objc_opt_self(_TtC13appleaccountd25IdentityStorageController);
}

uint64_t sub_10008BD60(uint64_t a1)
{
  uint64_t v1;

  return sub_10008A1F4(a1, v1);
}

_QWORD *sub_10008BD68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v28 = type metadata accessor for IdentityServiceRecord(0);
  v8 = __chkstk_darwin(v28, v7);
  v29 = (uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v13 = (char *)v25 - v12;
  result = _swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v25[1] = v3;
    v16 = *(_QWORD *)(v11 + 72);
    v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v27;
    v18 = _swiftEmptyArrayStorage;
    v26 = a2;
    do
    {
      sub_100027FE8(v17, (uint64_t)v13, type metadata accessor for IdentityServiceRecord);
      v19 = &v13[*(int *)(v28 + 24)];
      v20 = *((_QWORD *)v19 + 1);
      v21 = *(_QWORD *)v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v19, v20, a2, a3, 0) & 1) != 0)
      {
        v22 = a3;
        sub_10003B730((uint64_t)v13, v29, type metadata accessor for IdentityServiceRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          sub_1001D4C80(0, v18[2] + 1, 1);
        v18 = v30;
        v24 = v30[2];
        v23 = v30[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001D4C80(v23 > 1, v24 + 1, 1);
          v18 = v30;
        }
        v18[2] = v24 + 1;
        sub_10003B730(v29, (uint64_t)v18 + v27 + v24 * v16, type metadata accessor for IdentityServiceRecord);
        a3 = v22;
        a2 = v26;
      }
      else
      {
        sub_100028388((uint64_t)v13, type metadata accessor for IdentityServiceRecord);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v30;
  }
  return result;
}

unint64_t sub_10008BF58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B5D0;
  if (!qword_10028B5D0)
  {
    type metadata accessor for IdentityError(255);
    result = swift_getWitnessTable(&unk_100218178, v1);
    atomic_store(result, (unint64_t *)&qword_10028B5D0);
  }
  return result;
}

uint64_t sub_10008BFA0(uint64_t a1)
{
  uint64_t v1;

  return sub_10008A02C(a1, v1);
}

uint64_t sub_10008BFA8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + *(int *)(type metadata accessor for IdentityRecord(0) + 20);
  type metadata accessor for IdentityServiceRecord(0);
  return static UUID.== infix(_:_:)(v1) & 1;
}

uint64_t sub_10008C004()
{
  return sub_10008C0D0(&qword_10028EA78);
}

uint64_t sub_10008C010(uint64_t a1, char a2)
{
  return sub_10008C054(a1, a2, &qword_10028EA78, "Error fetching IdentityRecords: %s", "Fetched %ld IdentityRecords");
}

uint64_t sub_10008C02C()
{
  return sub_10008C0D0(&qword_10028EA80);
}

uint64_t sub_10008C038(uint64_t a1, char a2)
{
  return sub_10008C054(a1, a2, &qword_10028EA80, "Error fetching IdentityServiceRecords: %s", "Fetched %ld IdentityServiceRecords");
}

uint64_t sub_10008C054(uint64_t a1, char a2, uint64_t *a3, const char *a4, const char *a5)
{
  uint64_t v5;
  char v10;
  uint64_t v11;

  v10 = a2 & 1;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(sub_1000080B4(a3) - 8) + 80);
  return sub_10008A3B4(a1, v10, v5 + ((v11 + 16) & ~v11), a4, a3, a5);
}

uint64_t sub_10008C0C4()
{
  return sub_10008C0D0(&qword_10028EA88);
}

uint64_t sub_10008C0D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_1000080B4(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10008C12C(uint64_t a1)
{
  sub_1000080B4(&qword_10028EA88);
  return sub_10008B980(a1);
}

uint64_t sub_10008C16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028D618);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008C1B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = 0;
    v7 = 0;
    goto LABEL_22;
  }
  v4 = sub_10010A9E0(0x656C746974, 0xE500000000000000);
  if ((v5 & 1) == 0)
  {
    v7 = 0;
    v8 = 0;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_13;
LABEL_22:
    v13 = 0;
    v12 = 0;
LABEL_23:
    v20 = 0u;
    v21 = 0u;
    goto LABEL_24;
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v20);
  v6 = swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v6)
    v7 = v18;
  else
    v7 = 0;
  if (v6)
    v8 = v19;
  else
    v8 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_22;
LABEL_13:
  v9 = sub_10010A9E0(2036625250, 0xE400000000000000);
  if ((v10 & 1) != 0)
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v9, (uint64_t)&v20);
    v11 = swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v11)
      v12 = v18;
    else
      v12 = 0;
    if (v11)
      v13 = v19;
    else
      v13 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_23;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_23;
  }
  v16 = sub_10010A9E0(0x746E656C6973, 0xE600000000000000);
  if ((v17 & 1) == 0)
    goto LABEL_23;
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v20);
LABEL_24:
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v21 + 1))
  {
    result = sub_10008C388((uint64_t)&v20);
    goto LABEL_28;
  }
  result = swift_dynamicCast(&v18, &v20, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((result & 1) == 0)
  {
LABEL_28:
    v15 = 1;
    goto LABEL_29;
  }
  v15 = v18 != 0;
LABEL_29:
  *(_QWORD *)a2 = v7;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v15;
  return result;
}

uint64_t sub_10008C388(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_10028E7E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PushMessageAlert(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for PushMessageAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PushMessageAlert(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PushMessageAlert(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushMessageAlert()
{
  return &type metadata for PushMessageAlert;
}

uint64_t sub_10008C5CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  void *v16;
  _QWORD v17[3];

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "valueForEntitlement:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v15, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  sub_100006988((uint64_t)v15, (uint64_t)&v16);
  if (v17[2])
  {
    if ((swift_dynamicCast(&v14, &v16, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v14 & 1) != 0)
    {
      return 1;
    }
  }
  else
  {
    sub_10008C388((uint64_t)&v16);
  }
  if (qword_10028ADF0 != -1)
    swift_once(&qword_10028ADF0, sub_100046DE4);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A8A50);
  v7 = swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    v16 = v2;
    v12 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17);
    *v11 = v2;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client is missing user notifications entitlement: %@", v10, 0xCu);
    v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  return 0;
}

uint64_t sub_10008C880()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd36AccountUserNotificationDaemonService__notificationManager;
  v2 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_10008C8DC()
{
  return type metadata accessor for AccountUserNotificationDaemonService(0);
}

uint64_t type metadata accessor for AccountUserNotificationDaemonService(uint64_t a1)
{
  uint64_t result;

  result = qword_10028EB20;
  if (!qword_10028EB20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccountUserNotificationDaemonService);
  return result;
}

void sub_10008C920(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10008C99C(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_10008C99C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028CFD8)
  {
    v2 = sub_10000D908(&qword_100294AE0);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028CFD8);
  }
}

void sub_10008C9F4(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t inited;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD v27[5];
  _BYTE v28[96];
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = sub_1000080B4(&qword_10028D068);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10008C5CC() & 1) != 0)
  {
    v8 = objc_msgSend(a1, "title");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v25 = v9;

    v10 = objc_msgSend(a1, "message");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = objc_msgSend(a1, "action");
    if (v14)
      v15 = 0xD000000000000018;
    else
      v15 = 0xD00000000000002BLL;
    if (v14)
      v16 = 0x800000010020AEB0;
    else
      v16 = 0x800000010020AF10;
    v17 = sub_1000080B4((uint64_t *)&unk_100293A90);
    inited = swift_initStackObject(v17, v28);
    *(_OWORD *)(inited + 16) = xmmword_100219130;
    *(_QWORD *)(inited + 32) = 0xD000000000000010;
    *(_QWORD *)(inited + 40) = 0x800000010020AED0;
    *(_QWORD *)(inited + 48) = 0xD00000000000002BLL;
    *(_QWORD *)(inited + 56) = 0x800000010020AE80;
    *(_QWORD *)(inited + 64) = 0xD000000000000010;
    *(_QWORD *)(inited + 72) = 0x800000010020AEF0;
    *(_QWORD *)(inited + 80) = v15;
    *(_QWORD *)(inited + 88) = v16;
    v19 = sub_10001565C(inited);
    v20 = v25;
    *(_QWORD *)&v29 = v26;
    *((_QWORD *)&v29 + 1) = v25;
    v30 = v11;
    v31 = v13;
    v32 = v19;
    v33 = 3;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd36AccountUserNotificationDaemonService__notificationManager, v3);
    Dependency.wrappedValue.getter(v27, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10000732C(v27, v27[3]);
    sub_1001CEA64(&v29);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v20);
    sub_100006F58(v27);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v23, "Client is missing user notifications entitlement, rejecting request to trigger user notification.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

  }
}

uint64_t sub_10008CD0C(char a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    return dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, a3);
  v6 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v7 = objc_msgSend(v6, "environment");

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRelease(v8);
    return dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, a3);
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v10 = v9;
  result = swift_bridgeObjectRelease(v8);
  if ((v10 & 1) == 0)
    return dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, a3);
  return result;
}

uint64_t sub_10008CE18()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for CAEvent()
{
  return objc_opt_self(_TtC13appleaccountd7CAEvent);
}

uint64_t sub_10008CE6C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  __n128 v61;
  _BYTE *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  __n128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  BOOL v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;

  v125 = a2;
  v3 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v122 = *(_QWORD *)(v3 - 8);
  v123 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v124 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v114 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = 1684632420;
  *((_QWORD *)v10 + 1) = 0xE400000000000000;
  *((_QWORD *)v10 + 2) = 0xD000000000000011;
  *((_QWORD *)v10 + 3) = 0x800000010020B000;
  *((_QWORD *)v10 + 4) = 0x6D617473656D6974;
  *((_QWORD *)v10 + 5) = 0xE900000000000070;
  *((_QWORD *)v10 + 6) = 0x727574616E676973;
  *((_QWORD *)v10 + 7) = 0xE900000000000065;
  *((_QWORD *)v10 + 8) = 0xD000000000000010;
  *((_QWORD *)v10 + 9) = 0x800000010020B020;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_20;
  v11 = sub_10010A9E0(1684632420, 0xE400000000000000);
  if ((v12 & 1) == 0)
    goto LABEL_20;
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)&v129);
  if ((swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_20;
  v13 = v128;
  if (!*(_QWORD *)(a1 + 16)
    || (v121 = v127,
        v14 = v128,
        v15 = sub_10010A9E0(0xD000000000000011, 0x800000010020B000),
        v13 = v14,
        (v16 & 1) == 0))
  {
    v27 = v13;
LABEL_19:
    swift_bridgeObjectRelease(v27);
LABEL_20:
    v28 = a1;
LABEL_21:
    swift_bridgeObjectRelease(v28);
    v29 = v124;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A8990);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to create encryption material.", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    v35 = 0;
    v36 = 0;
LABEL_26:
    v37 = v125;
    goto LABEL_27;
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v15, (uint64_t)&v129);
  if ((swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    v27 = v14;
    goto LABEL_19;
  }
  v120 = v128;
  if (!*(_QWORD *)(a1 + 16)
    || (v119 = v127, v17 = sub_10010A9E0(0x6D617473656D6974, 0xE900000000000070), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a1);
    v28 = v120;
    goto LABEL_21;
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v129);
  v19 = swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((v19 & 1) == 0)
  {
    swift_bridgeObjectRelease(v120);
    v27 = v14;
    goto LABEL_19;
  }
  v127 = 0;
  __chkstk_darwin(v19, v128);
  *(&v114 - 2) = (unint64_t)&v127;
  v117 = v22;
  v118 = v20;
  v116 = v21;
  if ((v20 & 0x1000000000000000) != 0 || !(v20 & 0x2000000000000000 | v21 & 0x1000000000000000))
  {
    v104 = v20;
    v105 = swift_bridgeObjectRetain(v20);
    _StringGuts._slowWithCString<A>(_:)(&v126, sub_10008F3B0, &v114 - 4, v116, v104, &type metadata for Bool, v105);
    v25 = v104;
    goto LABEL_17;
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    v115 = &v114;
    if ((v21 & 0x1000000000000000) != 0)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFFLL) + 32;
      swift_bridgeObjectRetain(v20);
    }
    else
    {
      v23 = _StringObject.sharedUTF8.getter(v116, v20);
      swift_bridgeObjectRetain(v118);
      if (!v23)
      {
        v24 = 0;
        goto LABEL_16;
      }
    }
    v24 = (_BYTE *)v23;
LABEL_16:
    sub_10008F3B0(v24, (BOOL *)&v129);
    v126 = v129;
    v25 = v118;
LABEL_17:
    swift_bridgeObjectRelease(v25);
    v26 = v120;
    goto LABEL_40;
  }
  *(_QWORD *)&v129 = v21;
  *((_QWORD *)&v129 + 1) = v20 & 0xFFFFFFFFFFFFFFLL;
  switch((char)v21)
  {
    case 0:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 32:
      swift_bridgeObjectRetain(v20);
      v39 = v118;
      v40 = 0;
      v26 = v120;
      break;
    default:
      v61 = swift_bridgeObjectRetain(v20);
      v62 = (_BYTE *)_swift_stdlib_strtod_clocale(&v129, &v127, v61);
      v26 = v120;
      if (v62)
        v40 = *v62 == 0;
      else
        v40 = 0;
      v39 = v118;
      break;
  }
  v126 = v40;
  swift_bridgeObjectRelease(v39);
LABEL_40:
  if (!v126 || (v41 = v127, v42 = v119, v43 = Data.init(base64Encoded:options:)(v119, v26, 0), v44 >> 60 == 15))
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v26);
    v27 = v118;
    goto LABEL_19;
  }
  v45 = v42;
  v46 = v43;
  *((_QWORD *)v10 + 10) = v121;
  *((_QWORD *)v10 + 11) = v14;
  *((_QWORD *)v10 + 12) = v43;
  *((_QWORD *)v10 + 13) = v44;
  v47 = (uint64_t *)&v10[v7[16]];
  *v47 = v45;
  v47[1] = v26;
  v48 = v118;
  *((_QWORD *)v10 + 14) = v116;
  *((_QWORD *)v10 + 15) = v48;
  *((_QWORD *)v10 + 16) = v41;
  v49 = *(_QWORD *)(a1 + 16);
  v121 = v44;
  sub_10000F450(v43, v44);
  if (!v49
    || (v50 = sub_10010A9E0(0x727574616E676973, 0xE900000000000065), (v51 & 1) == 0)
    || (sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v50, (uint64_t)&v129),
        (swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(a1);
    v29 = v124;
LABEL_50:
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_100005288(v56, (uint64_t)qword_1002A8990);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unable to create signing material.", v60, 2u);
      swift_slowDealloc(v60, -1, -1);

      sub_1000144D8(v46, v121);
    }
    else
    {
      sub_1000144D8(v46, v121);

    }
    v35 = 0;
    v36 = 1;
    goto LABEL_26;
  }
  v52 = v128;
  v120 = v127;
  v53 = *(_QWORD *)(a1 + 16);
  v117 = v46;
  if (v53 && (v54 = sub_10010A9E0(0xD000000000000010, 0x800000010020B020), (v55 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v54, (uint64_t)&v129);
  }
  else
  {
    v129 = 0u;
    v130 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v130 + 1))
  {
    swift_bridgeObjectRelease(v52);
    sub_100004934((uint64_t)&v129, (uint64_t *)&unk_10028E7E0);
LABEL_68:
    v29 = v124;
    v46 = v117;
    goto LABEL_50;
  }
  if ((swift_dynamicCast(&v127, &v129, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    v67 = v52;
    goto LABEL_67;
  }
  v63 = v127;
  v64 = v128;
  v119 = Data.init(base64Encoded:options:)(v120, v52, 0);
  v66 = v65;
  swift_bridgeObjectRelease(v52);
  v118 = v66;
  if (v66 >> 60 == 15)
  {
    v67 = v64;
LABEL_67:
    swift_bridgeObjectRelease(v67);
    goto LABEL_68;
  }
  v68 = &v10[v7[14]];
  v70 = v118;
  v69 = v119;
  *(_QWORD *)v68 = v119;
  *((_QWORD *)v68 + 1) = v70;
  *(_QWORD *)&v129 = v63;
  *((_QWORD *)&v129 + 1) = v64;
  sub_10000F450(v69, v70);
  v71 = sub_10006B00C();
  v72 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(44, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v71);
  swift_bridgeObjectRelease(v64);
  v116 = v72;
  if (*(_QWORD *)(v72 + 16))
  {
    v73 = *(_QWORD *)(v72 + 16);
    *(_QWORD *)&v129 = _swiftEmptyArrayStorage;
    sub_1001D4B98(0, v73, 0);
    v74 = (_QWORD *)v129;
    v75 = (_QWORD *)(v116 + 56);
    do
    {
      v76 = *(v75 - 3);
      v120 = *(v75 - 2);
      v77 = *(v75 - 1);
      v78 = *v75;
      v79 = swift_bridgeObjectRetain(*v75);
      v80 = static String._fromSubstring(_:)(v76, v120, v77, v78, v79);
      v120 = v81;
      swift_bridgeObjectRelease(v78);
      *(_QWORD *)&v129 = v74;
      v83 = v74[2];
      v82 = v74[3];
      if (v83 >= v82 >> 1)
      {
        v115 = (unint64_t *)v80;
        sub_1001D4B98(v82 > 1, v83 + 1, 1);
        v80 = (uint64_t)v115;
        v74 = (_QWORD *)v129;
      }
      v74[2] = v83 + 1;
      v84 = &v74[2 * v83];
      v85 = v120;
      v84[4] = v80;
      v84[5] = v85;
      v75 += 4;
      --v73;
    }
    while (v73);
    swift_bridgeObjectRelease(v116);
  }
  else
  {
    swift_bridgeObjectRelease(v116);
    v74 = _swiftEmptyArrayStorage;
  }
  if (v74[2] == 3)
  {
    v86 = v74[4];
    v87 = v74[5];
    swift_bridgeObjectRetain(v87);
    v88 = Data.init(base64Encoded:options:)(v86, v87, 0);
    v90 = v89;
    swift_bridgeObjectRelease(v87);
    if (v90 >> 60 != 15)
    {
      if (v74[2] < 2uLL)
      {
        __break(1u);
      }
      else
      {
        v96 = v74[6];
        v97 = v74[7];
        swift_bridgeObjectRetain(v97);
        v116 = Data.init(base64Encoded:options:)(v96, v97, 0);
        v99 = v98;
        swift_bridgeObjectRelease(v97);
        v120 = v99;
        if (v99 >> 60 == 15)
        {
          swift_bridgeObjectRelease(v74);
LABEL_91:
          sub_1000144D8(v88, v90);
          goto LABEL_79;
        }
        if (v74[2] >= 3uLL)
        {
          v100 = v74[8];
          v101 = v74[9];
          swift_bridgeObjectRetain(v101);
          swift_bridgeObjectRelease(v74);
          v115 = (unint64_t *)Data.init(base64Encoded:options:)(v100, v101, 0);
          v103 = v102;
          swift_bridgeObjectRelease(v101);
          v114 = v103;
          if (v103 >> 60 != 15)
          {
            v106 = sub_1000080B4(&qword_10028ECC8);
            v107 = swift_allocObject(v106, 80, 7);
            *(_OWORD *)(v107 + 16) = xmmword_10021AF70;
            *(_QWORD *)(v107 + 32) = v88;
            *(_QWORD *)(v107 + 40) = v90;
            v108 = v116;
            v109 = v120;
            *(_QWORD *)(v107 + 48) = v116;
            *(_QWORD *)(v107 + 56) = v109;
            v110 = (uint64_t)v115;
            v111 = v114;
            *(_QWORD *)(v107 + 64) = v115;
            *(_QWORD *)(v107 + 72) = v111;
            *(_QWORD *)&v10[v7[15]] = v107;
            *(_QWORD *)&v129 = v117;
            *((_QWORD *)&v129 + 1) = v121;
            sub_100014534(v88, v90);
            sub_100014534(v108, v109);
            sub_100014534(v110, v111);
            v112 = sub_10008F41C();
            P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)(&v129, &type metadata for Data, v112);
            sub_1000144D8(v119, v118);
            sub_1000144D8(v88, v90);
            sub_1000144D8(v116, v120);
            sub_1000144D8((uint64_t)v115, v114);
            (*(void (**)(char *, char *, uint64_t))(v122 + 32))(&v10[v7[13]], v6, v123);
            v113 = v125;
            sub_100027FE8((uint64_t)v10, v125, type metadata accessor for WalrusPCSEncryptionMaterial);
            (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v124 + 56))(v113, 0, 1, v7);
            return sub_100028388((uint64_t)v10, type metadata accessor for WalrusPCSEncryptionMaterial);
          }
          sub_1000144D8(v116, v120);
          goto LABEL_91;
        }
      }
      __break(1u);
      JUMPOUT(0x10008DB78);
    }
  }
  swift_bridgeObjectRelease(v74);
LABEL_79:
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v91 = type metadata accessor for Logger(0);
  v92 = sub_100005288(v91, (uint64_t)qword_1002A8990);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.error.getter(v93);
  if (os_log_type_enabled(v93, v94))
  {
    v95 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Unable to create certificate chain data.", v95, 2u);
    swift_slowDealloc(v95, -1, -1);

    sub_1000144D8(v119, v118);
    sub_1000144D8(v117, v121);
  }
  else
  {
    sub_1000144D8(v117, v121);
    sub_1000144D8(v119, v118);

  }
  v35 = 1;
  v36 = 1;
  v29 = v124;
  v37 = v125;
LABEL_27:
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 3));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 5));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 7));
  swift_bridgeObjectRelease(*((_QWORD *)v10 + 9));
  if (v36)
  {
    swift_bridgeObjectRelease(*((_QWORD *)v10 + 11));
    sub_10000F494(*((_QWORD *)v10 + 12), *((_QWORD *)v10 + 13));
    swift_bridgeObjectRelease(*((_QWORD *)v10 + 15));
    if (!v35)
      goto LABEL_29;
LABEL_33:
    sub_10000F494(*(_QWORD *)&v10[v7[14]], *(_QWORD *)&v10[v7[14] + 8]);
    goto LABEL_29;
  }
  if (v35)
    goto LABEL_33;
LABEL_29:
  if (v36)
    swift_bridgeObjectRelease(*(_QWORD *)&v10[v7[16] + 8]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v29 + 56))(v37, 1, 1, v7);
}

uint64_t sub_10008DBFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v53 = type metadata accessor for String.Encoding(0);
  v1 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53, v2);
  v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = 8827;
  v55 = 0xE200000000000000;
  v5 = *v0;
  v6 = (void *)v0[1];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 2243106;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  v9 = v0[10];
  v10 = (void *)v0[11];
  swift_bridgeObjectRetain(v10);
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 34;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13 = v54;
  v14 = v55;
  v54 = 8748;
  v55 = 0xE200000000000000;
  v15 = v0[2];
  v16 = (void *)v0[3];
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 2243106;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  v19 = (uint64_t *)((char *)v0 + *(int *)(type metadata accessor for WalrusPCSEncryptionMaterial(0) + 64));
  v20 = *v19;
  v21 = (void *)v19[1];
  swift_bridgeObjectRetain(v21);
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 34;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24 = v54;
  v25 = (void *)v55;
  v54 = v13;
  v55 = v14;
  swift_bridgeObjectRetain(v14);
  v26._countAndFlagsBits = v24;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v25);
  v27 = v54;
  v28 = v55;
  v54 = 8748;
  v55 = 0xE200000000000000;
  v29 = v0[4];
  v30 = (void *)v0[5];
  swift_bridgeObjectRetain(v30);
  v31._countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v30);
  v32._countAndFlagsBits = 2243106;
  v32._object = (void *)0xE300000000000000;
  String.append(_:)(v32);
  v34 = v0[14];
  v33 = (void *)v0[15];
  swift_bridgeObjectRetain(v33);
  v35._countAndFlagsBits = v34;
  v35._object = v33;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(v33);
  v36._countAndFlagsBits = 32034;
  v36._object = (void *)0xE200000000000000;
  String.append(_:)(v36);
  v37 = v54;
  v38 = (void *)v55;
  v54 = v27;
  v55 = v28;
  swift_bridgeObjectRetain(v28);
  v39._countAndFlagsBits = v37;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(v28);
  v40 = swift_bridgeObjectRelease(v38);
  v41 = v54;
  v42 = v55;
  static String.Encoding.utf8.getter(v40);
  v43 = String.data(using:allowLossyConversion:)(v4, 0, v41, v42);
  v45 = v44;
  swift_bridgeObjectRelease(v42);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v53);
  if (v45 >> 60 == 15)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_100005288(v46, (uint64_t)qword_1002A8990);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to create signed JSON data.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    return 0;
  }
  return v43;
}

uint64_t type metadata accessor for WalrusPCSEncryptionMaterial(uint64_t a1)
{
  return sub_100004C78(a1, qword_10028ED30, (uint64_t)&nominal type descriptor for WalrusPCSEncryptionMaterial);
}

Swift::Int sub_10008DF34()
{
  Swift::Int result;

  result = sub_100152390((uint64_t)&off_10025E5B8);
  qword_10028ECB0 = result;
  return result;
}

uint64_t sub_10008DF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[72];
  _OWORD v73[4];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v71 = a2;
  v3 = sub_1000080B4(&qword_10028ECB8);
  __chkstk_darwin(v3, v4);
  v68 = (uint64_t)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v6 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66, v7);
  v67 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for WalrusWebAccessInfo(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70, v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy(v11, "webSessionID");
  v11[13] = 0;
  *((_WORD *)v11 + 7) = -5120;
  *((_QWORD *)v11 + 2) = 0xD000000000000015;
  *((_QWORD *)v11 + 3) = 0x800000010020AFC0;
  *((_QWORD *)v11 + 4) = 0x656D614E707061;
  *((_QWORD *)v11 + 5) = 0xE700000000000000;
  *((_QWORD *)v11 + 6) = 0x65746E6F43707061;
  *((_QWORD *)v11 + 7) = 0xEA00000000007478;
  *((_QWORD *)v11 + 8) = 0x6E49726576726573;
  *((_QWORD *)v11 + 9) = 0xEA00000000006F66;
  *((_QWORD *)v11 + 10) = 0xD000000000000012;
  *((_QWORD *)v11 + 11) = 0x800000010020AFE0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_28;
  v12 = sub_10010A9E0(0x6973736553626577, 0xEC00000044496E6FLL);
  if ((v13 & 1) == 0)
    goto LABEL_28;
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)&v75);
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_28;
  v14 = *((_QWORD *)&v73[0] + 1);
  if (!*(_QWORD *)(a1 + 16)
    || (v15 = *(_QWORD *)&v73[0], v16 = sub_10010A9E0(0xD000000000000015, 0x800000010020AFC0), (v17 & 1) == 0)
    || (sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v16, (uint64_t)&v75),
        (swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0))
  {
LABEL_27:
    swift_bridgeObjectRelease(v14);
LABEL_28:
    v31 = a1;
    goto LABEL_29;
  }
  v18 = *((_QWORD *)&v73[0] + 1);
  if (!*(_QWORD *)(a1 + 16)
    || (v19 = *(_QWORD *)&v73[0], v20 = sub_10010A9E0(0x656D614E707061, 0xE700000000000000), (v21 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
    v30 = a1;
LABEL_20:
    swift_bridgeObjectRelease(v30);
    v31 = v18;
LABEL_29:
    swift_bridgeObjectRelease(v31);
LABEL_30:
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A8990);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to create web access info.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

LABEL_35:
    v38 = v71;
    v39 = v70;
    v40 = v69;
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 5));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 7));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 9));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 11));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v38, 1, 1, v39);
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v20, (uint64_t)&v75);
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
LABEL_26:
    swift_bridgeObjectRelease(v18);
    goto LABEL_27;
  }
  v65 = *((_QWORD *)&v73[0] + 1);
  if (!*(_QWORD *)(a1 + 16)
    || (v64 = *(_QWORD *)&v73[0], v22 = sub_10010A9E0(0x65746E6F43707061, 0xEA00000000007478), (v23 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
    v32 = a1;
LABEL_22:
    swift_bridgeObjectRelease(v32);
    v30 = v65;
    goto LABEL_20;
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v22, (uint64_t)&v75);
  v24 = sub_1000080B4(&qword_10028CEB0);
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, v24, 6) & 1) == 0)
  {
LABEL_25:
    swift_bridgeObjectRelease(v65);
    goto LABEL_26;
  }
  v25 = *(_QWORD *)&v73[0];
  if (!*(_QWORD *)(a1 + 16) || (v26 = sub_10010A9E0(0x6E49726576726573, 0xEA00000000006F66), (v27 & 1) == 0))
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a1);
    v32 = v25;
    goto LABEL_22;
  }
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v75);
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v25);
    goto LABEL_25;
  }
  v63 = v25;
  v60 = v19;
  v61 = v15;
  v62 = *((_QWORD *)&v73[0] + 1);
  v59 = *(_QWORD *)&v73[0];
  if (*(_QWORD *)(a1 + 16) && (v28 = sub_10010A9E0(0xD000000000000012, 0x800000010020AFE0), (v29 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v75);
  }
  else
  {
    v75 = 0u;
    v76 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  if (!*((_QWORD *)&v76 + 1))
  {
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v14);
    sub_100004934((uint64_t)&v75, (uint64_t *)&unk_10028E7E0);
    goto LABEL_30;
  }
  v42 = sub_1000080B4(&qword_10028C088);
  if ((swift_dynamicCast(v73, &v75, (char *)&type metadata for Any + 8, v42, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v18);
    v31 = v14;
    goto LABEL_29;
  }
  v43 = v68;
  sub_10008CE6C(*(unint64_t *)&v73[0], v68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v43, 1, v66) == 1)
  {
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v14);
    sub_100004934(v68, &qword_10028ECB8);
    goto LABEL_30;
  }
  sub_10008F324(v68, v67);
  v44 = *(_QWORD *)(v63 + 16);
  if (v44)
  {
    v45 = 0;
    v46 = _swiftEmptyArrayStorage;
    while (1)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v63 + 8 * v45 + 32));
      sub_10008F068(v47, (uint64_t)v72);
      sub_10008F368((uint64_t)v72, (uint64_t)v73);
      if (!*((_QWORD *)&v73[0] + 1))
        break;
      v77 = v73[2];
      v78 = v73[3];
      v79 = v74;
      v75 = v73[0];
      v76 = v73[1];
      if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        v46 = sub_1001343C0(0, v46[2] + 1, 1, v46);
      v49 = v46[2];
      v48 = v46[3];
      if (v49 >= v48 >> 1)
        v46 = sub_1001343C0((_QWORD *)(v48 > 1), v49 + 1, 1, v46);
      ++v45;
      v46[2] = v49 + 1;
      v50 = &v46[9 * v49];
      *((_OWORD *)v50 + 2) = v75;
      v51 = v76;
      v52 = v77;
      v53 = v78;
      v50[12] = v79;
      *((_OWORD *)v50 + 4) = v52;
      *((_OWORD *)v50 + 5) = v53;
      *((_OWORD *)v50 + 3) = v51;
      if (v44 == v45)
        goto LABEL_53;
    }
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v65);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v14);
    sub_100028388(v67, type metadata accessor for WalrusPCSEncryptionMaterial);
    goto LABEL_35;
  }
  v46 = _swiftEmptyArrayStorage;
LABEL_53:
  swift_bridgeObjectRelease(v63);
  *((_QWORD *)v11 + 12) = v61;
  *((_QWORD *)v11 + 13) = v14;
  *((_QWORD *)v11 + 14) = v60;
  *((_QWORD *)v11 + 15) = v18;
  v54 = v65;
  *((_QWORD *)v11 + 16) = v64;
  *((_QWORD *)v11 + 17) = v54;
  v55 = v59;
  *((_QWORD *)v11 + 18) = v46;
  *((_QWORD *)v11 + 19) = v55;
  *((_QWORD *)v11 + 20) = v62;
  v56 = v70;
  sub_10008F324(v67, (uint64_t)&v11[*(int *)(v70 + 60)]);
  v57 = v71;
  sub_100027FE8((uint64_t)v11, v71, type metadata accessor for WalrusWebAccessInfo);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v69 + 56))(v57, 0, 1, v56);
  return sub_100028388((uint64_t)v11, type metadata accessor for WalrusWebAccessInfo);
}

uint64_t sub_10008E840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint8_t *v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  _QWORD *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;

  v1 = type metadata accessor for WalrusWebAccessInfo(0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v7 = __chkstk_darwin(v5, v6);
  v9 = __chkstk_darwin(v7, v8);
  v13 = (char *)&v61 - v12;
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v64 = v4;
    v65 = v0;
    v66 = v11;
    v62 = v10;
    v63 = v9;
    v68 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v14);
    sub_1001D4CD8(0, v15, 0);
    v16 = 80;
    v17 = v68;
    do
    {
      v18 = qword_10021B048[*(char *)(v14 + v16)];
      v68 = v17;
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
      {
        sub_1001D4CD8(v19 > 1, v20 + 1, 1);
        v17 = v68;
      }
      v17[2] = v20 + 1;
      v17[v20 + 4] = v18;
      v16 += 72;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v14);
    v21 = v17[2];
    if (v21)
    {
      v22 = 0;
      v23 = v17 + 4;
      v24 = v13;
      do
      {
        v26 = *v23++;
        v25 = v26;
        if ((v26 & ~v22) == 0)
          v25 = 0;
        v22 |= v25;
        --v21;
      }
      while (v21);
    }
    else
    {
      v22 = 0;
      v24 = v13;
    }
    swift_release(v17);
    v33 = v66;
    if (qword_10028AE40 != -1)
      swift_once(&qword_10028AE40, sub_10008DF34);
    v34 = sub_10008EE34(v22, qword_10028ECB0);
    if (v34)
    {
      v35 = Date.init()(v34);
      Date.init(timeIntervalSince1970:)(v35, *(double *)(v65 + *(int *)(v1 + 60) + 128));
      v36 = Date.timeIntervalSince(_:)(v33);
      if (v36 <= 300.0)
      {
        if (v36 > 0.0)
        {
          v54 = v63;
          v55 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
          v55(v33, v63);
          v55((uint64_t)v24, v54);
          return 1;
        }
        if (qword_10028ADB0 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v57 = type metadata accessor for Logger(0);
        v58 = sub_100005288(v57, (uint64_t)qword_1002A8990);
        v39 = Logger.logObject.getter(v58);
        v40 = static os_log_type_t.error.getter(v39);
        if (!os_log_type_enabled(v39, v40))
          goto LABEL_39;
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        v42 = "WebAccessInfo is invalid, encryption material is invalid.";
      }
      else
      {
        if (qword_10028ADB0 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v37 = type metadata accessor for Logger(0);
        v38 = sub_100005288(v37, (uint64_t)qword_1002A8990);
        v39 = Logger.logObject.getter(v38);
        v40 = static os_log_type_t.error.getter(v39);
        if (!os_log_type_enabled(v39, v40))
          goto LABEL_39;
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        v42 = "WebAccessInfo is invalid, encryption material has expired.";
      }
      _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
      swift_slowDealloc(v41, -1, -1);
LABEL_39:

      v59 = v63;
      v60 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v60(v33, v63);
      v60((uint64_t)v24, v59);
      return 0;
    }
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v43 = type metadata accessor for Logger(0);
    sub_100005288(v43, (uint64_t)qword_1002A8990);
    v44 = (uint64_t)v64;
    v45 = sub_100027FE8(v65, (uint64_t)v64, type metadata accessor for WalrusWebAccessInfo);
    v29 = Logger.logObject.getter(v45);
    v46 = static os_log_type_t.error.getter(v29);
    if (!os_log_type_enabled(v29, v46))
    {
      sub_100028388(v44, type metadata accessor for WalrusWebAccessInfo);
      goto LABEL_33;
    }
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = (_QWORD *)swift_slowAlloc(32, -1);
    v68 = v48;
    *(_DWORD *)v47 = 136315138;
    v49 = *(_QWORD *)(v44 + 144);
    v50 = swift_bridgeObjectRetain(v49);
    v51 = Array.description.getter(v50);
    v53 = v52;
    swift_bridgeObjectRelease(v49);
    v67 = sub_1001DEF4C(v51, v53, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
    swift_bridgeObjectRelease(v53);
    sub_100028388(v44, type metadata accessor for WalrusWebAccessInfo);
    _os_log_impl((void *)&_mh_execute_header, v29, v46, "WebAccessInfo is invalid, unexpected combination of PCS keys: %s.", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v32 = v47;
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8990);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (!os_log_type_enabled(v29, v30))
      goto LABEL_33;
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "WebAccessInfo is invalid, no app identities provided.", v31, 2u);
    v32 = v31;
  }
  swift_slowDealloc(v32, -1, -1);
LABEL_33:

  return 0;
}

BOOL sub_10008EE34(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10008EF20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for WalrusWebAccessInfo(uint64_t a1)
{
  return sub_100004C78(a1, qword_10028EDF0, (uint64_t)&nominal type descriptor for WalrusWebAccessInfo);
}

uint64_t sub_10008F068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned __int8 v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_9;
  v4 = sub_10010A9E0(25705, 0xE200000000000000);
  if ((v5 & 1) == 0)
    goto LABEL_9;
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v30);
  if ((swift_dynamicCast(&v28, &v30, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
    goto LABEL_9;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_9;
  v6 = v28;
  v7 = sub_10010A9E0(1701667182, 0xE400000000000000);
  if ((v8 & 1) == 0)
    goto LABEL_9;
  sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v7, (uint64_t)&v30);
  if ((swift_dynamicCast(&v28, &v30, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0
    && (v9 = v29, sub_1001CC2C8(v6), v11 = v10, swift_bridgeObjectRelease(v9), (v11 & 1) != 0)
    && (v12 = sub_1001CC250(v6), v12 != 9))
  {
    v25 = v12;
    if (*(_QWORD *)(a1 + 16) && (v26 = sub_10010A9E0(0x4E79616C70736964, 0xEB00000000656D61), (v27 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v26, (uint64_t)&v30);
    }
    else
    {
      v30 = 0u;
      v31 = 0u;
    }
    swift_bridgeObjectRelease(a1);
    if (*((_QWORD *)&v31 + 1))
    {
      result = swift_dynamicCast(&v28, &v30, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((result & 1) != 0)
      {
        v20 = v28;
        v21 = v29;
        v19 = v25;
        v24 = xmmword_10021AF80;
        v23 = xmmword_10021AF90;
        v22 = xmmword_10021AFA0;
        goto LABEL_15;
      }
    }
    else
    {
      sub_100004934((uint64_t)&v30, (uint64_t *)&unk_10028E7E0);
    }
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A8990);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to create app identity.", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  swift_bridgeObjectRelease(0xEB00000000656D61);
  swift_bridgeObjectRelease(0xE400000000000000);
  result = swift_bridgeObjectRelease(0xE200000000000000);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0uLL;
  v23 = 0uLL;
  v24 = 0uLL;
LABEL_15:
  *(_OWORD *)a2 = v22;
  *(_OWORD *)(a2 + 16) = v23;
  *(_OWORD *)(a2 + 32) = v24;
  *(_QWORD *)(a2 + 48) = v19;
  *(_QWORD *)(a2 + 56) = v20;
  *(_QWORD *)(a2 + 64) = v21;
  return result;
}

uint64_t sub_10008F324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008F368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028ECC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *sub_10008F3B0@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_10008F41C()
{
  unint64_t result;

  result = qword_10028ECD0;
  if (!qword_10028ECD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10028ECD0);
  }
  return result;
}

uint64_t destroy for WalrusAppIdentity(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for WalrusAppIdentity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WalrusAppIdentity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WalrusAppIdentity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WalrusAppIdentity()
{
  return &type metadata for WalrusAppIdentity;
}

uint64_t *sub_10008F6F0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    v10 = a2[7];
    a1[6] = a2[6];
    a1[7] = v10;
    v11 = a2[9];
    a1[8] = a2[8];
    a1[9] = v11;
    v12 = a2[11];
    a1[10] = a2[10];
    a1[11] = v12;
    v13 = a2[12];
    v14 = a2[13];
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    sub_10000F450(v13, v14);
    a1[12] = v13;
    a1[13] = v14;
    v15 = a2[15];
    a1[14] = a2[14];
    a1[15] = v15;
    a1[16] = a2[16];
    v16 = a3[13];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 16);
    v21 = swift_bridgeObjectRetain(v15);
    v20(v17, v18, v19, v21);
    v22 = a3[14];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = *v24;
    v26 = v24[1];
    sub_10000F450(*v24, v26);
    *v23 = v25;
    v23[1] = v26;
    v27 = a3[15];
    v28 = a3[16];
    v29 = *(uint64_t *)((char *)a2 + v27);
    *(uint64_t *)((char *)a1 + v27) = v29;
    v30 = (uint64_t *)((char *)a1 + v28);
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

uint64_t sub_10008F864(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  sub_10000F494(a1[12], a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  v4 = (char *)a1 + a2[13];
  v5 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  sub_10000F494(*(_QWORD *)((char *)a1 + a2[14]), *(_QWORD *)((char *)a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[15]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16] + 8));
}

_QWORD *sub_10008F918(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  v9 = a2[7];
  a1[6] = a2[6];
  a1[7] = v9;
  v10 = a2[9];
  a1[8] = a2[8];
  a1[9] = v10;
  v11 = a2[11];
  a1[10] = a2[10];
  a1[11] = v11;
  v12 = a2[12];
  v13 = a2[13];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  sub_10000F450(v12, v13);
  a1[12] = v12;
  a1[13] = v13;
  v14 = a2[15];
  a1[14] = a2[14];
  a1[15] = v14;
  a1[16] = a2[16];
  v15 = a3[13];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v19 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v18 - 8) + 16);
  v20 = swift_bridgeObjectRetain(v14);
  v19(v16, v17, v18, v20);
  v21 = a3[14];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = *v23;
  v25 = v23[1];
  sub_10000F450(*v23, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = a3[15];
  v27 = a3[16];
  v28 = *(_QWORD *)((char *)a2 + v26);
  *(_QWORD *)((char *)a1 + v26) = v28;
  v29 = (_QWORD *)((char *)a1 + v27);
  v30 = (_QWORD *)((char *)a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  return a1;
}

_QWORD *sub_10008FA60(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[10] = a2[10];
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a2[12];
  v19 = a2[13];
  sub_10000F450(v18, v19);
  v20 = a1[12];
  v21 = a1[13];
  a1[12] = v18;
  a1[13] = v19;
  sub_10000F494(v20, v21);
  a1[14] = a2[14];
  v22 = a2[15];
  v23 = a1[15];
  a1[15] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[16] = a2[16];
  v24 = a3[13];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[14];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v31 = *v30;
  v32 = v30[1];
  sub_10000F450(*v30, v32);
  v33 = *v29;
  v34 = v29[1];
  *v29 = v31;
  v29[1] = v32;
  sub_10000F494(v33, v34);
  v35 = a3[15];
  v36 = *(_QWORD *)((char *)a2 + v35);
  v37 = *(_QWORD *)((char *)a1 + v35);
  *(_QWORD *)((char *)a1 + v35) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v37);
  v38 = a3[16];
  v39 = (_QWORD *)((char *)a1 + v38);
  v40 = (_QWORD *)((char *)a2 + v38);
  *v39 = *v40;
  v41 = v40[1];
  v42 = v39[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_10008FC38(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v11 = a3[13];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  v14 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

_QWORD *sub_10008FCE4(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = a1[9];
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = a1[11];
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a1[12];
  v19 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10000F494(v18, v19);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = a1[15];
  a1[14] = *(_QWORD *)(a2 + 112);
  a1[15] = v20;
  swift_bridgeObjectRelease(v21);
  a1[16] = *(_QWORD *)(a2 + 128);
  v22 = a3[13];
  v23 = (char *)a1 + v22;
  v24 = a2 + v22;
  v25 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  v26 = a3[14];
  v27 = *(_QWORD *)((char *)a1 + v26);
  v28 = *(_QWORD *)((char *)a1 + v26 + 8);
  *(_OWORD *)((char *)a1 + v26) = *(_OWORD *)(a2 + v26);
  sub_10000F494(v27, v28);
  v29 = a3[15];
  v30 = *(_QWORD *)((char *)a1 + v29);
  *(_QWORD *)((char *)a1 + v29) = *(_QWORD *)(a2 + v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[16];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_10008FE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008FE24);
}

uint64_t sub_10008FE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_10008FEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008FEAC);
}

uint64_t sub_10008FEAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t sub_10008FF20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_10021B000;
  v4[1] = &unk_10021B000;
  v4[2] = &unk_10021B000;
  v4[3] = &unk_10021B000;
  v4[4] = &unk_10021B000;
  v4[5] = &unk_10021B000;
  v4[6] = &unk_10021B018;
  v4[7] = &unk_10021B000;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for P384.KeyAgreement.PublicKey(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    v4[10] = &unk_10021B018;
    v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[12] = &unk_10021B000;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_10008FFD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v37);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v45 = a2[3];
    a1[2] = a2[2];
    a1[3] = v45;
    v44 = a2[5];
    a1[4] = a2[4];
    a1[5] = v44;
    v43 = a2[7];
    a1[6] = a2[6];
    a1[7] = v43;
    v42 = a2[9];
    a1[8] = a2[8];
    a1[9] = v42;
    v6 = a2[11];
    a1[10] = a2[10];
    a1[11] = v6;
    v41 = a2[13];
    a1[12] = a2[12];
    a1[13] = v41;
    v40 = a2[15];
    a1[14] = a2[14];
    a1[15] = v40;
    v39 = a2[17];
    a1[16] = a2[16];
    a1[17] = v39;
    v8 = a2[18];
    v7 = a2[19];
    a1[18] = v8;
    a1[19] = v7;
    v46 = v8;
    v47 = a2[20];
    a1[20] = v47;
    v9 = *(int *)(a3 + 60);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = *(uint64_t *)((char *)a2 + v9 + 8);
    *v10 = *(uint64_t *)((char *)a2 + v9);
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9 + 24);
    v10[2] = *(uint64_t *)((char *)a2 + v9 + 16);
    v10[3] = v13;
    v14 = *(uint64_t *)((char *)a2 + v9 + 40);
    v10[4] = *(uint64_t *)((char *)a2 + v9 + 32);
    v10[5] = v14;
    v15 = *(uint64_t *)((char *)a2 + v9 + 56);
    v10[6] = *(uint64_t *)((char *)a2 + v9 + 48);
    v10[7] = v15;
    v16 = *(uint64_t *)((char *)a2 + v9 + 72);
    v10[8] = *(uint64_t *)((char *)a2 + v9 + 64);
    v10[9] = v16;
    v17 = *(uint64_t *)((char *)a2 + v9 + 88);
    v10[10] = *(uint64_t *)((char *)a2 + v9 + 80);
    v10[11] = v17;
    v48 = *(uint64_t *)((char *)a2 + v9 + 104);
    v49 = *(uint64_t *)((char *)a2 + v9 + 96);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
    sub_10000F450(v49, v48);
    v10[12] = v49;
    v10[13] = v48;
    v18 = v11[15];
    v10[14] = v11[14];
    v10[15] = v18;
    v10[16] = v11[16];
    v19 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    v20 = v19[13];
    v21 = (char *)v10 + v20;
    v22 = (char *)v11 + v20;
    v23 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    v24 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v23 - 8) + 16);
    v25 = swift_bridgeObjectRetain(v18);
    v24(v21, v22, v23, v25);
    v26 = v19[14];
    v27 = (_QWORD *)((char *)v10 + v26);
    v28 = (_QWORD *)((char *)v11 + v26);
    v29 = *v28;
    v30 = v28[1];
    sub_10000F450(*v28, v30);
    *v27 = v29;
    v27[1] = v30;
    v31 = v19[15];
    v32 = *(_QWORD *)((char *)v11 + v31);
    *(_QWORD *)((char *)v10 + v31) = v32;
    v33 = v19[16];
    v34 = (_QWORD *)((char *)v10 + v33);
    v35 = (_QWORD *)((char *)v11 + v33);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v36);
  }
  return a1;
}

uint64_t sub_10009023C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int *v5;
  char *v6;
  uint64_t v7;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  swift_bridgeObjectRelease(a1[18]);
  swift_bridgeObjectRelease(a1[20]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 60));
  swift_bridgeObjectRelease(v4[1]);
  swift_bridgeObjectRelease(v4[3]);
  swift_bridgeObjectRelease(v4[5]);
  swift_bridgeObjectRelease(v4[7]);
  swift_bridgeObjectRelease(v4[9]);
  swift_bridgeObjectRelease(v4[11]);
  sub_10000F494(v4[12], v4[13]);
  swift_bridgeObjectRelease(v4[15]);
  v5 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v6 = (char *)v4 + v5[13];
  v7 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  sub_10000F494(*(_QWORD *)((char *)v4 + v5[14]), *(_QWORD *)((char *)v4 + v5[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v5[15]));
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)v4 + v5[16] + 8));
}

_QWORD *sub_10009035C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v43 = a2[3];
  a1[2] = a2[2];
  a1[3] = v43;
  v42 = a2[5];
  a1[4] = a2[4];
  a1[5] = v42;
  v41 = a2[7];
  a1[6] = a2[6];
  a1[7] = v41;
  v40 = a2[9];
  a1[8] = a2[8];
  a1[9] = v40;
  v5 = a2[11];
  a1[10] = a2[10];
  a1[11] = v5;
  v39 = a2[13];
  a1[12] = a2[12];
  a1[13] = v39;
  v38 = a2[15];
  a1[14] = a2[14];
  a1[15] = v38;
  v37 = a2[17];
  a1[16] = a2[16];
  a1[17] = v37;
  v7 = a2[18];
  v6 = a2[19];
  a1[18] = v7;
  a1[19] = v6;
  v44 = v7;
  v45 = a2[20];
  a1[20] = v45;
  v8 = *(int *)(a3 + 60);
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (_QWORD *)((char *)a2 + v8);
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  *v9 = *(_QWORD *)((char *)a2 + v8);
  v9[1] = v11;
  v12 = *(_QWORD *)((char *)a2 + v8 + 24);
  v9[2] = *(_QWORD *)((char *)a2 + v8 + 16);
  v9[3] = v12;
  v13 = *(_QWORD *)((char *)a2 + v8 + 40);
  v9[4] = *(_QWORD *)((char *)a2 + v8 + 32);
  v9[5] = v13;
  v14 = *(_QWORD *)((char *)a2 + v8 + 56);
  v9[6] = *(_QWORD *)((char *)a2 + v8 + 48);
  v9[7] = v14;
  v15 = *(_QWORD *)((char *)a2 + v8 + 72);
  v9[8] = *(_QWORD *)((char *)a2 + v8 + 64);
  v9[9] = v15;
  v16 = *(_QWORD *)((char *)a2 + v8 + 88);
  v9[10] = *(_QWORD *)((char *)a2 + v8 + 80);
  v9[11] = v16;
  v46 = *(_QWORD *)((char *)a2 + v8 + 104);
  v47 = *(_QWORD *)((char *)a2 + v8 + 96);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRetain(v44);
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  sub_10000F450(v47, v46);
  v9[12] = v47;
  v9[13] = v46;
  v17 = v10[15];
  v9[14] = v10[14];
  v9[15] = v17;
  v9[16] = v10[16];
  v18 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v19 = v18[13];
  v20 = (char *)v9 + v19;
  v21 = (char *)v10 + v19;
  v22 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v23 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v22 - 8) + 16);
  v24 = swift_bridgeObjectRetain(v17);
  v23(v20, v21, v22, v24);
  v25 = v18[14];
  v26 = (_QWORD *)((char *)v9 + v25);
  v27 = (_QWORD *)((char *)v10 + v25);
  v28 = *v27;
  v29 = v27[1];
  sub_10000F450(*v27, v29);
  *v26 = v28;
  v26[1] = v29;
  v30 = v18[15];
  v31 = *(_QWORD *)((char *)v10 + v30);
  *(_QWORD *)((char *)v9 + v30) = v31;
  v32 = v18[16];
  v33 = (_QWORD *)((char *)v9 + v32);
  v34 = (_QWORD *)((char *)v10 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v35);
  return a1;
}

_QWORD *sub_10009059C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[10] = a2[10];
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  a1[12] = a2[12];
  v18 = a2[13];
  v19 = a1[13];
  a1[13] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[14] = a2[14];
  v20 = a2[15];
  v21 = a1[15];
  a1[15] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  a1[16] = a2[16];
  v22 = a2[17];
  v23 = a1[17];
  a1[17] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = a2[18];
  v25 = a1[18];
  a1[18] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[19] = a2[19];
  v26 = a2[20];
  v27 = a1[20];
  a1[20] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = *(int *)(a3 + 60);
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  *v29 = *(_QWORD *)((char *)a2 + v28);
  v31 = *(_QWORD *)((char *)a2 + v28 + 8);
  v32 = *(_QWORD *)((char *)a1 + v28 + 8);
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  v29[2] = v30[2];
  v33 = v30[3];
  v34 = v29[3];
  v29[3] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  v29[4] = v30[4];
  v35 = v30[5];
  v36 = v29[5];
  v29[5] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v29[6] = v30[6];
  v37 = v30[7];
  v38 = v29[7];
  v29[7] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v29[8] = v30[8];
  v39 = v30[9];
  v40 = v29[9];
  v29[9] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v29[10] = v30[10];
  v41 = v30[11];
  v42 = v29[11];
  v29[11] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  v43 = v30[12];
  v44 = v30[13];
  sub_10000F450(v43, v44);
  v45 = v29[12];
  v46 = v29[13];
  v29[12] = v43;
  v29[13] = v44;
  sub_10000F494(v45, v46);
  v29[14] = v30[14];
  v47 = v30[15];
  v48 = v29[15];
  v29[15] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v29[16] = v30[16];
  v49 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v50 = v49[13];
  v51 = (char *)v29 + v50;
  v52 = (char *)v30 + v50;
  v53 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 24))(v51, v52, v53);
  v54 = v49[14];
  v55 = (_QWORD *)((char *)v29 + v54);
  v56 = (_QWORD *)((char *)v30 + v54);
  v57 = *v56;
  v58 = v56[1];
  sub_10000F450(*v56, v58);
  v59 = *v55;
  v60 = v55[1];
  *v55 = v57;
  v55[1] = v58;
  sub_10000F494(v59, v60);
  v61 = v49[15];
  v62 = *(_QWORD *)((char *)v30 + v61);
  v63 = *(_QWORD *)((char *)v29 + v61);
  *(_QWORD *)((char *)v29 + v61) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = v49[16];
  v65 = (_QWORD *)((char *)v29 + v64);
  v66 = (_QWORD *)((char *)v30 + v64);
  *v65 = *v66;
  v67 = v66[1];
  v68 = v65[1];
  v65[1] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  return a1;
}

uint64_t sub_1000908EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  v8 = *(int *)(a3 + 60);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(a2 + v8 + 16);
  *(_OWORD *)v9 = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(v9 + 16) = v11;
  v12 = *(_OWORD *)(a2 + v8 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + v8 + 32);
  *(_OWORD *)(v9 + 48) = v12;
  v13 = *(_OWORD *)(a2 + v8 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(a2 + v8 + 64);
  *(_OWORD *)(v9 + 80) = v13;
  v14 = *(_OWORD *)(a2 + v8 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(a2 + v8 + 96);
  *(_OWORD *)(v9 + 112) = v14;
  *(_QWORD *)(v9 + 128) = *(_QWORD *)(a2 + v8 + 128);
  v15 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v16 = v15[13];
  v17 = v9 + v16;
  v18 = v10 + v16;
  v19 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  *(_OWORD *)(v9 + v15[14]) = *(_OWORD *)(v10 + v15[14]);
  *(_QWORD *)(v9 + v15[15]) = *(_QWORD *)(v10 + v15[15]);
  *(_OWORD *)(v9 + v15[16]) = *(_OWORD *)(v10 + v15[16]);
  return a1;
}

_QWORD *sub_1000909E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = a2[9];
  v15 = a1[9];
  a1[8] = a2[8];
  a1[9] = v14;
  swift_bridgeObjectRelease(v15);
  v16 = a2[11];
  v17 = a1[11];
  a1[10] = a2[10];
  a1[11] = v16;
  swift_bridgeObjectRelease(v17);
  v18 = a2[13];
  v19 = a1[13];
  a1[12] = a2[12];
  a1[13] = v18;
  swift_bridgeObjectRelease(v19);
  v20 = a2[15];
  v21 = a1[15];
  a1[14] = a2[14];
  a1[15] = v20;
  swift_bridgeObjectRelease(v21);
  v22 = a2[17];
  v23 = a1[17];
  a1[16] = a2[16];
  a1[17] = v22;
  swift_bridgeObjectRelease(v23);
  v24 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v24);
  v25 = a2[20];
  v26 = a1[20];
  a1[19] = a2[19];
  a1[20] = v25;
  swift_bridgeObjectRelease(v26);
  v27 = *(int *)(a3 + 60);
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (char *)a2 + v27;
  v30 = *(_QWORD *)((char *)a2 + v27 + 8);
  v31 = *(_QWORD *)((char *)a1 + v27 + 8);
  *v28 = *(_QWORD *)((char *)a2 + v27);
  v28[1] = v30;
  swift_bridgeObjectRelease(v31);
  v32 = *((_QWORD *)v29 + 3);
  v33 = v28[3];
  v28[2] = *((_QWORD *)v29 + 2);
  v28[3] = v32;
  swift_bridgeObjectRelease(v33);
  v34 = *((_QWORD *)v29 + 5);
  v35 = v28[5];
  v28[4] = *((_QWORD *)v29 + 4);
  v28[5] = v34;
  swift_bridgeObjectRelease(v35);
  v36 = *((_QWORD *)v29 + 7);
  v37 = v28[7];
  v28[6] = *((_QWORD *)v29 + 6);
  v28[7] = v36;
  swift_bridgeObjectRelease(v37);
  v38 = *((_QWORD *)v29 + 9);
  v39 = v28[9];
  v28[8] = *((_QWORD *)v29 + 8);
  v28[9] = v38;
  swift_bridgeObjectRelease(v39);
  v40 = *((_QWORD *)v29 + 11);
  v41 = v28[11];
  v28[10] = *((_QWORD *)v29 + 10);
  v28[11] = v40;
  swift_bridgeObjectRelease(v41);
  v42 = v28[12];
  v43 = v28[13];
  *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
  sub_10000F494(v42, v43);
  v44 = *((_QWORD *)v29 + 15);
  v45 = v28[15];
  v28[14] = *((_QWORD *)v29 + 14);
  v28[15] = v44;
  swift_bridgeObjectRelease(v45);
  v28[16] = *((_QWORD *)v29 + 16);
  v46 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v47 = v46[13];
  v48 = (char *)v28 + v47;
  v49 = &v29[v47];
  v50 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40))(v48, v49, v50);
  v51 = v46[14];
  v52 = *(_QWORD *)((char *)v28 + v51);
  v53 = *(_QWORD *)((char *)v28 + v51 + 8);
  *(_OWORD *)((char *)v28 + v51) = *(_OWORD *)&v29[v51];
  sub_10000F494(v52, v53);
  v54 = v46[15];
  v55 = *(_QWORD *)((char *)v28 + v54);
  *(_QWORD *)((char *)v28 + v54) = *(_QWORD *)&v29[v54];
  swift_bridgeObjectRelease(v55);
  v56 = v46[16];
  v57 = (_QWORD *)((char *)v28 + v56);
  v58 = &v29[v56];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  v61 = v57[1];
  *v57 = v60;
  v57[1] = v59;
  swift_bridgeObjectRelease(v61);
  return a1;
}

uint64_t sub_100090BE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100090BEC);
}

uint64_t sub_100090BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v8);
  }
}

uint64_t sub_100090C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100090C74);
}

uint64_t sub_100090C74(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 60), a2, a2, v7);
  }
  return result;
}

uint64_t sub_100090CE8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_10021B000;
  v4[1] = &unk_10021B000;
  v4[2] = &unk_10021B000;
  v4[3] = &unk_10021B000;
  v4[4] = &unk_10021B000;
  v4[5] = &unk_10021B000;
  v4[6] = &unk_10021B000;
  v4[7] = &unk_10021B000;
  v4[8] = &unk_10021B000;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[10] = &unk_10021B000;
  result = type metadata accessor for WalrusPCSEncryptionMaterial(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

BOOL sub_100090D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[56];
  _QWORD v47[3];
  uint64_t v48;
  _BYTE v49[32];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028FA50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v49, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v15 = Strong;
    v44 = a1;
    v16 = Strong + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore;
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v17(v13, Strong + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore, v9);
    Dependency.wrappedValue.getter(v47, v9);
    v18 = *(void (**)(char *, uint64_t))(v10 + 8);
    v18(v13, v9);
    v19 = objc_msgSend(*(id *)(*sub_10000732C(v47, v48) + 16), "aa_primaryAppleAccount");

    v20 = sub_100006F58(v47);
    if (v19)
    {
      v21 = UUID.init()(v20);
      v42 = UUID.uuidString.getter(v21);
      v43 = v22;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v17(v13, v16, v9);
      Dependency.wrappedValue.getter(v47, v9);
      v18(v13, v9);
      v23 = objc_msgSend(*(id *)(*sub_10000732C(v47, v48) + 16), "aa_primaryAppleAccount");

      sub_100006F58(v47);
      if (v23)
      {
        v24 = v43;
        sub_100091404(1, v42, v43, (uint64_t)sub_1000911F8, 0);
        swift_release(v15);
      }
      else
      {
        v35 = sub_1000080B4(&qword_10028BB60);
        inited = swift_initStackObject(v35, v46);
        *(_OWORD *)(inited + 16) = xmmword_100218E30;
        *(_QWORD *)(inited + 32) = 0x72456E496E676953;
        *(_QWORD *)(inited + 40) = 0xEB00000000726F72;
        type metadata accessor for AASignInError(0);
        v38 = v37;
        v45 = -8014;
        v39 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v40 = sub_100005150((unint64_t *)&qword_10028B608, (uint64_t (*)(uint64_t))type metadata accessor for AASignInError, (uint64_t)&unk_100218278);
        _BridgedStoredNSError.init(_:userInfo:)(v47, &v45, v39, v38, v40);
        *(_QWORD *)(inited + 48) = v47[0];
        v24 = sub_10001577C(inited);
        sub_1000911F8(0, v24);
        swift_release(v15);
        swift_bridgeObjectRelease(v43);
      }
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100005288(v30, (uint64_t)qword_1002A8A08);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "No account signed in. Skipping AppleID Availability activity.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
        swift_release(v15);

      }
      else
      {

        swift_release(v15);
      }
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A8A08);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Lost reference to self. Aborting AppleID Availability XPC activity", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
  return sub_10002B6D8();
}

void sub_1000911F8(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a2 + 16))
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8A08);
    v5 = swift_bridgeObjectRetain_n(a2, 2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v15 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_bridgeObjectRetain(a2);
      v10 = sub_1000080B4(&qword_10028E850);
      v11 = Dictionary.description.getter(a2, &type metadata for String, v10, &protocol witness table for String);
      v13 = v12;
      swift_bridgeObjectRelease(a2);
      v14 = sub_1001DEF4C(v11, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Overall AppleID Availability activity failed: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      if ((a1 & 1) == 0)
        return;
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      if ((a1 & 1) == 0)
        return;
    }
    objc_msgSend((id)objc_opt_self(AAPreferences), "isHealthCheckTTREnabled");
  }
}

uint64_t sub_100091404(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char v40;
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void *, uint64_t (*)());
  id v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t DynamicType;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  _QWORD v82[2];
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t aBlock[3];
  void *v106;
  uint64_t (*v107)();
  uint64_t v108;
  __int128 v109;
  uint64_t v110;

  v87 = a5;
  v86 = a4;
  v98 = a2;
  v99 = a3;
  LODWORD(v97) = a1;
  v93 = type metadata accessor for DispatchWorkItemFlags(0);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93, v5);
  v91 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for DispatchQoS.QoSClass(0);
  v84 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85, v7);
  v83 = (char *)v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90, v13);
  v15 = (char *)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = dispatch_group_create();
  v103 = swift_allocObject(&unk_100263C08, 24, 7);
  *(_QWORD *)(v103 + 16) = &_swiftEmptyDictionarySingleton;
  v22 = sub_100007764();
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v16);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  v24 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v25 = sub_1000080B4(&qword_10028B9F0);
  v26 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v9, v24);
  v88 = v15;
  v82[1] = v22;
  v101 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000037, 0x800000010020B0A0, v15, v12, v20, 0);
  v102 = swift_allocObject(&unk_100263C30, 17, 7);
  *(_BYTE *)(v102 + 16) = 0;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v27 = v97 & 1;
  v28 = type metadata accessor for Logger(0);
  v97 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
  v29 = Logger.logObject.getter(v97);
  v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    aBlock[0] = v32;
    *(_DWORD *)v31 = 136315138;
    if (v27)
      v33 = 0x656C756465686353;
    else
      v33 = 0x6E616D6544206E4FLL;
    *(_QWORD *)&v109 = sub_1001DEF4C(v33, 0xE900000000000064, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8);
    swift_bridgeObjectRelease(0xE900000000000064);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Starting %s Apple ID Availability activities.", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }

  v34 = *(_QWORD *)(v100 + 16);
  v35 = *(_QWORD *)(v34 + 16);
  if (v35)
  {
    v36 = v34 + 32;
    LODWORD(v100) = v27;
    if (v27)
      v37 = 0x656C756465686353;
    else
      v37 = 0x6E616D6544206E4FLL;
    v96 = v37;
    v82[0] = v34;
    v38 = swift_bridgeObjectRetain(v34);
    v38.n128_u64[0] = 136315394;
    v95 = v38;
    v94 = (char *)&type metadata for Any + 8;
    v39 = v103;
    do
    {
      sub_100006CA4(v36, (uint64_t)aBlock);
      dispatch_group_enter(v21);
      v49 = sub_100006CA4((uint64_t)aBlock, (uint64_t)&v109);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(64, -1);
        v104 = v53;
        *(_DWORD *)v52 = v95.n128_u32[0];
        *(_QWORD *)(v52 + 4) = sub_1001DEF4C(v96, 0xE900000000000064, &v104);
        swift_bridgeObjectRelease(0xE900000000000064);
        *(_WORD *)(v52 + 12) = 2080;
        v54 = v110;
        v55 = sub_10000732C(&v109, v110);
        DynamicType = swift_getDynamicType(v55, v54, 1);
        v57 = _typeName(_:qualified:)(DynamicType, 0);
        v59 = v58;
        *(_QWORD *)(v52 + 14) = sub_1001DEF4C(v57, v58, &v104);
        swift_bridgeObjectRelease(v59);
        sub_100006F58(&v109);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Starting %s Apple ID Availability activity - %s", (uint8_t *)v52, 0x16u);
        swift_arrayDestroy(v53, 2, v94);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        sub_100006F58(&v109);
      }

      v40 = v100;
      v41 = v106;
      v42 = v107;
      sub_10000732C(aBlock, (uint64_t)v106);
      sub_100006CA4((uint64_t)aBlock, (uint64_t)&v109);
      v43 = swift_allocObject(&unk_100263C58, 96, 7);
      *(_BYTE *)(v43 + 16) = v40;
      sub_10003A190(&v109, v43 + 24);
      v44 = (void *)v101;
      v45 = v102;
      *(_QWORD *)(v43 + 64) = v101;
      *(_QWORD *)(v43 + 72) = v39;
      *(_QWORD *)(v43 + 80) = v45;
      *(_QWORD *)(v43 + 88) = v21;
      v46 = (void (*)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t, void *, uint64_t (*)()))*((_QWORD *)v42 + 2);
      v47 = v44;
      swift_retain(v39);
      swift_retain(v45);
      v48 = v21;
      v46(v98, v99, sub_100092CBC, v43, v41, v42);
      swift_release(v43);
      sub_100006F58(aBlock);
      v36 += 40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease(v82[0]);
    LOBYTE(v27) = v100;
  }
  v60 = v84;
  v61 = v83;
  v62 = v85;
  (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v83, enum case for DispatchQoS.QoSClass.default(_:), v85);
  v100 = static OS_dispatch_queue.global(qos:)(v61);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v62);
  v63 = swift_allocObject(&unk_100263C80, 64, 7);
  v64 = (void *)v101;
  *(_QWORD *)(v63 + 16) = v101;
  *(_BYTE *)(v63 + 24) = v27;
  v66 = v102;
  v65 = v103;
  v67 = v86;
  *(_QWORD *)(v63 + 32) = v103;
  *(_QWORD *)(v63 + 40) = v67;
  v68 = v87;
  *(_QWORD *)(v63 + 48) = v87;
  *(_QWORD *)(v63 + 56) = v66;
  v107 = sub_100092D0C;
  v108 = v63;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000051D0;
  v106 = &unk_100263C98;
  v69 = _Block_copy(aBlock);
  v70 = v64;
  swift_retain(v65);
  swift_retain(v66);
  v71 = swift_retain(v68);
  v72 = v88;
  static DispatchQoS.unspecified.getter(v71);
  *(_QWORD *)&v109 = &_swiftEmptyArrayStorage;
  v73 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v74 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v75 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  v76 = v91;
  v77 = v74;
  v78 = v93;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v109, v77, v75, v93, v73);
  v79 = (void *)v100;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v100, v69);
  _Block_release(v69);

  (*(void (**)(char *, uint64_t))(v92 + 8))(v76, v78);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v72, v90);
  v80 = v108;
  swift_release(v65);
  swift_release(v66);
  return swift_release(v80);
}

void sub_100091CF0(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t DynamicType;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  uint64_t (*v85)();
  _QWORD *v86;
  __int128 v87[2];
  void *v88;
  uint64_t v89;

  LODWORD(v80) = a2;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v20 = __chkstk_darwin(v18, v19);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v75 = a5;
    v76 = v21;
    v77 = v20;
    v79 = v14;
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v78 = a4;
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    sub_100006CA4((uint64_t)a3, (uint64_t)&aBlock);
    swift_errorRetain(a1);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(32, -1);
      v74 = a7;
      v29 = v28;
      v71 = (uint64_t *)swift_slowAlloc(8, -1);
      v72 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v87[0] = v72;
      *(_DWORD *)v29 = 136315650;
      if ((v80 & 1) != 0)
        v30 = 0x656C756465686353;
      else
        v30 = 0x6E616D6544206E4FLL;
      v73 = a6;
      v88 = (void *)sub_1001DEF4C(v30, 0xE900000000000064, (uint64_t *)v87);
      v80 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = v84;
      v32 = sub_10000732C(&aBlock, (uint64_t)v84);
      DynamicType = swift_getDynamicType(v32, v31, 1);
      v34 = _typeName(_:qualified:)(DynamicType, 0);
      v36 = v35;
      v88 = (void *)sub_1001DEF4C(v34, v35, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v36);
      sub_100006F58(&aBlock);
      *(_WORD *)(v29 + 22) = 2112;
      v37 = _convertErrorToNSError(_:)(a1);
      v88 = (void *)v37;
      v13 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      v38 = v71;
      *v71 = v37;
      a6 = v73;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s %s Apple ID Availability activity failed with error %@", (uint8_t *)v29, 0x20u);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v38, 1, v39);
      swift_slowDealloc(v38, -1, -1);
      v40 = v72;
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v41 = v29;
      a7 = v74;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_100006F58(&aBlock);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v55 = a3[3];
    v56 = sub_10000732C(a3, v55);
    v57 = swift_getDynamicType(v56, v55, 1);
    v58 = a3[4];
    aBlock = (void **)v57;
    v82 = v58;
    v59 = sub_1000080B4((uint64_t *)&unk_10028EF70);
    v60 = String.init<A>(describing:)(&aBlock, v59);
    v62 = v61;
    sub_100006CA4((uint64_t)a3, (uint64_t)v87);
    v63 = (_QWORD *)swift_allocObject(&unk_100263D20, 96, 7);
    v64 = v75;
    v63[2] = a1;
    v63[3] = v64;
    v63[4] = v60;
    v63[5] = v62;
    v63[6] = a6;
    sub_10003A190(v87, (uint64_t)(v63 + 7));
    v85 = sub_100092DA8;
    v86 = v63;
    aBlock = _NSConcreteStackBlock;
    v82 = 1107296256;
    v83 = sub_1000051D0;
    v84 = &unk_100263D38;
    v65 = _Block_copy(&aBlock);
    swift_errorRetain(a1);
    swift_retain(v64);
    v66 = swift_retain(a6);
    static DispatchQoS.unspecified.getter(v66);
    v88 = &_swiftEmptyArrayStorage;
    v67 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v69 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v68, v69, v13, v67);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v23, v17, v65);
    _Block_release(v65);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v23, v77);
    swift_release(v86);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v42 = type metadata accessor for Logger(0);
    sub_100005288(v42, (uint64_t)qword_1002A8A08);
    v43 = sub_100006CA4((uint64_t)a3, (uint64_t)&aBlock);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v87[0] = v47;
      *(_DWORD *)v46 = 136315394;
      if ((v80 & 1) != 0)
        v48 = 0x656C756465686353;
      else
        v48 = 0x6E616D6544206E4FLL;
      v88 = (void *)sub_1001DEF4C(v48, 0xE900000000000064, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v46 + 12) = 2080;
      v49 = v84;
      v50 = sub_10000732C(&aBlock, (uint64_t)v84);
      v51 = swift_getDynamicType(v50, v49, 1);
      v52 = _typeName(_:qualified:)(v51, 0);
      v54 = v53;
      v88 = (void *)sub_1001DEF4C(v52, v53, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v54);
      sub_100006F58(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s %s Apple ID Availability activity completed.", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_100006F58(&aBlock);
    }

  }
  dispatch_group_leave(a7);
}

