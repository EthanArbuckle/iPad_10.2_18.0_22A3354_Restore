uint64_t sub_1001BC8B4(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSURL *v35;
  void *v36;
  void *v37;
  unsigned int v38;
  id v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD);
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *);
  uint64_t v61;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *);
  uint64_t v71;
  uint64_t v72;
  id v73;

  v69 = a3;
  v70 = a2;
  v67 = a1;
  v66 = a4;
  v8 = a4(0);
  __chkstk_darwin(v8, v9);
  v65 = (uint64_t)&v63 - v10;
  v68 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v68, v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v63 - v22;
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v63 - v25;
  v27 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(a5, a6, 1);
  v28 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v29 = v19;
  v30 = v67;
  v31 = v28(v29, v14);
  v32 = UUID.uuidString.getter(v31);
  v34 = v33;
  URL.appendingPathComponent(_:)(v32);
  swift_bridgeObjectRelease(v34);
  v28(v23, v14);
  URL._bridgeToObjectiveC()(v35);
  v37 = v36;
  v28(v26, v14);
  v73 = 0;
  v38 = objc_msgSend(v27, "removeItemAtURL:error:", v37, &v73);

  v39 = v73;
  if (v38)
  {
    v40 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v13, v30, v40);
    swift_storeEnumTagMultiPayload(v13, v68, 0);
    v70(v13);
  }
  else
  {
    v41 = v39;
    v64 = (uint64_t *)v13;
    v42 = _convertNSErrorToError(_:)(v39);

    swift_willThrow(v43);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A8A38);
    v46 = v65;
    v45 = v66;
    sub_100027FE8(v30, v65, v66);
    swift_errorRetain(v42);
    v47 = swift_errorRetain(v42);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = swift_slowAlloc(22, -1);
      v51 = (uint64_t *)swift_slowAlloc(8, -1);
      v52 = (void *)swift_slowAlloc(32, -1);
      v73 = v52;
      *(_DWORD *)v50 = 136315394;
      v53 = type metadata accessor for UUID(0);
      v54 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
      v57 = v56;
      v71 = sub_1001DEF4C(v55, v56, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v57);
      sub_100028388(v46, v66);
      *(_WORD *)(v50 + 12) = 2112;
      v58 = _convertErrorToNSError(_:)(v42);
      v71 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *v51 = v58;
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error deleting %s from LocalCache: %@", (uint8_t *)v50, 0x16u);
      v59 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v51, 1, v59);
      swift_slowDealloc(v51, -1, -1);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      sub_100028388(v46, v45);
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }

    v60 = v70;
    v61 = v68;
    v13 = (char *)v64;
    *v64 = v42;
    swift_storeEnumTagMultiPayload(v13, v61, 1);
    swift_errorRetain(v42);
    v60(v13);
    swift_errorRelease(v42);
  }
  return sub_100004934((uint64_t)v13, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_1001BCDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(NSObject **), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject **v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject **v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  NSObject **v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject **v93;
  uint64_t v94;
  void (*v95)(NSObject **);
  char v96[80];
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;

  v94 = a6;
  v95 = a5;
  v89 = a3;
  v90 = a2;
  v91 = a1;
  v85 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v85, v7);
  v84 = (char *)&v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v9, v10);
  v86 = (uint64_t)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianHealthRecord(0);
  v87 = *(_QWORD *)(v12 - 8);
  v88 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000080B4(&qword_10028D5C8);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CustodianRecord(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v92, v34);
  v93 = (NSObject **)((char *)&v83 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(_QWORD *)(a4 + 16))
  {
    type metadata accessor for AAError(0);
    v37 = v36;
    v97 = -4408;
    v38 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v38, v96);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v40;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = a4;
    swift_bridgeObjectRetain(a4);
    v41 = sub_100015894(inited);
    v42 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v98, &v97, v41, v37, v42);
    v43 = v98;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A89D8);
    v45 = v43;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 138412290;
      v50 = _convertErrorToNSError(_:)(v45);
      v98 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99);
      *v49 = v50;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to fetch all custodianship records: %@", v48, 0xCu);
      v51 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {

      v46 = v45;
    }

    v56 = v92;
    v57 = v93;
    *v93 = v45;
    swift_storeEnumTagMultiPayload(v57, v56, 1);
    v58 = v45;
    v95(v57);

    v59 = (uint64_t)v57;
    return sub_100004934(v59, (uint64_t *)&unk_10028CCD0);
  }
  v52 = v21;
  v53 = v90;
  sub_100024A20(v91, (uint64_t)v28, &qword_10028D5C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    v54 = &qword_10028D5C8;
    v55 = (uint64_t)v28;
LABEL_14:
    sub_100004934(v55, v54);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v61 = type metadata accessor for Logger(0);
    v62 = sub_100005288(v61, (uint64_t)qword_1002A89D8);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to fetch all custodianship records.", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v67 = v66;
    v97 = -7003;
    v68 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v69 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v98, &v97, v68, v67, v69);
    v70 = v92;
    v71 = v93;
    *v93 = v98;
    swift_storeEnumTagMultiPayload(v71, v70, 1);
    v95(v71);
    v59 = (uint64_t)v71;
    return sub_100004934(v59, (uint64_t *)&unk_10028CCD0);
  }
  sub_10003B730((uint64_t)v28, (uint64_t)v33, type metadata accessor for CustodianRecord);
  sub_100024A20(v53, (uint64_t)v19, &qword_10028D5E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v19, 1, v20) == 1)
  {
    sub_100028388((uint64_t)v33, type metadata accessor for CustodianRecord);
    v54 = &qword_10028D5E0;
    v55 = (uint64_t)v19;
    goto LABEL_14;
  }
  sub_10003B730((uint64_t)v19, (uint64_t)v24, type metadata accessor for CustodianRecoveryInfoRecord);
  v60 = v86;
  sub_100024A20(v89, v86, &qword_10028D5B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v60, 1, v88) == 1)
  {
    sub_100028388((uint64_t)v24, type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100028388((uint64_t)v33, type metadata accessor for CustodianRecord);
    v54 = &qword_10028D5B0;
    v55 = v60;
    goto LABEL_14;
  }
  v73 = (uint64_t)v15;
  sub_10003B730(v60, (uint64_t)v15, type metadata accessor for CustodianHealthRecord);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v74 = type metadata accessor for Logger(0);
  v75 = sub_100005288(v74, (uint64_t)qword_1002A89D8);
  v76 = Logger.logObject.getter(v75);
  v77 = static os_log_type_t.info.getter();
  v78 = os_log_type_enabled(v76, v77);
  v79 = (uint64_t)v84;
  v80 = v85;
  if (v78)
  {
    v81 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v81 = 0;
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Custodianship records fetched successfully.", v81, 2u);
    swift_slowDealloc(v81, -1, -1);
  }

  sub_100027FE8((uint64_t)v33, v79, type metadata accessor for CustodianRecord);
  sub_100027FE8((uint64_t)v24, v79 + *(int *)(v80 + 20), type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100027FE8(v73, v79 + *(int *)(v80 + 24), type metadata accessor for CustodianHealthRecord);
  v82 = v93;
  sub_100027FE8(v79, (uint64_t)v93, type metadata accessor for CustodianshipRecords);
  swift_storeEnumTagMultiPayload(v82, v92, 0);
  v95(v82);
  sub_100004934((uint64_t)v82, (uint64_t *)&unk_10028CCD0);
  sub_100028388(v79, type metadata accessor for CustodianshipRecords);
  sub_100028388(v73, type metadata accessor for CustodianHealthRecord);
  sub_100028388((uint64_t)v24, type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_100028388((uint64_t)v33, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001BD630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  _QWORD *v73;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t aBlock[5];
  _QWORD *v94;

  v82 = a2;
  v83 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v88 = *(_QWORD *)(v4 - 8);
  v89 = v4;
  __chkstk_darwin(v4, v5);
  v87 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7, v8);
  v84 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v79 = *(_QWORD *)(v10 - 8);
  v80 = v10;
  __chkstk_darwin(v10, v11);
  v78 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v81 = a1;
  v20 = v19(v17, a1, v13);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v13, v25);
    v28 = v27;
    v92 = (_QWORD *)sub_1001DEF4C(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, aBlock);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetching custodianship owner records with ID: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  v29 = dispatch_group_create();
  v30 = sub_1000080B4(&qword_10028D5C8);
  v31 = swift_allocBox(v30);
  v33 = v32;
  v34 = type metadata accessor for CustodianRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = sub_1000080B4(&qword_10028D5E0);
  v36 = swift_allocBox(v35);
  v38 = v37;
  v39 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v40 = sub_1000080B4(&qword_10028D5B0);
  v41 = swift_allocBox(v40);
  v43 = v42;
  v44 = type metadata accessor for CustodianHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
  v45 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v45 + 16) = 0;
  v46 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v46 + 16) = 0;
  v47 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v47 + 16) = 0;
  dispatch_group_enter(v29);
  v48 = (_QWORD *)swift_allocObject(&unk_10026E388, 40, 7);
  v91 = v31;
  v48[2] = v31;
  v48[3] = v45;
  v48[4] = v29;
  swift_retain(v31);
  swift_retain(v45);
  v49 = v29;
  v50 = v81;
  sub_1001BF958(v81, (uint64_t)sub_1001C4694, (uint64_t)v48);
  swift_release(v48);
  dispatch_group_enter(v49);
  v51 = (_QWORD *)swift_allocObject(&unk_10026E3B0, 40, 7);
  v90 = v36;
  v51[2] = v36;
  v51[3] = v46;
  v51[4] = v49;
  v52 = v49;
  swift_retain(v36);
  swift_retain(v46);
  sub_1001BF594(v50, (uint64_t)sub_1001C8904, (uint64_t)v51);
  swift_release(v51);
  dispatch_group_enter(v52);
  v53 = (_QWORD *)swift_allocObject(&unk_10026E3D8, 40, 7);
  v53[2] = v41;
  v53[3] = v47;
  v53[4] = v52;
  v77 = v52;
  swift_retain(v41);
  swift_retain(v47);
  sub_1001C0940(v50, (uint64_t)sub_1001C8908, (uint64_t)v53);
  swift_release(v53);
  sub_100007764();
  v55 = v79;
  v54 = v80;
  v56 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v80);
  v57 = (void *)static OS_dispatch_queue.global(qos:)(v56);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
  v58 = (_QWORD *)swift_allocObject(&unk_10026E400, 80, 7);
  v58[2] = v45;
  v58[3] = v46;
  v59 = v82;
  v60 = v83;
  v58[4] = v47;
  v58[5] = v59;
  v62 = v90;
  v61 = v91;
  v58[6] = v60;
  v58[7] = v61;
  v58[8] = v62;
  v58[9] = v41;
  v63 = v41;
  v76 = v41;
  aBlock[4] = (uint64_t)sub_1001C4764;
  v94 = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000051D0;
  aBlock[3] = (uint64_t)&unk_10026E418;
  v64 = _Block_copy(aBlock);
  swift_retain(v61);
  swift_retain(v45);
  swift_retain(v62);
  swift_retain(v46);
  swift_retain(v63);
  swift_retain(v47);
  v65 = swift_retain(v60);
  v66 = v84;
  static DispatchQoS.unspecified.getter(v65);
  v92 = _swiftEmptyArrayStorage;
  v67 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v68 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v69 = sub_100008628();
  v70 = v87;
  v71 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v68, v69, v89, v67);
  v72 = v77;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v66, v70, v57, v64);
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v88 + 8))(v70, v71);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v66, v86);
  v73 = v94;
  swift_release(v91);
  swift_release(v90);
  swift_release(v76);
  swift_release(v45);
  swift_release(v46);
  swift_release(v47);
  return swift_release(v73);
}

uint64_t sub_1001BDD38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, char *, void *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD v39[2];
  void (*v40)(char *, char *, char *, void *);
  _BYTE v41[24];
  _BYTE v42[24];
  void *v43;
  void *v44;
  void *v45;
  _BYTE v46[32];

  v39[1] = a5;
  v40 = a4;
  v14 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000080B4(&qword_10028D5C8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (uint64_t *)(a2 + 16);
  v27 = swift_projectBox(a6);
  v28 = swift_projectBox(a7);
  v39[0] = swift_projectBox(a8);
  swift_beginAccess(a1 + 16, v46, 0, 0);
  v29 = *(_QWORD *)(a1 + 16);
  v30 = &_swiftEmptyDictionarySingleton;
  if (v29)
  {
    swift_errorRetain(*(_QWORD *)(a1 + 16));
    swift_errorRetain(v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v45 = &_swiftEmptyDictionarySingleton;
    sub_10001F710(v29, 0xD000000000000013, 0x800000010020FBB0, isUniquelyReferenced_nonNull_native);
    v30 = v45;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v29);
  }
  v32 = (uint64_t *)(a3 + 16);
  swift_beginAccess(v26, &v45, 0, 0);
  v33 = *v26;
  if (v33)
  {
    swift_errorRetain(v33);
    swift_errorRetain(v33);
    v34 = swift_isUniquelyReferenced_nonNull_native(v30);
    v44 = v30;
    sub_10001F710(v33, 0xD000000000000016, 0x800000010020FB70, v34);
    v30 = v44;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v33);
  }
  swift_beginAccess(v32, &v44, 0, 0);
  v35 = *v32;
  if (v35)
  {
    swift_errorRetain(v35);
    swift_errorRetain(v35);
    v36 = swift_isUniquelyReferenced_nonNull_native(v30);
    v43 = v30;
    sub_10001F710(v35, 0xD00000000000001FLL, 0x800000010020FB50, v36);
    v30 = v43;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v35);
  }
  swift_beginAccess(v27, &v43, 0, 0);
  sub_100024A20(v27, (uint64_t)v25, &qword_10028D5C8);
  swift_beginAccess(v28, v42, 0, 0);
  sub_100024A20(v28, (uint64_t)v21, &qword_10028D5E0);
  v37 = v39[0];
  swift_beginAccess(v39[0], v41, 0, 0);
  sub_100024A20(v37, (uint64_t)v17, &qword_10028D5B0);
  v40(v25, v21, v17, v30);
  swift_bridgeObjectRelease(v30);
  sub_100004934((uint64_t)v17, &qword_10028D5B0);
  sub_100004934((uint64_t)v21, &qword_10028D5E0);
  return sub_100004934((uint64_t)v25, &qword_10028D5C8);
}

uint64_t sub_1001BE09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  NSObject *v49;
  uint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  _QWORD *v73;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t aBlock[5];
  _QWORD *v94;

  v82 = a2;
  v83 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v88 = *(_QWORD *)(v4 - 8);
  v89 = v4;
  __chkstk_darwin(v4, v5);
  v87 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7, v8);
  v84 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v79 = *(_QWORD *)(v10 - 8);
  v80 = v10;
  __chkstk_darwin(v10, v11);
  v78 = (char *)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v81 = a1;
  v20 = v19(v17, a1, v13);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v13, v25);
    v28 = v27;
    v92 = (_QWORD *)sub_1001DEF4C(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, aBlock);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetching recovery records with ID: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  v29 = dispatch_group_create();
  v30 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v30 + 16) = 0;
  v31 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v31 + 16) = 0;
  v32 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v32 + 16) = 0;
  v33 = sub_1000080B4(&qword_10028D640);
  v34 = swift_allocBox(v33);
  v36 = v35;
  v37 = type metadata accessor for CustodianshipInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
  v38 = sub_1000080B4(&qword_10028D5E0);
  v39 = swift_allocBox(v38);
  v41 = v40;
  v42 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
  v43 = sub_1000080B4(&qword_10028D5B0);
  v44 = swift_allocBox(v43);
  v46 = v45;
  v47 = type metadata accessor for CustodianHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  dispatch_group_enter(v29);
  v48 = (_QWORD *)swift_allocObject(&unk_10026E2C0, 40, 7);
  v90 = v30;
  v91 = v34;
  v48[2] = v34;
  v48[3] = v30;
  v48[4] = v29;
  swift_retain(v34);
  swift_retain(v30);
  v49 = v29;
  v50 = v81;
  sub_1001BFD24(v81, (uint64_t)sub_1001C45B0, (uint64_t)v48);
  swift_release(v48);
  dispatch_group_enter(v49);
  v51 = (_QWORD *)swift_allocObject(&unk_10026E2E8, 40, 7);
  v51[2] = v39;
  v51[3] = v31;
  v51[4] = v49;
  v52 = v49;
  swift_retain(v39);
  swift_retain(v31);
  sub_1001BF594(v50, (uint64_t)sub_1001C45F0, (uint64_t)v51);
  swift_release(v51);
  dispatch_group_enter(v52);
  v53 = (_QWORD *)swift_allocObject(&unk_10026E310, 40, 7);
  v53[2] = v44;
  v53[3] = v32;
  v53[4] = v52;
  v77 = v52;
  swift_retain(v44);
  swift_retain(v32);
  sub_1001C0940(v50, (uint64_t)sub_1001C4630, (uint64_t)v53);
  swift_release(v53);
  sub_100007764();
  v55 = v79;
  v54 = v80;
  v56 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v78, enum case for DispatchQoS.QoSClass.default(_:), v80);
  v57 = (void *)static OS_dispatch_queue.global(qos:)(v56);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
  v58 = (_QWORD *)swift_allocObject(&unk_10026E338, 80, 7);
  v60 = v90;
  v59 = v91;
  v58[2] = v90;
  v58[3] = v31;
  v61 = v82;
  v62 = v83;
  v58[4] = v32;
  v58[5] = v61;
  v58[6] = v62;
  v58[7] = v59;
  v63 = v39;
  v76 = v39;
  v58[8] = v39;
  v58[9] = v44;
  aBlock[4] = (uint64_t)sub_1001C4670;
  v94 = v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000051D0;
  aBlock[3] = (uint64_t)&unk_10026E350;
  v64 = _Block_copy(aBlock);
  swift_retain(v59);
  swift_retain(v60);
  swift_retain(v63);
  swift_retain(v31);
  swift_retain(v44);
  swift_retain(v32);
  v65 = swift_retain(v62);
  v66 = v84;
  static DispatchQoS.unspecified.getter(v65);
  v92 = _swiftEmptyArrayStorage;
  v67 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v68 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v69 = sub_100008628();
  v70 = v87;
  v71 = v89;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v68, v69, v89, v67);
  v72 = v77;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v66, v70, v57, v64);
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v88 + 8))(v70, v71);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v66, v86);
  v73 = v94;
  swift_release(v90);
  swift_release(v31);
  swift_release(v32);
  swift_release(v91);
  swift_release(v76);
  swift_release(v44);
  return swift_release(v73);
}

void sub_1001BE7A0(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t *a5, uint64_t *a6, uint64_t (*a7)(_QWORD), const char *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;

  v36 = a8;
  v15 = sub_1000080B4(a5);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(a6);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = swift_projectBox(a2);
  sub_100024A20(a1, (uint64_t)v22, a6);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v24 = *v22;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v25 = (uint64_t *)(a3 + 16);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A89D8);
    v27 = swift_errorRetain(v24);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 138412290;
      v32 = _convertErrorToNSError(_:)(v24);
      v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *v31 = v32;
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v36, v30, 0xCu);
      v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v31, 1, v33);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
    }

    swift_beginAccess(v25, &v37, 1, 0);
    v35 = *v25;
    *v25 = v24;
    swift_errorRelease(v35);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, a7);
    v34 = a7(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v18, 0, 1, v34);
    swift_beginAccess(v23, &v37, 1, 0);
    sub_1001C4788((uint64_t)v18, v23, a5);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_1001BEA68(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(NSObject **), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t inited;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  NSObject **v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  NSObject **v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject **v106;
  uint64_t v107;
  void (*v108)(NSObject **);
  char v109[24];
  _QWORD v110[3];
  uint64_t v111;
  NSObject *v112;
  _QWORD *v113;
  uint64_t v114;
  char v115[40];
  _QWORD *v116;
  _QWORD *v117;
  char v118[8];

  v107 = a5;
  v108 = a4;
  v94 = type metadata accessor for CustodianRecoveryRecords(0);
  __chkstk_darwin(v94, v14);
  v95 = (uint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v16, v17);
  v99 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for CustodianHealthRecord(0);
  v97 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98, v19);
  v93 = (uint64_t)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v21, v22);
  v103 = (uint64_t)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v24);
  v100 = (uint64_t)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_10028D640);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for CustodianshipInfoRecord(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v32);
  v104 = (uint64_t)&v92 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1000080B4(&qword_10028F800);
  __chkstk_darwin(v105, v34);
  v106 = (NSObject **)((char *)&v92 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = (uint64_t *)(a2 + 16);
  v37 = swift_projectBox(a6);
  v38 = swift_projectBox(a7);
  v96 = swift_projectBox(a8);
  swift_beginAccess(a1 + 16, v118, 0, 0);
  v39 = *(_QWORD *)(a1 + 16);
  v40 = &_swiftEmptyDictionarySingleton;
  if (v39)
  {
    swift_errorRetain(v39);
    swift_errorRetain(v39);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v117 = &_swiftEmptyDictionarySingleton;
    sub_10001F710(v39, 0xD00000000000001BLL, 0x800000010020FB90, isUniquelyReferenced_nonNull_native);
    v40 = v117;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v39);
  }
  swift_beginAccess(v36, &v117, 0, 0);
  v42 = *v36;
  if (v42)
  {
    swift_errorRetain(v42);
    swift_errorRetain(v42);
    v43 = swift_isUniquelyReferenced_nonNull_native(v40);
    v116 = v40;
    sub_10001F710(v42, 0xD000000000000016, 0x800000010020FB70, v43);
    v40 = v116;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v42);
  }
  swift_beginAccess(a3 + 16, &v116, 0, 0);
  v44 = *(_QWORD *)(a3 + 16);
  if (v44)
  {
    swift_errorRetain(*(_QWORD *)(a3 + 16));
    swift_errorRetain(v44);
    v45 = swift_isUniquelyReferenced_nonNull_native(v40);
    v113 = v40;
    sub_10001F710(v44, 0xD00000000000001FLL, 0x800000010020FB50, v45);
    v40 = v113;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v44);
  }
  if (v40[2])
  {
    type metadata accessor for AAError(0);
    v47 = v46;
    v110[0] = -4408;
    v48 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v48, v115);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v50;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v40;
    v51 = sub_100015894(inited);
    v52 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v113, v110, v51, v47, v52);
    v53 = v113;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v54 = type metadata accessor for Logger(0);
    sub_100005288(v54, (uint64_t)qword_1002A89D8);
    v55 = v53;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v58 = 138412290;
      v60 = _convertErrorToNSError(_:)(v55);
      v113 = (_QWORD *)v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      *v59 = v60;

      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Error fetching recovery records: %@", v58, 0xCu);
      v61 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v59, 1, v61);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {

      v56 = v55;
    }

    v64 = v106;
    *v106 = v55;
    swift_storeEnumTagMultiPayload(v64, v105, 1);
    v65 = v55;
    v108(v64);

    v66 = (uint64_t)v64;
    return sub_100004934(v66, &qword_10028F800);
  }
  swift_bridgeObjectRelease(v40);
  swift_beginAccess(v37, &v113, 0, 0);
  sub_100024A20(v37, (uint64_t)v29, &qword_10028D640);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    v62 = &qword_10028D640;
    v63 = (uint64_t)v29;
LABEL_21:
    sub_100004934(v63, v62);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v72 = type metadata accessor for Logger(0);
    v73 = sub_100005288(v72, (uint64_t)qword_1002A89D8);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to fetch all custodianship records.", v76, 2u);
      swift_slowDealloc(v76, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v78 = v77;
    v111 = -7003;
    v79 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v80 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v112, &v111, v79, v78, v80);
    v81 = v106;
    *v106 = v112;
    swift_storeEnumTagMultiPayload(v81, v105, 1);
    v108(v81);
    v66 = (uint64_t)v81;
    return sub_100004934(v66, &qword_10028F800);
  }
  v67 = v104;
  sub_10003B730((uint64_t)v29, v104, type metadata accessor for CustodianshipInfoRecord);
  swift_beginAccess(v38, v110, 0, 0);
  v68 = v103;
  sub_100024A20(v38, v103, &qword_10028D5E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v68, 1, v102) == 1)
  {
    sub_100028388(v67, type metadata accessor for CustodianshipInfoRecord);
    v62 = &qword_10028D5E0;
LABEL_20:
    v63 = v68;
    goto LABEL_21;
  }
  v69 = v100;
  sub_10003B730(v68, v100, type metadata accessor for CustodianRecoveryInfoRecord);
  v70 = v96;
  swift_beginAccess(v96, v109, 0, 0);
  v71 = v70;
  v68 = v99;
  sub_100024A20(v71, v99, &qword_10028D5B0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v68, 1, v98) == 1)
  {
    sub_100028388(v69, type metadata accessor for CustodianRecoveryInfoRecord);
    sub_100028388(v67, type metadata accessor for CustodianshipInfoRecord);
    v62 = &qword_10028D5B0;
    goto LABEL_20;
  }
  v83 = v93;
  sub_10003B730(v68, v93, type metadata accessor for CustodianHealthRecord);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v84 = type metadata accessor for Logger(0);
  v85 = sub_100005288(v84, (uint64_t)qword_1002A89D8);
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Custodianship records fetched successfully.", v88, 2u);
    swift_slowDealloc(v88, -1, -1);
  }

  v89 = v95;
  sub_100027FE8(v67, v95, type metadata accessor for CustodianshipInfoRecord);
  v90 = v94;
  sub_100027FE8(v69, v89 + *(int *)(v94 + 20), type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100027FE8(v83, v89 + *(int *)(v90 + 24), type metadata accessor for CustodianHealthRecord);
  v91 = v106;
  sub_100027FE8(v89, (uint64_t)v106, type metadata accessor for CustodianRecoveryRecords);
  swift_storeEnumTagMultiPayload(v91, v105, 0);
  v108(v91);
  sub_100004934((uint64_t)v91, &qword_10028F800);
  sub_100028388(v89, type metadata accessor for CustodianRecoveryRecords);
  sub_100028388(v83, type metadata accessor for CustodianHealthRecord);
  sub_100028388(v69, type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_100028388(v67, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001BF594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a3;
  v53 = a2;
  v58 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v58 - 8);
  v6 = __chkstk_darwin(v58, v5);
  v56 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v57 = (char *)v48 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v52 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v48 - v16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20 = v19(v17, a1, v10);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = swift_slowAlloc(12, -1);
    v51 = v4;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v49 = v19;
    v27 = v26;
    v60 = v26;
    v50 = a1;
    *(_DWORD *)v25 = 136315138;
    v48[1] = v25 + 4;
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
    v31 = v30;
    v59 = sub_1001DEF4C(v29, v30, &v60);
    a1 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Fetching recovery info with ID: %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    v19 = v49;
    swift_slowDealloc(v32, -1, -1);
    v33 = v25;
    v4 = v51;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  v34 = v52;
  v19(v52, a1, v10);
  v35 = *(unsigned __int8 *)(v11 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = (v12 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_10026E298, v37 + 16, v35 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v38 + v36, v34, v10);
  v39 = (_QWORD *)(v38 + v37);
  v40 = v55;
  *v39 = v53;
  v39[1] = v40;
  v41 = sub_10000732C((_QWORD *)(v54 + 16), *(_QWORD *)(v54 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v40);
  v42 = v56;
  sub_10000840C();
  v43 = (uint64_t)v57;
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A490, 1);
  v44 = *(void (**)(char *, uint64_t))(v4 + 8);
  v45 = v42;
  v46 = v58;
  v44(v45, v58);
  sub_10000732C((_QWORD *)(*v41 + 16), *(_QWORD *)(*v41 + 40));
  sub_10009D33C(v43, (uint64_t)sub_1001C4588, v38);
  v44((char *)v43, v46);
  return swift_release(v38);
}

uint64_t sub_1001BF958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v54 = a3;
  v52 = a2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v55 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v56 = (char *)v46 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = __chkstk_darwin(v11, v14);
  v51 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v46 - v17;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v19 = type metadata accessor for Logger(0);
  sub_100005288(v19, (uint64_t)qword_1002A89D8);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v20 = v50(v18, a1, v11);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = swift_slowAlloc(12, -1);
    v48 = v5;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v47 = a1;
    v27 = v26;
    v58 = v26;
    v49 = v4;
    *(_DWORD *)v25 = 136315138;
    v46[1] = v25 + 4;
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v11, v28);
    v31 = v30;
    v57 = sub_1001DEF4C(v29, v30, &v58);
    v4 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Fetching custodian with ID: %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    a1 = v47;
    swift_slowDealloc(v32, -1, -1);
    v33 = v25;
    v5 = v48;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
  }

  v34 = v51;
  v50(v51, a1, v11);
  v35 = *(unsigned __int8 *)(v12 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = (v13 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_10026E270, v37 + 16, v35 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v38 + v36, v34, v11);
  v39 = (_QWORD *)(v38 + v37);
  v40 = v54;
  *v39 = v52;
  v39[1] = v40;
  v41 = sub_10000732C((_QWORD *)(v53 + 16), *(_QWORD *)(v53 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v40);
  v42 = v55;
  sub_10000840C();
  v43 = (uint64_t)v56;
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v44 = *(void (**)(char *, uint64_t))(v5 + 8);
  v44(v42, v4);
  sub_10000732C((_QWORD *)(*v41 + 16), *(_QWORD *)(*v41 + 40));
  sub_10009D320(v43, (uint64_t)sub_1001C4560, v38);
  v44((char *)v43, v4);
  return swift_release(v38);
}

uint64_t sub_1001BFD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v55 = a3;
  v53 = a2;
  v58 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v58 - 8);
  v6 = __chkstk_darwin(v58, v5);
  v56 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v57 = (char *)v48 - v9;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v52 = (char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v48 - v16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20 = v19(v17, a1, v10);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v21, v23))
  {
    v24 = swift_slowAlloc(12, -1);
    v51 = v4;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v49 = v19;
    v27 = v26;
    v60 = v26;
    v50 = a1;
    *(_DWORD *)v25 = 136315138;
    v48[1] = v25 + 4;
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
    v31 = v30;
    v59 = sub_1001DEF4C(v29, v30, &v60);
    a1 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Fetching custodianship info with ID: %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    v19 = v49;
    swift_slowDealloc(v32, -1, -1);
    v33 = v25;
    v4 = v51;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  v34 = v52;
  v19(v52, a1, v10);
  v35 = *(unsigned __int8 *)(v11 + 80);
  v36 = (v35 + 16) & ~v35;
  v37 = (v12 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_10026E248, v37 + 16, v35 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v38 + v36, v34, v10);
  v39 = (_QWORD *)(v38 + v37);
  v40 = v55;
  *v39 = v53;
  v39[1] = v40;
  v41 = sub_10000732C((_QWORD *)(v54 + 16), *(_QWORD *)(v54 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v40);
  v42 = v56;
  sub_10000840C();
  v43 = (uint64_t)v57;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v44 = *(void (**)(char *, uint64_t))(v4 + 8);
  v45 = v42;
  v46 = v58;
  v44(v45, v58);
  sub_10000732C((_QWORD *)(*v41 + 16), *(_QWORD *)(*v41 + 40));
  sub_10009D070(v43, (uint64_t)sub_1001C4498, v38);
  v44((char *)v43, v46);
  return swift_release(v38);
}

uint64_t sub_1001C00E8(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), const char *a8, const char *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  void (*v45)(uint64_t *);
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t *v58;
  void (*v59)(_QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v74;
  _QWORD v75[2];
  void (*v76)(uint64_t *);
  const char *v77;
  char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v77 = a8;
  v83 = a6;
  v81 = sub_1000080B4(a6);
  __chkstk_darwin(v81, v15);
  v82 = (_QWORD *)((char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for UUID(0);
  v18 = *(const char **)(v17 - 8);
  v79 = v17;
  v80 = v18;
  __chkstk_darwin(v17, v19);
  v78 = (char *)v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a7(0);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v23, v26);
  v29 = (char *)v75 - v28;
  __chkstk_darwin(v27, v30);
  v33 = (char *)v75 - v32;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v53 = type metadata accessor for Logger(0);
    sub_100005288(v53, (uint64_t)qword_1002A89D8);
    v54 = swift_errorRetain(a1);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v80 = a9;
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v57 = 138412290;
      v59 = a4;
      v60 = _convertErrorToNSError(_:)(a1);
      v85 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      *v58 = v60;
      a4 = v59;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, v80, v57, 0xCu);
      v61 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v58, 1, v61);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    v62 = v81;
    v63 = v82;
    v64 = v83;
    *v82 = a1;
    swift_storeEnumTagMultiPayload(v63, v62, 1);
    swift_errorRetain(a1);
    a4(v63);
    sub_1000057B0(a1, 1);
    v65 = (uint64_t)v63;
    v66 = v64;
    return sub_100004934(v65, v66);
  }
  v76 = (void (*)(uint64_t *))a4;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
  {
LABEL_7:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89D8);
    v39 = v79;
    v38 = v80;
    v40 = v78;
    v41 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v80 + 2))(v78, a3, v79);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v45 = v76;
    if (v44)
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v85 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v39, v48);
      v51 = v50;
      v84 = sub_1001DEF4C(v49, v50, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85);
      swift_bridgeObjectRelease(v51);
      (*((void (**)(char *, uint64_t))v80 + 1))(v40, v39);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, v77, v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v52 = v47;
      v45 = v76;
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      (*((void (**)(char *, uint64_t))v38 + 1))(v40, v39);
    }

    v67 = v81;
    type metadata accessor for AACustodianError(0);
    v69 = v68;
    v84 = -7003;
    v70 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v71 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v85, &v84, v70, v69, v71);
    v72 = v82;
    *v82 = v85;
    swift_storeEnumTagMultiPayload(v72, v67, 1);
    v45(v72);
    v65 = (uint64_t)v72;
    v66 = v83;
    return sub_100004934(v65, v66);
  }
  v75[1] = a5;
  v35 = a1 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  v36 = *(_QWORD *)(v31 + 72);
  swift_bridgeObjectRetain(a1);
  while (1)
  {
    sub_100027FE8(v35, (uint64_t)v25, a7);
    if ((static UUID.== infix(_:_:)(&v25[*(int *)(v21 + 20)]) & 1) != 0)
      break;
    sub_100028388((uint64_t)v25, a7);
    v35 += v36;
    if (!--v34)
    {
      sub_1000057B0(a1, 0);
      goto LABEL_7;
    }
  }
  sub_1000057B0(a1, 0);
  sub_10003B730((uint64_t)v25, (uint64_t)v29, a7);
  sub_10003B730((uint64_t)v29, (uint64_t)v33, a7);
  v74 = v82;
  sub_100027FE8((uint64_t)v33, (uint64_t)v82, a7);
  swift_storeEnumTagMultiPayload(v74, v81, 0);
  v76(v74);
  sub_100004934((uint64_t)v74, v83);
  return sub_100028388((uint64_t)v33, a7);
}

uint64_t sub_1001C0708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for URL(0);
  v23 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v22 - v10;
  v12 = sub_1000080B4(&qword_100297BE0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_10026E478, v17 + v14, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v19 = sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v20 = *(void (**)(char *, uint64_t))(v23 + 8);
  v20(v8, v4);
  sub_10000732C((_QWORD *)(*v19 + 16), *(_QWORD *)(*v19 + 40));
  sub_10009D320((uint64_t)v11, (uint64_t)sub_1001C4824, v18);
  v20(v11, v4);
  return swift_release(v18);
}

uint64_t sub_1001C08D4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v4 = sub_1000080B4(&qword_100297BE0);
    return CheckedContinuation.resume(throwing:)(&v5, v4);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    v2 = sub_1000080B4(&qword_100297BE0);
    return CheckedContinuation.resume(returning:)(&v5, v2);
  }
}

uint64_t sub_1001C0940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v30 = a2;
  v6 = type metadata accessor for URL(0);
  v31 = *(_QWORD *)(v6 - 8);
  v32 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v29 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10026E220, v21 + 16, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v18, v14);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = v30;
  v23[1] = a3;
  v24 = sub_10000732C((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  type metadata accessor for LocalCache();
  swift_retain(a3);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A450, 1);
  v25 = *(void (**)(char *, uint64_t))(v31 + 8);
  v26 = v10;
  v27 = v32;
  v25(v26, v32);
  sub_10000732C((_QWORD *)(*v24 + 16), *(_QWORD *)(*v24 + 40));
  sub_10009D358((uint64_t)v13, (uint64_t)sub_1001C4430, v22);
  v25(v13, v27);
  return swift_release(v22);
}

uint64_t sub_1001C0B24(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  __n128 v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(uint64_t *);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void (*v80)(uint64_t *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v80 = a4;
  v9 = sub_1000080B4(&qword_10028D5B8);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v13 - 8);
  v77 = v13;
  __chkstk_darwin(v13, v14);
  v78 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianHealthRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v74 = (uint64_t)&v71 - v23;
  v24 = sub_1000080B4(&qword_10028D5B0);
  v26 = __chkstk_darwin(v24, v25);
  v28 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  v79 = (uint64_t)&v71 - v30;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v36 = a1;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89D8);
    v38 = swift_errorRetain(a1);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v73 = v9;
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v41 = 138412290;
      v43 = v12;
      v44 = _convertErrorToNSError(_:)(v36);
      v82 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
      *v42 = v44;
      v12 = v43;
      v9 = v73;
      sub_1000057B0(v36, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error fetching health records: %@", v41, 0xCu);
      v45 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v42, 1, v45);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    *v12 = v36;
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    swift_errorRetain(v36);
    v80(v12);
    sub_1000057B0(v36, 1);
    v46 = &qword_10028D5B8;
    v47 = (uint64_t)v12;
  }
  else
  {
    v75 = a5;
    v31 = *(_QWORD *)(a1 + 16);
    if (v31)
    {
      v72 = v12;
      v73 = v9;
      v32 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v33 = *(_QWORD *)(v17 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v32, (uint64_t)v21, type metadata accessor for CustodianHealthRecord);
        if ((static UUID.== infix(_:_:)(&v21[*(int *)(v16 + 20)]) & 1) != 0)
          break;
        sub_100028388((uint64_t)v21, type metadata accessor for CustodianHealthRecord);
        v32 += v33;
        if (!--v31)
        {
          sub_1000057B0(a1, 0);
          v34 = 1;
          v35 = v80;
          v12 = v72;
          v9 = v73;
          goto LABEL_14;
        }
      }
      sub_1000057B0(a1, 0);
      v48 = v79;
      sub_10003B730((uint64_t)v21, v79, type metadata accessor for CustodianHealthRecord);
      v34 = 0;
      v35 = v80;
      v12 = v72;
      v9 = v73;
    }
    else
    {
      v34 = 1;
      v35 = v80;
LABEL_14:
      v48 = v79;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v48, v34, 1, v16);
    sub_100024A20(v48, (uint64_t)v28, &qword_10028D5B0);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v28, 1, v16);
    v50 = v78;
    if (v49 == 1)
    {
      sub_100004934((uint64_t)v28, &qword_10028D5B0);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v51 = type metadata accessor for Logger(0);
      sub_100005288(v51, (uint64_t)qword_1002A89D8);
      v52 = v76;
      v53 = v77;
      v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 16))(v50, a3, v77);
      v55 = Logger.logObject.getter(v54);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v55, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v82 = v59;
        *(_DWORD *)v58 = 136315138;
        v72 = v12;
        v60 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v61 = dispatch thunk of CustomStringConvertible.description.getter(v53, v60);
        v63 = v62;
        v81 = sub_1001DEF4C(v61, v62, &v82);
        v12 = v72;
        v48 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
        swift_bridgeObjectRelease(v63);
        (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v77);
        _os_log_impl((void *)&_mh_execute_header, v55, v57, "Couldn't find health check record for %s", v58, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        v64 = v80;
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v53);

        v64 = v80;
      }
      type metadata accessor for AACustodianError(0);
      v67 = v66;
      v81 = -7003;
      v68 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v69 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v82, &v81, v68, v67, v69);
      *v12 = v82;
      swift_storeEnumTagMultiPayload(v12, v9, 1);
      v64(v12);
      sub_100004934((uint64_t)v12, &qword_10028D5B8);
    }
    else
    {
      v65 = v74;
      sub_10003B730((uint64_t)v28, v74, type metadata accessor for CustodianHealthRecord);
      sub_100027FE8(v65, (uint64_t)v12, type metadata accessor for CustodianHealthRecord);
      swift_storeEnumTagMultiPayload(v12, v9, 0);
      v35(v12);
      sub_100004934((uint64_t)v12, &qword_10028D5B8);
      sub_100028388(v65, type metadata accessor for CustodianHealthRecord);
    }
    v46 = &qword_10028D5B0;
    v47 = v48;
  }
  return sub_100004934(v47, v46);
}

uint64_t sub_1001C1240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_1000080B4(&qword_100297BD8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10026E450, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_1001C0940(a3, (uint64_t)sub_1001C47D8, v11);
  return swift_release(v11);
}

uint64_t sub_1001C1324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4(&qword_10028D5B8);
  __chkstk_darwin(v6, v7);
  v9 = (uint64_t *)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v9, &qword_10028D5B8);
  if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
  {
    v14 = *v9;
    v10 = sub_1000080B4(&qword_100297BD8);
    return CheckedContinuation.resume(throwing:)(&v14, v10);
  }
  else
  {
    sub_10003B730((uint64_t)v9, (uint64_t)v5, type metadata accessor for CustodianHealthRecord);
    v12 = sub_1000080B4(&qword_100297BD8);
    return CheckedContinuation.resume(returning:)(v5, v12);
  }
}

uint64_t sub_1001C1444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v22 - v16;
  v18 = (_QWORD *)swift_allocObject(&unk_10026E1F8, 48, 7);
  v18[2] = a1;
  v18[3] = a2;
  v18[4] = a3;
  v18[5] = a4;
  v19 = sub_10000732C((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  type metadata accessor for LocalCache();
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A540, 1);
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v14, v9);
  sub_10000732C((_QWORD *)(*v19 + 16), *(_QWORD *)(*v19 + 40));
  sub_10009D374((uint64_t)v17, (uint64_t)sub_1001C441C, (uint64_t)v18);
  v20(v17, v9);
  return swift_release(v18);
}

uint64_t sub_1001C15AC(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t *);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v70 = a5;
  v11 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v69 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v66 = (uint64_t)&v63 - v21;
  v22 = sub_1000080B4((uint64_t *)&unk_100293AA0);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  v67 = (uint64_t)&v63 - v28;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89D8);
    v38 = swift_errorRetain(a1);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = (uint64_t *)swift_slowAlloc(8, -1);
      v68 = a6;
      *(_DWORD *)v41 = 138412290;
      v43 = _convertErrorToNSError(_:)(a1);
      v72 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      *v42 = v43;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error fetching recovery session records: %@", v41, 0xCu);
      v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v42, 1, v44);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    *v14 = a1;
    swift_storeEnumTagMultiPayload(v14, v11, 1);
    swift_errorRetain(a1);
    v70(v14);
    sub_1000057B0(a1, 1);
    v45 = &qword_10028E7F0;
    v46 = (uint64_t)v14;
  }
  else
  {
    v68 = a6;
    v29 = *(_QWORD *)(a1 + 16);
    if (v29)
    {
      v64 = v11;
      v65 = v14;
      v30 = a1 + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80));
      v31 = *(_QWORD *)(v69 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v30, (uint64_t)v19, type metadata accessor for CustodianRecoverySessionRecord);
        v32 = &v19[*(int *)(v15 + 28)];
        v33 = *((_QWORD *)v32 + 1);
        v34 = *(_QWORD *)v32 == a3 && v33 == a4;
        if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v32, v33, a3, a4, 0) & 1) != 0)
          break;
        sub_100028388((uint64_t)v19, type metadata accessor for CustodianRecoverySessionRecord);
        v30 += v31;
        if (!--v29)
        {
          sub_1000057B0(a1, 0);
          v35 = 1;
          v36 = v70;
          v11 = v64;
          v14 = v65;
          goto LABEL_19;
        }
      }
      sub_1000057B0(a1, 0);
      v47 = v67;
      sub_10003B730((uint64_t)v19, v67, type metadata accessor for CustodianRecoverySessionRecord);
      v35 = 0;
      v36 = v70;
      v11 = v64;
      v14 = v65;
    }
    else
    {
      v35 = 1;
      v36 = v70;
LABEL_19:
      v47 = v67;
    }
    v48 = v69;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56))(v47, v35, 1, v15);
    sub_100024A20(v47, (uint64_t)v26, (uint64_t *)&unk_100293AA0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v26, 1, v15) == 1)
    {
      sub_100004934((uint64_t)v26, (uint64_t *)&unk_100293AA0);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v49 = type metadata accessor for Logger(0);
      sub_100005288(v49, (uint64_t)qword_1002A89D8);
      v50 = swift_bridgeObjectRetain_n(a4, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v72 = v54;
        v65 = v14;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(a4);
        v71 = sub_1001DEF4C(a3, a4, &v72);
        v14 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Couldn't find recovery session record for %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        v55 = v54;
        v47 = v67;
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v53, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      type metadata accessor for AACustodianError(0);
      v59 = v58;
      v71 = -7003;
      v60 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v61 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v72, &v71, v60, v59, v61);
      *v14 = v72;
      swift_storeEnumTagMultiPayload(v14, v11, 1);
      v36(v14);
      sub_100004934((uint64_t)v14, &qword_10028E7F0);
    }
    else
    {
      v56 = (uint64_t)v26;
      v57 = v66;
      sub_10003B730(v56, v66, type metadata accessor for CustodianRecoverySessionRecord);
      sub_100027FE8(v57, (uint64_t)v14, type metadata accessor for CustodianRecoverySessionRecord);
      swift_storeEnumTagMultiPayload(v14, v11, 0);
      v36(v14);
      sub_100004934((uint64_t)v14, &qword_10028E7F0);
      sub_100028388(v57, type metadata accessor for CustodianRecoverySessionRecord);
    }
    v45 = (uint64_t *)&unk_100293AA0;
    v46 = v47;
  }
  return sub_100004934(v46, v45);
}

uint64_t sub_1001C1C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  NSObject *v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  Class isa;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _QWORD aBlock[5];
  _QWORD *v86;

  v76 = a2;
  v77 = a3;
  v80 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80, v5);
  v79 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v7 - 8);
  v82 = v7;
  __chkstk_darwin(v7, v8);
  v78 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for CustodianshipRecords(0);
  v10 = *((_QWORD *)v67[-1].isa + 8);
  isa = v67[-1].isa;
  v75 = v10;
  __chkstk_darwin(v67, v11);
  v73 = (uint64_t)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v71 = *(_QWORD *)(v13 - 8);
  v72 = v13;
  __chkstk_darwin(v13, v14);
  v70 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v16, v17);
  v69 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = dispatch_group_create();
  v28 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v28 + 16) = 0;
  v65 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v65 + 16) = 0;
  v66 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v66 + 16) = 0;
  dispatch_group_enter(v27);
  v29 = *(_QWORD *)(v3 + 40);
  v64 = v3;
  sub_10000732C((_QWORD *)(v3 + 16), v29);
  v30 = a1;
  sub_100027FE8(a1, (uint64_t)v26, type metadata accessor for CustodianRecord);
  v31 = swift_allocObject(&unk_10026E130, 32, 7);
  v68 = v28;
  *(_QWORD *)(v31 + 16) = v28;
  *(_QWORD *)(v31 + 24) = v27;
  swift_retain(v28);
  v32 = v27;
  sub_1001E5740((uint64_t)v26, (uint64_t)sub_1001C4094, v31);
  swift_release(v31);
  sub_100028388((uint64_t)v26, type metadata accessor for CustodianRecord);
  dispatch_group_enter(v32);
  sub_10000732C((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  v33 = v67;
  sub_100027FE8(v30 + SHIDWORD(v67[2].isa), (uint64_t)v22, type metadata accessor for CustodianRecoveryInfoRecord);
  v34 = swift_allocObject(&unk_10026E158, 32, 7);
  v35 = v65;
  *(_QWORD *)(v34 + 16) = v65;
  *(_QWORD *)(v34 + 24) = v32;
  v36 = v32;
  swift_retain(v35);
  sub_1001E55AC((uint64_t)v22, (uint64_t)sub_1001C40C0, v34);
  swift_release(v34);
  sub_100028388((uint64_t)v22, type metadata accessor for CustodianRecoveryInfoRecord);
  dispatch_group_enter(v36);
  sub_10000732C((_QWORD *)(v3 + 16), *(_QWORD *)(v64 + 40));
  v37 = v30 + SLODWORD(v33[3].isa);
  v38 = v30;
  v39 = v69;
  sub_100027FE8(v37, v69, type metadata accessor for CustodianHealthRecord);
  v40 = swift_allocObject(&unk_10026E180, 32, 7);
  v41 = v66;
  *(_QWORD *)(v40 + 16) = v66;
  *(_QWORD *)(v40 + 24) = v36;
  v67 = v36;
  swift_retain(v41);
  sub_1001E5418(v39, (uint64_t)sub_1001C40EC, v40);
  swift_release(v40);
  sub_100028388(v39, type metadata accessor for CustodianHealthRecord);
  sub_100007764();
  v43 = v70;
  v42 = v71;
  v44 = v72;
  (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v70, enum case for DispatchQoS.QoSClass.default(_:), v72);
  v45 = (void *)static OS_dispatch_queue.global(qos:)(v43);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  v46 = v73;
  sub_100027FE8(v38, v73, type metadata accessor for CustodianshipRecords);
  v47 = *((unsigned __int8 *)isa + 80);
  v48 = (v47 + 56) & ~v47;
  v49 = (_QWORD *)swift_allocObject(&unk_10026E1A8, v48 + v75, v47 | 7);
  v50 = v68;
  v49[2] = v68;
  v49[3] = v35;
  v51 = v76;
  v52 = v77;
  v49[4] = v41;
  v49[5] = v51;
  v49[6] = v52;
  sub_10003B730(v46, (uint64_t)v49 + v48, type metadata accessor for CustodianshipRecords);
  aBlock[4] = sub_1001C43DC;
  v86 = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026E1C0;
  v53 = _Block_copy(aBlock);
  swift_retain(v50);
  swift_retain(v35);
  swift_retain(v41);
  v54 = swift_retain(v52);
  v55 = v78;
  static DispatchQoS.unspecified.getter(v54);
  v84 = &_swiftEmptyArrayStorage;
  v56 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v57 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v58 = sub_100008628();
  v60 = v79;
  v59 = v80;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v57, v58, v80, v56);
  v61 = v67;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v55, v60, v45, v53);
  _Block_release(v53);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v60, v59);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v55, v82);
  v62 = v86;
  swift_release(v50);
  swift_release(v35);
  swift_release(v41);
  return swift_release(v62);
}

void sub_1001C22B0(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t *a4, const char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  v10 = sub_1000080B4(a4);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v13, a4);
  if (swift_getEnumCaseMultiPayload(v13, v10) == 1)
  {
    v14 = *v13;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = (uint64_t *)(a2 + 16);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A89D8);
    v17 = swift_errorRetain(v14);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v25 = a5;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v22 = _convertErrorToNSError(_:)(v14);
      v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      *v21 = v22;
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, v25, v20, 0xCu);
      v23 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_errorRelease(v14);
    }

    swift_beginAccess(v15, &v26, 1, 0);
    v24 = *v15;
    *v15 = v14;
    swift_errorRelease(v24);
  }
  else
  {
    sub_100004934((uint64_t)v13, a4);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_1001C24E4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject **v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  uint64_t *v48;
  uint64_t v49;
  char v50[80];
  uint64_t v51;
  _QWORD *v52;
  _QWORD v53[3];
  _QWORD *v54;
  char v55[32];

  v11 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v11, v12);
  v14 = (NSObject **)((char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a1 + 16, v55, 0, 0);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = &_swiftEmptyDictionarySingleton;
  if (v16)
  {
    swift_errorRetain(v16);
    swift_errorRetain(v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v54 = &_swiftEmptyDictionarySingleton;
    sub_10001F710(v16, 0xD000000000000018, 0x800000010020FB30, isUniquelyReferenced_nonNull_native);
    v17 = v54;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v16);
  }
  v19 = (uint64_t *)(a3 + 16);
  swift_beginAccess(v15, &v54, 0, 0);
  v20 = *v15;
  if (v20)
  {
    swift_errorRetain(v20);
    swift_errorRetain(v20);
    v21 = swift_isUniquelyReferenced_nonNull_native(v17);
    v53[0] = v17;
    sub_10001F710(v20, 0xD00000000000001BLL, 0x800000010020FB10, v21);
    v17 = (_QWORD *)v53[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v20);
  }
  swift_beginAccess(v19, v53, 0, 0);
  v22 = *v19;
  if (v22)
  {
    swift_errorRetain(v22);
    swift_errorRetain(v22);
    v23 = swift_isUniquelyReferenced_nonNull_native(v17);
    v52 = v17;
    sub_10001F710(v22, 0xD000000000000015, 0x800000010020FAF0, v23);
    v17 = v52;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v22);
  }
  if (v17[2])
  {
    type metadata accessor for AAError(0);
    v25 = v24;
    v51 = -4408;
    v26 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v26, v50);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v28;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v17;
    v29 = sub_100015894(inited);
    v30 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v52, &v51, v29, v25, v30);
    v31 = v52;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89D8);
    v33 = v31;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (uint64_t *)swift_slowAlloc(8, -1);
      v49 = v11;
      *(_DWORD *)v36 = 138412290;
      v37 = a4;
      v38 = _convertErrorToNSError(_:)(v33);
      v52 = (_QWORD *)v38;
      v11 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
      v39 = v48;
      *v48 = v38;
      a4 = v37;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to save all custodianship records: %@", v36, 0xCu);
      v40 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v40);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {

      v34 = v33;
    }

    *v14 = v33;
    swift_storeEnumTagMultiPayload(v14, v11, 1);
    v46 = v33;
    a4(v14);

  }
  else
  {
    swift_bridgeObjectRelease(v17);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100005288(v41, (uint64_t)qword_1002A89D8);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Custodianship records saved successfully.", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    sub_100027FE8(a6, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload(v14, v11, 0);
    a4(v14);
  }
  return sub_100004934((uint64_t)v14, (uint64_t *)&unk_10028CCD0);
}

uint64_t sub_1001C2A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD *), uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  _BOOL4 v47;
  uint64_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a7;
  v54 = a5;
  v55 = a6;
  v51 = a2;
  v52 = a3;
  v8 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v8, v9);
  v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4(&qword_10028D5C8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CustodianRecord(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A20(a1, (uint64_t)v23, &qword_10028D5C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_100004934((uint64_t)v23, &qword_10028D5C8);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A89D8);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "CustodianRecord not found. Aborting Delete.", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v35 = v34;
    v56 = -7003;
    v36 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v37 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v57, &v56, v36, v35, v37);
    *v11 = v57;
    swift_storeEnumTagMultiPayload(v11, v8, 1);
    v54(v11);
    return sub_100004934((uint64_t)v11, (uint64_t *)&unk_10028CD50);
  }
  else
  {
    sub_10003B730((uint64_t)v23, (uint64_t)v28, type metadata accessor for CustodianRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A89D8);
    v40 = v51;
    sub_100024A20(v51, (uint64_t)v19, &qword_10028D5E0);
    v41 = v52;
    v42 = sub_100024A20(v52, (uint64_t)v15, &qword_10028D5B0);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.debug.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(14, -1);
      *(_DWORD *)v45 = 67109376;
      v46 = type metadata accessor for CustodianRecoveryInfoRecord(0);
      v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v19, 1, v46) != 1;
      sub_100004934((uint64_t)v19, &qword_10028D5E0);
      LODWORD(v57) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 4);
      *(_WORD *)(v45 + 8) = 1024;
      v48 = type metadata accessor for CustodianHealthRecord(0);
      v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v15, 1, v48) != 1;
      sub_100004934((uint64_t)v15, &qword_10028D5B0);
      LODWORD(v57) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 4);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "RecoveryInfoRecord found?: %{BOOL}d. HealthRecord found? %{BOOL}d. Continuing to delete", (uint8_t *)v45, 0xEu);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_100004934((uint64_t)v15, &qword_10028D5B0);
      sub_100004934((uint64_t)v19, &qword_10028D5E0);
    }

    sub_1001C2F30((uint64_t)v28, v40, v41, (uint64_t)v54, v55);
    return sub_100028388((uint64_t)v28, type metadata accessor for CustodianRecord);
  }
}

uint64_t sub_1001C2F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void (**v46)(uint64_t);
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (**v64)(uint64_t);
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (**v81)(uint64_t);
  NSObject *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  _QWORD *v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  NSObject *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD aBlock[5];
  _QWORD *v145;

  v132 = a4;
  v133 = a5;
  v123 = a3;
  v118 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v138 = *(_QWORD *)(v7 - 8);
  v139 = v7;
  __chkstk_darwin(v7, v8);
  v137 = (char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v135 = *(_QWORD *)(v10 - 8);
  v136 = v10;
  __chkstk_darwin(v10, v11);
  v134 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for DispatchQoS.QoSClass(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128, v13);
  v126 = (char *)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v15, v16);
  v121 = (uint64_t)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for CustodianHealthRecord(0);
  v122 = *(_QWORD *)(v119 - 8);
  v19 = __chkstk_darwin(v119, v18);
  v111 = (uint64_t)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = v20;
  __chkstk_darwin(v19, v21);
  v112 = (uint64_t)&v107 - v22;
  v23 = sub_1000080B4(&qword_10028D5E0);
  __chkstk_darwin(v23, v24);
  v113 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v114 = *(_QWORD *)(v115 - 8);
  v27 = __chkstk_darwin(v115, v26);
  v108 = (uint64_t)&v107 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = v28;
  __chkstk_darwin(v27, v29);
  v109 = (uint64_t)&v107 - v30;
  v31 = type metadata accessor for CustodianRecord(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v31, v34);
  v35 = (char *)&v107 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = dispatch_group_create();
  v37 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v37 + 16) = 0;
  v140 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v140 + 16) = 0;
  v129 = swift_allocObject(&unk_10026E108, 24, 7);
  *(_QWORD *)(v129 + 16) = 0;
  dispatch_group_enter(v36);
  v141 = v5;
  v38 = *(_QWORD *)(v5 + 40);
  v116 = (_QWORD *)(v5 + 16);
  v39 = sub_10000732C((_QWORD *)(v5 + 16), v38);
  v40 = swift_allocObject(&unk_10026E4A0, 32, 7);
  *(_QWORD *)(v40 + 16) = v37;
  *(_QWORD *)(v40 + 24) = v36;
  v41 = *v39;
  sub_100027FE8(a1, (uint64_t)v35, type metadata accessor for CustodianRecord);
  v42 = *(unsigned __int8 *)(v32 + 80);
  v43 = (v42 + 24) & ~v42;
  v142 = v42;
  v124 = v33;
  v44 = (v33 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v120 = v42 | 7;
  v45 = swift_allocObject(&unk_10026E4C8, v44 + 16, v42 | 7);
  *(_QWORD *)(v45 + 16) = v41;
  v125 = v35;
  sub_10003B730((uint64_t)v35, v45 + v43, type metadata accessor for CustodianRecord);
  v46 = (void (**)(uint64_t))(v45 + v44);
  v47 = v114;
  *v46 = sub_1001C4878;
  v46[1] = (void (*)(uint64_t))v40;
  v130 = v37;
  swift_retain(v37);
  v48 = v36;
  swift_retain(v41);
  swift_retain(v40);
  v131 = a1;
  sub_10017EB7C(a1, (uint64_t)sub_1001C4A0C, v45);
  swift_release(v40);
  v49 = v45;
  v50 = (uint64_t)v113;
  swift_release(v49);
  sub_100024A20(v118, v50, &qword_10028D5E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v50, 1, v115) == 1)
  {
    v51 = v48;
    sub_100004934(v50, &qword_10028D5E0);
    v52 = v141;
    v53 = v116;
  }
  else
  {
    v54 = v109;
    sub_10003B730(v50, v109, type metadata accessor for CustodianRecoveryInfoRecord);
    dispatch_group_enter(v48);
    v53 = v116;
    v55 = sub_10000732C(v116, *(_QWORD *)(v141 + 40));
    v56 = swift_allocObject(&unk_10026E590, 32, 7);
    v57 = v140;
    *(_QWORD *)(v56 + 16) = v140;
    *(_QWORD *)(v56 + 24) = v48;
    v58 = *v55;
    v59 = v108;
    sub_100027FE8(v54, v108, type metadata accessor for CustodianRecoveryInfoRecord);
    v60 = *(unsigned __int8 *)(v47 + 80);
    v61 = (v60 + 24) & ~v60;
    v62 = (v107 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    v63 = swift_allocObject(&unk_10026E5B8, v62 + 16, v60 | 7);
    *(_QWORD *)(v63 + 16) = v58;
    sub_10003B730(v59, v63 + v61, type metadata accessor for CustodianRecoveryInfoRecord);
    v64 = (void (**)(uint64_t))(v63 + v62);
    *v64 = sub_1001C4D80;
    v64[1] = (void (*)(uint64_t))v56;
    v51 = v48;
    v65 = v48;
    swift_retain(v57);
    swift_retain(v58);
    swift_retain(v56);
    sub_10017F03C(v54, (uint64_t)sub_1001C4EF4, v63);
    swift_release(v56);
    swift_release(v63);
    sub_100028388(v54, type metadata accessor for CustodianRecoveryInfoRecord);
    v52 = v141;
  }
  v66 = ~v142;
  v67 = v121;
  sub_100024A20(v123, v121, &qword_10028D5B0);
  v68 = v122;
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v67, 1, v119);
  v70 = v129;
  v117 = v51;
  if (v69 == 1)
  {
    sub_100004934(v67, &qword_10028D5B0);
  }
  else
  {
    v71 = v112;
    sub_10003B730(v67, v112, type metadata accessor for CustodianHealthRecord);
    v72 = v51;
    dispatch_group_enter(v51);
    v73 = sub_10000732C(v53, *(_QWORD *)(v52 + 40));
    v74 = swift_allocObject(&unk_10026E540, 32, 7);
    *(_QWORD *)(v74 + 16) = v70;
    *(_QWORD *)(v74 + 24) = v51;
    v75 = *v73;
    v76 = v111;
    sub_100027FE8(v71, v111, type metadata accessor for CustodianHealthRecord);
    v77 = *(unsigned __int8 *)(v68 + 80);
    v78 = (v77 + 24) & ~v77;
    v79 = (v110 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = swift_allocObject(&unk_10026E568, v79 + 16, v77 | 7);
    *(_QWORD *)(v80 + 16) = v75;
    sub_10003B730(v76, v80 + v78, type metadata accessor for CustodianHealthRecord);
    v81 = (void (**)(uint64_t))(v80 + v79);
    *v81 = sub_1001C4BF8;
    v81[1] = (void (*)(uint64_t))v74;
    v82 = v72;
    swift_retain(v70);
    swift_retain(v75);
    swift_retain(v74);
    sub_10017EDDC(v71, (uint64_t)sub_1001C4D2C, v80);
    swift_release(v74);
    swift_release(v80);
    sub_100028388(v71, type metadata accessor for CustodianHealthRecord);
  }
  sub_100007764();
  v83 = v127;
  v84 = v126;
  v85 = v128;
  (*(void (**)(char *, _QWORD, uint64_t))(v127 + 104))(v126, enum case for DispatchQoS.QoSClass.default(_:), v128);
  v86 = (void *)static OS_dispatch_queue.global(qos:)(v84);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
  v87 = (uint64_t)v125;
  sub_100027FE8(v131, (uint64_t)v125, type metadata accessor for CustodianRecord);
  v88 = (v142 + 56) & v66;
  v89 = (_QWORD *)swift_allocObject(&unk_10026E4F0, v88 + v124, v120);
  v90 = v130;
  v91 = v140;
  v89[2] = v130;
  v89[3] = v91;
  v92 = v132;
  v89[4] = v70;
  v89[5] = v92;
  v93 = (uint64_t)v89 + v88;
  v94 = v133;
  v89[6] = v133;
  sub_10003B730(v87, v93, type metadata accessor for CustodianRecord);
  aBlock[4] = sub_1001C4B94;
  v145 = v89;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026E508;
  v95 = _Block_copy(aBlock);
  swift_retain(v90);
  swift_retain(v91);
  swift_retain(v70);
  v96 = swift_retain(v94);
  v97 = v70;
  v98 = v134;
  static DispatchQoS.unspecified.getter(v96);
  v143 = _swiftEmptyArrayStorage;
  v99 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v100 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v101 = sub_100008628();
  v102 = v137;
  v103 = v139;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v143, v100, v101, v139, v99);
  v104 = v117;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v98, v102, v86, v95);
  _Block_release(v95);

  (*(void (**)(char *, uint64_t))(v138 + 8))(v102, v103);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v98, v136);
  v105 = v145;
  swift_release(v90);
  swift_release(v91);
  swift_release(v97);
  return swift_release(v105);
}

uint64_t type metadata accessor for CustodianStorageController()
{
  return objc_opt_self(_TtC13appleaccountd26CustodianStorageController);
}

uint64_t type metadata accessor for CustodianshipRecords(uint64_t a1)
{
  return sub_100004C78(a1, qword_100297C40, (uint64_t)&nominal type descriptor for CustodianshipRecords);
}

uint64_t sub_1001C38F4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t *v37;
  void (*v38)(_QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void (*v46)(_QWORD);
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint8_t *v58;
  NSObject **v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  NSObject **v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  uint64_t v76;
  _QWORD v77[3];
  void *v78;
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  char v83[24];
  void *v84;

  v72 = a5;
  v11 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v11, v12);
  v71 = (NSObject **)((char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (_QWORD *)(a1 + 16);
  v15 = (uint64_t *)(a2 + 16);
  v16 = &_swiftEmptyDictionarySingleton;
  v84 = &_swiftEmptyDictionarySingleton;
  swift_beginAccess(a1 + 16, v83, 0, 0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    swift_errorRetain(v17);
    swift_errorRetain(v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v82 = &_swiftEmptyDictionarySingleton;
    sub_10001F710(v17, 0xD000000000000014, 0x8000000100209E70, isUniquelyReferenced_nonNull_native);
    v16 = v82;
    v84 = v82;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v17);
  }
  v19 = (uint64_t *)(a3 + 16);
  swift_beginAccess(v15, &v82, 0, 0);
  v20 = *v15;
  if (*v15)
  {
    swift_errorRetain(*v15);
    swift_errorRetain(v20);
    v21 = swift_isUniquelyReferenced_nonNull_native(v16);
    v81 = v16;
    sub_10001F710(v20, 0xD000000000000017, 0x8000000100209E20, v21);
    v16 = v81;
    v84 = v81;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v20);
  }
  swift_beginAccess(v19, &v81, 0, 0);
  v22 = *v19;
  if (*v19)
  {
    swift_errorRetain(*v19);
    swift_errorRetain(v22);
    v23 = swift_isUniquelyReferenced_nonNull_native(v16);
    v80 = v84;
    sub_10001F710(v22, 0xD000000000000020, 0x8000000100209E40, v23);
    v16 = v80;
    v84 = v80;
    swift_bridgeObjectRelease(0x8000000000000000);
    swift_errorRelease(v22);
  }
  swift_beginAccess(v14, &v80, 0, 0);
  if (!*v14)
  {
    swift_beginAccess(v15, &v78, 0, 0);
    if (*v15 || (swift_beginAccess(v19, v77, 0, 0), *v19))
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100005288(v41, (uint64_t)qword_1002A89D8);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.debug.getter(v43);
      if (!os_log_type_enabled(v43, v44))
        goto LABEL_19;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v76 = v70;
      v69 = v45;
      *(_DWORD *)v45 = 136315138;
      v68 = v45 + 4;
      swift_beginAccess(&v84, v75, 0, 0);
      v46 = a4;
      v47 = v84;
      swift_bridgeObjectRetain(v84);
      v48 = sub_1000080B4(&qword_10028E850);
      v49 = a6;
      v50 = v11;
      v51 = Dictionary.description.getter(v47, &type metadata for String, v48, &protocol witness table for String);
      v53 = v52;
      v54 = v47;
      a4 = v46;
      swift_bridgeObjectRelease(v54);
      v55 = v51;
      v11 = v50;
      a6 = v49;
      v74 = sub_1001DEF4C(v55, v53, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
      swift_bridgeObjectRelease(v53);
      v56 = v69;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Custodianship records deleted with partial errors %s. But, since CustodianRecord was deleted successfully.", v69, 0xCu);
      v57 = v70;
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      v58 = v56;
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v64 = type metadata accessor for Logger(0);
      v65 = sub_100005288(v64, (uint64_t)qword_1002A89D8);
      v43 = Logger.logObject.getter(v65);
      v66 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v43, v66))
        goto LABEL_19;
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v66, "Custodianship records deleted successfully", v67, 2u);
      v58 = v67;
    }
    swift_slowDealloc(v58, -1, -1);
LABEL_19:

    v59 = v71;
    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    v60 = a6 + *(int *)(type metadata accessor for CustodianRecord(0) + 20);
    v61 = type metadata accessor for UUID(0);
    (*(void (**)(NSObject **, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
    swift_storeEnumTagMultiPayload(v59, v11, 0);
    a4(v59);
    goto LABEL_22;
  }
  v70 = v11;
  type metadata accessor for AAError(0);
  v25 = v24;
  v77[0] = -4408;
  v26 = sub_1000080B4(&qword_10028BB68);
  inited = swift_initStackObject(v26, &v73);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
  *(_QWORD *)(inited + 48) = v16;
  swift_bridgeObjectRetain(v16);
  v29 = sub_100015894(inited);
  v30 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  _BridgedStoredNSError.init(_:userInfo:)(&v78, v77, v29, v25, v30);
  v31 = v78;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v32 = type metadata accessor for Logger(0);
  sub_100005288(v32, (uint64_t)qword_1002A89D8);
  v33 = v31;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v36 = 138412290;
    v38 = a4;
    v39 = _convertErrorToNSError(_:)(v33);
    v78 = (void *)v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79);
    *v37 = v39;
    a4 = v38;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to delete custodianship records: %@", v36, 0xCu);
    v40 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v37, 1, v40);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {

    v34 = v33;
  }
  v59 = v71;

  *v59 = v33;
  swift_storeEnumTagMultiPayload(v59, v70, 1);
  v62 = v33;
  a4(v59);

LABEL_22:
  sub_100004934((uint64_t)v59, (uint64_t *)&unk_10028CD50);
  return swift_bridgeObjectRelease(v84);
}

uint64_t sub_1001C406C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001C4094(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_10028D5D0, "Failed to save custodian record: %@");
}

void sub_1001C40C0(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_100293AB0, "Failed to save custodianship record: %@");
}

void sub_1001C40EC(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), &qword_10028D5B8, "Failed to save health record: %@");
}

uint64_t sub_1001C4114()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  char *v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  char *v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_QWORD *)(v2 + 64);
  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  v4 = (char *)v0 + ((v3 + 56) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(char *, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(&v4[v8[5]], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[6] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[7] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[8] + 8]);
  v9 = (uint64_t *)&v4[v8[10]];
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)&v4[v8[11]], *(_QWORD *)&v4[v8[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[v8[14] + 8]);
  v11 = &v4[v8[16]];
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = &v4[*(int *)(v1 + 20)];
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(&v13[v14[5]], v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[6] + 8]);
  sub_10000F494(*(_QWORD *)&v13[v14[7]], *(_QWORD *)&v13[v14[7] + 8]);
  v15 = (uint64_t *)&v13[v14[8]];
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)&v13[v14[9]], *(_QWORD *)&v13[v14[9] + 8]);
  v17 = &v13[v14[11]];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)&v13[v14[12] + 8]);
  v18 = &v4[*(int *)(v1 + 24)];
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(&v18[v19[5]], v5);
  v20 = &v18[v19[6]];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)&v18[v19[7]];
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  sub_10000F494(*(_QWORD *)&v18[v19[8]], *(_QWORD *)&v18[v19[8] + 8]);
  return swift_deallocObject(v0, ((v3 + 56) & ~v3) + v25, v3 | 7);
}

uint64_t sub_1001C43DC()
{
  return sub_1001C4BA8(type metadata accessor for CustodianshipRecords, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *))sub_1001C24E4);
}

uint64_t sub_1001C43F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001C441C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001C15AC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1001C4430(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001C0B24(a1, v4, v2 + v6, *(void (**)(uint64_t *))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_1001C4498(uint64_t a1, char a2)
{
  return sub_1001C44BC(a1, a2, &qword_10028C450, type metadata accessor for CustodianshipInfoRecord, "No custodian with id %s found.", "Error fetching custodianship info records: %@");
}

uint64_t sub_1001C44BC(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(_QWORD), const char *a5, const char *a6)
{
  uint64_t v6;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v12 = a2 & 1;
  v13 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = v6 + ((*(_QWORD *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001C00E8(a1, v12, v6 + v14, *(void (**)(_QWORD))v15, *(_QWORD *)(v15 + 8), a3, a4, a5, a6);
}

uint64_t sub_1001C4560(uint64_t a1, char a2)
{
  return sub_1001C44BC(a1, a2, &qword_10028D5D0, type metadata accessor for CustodianRecord, "No custodian with id %s found.", "Error fetching custodian records: %@");
}

uint64_t sub_1001C4588(uint64_t a1, char a2)
{
  return sub_1001C44BC(a1, a2, &qword_100293AB0, type metadata accessor for CustodianRecoveryInfoRecord, "No recovery info with id %s found.", "Error fetching recovery info records: %@");
}

void sub_1001C45B0(uint64_t a1)
{
  uint64_t v1;

  sub_1001BE7A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), &qword_10028D640, &qword_10028C450, type metadata accessor for CustodianshipInfoRecord, "Failed to fetch custodianship info record: %@");
}

void sub_1001C45F0(uint64_t a1)
{
  uint64_t v1;

  sub_1001BE7A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), &qword_10028D5E0, &qword_100293AB0, type metadata accessor for CustodianRecoveryInfoRecord, "Failed to fetch custodianship record: %@");
}

void sub_1001C4630(uint64_t a1)
{
  uint64_t v1;

  sub_1001BE7A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), &qword_10028D5B0, &qword_10028D5B8, type metadata accessor for CustodianHealthRecord, "Failed to fetch health record: %@");
}

uint64_t sub_1001C4670()
{
  return sub_1001C4770((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BEA68);
}

uint64_t type metadata accessor for CustodianRecoveryRecords(uint64_t a1)
{
  return sub_100004C78(a1, qword_100297CD8, (uint64_t)&nominal type descriptor for CustodianRecoveryRecords);
}

void sub_1001C4694(uint64_t a1)
{
  uint64_t v1;

  sub_1001BE7A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32), &qword_10028D5C8, &qword_10028D5D0, type metadata accessor for CustodianRecord, "Failed to fetch custodian record: %@");
}

uint64_t sub_1001C46D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001C4710()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001C4764()
{
  return sub_1001C4770((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001BDD38);
}

uint64_t sub_1001C4770(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1001C4788(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_1000080B4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001C47CC()
{
  return sub_10008C0D0(&qword_100297BD8);
}

uint64_t sub_1001C47D8(uint64_t a1)
{
  sub_1000080B4(&qword_100297BD8);
  return sub_1001C1324(a1);
}

uint64_t sub_1001C4818()
{
  return sub_10008C0D0(&qword_100297BE0);
}

uint64_t sub_1001C4824(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  sub_1000080B4(&qword_100297BE0);
  return sub_1001C08D4(a1, v3);
}

void sub_1001C4878(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), (uint64_t *)&unk_10028CD50, "Custodian record delete failed: %@");
}

uint64_t sub_1001C48A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

void sub_1001C4A0C(uint64_t a1)
{
  sub_1001C4F18(a1, type metadata accessor for CustodianRecord, (uint64_t)&unk_10026E680, (uint64_t)sub_1001C542C, (uint64_t)&unk_10026E698);
}

uint64_t sub_1001C4A30()
{
  char *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  char *v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(&v0[v4], v7);
  v9(&v0[v4 + v1[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[6]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[7]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[8]]);
  v10 = (uint64_t *)&v0[v4 + v1[10]];
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)&v6[v1[11]], *(_QWORD *)&v6[v1[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[14] + 8]);
  v12 = &v6[v1[16]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001C4B94()
{
  return sub_1001C4BA8(type metadata accessor for CustodianRecord, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *))sub_1001C38F4);
}

uint64_t sub_1001C4BA8(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(*((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), *((_QWORD *)v2 + 5), *((_QWORD *)v2 + 6), &v2[(v3 + 56) & ~v3]);
}

void sub_1001C4BF8(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), (uint64_t *)&unk_10028CD50, "Health record delete failed: %@");
}

uint64_t sub_1001C4C20()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

void sub_1001C4D2C(uint64_t a1)
{
  sub_1001C4F18(a1, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10026E630, (uint64_t)sub_1001C5220, (uint64_t)&unk_10026E648);
}

uint64_t sub_1001C4D54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1001C4D80(uint64_t a1)
{
  uint64_t v1;

  sub_1001C22B0(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), (uint64_t *)&unk_10028CD50, "Recovery info record delete failed: %@");
}

uint64_t sub_1001C4DA8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

void sub_1001C4EF4(uint64_t a1)
{
  sub_1001C4F18(a1, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_10026E5E0, (uint64_t)sub_1001C50F0, (uint64_t)&unk_10026E5F8);
}

void sub_1001C4F18(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v11 = *(_QWORD *)(a2(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1001BB22C(a1, *(_QWORD *)(v5 + 16), v5 + v12, *(void (**)(_QWORD *))v13, *(_QWORD *)(v13 + 8), a2, a3, a4, a5);
}

uint64_t sub_1001C4FAC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_1001C50F0()
{
  return sub_1001C524C(type metadata accessor for CustodianRecoveryInfoRecord, 0xD00000000000001BLL, 0x800000010020A490, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))sub_1001BC8B4);
}

uint64_t sub_1001C511C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_1001C5220()
{
  return sub_1001C524C(type metadata accessor for CustodianHealthRecord, 0xD000000000000015, 0x800000010020A450, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))sub_1001BC8B4);
}

uint64_t sub_1001C524C(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t (*a4)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v9 = *(_QWORD *)(a1(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (_QWORD *)(v4 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(v4 + v10, *v11, v11[1], a1, a2, a3);
}

uint64_t sub_1001C52C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1001C542C()
{
  return sub_1001C524C(type metadata accessor for CustodianRecord, 0x6169646F74737543, 0xEF64726F6365526ELL, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))sub_1001BC8B4);
}

uint64_t sub_1001C5460()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001C555C()
{
  return sub_1001C524C(type metadata accessor for InheritanceHealthRecord, 0xD000000000000017, 0x800000010020A430, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))sub_1001BC384);
}

uint64_t sub_1001C5588()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001C5658()
{
  return sub_1001C524C(type metadata accessor for BenefactorInfoRecord, 0xD00000000000001FLL, 0x800000010020A500, (uint64_t (*)(unint64_t, _QWORD, _QWORD, uint64_t (*)(_QWORD), uint64_t, uint64_t))sub_1001BC384);
}

uint64_t sub_1001C5684()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_1001C57C8()
{
  return sub_1001C57DC(type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1001BBE48);
}

uint64_t sub_1001C57DC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (_QWORD *)(v2 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(v2 + v4, *v5, v5[1]);
}

uint64_t sub_1001C5834()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001C5924()
{
  return sub_1001C57DC(type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1001BB90C);
}

char *sub_1001C5938(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __n128 v83;
  int *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unsigned int (*v103)(char *, uint64_t, uint64_t);
  uint64_t v104;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v6 = type metadata accessor for UUID(0);
    v104 = *(_QWORD *)(v6 - 8);
    v7 = *(void (**)(char *, char *, uint64_t))(v104 + 16);
    v7(a1, a2, v6);
    v8 = (int *)type metadata accessor for CustodianRecord(0);
    v7(&a1[v8[5]], &a2[v8[5]], v6);
    v9 = v8[6];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = v8[7];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v8[8];
    v18 = &a1[v17];
    v19 = &a2[v17];
    v20 = *((_QWORD *)v19 + 1);
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_QWORD *)v18 + 1) = v20;
    *(_QWORD *)&a1[v8[9]] = *(_QWORD *)&a2[v8[9]];
    v21 = v8[10];
    v22 = &a1[v21];
    v23 = (uint64_t *)&a2[v21];
    v24 = *(_QWORD *)&a2[v21 + 8];
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v26 = *v23;
      sub_10000F450(*v23, v24);
      *(_QWORD *)v22 = v26;
      *((_QWORD *)v22 + 1) = v24;
    }
    v27 = v8[11];
    v28 = (uint64_t *)&a1[v27];
    v29 = (uint64_t *)&a2[v27];
    v30 = *v29;
    v31 = v29[1];
    sub_10000F450(*v29, v31);
    *v28 = v30;
    v28[1] = v31;
    a1[v8[12]] = a2[v8[12]];
    v32 = v8[13];
    v33 = &a1[v32];
    v34 = &a2[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = v8[14];
    v37 = &a1[v36];
    v38 = &a2[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    v40 = v8[15];
    v41 = &a1[v40];
    v42 = &a2[v40];
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = v42[8];
    v43 = v8[16];
    v44 = &a1[v43];
    v45 = &a2[v43];
    v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48);
    swift_bridgeObjectRetain(v35);
    v47 = swift_bridgeObjectRetain(v39);
    v103 = v46;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v46)(v45, 1, v6, v47))
    {
      v48 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v7(v44, v45, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v44, 0, 1, v6);
    }
    v49 = *(int *)(a3 + 20);
    v50 = &a1[v49];
    v51 = &a2[v49];
    v7(&a1[v49], &a2[v49], v6);
    v52 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
    v7(&v50[v52[5]], &v51[v52[5]], v6);
    v53 = v52[6];
    v54 = &v50[v53];
    v55 = &v51[v53];
    v56 = *((_QWORD *)v55 + 1);
    *(_QWORD *)v54 = *(_QWORD *)v55;
    *((_QWORD *)v54 + 1) = v56;
    v57 = v52[7];
    v58 = (uint64_t *)&v50[v57];
    v59 = (uint64_t *)&v51[v57];
    v60 = *v59;
    v61 = v59[1];
    swift_bridgeObjectRetain(v56);
    sub_10000F450(v60, v61);
    *v58 = v60;
    v58[1] = v61;
    v62 = v52[8];
    v63 = &v50[v62];
    v64 = &v51[v62];
    v65 = *((_QWORD *)v64 + 1);
    if (v65 >> 60 == 15)
    {
      *(_OWORD *)v63 = *(_OWORD *)v64;
    }
    else
    {
      v66 = *(_QWORD *)v64;
      sub_10000F450(*(_QWORD *)v64, *((_QWORD *)v64 + 1));
      *(_QWORD *)v63 = v66;
      *((_QWORD *)v63 + 1) = v65;
    }
    v67 = v52[9];
    v68 = (uint64_t *)&v50[v67];
    v69 = (uint64_t *)&v51[v67];
    v70 = *v69;
    v71 = v69[1];
    sub_10000F450(*v69, v71);
    *v68 = v70;
    v68[1] = v71;
    v50[v52[10]] = v51[v52[10]];
    v72 = v52[11];
    v73 = &v50[v72];
    v74 = &v51[v72];
    if (v103(&v51[v72], 1, v6))
    {
      v75 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v7(v73, v74, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v73, 0, 1, v6);
    }
    v76 = v52[12];
    v77 = &v50[v76];
    v78 = &v51[v76];
    v79 = *((_QWORD *)v78 + 1);
    *(_QWORD *)v77 = *(_QWORD *)v78;
    *((_QWORD *)v77 + 1) = v79;
    v80 = *(int *)(a3 + 24);
    v81 = &a1[v80];
    v82 = &a2[v80];
    v83 = swift_bridgeObjectRetain(v79);
    ((void (*)(char *, char *, uint64_t, __n128))v7)(v81, v82, v6, v83);
    v84 = (int *)type metadata accessor for CustodianHealthRecord(0);
    v7(&v81[v84[5]], &v82[v84[5]], v6);
    v85 = v84[6];
    v86 = &v81[v85];
    v87 = &v82[v85];
    v88 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16))(v86, v87, v88);
    v89 = v84[7];
    v90 = &v81[v89];
    v91 = &v82[v89];
    v92 = *((_QWORD *)v91 + 1);
    if (v92 >> 60 == 15)
    {
      *(_OWORD *)v90 = *(_OWORD *)v91;
    }
    else
    {
      v93 = *(_QWORD *)v91;
      sub_10000F450(*(_QWORD *)v91, *((_QWORD *)v91 + 1));
      *(_QWORD *)v90 = v93;
      *((_QWORD *)v90 + 1) = v92;
    }
    v94 = v84[8];
    v95 = (uint64_t *)&v81[v94];
    v96 = (uint64_t *)&v82[v94];
    v97 = *v96;
    v98 = v96[1];
    sub_10000F450(*v96, v98);
    *v95 = v97;
    v95[1] = v98;
    v81[v84[9]] = v82[v84[9]];
    v99 = v84[10];
    v100 = &v81[v99];
    v101 = &v82[v99];
    *(_QWORD *)v100 = *(_QWORD *)v101;
    v100[8] = v101[8];
  }
  return a1;
}

uint64_t sub_1001C5DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  int *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = (int *)type metadata accessor for CustodianRecord(0);
  v6(a1 + v7[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[8] + 8));
  v8 = (uint64_t *)(a1 + v7[10]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_10000F494(*v8, v9);
  sub_10000F494(*(_QWORD *)(a1 + v7[11]), *(_QWORD *)(a1 + v7[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[14] + 8));
  v10 = a1 + v7[16];
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v11(v10, 1, v4))
    v6(v10, v4);
  v12 = a1 + *(int *)(a2 + 20);
  v6(v12, v4);
  v13 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v6(v12 + v13[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[6] + 8));
  sub_10000F494(*(_QWORD *)(v12 + v13[7]), *(_QWORD *)(v12 + v13[7] + 8));
  v14 = (uint64_t *)(v12 + v13[8]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_10000F494(*v14, v15);
  sub_10000F494(*(_QWORD *)(v12 + v13[9]), *(_QWORD *)(v12 + v13[9] + 8));
  v16 = v12 + v13[11];
  if (!v11(v16, 1, v4))
    v6(v16, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[12] + 8));
  v17 = a1 + *(int *)(a2 + 24);
  v6(v17, v4);
  v18 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v6(v17 + v18[5], v4);
  v19 = v17 + v18[6];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = (uint64_t *)(v17 + v18[7]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10000F494(*v21, v22);
  return sub_10000F494(*(_QWORD *)(v17 + v18[8]), *(_QWORD *)(v17 + v18[8] + 8));
}

uint64_t sub_1001C6038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __n128 v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;

  v5 = type metadata accessor for UUID(0);
  v102 = *(_QWORD *)(v5 - 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 16);
  v6(a1, a2, v5);
  v7 = (int *)type metadata accessor for CustodianRecord(0);
  v6(a1 + v7[5], a2 + v7[5], v5);
  v8 = v7[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v7[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_QWORD *)(a1 + v7[9]) = *(_QWORD *)(a2 + v7[9]);
  v20 = v7[10];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = *(_QWORD *)(a2 + v20 + 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    sub_10000F450(*v22, v23);
    *(_QWORD *)v21 = v24;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v25 = v7[11];
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *v27;
  v29 = v27[1];
  sub_10000F450(*v27, v29);
  *v26 = v28;
  v26[1] = v29;
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  v30 = v7[13];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  v33 = v32[1];
  *v31 = *v32;
  v31[1] = v33;
  v34 = v7[14];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  v37 = v36[1];
  *v35 = *v36;
  v35[1] = v37;
  v38 = v7[15];
  v39 = a1 + v38;
  v40 = a2 + v38;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = v7[16];
  v42 = (void *)(a1 + v41);
  v43 = (const void *)(a2 + v41);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  swift_bridgeObjectRetain(v33);
  v45 = swift_bridgeObjectRetain(v37);
  v101 = v44;
  if (((unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v44)(v43, 1, v5, v45))
  {
    v46 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v42, (uint64_t)v43, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v42, 0, 1, v5);
  }
  v47 = *(int *)(a3 + 20);
  v48 = a1 + v47;
  v49 = a2 + v47;
  v6(a1 + v47, a2 + v47, v5);
  v50 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v6(v48 + v50[5], v49 + v50[5], v5);
  v51 = v50[6];
  v52 = (_QWORD *)(v48 + v51);
  v53 = (_QWORD *)(v49 + v51);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = v50[7];
  v56 = (uint64_t *)(v48 + v55);
  v57 = (uint64_t *)(v49 + v55);
  v58 = *v57;
  v59 = v57[1];
  swift_bridgeObjectRetain(v54);
  sub_10000F450(v58, v59);
  *v56 = v58;
  v56[1] = v59;
  v60 = v50[8];
  v61 = v48 + v60;
  v62 = (uint64_t *)(v49 + v60);
  v63 = v62[1];
  if (v63 >> 60 == 15)
  {
    *(_OWORD *)v61 = *(_OWORD *)v62;
  }
  else
  {
    v64 = *v62;
    sub_10000F450(*v62, v62[1]);
    *(_QWORD *)v61 = v64;
    *(_QWORD *)(v61 + 8) = v63;
  }
  v65 = v50[9];
  v66 = (uint64_t *)(v48 + v65);
  v67 = (uint64_t *)(v49 + v65);
  v68 = *v67;
  v69 = v67[1];
  sub_10000F450(*v67, v69);
  *v66 = v68;
  v66[1] = v69;
  *(_BYTE *)(v48 + v50[10]) = *(_BYTE *)(v49 + v50[10]);
  v70 = v50[11];
  v71 = (void *)(v48 + v70);
  v72 = (const void *)(v49 + v70);
  if (v101(v49 + v70, 1, v5))
  {
    v73 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v71, (uint64_t)v72, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v71, 0, 1, v5);
  }
  v74 = v50[12];
  v75 = (_QWORD *)(v48 + v74);
  v76 = (_QWORD *)(v49 + v74);
  v77 = v76[1];
  *v75 = *v76;
  v75[1] = v77;
  v78 = *(int *)(a3 + 24);
  v79 = a1 + v78;
  v80 = a2 + v78;
  v81 = swift_bridgeObjectRetain(v77);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v6)(v79, v80, v5, v81);
  v82 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v6(v79 + v82[5], v80 + v82[5], v5);
  v83 = v82[6];
  v84 = v79 + v83;
  v85 = v80 + v83;
  v86 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
  v87 = v82[7];
  v88 = v79 + v87;
  v89 = (uint64_t *)(v80 + v87);
  v90 = v89[1];
  if (v90 >> 60 == 15)
  {
    *(_OWORD *)v88 = *(_OWORD *)v89;
  }
  else
  {
    v91 = *v89;
    sub_10000F450(*v89, v89[1]);
    *(_QWORD *)v88 = v91;
    *(_QWORD *)(v88 + 8) = v90;
  }
  v92 = v82[8];
  v93 = (uint64_t *)(v79 + v92);
  v94 = (uint64_t *)(v80 + v92);
  v95 = *v94;
  v96 = v94[1];
  sub_10000F450(*v94, v96);
  *v93 = v95;
  v93[1] = v96;
  *(_BYTE *)(v79 + v82[9]) = *(_BYTE *)(v80 + v82[9]);
  v97 = v82[10];
  v98 = v79 + v97;
  v99 = v80 + v97;
  *(_QWORD *)v98 = *(_QWORD *)v99;
  *(_BYTE *)(v98 + 8) = *(_BYTE *)(v99 + 8);
  return a1;
}

uint64_t sub_1001C64B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  int v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for CustodianRecord(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  v10 = v9[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = v9[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = v9[8];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  *v21 = *v22;
  v23 = v22[1];
  v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(a1 + v9[9]) = *(_QWORD *)(a2 + v9[9]);
  v25 = v9[10];
  v26 = (uint64_t *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v28 = *(_QWORD *)(a2 + v25 + 8);
  v131 = v7;
  if (*(_QWORD *)(a1 + v25 + 8) >> 60 == 15)
  {
    if (v28 >> 60 != 15)
    {
      v29 = *v27;
      sub_10000F450(*v27, v28);
      *v26 = v29;
      v26[1] = v28;
      v7 = v131;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v28 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v26);
LABEL_6:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_8;
  }
  v30 = *v27;
  sub_10000F450(*v27, v28);
  v31 = *v26;
  v32 = v26[1];
  *v26 = v30;
  v26[1] = v28;
  v7 = v131;
  sub_10000F494(v31, v32);
LABEL_8:
  v33 = v9[11];
  v34 = (uint64_t *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  v37 = v35[1];
  sub_10000F450(*v35, v37);
  v38 = *v34;
  v39 = v34[1];
  *v34 = v36;
  v34[1] = v37;
  sub_10000F494(v38, v39);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  v40 = v9[13];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  *v41 = *v42;
  v43 = v42[1];
  v44 = v41[1];
  v41[1] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease(v44);
  v45 = v9[14];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  *v46 = *v47;
  v48 = v47[1];
  v49 = v46[1];
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  v50 = v9[15];
  v51 = a1 + v50;
  v52 = (uint64_t *)(a2 + v50);
  v53 = *v52;
  *(_BYTE *)(v51 + 8) = *((_BYTE *)v52 + 8);
  *(_QWORD *)v51 = v53;
  v54 = v9[16];
  v55 = (void *)(a1 + v54);
  v56 = (const void *)(a2 + v54);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v37) = v57(a1 + v54, 1, v6);
  v58 = v57((uint64_t)v56, 1, v6);
  if ((_DWORD)v37)
  {
    if (!v58)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v55, v56, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v55, 0, 1, v6);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v55, v6);
LABEL_13:
    v59 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_14;
  }
  v8((uint64_t)v55, (uint64_t)v56, v6);
LABEL_14:
  v132 = a3;
  v60 = *(int *)(a3 + 20);
  v61 = a1 + v60;
  v62 = a2 + v60;
  v8(a1 + v60, a2 + v60, v6);
  v63 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v133 = v8;
  v8(v61 + v63[5], v62 + v63[5], v6);
  v64 = v63[6];
  v65 = (_QWORD *)(v61 + v64);
  v66 = (_QWORD *)(v62 + v64);
  *v65 = *v66;
  v67 = v66[1];
  v68 = v65[1];
  v65[1] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v63[7];
  v70 = (uint64_t *)(v61 + v69);
  v71 = (uint64_t *)(v62 + v69);
  v72 = *v71;
  v73 = v71[1];
  sub_10000F450(*v71, v73);
  v74 = *v70;
  v75 = v70[1];
  *v70 = v72;
  v70[1] = v73;
  sub_10000F494(v74, v75);
  v76 = v63[8];
  v77 = (uint64_t *)(v61 + v76);
  v78 = (uint64_t *)(v62 + v76);
  v79 = *(_QWORD *)(v62 + v76 + 8);
  if (*(_QWORD *)(v61 + v76 + 8) >> 60 == 15)
  {
    if (v79 >> 60 != 15)
    {
      v80 = *v78;
      sub_10000F450(v80, v79);
      *v77 = v80;
      v77[1] = v79;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v79 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v77);
LABEL_19:
    *(_OWORD *)v77 = *(_OWORD *)v78;
    goto LABEL_21;
  }
  v81 = *v78;
  sub_10000F450(v81, v79);
  v82 = *v77;
  v83 = v77[1];
  *v77 = v81;
  v77[1] = v79;
  sub_10000F494(v82, v83);
LABEL_21:
  v84 = v63[9];
  v85 = (uint64_t *)(v61 + v84);
  v86 = (uint64_t *)(v62 + v84);
  v87 = *v86;
  v88 = v86[1];
  sub_10000F450(*v86, v88);
  v89 = *v85;
  v90 = v85[1];
  *v85 = v87;
  v85[1] = v88;
  sub_10000F494(v89, v90);
  *(_BYTE *)(v61 + v63[10]) = *(_BYTE *)(v62 + v63[10]);
  v91 = v63[11];
  v92 = (void *)(v61 + v91);
  v93 = (const void *)(v62 + v91);
  LODWORD(v85) = v57(v61 + v91, 1, v6);
  v94 = v57((uint64_t)v93, 1, v6);
  if ((_DWORD)v85)
  {
    if (!v94)
    {
      (*(void (**)(void *, const void *, uint64_t))(v131 + 16))(v92, v93, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v92, 0, 1, v6);
LABEL_27:
      v96 = v133;
      goto LABEL_28;
    }
LABEL_26:
    v95 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_27;
  }
  if (v94)
  {
    (*(void (**)(void *, uint64_t))(v131 + 8))(v92, v6);
    goto LABEL_26;
  }
  v130 = (uint64_t)v92;
  v96 = v133;
  v133(v130, (uint64_t)v93, v6);
LABEL_28:
  v97 = v63[12];
  v98 = (_QWORD *)(v61 + v97);
  v99 = (_QWORD *)(v62 + v97);
  *v98 = *v99;
  v100 = v99[1];
  v101 = v98[1];
  v98[1] = v100;
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease(v101);
  v102 = *(int *)(v132 + 24);
  v103 = a1 + v102;
  v104 = a2 + v102;
  v96(a1 + v102, v104, v6);
  v105 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v96(v103 + v105[5], v104 + v105[5], v6);
  v106 = v105[6];
  v107 = v103 + v106;
  v108 = v104 + v106;
  v109 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 24))(v107, v108, v109);
  v110 = v105[7];
  v111 = (uint64_t *)(v103 + v110);
  v112 = (uint64_t *)(v104 + v110);
  v113 = *(_QWORD *)(v104 + v110 + 8);
  if (*(_QWORD *)(v103 + v110 + 8) >> 60 != 15)
  {
    if (v113 >> 60 != 15)
    {
      v115 = *v112;
      sub_10000F450(v115, v113);
      v116 = *v111;
      v117 = v111[1];
      *v111 = v115;
      v111[1] = v113;
      sub_10000F494(v116, v117);
      goto LABEL_35;
    }
    sub_100071D90((uint64_t)v111);
    goto LABEL_33;
  }
  if (v113 >> 60 == 15)
  {
LABEL_33:
    *(_OWORD *)v111 = *(_OWORD *)v112;
    goto LABEL_35;
  }
  v114 = *v112;
  sub_10000F450(v114, v113);
  *v111 = v114;
  v111[1] = v113;
LABEL_35:
  v118 = v105[8];
  v119 = (uint64_t *)(v103 + v118);
  v120 = (uint64_t *)(v104 + v118);
  v121 = *v120;
  v122 = v120[1];
  sub_10000F450(*v120, v122);
  v123 = *v119;
  v124 = v119[1];
  *v119 = v121;
  v119[1] = v122;
  sub_10000F494(v123, v124);
  *(_BYTE *)(v103 + v105[9]) = *(_BYTE *)(v104 + v105[9]);
  v125 = v105[10];
  v126 = v103 + v125;
  v127 = (uint64_t *)(v104 + v125);
  v128 = *v127;
  *(_BYTE *)(v126 + 8) = *((_BYTE *)v127 + 8);
  *(_QWORD *)v126 = v128;
  return a1;
}

char *sub_1001C6B34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for CustodianRecord(0);
  v8(&a1[v9[5]], &a2[v9[5]], v6);
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  *(_OWORD *)&a1[v9[8]] = *(_OWORD *)&a2[v9[8]];
  *(_QWORD *)&a1[v9[9]] = *(_QWORD *)&a2[v9[9]];
  *(_OWORD *)&a1[v9[10]] = *(_OWORD *)&a2[v9[10]];
  *(_OWORD *)&a1[v9[11]] = *(_OWORD *)&a2[v9[11]];
  a1[v9[12]] = a2[v9[12]];
  *(_OWORD *)&a1[v9[13]] = *(_OWORD *)&a2[v9[13]];
  *(_OWORD *)&a1[v9[14]] = *(_OWORD *)&a2[v9[14]];
  v10 = v9[15];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  v13 = v9[16];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v38 = v7;
  if (v16(&a2[v13], 1, v6))
  {
    v17 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  v39 = a3;
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v8(&a1[v18], &a2[v18], v6);
  v21 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v8(&v19[v21[5]], &v20[v21[5]], v6);
  *(_OWORD *)&v19[v21[6]] = *(_OWORD *)&v20[v21[6]];
  *(_OWORD *)&v19[v21[7]] = *(_OWORD *)&v20[v21[7]];
  *(_OWORD *)&v19[v21[8]] = *(_OWORD *)&v20[v21[8]];
  *(_OWORD *)&v19[v21[9]] = *(_OWORD *)&v20[v21[9]];
  v19[v21[10]] = v20[v21[10]];
  v22 = v21[11];
  v23 = &v19[v22];
  v24 = &v20[v22];
  if (v16(&v20[v22], 1, v6))
  {
    v25 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v8(v23, v24, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v23, 0, 1, v6);
  }
  *(_OWORD *)&v19[v21[12]] = *(_OWORD *)&v20[v21[12]];
  v26 = *(int *)(v39 + 24);
  v27 = &a1[v26];
  v28 = &a2[v26];
  v8(&a1[v26], v28, v6);
  v29 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v8(&v27[v29[5]], &v28[v29[5]], v6);
  v30 = v29[6];
  v31 = &v27[v30];
  v32 = &v28[v30];
  v33 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
  *(_OWORD *)&v27[v29[7]] = *(_OWORD *)&v28[v29[7]];
  *(_OWORD *)&v27[v29[8]] = *(_OWORD *)&v28[v29[8]];
  v27[v29[9]] = v28[v29[9]];
  v34 = v29[10];
  v35 = &v27[v34];
  v36 = &v28[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  v35[8] = v36[8];
  return a1;
}

uint64_t sub_1001C6E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  const void *v83;
  int v84;
  int v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for CustodianRecord(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  v10 = v9[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = v9[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  v22 = v9[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  v27 = v23[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease(v27);
  *(_QWORD *)(a1 + v9[9]) = *(_QWORD *)(a2 + v9[9]);
  v28 = v9[10];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(a1 + v28 + 8);
  if (v31 >> 60 == 15)
    goto LABEL_4;
  v32 = *(_QWORD *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    sub_100071D90(v29);
LABEL_4:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_6;
  }
  v33 = *(_QWORD *)v29;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v32;
  sub_10000F494(v33, v31);
LABEL_6:
  v34 = v9[11];
  v35 = *(_QWORD *)(a1 + v34);
  v36 = *(_QWORD *)(a1 + v34 + 8);
  *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
  sub_10000F494(v35, v36);
  *(_BYTE *)(a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
  v37 = v9[13];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = v9[14];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (uint64_t *)(a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = v9[15];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  v52 = v9[16];
  v53 = (void *)(a1 + v52);
  v54 = (const void *)(a2 + v52);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v56 = v55(a1 + v52, 1, v6);
  v57 = v55((uint64_t)v54, 1, v6);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v53, v54, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v53, 0, 1, v6);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v57)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v53, v6);
LABEL_11:
    v58 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    goto LABEL_12;
  }
  v8((uint64_t)v53, (uint64_t)v54, v6);
LABEL_12:
  v117 = a3;
  v59 = *(int *)(a3 + 20);
  v60 = a1 + v59;
  v61 = a2 + v59;
  v8(a1 + v59, a2 + v59, v6);
  v62 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v118 = v8;
  v8(v60 + v62[5], v61 + v62[5], v6);
  v63 = v62[6];
  v64 = (_QWORD *)(v60 + v63);
  v65 = (uint64_t *)(v61 + v63);
  v67 = *v65;
  v66 = v65[1];
  v68 = v64[1];
  *v64 = v67;
  v64[1] = v66;
  swift_bridgeObjectRelease(v68);
  v69 = v62[7];
  v70 = *(_QWORD *)(v60 + v69);
  v71 = *(_QWORD *)(v60 + v69 + 8);
  *(_OWORD *)(v60 + v69) = *(_OWORD *)(v61 + v69);
  sub_10000F494(v70, v71);
  v72 = v62[8];
  v73 = v60 + v72;
  v74 = v61 + v72;
  v75 = *(_QWORD *)(v60 + v72 + 8);
  v116 = v7;
  if (v75 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)v73 = *(_OWORD *)v74;
    goto LABEL_17;
  }
  v76 = *(_QWORD *)(v74 + 8);
  if (v76 >> 60 == 15)
  {
    sub_100071D90(v73);
    goto LABEL_15;
  }
  v77 = *(_QWORD *)v73;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_QWORD *)(v73 + 8) = v76;
  sub_10000F494(v77, v75);
LABEL_17:
  v78 = v62[9];
  v79 = *(_QWORD *)(v60 + v78);
  v80 = *(_QWORD *)(v60 + v78 + 8);
  *(_OWORD *)(v60 + v78) = *(_OWORD *)(v61 + v78);
  sub_10000F494(v79, v80);
  *(_BYTE *)(v60 + v62[10]) = *(_BYTE *)(v61 + v62[10]);
  v81 = v62[11];
  v82 = (void *)(v60 + v81);
  v83 = (const void *)(v61 + v81);
  v84 = v55(v60 + v81, 1, v6);
  v85 = v55((uint64_t)v83, 1, v6);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v82, v83, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v82, 0, 1, v6);
LABEL_23:
      v87 = v118;
      goto LABEL_24;
    }
LABEL_22:
    v86 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_23;
  }
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v116 + 8))(v82, v6);
    goto LABEL_22;
  }
  v115 = (uint64_t)v82;
  v87 = v118;
  v118(v115, (uint64_t)v83, v6);
LABEL_24:
  v88 = v62[12];
  v89 = (_QWORD *)(v60 + v88);
  v90 = (uint64_t *)(v61 + v88);
  v92 = *v90;
  v91 = v90[1];
  v93 = v89[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease(v93);
  v94 = *(int *)(v117 + 24);
  v95 = a1 + v94;
  v96 = a2 + v94;
  v87(a1 + v94, v96, v6);
  v97 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v87(v95 + v97[5], v96 + v97[5], v6);
  v98 = v97[6];
  v99 = v95 + v98;
  v100 = v96 + v98;
  v101 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 40))(v99, v100, v101);
  v102 = v97[7];
  v103 = (uint64_t *)(v95 + v102);
  v104 = (uint64_t *)(v96 + v102);
  v105 = *(_QWORD *)(v95 + v102 + 8);
  if (v105 >> 60 != 15)
  {
    v106 = v104[1];
    if (v106 >> 60 != 15)
    {
      v107 = *v103;
      *v103 = *v104;
      v103[1] = v106;
      sub_10000F494(v107, v105);
      goto LABEL_29;
    }
    sub_100071D90((uint64_t)v103);
  }
  *(_OWORD *)v103 = *(_OWORD *)v104;
LABEL_29:
  v108 = v97[8];
  v109 = *(_QWORD *)(v95 + v108);
  v110 = *(_QWORD *)(v95 + v108 + 8);
  *(_OWORD *)(v95 + v108) = *(_OWORD *)(v96 + v108);
  sub_10000F494(v109, v110);
  *(_BYTE *)(v95 + v97[9]) = *(_BYTE *)(v96 + v97[9]);
  v111 = v97[10];
  v112 = v95 + v111;
  v113 = v96 + v111;
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  return a1;
}

uint64_t sub_1001C73A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C73AC);
}

uint64_t sub_1001C73AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8708(a1, a2, a3, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001C73B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C73C4);
}

uint64_t sub_1001C73C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001C87B8(a1, a2, a3, a4, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001C73D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8864(a1, a2, a3, type metadata accessor for CustodianRecord);
}

char *sub_1001C73DC(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  __n128 v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v74;
  uint64_t v75;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v36);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v74 = *(_QWORD *)(v7 - 8);
    v8 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
    v8(a1, a2, v7);
    v9 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
    v8(&a1[v9[5]], &a2[v9[5]], v7);
    v10 = v9[6];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    *(_QWORD *)&a1[v9[7]] = *(_QWORD *)&a2[v9[7]];
    v14 = v9[8];
    v15 = (uint64_t *)&a1[v14];
    v16 = (uint64_t *)&a2[v14];
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain(v13);
    sub_10000F450(v17, v18);
    *v15 = v17;
    v15[1] = v18;
    a1[v9[9]] = a2[v9[9]];
    v75 = a3;
    v19 = *(int *)(a3 + 20);
    v20 = &a1[v19];
    v21 = &a2[v19];
    v8(&a1[v19], &a2[v19], v7);
    v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
    v8(&v20[v22[5]], &v21[v22[5]], v7);
    v23 = v22[6];
    v24 = &v20[v23];
    v25 = &v21[v23];
    v26 = *((_QWORD *)v25 + 1);
    *(_QWORD *)v24 = *(_QWORD *)v25;
    *((_QWORD *)v24 + 1) = v26;
    v27 = v22[7];
    v28 = (uint64_t *)&v20[v27];
    v29 = (uint64_t *)&v21[v27];
    v30 = *v29;
    v31 = v29[1];
    swift_bridgeObjectRetain(v26);
    sub_10000F450(v30, v31);
    *v28 = v30;
    v28[1] = v31;
    v32 = v22[8];
    v33 = &v20[v32];
    v34 = &v21[v32];
    v35 = *((_QWORD *)v34 + 1);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v37 = *(_QWORD *)v34;
      sub_10000F450(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
      *(_QWORD *)v33 = v37;
      *((_QWORD *)v33 + 1) = v35;
    }
    v38 = v22[9];
    v39 = (uint64_t *)&v20[v38];
    v40 = (uint64_t *)&v21[v38];
    v41 = *v40;
    v42 = v40[1];
    sub_10000F450(*v40, v42);
    *v39 = v41;
    v39[1] = v42;
    v20[v22[10]] = v21[v22[10]];
    v43 = v22[11];
    v44 = &v20[v43];
    v45 = &v21[v43];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(&v21[v43], 1, v7))
    {
      v46 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v8(v44, v45, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v44, 0, 1, v7);
    }
    v47 = v22[12];
    v48 = &v20[v47];
    v49 = &v21[v47];
    v50 = *((_QWORD *)v49 + 1);
    *(_QWORD *)v48 = *(_QWORD *)v49;
    *((_QWORD *)v48 + 1) = v50;
    v51 = *(int *)(v75 + 24);
    v52 = &a1[v51];
    v53 = &a2[v51];
    v54 = swift_bridgeObjectRetain(v50);
    ((void (*)(char *, char *, uint64_t, __n128))v8)(v52, v53, v7, v54);
    v55 = (int *)type metadata accessor for CustodianHealthRecord(0);
    v8(&v52[v55[5]], &v53[v55[5]], v7);
    v56 = v55[6];
    v57 = &v52[v56];
    v58 = &v53[v56];
    v59 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
    v60 = v55[7];
    v61 = &v52[v60];
    v62 = &v53[v60];
    v63 = *((_QWORD *)v62 + 1);
    if (v63 >> 60 == 15)
    {
      *(_OWORD *)v61 = *(_OWORD *)v62;
    }
    else
    {
      v64 = *(_QWORD *)v62;
      sub_10000F450(*(_QWORD *)v62, *((_QWORD *)v62 + 1));
      *(_QWORD *)v61 = v64;
      *((_QWORD *)v61 + 1) = v63;
    }
    v65 = v55[8];
    v66 = (uint64_t *)&v52[v65];
    v67 = (uint64_t *)&v53[v65];
    v68 = *v67;
    v69 = v67[1];
    sub_10000F450(*v67, v69);
    *v66 = v68;
    v66[1] = v69;
    v52[v55[9]] = v53[v55[9]];
    v70 = v55[10];
    v71 = &v52[v70];
    v72 = &v53[v70];
    *(_QWORD *)v71 = *(_QWORD *)v72;
    v71[8] = v72[8];
  }
  return a1;
}

uint64_t sub_1001C774C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v6(a1 + v7[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[6] + 8));
  sub_10000F494(*(_QWORD *)(a1 + v7[8]), *(_QWORD *)(a1 + v7[8] + 8));
  v8 = a1 + *(int *)(a2 + 20);
  v6(v8, v4);
  v9 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v6(v8 + v9[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[6] + 8));
  sub_10000F494(*(_QWORD *)(v8 + v9[7]), *(_QWORD *)(v8 + v9[7] + 8));
  v10 = (uint64_t *)(v8 + v9[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v8 + v9[9]), *(_QWORD *)(v8 + v9[9] + 8));
  v12 = v8 + v9[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4))
    v6(v12, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[12] + 8));
  v13 = a1 + *(int *)(a2 + 24);
  v6(v13, v4);
  v14 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v6(v13 + v14[5], v4);
  v15 = v13 + v14[6];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = (uint64_t *)(v13 + v14[7]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10000F494(*v17, v18);
  return sub_10000F494(*(_QWORD *)(v13 + v14[8]), *(_QWORD *)(v13 + v14[8] + 8));
}

uint64_t sub_1001C791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;

  v6 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  v13 = v8[8];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v12);
  sub_10000F450(v16, v17);
  *v14 = v16;
  v14[1] = v17;
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v73 = a3;
  v18 = *(int *)(a3 + 20);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v7(a1 + v18, a2 + v18, v6);
  v21 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v19 + v21[5], v20 + v21[5], v6);
  v22 = v21[6];
  v23 = (_QWORD *)(v19 + v22);
  v24 = (_QWORD *)(v20 + v22);
  v25 = v24[1];
  *v23 = *v24;
  v23[1] = v25;
  v26 = v21[7];
  v27 = (uint64_t *)(v19 + v26);
  v28 = (uint64_t *)(v20 + v26);
  v29 = *v28;
  v30 = v28[1];
  swift_bridgeObjectRetain(v25);
  sub_10000F450(v29, v30);
  *v27 = v29;
  v27[1] = v30;
  v31 = v21[8];
  v32 = v19 + v31;
  v33 = (uint64_t *)(v20 + v31);
  v34 = v33[1];
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v35 = *v33;
    sub_10000F450(*v33, v33[1]);
    *(_QWORD *)v32 = v35;
    *(_QWORD *)(v32 + 8) = v34;
  }
  v36 = v21[9];
  v37 = (uint64_t *)(v19 + v36);
  v38 = (uint64_t *)(v20 + v36);
  v39 = *v38;
  v40 = v38[1];
  sub_10000F450(*v38, v40);
  *v37 = v39;
  v37[1] = v40;
  *(_BYTE *)(v19 + v21[10]) = *(_BYTE *)(v20 + v21[10]);
  v41 = v21[11];
  v42 = (void *)(v19 + v41);
  v43 = (const void *)(v20 + v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v20 + v41, 1, v6))
  {
    v44 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v42, (uint64_t)v43, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v42, 0, 1, v6);
  }
  v45 = v21[12];
  v46 = (_QWORD *)(v19 + v45);
  v47 = (_QWORD *)(v20 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = *(int *)(v73 + 24);
  v50 = a1 + v49;
  v51 = a2 + v49;
  v52 = swift_bridgeObjectRetain(v48);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(v50, v51, v6, v52);
  v53 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v50 + v53[5], v51 + v53[5], v6);
  v54 = v53[6];
  v55 = v50 + v54;
  v56 = v51 + v54;
  v57 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v55, v56, v57);
  v58 = v53[7];
  v59 = v50 + v58;
  v60 = (uint64_t *)(v51 + v58);
  v61 = v60[1];
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)v59 = *(_OWORD *)v60;
  }
  else
  {
    v62 = *v60;
    sub_10000F450(*v60, v60[1]);
    *(_QWORD *)v59 = v62;
    *(_QWORD *)(v59 + 8) = v61;
  }
  v63 = v53[8];
  v64 = (uint64_t *)(v50 + v63);
  v65 = (uint64_t *)(v51 + v63);
  v66 = *v65;
  v67 = v65[1];
  sub_10000F450(*v65, v67);
  *v64 = v66;
  v64[1] = v67;
  *(_BYTE *)(v50 + v53[9]) = *(_BYTE *)(v51 + v53[9]);
  v68 = v53[10];
  v69 = v50 + v68;
  v70 = v51 + v68;
  *(_QWORD *)v69 = *(_QWORD *)v70;
  *(_BYTE *)(v69 + 8) = *(_BYTE *)(v70 + 8);
  return a1;
}

uint64_t sub_1001C7C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  const void *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  int v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;

  v6 = type metadata accessor for UUID(0);
  v95 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 24);
  v7(a1, a2, v6);
  v8 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v7(a1 + v8[5], a2 + v8[5], v6);
  v9 = v8[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + v8[7]) = *(_QWORD *)(a2 + v8[7]);
  v14 = v8[8];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10000F450(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10000F494(v19, v20);
  *(_BYTE *)(a1 + v8[9]) = *(_BYTE *)(a2 + v8[9]);
  v93 = a3;
  v21 = *(int *)(a3 + 20);
  v22 = a1 + v21;
  v23 = a2 + v21;
  v7(a1 + v21, a2 + v21, v6);
  v24 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v94 = v7;
  v7(v22 + v24[5], v23 + v24[5], v6);
  v25 = v24[6];
  v26 = (_QWORD *)(v22 + v25);
  v27 = (_QWORD *)(v23 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v29 = v26[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  v30 = v24[7];
  v31 = (uint64_t *)(v22 + v30);
  v32 = (uint64_t *)(v23 + v30);
  v33 = *v32;
  v34 = v32[1];
  sub_10000F450(*v32, v34);
  v35 = *v31;
  v36 = v31[1];
  *v31 = v33;
  v31[1] = v34;
  sub_10000F494(v35, v36);
  v37 = v24[8];
  v38 = (uint64_t *)(v22 + v37);
  v39 = (uint64_t *)(v23 + v37);
  v40 = *(_QWORD *)(v23 + v37 + 8);
  if (*(_QWORD *)(v22 + v37 + 8) >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      v41 = *v39;
      sub_10000F450(v41, v40);
      *v38 = v41;
      v38[1] = v40;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v40 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v38);
LABEL_6:
    *(_OWORD *)v38 = *(_OWORD *)v39;
    goto LABEL_8;
  }
  v42 = *v39;
  sub_10000F450(v42, v40);
  v43 = *v38;
  v44 = v38[1];
  *v38 = v42;
  v38[1] = v40;
  sub_10000F494(v43, v44);
LABEL_8:
  v45 = v24[9];
  v46 = (uint64_t *)(v22 + v45);
  v47 = (uint64_t *)(v23 + v45);
  v48 = *v47;
  v49 = v47[1];
  sub_10000F450(*v47, v49);
  v50 = *v46;
  v51 = v46[1];
  *v46 = v48;
  v46[1] = v49;
  sub_10000F494(v50, v51);
  *(_BYTE *)(v22 + v24[10]) = *(_BYTE *)(v23 + v24[10]);
  v52 = v24[11];
  v53 = (void *)(v22 + v52);
  v54 = (const void *)(v23 + v52);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v95 + 48);
  LODWORD(v46) = v55(v22 + v52, 1, v6);
  v56 = v55((uint64_t)v54, 1, v6);
  if ((_DWORD)v46)
  {
    if (!v56)
    {
      (*(void (**)(void *, const void *, uint64_t))(v95 + 16))(v53, v54, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v53, 0, 1, v6);
LABEL_14:
      v58 = v94;
      goto LABEL_15;
    }
LABEL_13:
    v57 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    goto LABEL_14;
  }
  if (v56)
  {
    (*(void (**)(void *, uint64_t))(v95 + 8))(v53, v6);
    goto LABEL_13;
  }
  v92 = (uint64_t)v53;
  v58 = v94;
  v94(v92, (uint64_t)v54, v6);
LABEL_15:
  v59 = v24[12];
  v60 = (_QWORD *)(v22 + v59);
  v61 = (_QWORD *)(v23 + v59);
  *v60 = *v61;
  v62 = v61[1];
  v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  v64 = *(int *)(v93 + 24);
  v65 = a1 + v64;
  v66 = a2 + v64;
  v58(a1 + v64, v66, v6);
  v67 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v58(v65 + v67[5], v66 + v67[5], v6);
  v68 = v67[6];
  v69 = v65 + v68;
  v70 = v66 + v68;
  v71 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 24))(v69, v70, v71);
  v72 = v67[7];
  v73 = (uint64_t *)(v65 + v72);
  v74 = (uint64_t *)(v66 + v72);
  v75 = *(_QWORD *)(v66 + v72 + 8);
  if (*(_QWORD *)(v65 + v72 + 8) >> 60 != 15)
  {
    if (v75 >> 60 != 15)
    {
      v77 = *v74;
      sub_10000F450(v77, v75);
      v78 = *v73;
      v79 = v73[1];
      *v73 = v77;
      v73[1] = v75;
      sub_10000F494(v78, v79);
      goto LABEL_22;
    }
    sub_100071D90((uint64_t)v73);
    goto LABEL_20;
  }
  if (v75 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v73 = *(_OWORD *)v74;
    goto LABEL_22;
  }
  v76 = *v74;
  sub_10000F450(v76, v75);
  *v73 = v76;
  v73[1] = v75;
LABEL_22:
  v80 = v67[8];
  v81 = (uint64_t *)(v65 + v80);
  v82 = (uint64_t *)(v66 + v80);
  v83 = *v82;
  v84 = v82[1];
  sub_10000F450(*v82, v84);
  v85 = *v81;
  v86 = v81[1];
  *v81 = v83;
  v81[1] = v84;
  sub_10000F494(v85, v86);
  *(_BYTE *)(v65 + v67[9]) = *(_BYTE *)(v66 + v67[9]);
  v87 = v67[10];
  v88 = v65 + v87;
  v89 = (uint64_t *)(v66 + v87);
  v90 = *v89;
  *(_BYTE *)(v88 + 8) = *((_BYTE *)v89 + 8);
  *(_QWORD *)v88 = v90;
  return a1;
}

char *sub_1001C80E0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v8(&a1[v9[5]], &a2[v9[5]], v6);
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_QWORD *)&a1[v9[7]] = *(_QWORD *)&a2[v9[7]];
  *(_OWORD *)&a1[v9[8]] = *(_OWORD *)&a2[v9[8]];
  a1[v9[9]] = a2[v9[9]];
  v30 = a3;
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v8(&a1[v10], &a2[v10], v6);
  v13 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v8(&v11[v13[5]], &v12[v13[5]], v6);
  *(_OWORD *)&v11[v13[6]] = *(_OWORD *)&v12[v13[6]];
  *(_OWORD *)&v11[v13[7]] = *(_OWORD *)&v12[v13[7]];
  *(_OWORD *)&v11[v13[8]] = *(_OWORD *)&v12[v13[8]];
  *(_OWORD *)&v11[v13[9]] = *(_OWORD *)&v12[v13[9]];
  v11[v13[10]] = v12[v13[10]];
  v14 = v13[11];
  v15 = &v11[v14];
  v16 = &v12[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&v12[v14], 1, v6))
  {
    v17 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v15, v16, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  *(_OWORD *)&v11[v13[12]] = *(_OWORD *)&v12[v13[12]];
  v18 = *(int *)(v30 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  v8(&a1[v18], v20, v6);
  v21 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v8(&v19[v21[5]], &v20[v21[5]], v6);
  v22 = v21[6];
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
  *(_OWORD *)&v19[v21[7]] = *(_OWORD *)&v20[v21[7]];
  *(_OWORD *)&v19[v21[8]] = *(_OWORD *)&v20[v21[8]];
  v19[v21[9]] = v20[v21[9]];
  v26 = v21[10];
  v27 = &v19[v26];
  v28 = &v20[v26];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t sub_1001C8348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  int v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v8(a1 + v9[5], a2 + v9[5], v6);
  v10 = v9[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + v9[7]) = *(_QWORD *)(a2 + v9[7]);
  v16 = v9[8];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_10000F494(v17, v18);
  *(_BYTE *)(a1 + v9[9]) = *(_BYTE *)(a2 + v9[9]);
  v79 = a3;
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v8(a1 + v19, a2 + v19, v6);
  v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v80 = v8;
  v8(v20 + v22[5], v21 + v22[5], v6);
  v23 = v22[6];
  v24 = (_QWORD *)(v20 + v23);
  v25 = (uint64_t *)(v21 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  v29 = v22[7];
  v30 = *(_QWORD *)(v20 + v29);
  v31 = *(_QWORD *)(v20 + v29 + 8);
  *(_OWORD *)(v20 + v29) = *(_OWORD *)(v21 + v29);
  sub_10000F494(v30, v31);
  v32 = v22[8];
  v33 = v20 + v32;
  v34 = v21 + v32;
  v35 = *(_QWORD *)(v20 + v32 + 8);
  v78 = a1;
  if (v35 >> 60 == 15)
    goto LABEL_4;
  v36 = *(_QWORD *)(v34 + 8);
  if (v36 >> 60 == 15)
  {
    sub_100071D90(v33);
LABEL_4:
    *(_OWORD *)v33 = *(_OWORD *)v34;
    goto LABEL_6;
  }
  v37 = *(_QWORD *)v33;
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *(_QWORD *)(v33 + 8) = v36;
  sub_10000F494(v37, v35);
LABEL_6:
  v38 = v22[9];
  v39 = *(_QWORD *)(v20 + v38);
  v40 = *(_QWORD *)(v20 + v38 + 8);
  *(_OWORD *)(v20 + v38) = *(_OWORD *)(v21 + v38);
  sub_10000F494(v39, v40);
  *(_BYTE *)(v20 + v22[10]) = *(_BYTE *)(v21 + v22[10]);
  v41 = v22[11];
  v42 = (void *)(v20 + v41);
  v43 = (const void *)(v21 + v41);
  v44 = v7;
  v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v46 = v45(v20 + v41, 1, v6);
  v47 = v45((uint64_t)v43, 1, v6);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v44 + 32))(v42, v43, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v42, 0, 1, v6);
LABEL_12:
      v49 = v80;
      goto LABEL_13;
    }
LABEL_11:
    v48 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_12;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v44 + 8))(v42, v6);
    goto LABEL_11;
  }
  v77 = (uint64_t)v42;
  v49 = v80;
  v80(v77, (uint64_t)v43, v6);
LABEL_13:
  v50 = v22[12];
  v51 = (_QWORD *)(v20 + v50);
  v52 = (uint64_t *)(v21 + v50);
  v54 = *v52;
  v53 = v52[1];
  v55 = v51[1];
  *v51 = v54;
  v51[1] = v53;
  swift_bridgeObjectRelease(v55);
  v56 = *(int *)(v79 + 24);
  v57 = v78 + v56;
  v58 = a2 + v56;
  v49(v78 + v56, v58, v6);
  v59 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v49(v57 + v59[5], v58 + v59[5], v6);
  v60 = v59[6];
  v61 = v57 + v60;
  v62 = v58 + v60;
  v63 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v61, v62, v63);
  v64 = v59[7];
  v65 = (uint64_t *)(v57 + v64);
  v66 = (uint64_t *)(v58 + v64);
  v67 = *(_QWORD *)(v57 + v64 + 8);
  if (v67 >> 60 != 15)
  {
    v68 = v66[1];
    if (v68 >> 60 != 15)
    {
      v69 = *v65;
      *v65 = *v66;
      v65[1] = v68;
      sub_10000F494(v69, v67);
      goto LABEL_18;
    }
    sub_100071D90((uint64_t)v65);
  }
  *(_OWORD *)v65 = *(_OWORD *)v66;
LABEL_18:
  v70 = v59[8];
  v71 = *(_QWORD *)(v57 + v70);
  v72 = *(_QWORD *)(v57 + v70 + 8);
  *(_OWORD *)(v57 + v70) = *(_OWORD *)(v58 + v70);
  sub_10000F494(v71, v72);
  *(_BYTE *)(v57 + v59[9]) = *(_BYTE *)(v58 + v59[9]);
  v73 = v59[10];
  v74 = v57 + v73;
  v75 = v58 + v73;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  return v78;
}

uint64_t sub_1001C86F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C86FC);
}

uint64_t sub_1001C86FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8708(a1, a2, a3, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001C8708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
  {
    v9 = v7;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v11 = a1;
  }
  else
  {
    v12 = type metadata accessor for CustodianRecoveryInfoRecord(0);
    v13 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v13 + 84) == (_DWORD)a2)
    {
      v9 = v12;
      v14 = *(int *)(a3 + 20);
    }
    else
    {
      v9 = type metadata accessor for CustodianHealthRecord(0);
      v13 = *(_QWORD *)(v9 - 8);
      v14 = *(int *)(a3 + 24);
    }
    v11 = a1 + v14;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  }
  return v10(v11, a2, v9);
}

uint64_t sub_1001C87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C87AC);
}

uint64_t sub_1001C87AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001C87B8(a1, a2, a3, a4, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001C87B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a5(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v13 = a1;
  }
  else
  {
    v14 = type metadata accessor for CustodianRecoveryInfoRecord(0);
    v15 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a3)
    {
      v11 = v14;
      v16 = *(int *)(a4 + 20);
    }
    else
    {
      v11 = type metadata accessor for CustodianHealthRecord(0);
      v15 = *(_QWORD *)(v11 - 8);
      v16 = *(int *)(a4 + 24);
    }
    v13 = a1 + v16;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  return v12(v13, a2, a2, v11);
}

uint64_t sub_1001C8858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8864(a1, a2, a3, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001C8864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[3];

  result = a4(319);
  if (v6 <= 0x3F)
  {
    v9[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CustodianRecoveryInfoRecord(319);
    if (v7 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for CustodianHealthRecord(319);
      if (v8 <= 0x3F)
      {
        v9[2] = *(_QWORD *)(result - 8) + 64;
        swift_initStructMetadata(a1, 256, 3, v9, a1 + 16);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1001C895C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[5];

  v6 = v5;
  v57 = a1;
  v56 = type metadata accessor for InheritanceInvitationMessage(0);
  __chkstk_darwin(v56, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler__accountStore, v14);
  Dependency.wrappedValue.getter(v60, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v19 = sub_10000732C(v60, v60[3]);
  v20 = *v19;
  v21 = *(void **)(*v19 + 16);
  v22 = objc_msgSend(v21, "aa_primaryAppleAccount");
  if (v22
    && (v23 = v22,
        v24 = objc_msgSend(v22, "aa_altDSID"),
        v25 = objc_msgSend(v21, "aa_authKitAccountForAltDSID:", v24),
        v23,
        v24,
        v25)
    && (v26 = objc_msgSend(*(id *)(v20 + 24), "canBeBeneficiaryForAccount:", v25), v25, v26))
  {
    v27 = swift_allocObject(&unk_10026E830, 24, 7);
    swift_weakInit(v27 + 16, v6);
    v28 = (_QWORD *)swift_allocObject(&unk_10026E858, 40, 7);
    v28[2] = a4;
    v28[3] = a5;
    v28[4] = v27;
    sub_10000E1C0(a4, a5);
    swift_retain(v27);
    sub_1001C937C(v57, a2, a3, (uint64_t)sub_1001CB8A0, (uint64_t)v28);
    swift_release(v27);
    swift_release(v28);
  }
  else
  {
    v55 = v6;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89F0);
    v30 = sub_100027FE8(v57, (uint64_t)v13, type metadata accessor for InheritanceInvitationMessage);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(12, -1);
      v54 = a5;
      v34 = (uint8_t *)v33;
      v35 = swift_slowAlloc(32, -1);
      v53 = a3;
      v36 = v35;
      v59 = v35;
      *(_DWORD *)v34 = 136315138;
      v51 = a2;
      v52 = a4;
      v37 = v56;
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      v41 = v37;
      v43 = v42;
      v58 = sub_1001DEF4C(v40, v42, &v59);
      a2 = v51;
      a4 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v43);
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationMessage);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "User is not eligible to be a beneficiary, replying rejected for beneficiaryID: %s", v34, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      v44 = v36;
      a3 = v53;
      swift_slowDealloc(v44, -1, -1);
      v45 = v34;
      a5 = v54;
      swift_slowDealloc(v45, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationMessage);

      v41 = v56;
    }
    v46 = sub_10000732C((_QWORD *)(v55 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger), *(_QWORD *)(v55 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger + 24));
    v47 = v57 + *(int *)(v41 + 20);
    v48 = *v46;
    sub_10000E1C0(a4, a5);
    sub_10015449C(a2, a3, v47, 0, v48, a4, a5, v49);
    sub_10000D98C(a4, a5);
  }
  return sub_100006F58(v60);
}

uint64_t sub_1001C8DB8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t Strong;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  uint64_t v63[5];
  uint64_t v64;
  _BYTE v65[16];

  v8 = type metadata accessor for BenefactorInfoRecord(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v59 - v14;
  v16 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001633A4(a1, (uint64_t)v19);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(12, -1);
      v62 = a3;
      v26 = (uint8_t *)v25;
      v27 = swift_slowAlloc(32, -1);
      v63[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v64 = v20;
      swift_errorRetain(v20);
      v28 = sub_1000080B4(&qword_10028E850);
      v29 = String.init<A>(describing:)(&v64, v28);
      v31 = v30;
      v64 = sub_1001DEF4C(v29, v30, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to persist BenefactorInfoRecord: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      if (!a2)
        return swift_errorRelease(v20);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);

      if (!a2)
        return swift_errorRelease(v20);
    }
    swift_errorRetain(v20);
    a2(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A89F0);
  v34 = sub_100027FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for BenefactorInfoRecord);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(12, -1);
    v60 = a4;
    v38 = (uint8_t *)v37;
    v39 = swift_slowAlloc(32, -1);
    v59 = v33;
    v40 = v39;
    v62 = a3;
    v63[0] = v39;
    v61 = a2;
    *(_DWORD *)v38 = 136315138;
    v41 = sub_10016FCC4();
    v43 = v42;
    v64 = sub_1001DEF4C(v41, v42, v63);
    a2 = v61;
    a3 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65);
    swift_bridgeObjectRelease(v43);
    sub_100028388((uint64_t)v12, type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved Benefactor to storage - %s", v38, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    v44 = v38;
    a4 = v60;
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v12, type metadata accessor for BenefactorInfoRecord);
  }

  if (*(_QWORD *)&v15[*(int *)(v8 + 24)] == 2)
  {
    v47 = a4 + 16;
    v48 = Logger.logObject.getter(v46);
    v49 = static os_log_type_t.info.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Status is accepted. Responding to invitation.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    swift_beginAccess(v47, &v64, 0, 0);
    Strong = swift_weakLoadStrong(v47);
    if (Strong)
    {
      v52 = Strong;
      sub_100006CA4(Strong + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger, (uint64_t)v63);
      swift_release(v52);
      v53 = sub_10000732C(v63, v63[3]);
      v54 = &v15[*(int *)(v8 + 20)];
      v55 = *(_QWORD *)v54;
      v56 = *((_QWORD *)v54 + 1);
      v57 = *v53;
      sub_10000E1C0((uint64_t)a2, a3);
      v58 = swift_bridgeObjectRetain(v56);
      sub_10015449C(v55, v56, v15, 1, v57, a2, a3, v58);
      sub_10000D98C((uint64_t)a2, a3);
      swift_bridgeObjectRelease(v56);
      sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
      return sub_100006F58(v63);
    }
  }
  else if (a2)
  {
    a2(0);
  }
  return sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1001C937C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = v5;
  v60 = a5;
  v57 = a4;
  v58 = a3;
  v56 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v59 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InheritanceInvitationMessage(0);
  v54 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v54 + 64);
  v15 = __chkstk_darwin(v12, v14);
  v55 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v50 - v17;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v19 = type metadata accessor for Logger(0);
  sub_100005288(v19, (uint64_t)qword_1002A89F0);
  v20 = sub_100027FE8(a1, (uint64_t)v18, type metadata accessor for InheritanceInvitationMessage);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v61 = v9;
  if (v23)
  {
    v24 = swift_slowAlloc(12, -1);
    v53 = v12;
    v25 = (uint8_t *)v24;
    v26 = swift_slowAlloc(32, -1);
    v51 = v5;
    v27 = v26;
    v63 = v26;
    *(_DWORD *)v25 = 136315138;
    v52 = a1;
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v8, v28);
    v31 = v30;
    v62 = sub_1001DEF4C(v29, v30, &v63);
    a1 = v52;
    v9 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v18, type metadata accessor for InheritanceInvitationMessage);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Checking for existing BenefactorInfoRecord with beneficiaryID - %s", v25, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    v6 = v51;
    swift_slowDealloc(v32, -1, -1);
    v33 = v25;
    v12 = v53;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v18, type metadata accessor for InheritanceInvitationMessage);
  }

  sub_10000732C((_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
  v34 = a1 + *(int *)(v12 + 20);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v36 = (uint64_t)v59;
  v37 = v8;
  v35(v59, v34, v8);
  v38 = swift_allocObject(&unk_10026E830, 24, 7);
  swift_weakInit(v38 + 16, v6);
  v39 = v55;
  sub_100027FE8(a1, v55, type metadata accessor for InheritanceInvitationMessage);
  v40 = *(unsigned __int8 *)(v54 + 80);
  v41 = (v40 + 24) & ~v40;
  v42 = (v13 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_10026E880, v43 + 16, v40 | 7);
  *(_QWORD *)(v44 + 16) = v38;
  sub_10003B730(v39, v44 + v41, type metadata accessor for InheritanceInvitationMessage);
  v45 = (_QWORD *)(v44 + v42);
  v46 = v58;
  *v45 = v56;
  v45[1] = v46;
  v47 = (_QWORD *)(v44 + v43);
  v48 = v60;
  *v47 = v57;
  v47[1] = v48;
  swift_retain(v38);
  swift_bridgeObjectRetain(v46);
  swift_retain(v48);
  sub_1000CC928(v36, (uint64_t)sub_1001CB97C, v44);
  swift_release(v44);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v36, v37);
  return swift_release(v38);
}

uint64_t sub_1001C9768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController));
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger));
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager));
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messageUtil));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001C97FC()
{
  return type metadata accessor for InheritanceInvitationHandler(0);
}

uint64_t type metadata accessor for InheritanceInvitationHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100297D68;
  if (!qword_100297D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInvitationHandler);
  return result;
}

void sub_1001C9840(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    v4[3] = "(";
    v4[4] = "(";
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1001C98BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  void *v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD);
  uint64_t v86[3];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v85 = a6;
  v81 = a4;
  v82 = a5;
  v80 = a3;
  v83 = a2;
  v9 = type metadata accessor for BenefactorInfoRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v79 - v15;
  v17 = type metadata accessor for InheritanceInvitationMessage(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  v21 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (uint64_t *)((char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v24, v27);
  v29 = (uint64_t *)((char *)&v79 - v28);
  sub_1001633A4(a1, (uint64_t)&v79 - v28);
  v84 = v22;
  if (swift_getEnumCaseMultiPayload(v29, v22) == 1)
  {
    v86[0] = *v29;
    v30 = v86[0];
    swift_errorRetain(v86[0]);
    v31 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v33 = v32;
    if ((swift_dynamicCast(&v88, v86, v31, v32, 6) & 1) != 0)
    {
      v79 = a7;
      v34 = (void *)v88;
      v86[0] = v88;
      v87 = 3;
      v35 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v36 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v88, &v87, v35, v33, v36);
      v37 = (void *)v88;
      v87 = v88;
      v38 = static _BridgedStoredNSError.== infix(_:_:)(v86, &v87, v33, v36);

      if ((v38 & 1) != 0)
      {
        v39 = v83 + 16;
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v40 = type metadata accessor for Logger(0);
        v41 = sub_100005288(v40, (uint64_t)qword_1002A89F0);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.info.getter(v42);
        v44 = os_log_type_enabled(v42, v43);
        v45 = v79;
        if (v44)
        {
          v46 = v34;
          v47 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "No existing record found.", v47, 2u);
          v48 = v47;
          v34 = v46;
          swift_slowDealloc(v48, -1, -1);
        }

        swift_beginAccess(v39, v86, 0, 0);
        Strong = swift_weakLoadStrong(v39);
        if (Strong)
        {
          v50 = Strong;
          v51 = swift_allocObject(&unk_10026E830, 24, 7);
          swift_weakInit(v51 + 16, v50);
          sub_100027FE8(v80, (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceInvitationMessage);
          v52 = *(unsigned __int8 *)(v18 + 80);
          v53 = v34;
          v54 = (v52 + 56) & ~v52;
          v55 = (_QWORD *)swift_allocObject(&unk_10026E8A8, v54 + v19, v52 | 7);
          v56 = v85;
          v55[2] = v51;
          v55[3] = v56;
          v57 = v81;
          v55[4] = v45;
          v55[5] = v57;
          v58 = (uint64_t)v55 + v54;
          v59 = v82;
          v55[6] = v82;
          sub_10003B730((uint64_t)v21, v58, type metadata accessor for InheritanceInvitationMessage);
          swift_retain(v51);
          swift_retain(v45);
          swift_bridgeObjectRetain(v59);
          sub_1000D0C00((uint64_t)sub_1001CBA90, (uint64_t)v55);
          swift_release(v51);
          swift_release(v55);
          swift_errorRelease(v30);
          swift_release(v50);

        }
        else
        {
          swift_errorRelease(v30);

        }
        return;
      }

    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v70 = type metadata accessor for Logger(0);
    sub_100005288(v70, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v30);
    v71 = swift_errorRetain(v30);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = swift_slowAlloc(32, -1);
      v86[0] = v75;
      *(_DWORD *)v74 = 136315138;
      v88 = v30;
      swift_errorRetain(v30);
      v76 = String.init<A>(describing:)(&v88, v31);
      v78 = v77;
      v88 = sub_1001DEF4C(v76, v77, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v78);
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to fetch BenefactorInfoRecord: %s", v74, 0xCu);
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }

    *v26 = v30;
    swift_storeEnumTagMultiPayload(v26, v84, 1);
    swift_errorRetain(v30);
    v85(v26);
    swift_errorRelease(v30);
    sub_100004934((uint64_t)v26, (uint64_t *)&unk_10028FA40);
  }
  else
  {
    sub_10003B730((uint64_t)v29, (uint64_t)v16, type metadata accessor for BenefactorInfoRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v60 = type metadata accessor for Logger(0);
    sub_100005288(v60, (uint64_t)qword_1002A89F0);
    v61 = sub_100027FE8((uint64_t)v16, (uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.info.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v79 = a7;
      v66 = v65;
      v86[0] = v65;
      *(_DWORD *)v64 = 136315138;
      v67 = sub_10016FCC4();
      v69 = v68;
      v88 = sub_1001DEF4C(v67, v68, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v69);
      sub_100028388((uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Found an existing BenefactorInfoRecord - %s", v64, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
    }

    sub_100027FE8((uint64_t)v16, (uint64_t)v26, type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload(v26, v84, 0);
    v85(v26);
    sub_100004934((uint64_t)v26, (uint64_t *)&unk_10028FA40);
    sub_100028388((uint64_t)v16, type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1001CA05C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), void (*a5)(uint64_t *), uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t Strong;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t *);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void (*v94)(uint64_t *);
  uint64_t v95;
  void (**v96)(uint64_t *);
  unint64_t v97;
  void (*v98)(uint64_t *);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, unint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t);
  void (*v103)(uint64_t *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t *);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t *);
  void (*v121)(uint64_t *);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE v130[32];

  v122 = a8;
  v124 = a6;
  v125 = a7;
  v118 = type metadata accessor for BenefactorInfoRecord(0);
  v115 = *(_QWORD *)(v118 - 8);
  v13 = *(_QWORD *)(v115 + 64);
  v15 = __chkstk_darwin(v118, v14);
  v116 = (uint64_t)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15, v16);
  v117 = (uint64_t)&v112 - v18;
  v20 = __chkstk_darwin(v17, v19);
  v114 = (uint64_t)&v112 - v21;
  __chkstk_darwin(v20, v22);
  v123 = (uint64_t)&v112 - v23;
  v24 = type metadata accessor for InheritanceInvitationMessage(0);
  v112 = *(_QWORD *)(v24 - 8);
  v25 = *(_QWORD *)(v112 + 64);
  __chkstk_darwin(v24, v26);
  v113 = (uint64_t)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  a3 += 16;
  swift_beginAccess(a3, v130, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    type metadata accessor for InheritanceError(0);
    v42 = v41;
    v129 = 14;
    v43 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v44 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(v126, &v129, v43, v42, v44);
    *v30 = v126[0];
    swift_storeEnumTagMultiPayload(v30, v27, 1);
    a4(v30);
    return sub_100004934((uint64_t)v30, (uint64_t *)&unk_10028FA40);
  }
  v119 = Strong;
  v120 = a4;
  v121 = a5;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v45 = type metadata accessor for Logger(0);
    sub_100005288(v45, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v46 = swift_errorRetain(a1);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v126[0] = v50;
      *(_DWORD *)v49 = 136315138;
      v129 = a1;
      swift_errorRetain(a1);
      v51 = sub_1000080B4(&qword_10028E850);
      v52 = String.init<A>(describing:)(&v129, v51);
      v54 = v53;
      v129 = sub_1001DEF4C(v52, v53, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130);
      swift_bridgeObjectRelease(v54);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to fetch checkManateeStorageAvailability: %s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
    }

    v83 = v120;
    *v30 = a1;
    swift_storeEnumTagMultiPayload(v30, v27, 1);
    swift_errorRetain(a1);
    v83(v30);
    sub_10006AEB4(a1, 1);
    swift_release(v119);
    return sub_100004934((uint64_t)v30, (uint64_t *)&unk_10028FA40);
  }
  v32 = a1 & 1;
  if ((objc_msgSend((id)objc_opt_self(AAUrlBagHelper), "isLCInviteAcceptanceEnabled") & 1) != 0)
  {
    v34 = v124;
    v33 = v125;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A89F0);
    v36 = swift_bridgeObjectRetain_n(v33, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v126[0] = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain(v33);
      v129 = sub_1001DEF4C(v34, v33, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130);
      swift_bridgeObjectRelease_n(v33, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "LCInvite: Feature flag is enabled. Checking if handle:%s is a family member.", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 2);
    }
    v85 = v113;
    sub_100027FE8(v122, v113, type metadata accessor for InheritanceInvitationMessage);
    v86 = *(unsigned __int8 *)(v112 + 80);
    v87 = (v86 + 17) & ~v86;
    v88 = (v25 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
    v89 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
    v90 = (v89 + 15) & 0xFFFFFFFFFFFFFFF8;
    v91 = swift_allocObject(&unk_10026E8F8, v90 + 16, v86 | 7);
    *(_BYTE *)(v91 + 16) = v32;
    sub_10003B730(v85, v91 + v87, type metadata accessor for InheritanceInvitationMessage);
    v92 = (uint64_t *)(v91 + v88);
    *v92 = v34;
    v92[1] = v33;
    v93 = v34;
    v95 = v119;
    v94 = v120;
    *(_QWORD *)(v91 + v89) = v119;
    v96 = (void (**)(uint64_t *))(v91 + v90);
    v97 = v33;
    v98 = v121;
    *v96 = v94;
    v96[1] = v98;
    sub_100006CA4(v95 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager, (uint64_t)v126);
    v99 = v127;
    v100 = v128;
    sub_10000732C(v126, v127);
    v101 = swift_allocObject(&unk_10026E920, 32, 7);
    *(_QWORD *)(v101 + 16) = sub_1001CBBD0;
    *(_QWORD *)(v101 + 24) = v91;
    v102 = *(void (**)(uint64_t, unint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, uint64_t))(v100 + 8);
    swift_bridgeObjectRetain(v97);
    swift_retain(v95);
    swift_retain(v98);
    swift_retain(v91);
    v102(v93, v97, sub_1001CBC68, v101, v99, v100);
    swift_release(v101);
    sub_100006F58(v126);
    swift_release(v91);
    return swift_release(v95);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v55 = type metadata accessor for Logger(0);
    v56 = sub_100005288(v55, (uint64_t)qword_1002A89F0);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.info.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "LCInvite: Feature flag not enabled", v59, 2u);
      swift_slowDealloc(v59, -1, -1);
    }

    if (v32)
      v60 = 2;
    else
      v60 = 1;
    v61 = v122 + *(int *)(v24 + 20);
    v62 = (int *)v118;
    v63 = v32;
    v64 = v123;
    v65 = v123 + *(int *)(v118 + 28);
    v66 = type metadata accessor for UUID(0);
    v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 16);
    v67(v65, v61, v66);
    v67(v64, v65, v66);
    v68 = (uint64_t *)(v64 + v62[5]);
    v69 = v125;
    *v68 = v124;
    v68[1] = v69;
    *(_QWORD *)(v64 + v62[6]) = v60;
    *(_OWORD *)(v64 + v62[8]) = xmmword_100218E90;
    v70 = v62[9];
    v124 = v63;
    *(_BYTE *)(v64 + v70) = v63;
    v71 = v114;
    sub_100027FE8(v64, v114, type metadata accessor for BenefactorInfoRecord);
    v72 = v64;
    v73 = v117;
    sub_100027FE8(v72, v117, type metadata accessor for BenefactorInfoRecord);
    swift_bridgeObjectRetain(v69);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.info.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = swift_slowAlloc(28, -1);
      v78 = swift_slowAlloc(32, -1);
      v126[0] = v78;
      *(_DWORD *)v77 = 136315650;
      v79 = sub_10016FCC4();
      v81 = v80;
      v129 = sub_1001DEF4C(v79, v80, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130);
      swift_bridgeObjectRelease(v81);
      sub_100028388(v71, type metadata accessor for BenefactorInfoRecord);
      *(_WORD *)(v77 + 12) = 1024;
      LODWORD(v129) = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 4);
      *(_WORD *)(v77 + 18) = 2048;
      v82 = *(_QWORD *)(v117 + *(int *)(v118 + 24));
      sub_100028388(v117, type metadata accessor for BenefactorInfoRecord);
      v129 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v130);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Saving BenefactorInfoRecord %s in manatee? %{BOOL}d with status %ld", (uint8_t *)v77, 0x1Cu);
      swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);
    }
    else
    {
      sub_100028388(v73, type metadata accessor for BenefactorInfoRecord);
      sub_100028388(v71, type metadata accessor for BenefactorInfoRecord);
    }

    v104 = v119;
    v103 = v120;
    sub_10000732C((_QWORD *)(v119 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(_QWORD *)(v119 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
    v105 = v123;
    v106 = v116;
    sub_100027FE8(v123, v116, type metadata accessor for BenefactorInfoRecord);
    v107 = *(unsigned __int8 *)(v115 + 80);
    v108 = (v107 + 32) & ~v107;
    v109 = (v13 + v108 + 7) & 0xFFFFFFFFFFFFFFF8;
    v110 = swift_allocObject(&unk_10026E8D0, v109 + 8, v107 | 7);
    *(_QWORD *)(v110 + 16) = v103;
    v111 = v121;
    *(_QWORD *)(v110 + 24) = v121;
    sub_10003B730(v106, v110 + v108, type metadata accessor for BenefactorInfoRecord);
    *(_QWORD *)(v110 + v109) = v104;
    swift_retain(v104);
    swift_retain(v111);
    sub_1000CD500(v105, (uint64_t)sub_1001CBAEC, v110);
    swift_release(v104);
    swift_release(v110);
    return sub_100028388(v105, type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1001CAB14(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v56[12];
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v65 = a7;
  v66 = a8;
  v67 = a6;
  v60 = a4;
  v12 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v63 = *((_QWORD *)v12 - 1);
  v14 = __chkstk_darwin(v12, v13);
  v64 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14, v16);
  v19 = &v56[-v18];
  v21 = __chkstk_darwin(v17, v20);
  v61 = &v56[-v22];
  v62 = v23;
  __chkstk_darwin(v21, v24);
  v26 = &v56[-v25];
  v59 = a1;
  if ((a2 & a1 & 1) != 0)
    v27 = 2;
  else
    v27 = 1;
  v28 = a3 + *(int *)(type metadata accessor for InheritanceInvitationMessage(0) + 20);
  v29 = &v26[v12[7]];
  v30 = type metadata accessor for UUID(0);
  v31 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  v31(v29, v28, v30);
  v31(v26, (uint64_t)v29, v30);
  v32 = &v26[v12[5]];
  *v32 = v60;
  v32[1] = a5;
  *(_QWORD *)&v26[v12[6]] = v27;
  *(_OWORD *)&v26[v12[8]] = xmmword_100218E90;
  v33 = v12[9];
  LODWORD(v60) = a2;
  v26[v33] = a2;
  v34 = qword_10028ADD0;
  swift_bridgeObjectRetain(a5);
  if (v34 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v35 = type metadata accessor for Logger(0);
  sub_100005288(v35, (uint64_t)qword_1002A89F0);
  v36 = v61;
  sub_100027FE8((uint64_t)v26, (uint64_t)v61, type metadata accessor for BenefactorInfoRecord);
  v37 = sub_100027FE8((uint64_t)v26, (uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter(v38);
  v40 = v39;
  if (os_log_type_enabled(v38, v39))
  {
    v41 = swift_slowAlloc(34, -1);
    v57 = v40;
    v42 = v41;
    v58 = swift_slowAlloc(32, -1);
    v69 = v58;
    *(_DWORD *)v42 = 136315906;
    v43 = sub_10016FCC4();
    v45 = v44;
    v68 = sub_1001DEF4C(v43, v44, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    swift_bridgeObjectRelease(v45);
    sub_100028388((uint64_t)v36, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v42 + 12) = 1024;
    LODWORD(v68) = v60 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4);
    *(_WORD *)(v42 + 18) = 1024;
    LODWORD(v68) = v59 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, (char *)&v68 + 4);
    *(_WORD *)(v42 + 24) = 2048;
    v46 = *(_QWORD *)&v19[v12[6]];
    sub_100028388((uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
    v68 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69);
    _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v57, "Saving BenefactorInfoRecord %s in manatee? %{BOOL}d isFamilyMember? %{BOOL}d with status %ld", (uint8_t *)v42, 0x22u);
    v47 = v58;
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
    sub_100028388((uint64_t)v36, type metadata accessor for BenefactorInfoRecord);
  }

  v48 = v67;
  sub_10000732C((_QWORD *)(v67 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(_QWORD *)(v67 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
  v49 = v64;
  sub_100027FE8((uint64_t)v26, (uint64_t)v64, type metadata accessor for BenefactorInfoRecord);
  v50 = *(unsigned __int8 *)(v63 + 80);
  v51 = (v50 + 32) & ~v50;
  v52 = (v62 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_10026E948, v52 + 8, v50 | 7);
  v54 = v66;
  *(_QWORD *)(v53 + 16) = v65;
  *(_QWORD *)(v53 + 24) = v54;
  sub_10003B730((uint64_t)v49, v53 + v51, type metadata accessor for BenefactorInfoRecord);
  *(_QWORD *)(v53 + v52) = v48;
  swift_retain(v54);
  swift_retain(v48);
  sub_1000CD500((uint64_t)v26, (uint64_t)sub_1001CBAEC, v53);
  swift_release(v53);
  return sub_100028388((uint64_t)v26, type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_1001CAF90(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A89D8);
    v12 = swift_errorRetain(a1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v17 = _convertErrorToNSError(_:)(a1);
      v19 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      *v16 = v17;
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to fetch family circle: %@", v15, 0xCu);
      v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
    }

    a3(0);
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100005288(v5, (uint64_t)qword_1002A89D8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.info.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Family circle fetch successful.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    return a3(a1 & 1);
  }
}

uint64_t sub_1001CB20C(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  unint64_t v43;
  unint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  void *v55;
  void *v56;
  int v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint8_t *v62;
  uint64_t v63;
  _QWORD v64[2];
  uint8_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void (*v71)(uint64_t *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[2];
  _QWORD v77[2];
  char v78[8];
  _QWORD v79[2];
  char v80[16];

  v73 = a5;
  v74 = a4;
  v8 = sub_1000080B4(&qword_10028D648);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BenefactorInfoRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v72 = (uint64_t)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)v64 - v18;
  v20 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (_QWORD *)((char *)v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22, v25);
  v27 = (_QWORD *)((char *)v64 - v26);
  sub_1001633A4(a1, (uint64_t)v64 - v26);
  if (swift_getEnumCaseMultiPayload(v27, v20) != 1)
  {
    sub_10003B730((uint64_t)v27, (uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
    sub_100027FE8((uint64_t)v19, (uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload(v24, v20, 0);
    a2(v24);
    sub_100004934((uint64_t)v24, (uint64_t *)&unk_10028FA40);
    return sub_100028388((uint64_t)v19, type metadata accessor for BenefactorInfoRecord);
  }
  v28 = *v27;
  swift_getErrorValue(v28, v80, v79);
  if ((sub_10015D36C(v79[1]) & 1) == 0)
    goto LABEL_11;
  swift_getErrorValue(v28, v78, v77);
  v29 = (void *)sub_10015D168(v77[1]);
  if (!v29)
    goto LABEL_11;
  v30 = v29;
  if (!sub_10015D1F8(v29))
  {

LABEL_11:
    *v24 = v28;
    swift_storeEnumTagMultiPayload(v24, v20, 1);
    swift_errorRetain(v28);
    a2(v24);
    swift_errorRelease(v28);
    return sub_100004934((uint64_t)v24, (uint64_t *)&unk_10028FA40);
  }
  v70 = v30;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100005288(v31, (uint64_t)qword_1002A89F0);
  swift_errorRetain(v28);
  v33 = swift_errorRetain(v28);
  v69 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  v36 = v35;
  v37 = os_log_type_enabled(v34, v35);
  v71 = a2;
  v68 = a3;
  if (v37)
  {
    v38 = swift_slowAlloc(12, -1);
    v66 = v36;
    v39 = (uint8_t *)v38;
    v67 = swift_slowAlloc(32, -1);
    v75 = v28;
    v76[0] = v67;
    v65 = v39;
    *(_DWORD *)v39 = 136315138;
    v64[1] = v39 + 4;
    swift_errorRetain(v28);
    v40 = sub_1000080B4(&qword_10028E850);
    v41 = String.init<A>(describing:)(&v75, v40);
    v42 = v34;
    v44 = v43;
    v75 = sub_1001DEF4C(v41, v43, v76);
    a2 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
    swift_bridgeObjectRelease(v44);
    swift_errorRelease(v28);
    swift_errorRelease(v28);
    v45 = v65;
    _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v66, "Conflict while saving BenefactorInfoRecord : %s", v65, 0xCu);
    v46 = v67;
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {
    swift_errorRelease(v28);
    swift_errorRelease(v28);

  }
  v49 = Logger.logObject.getter(v47);
  v50 = static os_log_type_t.debug.getter(v49);
  v51 = os_log_type_enabled(v49, v50);
  v52 = v74;
  if (v51)
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Trying to grab Server Record from returned Error", v53, 2u);
    v54 = v53;
    a2 = v71;
    swift_slowDealloc(v54, -1, -1);
  }

  v55 = v70;
  v56 = (void *)sub_10015D200(v70);
  if (v56)
  {
    v57 = *(unsigned __int8 *)(v52 + *(int *)(v12 + 36));
    v58 = v56;
    sub_10016E820(v58, v57, (uint64_t)v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    v63 = v72;
    sub_10003B730((uint64_t)v11, v72, type metadata accessor for BenefactorInfoRecord);
    sub_100027FE8(v63, (uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
    swift_storeEnumTagMultiPayload(v24, v20, 0);
    v71(v24);

    swift_errorRelease(v28);
    sub_100004934((uint64_t)v24, (uint64_t *)&unk_10028FA40);
    return sub_100028388(v63, type metadata accessor for BenefactorInfoRecord);
  }
  else
  {
    v59 = Logger.logObject.getter(0);
    v60 = static os_log_type_t.debug.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Trying to fetch BenefactorInfoRecord from Server", v61, 2u);
      v62 = v61;
      a2 = v71;
      swift_slowDealloc(v62, -1, -1);
    }

    sub_10000732C((_QWORD *)(v73 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController), *(_QWORD *)(v73 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController + 24));
    sub_1000CB9F4(v52, (uint64_t)a2, v68);

    return swift_errorRelease(v28);
  }
}

uint64_t sub_1001CB848()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CB86C()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001CB8A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C8DB8(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001CB8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for InheritanceInvitationMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = v0 + v4;
  v9 = v0 + v4 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v1 + 24) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_1001CB97C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1001C98BC(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(_QWORD))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001CB9E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for InheritanceInvitationMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  v7 = (char *)v0 + v4;
  v8 = (char *)v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[*(int *)(v1 + 24) + 8]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CBA90(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InheritanceInvitationMessage(0) - 8) + 80);
  return sub_1001CA05C(a1, v4, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t *))(v2 + 24), *(void (**)(uint64_t *))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), v2 + ((v5 + 56) & ~v5));
}

uint64_t sub_1001CBAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for InheritanceInvitationMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v4;
  v10 = v0 + v4 + *(int *)(v1 + 20);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v1 + 24) + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_1001CBBD0(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001CAB14(a1, *(unsigned __int8 *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001CBC44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001CBC68(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001CAF90(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_1001CBC78()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1001CBD4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1001CB20C(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

void sub_1001CBDA0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001CBDE4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v0 = kPCSServiceBladerunner;
  if (!kPCSServiceBladerunner)
  {
    __break(1u);
    JUMPOUT(0x1001CBDF8);
  }
  v1 = kPCSServiceBladerunner;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);

  return v2;
}

Swift::Int sub_1001CBEDC()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001CBF20()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001CBF60(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001CBF94()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = (void *)objc_opt_self(AAWalrusStringProvider);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "webAccessNotificationTextForKey:", v1);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

BOOL sub_1001CC124(char *a1, char *a2)
{
  return qword_100221A40[*a1] == qword_100221A40[*a2];
}

Swift::Int sub_1001CC148()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100221A40[v1]);
  return Hasher._finalize()();
}

void sub_1001CC194()
{
  char *v0;

  Hasher._combine(_:)(qword_100221A40[*v0]);
}

Swift::Int sub_1001CC1C8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100221A40[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001CC210@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001CC250(*a1);
  *a2 = result;
  return result;
}

void sub_1001CC238(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100221A40[*v1];
}

uint64_t sub_1001CC250(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 - 2;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 5:
      result = 3;
      break;
    case 7:
      result = 4;
      break;
    case 9:
      result = 5;
      break;
    case 10:
      result = 6;
      break;
    case 20:
      result = 7;
      break;
    default:
      result = 9;
      break;
  }
  return result;
}

void sub_1001CC2C8(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_1001CC330 + 4 * byte_10022176E[sub_1001CC250(a1)];
  __asm { BR              X10 }
}

uint64_t sub_1001CC330()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12[11];

  if (v1 == 0x6E6F697265707948 && v0 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697265707948, 0xE800000000000000, v1, v0, 0);
    swift_bridgeObjectRelease(0xE800000000000000);
    if ((v4 & 1) != 0)
    {
      return 1;
    }
    else
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v5 = type metadata accessor for Logger(0);
      sub_100005288(v5, (uint64_t)qword_1002A8990);
      v6 = swift_bridgeObjectRetain_n(v0, 2);
      v7 = Logger.logObject.getter(v6);
      v8 = static os_log_type_t.error.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        v9 = swift_slowAlloc(22, -1);
        v10 = swift_slowAlloc(32, -1);
        v11 = v2;
        v12[0] = v10;
        *(_DWORD *)v9 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12);
        *(_WORD *)(v9 + 12) = 2080;
        swift_bridgeObjectRetain(v0);
        v11 = sub_1001DEF4C(v1, v0, v12);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12);
        swift_bridgeObjectRelease_n(v0, 3);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Requested PCS identity (%ld, %s) is not allowed.", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v0, 2);
      }
      return 0;
    }
  }
}

ValueMetadata *type metadata accessor for PCSServiceOption()
{
  return &type metadata for PCSServiceOption;
}

uint64_t getEnumTagSinglePayload for PCSServiceIdentifier(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PCSServiceIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001CC6F0 + 4 * byte_10022177D[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001CC724 + 4 * byte_100221778[v4]))();
}

uint64_t sub_1001CC724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CC72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CC734);
  return result;
}

uint64_t sub_1001CC740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CC748);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001CC74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CC754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PCSServiceIdentifier()
{
  return &type metadata for PCSServiceIdentifier;
}

unint64_t sub_1001CC774()
{
  unint64_t result;

  result = qword_100297E78;
  if (!qword_100297E78)
  {
    result = swift_getWitnessTable(&unk_100221840, &type metadata for PCSServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_100297E78);
  }
  return result;
}

unint64_t sub_1001CC7BC()
{
  unint64_t result;

  result = qword_100297E80;
  if (!qword_100297E80)
  {
    result = swift_getWitnessTable(&unk_100221898, &type metadata for PCSServiceOption);
    atomic_store(result, (unint64_t *)&qword_100297E80);
  }
  return result;
}

unint64_t sub_1001CC804()
{
  unint64_t result;

  result = qword_100297E88;
  if (!qword_100297E88)
  {
    result = swift_getWitnessTable(&unk_100221868, &type metadata for PCSServiceOption);
    atomic_store(result, (unint64_t *)&qword_100297E88);
  }
  return result;
}

unint64_t sub_1001CC84C()
{
  unint64_t result;

  result = qword_100297E90;
  if (!qword_100297E90)
  {
    result = swift_getWitnessTable(&unk_1002218C0, &type metadata for PCSServiceOption);
    atomic_store(result, (unint64_t *)&qword_100297E90);
  }
  return result;
}

unint64_t sub_1001CC894()
{
  unint64_t result;

  result = qword_100297E98;
  if (!qword_100297E98)
  {
    result = swift_getWitnessTable(&unk_1002218F8, &type metadata for PCSServiceOption);
    atomic_store(result, (unint64_t *)&qword_100297E98);
  }
  return result;
}

uint64_t type metadata accessor for InheritanceMigrationAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100297EA0;
  if (!qword_100297EA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceMigrationAnalyticsEvent);
  return result;
}

uint64_t sub_1001CC914(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8C20);
}

uint64_t sub_1001CC950(char a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    goto LABEL_6;
  v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v5 = objc_msgSend(v4, "environment");

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v8 = v7;
  result = swift_bridgeObjectRelease(v6);
  if ((v8 & 1) == 0)
  {
LABEL_6:
    v10 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v10, &v13);
    *(_OWORD *)(inited + 16) = xmmword_100219130;
    *(_QWORD *)(inited + 32) = 0xD000000000000012;
    *(_QWORD *)(inited + 40) = 0x800000010020FDC0;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = 0xD000000000000012;
    *(_QWORD *)(inited + 64) = 0x800000010020FDE0;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    v12 = sub_10001612C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v12);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

void sub_1001CCAEC()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritanceMigrationAnalyticsEvent", 48, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1001CCB18()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceMigrationAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001CCB50()
{
  return type metadata accessor for InheritanceMigrationAnalyticsEvent(0);
}

uint64_t sub_1001CCB58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd19DefaultIdentityTask__identityStorage;
  v2 = sub_1000080B4(&qword_100297FD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd19DefaultIdentityTask__accountStore;
  v4 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd19DefaultIdentityTask__storageController;
  v6 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001CCC04()
{
  return type metadata accessor for DefaultIdentityTask(0);
}

uint64_t type metadata accessor for DefaultIdentityTask(uint64_t a1)
{
  uint64_t result;

  result = qword_100297F30;
  if (!qword_100297F30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DefaultIdentityTask);
  return result;
}

void sub_1001CCC48(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&unk_100297F40, &qword_100294E28);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t type metadata accessor for InheritanceRecoveryAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100297FD8;
  if (!qword_100297FD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceRecoveryAnalyticsEvent);
  return result;
}

uint64_t sub_1001CCD54(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8C30);
}

void sub_1001CCD90()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritanceRecoveryAnalyticsEvent", 47, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1001CCDBC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceRecoveryAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001CCDF4()
{
  return type metadata accessor for InheritanceRecoveryAnalyticsEvent(0);
}

uint64_t sub_1001CCDFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  _OWORD v38[3];
  _OWORD v39[2];
  __int128 v40;
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(_QWORD *)&v40 = v20;
    *((_QWORD *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(_QWORD *)&v38[0] = v20;
    *((_QWORD *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7);
    sub_1000080F4(v39, v33);
    v34 = v30;
    v35 = v31;
    v36 = v32;
    sub_1000080F4(v33, v37);
    v30 = v34;
    v31 = v35;
    v32 = v36;
    sub_1000080F4(v37, v38);
    sub_1000080F4(v38, &v34);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(_QWORD *)(v11 + 32) = v32;
    result = (uint64_t)sub_1000080F4(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001CD1C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v30)
        goto LABEL_37;
      v15 = *(_QWORD *)(v31 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v30)
          goto LABEL_37;
        v15 = *(_QWORD *)(v31 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v30)
            goto LABEL_37;
          v15 = *(_QWORD *)(v31 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v19 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v41[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v18 = *(void **)&v41[0];
    type metadata accessor for AAFollowUpUserInfo(0);
    v21 = v20;
    v22 = v18;
    swift_dynamicCast(&v33, v41, v21, &type metadata for AnyHashable, 7);
    v32 = v19;
    swift_dynamicCast(v36, &v32, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_1000080F4(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_1000080F4(v40, v41);
    sub_1000080F4(v41, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v7[8 * v25];
      }
      while (v29 == -1);
      v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_1000080F4(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v31 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001CD570(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_37;
      v15 = *(_QWORD *)(v32 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_37;
        v15 = *(_QWORD *)(v32 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_37;
          v15 = *(_QWORD *)(v32 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v42[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13);
    v18 = *(void **)&v42[0];
    type metadata accessor for AAFollowUpUserInfo(0);
    v21 = v20;
    v22 = v18;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v34, v42, v21, &type metadata for AnyHashable, 7);
    v33 = v19;
    v23 = sub_1000080B4((uint64_t *)&unk_10028E800);
    swift_dynamicCast(v37, &v33, v23, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_1000080F4(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_1000080F4(v41, v42);
    sub_1000080F4(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(_QWORD *)(v11 + 32) = v36;
    result = (uint64_t)sub_1000080F4(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v32 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001CD934(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v31)
        goto LABEL_37;
      v15 = *(_QWORD *)(v32 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v31)
          goto LABEL_37;
        v15 = *(_QWORD *)(v32 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v31)
            goto LABEL_37;
          v15 = *(_QWORD *)(v32 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = 16 * v13;
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v20 = v19[1];
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v18);
    v23 = *v21;
    v22 = v21[1];
    *(_QWORD *)&v42[0] = *v19;
    *((_QWORD *)&v42[0] + 1) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_dynamicCast(&v34, v42, &type metadata for String, &type metadata for AnyHashable, 7);
    v33[0] = v23;
    v33[1] = v22;
    swift_dynamicCast(v37, v33, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v38 = v34;
    v39 = v35;
    v40 = v36;
    sub_1000080F4(v37, v41);
    v34 = v38;
    v35 = v39;
    v36 = v40;
    sub_1000080F4(v41, v42);
    sub_1000080F4(v42, &v38);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v10 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v34;
    *(_OWORD *)(v11 + 16) = v35;
    *(_QWORD *)(v11 + 32) = v36;
    result = (uint64_t)sub_1000080F4(&v38, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v32 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v31)
      goto LABEL_37;
    v15 = *(_QWORD *)(v32 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001CDCF0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[2];
  _OWORD v43[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v32 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v33 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v33 << 6);
      goto LABEL_28;
    }
    v13 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v31)
      goto LABEL_37;
    v14 = *(_QWORD *)(v32 + 8 * v13);
    v15 = v33 + 1;
    if (!v14)
    {
      v15 = v33 + 2;
      if (v33 + 2 >= v31)
        goto LABEL_37;
      v14 = *(_QWORD *)(v32 + 8 * v15);
      if (!v14)
      {
        v15 = v33 + 3;
        if (v33 + 3 >= v31)
          goto LABEL_37;
        v14 = *(_QWORD *)(v32 + 8 * v15);
        if (!v14)
        {
          v15 = v33 + 4;
          if (v33 + 4 >= v31)
            goto LABEL_37;
          v14 = *(_QWORD *)(v32 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v33 = v15;
LABEL_28:
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v12);
    v20 = *v18;
    v19 = v18[1];
    v34 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    v17 = v34;
    type metadata accessor for AAFollowUpUserInfo(0);
    v22 = v21;
    v23 = v17;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v35, &v34, v22, &type metadata for AnyHashable, 7);
    *(_QWORD *)&v43[0] = v20;
    *((_QWORD *)&v43[0] + 1) = v19;
    swift_dynamicCast(v38, v43, &type metadata for String, (char *)&type metadata for Any + 8, 7);
    v39 = v35;
    v40 = v36;
    v41 = v37;
    sub_1000080F4(v38, v42);
    v35 = v39;
    v36 = v40;
    v37 = v41;
    sub_1000080F4(v42, v43);
    sub_1000080F4(v43, &v39);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v24 = -1 << *((_BYTE *)v3 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)&v7[8 * (v25 >> 6)])) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)&v7[8 * v26];
      }
      while (v30 == -1);
      v9 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)&v7[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v35;
    *(_OWORD *)(v10 + 16) = v36;
    *(_QWORD *)(v10 + 32) = v37;
    result = (uint64_t)sub_1000080F4(&v39, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v33 + 5;
  if (v33 + 5 >= v31)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v14 = *(_QWORD *)(v32 + 8 * v16);
  if (v14)
  {
    v15 = v33 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v31)
      goto LABEL_37;
    v14 = *(_QWORD *)(v32 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1001CE0B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t i;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C118);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  i = 0;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v12 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v12 >= v28)
    goto LABEL_32;
  v13 = *(_QWORD *)(v29 + 8 * v12);
  v14 = i + 1;
  if (!v13)
  {
    v14 = i + 2;
    if (i + 2 >= v28)
      goto LABEL_32;
    v13 = *(_QWORD *)(v29 + 8 * v14);
    if (!v13)
    {
      v14 = i + 3;
      if (i + 3 >= v28)
        goto LABEL_32;
      v13 = *(_QWORD *)(v29 + 8 * v14);
      if (!v13)
      {
        v14 = i + 4;
        if (i + 4 >= v28)
          goto LABEL_32;
        v13 = *(_QWORD *)(v29 + 8 * v14);
        if (!v13)
        {
          v15 = i + 5;
          if (i + 5 < v28)
          {
            v13 = *(_QWORD *)(v29 + 8 * v15);
            if (v13)
            {
              v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v14 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_36;
              if (v14 >= v28)
                break;
              v13 = *(_QWORD *)(v29 + 8 * v14);
              ++v15;
              if (v13)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100149DEC(a1);
          return;
        }
      }
    }
  }
LABEL_26:
  v6 = (v13 - 1) & v13;
  v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; v11 = v10 | (i << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v17);
    v20 = v19;
    v21 = sub_10010A9E0(v18, v17);
    v22 = v21;
    if ((v23 & 1) != 0)
    {
      v8 = (uint64_t *)(v3[6] + 16 * v21);
      swift_bridgeObjectRelease(v8[1]);
      *v8 = v18;
      v8[1] = v17;
      v9 = v3[7];

      *(_QWORD *)(v9 + 8 * v22) = v20;
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v21;
    v24 = (uint64_t *)(v3[6] + 16 * v21);
    *v24 = v18;
    v24[1] = v17;
    *(_QWORD *)(v3[7] + 8 * v21) = v20;
    v25 = v3[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_34;
    v3[2] = v27;
    if (!v6)
      goto LABEL_11;
LABEL_10:
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

uint64_t sub_1001CE354(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for CustodianIdMSStatus, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_1000080F4(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_1000080F4(v38, v39);
    sub_1000080F4(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)&v7[8 * v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_1000080F4(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100149DEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1001CE6FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int64_t i;
  char *v10;
  void *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_1000080B4(&qword_10028C038);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v41 = v1 + 64;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v40 = (unint64_t)(63 - v4) >> 6;
  v7 = &v47;
  v8 = &v49;
  swift_bridgeObjectRetain(v1);
  i = 0;
  v10 = (char *)&type metadata for Any + 8;
  v11 = &type metadata for String;
  if (v6)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v40)
    goto LABEL_32;
  v21 = *(_QWORD *)(v41 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v40)
      goto LABEL_32;
    v21 = *(_QWORD *)(v41 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v40)
        goto LABEL_32;
      v21 = *(_QWORD *)(v41 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v40)
          goto LABEL_32;
        v21 = *(_QWORD *)(v41 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v40)
          {
            v21 = *(_QWORD *)(v41 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v40)
                break;
              v21 = *(_QWORD *)(v41 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_100149DEC(v1);
          return;
        }
      }
    }
  }
LABEL_26:
  v43 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v6)) | (i << 6))
  {
    v24 = 16 * v19;
    v25 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v27 = *v25;
    v26 = v25[1];
    v28 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v24);
    v29 = *v28;
    v30 = v28[1];
    v45 = v27;
    v46 = v26;
    v44[0] = v29;
    v44[1] = v30;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v30);
    swift_dynamicCast(v7, v44, v11, v10, 7);
    v31 = v45;
    v32 = v46;
    sub_1000080F4(v7, v8);
    sub_1000080F4(v8, v50);
    sub_1000080F4(v50, &v48);
    v33 = sub_10010A9E0(v31, v32);
    v34 = v33;
    if ((v35 & 1) != 0)
    {
      v42 = i;
      v12 = v8;
      v13 = v7;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v3[6] + 16 * v33);
      swift_bridgeObjectRelease(v17[1]);
      *v17 = v31;
      v17[1] = v32;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v7 = v13;
      v8 = v12;
      i = v42;
      v18 = (_QWORD *)(v3[7] + 32 * v34);
      sub_100006F58(v18);
      sub_1000080F4(&v48, v18);
      v6 = v43;
      if (!v43)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v3[2] >= v3[3])
      break;
    *(_QWORD *)((char *)v3 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v33;
    v36 = (uint64_t *)(v3[6] + 16 * v33);
    *v36 = v31;
    v36[1] = v32;
    sub_1000080F4(&v48, (_OWORD *)(v3[7] + 32 * v33));
    v37 = v3[2];
    v38 = __OFADD__(v37, 1);
    v39 = v37 + 1;
    if (v38)
      goto LABEL_34;
    v3[2] = v39;
    v6 = v43;
    if (!v43)
      goto LABEL_11;
LABEL_10:
    v43 = (v6 - 1) & v6;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

void sub_1001CEA64(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = sub_1000080B4(&qword_10028FA50);
  __chkstk_darwin(v2, v3);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8990);
  sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v5 = sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v15 = v9;
    *(_DWORD *)v8 = 136315138;
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v10 = sub_1001D076C();
    v12 = v11;
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    v13 = sub_1001DEF4C(v10, v12, (uint64_t *)&v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    swift_bridgeObjectRelease(v12);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Posting User notification : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  }

  sub_1001D0F28(a1, &v15);
  __asm { BR              X10 }
}

void sub_1001CF058(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A8990);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    swift_errorRetain(a2);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v10 = swift_errorRetain(a2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v39 = v35;
      *(_DWORD *)v13 = 136315394;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
      v14 = sub_1001D076C();
      v36 = a4;
      v16 = v15;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      v38 = sub_1001DEF4C(v14, v16, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v16);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      *(_WORD *)(v13 + 12) = 2080;
      v38 = a2;
      swift_errorRetain(a2);
      v17 = sub_1000080B4(&qword_10028E850);
      v18 = String.init<A>(describing:)(&v38, v17);
      v20 = v19;
      v38 = sub_1001DEF4C(v18, v19, &v39);
      a4 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error occurred while posting FollowUp %s - Error: %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      if (!v36)
        goto LABEL_14;
    }
    else
    {
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (!a4)
      {
LABEL_14:
        swift_errorRelease(a2);
        return;
      }
    }
    swift_errorRetain(a2);
    a4(a2);
    swift_errorRelease(a2);
    goto LABEL_14;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A8990);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v23 = a6;
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v24 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v25, v26))
  {
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);

    if (!a4)
      return;
    goto LABEL_16;
  }
  v27 = swift_slowAlloc(22, -1);
  v28 = (_QWORD *)swift_slowAlloc(8, -1);
  v34 = swift_slowAlloc(32, -1);
  v39 = v34;
  *(_DWORD *)v27 = 136315394;
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v29 = sub_1001D076C();
  v37 = a4;
  v31 = v30;
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  v38 = sub_1001DEF4C(v29, v31, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
  swift_bridgeObjectRelease(v31);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  *(_WORD *)(v27 + 12) = 2112;
  v38 = (uint64_t)v24;
  v32 = v24;
  a4 = v37;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
  *v28 = v24;

  _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully posted Follow Up - %s on account: %@", (uint8_t *)v27, 0x16u);
  v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
  swift_arrayDestroy(v28, 1, v33);
  swift_slowDealloc(v28, -1, -1);
  swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v34, -1, -1);
  swift_slowDealloc(v27, -1, -1);

  if (v37)
LABEL_16:
    a4(0);
}

void sub_1001CF5C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A8990);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    swift_errorRetain(a2);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v8 = swift_errorRetain(a2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v31 = v12;
      *(_DWORD *)v11 = 136315394;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
      v13 = sub_1001D076C();
      v29 = a4;
      v15 = v14;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      v30 = sub_1001DEF4C(v13, v15, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v15);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      *(_WORD *)(v11 + 12) = 2080;
      v30 = a2;
      swift_errorRetain(a2);
      v16 = sub_1000080B4(&qword_10028E850);
      v17 = String.init<A>(describing:)(&v30, v16);
      v19 = v18;
      v30 = sub_1001DEF4C(v17, v18, &v31);
      a4 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error occurred while posting FollowUp %s - Error: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      if (!v29)
        goto LABEL_14;
    }
    else
    {
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (!a4)
      {
LABEL_14:
        swift_errorRelease(a2);
        return;
      }
    }
    swift_errorRetain(a2);
    a4(a2);
    swift_errorRelease(a2);
    goto LABEL_14;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v20 = type metadata accessor for Logger(0);
  sub_100005288(v20, (uint64_t)qword_1002A8990);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v21 = sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v22, v23))
  {
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);

    if (!a4)
      return;
    goto LABEL_16;
  }
  v24 = (uint8_t *)swift_slowAlloc(12, -1);
  v25 = swift_slowAlloc(32, -1);
  v31 = v25;
  *(_DWORD *)v24 = 136315138;
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v26 = sub_1001D076C();
  v28 = v27;
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  v30 = sub_1001DEF4C(v26, v28, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
  swift_bridgeObjectRelease(v28);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully posted Follow Up - %s", v24, 0xCu);
  swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v25, -1, -1);
  swift_slowDealloc(v24, -1, -1);

  if (a4)
LABEL_16:
    a4(0);
}

void sub_1001CFA90(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8990);
  sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v3 = sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v12[0] = v7;
    *(_DWORD *)v6 = 136315138;
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v8 = sub_1001D076C();
    v10 = v9;
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    v11 = sub_1001DEF4C(v8, v10, (uint64_t *)v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12);
    swift_bridgeObjectRelease(v10);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Dismissing User notification: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  }

  sub_1001D0F28(a1, v12);
  __asm { BR              X10 }
}

void sub_1001CFF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *oslog;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A8990);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    swift_errorRetain(a2);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v6 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v27 = v9;
      *(_DWORD *)v8 = 136315394;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
      v10 = sub_1001D076C();
      v12 = v11;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      v26 = sub_1001DEF4C(v10, v12, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v12);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      *(_WORD *)(v8 + 12) = 2080;
      v26 = a2;
      swift_errorRetain(a2);
      v13 = sub_1000080B4(&qword_10028E850);
      v14 = String.init<A>(describing:)(&v26, v13);
      v16 = v15;
      v26 = sub_1001DEF4C(v14, v15, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Error occured while dismissing FollowUp %s - Error: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a2);
      return;
    }
    swift_errorRelease(a2);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8990);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    v18 = sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
    oslog = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v27 = v21;
      *(_DWORD *)v20 = 136315138;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
      v22 = sub_1001D076C();
      v24 = v23;
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      v26 = sub_1001DEF4C(v22, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      swift_bridgeObjectRelease(v24);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
      _os_log_impl((void *)&_mh_execute_header, oslog, v19, "Successfully dismissed Follow Up - %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      return;
    }
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
    sub_1001D0EF0(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10004344C);
  }

}

void sub_1001D03A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  NSURL *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  os_log_t oslog;

  if (!a2)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A8990);
    oslog = (os_log_t)Logger.logObject.getter(v14);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "User dismissed system alert", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    goto LABEL_14;
  }
  if (a2 == 1)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100005288(v2, (uint64_t)qword_1002A8990);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Alternate response pressed for system alert", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v7)
    {
      v9 = v7;
      URL._bridgeToObjectiveC()(v8);
      v11 = v10;
      v12 = sub_100015894((uint64_t)_swiftEmptyArrayStorage);
      oslog = (os_log_t)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      objc_msgSend(v9, "openSensitiveURL:withOptions:", v11, oslog);

LABEL_14:
    }
  }
}

void sub_1001D05DC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(void *, uint64_t);
  id v7;

  v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a2;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_1001D063C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController));
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001D06B0()
{
  return type metadata accessor for UserNotificationManager(0);
}

uint64_t type metadata accessor for UserNotificationManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100298068;
  if (!qword_100298068)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserNotificationManager);
  return result;
}

void sub_1001D06F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    v4[2] = "(";
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t sub_1001D076C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *object;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::String v21;
  _QWORD v22[4];
  _QWORD v23[2];
  _OWORD v24[2];
  uint64_t v25;
  void *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v19 = type metadata accessor for Mirror(0);
  v18 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)&v27 + 1) = &type metadata for UserNotificationType;
  v25 = swift_allocObject(&unk_10026EC28, 57, 7);
  sub_1001D0F28(v0, (_OWORD *)(v25 + 16));
  sub_1001D0EF0((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001D0E78);
  v4 = Mirror.init(reflecting:)(&v25);
  v29 = 0;
  v30 = 0xE000000000000000;
  v17 = v3;
  v5 = Mirror.children.getter(v4);
  v6 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release(v5);
  v7 = swift_retain(v6);
  dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v7);
  if (v28)
  {
    v20 = (char *)&type metadata for Any + 8;
    do
    {
      v12 = v25;
      v11 = v26;
      v23[0] = v25;
      v23[1] = v26;
      sub_1000080F4(&v27, v24);
      v21._countAndFlagsBits = v12;
      v21._object = v11;
      sub_1000244B0((uint64_t)v24, (uint64_t)v22);
      if (v11)
      {
        swift_bridgeObjectRetain(v11);
        sub_100006F58(v22);
        v21._countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        v13._countAndFlagsBits = v12;
        v13._object = v11;
        String.append(_:)(v13);
        swift_bridgeObjectRelease(v11);
        v14._countAndFlagsBits = 8250;
        v14._object = (void *)0xE200000000000000;
        String.append(_:)(v14);
        v8 = (char *)&type metadata for Any + 8;
      }
      else
      {
        sub_100006F58(v22);
        v21._countAndFlagsBits = 0;
        v21._object = (void *)0xE000000000000000;
        v8 = v20;
      }
      _print_unlocked<A, B>(_:_:)(v24, &v21, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      object = v21._object;
      String.append(_:)(v21);
      swift_bridgeObjectRelease(object);
      v10 = sub_100004934((uint64_t)v23, &qword_100298108);
      dispatch thunk of _AnyIteratorBoxBase.next()(&v25, v10);
    }
    while (v28);
  }
  swift_release_n(v6, 2);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v17, v19);
  return v29;
}

uint64_t sub_1001D09D4()
{
  __int128 *v0;
  _OWORD v2[3];

  sub_1001D0F28(v0, v2);
  return sub_1001D076C();
}

uint64_t sub_1001D0A08(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  char v25;
  int64_t v26;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v26)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v26)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v26)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
    v17 = *v15;
    v16 = v15[1];
    v18 = v14;
    swift_bridgeObjectRetain(v16);
    v19 = sub_10010AA44(v18);
    v21 = v20;

    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      return 0;
    }
    v22 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v19);
    v23 = v22[1];
    if (*v22 == v17 && v23 == v16)
    {
      result = swift_bridgeObjectRelease(v16);
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, v17, v16, 0);
      result = swift_bridgeObjectRelease(v16);
      if ((v25 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v26)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001D0C14(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  char v27;
  int64_t v28;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v28)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v28)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v28)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    v21 = sub_10010A9E0(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease(v17);
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease(v19);
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    v25 = v24[1];
    if (*v24 == v20 && v25 == v19)
    {
      result = swift_bridgeObjectRelease(v19);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, v20, v19, 0);
      result = swift_bridgeObjectRelease(v19);
      if ((v27 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v28)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v28)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001D0E30(__int128 *a1, __int128 *a2)
{
  __int128 v4[3];
  __int128 v5[3];

  sub_1001D0F28(a1, v4);
  sub_1001D0F28(a2, v5);
  return sub_1001D0F40(v4, v5) & 1;
}

void *sub_1001D0E78(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v8;
  id v9;

  v8 = a2;
  switch(a6)
  {
    case 0:
    case 1:
      v9 = result;
      goto LABEL_4;
    case 2:
    case 3:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      v8 = a5;
LABEL_4:
      result = (void *)swift_bridgeObjectRetain(v8);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001D0EF0(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

_OWORD *sub_1001D0F28(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_1001D0F40(__int128 *a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  id v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  sub_1001D0F28(a1, &v30);
  if (v34 != 2)
  {
    if (!v34)
    {
      v3 = v30;
      sub_1001D0F28(a2, &v25);
      if (!v29)
      {
        v4 = v25;
        v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
        v7 = v6;
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
        v10 = v8;
        if (v5 == v9 && v7 == v8)
        {
          v11 = (id)v3;
          v12 = (id)v4;
          swift_bridgeObjectRelease_n(v7, 2);
LABEL_15:
          v20 = sub_1001D0A08(*((uint64_t *)&v3 + 1), *((uint64_t *)&v4 + 1));

          return v20 & 1;
        }
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v8, 0);
        v22 = (id)v3;
        v23 = (id)v4;
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v10);
        if ((v21 & 1) != 0)
          goto LABEL_15;

      }
    }
LABEL_17:
    v20 = 0;
    return v20 & 1;
  }
  v13 = v30;
  v14 = v31;
  v15 = v32;
  v16 = v33;
  sub_1001D0F28(a2, &v25);
  if (v29 != 2)
    goto LABEL_17;
  v17 = v26;
  v18 = v27;
  v19 = v28;
  if (v13 == v25
    || (v20 = 0,
        (_stringCompareWithSmolCheck(_:_:expecting:)(v13, *((_QWORD *)&v13 + 1), v25, *((_QWORD *)&v25 + 1), 0) & 1) != 0))
  {
    if (v14 == v17 && v15 == v18
      || (v20 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v17, v18, 0) & 1) != 0))
    {
      v20 = sub_1001D0C14(v16, v19);
    }
  }
  return v20 & 1;
}

void sub_1001D1104(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  uint64_t ObjCClassFromMetadata;
  void *v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  void *object;
  NSString v44;
  NSString v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  _QWORD v52[2];
  id v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  NSString v56;
  _QWORD aBlock[5];
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;

  v56 = a2;
  v8 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v17 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v20 = (char *)v52 - v19;
  if (*(_QWORD *)(a5 + 16))
  {
    v21 = sub_10010A9E0(0xD000000000000010, 0x800000010020AEF0);
    if ((v22 & 1) != 0)
    {
      v55 = a3;
      v23 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * v21);
      v24 = *v23;
      v25 = v23[1];
      v26 = swift_bridgeObjectRetain(v25);
      URL.init(string:)(v24, v25, v26);
      swift_bridgeObjectRelease(v25);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
      {
        v54 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
        v54(v20, v11, v12);
        v32 = sub_1001D162C();
        ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v32);
        v34 = (void *)objc_opt_self(NSBundle);
        v35 = objc_msgSend(v34, "bundleForClass:", ObjCClassFromMetadata);
        v52[1] = a4;
        v36 = v35;
        v59._countAndFlagsBits = 0xD000000000000032;
        v59._object = (void *)0x800000010020FF10;
        v37._countAndFlagsBits = 0x53474E4954544553;
        v37._object = (void *)0xE800000000000000;
        v38._countAndFlagsBits = 0;
        v38._object = (void *)0xE000000000000000;
        v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v59);
        v52[0] = v39._countAndFlagsBits;

        v40 = objc_msgSend(v34, "bundleForClass:", ObjCClassFromMetadata);
        v60._countAndFlagsBits = 0xD00000000000001ALL;
        v60._object = (void *)0x800000010020FF50;
        v41._countAndFlagsBits = 19279;
        v41._object = (void *)0xE200000000000000;
        v42._countAndFlagsBits = 0;
        v42._object = (void *)0xE000000000000000;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v60)._object;

        v53 = (id)objc_opt_self(AAUserNotification);
        v56 = String._bridgeToObjectiveC()();
        v44 = String._bridgeToObjectiveC()();
        v45 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v39._object);
        v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v20, v12);
        v47 = *(unsigned __int8 *)(v13 + 80);
        v48 = (v47 + 16) & ~v47;
        v49 = swift_allocObject(&unk_10026EC50, v48 + v14, v47 | 7);
        v54((char *)(v49 + v48), v17, v12);
        aBlock[4] = sub_1001D16C8;
        v58 = v49;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1001D05DC;
        aBlock[3] = &unk_10026EC68;
        v50 = _Block_copy(aBlock);
        swift_release(v58);
        v51 = v56;
        objc_msgSend(v53, "showUserNotificationWithTitle:message:cancelButtonTitle:otherButtonTitle:withCompletionBlock:", v56, v44, v45, v46, v50);
        _Block_release(v50);

        (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
        return;
      }
      sub_100004934((uint64_t)v11, (uint64_t *)&unk_10028DC30);
    }
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100005288(v27, (uint64_t)qword_1002A8990);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to post system alert, action URL is missing.", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

}

uint64_t sub_1001D1584()
{
  uint64_t v0;

  sub_10004344C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  if (*(_QWORD *)(v0 + 64))
    swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1001D15C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001CF5C4(a1, a2, v2 + 16, *(void (**)(_QWORD))(v2 + 64));
}

uint64_t sub_1001D15D0()
{
  uint64_t v0;

  sub_10004344C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  if (*(_QWORD *)(v0 + 64))
    swift_release(*(_QWORD *)(v0 + 72));

  return swift_deallocObject(v0, 88, 7);
}

void sub_1001D1618(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001CF058(a1, a2, v2 + 16, *(void (**)(_QWORD))(v2 + 64), *(_QWORD *)(v2 + 72), *(void **)(v2 + 80));
}

unint64_t sub_1001D162C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100298110;
  if (!qword_100298110)
  {
    v1 = objc_opt_self(AAUserNotification);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100298110);
  }
  return result;
}

uint64_t sub_1001D1668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001D16C8(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL(0);
  sub_1001D03A4(a1, a2);
}

void sub_1001D1718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001CFF0C(a1, a2, v2 + 16);
}

uint64_t sub_1001D1734()
{
  uint64_t v0;

  sub_10004344C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 57, 7);
}

void *destroy for UserNotificationType(uint64_t a1)
{
  return sub_10004344C(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for UserNotificationType(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1001D0E78(*(void **)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for UserNotificationType(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_1001D0E78(*(void **)a2, v4, v5, v6, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  sub_10004344C(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for UserNotificationType(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UserNotificationType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  sub_10004344C(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotificationType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UserNotificationType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001D1974(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1001D197C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationType()
{
  return &type metadata for UserNotificationType;
}

uint64_t type metadata accessor for SubscriptionManager()
{
  return objc_opt_self(_TtC13appleaccountd19SubscriptionManager);
}

uint64_t type metadata accessor for CustodianInvitationActionAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_1002981E0;
  if (!qword_1002981E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianInvitationActionAnalyticsEvent);
  return result;
}

uint64_t sub_1001D19F4(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[1] = &unk_100221D78;
  v2[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 4, v2, a1 + qword_1002A8C40);
}

void sub_1001D1A58(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D1ABC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D1B34 + 4 * byte_100221CC4[a2]))(0x6961706552706463);
}

uint64_t sub_1001D1B34(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6961706552706463 && v1 == 0xE900000000000072)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6961706552706463, 0xE900000000000072, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000072);
  return v2 & 1;
}

void sub_1001D1BF4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D1C58(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D1CD4 + 4 * byte_100221CCD[a2]))(0x614D747065636361);
}

uint64_t sub_1001D1CD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x614D747065636361 && v1 == 0xEC0000006C61756ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x614D747065636361, 0xEC0000006C61756ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC0000006C61756ELL);
  return v2 & 1;
}

void sub_1001D1D88(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D1DEC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D1EB4 + 4 * byte_100221CDB[a2]))(0x614D747065636361);
}

uint64_t sub_1001D1EB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x614D747065636361 && v1 == 0xEC0000006C61756ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x614D747065636361, 0xEC0000006C61756ELL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC0000006C61756ELL);
  return v2 & 1;
}

void sub_1001D1FBC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D2018(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1001D20C8 + 4 * byte_100221CEA[a2]))(0xD000000000000015);
}

uint64_t sub_1001D20C8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000001002091F0;
  if (a1 == 0xD000000000000015 && v1 == 0x80000001002091F0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000015, 0x80000001002091F0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1001D21C8(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x64657469766E69;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6465766F72707061;
    else
      v4 = 0x6E776F6E6B6E75;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xE700000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6465766F72707061;
      else
        v2 = 0x6E776F6E6B6E75;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x64657469766E69;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x64657469766E69)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1001D22E0(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x7964616572;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6E69747563657865;
    else
      v4 = 0x64656873696E6966;
    if (v3 == 1)
      v5 = 0xE900000000000067;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6E69747563657865;
      else
        v2 = 0x64656873696E6966;
      if (v6 == 1)
        v7 = 0xE900000000000067;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE500000000000000;
    v4 = 0x7964616572;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v4 != 0x7964616572)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_1001D23F8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x616E65746E69616DLL;
  else
    v3 = 0x7974696C697475;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEB0000000065636ELL;
  if ((a2 & 1) != 0)
    v5 = 0x616E65746E69616DLL;
  else
    v5 = 0x7974696C697475;
  if ((a2 & 1) != 0)
    v6 = 0xEB0000000065636ELL;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1001D24A4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D24E8(uint64_t a1)
{
  String.hash(into:)(a1, 0x614D747065636361, 0xEC0000006C61756ELL);
  return swift_bridgeObjectRelease(0xEC0000006C61756ELL);
}

void sub_1001D2570(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001D25B4(uint64_t a1)
{
  String.hash(into:)(a1, 0x614D747065636361, 0xEC0000006C61756ELL);
  return swift_bridgeObjectRelease(0xEC0000006C61756ELL);
}

void sub_1001D2698(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1001D26E4(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000015, 0x80000001002091F0);
  return swift_bridgeObjectRelease(0x80000001002091F0);
}

uint64_t sub_1001D278C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D27C4 + 4 * byte_100221D04[a1]))(0x7541747065636361, 0xEA00000000006F74);
}

uint64_t sub_1001D27C4()
{
  return 0x614D747065636361;
}

unint64_t sub_1001D27E4()
{
  return 0xD000000000000011;
}

void sub_1001D2894(char *a1)
{
  sub_1001D1D88(*a1);
}

Swift::Int sub_1001D28A0()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1001D2570((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1001D28E4(uint64_t a1)
{
  char *v1;

  sub_1001D2570(a1, *v1);
}

Swift::Int sub_1001D28EC()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1001D2570((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_1001D292C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001D3468(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D2958@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001D278C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001D2980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  unint64_t v3;
  _BYTE v5[56];

  *(_QWORD *)(v0 + qword_1002981C0) = 2;
  *(_BYTE *)(v0 + qword_1002981C8) = 9;
  *(_QWORD *)(v0 + qword_1002981D0) = -1;
  *(_QWORD *)(v0 + qword_1002981D8) = &_swiftEmptyArrayStorage;
  v1 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v1, v5);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x800000010020E690;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v3 = sub_10001612C(inited);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000030, 0x80000001002100A0, v3);
}

void sub_1001D2A60(char a1, void *a2)
{
  uint64_t v2;
  unint64_t v3;
  char **v4;
  uint64_t v5;
  id v8;
  id v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Class isa;
  char v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  Class v31;
  char v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  Class v40;
  char v41;
  unint64_t v42;
  id v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  Class v47;
  char v48;
  unint64_t v49;
  Class v50;
  char v51;
  unint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE v68[24];
  _QWORD v69[3];
  unint64_t v70;

  v5 = v2;
  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v8 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v9 = objc_msgSend(v8, "environment");

    v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v10 + 16))
    {
      sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
      v12 = v11;
      swift_bridgeObjectRelease(v10);
      if ((v12 & 1) != 0)
        return;
    }
    else
    {
      swift_bridgeObjectRelease(v10);
    }
  }
  v70 = sub_10001612C((uint64_t)&_swiftEmptyArrayStorage);
  if (*(_BYTE *)(v5 + qword_1002981C8) != 9)
  {
    LOBYTE(v69[0]) = *(_BYTE *)(v5 + qword_1002981C8);
    String.init<A>(describing:)(v69, &type metadata for CustodianAnalyticsInviteAction);
    v14 = v13;
    v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
    v69[0] = v70;
    v70 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v15, 0x6341657469766E69, 0xEC0000006E6F6974, isUniquelyReferenced_nonNull_native);
    v17 = v70;
    v70 = v69[0];
    swift_bridgeObjectRelease(v17);
  }
  v18 = (uint64_t *)(v5 + qword_1002981D8);
  swift_beginAccess(v5 + qword_1002981D8, v69, 0, 0);
  v19 = *v18;
  if ((unint64_t)*v18 >> 62)
  {
    if (v19 < 0)
      v55 = *v18;
    else
      v55 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v18);
    v56 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease(v19);
    if (v56 < 2)
      goto LABEL_27;
  }
  else if (*(uint64_t *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_27;
  }
  v20 = *v18;
  if ((*v18 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*v18);
    v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v20);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_38:
      if (v20 < 0)
        v57 = v20;
      else
        v57 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v58 = _CocoaArrayWrapper.endIndex.getter(v57);
      swift_bridgeObjectRelease(v20);
      if (v58 < 3)
        goto LABEL_27;
      goto LABEL_16;
    }
    v21 = *(id *)(v20 + 40);
  }
  objc_msgSend(v21, "code");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v70, v68, 33, 0);
  v23 = swift_isUniquelyReferenced_nonNull_native(v70);
  v62 = v70;
  v3 = 0x8000000000000000;
  v70 = 0x8000000000000000;
  sub_10001FC90((uint64_t)isa, 0xD000000000000014, 0x800000010020B7F0, v23);
  v24 = v70;
  v70 = v62;
  swift_bridgeObjectRelease(v24);
  swift_endAccess(v68);
  v4 = &off_100287000;
  v25 = objc_msgSend(v21, "domain");
  if (!v25)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v26 = (uint64_t)v25;
  swift_beginAccess(&v70, v68, 33, 0);
  v27 = swift_isUniquelyReferenced_nonNull_native(v70);
  v61 = v70;
  v70 = 0x8000000000000000;
  sub_10001FC90(v26, 0xD000000000000016, 0x800000010020B810, v27);
  v28 = v70;
  v70 = v61;
  swift_bridgeObjectRelease(v28);
  swift_endAccess(v68);

  v20 = *v18;
  if ((unint64_t)*v18 >> 62)
    goto LABEL_38;
  if (*(uint64_t *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10) < 3)
    goto LABEL_27;
LABEL_16:
  v29 = *v18;
  if ((*v18 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*v18);
    v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v29);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    if (*(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
    {
      __break(1u);
LABEL_45:
      if (v29 < 0)
        v59 = v29;
      else
        v59 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v60 = _CocoaArrayWrapper.endIndex.getter(v59);
      swift_bridgeObjectRelease(v29);
      if (v60 < 4)
        goto LABEL_27;
      goto LABEL_22;
    }
    v30 = *(id *)(v29 + 48);
  }
  objc_msgSend(v30, "code", v61);
  v31 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v70, v68, 33, 0);
  v32 = swift_isUniquelyReferenced_nonNull_native(v70);
  v63 = v70;
  v70 = v3;
  sub_10001FC90((uint64_t)v31, 0xD000000000000014, 0x800000010020B830, v32);
  v33 = v70;
  v70 = v63;
  swift_bridgeObjectRelease(v33);
  swift_endAccess(v68);
  v34 = objc_msgSend(v30, v4[286]);
  if (!v34)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v35 = (uint64_t)v34;
  swift_beginAccess(&v70, v68, 33, 0);
  v36 = swift_isUniquelyReferenced_nonNull_native(v70);
  v61 = v70;
  v70 = v3;
  v3 = 0xD000000000000014;
  sub_10001FC90(v35, 0xD000000000000016, 0x800000010020B850, v36);
  v37 = v70;
  v70 = v61;
  swift_bridgeObjectRelease(v37);
  swift_endAccess(v68);

  v29 = *v18;
  if ((unint64_t)*v18 >> 62)
    goto LABEL_45;
  if (*(uint64_t *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4)
  {
LABEL_22:
    v38 = *v18;
    if ((*v18 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(*v18);
      v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(3, v38);
      swift_bridgeObjectRelease(v38);
LABEL_25:
      objc_msgSend(v39, "code", v61);
      v40 = Int._bridgeToObjectiveC()().super.super.isa;
      swift_beginAccess(&v70, v68, 33, 0);
      v41 = swift_isUniquelyReferenced_nonNull_native(v70);
      v64 = v70;
      v70 = 0x8000000000000000;
      sub_10001FC90((uint64_t)v40, 0xD000000000000014, 0x800000010020B870, v41);
      v42 = v70;
      v70 = v64;
      swift_bridgeObjectRelease(v42);
      swift_endAccess(v68);
      v43 = objc_msgSend(v39, v4[286]);
      if (v43)
      {
        v44 = (uint64_t)v43;
        swift_beginAccess(&v70, v68, 33, 0);
        v45 = swift_isUniquelyReferenced_nonNull_native(v70);
        v65 = v70;
        v70 = 0x8000000000000000;
        sub_10001FC90(v44, v3 + 2, 0x800000010020B890, v45);
        v46 = v70;
        v70 = v65;
        swift_bridgeObjectRelease(v46);
        swift_endAccess(v68);

        goto LABEL_27;
      }
LABEL_54:
      __break(1u);
      return;
    }
    if (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10) >= 4uLL)
    {
      v39 = *(id *)(v38 + 56);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_52;
  }
LABEL_27:
  v47 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v70, v68, 33, 0);
  v48 = swift_isUniquelyReferenced_nonNull_native(v70);
  v66 = v70;
  v70 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v47, 0x6C6552664F6D756ELL, 0xED00006E6F697461, v48);
  v49 = v70;
  v70 = v66;
  swift_bridgeObjectRelease(v49);
  swift_endAccess(v68);
  v50 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v70, v68, 33, 0);
  v51 = swift_isUniquelyReferenced_nonNull_native(v70);
  v67 = v70;
  v70 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v50, 0x6E6F6973726576, 0xE700000000000000, v51);
  v52 = v70;
  v70 = v67;
  swift_bridgeObjectRelease(v52);
  swift_endAccess(v68);
  if (a2)
  {
    v53 = a2;
    a2 = (void *)sub_1001FE9A0();

  }
  v54 = v70;
  swift_bridgeObjectRetain(v70);
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v54);
  swift_bridgeObjectRelease(v54);

  swift_bridgeObjectRelease(v70);
}

void sub_1001D3288()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianInvitationActionAnalyticsEvent", 53, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1001D32B4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1002981D8));
}

id sub_1001D32C4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001D32F8(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1002981D8));
}

uint64_t sub_1001D3308()
{
  return type metadata accessor for CustodianInvitationActionAnalyticsEvent(0);
}

uint64_t storeEnumTagSinglePayload for CustodianAnalyticsInviteAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001D335C + 4 * byte_100221D12[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001D3390 + 4 * byte_100221D0D[v4]))();
}

uint64_t sub_1001D3390(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D3398(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D33A0);
  return result;
}

uint64_t sub_1001D33AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D33B4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001D33B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D33C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianAnalyticsInviteAction()
{
  return &type metadata for CustodianAnalyticsInviteAction;
}

unint64_t sub_1001D33E0()
{
  unint64_t result;

  result = qword_100298230;
  if (!qword_100298230)
  {
    result = swift_getWitnessTable(&unk_100221E28, &type metadata for CustodianAnalyticsInviteAction);
    atomic_store(result, (unint64_t *)&qword_100298230);
  }
  return result;
}

uint64_t (*sub_1001D3424(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_1002981D8, a1, 33, 0);
  return j__swift_endAccess;
}

unint64_t sub_1001D3468(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E958, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

void sub_1001D34B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1001D3508(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v24);
    v6 = sub_1001D4B98(0, BYTE6(v24), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v9 = v8;
          v10 = __DataStorage._offset.getter();
          v11 = v7 - v10;
          if (__OFSUB__(v7, v10))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13)
            goto LABEL_36;
          v9 = v13;
          v14 = __DataStorage._offset.getter();
          v11 = v7 - v14;
          if (__OFSUB__(v7, v14))
            goto LABEL_34;
        }
        v12 = *(_BYTE *)(v9 + v11);
      }
      else
      {
        if (v7 >= BYTE6(v24))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        v12 = *(_BYTE *)(v3 - 118 + v7);
      }
      v15 = sub_1000080B4(&qword_100290F10);
      v16 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_100218E30;
      *(_QWORD *)(v16 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      v6 = String.init(format:_:)(1479684133, 0xE400000000000000, v16);
      v17 = v6;
      v19 = v18;
      *(_QWORD *)(v3 - 104) = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        v6 = sub_1001D4B98(v20 > 1, v21 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      v22 = v2 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1001D381CLL);
  }
  return v2;
}

void sub_1001D3844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SHA256(0);
  __chkstk_darwin(v4, v5);
  v6 = type metadata accessor for SHA256Digest(0);
  __chkstk_darwin(v6, v7);
  v8 = sub_100005150((unint64_t *)&unk_10028BC00, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  dispatch thunk of HashFunction.init()(v4, v8);
  __asm { BR              X10 }
}

uint64_t sub_1001D3948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)(v8 - 128) = v5;
  *(_WORD *)(v8 - 120) = v4;
  *(_BYTE *)(v8 - 118) = BYTE2(v4);
  *(_BYTE *)(v8 - 117) = BYTE3(v4);
  *(_BYTE *)(v8 - 116) = BYTE4(v4);
  *(_BYTE *)(v8 - 115) = BYTE5(v4);
  dispatch thunk of HashFunction.update(bufferPointer:)(v8 - 128, v8 - 128 + BYTE6(v4), v2, v6);
  sub_10000F494(v5, v4);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of HashFunction.finalize())(v2, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 160) + 8))(v3, v2);
  *(_QWORD *)(v8 - 104) = v0;
  v9 = sub_100005150(&qword_1002982E8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  *(_QWORD *)(v8 - 96) = v9;
  v10 = sub_1000B9D04((_QWORD *)(v8 - 128));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v10, v1, v0);
  sub_10000732C((_QWORD *)(v8 - 128), *(_QWORD *)(v8 - 104));
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)((_QWORD *)(v8 - 144), sub_1001D5A18, 0, &type metadata for Data._Representation, v0, v9);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v0);
  v11 = *(_QWORD *)(v8 - 144);
  sub_100006F58((_QWORD *)(v8 - 128));
  return v11;
}

uint64_t sub_1001D3BA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1001D97C0(a1, a2, a3, a5, a6, a7);
  return swift_unknownObjectRelease(a5);
}

void sub_1001D3BD8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  os_log_t v55;
  uint64_t *v56;
  uint64_t v57;
  void (*v58)(_QWORD);
  uint64_t v59;
  void *v60;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v55 - v15;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8A08);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
    swift_errorRetain(a1);
    v18 = swift_errorRetain(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v58 = a3;
      v22 = v21;
      v56 = (uint64_t *)swift_slowAlloc(8, -1);
      v57 = swift_slowAlloc(32, -1);
      v60 = (void *)v57;
      *(_DWORD *)v22 = 136315394;
      v23 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v55 = v19;
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
      v26 = v25;
      v59 = sub_1001DEF4C(v24, v25, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain(a1);
      v27 = _swift_stdlib_bridgeErrorToNSError(a1);
      v59 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      v28 = v56;
      *v56 = v27;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v19 = v55;
      _os_log_impl((void *)&_mh_execute_header, v55, v20, "   checkInheritanceKey failed for beneficiaryID %s    error: %@", (uint8_t *)v22, 0x16u);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v29);
      swift_slowDealloc(v28, -1, -1);
      v30 = v57;
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v31 = v22;
      a3 = v58;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    type metadata accessor for InheritanceError(0);
    v45 = v44;
    v59 = 2109;
    v46 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v47 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v60, &v59, v46, v45, v47);
    v48 = v60;
    v49 = (void *)_convertErrorToNSError(_:)(v60);

    a3(v49);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A8A08);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a2, v8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v58 = a3;
      v38 = v37;
      v60 = (void *)v37;
      *(_DWORD *)v36 = 136315138;
      v57 = a4;
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v8, v39);
      v42 = v41;
      v59 = sub_1001DEF4C(v40, v41, (uint64_t *)&v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "   checkInheritanceKey succeeded for beneficiaryID %s", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      v43 = v38;
      a3 = v58;
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }

    type metadata accessor for InheritanceError(0);
    v51 = v50;
    v59 = 2101;
    v52 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v53 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v60, &v59, v52, v51, v53);
    v54 = v60;
    v49 = (void *)_convertErrorToNSError(_:)(v60);

    a3(v49);
  }

}

void sub_1001D4188(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v3 = v2;
  v6 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  if (!*(_QWORD *)(*a1 + 16))
    goto LABEL_5;
  v16 = sub_10010A9E0(0x69636966656E6562, 0xEF64697555797261);
  if ((v17 & 1) == 0)
    goto LABEL_5;
  v18 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v16);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  v90 = v19;
  UUID.init(uuidString:)(v19, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    if (*(_QWORD *)(v15 + 16) && (v26 = sub_10010A9E0(0x646F436D69616C63, 0xED00006873614865), (v27 & 1) != 0))
    {
      v28 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v26);
      v29 = v28[1];
      v89 = *v28;
      v91 = v29;
      swift_bridgeObjectRetain(v29);
    }
    else
    {
      v89 = 0;
      v91 = 0;
    }
    v87 = a2;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A8A08);
    v32 = swift_bridgeObjectRetain_n(v20, 2);
    v93 = v31;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter();
    v35 = os_log_type_enabled(v33, v34);
    v92 = v20;
    v85 = v10;
    v86 = v3;
    v88 = v14;
    if (v35)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v94 = v37;
      *(_DWORD *)v36 = 136315138;
      swift_bridgeObjectRetain(v92);
      v96 = sub_1001DEF4C(v90, v92, &v94);
      v20 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Beneficiary UUID: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
    }
    v38 = v91;
    v39 = swift_bridgeObjectRetain_n(v91, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v96 = v43;
      *(_DWORD *)v42 = 136315138;
      v94 = v89;
      v95 = v91;
      swift_bridgeObjectRetain(v91);
      v44 = sub_1000080B4(&qword_10028BBE8);
      v45 = String.init<A>(describing:)(&v94, v44);
      v47 = v46;
      v94 = sub_1001DEF4C(v45, v46, &v96);
      v38 = v91;
      v20 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease_n(v38, 2);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Claim code hash: %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v38, 2);
    }
    v48 = swift_bridgeObjectRetain_n(v15, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v94 = v52;
      *(_DWORD *)v51 = 136315138;
      if (*(_QWORD *)(v15 + 16) && (v53 = sub_10010A9E0(0x4B64657070617277, 0xEA00000000007965), (v54 & 1) != 0))
      {
        v55 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v53);
        v57 = *v55;
        v56 = v55[1];
        swift_bridgeObjectRetain(v56);
      }
      else
      {
        v57 = 0;
        v56 = 0xE000000000000000;
      }
      v96 = sub_1001DEF4C(v57, v56, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease_n(v15, 2);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Wrapped Key: %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);

      v20 = v92;
    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
    }
    v58 = swift_bridgeObjectRetain_n(v15, 2);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v94 = v62;
      *(_DWORD *)v61 = 136315138;
      if (*(_QWORD *)(v15 + 16) && (v63 = sub_10010A9E0(0x4B64657070617277, 0xEE00687361487965), (v64 & 1) != 0))
      {
        v65 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v63);
        v67 = *v65;
        v66 = v65[1];
        swift_bridgeObjectRetain(v66);
      }
      else
      {
        v67 = 0;
        v66 = 0xE000000000000000;
      }
      v96 = sub_1001DEF4C(v67, v66, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease_n(v15, 2);
      swift_bridgeObjectRelease(v66);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Wrapped Key Hash: %s", v61, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      v20 = v92;
      v68 = v87;
      v69 = (uint64_t)v88;
      if (!v38)
        goto LABEL_37;
    }
    else
    {

      swift_bridgeObjectRelease_n(v15, 2);
      v68 = v87;
      v69 = (uint64_t)v88;
      if (!v38)
      {
LABEL_37:
        swift_bridgeObjectRetain(v20);
        v80 = Logger.logObject.getter(v79);
        v81 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v80, v81))
        {
          v82 = (uint8_t *)swift_slowAlloc(12, -1);
          v83 = swift_slowAlloc(32, -1);
          v94 = v83;
          *(_DWORD *)v82 = 136315138;
          swift_bridgeObjectRetain(v20);
          v96 = sub_1001DEF4C(v90, v20, &v94);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
          swift_bridgeObjectRelease_n(v20, 3);
          _os_log_impl((void *)&_mh_execute_header, v80, v81, "Claim code is nil for uuid: %s", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v20, 2);
        }

        goto LABEL_41;
      }
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v68);
    v94 = *v68;
    *v68 = 0x8000000000000000;
    v71 = sub_1001D5A8C(v90, v20, v89, v38, v69, isUniquelyReferenced_nonNull_native);
    v73 = v72;
    v75 = v74;
    v77 = v76;
    v78 = *v68;
    *v68 = v94;
    swift_bridgeObjectRelease(v78);
    sub_1001D89D8(v71, v73, v75, v77);
LABEL_41:
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v69, v85);
    return;
  }
  swift_bridgeObjectRelease(v20);
  sub_100013AAC((uint64_t)v9);
LABEL_5:
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "💥 Failure to parse beneficiaryInfo.", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

uint64_t type metadata accessor for BeneficiaryInfoVerifier()
{
  return objc_opt_self(_TtC13appleaccountd23BeneficiaryInfoVerifier);
}

uint64_t sub_1001D4B50(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D4DDC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4B6C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D5704(a1, a2, a3, (_QWORD *)*v3, &qword_1002982F0, &qword_10028C098);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4B98(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001D4F64(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001D4BB4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D50CC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4BD0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100298320, type metadata accessor for KeyRepairContext);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4BFC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292D68, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4C28(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292D30, type metadata accessor for CustodianshipInfoRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4C54(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292DD8, type metadata accessor for IdentityRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4C80(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292DE0, type metadata accessor for IdentityServiceRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4CAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292D28, type metadata accessor for CustodianRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4CD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001D5268(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001D4CF4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292DC8, type metadata accessor for BeneficiaryInfoRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4D20(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100292DC0, type metadata accessor for BenefactorInfoRecord);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4D4C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D53D8(a1, a2, a3, (_QWORD *)*v3, &qword_100298328, (uint64_t (*)(_QWORD))&type metadata accessor for SQL);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4D78(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001D55B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001D4D94(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001D5704(a1, a2, a3, (_QWORD *)*v3, &qword_100298300, &qword_10028C088);
  *v3 = result;
  return result;
}

uint64_t sub_1001D4DC0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001D5890(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001D4DDC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100298310);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = &_swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_1000080B4(&qword_100298318);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D4F64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100292D38);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D50CC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100292D20);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_1000080B4(&qword_10028E850);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D5254(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001D53D8(a1, a2, a3, a4, &qword_100292D28, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001D5268(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100298308);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D53C4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1001D53D8(a1, a2, a3, a4, &qword_100292DC8, type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_1001D53D8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000080B4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D55B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_1002982F8);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D5704(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_1000080B4(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = &_swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_1000080B4(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001D5890(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100292D70);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE *sub_1001D5A18@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1001D5CE0(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1001D5DA0((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1001D5E18((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1001D5A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v7 = (_QWORD **)v6;
  v33 = a3;
  v34 = a4;
  v32 = a2;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)*v6;
  v18 = sub_10010AA48(a5);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_14;
  }
  v22 = v17;
  v23 = v16[3];
  if (v23 >= v21 && (a6 & 1) != 0)
  {
LABEL_7:
    v24 = *v7;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = (uint64_t *)(v24[7] + 32 * v18);
      result = *v25;
      v27 = v32;
      *v25 = a1;
      v25[1] = v27;
      v28 = v34;
      v25[2] = v33;
      v25[3] = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v23 >= v21 && (a6 & 1) == 0)
  {
    sub_1000216A0();
    goto LABEL_7;
  }
  sub_10001F328(v21, a6 & 1);
  v29 = sub_10010AA48(a5);
  if ((v22 & 1) != (v30 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v11);
    __break(1u);
    return result;
  }
  v18 = v29;
  v24 = *v7;
  if ((v22 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a5, v11);
  sub_1000201B0(v18, (uint64_t)v15, a1, v32, v33, v34, v24);
  return 0;
}

uint64_t sub_1001D5C1C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  v12 = type metadata accessor for SHA256(0);
  v13 = sub_100005150((unint64_t *)&unk_10028BC00, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_1001D5CE0(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1001D5DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1001D5E18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

void sub_1001D5E98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint8_t *v21;
  uint8_t *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A8A08);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v32 = a1;
    v18 = a4;
    v19 = a3;
    v20 = a2;
    v21 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Claim code hash missing on idMS.... Checking if keys state on OT...", v17, 2u);
    v22 = v21;
    a2 = v20;
    a3 = v19;
    a4 = v18;
    a1 = v32;
    swift_slowDealloc(v22, -1, -1);
  }

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v24 = *(unsigned __int8 *)(v9 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_10026EF98, v26 + 16, v24 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + v25, v12, v8);
  v28 = (_QWORD *)(v27 + v26);
  *v28 = a3;
  v28[1] = a4;
  aBlock[4] = sub_1001D8984;
  v34 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DC548;
  aBlock[3] = &unk_10026EFB0;
  v29 = _Block_copy(aBlock);
  v30 = v34;
  swift_retain(a4);
  swift_release(v30);
  objc_msgSend(a2, "checkInheritanceKeyForBeneficiaryID:completion:", isa, v29);
  _Block_release(v29);

}

uint64_t sub_1001D60D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(_QWORD), uint64_t a10, void *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  NSObject **v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  BOOL v79;
  uint8_t *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  BOOL v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  id v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint8_t *v134;
  id v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v141;
  NSObject *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t (*v147)(_QWORD);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  _QWORD *v153;
  id v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  id v164;
  unint64_t v165;

  v156 = a5;
  v157 = a2;
  v152 = a3;
  v145 = type metadata accessor for SHA256(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v16);
  v143 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v18 - 8);
  v151 = v18;
  __chkstk_darwin(v18, v19);
  v149 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)swift_allocObject(&unk_10026F060, 56, 7);
  v25[2] = a7;
  v25[3] = a8;
  v147 = a9;
  v25[4] = a9;
  v25[5] = a10;
  v25[6] = a11;
  v26 = (_QWORD *)swift_allocObject(&unk_10026F088, 56, 7);
  v27 = v156;
  v26[2] = a4;
  v26[3] = v27;
  v26[4] = a6;
  v26[5] = sub_1001D9714;
  v153 = v26;
  v26[6] = v25;
  v155 = sub_1001D88A8();
  v161 = a1;
  sub_100013B34(a1, (uint64_t)v24);
  v158 = a7;
  swift_retain_n(a7, 3);
  v28 = a8;
  v160 = a10;
  swift_retain_n(a10, 3);
  v29 = a11;
  v30 = v28;
  v31 = v29;
  v32 = v30;
  v159 = v31;
  v33 = a4;
  swift_errorRetain(a4);
  v154 = v27;
  v34 = a6;
  swift_retain(a6);
  v156 = v25;
  swift_retain(v25);
  v35 = sub_100013BB4((uint64_t)v24);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100005288(v36, (uint64_t)qword_1002A8A08);
  v38 = v35;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v148 = v37;
    v41 = swift_slowAlloc(12, -1);
    v146 = v32;
    v42 = (uint8_t *)v41;
    v43 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v42 = 138412290;
    v155 = v34;
    v164 = v38;
    v44 = v38;
    v45 = v158;
    v34 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
    *v43 = v38;

    v37 = v148;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "BeneficiaryInfo: %@", v42, 0xCu);
    v46 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v43, 1, v46);
    swift_slowDealloc(v43, -1, -1);
    v47 = v42;
    v32 = v146;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {

    v39 = v38;
    v45 = v158;
  }

  v49 = v157;
  if (*(_QWORD *)(v157 + 16) && (v48 = sub_10010AA48(v161), (v50 & 1) != 0))
  {
    v155 = v34;
    v161 = v33;
    v51 = *(_QWORD *)(v49 + 56) + 32 * v48;
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    v54 = -[NSObject accessKey](v38, "accessKey", swift_bridgeObjectRetain(v53).n128_f64[0]);
    v142 = v38;
    if (v54
      && (v55 = v54,
          v56 = objc_msgSend(v54, "claimTokenString"),
          v55,
          v56))
    {
      v157 = v52;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v58 = v37;
      v60 = v59;

      v61 = sub_1001AEE10(v57, v60);
      v63 = v62;
      v64 = (uint64_t)v143;
      SHA256.init()();
      sub_1001D3844(v64, v61, v63);
      v66 = v65;
      v68 = v67;
      sub_10000F494(v61, v63);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v64, v145);
      sub_1001D34B0(v66, v68);
      v70 = v69;
      v164 = (id)v69;
      v71 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v72 = sub_10008685C();
      v73 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v71, v72);
      v75 = v74;
      swift_bridgeObjectRelease(v70);
      sub_10000F494(v66, v68);
      v76 = swift_bridgeObjectRetain_n(v75, 2);
      v148 = v58;
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.debug.getter();
      v79 = os_log_type_enabled(v77, v78);
      v146 = v32;
      if (v79)
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v164 = (id)v81;
        *(_DWORD *)v80 = 136315138;
        swift_bridgeObjectRetain(v75);
        v162 = sub_1001DEF4C(v73, v75, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_bridgeObjectRelease_n(v75, 3);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "localClaimCodeHash: %s", v80, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v75, 2);
      }
      v106 = v73;
      v107 = swift_bridgeObjectRetain_n(v53, 2);
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc(12, -1);
        v111 = swift_slowAlloc(32, -1);
        v164 = (id)v111;
        *(_DWORD *)v110 = 136315138;
        swift_bridgeObjectRetain(v53);
        v112 = v157;
        v162 = sub_1001DEF4C(v157, v53, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_bridgeObjectRelease_n(v53, 3);
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "idMS ClaimCode Hash: %s", v110, 0xCu);
        swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v111, -1, -1);
        swift_slowDealloc(v110, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v53, 2);
        v112 = v157;
      }
      v45 = v158;
      v113 = v155;
      v32 = v146;
      v164 = (id)v106;
      v165 = v75;
      v162 = v112;
      v163 = v53;
      v114 = sub_10006B00C();
      v115 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v162, &type metadata for String, &type metadata for String, v114, v114);
      swift_bridgeObjectRelease(v75);
      v116 = swift_bridgeObjectRelease(v53);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.debug.getter();
      v119 = os_log_type_enabled(v117, v118);
      if (v115)
      {
        v120 = v161;
        if (v119)
        {
          v121 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v121 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "🌧️ Claim code does not match.", v121, 2u);
          swift_slowDealloc(v121, -1, -1);
        }

        type metadata accessor for InheritanceError(0);
        v123 = v122;
        v162 = 2100;
        v124 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v125 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        _BridgedStoredNSError.init(_:userInfo:)(&v164, &v162, v124, v123, v125);
        v126 = v164;
        v127 = (void *)_convertErrorToNSError(_:)(v164);

        swift_retain(v45);
        v128 = v32;
        v129 = v160;
        swift_retain(v160);
        v130 = v159;
        v131 = v45;
        v132 = v154;
        sub_100022758(v127, v120, v154, v113, v131, v128, v147, v129, (uint64_t)v130);
        swift_release(v153);

        swift_release(v131);
        swift_release(v129);

        swift_errorRelease(v120);
        swift_release(v156);
        swift_release(v113);

        v45 = v131;
      }
      else
      {
        v133 = v161;
        if (v119)
        {
          v134 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v134 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "🌈 Claim code matches!", v134, 2u);
          swift_slowDealloc(v134, -1, -1);
        }

        swift_retain(v45);
        v135 = v32;
        v136 = v160;
        swift_retain(v160);
        v137 = v159;
        v138 = v154;
        sub_100022758(0, v133, v154, v113, v45, v135, v147, v136, (uint64_t)v137);
        swift_release(v153);

        swift_release(v45);
        swift_release(v136);

        swift_errorRelease(v133);
        swift_release(v156);
        swift_release(v113);

      }
    }
    else
    {
      v90 = v160;
      v91 = swift_bridgeObjectRelease(v53);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Claim code hash was not found in local CK record.", v94, 2u);
        swift_slowDealloc(v94, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v96 = v95;
      v162 = 2102;
      v97 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v98 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v164, &v162, v97, v96, v98);
      v99 = v164;
      v100 = (void *)_convertErrorToNSError(_:)(v164);

      swift_retain(v45);
      v101 = v32;
      swift_retain(v90);
      v102 = v159;
      v103 = v161;
      v104 = v154;
      v105 = v155;
      sub_100022758(v100, v161, v154, v155, v45, v101, v147, v90, (uint64_t)v102);
      swift_release(v153);

      swift_release(v45);
      swift_release(v90);

      swift_errorRelease(v103);
      swift_release(v156);
      swift_release(v105);

    }
  }
  else
  {
    v82 = Logger.logObject.getter(v48);
    v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Claim code hash was not found in idMS response.", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    v86 = (uint64_t)v149;
    v85 = v150;
    v87 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v149, v161, v151);
    v88 = swift_allocObject(&unk_10026F0B0, 32, 7);
    v89 = v153;
    *(_QWORD *)(v88 + 16) = sub_1001D88A4;
    *(_QWORD *)(v88 + 24) = v89;
    swift_retain(v89);
    sub_1001D5E98(v86, v152, (uint64_t)sub_1001DA268, v88);

    swift_release(v88);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v86, v87);
    swift_release(v89);
    swift_errorRelease(v33);
    swift_release(v156);
    swift_release(v34);

  }
  v139 = v159;

  swift_release_n(v160, 2);
  return swift_release_n(v45, 2);
}

uint64_t sub_1001D6DF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(_QWORD), uint64_t a10, void *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  NSObject **v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  BOOL v79;
  uint8_t *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  void *v100;
  id v101;
  id v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  BOOL v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  void *v127;
  id v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  uint8_t *v134;
  id v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v141;
  NSObject *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t (*v147)(_QWORD);
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  _QWORD *v153;
  id v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  id v164;
  unint64_t v165;

  v156 = a5;
  v157 = a2;
  v152 = a3;
  v145 = type metadata accessor for SHA256(0);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v16);
  v143 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v150 = *(_QWORD *)(v18 - 8);
  v151 = v18;
  __chkstk_darwin(v18, v19);
  v149 = (char *)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)swift_allocObject(&unk_10026F0D8, 56, 7);
  v25[2] = a7;
  v25[3] = a8;
  v147 = a9;
  v25[4] = a9;
  v25[5] = a10;
  v25[6] = a11;
  v26 = (_QWORD *)swift_allocObject(&unk_10026F100, 56, 7);
  v27 = v156;
  v26[2] = a4;
  v26[3] = v27;
  v26[4] = a6;
  v26[5] = sub_1001D9764;
  v153 = v26;
  v26[6] = v25;
  v155 = sub_1001D88A8();
  v161 = a1;
  sub_100013B34(a1, (uint64_t)v24);
  v158 = a7;
  swift_retain_n(a7, 3);
  v28 = a8;
  v160 = a10;
  swift_retain_n(a10, 3);
  v29 = a11;
  v30 = v28;
  v31 = v29;
  v32 = v30;
  v159 = v31;
  v33 = a4;
  swift_errorRetain(a4);
  v154 = v27;
  v34 = a6;
  swift_retain(a6);
  v156 = v25;
  swift_retain(v25);
  v35 = sub_100013BB4((uint64_t)v24);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100005288(v36, (uint64_t)qword_1002A8A08);
  v38 = v35;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v148 = v37;
    v41 = swift_slowAlloc(12, -1);
    v146 = v32;
    v42 = (uint8_t *)v41;
    v43 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v42 = 138412290;
    v155 = v34;
    v164 = v38;
    v44 = v38;
    v45 = v158;
    v34 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
    *v43 = v38;

    v37 = v148;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "BeneficiaryInfo: %@", v42, 0xCu);
    v46 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v43, 1, v46);
    swift_slowDealloc(v43, -1, -1);
    v47 = v42;
    v32 = v146;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {

    v39 = v38;
    v45 = v158;
  }

  v49 = v157;
  if (*(_QWORD *)(v157 + 16) && (v48 = sub_10010AA48(v161), (v50 & 1) != 0))
  {
    v155 = v34;
    v161 = v33;
    v51 = *(_QWORD *)(v49 + 56) + 32 * v48;
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    v54 = -[NSObject accessKey](v38, "accessKey", swift_bridgeObjectRetain(v53).n128_f64[0]);
    v142 = v38;
    if (v54
      && (v55 = v54,
          v56 = objc_msgSend(v54, "claimTokenString"),
          v55,
          v56))
    {
      v157 = v52;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v58 = v37;
      v60 = v59;

      v61 = sub_1001AEE10(v57, v60);
      v63 = v62;
      v64 = (uint64_t)v143;
      SHA256.init()();
      sub_1001D3844(v64, v61, v63);
      v66 = v65;
      v68 = v67;
      sub_10000F494(v61, v63);
      (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v64, v145);
      sub_1001D34B0(v66, v68);
      v70 = v69;
      v164 = (id)v69;
      v71 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v72 = sub_10008685C();
      v73 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v71, v72);
      v75 = v74;
      swift_bridgeObjectRelease(v70);
      sub_10000F494(v66, v68);
      v76 = swift_bridgeObjectRetain_n(v75, 2);
      v148 = v58;
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.debug.getter();
      v79 = os_log_type_enabled(v77, v78);
      v146 = v32;
      if (v79)
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v164 = (id)v81;
        *(_DWORD *)v80 = 136315138;
        swift_bridgeObjectRetain(v75);
        v162 = sub_1001DEF4C(v73, v75, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_bridgeObjectRelease_n(v75, 3);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "localClaimCodeHash: %s", v80, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v80, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v75, 2);
      }
      v106 = v73;
      v107 = swift_bridgeObjectRetain_n(v53, 2);
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc(12, -1);
        v111 = swift_slowAlloc(32, -1);
        v164 = (id)v111;
        *(_DWORD *)v110 = 136315138;
        swift_bridgeObjectRetain(v53);
        v112 = v157;
        v162 = sub_1001DEF4C(v157, v53, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
        swift_bridgeObjectRelease_n(v53, 3);
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "idMS ClaimCode Hash: %s", v110, 0xCu);
        swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v111, -1, -1);
        swift_slowDealloc(v110, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v53, 2);
        v112 = v157;
      }
      v45 = v158;
      v113 = v155;
      v32 = v146;
      v164 = (id)v106;
      v165 = v75;
      v162 = v112;
      v163 = v53;
      v114 = sub_10006B00C();
      v115 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v162, &type metadata for String, &type metadata for String, v114, v114);
      swift_bridgeObjectRelease(v75);
      v116 = swift_bridgeObjectRelease(v53);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.debug.getter();
      v119 = os_log_type_enabled(v117, v118);
      if (v115)
      {
        v120 = v161;
        if (v119)
        {
          v121 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v121 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "🌧️ Claim code does not match.", v121, 2u);
          swift_slowDealloc(v121, -1, -1);
        }

        type metadata accessor for InheritanceError(0);
        v123 = v122;
        v162 = 2100;
        v124 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v125 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        _BridgedStoredNSError.init(_:userInfo:)(&v164, &v162, v124, v123, v125);
        v126 = v164;
        v127 = (void *)_convertErrorToNSError(_:)(v164);

        swift_retain(v45);
        v128 = v32;
        v129 = v160;
        swift_retain(v160);
        v130 = v159;
        v131 = v45;
        v132 = v154;
        sub_100022784(v127, v120, v154, v113, v131, v128, v147, v129, (uint64_t)v130);
        swift_release(v153);

        swift_release(v131);
        swift_release(v129);

        swift_errorRelease(v120);
        swift_release(v156);
        swift_release(v113);

        v45 = v131;
      }
      else
      {
        v133 = v161;
        if (v119)
        {
          v134 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v134 = 0;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "🌈 Claim code matches!", v134, 2u);
          swift_slowDealloc(v134, -1, -1);
        }

        swift_retain(v45);
        v135 = v32;
        v136 = v160;
        swift_retain(v160);
        v137 = v159;
        v138 = v154;
        sub_100022784(0, v133, v154, v113, v45, v135, v147, v136, (uint64_t)v137);
        swift_release(v153);

        swift_release(v45);
        swift_release(v136);

        swift_errorRelease(v133);
        swift_release(v156);
        swift_release(v113);

      }
    }
    else
    {
      v90 = v160;
      v91 = swift_bridgeObjectRelease(v53);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v94 = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "Claim code hash was not found in local CK record.", v94, 2u);
        swift_slowDealloc(v94, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v96 = v95;
      v162 = 2102;
      v97 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v98 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v164, &v162, v97, v96, v98);
      v99 = v164;
      v100 = (void *)_convertErrorToNSError(_:)(v164);

      swift_retain(v45);
      v101 = v32;
      swift_retain(v90);
      v102 = v159;
      v103 = v161;
      v104 = v154;
      v105 = v155;
      sub_100022784(v100, v161, v154, v155, v45, v101, v147, v90, (uint64_t)v102);
      swift_release(v153);

      swift_release(v45);
      swift_release(v90);

      swift_errorRelease(v103);
      swift_release(v156);
      swift_release(v105);

    }
  }
  else
  {
    v82 = Logger.logObject.getter(v48);
    v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Claim code hash was not found in idMS response.", v84, 2u);
      swift_slowDealloc(v84, -1, -1);
    }

    v86 = (uint64_t)v149;
    v85 = v150;
    v87 = v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 16))(v149, v161, v151);
    v88 = swift_allocObject(&unk_10026F128, 32, 7);
    v89 = v153;
    *(_QWORD *)(v88 + 16) = sub_1001D88A4;
    *(_QWORD *)(v88 + 24) = v89;
    swift_retain(v89);
    sub_1001D5E98(v86, v152, (uint64_t)sub_1001DA268, v88);

    swift_release(v88);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v86, v87);
    swift_release(v89);
    swift_errorRelease(v33);
    swift_release(v156);
    swift_release(v34);

  }
  v139 = v159;

  swift_release_n(v160, 2);
  return swift_release_n(v45, 2);
}

uint64_t sub_1001D7B14(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(_QWORD), uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  NSObject *v44;
  NSObject **v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  BOOL v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  NSObject *v85;
  uint8_t *v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  id v93;
  NSObject *v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  id v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  void *v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint8_t *v133;
  id v134;
  void *v135;
  uint64_t v137;
  uint64_t v138;
  NSObject **v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(_QWORD);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  _QWORD *v149;
  id v150;
  id v151;
  uint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  id v160;
  unint64_t v161;

  v154 = a5;
  v155 = a2;
  v148 = a3;
  v17 = a10;
  v16 = a11;
  v142 = type metadata accessor for SHA256(0);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v18);
  v140 = (char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v146 = *(_QWORD *)(v20 - 8);
  v147 = v20;
  __chkstk_darwin(v20, v21);
  v145 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v137 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (_QWORD *)swift_allocObject(&unk_10026EF20, 56, 7);
  v27[2] = a7;
  v27[3] = a8;
  v144 = a9;
  v27[4] = a9;
  v27[5] = a10;
  v27[6] = a11;
  v28 = (_QWORD *)swift_allocObject(&unk_10026EF48, 56, 7);
  v29 = v154;
  v28[2] = a4;
  v28[3] = v29;
  v28[4] = a6;
  v28[5] = sub_1001D8894;
  v149 = v28;
  v28[6] = v27;
  v153 = sub_1001D88A8();
  v157 = a1;
  v30 = a1;
  v31 = a6;
  v32 = a7;
  sub_100013B34(v30, (uint64_t)v26);
  swift_retain(a7);
  v33 = a8;
  swift_retain(a10);
  swift_errorRetain(a11);
  swift_retain(a7);
  v34 = v33;
  swift_retain(a10);
  swift_errorRetain(a11);
  swift_retain(a7);
  v151 = v34;
  swift_retain(a10);
  swift_errorRetain(a11);
  v152 = a4;
  swift_errorRetain(a4);
  v150 = v29;
  swift_retain(v31);
  v154 = v27;
  swift_retain(v27);
  v35 = sub_100013BB4((uint64_t)v26);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100005288(v36, (uint64_t)qword_1002A8A08);
  v38 = v35;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  v41 = os_log_type_enabled(v39, v40);
  v156 = v32;
  if (v41)
  {
    v153 = v37;
    v42 = swift_slowAlloc(12, -1);
    v143 = a11;
    v43 = (uint8_t *)v42;
    v139 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v43 = 138412290;
    v160 = v38;
    v44 = v38;
    v37 = v153;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161);
    v45 = v139;
    *v139 = v38;

    v17 = a10;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "BeneficiaryInfo: %@", v43, 0xCu);
    v46 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v45, 1, v46);
    swift_slowDealloc(v45, -1, -1);
    v47 = v43;
    v32 = v156;
    v16 = v143;
    swift_slowDealloc(v47, -1, -1);
  }
  else
  {

    v39 = v38;
  }
  v48 = v155;

  if (*(_QWORD *)(v48 + 16) && (v49 = sub_10010AA48(v157), (v50 & 1) != 0))
  {
    v51 = *(_QWORD *)(v48 + 56) + 32 * v49;
    v52 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    v54 = -[NSObject accessKey](v38, "accessKey", swift_bridgeObjectRetain(v53).n128_f64[0]);
    if (v54
      && (v55 = v54,
          v56 = objc_msgSend(v54, "claimTokenString"),
          v55,
          v56))
    {
      v155 = v52;
      v148 = v38;
      v157 = v31;
      v143 = v16;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      v60 = sub_1001AEE10(v57, v59);
      v62 = v61;
      v63 = (uint64_t)v140;
      SHA256.init()();
      sub_1001D3844(v63, v60, v62);
      v65 = v64;
      v153 = v37;
      v67 = v66;
      sub_10000F494(v60, v62);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v63, v142);
      sub_1001D34B0(v65, v67);
      v69 = v68;
      v160 = (id)v68;
      v70 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v71 = sub_10008685C();
      v72 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v70, v71);
      v74 = v73;
      swift_bridgeObjectRelease(v69);
      sub_10000F494(v65, v67);
      v75 = swift_bridgeObjectRetain_n(v74, 2);
      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.debug.getter();
      v78 = os_log_type_enabled(v76, v77);
      v138 = v17;
      if (v78)
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = swift_slowAlloc(32, -1);
        v160 = (id)v80;
        *(_DWORD *)v79 = 136315138;
        swift_bridgeObjectRetain(v74);
        v158 = sub_1001DEF4C(v72, v74, (uint64_t *)&v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
        swift_bridgeObjectRelease_n(v74, 3);
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "localClaimCodeHash: %s", v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v74, 2);
      }
      v108 = v72;
      v109 = swift_bridgeObjectRetain_n(v53, 2);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = swift_slowAlloc(32, -1);
        v160 = (id)v113;
        *(_DWORD *)v112 = 136315138;
        swift_bridgeObjectRetain(v53);
        v114 = v155;
        v158 = sub_1001DEF4C(v155, v53, (uint64_t *)&v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159);
        swift_bridgeObjectRelease_n(v53, 3);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "idMS ClaimCode Hash: %s", v112, 0xCu);
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v112, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v53, 2);
        v114 = v155;
      }
      v32 = v156;
      v17 = v138;
      v160 = (id)v108;
      v161 = v74;
      v158 = v114;
      v159 = v53;
      v115 = sub_10006B00C();
      v116 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v158, &type metadata for String, &type metadata for String, v115, v115);
      swift_bridgeObjectRelease(v74);
      v117 = swift_bridgeObjectRelease(v53);
      v118 = Logger.logObject.getter(v117);
      v119 = static os_log_type_t.debug.getter();
      v120 = os_log_type_enabled(v118, v119);
      v121 = v157;
      if (v116)
      {
        v16 = v143;
        v93 = v151;
        v122 = v152;
        if (v120)
        {
          v123 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v123 = 0;
          _os_log_impl((void *)&_mh_execute_header, v118, v119, "🌧️ Claim code does not match.", v123, 2u);
          swift_slowDealloc(v123, -1, -1);
        }

        type metadata accessor for InheritanceError(0);
        v125 = v124;
        v158 = 2100;
        v126 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v127 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        _BridgedStoredNSError.init(_:userInfo:)(&v160, &v158, v126, v125, v127);
        v128 = v160;
        v129 = (void *)_convertErrorToNSError(_:)(v160);

        swift_retain(v32);
        v130 = v93;
        swift_retain(v17);
        swift_errorRetain(v16);
        v131 = v150;
        sub_100023428(v129, v122, v150, v121, v32, v130, v144, v17, v16);
        swift_errorRelease(v16);
        swift_release(v149);

        swift_release(v32);
        swift_release(v17);
        swift_errorRelease(v122);
        swift_release(v154);
        swift_release(v121);

      }
      else
      {
        v16 = v143;
        v93 = v151;
        v132 = v152;
        if (v120)
        {
          v133 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v133 = 0;
          _os_log_impl((void *)&_mh_execute_header, v118, v119, "🌈 Claim code matches!", v133, 2u);
          swift_slowDealloc(v133, -1, -1);
        }

        swift_retain(v32);
        v134 = v93;
        swift_retain(v17);
        swift_errorRetain(v16);
        v135 = v150;
        sub_100023428(0, v132, v150, v121, v32, v134, v144, v17, v16);
        swift_errorRelease(v16);
        swift_release(v149);

        swift_release(v32);
        swift_release(v17);
        swift_errorRelease(v132);
        swift_release(v154);
        swift_release(v121);

      }
    }
    else
    {
      v94 = v38;
      v95 = swift_bridgeObjectRelease(v53);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v98 = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Claim code hash was not found in local CK record.", v98, 2u);
        swift_slowDealloc(v98, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v100 = v99;
      v158 = 2102;
      v101 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v102 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v160, &v158, v101, v100, v102);
      v103 = v160;
      v104 = (void *)_convertErrorToNSError(_:)(v160);

      swift_retain(v32);
      v93 = v151;
      v105 = v151;
      swift_retain(v17);
      swift_errorRetain(v16);
      v106 = v152;
      v107 = v150;
      sub_100023428(v104, v152, v150, v31, v32, v105, v144, v17, v16);
      swift_errorRelease(v16);
      swift_release(v149);

      swift_release(v32);
      swift_release(v17);
      swift_errorRelease(v106);
      swift_release(v154);
      swift_release(v31);

    }
  }
  else
  {
    v81 = v17;
    v82 = v31;
    v83 = Logger.logObject.getter(v49);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = v38;
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Claim code hash was not found in idMS response.", v86, 2u);
      v87 = v86;
      v38 = v85;
      swift_slowDealloc(v87, -1, -1);
    }

    v89 = (uint64_t)v145;
    v88 = v146;
    v90 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v145, v157, v147);
    v91 = swift_allocObject(&unk_10026EF70, 32, 7);
    v92 = v149;
    *(_QWORD *)(v91 + 16) = sub_1001D88A4;
    *(_QWORD *)(v91 + 24) = v92;
    swift_retain(v92);
    sub_1001D5E98(v89, v148, (uint64_t)sub_1001D88E4, v91);

    swift_release(v91);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v89, v90);
    swift_release(v92);
    swift_errorRelease(v152);
    swift_release(v154);
    swift_release(v82);

    v93 = v151;
    v17 = v81;
    v32 = v156;
  }
  swift_release(v17);

  swift_release(v32);
  swift_errorRelease(v16);
  swift_release(v17);

  swift_release(v32);
  return swift_errorRelease(v16);
}

uint64_t sub_1001D8858()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_errorRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D8894()
{
  return sub_10003DE7C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001BA9C);
}

unint64_t sub_1001D88A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028FB00;
  if (!qword_10028FB00)
  {
    v1 = objc_opt_self(AABeneficiaryInfo);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028FB00);
  }
  return result;
}

uint64_t sub_1001D88E4(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(0, a1);
}

uint64_t sub_1001D890C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1001D8984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1001D3BD8(a1, v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001D89D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1001D8A08(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(_QWORD), uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  NSObject *v39;
  NSObject **v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  BOOL v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  BOOL v122;
  uint64_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  void *v130;
  id v131;
  uint8_t *v133;
  id v134;
  void *v135;
  NSObject **v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(_QWORD);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  _QWORD *v148;
  id v149;
  _QWORD *v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  id v157;
  unint64_t v158;

  v147 = a3;
  v152 = a2;
  v139 = type metadata accessor for SHA256(0);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139, v16);
  v137 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v145 = *(_QWORD *)(v18 - 8);
  v146 = v18;
  __chkstk_darwin(v18, v19);
  v144 = (char *)&v136 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (_QWORD *)swift_allocObject(&unk_10026EFE8, 48, 7);
  v25[2] = a7;
  v25[3] = a8;
  v142 = a9;
  v25[4] = a9;
  v25[5] = a10;
  v26 = (_QWORD *)swift_allocObject(&unk_10026F010, 56, 7);
  v26[2] = a4;
  v26[3] = a5;
  v26[4] = a6;
  v26[5] = sub_1001D96DC;
  v148 = v26;
  v26[6] = v25;
  sub_1001D88A8();
  v153 = a1;
  sub_100013B34(a1, (uint64_t)v24);
  v154 = a7;
  swift_retain_n(a7, 3);
  v27 = a8;
  v28 = a4;
  v29 = a6;
  swift_retain_n(a10, 3);
  v30 = v27;
  swift_errorRetain(v28);
  v149 = a5;
  swift_retain(v29);
  v150 = v25;
  swift_retain(v25);
  v31 = sub_100013BB4((uint64_t)v24);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A8A08);
  v34 = v31;
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(12, -1);
    v140 = v29;
    v141 = a10;
    v38 = (uint8_t *)v37;
    v136 = (NSObject **)swift_slowAlloc(8, -1);
    v143 = v33;
    *(_DWORD *)v38 = 138412290;
    v157 = v34;
    v39 = v34;
    v33 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158);
    v40 = v136;
    *v136 = v34;

    _os_log_impl((void *)&_mh_execute_header, v35, v36, "BeneficiaryInfo: %@", v38, 0xCu);
    v41 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v40, 1, v41);
    swift_slowDealloc(v40, -1, -1);
    v42 = v38;
    v43 = v154;
    v29 = v140;
    v44 = v141;
    swift_slowDealloc(v42, -1, -1);
    v45 = v152;
  }
  else
  {

    v35 = v34;
    v45 = v152;
    v43 = v154;
    v44 = a10;
  }

  v47 = *(_QWORD *)(v45 + 16);
  v151 = v30;
  if (v47 && (v46 = sub_10010AA48(v153), (v48 & 1) != 0))
  {
    v49 = *(_QWORD *)(v45 + 56) + 32 * v46;
    v50 = *(_QWORD *)(v49 + 16);
    v51 = *(_QWORD *)(v49 + 24);
    v52 = -[NSObject accessKey](v34, "accessKey", swift_bridgeObjectRetain(v51).n128_f64[0]);
    if (!v52
      || (v53 = v52,
          v54 = objc_msgSend(v52, "claimTokenString"),
          v53,
          !v54))
    {
      v94 = swift_bridgeObjectRelease(v51);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.error.getter();
      v92 = v44;
      if (os_log_type_enabled(v95, v96))
      {
        v97 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v97 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "Claim code hash was not found in local CK record.", v97, 2u);
        swift_slowDealloc(v97, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v99 = v98;
      v155 = 2102;
      v100 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v101 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v157, &v155, v100, v99, v101);
      v102 = v157;
      v103 = (void *)_convertErrorToNSError(_:)(v157);

      v91 = v154;
      swift_retain(v154);
      v93 = v151;
      v104 = v151;
      swift_retain(v92);
      v105 = v149;
      sub_100023A44(v103, v28, v149, v29, v91, v104, v142);
      swift_release(v148);

      swift_release(v91);
      swift_release(v92);
      swift_errorRelease(v28);
      swift_release(v150);
      v106 = v29;
      goto LABEL_26;
    }
    v152 = v50;
    v153 = v28;
    v147 = v34;
    v140 = v29;
    v55 = v33;
    v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v58 = v57;

    v59 = sub_1001AEE10(v56, v58);
    v61 = v60;
    v62 = (uint64_t)v137;
    SHA256.init()();
    sub_1001D3844(v62, v59, v61);
    v64 = v63;
    v66 = v65;
    sub_10000F494(v59, v61);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v62, v139);
    sub_1001D34B0(v64, v66);
    v68 = v67;
    v157 = (id)v67;
    v69 = sub_1000080B4((uint64_t *)&unk_10028E800);
    v70 = sub_10008685C();
    v71 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v69, v70);
    v73 = v72;
    swift_bridgeObjectRelease(v68);
    sub_10000F494(v64, v66);
    v74 = swift_bridgeObjectRetain_n(v73, 2);
    v143 = v55;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.debug.getter();
    v77 = os_log_type_enabled(v75, v76);
    v141 = v44;
    if (v77)
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = swift_slowAlloc(32, -1);
      v157 = (id)v79;
      *(_DWORD *)v78 = 136315138;
      swift_bridgeObjectRetain(v73);
      v155 = sub_1001DEF4C(v71, v73, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      swift_bridgeObjectRelease_n(v73, 3);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "localClaimCodeHash: %s", v78, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v73, 2);
    }
    v107 = v51;
    v108 = swift_bridgeObjectRetain_n(v51, 2);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = swift_slowAlloc(32, -1);
      v157 = (id)v112;
      *(_DWORD *)v111 = 136315138;
      swift_bridgeObjectRetain(v51);
      v113 = v152;
      v155 = sub_1001DEF4C(v152, v51, (uint64_t *)&v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156);
      swift_bridgeObjectRelease_n(v51, 3);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "idMS ClaimCode Hash: %s", v111, 0xCu);
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      v114 = v112;
      v107 = v51;
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v111, -1, -1);

      v115 = v154;
      v116 = v140;
      v92 = v141;
    }
    else
    {

      swift_bridgeObjectRelease_n(v51, 2);
      v115 = v154;
      v116 = v140;
      v92 = v141;
      v113 = v152;
    }
    v157 = (id)v71;
    v158 = v73;
    v155 = v113;
    v156 = v107;
    v117 = sub_10006B00C();
    v118 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v155, &type metadata for String, &type metadata for String, v117, v117);
    swift_bridgeObjectRelease(v73);
    v119 = swift_bridgeObjectRelease(v107);
    v120 = Logger.logObject.getter(v119);
    v121 = static os_log_type_t.debug.getter();
    v122 = os_log_type_enabled(v120, v121);
    v123 = v153;
    if (v118)
    {
      v93 = v151;
      v91 = v115;
      if (v122)
      {
        v124 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "🌧️ Claim code does not match.", v124, 2u);
        swift_slowDealloc(v124, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v126 = v125;
      v155 = 2100;
      v127 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v128 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v157, &v155, v127, v126, v128);
      v129 = v157;
      v130 = (void *)_convertErrorToNSError(_:)(v157);

      swift_retain(v115);
      v131 = v93;
      swift_retain(v92);
      v105 = v149;
      sub_100023A44(v130, v123, v149, v116, v115, v131, v142);
      swift_release(v148);

      swift_release(v115);
      swift_release(v92);
      swift_errorRelease(v123);
      swift_release(v150);
      v106 = v116;
LABEL_26:
      swift_release(v106);

      goto LABEL_27;
    }
    v93 = v151;
    v91 = v115;
    if (v122)
    {
      v133 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v133 = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "🌈 Claim code matches!", v133, 2u);
      swift_slowDealloc(v133, -1, -1);
    }

    swift_retain(v115);
    v134 = v93;
    swift_retain(v92);
    v135 = v149;
    sub_100023A44(0, v123, v149, v116, v115, v134, v142);
    swift_release(v148);

    swift_release(v115);
    swift_release(v92);
    swift_errorRelease(v123);
    swift_release(v150);
    swift_release(v116);

  }
  else
  {
    v80 = v29;
    v81 = v44;
    v82 = v43;
    v83 = Logger.logObject.getter(v46);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Claim code hash was not found in idMS response.", v85, 2u);
      swift_slowDealloc(v85, -1, -1);
    }

    v87 = (uint64_t)v144;
    v86 = v145;
    v88 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v144, v153, v146);
    v89 = swift_allocObject(&unk_10026F038, 32, 7);
    v90 = v148;
    *(_QWORD *)(v89 + 16) = sub_1001D88A4;
    *(_QWORD *)(v89 + 24) = v90;
    swift_retain(v90);
    sub_1001D5E98(v87, v147, (uint64_t)sub_1001DA268, v89);

    swift_release(v89);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v87, v88);
    swift_release(v90);
    swift_errorRelease(v28);
    swift_release(v150);
    swift_release(v80);

    v91 = v82;
    v92 = v81;
    v93 = v151;
  }
LABEL_27:
  swift_release_n(v92, 2);

  return swift_release_n(v91, 2);
}

uint64_t sub_1001D96A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D96DC()
{
  uint64_t v0;

  return sub_10001BD04(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t sub_1001D96EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D9714()
{
  return sub_10003DE7C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B450);
}

uint64_t sub_1001D9728()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D9764()
{
  return sub_10003DE7C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10001B444);
}

uint64_t sub_1001D9774()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D97B0(uint64_t a1, void *a2)
{
  uint64_t v2;

  return sub_10001CDB8(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(uint64_t (**)(_QWORD))(v2 + 40));
}

void sub_1001D97C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint8_t *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  BOOL v65;
  uint8_t *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint8_t *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  BOOL v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  uint8_t *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  id v123;
  unint64_t v124;

  v120 = a3;
  v11 = type metadata accessor for SHA256(0);
  v113 = *(_QWORD *)(v11 - 8);
  v114 = v11;
  __chkstk_darwin(v11, v12);
  v112 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v119 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v118 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (_QWORD *)swift_allocObject(&unk_10026F150, 40, 7);
  v21[2] = a4;
  v21[3] = a5;
  v21[4] = a6;
  sub_1001D88A8();
  sub_100013B34(a1, (uint64_t)v20);
  swift_unknownObjectRetain(a4);
  v22 = sub_100013BB4((uint64_t)v20);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v23, (uint64_t)qword_1002A8A08);
  v25 = v22;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v116 = v21;
    v28 = swift_slowAlloc(12, -1);
    v111 = a1;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc(8, -1);
    v117 = v24;
    v109 = (_QWORD *)v30;
    v115 = a5;
    *(_DWORD *)v29 = 138412290;
    v110 = a2;
    v123 = v25;
    v31 = v25;
    a2 = v110;
    a5 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124);
    v32 = v109;
    *v109 = v25;

    v21 = v116;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "BeneficiaryInfo: %@", v29, 0xCu);
    v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v32, 1, v33);
    v34 = v32;
    v24 = v117;
    swift_slowDealloc(v34, -1, -1);
    v35 = v29;
    a1 = v111;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {

    v26 = v25;
  }

  if (*(_QWORD *)(a2 + 16) && (v36 = sub_10010AA48(a1), (v37 & 1) != 0))
  {
    v38 = *(_QWORD *)(a2 + 56) + 32 * v36;
    v39 = *(void **)(v38 + 16);
    v40 = *(_QWORD *)(v38 + 24);
    v41 = -[NSObject accessKey](v25, "accessKey", swift_bridgeObjectRetain(v40).n128_f64[0]);
    if (v41
      && (v42 = v41,
          v43 = objc_msgSend(v41, "claimTokenString"),
          v42,
          v43))
    {
      v120 = v39;
      v115 = a5;
      v116 = v21;
      v118 = (char *)v25;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v47 = sub_1001AEE10(v44, v46);
      v49 = v48;
      v50 = (uint64_t)v112;
      SHA256.init()(v47);
      sub_1001D3844(v50, v47, v49);
      v52 = v51;
      v54 = v53;
      sub_10000F494(v47, v49);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v50, v114);
      sub_1001D34B0(v52, v54);
      v56 = v55;
      v123 = (id)v55;
      v57 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v58 = sub_10008685C();
      v59 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v57, v58);
      v61 = v60;
      swift_bridgeObjectRelease(v56);
      sub_10000F494(v52, v54);
      v62 = swift_bridgeObjectRetain_n(v61, 2);
      v117 = v24;
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter(v63);
      v65 = os_log_type_enabled(v63, v64);
      v108 = a4;
      v119 = v59;
      if (v65)
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v123 = (id)v67;
        *(_DWORD *)v66 = 136315138;
        swift_bridgeObjectRetain(v61);
        v121 = sub_1001DEF4C(v59, v61, (uint64_t *)&v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
        swift_bridgeObjectRelease_n(v61, 3);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "localClaimCodeHash: %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v61, 2);
      }
      v86 = swift_bridgeObjectRetain_n(v40, 2);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.debug.getter(v87);
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        v90 = swift_slowAlloc(32, -1);
        v123 = (id)v90;
        *(_DWORD *)v89 = 136315138;
        swift_bridgeObjectRetain(v40);
        v91 = (uint64_t)v120;
        v121 = sub_1001DEF4C((uint64_t)v120, v40, (uint64_t *)&v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
        swift_bridgeObjectRelease_n(v40, 3);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "idMS ClaimCode Hash: %s", v89, 0xCu);
        swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v89, -1, -1);

        v92 = v116;
        v93 = v108;
      }
      else
      {

        swift_bridgeObjectRelease_n(v40, 2);
        v92 = v116;
        v93 = v108;
        v91 = (uint64_t)v120;
      }
      v123 = (id)v119;
      v124 = v61;
      v121 = v91;
      v122 = v40;
      v94 = sub_10006B00C();
      v95 = StringProtocol.caseInsensitiveCompare<A>(_:)(&v121, &type metadata for String, &type metadata for String, v94, v94);
      swift_bridgeObjectRelease(v61);
      v96 = swift_bridgeObjectRelease(v40);
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.debug.getter(v97);
      v99 = os_log_type_enabled(v97, v98);
      if (v95)
      {
        if (v99)
        {
          v100 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v100 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "🌧️ Claim code does not match.", v100, 2u);
          swift_slowDealloc(v100, -1, -1);
        }

        type metadata accessor for InheritanceError(0);
        v102 = v101;
        v121 = 2100;
        v103 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v104 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        _BridgedStoredNSError.init(_:userInfo:)(&v123, &v121, v103, v102, v104);
        v105 = v123;
        v106 = (void *)_convertErrorToNSError(_:)(v123);

        sub_1000DFF0C(0, v106, v93);
        swift_release(v92);

      }
      else
      {
        if (v99)
        {
          v107 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v107 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "🌈 Claim code matches!", v107, 2u);
          swift_slowDealloc(v107, -1, -1);
        }

        sub_1000DFF0C(1, 0, v93);
        swift_release(v92);
      }

    }
    else
    {
      v76 = swift_bridgeObjectRelease(v40);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v79 = 0;
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Claim code hash was not found in local CK record.", v79, 2u);
        swift_slowDealloc(v79, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v81 = v80;
      v121 = 2102;
      v82 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v83 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v123, &v121, v82, v81, v83);
      v84 = v123;
      v85 = (void *)_convertErrorToNSError(_:)(v123);

      sub_1000DFF0C(0, v85, a4);
      swift_release(v21);

    }
  }
  else
  {
    v68 = Logger.logObject.getter(v36);
    v69 = static os_log_type_t.error.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = a1;
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Claim code hash was not found in idMS response.", v71, 2u);
      v72 = v71;
      a1 = v70;
      swift_slowDealloc(v72, -1, -1);
    }

    v74 = v118;
    v73 = v119;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, a1, v14);
    v75 = swift_allocObject(&unk_10026F178, 32, 7);
    *(_QWORD *)(v75 + 16) = sub_1001DA24C;
    *(_QWORD *)(v75 + 24) = v21;
    swift_retain(v21);
    sub_1001D5E98((uint64_t)v74, v120, (uint64_t)sub_1001DA268, v75);

    swift_release(v75);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v14);
    swift_release(v21);
  }
}

uint64_t sub_1001DA228()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001DA24C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return sub_1000D5A58(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001DA26C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t (**v79)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t (**v93)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t updated;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121[5];

  v117 = a3;
  v118 = a4;
  v116 = a2;
  v7 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v7, v8);
  v110 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v10, v11);
  v109 = (char *)&v102 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  v104 = *(_QWORD *)(updated - 8);
  v13 = *(_QWORD *)(v104 + 64);
  v15 = __chkstk_darwin(updated, v14);
  v106 = (uint64_t)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15, v16);
  v119 = (uint64_t)&v102 - v18;
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)&v102 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v102 - v24;
  v111 = type metadata accessor for CustodianRecord(0);
  v105 = *(_QWORD *)(v111 - 8);
  v26 = *(_QWORD *)(v105 + 64);
  v28 = __chkstk_darwin(v111, v27);
  v108 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28, v29);
  v112 = (uint64_t)&v102 - v31;
  v33 = __chkstk_darwin(v30, v32);
  v107 = (uint64_t)&v102 - v34;
  __chkstk_darwin(v33, v35);
  v37 = (char *)&v102 - v36;
  v38 = sub_1000080B4(&qword_10028D5D0);
  v40 = __chkstk_darwin(v38, v39);
  v42 = (uint64_t *)((char *)&v102 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v40, v43);
  v45 = (uint64_t *)((char *)&v102 - v44);
  sub_1001A78F4(a1, (uint64_t)&v102 - v44);
  if (swift_getEnumCaseMultiPayload(v45, v38) == 1)
  {
    v46 = *v45;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v47 = type metadata accessor for Logger(0);
    sub_100005288(v47, (uint64_t)qword_1002A89D8);
    v48 = swift_errorRetain(v46);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = (uint64_t *)swift_slowAlloc(8, -1);
      v113 = a5;
      *(_DWORD *)v51 = 138412290;
      v53 = _convertErrorToNSError(_:)(v46);
      v120 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121);
      *v52 = v53;
      swift_errorRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Error fetching custodianship %@", v51, 0xCu);
      v54 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v52, 1, v54);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v51, -1, -1);
    }
    else
    {
      swift_errorRelease(v46);
    }

    *v42 = v46;
    swift_storeEnumTagMultiPayload(v42, v38, 1);
    swift_errorRetain(v46);
    ((void (*)(_QWORD *))v118)(v42);
    swift_errorRelease(v46);
    return sub_1001A793C((uint64_t)v42);
  }
  else
  {
    sub_10003B730((uint64_t)v45, (uint64_t)v37, type metadata accessor for CustodianRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v113 = a5;
    v55 = type metadata accessor for Logger(0);
    sub_100005288(v55, (uint64_t)qword_1002A89D8);
    v56 = sub_100027FE8(v116, (uint64_t)v25, type metadata accessor for CustodianStatusUpdateRequest);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.info.getter();
    v59 = os_log_type_enabled(v57, v58);
    v115 = v37;
    if (v59)
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v60 = 134217984;
      v61 = *(_QWORD *)&v25[*(int *)(updated + 20)];
      sub_100028388((uint64_t)v25, type metadata accessor for CustodianStatusUpdateRequest);
      v120 = v61;
      v37 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Custodian successfully fetched!. Updating status as %ld", v60, 0xCu);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v25, type metadata accessor for CustodianStatusUpdateRequest);
    }

    v63 = v116;
    sub_100027FE8(v116, (uint64_t)v22, type metadata accessor for CustodianStatusUpdateRequest);
    sub_100027FE8((uint64_t)v22, v119, type metadata accessor for CustodianStatusUpdateRequest);
    v64 = *(unsigned __int8 *)(v104 + 80);
    v65 = (v64 + 16) & ~v64;
    v66 = v64 | 7;
    v104 = swift_allocObject(&unk_10026F1B0, v65 + v13, v64 | 7);
    sub_10003B730((uint64_t)v22, v104 + v65, type metadata accessor for CustodianStatusUpdateRequest);
    v67 = v117;
    sub_100006CA4(v117 + 56, (uint64_t)&v120);
    v103 = sub_10000732C(&v120, v121[2]);
    v68 = v106;
    sub_100027FE8(v63, v106, type metadata accessor for CustodianStatusUpdateRequest);
    v69 = v107;
    sub_100027FE8((uint64_t)v37, v107, type metadata accessor for CustodianRecord);
    v70 = (v65 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v71 = *(unsigned __int8 *)(v105 + 80);
    v72 = (v70 + v71 + 8) & ~v71;
    v116 = v26 + 7;
    v73 = (v26 + 7 + v72) & 0xFFFFFFFFFFFFFFF8;
    v74 = (v73 + 23) & 0xFFFFFFFFFFFFFFF8;
    v75 = swift_allocObject(&unk_10026F1D8, v74 + 16, v66 | v71);
    sub_10003B730(v68, v75 + v65, type metadata accessor for CustodianStatusUpdateRequest);
    *(_QWORD *)(v75 + v70) = v67;
    v76 = v75;
    sub_10003B730(v69, v75 + v72, type metadata accessor for CustodianRecord);
    v77 = (_QWORD *)(v75 + v73);
    v78 = v113;
    *v77 = v118;
    v77[1] = v78;
    v79 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v75 + v74);
    v80 = v104;
    *v79 = sub_1001DBA0C;
    v79[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v80;
    v81 = *v103;
    v118 = sub_10000732C((_QWORD *)(*v103 + 56), *(_QWORD *)(*v103 + 80));
    v82 = (uint64_t)v115;
    sub_100027FE8((uint64_t)v115, v69, type metadata accessor for CustodianRecord);
    v83 = *(_QWORD *)(v119 + *(int *)(updated + 20));
    v84 = type metadata accessor for UUID(0);
    v85 = v109;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v109, 1, 1, v84);
    v86 = type metadata accessor for Date(0);
    v87 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v110, 1, 1, v86);
    swift_retain(v80);
    swift_retain(v117);
    swift_retain(v78);
    v101 = (uint64_t)v85;
    v88 = v112;
    sub_100093290(v69, 0, 0, v83, 0, 0, 0xF000000000000000, 2u, v112, v101, 0, 0, v87, 0);
    v89 = v108;
    sub_100027FE8(v82, v108, type metadata accessor for CustodianRecord);
    v90 = (v71 + 48) & ~v71;
    v91 = (v116 + v90) & 0xFFFFFFFFFFFFFFF8;
    v92 = (_QWORD *)swift_allocObject(&unk_10026F200, v91 + 16, v71 | 7);
    v92[2] = v81;
    v92[3] = sub_1001DBC28;
    v92[4] = v76;
    v92[5] = 0;
    sub_10003B730(v89, (uint64_t)v92 + v90, type metadata accessor for CustodianRecord);
    v93 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v92 + v91);
    *v93 = sub_1001DBA0C;
    v93[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v80;
    v94 = qword_10028AF00;
    swift_retain(v80);
    swift_retain(v81);
    swift_retain(v76);
    if (v94 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(v88 + *(int *)(v111 + 48)) == 1)
    {
      v95 = (uint64_t)v115;
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v96 = &qword_1002A8C80;
    }
    else
    {
      v95 = (uint64_t)v115;
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v96 = &qword_1002A8C70;
    }
    v98 = *v96;
    v97 = v96[1];
    swift_bridgeObjectRetain(v97);
    v99 = sub_1001FD4C0(v98, v97);
    v100 = objc_msgSend(v99, "privateCloudDatabase");
    swift_bridgeObjectRelease(v97);

    sub_100054464(v88, v100, (uint64_t)sub_10011D320, (uint64_t)v92);
    swift_release(v92);

    sub_100028388(v88, type metadata accessor for CustodianRecord);
    swift_release(v80);
    swift_release(v76);
    sub_100028388(v119, type metadata accessor for CustodianStatusUpdateRequest);
    sub_100006F58(&v120);
    return sub_100028388(v95, type metadata accessor for CustodianRecord);
  }
}

uint64_t sub_1001DABF4()
{
  _QWORD *v0;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  sub_100006F58(v0 + 17);
  sub_100006F58(v0 + 22);
  return swift_deallocClassInstance(v0, 216, 7);
}

uint64_t type metadata accessor for CustodianStatusUpdater()
{
  return objc_opt_self(_TtC13appleaccountd22CustodianStatusUpdater);
}

uint64_t sub_1001DAC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v17, v18);
  v19 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for CustodianStatusUpdateRequest(0) + 20));
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v13, 1, 1, v20);
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v9, 1, 1, v21);
  return sub_100093290((uint64_t)v17, 0, 0, v19, 0, 0, 0xF000000000000000, 2u, a3, (uint64_t)v13, 0, 0, (uint64_t)v9, 0);
}

uint64_t type metadata accessor for CustodianStatusUpdateRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1002984D0;
  if (!qword_1002984D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianStatusUpdateRequest);
  return result;
}

uint64_t sub_1001DAE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void (*v46)(uint64_t *);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  _BOOL8 v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t updated;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[2];
  char v107[16];

  v89 = a8;
  v90 = a7;
  v98 = a4;
  v99 = a2;
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  v93 = *(_QWORD *)(updated - 8);
  __chkstk_darwin(updated, v12);
  v94 = v13;
  v95 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecord(0);
  v91 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v91 + 64);
  v17 = __chkstk_darwin(v14, v16);
  v96 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17, v18);
  v92 = (uint64_t)&v84 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v97 = (uint64_t)&v84 - v23;
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v84 - v25;
  v27 = sub_1000080B4(&qword_10028D5D0);
  v29 = __chkstk_darwin(v27, v28);
  v31 = (uint64_t *)((char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v29, v32);
  v34 = (uint64_t *)((char *)&v84 - v33);
  sub_1001A78F4(a1, (uint64_t)&v84 - v33);
  v100 = v27;
  if (swift_getEnumCaseMultiPayload(v34, v27) != 1)
  {
    sub_10003B730((uint64_t)v34, (uint64_t)v26, type metadata accessor for CustodianRecord);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v51 = type metadata accessor for Logger(0);
    v52 = sub_100005288(v51, (uint64_t)qword_1002A89D8);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.info.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = v99;
    if (v55)
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Custodianship record updated!", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    v58 = *(_QWORD *)(v56 + *(int *)(updated + 20));
    switch(v58)
    {
      case 4:
        v59 = a3 + 136;
        break;
      case 3:
        v59 = a3 + 176;
        break;
      case 2:
        v59 = a3 + 96;
        break;
      default:
LABEL_26:
        objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
        sub_100027FE8((uint64_t)v26, (uint64_t)v31, type metadata accessor for CustodianRecord);
        swift_storeEnumTagMultiPayload(v31, v100, 0);
        a5(v31);
        sub_1001A793C((uint64_t)v31);
        return sub_100028388((uint64_t)v26, type metadata accessor for CustodianRecord);
    }
    sub_100006CA4(v59, (uint64_t)&v102);
    v82 = v104;
    v83 = v105;
    sub_10000732C(&v102, v104);
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v83 + 8))(v98, *(_QWORD *)(v98 + *(int *)(v14 + 36)), *(unsigned __int8 *)(v56 + *(int *)(updated + 24)), v82, v83);
    sub_100006F58(&v102);
    goto LABEL_26;
  }
  v35 = *v34;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100005288(v36, (uint64_t)qword_1002A89D8);
  v38 = swift_errorRetain(v35);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v88 = a6;
    v41 = swift_slowAlloc(12, -1);
    v87 = a3;
    v42 = (uint8_t *)v41;
    v85 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v42 = 138412290;
    v43 = _convertErrorToNSError(_:)(v35);
    v86 = v37;
    v44 = v31;
    v45 = v35;
    v46 = a5;
    v47 = v43;
    v102 = v43;
    a6 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
    v48 = v85;
    *v85 = v47;
    a5 = v46;
    v35 = v45;
    v31 = v44;
    swift_errorRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error updating custodianship %@", v42, 0xCu);
    v49 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v48, 1, v49);
    swift_slowDealloc(v48, -1, -1);
    v50 = v42;
    a3 = v87;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    swift_errorRelease(v35);
  }

  swift_getErrorValue(v35, v107, v106);
  v60 = (void *)sub_10015D168(v106[1]);
  if (!v60)
    goto LABEL_22;
  v61 = v60;
  v62 = sub_10015D160(v60);
  if (!v62 || *(_QWORD *)(v99 + *(int *)(updated + 20)) != 4)
  {

LABEL_22:
    *v31 = v35;
    swift_storeEnumTagMultiPayload(v31, v100, 1);
    swift_errorRetain(v35);
    a5(v31);
    swift_errorRelease(v35);
    return sub_1001A793C((uint64_t)v31);
  }
  v100 = v35;
  updated = (uint64_t)a5;
  v88 = a6;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.error.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "CKError Unknown Item while removing custodian. Continuing to update local record.", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
  }

  v67 = v97;
  v66 = v98;
  v90(v98);
  sub_100006CA4(a3 + 56, (uint64_t)&v102);
  v90 = (void (*)(uint64_t))sub_10000732C(&v102, v104);
  v68 = v92;
  sub_100027FE8(v66, v92, type metadata accessor for CustodianRecord);
  v69 = v95;
  sub_100027FE8(v99, v95, type metadata accessor for CustodianStatusUpdateRequest);
  sub_100027FE8(v67, v96, type metadata accessor for CustodianRecord);
  v70 = *(unsigned __int8 *)(v91 + 80);
  v71 = (v70 + 24) & ~v70;
  v72 = *(unsigned __int8 *)(v93 + 80);
  v73 = (v15 + v72 + v71) & ~v72;
  v74 = a3;
  v75 = (v94 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = (v70 + v75 + 16) & ~v70;
  v77 = swift_allocObject(&unk_10026F228, v76 + v15, v70 | v72 | 7);
  *(_QWORD *)(v77 + 16) = v74;
  sub_10003B730(v68, v77 + v71, type metadata accessor for CustodianRecord);
  sub_10003B730(v69, v77 + v73, type metadata accessor for CustodianStatusUpdateRequest);
  v78 = (uint64_t *)(v77 + v75);
  v79 = v88;
  *v78 = updated;
  v78[1] = v79;
  sub_10003B730(v96, v77 + v76, type metadata accessor for CustodianRecord);
  sub_10000732C((_QWORD *)(*(_QWORD *)v90 + 16), *(_QWORD *)(*(_QWORD *)v90 + 40));
  swift_retain(v74);
  swift_retain(v79);
  v80 = v97;
  sub_10004E664(v97, 0, 2, (uint64_t)sub_1001DC0B8, v77);

  swift_release(v77);
  swift_errorRelease(v100);
  sub_100028388(v80, type metadata accessor for CustodianRecord);
  return sub_100006F58(&v102);
}

uint64_t sub_1001DB5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t updated;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v48 = a7;
  v49 = a6;
  v12 = sub_1000080B4(&qword_10028D5D0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (uint64_t *)((char *)&v43 - v18);
  sub_1001A78F4(a1, (uint64_t)&v43 - v18);
  if (swift_getEnumCaseMultiPayload(v19, v12) == 1)
  {
    v47 = v12;
    v20 = *v19;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89D8);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v44 = a4;
      v45 = a2;
      v25 = a3;
      v26 = swift_slowAlloc(12, -1);
      v46 = a5;
      v27 = (uint8_t *)v26;
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      swift_errorRetain(v20);
      v29 = _swift_stdlib_bridgeErrorToNSError(v20);
      v50 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      v30 = v28;
      *v28 = v29;
      a3 = v25;
      a4 = v44;
      a2 = v45;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Local record update failed with error %@. Continuing to process decline status.", v27, 0xCu);
      v31 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v30, 1, v31);
      swift_slowDealloc(v30, -1, -1);
      v32 = v27;
      a5 = v46;
      swift_slowDealloc(v32, -1, -1);

      swift_errorRelease(v20);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
    v12 = v47;
  }
  else
  {
    sub_1001A793C((uint64_t)v19);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Local record updated. Continuing to process decline status.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

  }
  sub_100006CA4(a2 + 136, (uint64_t)&v50);
  v38 = v52;
  v39 = v53;
  sub_10000732C(&v50, v52);
  v40 = *(_QWORD *)(a3 + *(int *)(type metadata accessor for CustodianRecord(0) + 36));
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 8))(a3, v40, *(unsigned __int8 *)(a4 + *(int *)(updated + 24)), v38, v39);
  sub_100006F58(&v50);
  objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
  sub_100027FE8(v48, (uint64_t)v16, type metadata accessor for CustodianRecord);
  swift_storeEnumTagMultiPayload(v16, v12, 0);
  a5(v16);
  return sub_1001A793C((uint64_t)v16);
}

uint64_t sub_1001DB99C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  v6 = v0 + v3;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1001DBA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8) + 80);
  return sub_1001DAC58(a1, v2 + ((v5 + 16) & ~v5), a2);
}

uint64_t sub_1001DBA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;

  v1 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (int *)type metadata accessor for CustodianRecord(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v7 + 8) & ~v7;
  v20 = *(_QWORD *)(v6 + 64);
  v9 = v0 + v3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  swift_release(*(_QWORD *)(v0 + v4));
  v13 = v0 + v8;
  v12(v0 + v8, v10);
  v12(v0 + v8 + v5[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v5[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v5[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8 + v5[8] + 8));
  v14 = (uint64_t *)(v0 + v8 + v5[10]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_10000F494(*v14, v15);
  sub_10000F494(*(_QWORD *)(v13 + v5[11]), *(_QWORD *)(v13 + v5[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v5[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v5[14] + 8));
  v16 = v13 + v5[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10))
    v12(v16, v10);
  v17 = (v20 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v17 + 8));
  swift_release(*(_QWORD *)(v0 + v18 + 8));
  return swift_deallocObject(v0, v18 + 16, v2 | v7 | 7);
}

uint64_t sub_1001DBC28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001DAE18(a1, v1 + v4, *(_QWORD *)(v1 + v5), v1 + v7, *(void (**)(uint64_t *))(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(void (**)(uint64_t))(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001DBCC8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1001DBE3C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = v5;
  v7 = (v4 + v5 + v23) & ~v23;
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = v0 + v4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v12(v9 + v1[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[8] + 8));
  v13 = (uint64_t *)(v9 + v1[10]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);
  v15 = (v3 + v8 + 16) & ~v3;
  sub_10000F494(*(_QWORD *)(v9 + v1[11]), *(_QWORD *)(v9 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[14] + 8));
  v16 = v9 + v1[16];
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v17(v16, 1, v10))
    v12(v16, v10);
  v12(v0 + v7, v10);
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  v18 = v0 + v15;
  v12(v0 + v15, v10);
  v12(v0 + v15 + v1[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v1[8] + 8));
  v19 = (uint64_t *)(v0 + v15 + v1[10]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10000F494(*v19, v20);
  sub_10000F494(*(_QWORD *)(v18 + v1[11]), *(_QWORD *)(v18 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v18 + v1[14] + 8));
  v21 = v18 + v1[16];
  if (!v17(v21, 1, v10))
    v12(v21, v10);
  return swift_deallocObject(v0, v15 + v24, v3 | v23 | 7);
}

uint64_t sub_1001DC0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001DB5C0(a1, *(_QWORD *)(v1 + 16), v1 + v5, v1 + v8, *(void (**)(_QWORD))(v1 + v9), *(_QWORD *)(v1 + v9 + 8), v1 + ((v4 + v9 + 16) & ~v4));
}

_QWORD *sub_1001DC154(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  }
  return a1;
}

uint64_t sub_1001DC1E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001DC218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1001DC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001DC2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1001DC348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_1001DC3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DC3B8);
}

uint64_t sub_1001DC3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1001DC444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DC450);
}

uint64_t sub_1001DC450(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_1001DC4C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_100221F80;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1001DC548(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

void sub_1001DC59C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)(a1);
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

uint64_t InheritanceSecurityController.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v2);
  *(_QWORD *)(v1 + 16) = objc_msgSend(objc_allocWithZone((Class)CDPInheritanceTrustController), "init");
  return v1;
}

uint64_t InheritanceSecurityManager.__allocating_init(controller:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_allocObject(v1, 24, 7);
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t InheritanceSecurityManager.init(controller:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t InheritanceSecurityManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void InheritanceSecurityManager.createAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v6 = *(void **)(v3 + 16);
  v9[4] = a2;
  v10 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100043E24;
  v9[3] = &unk_10026F240;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain(a3);
  swift_release(v8);
  objc_msgSend(v6, "createInheritanceAccessKeyForContact:completion:", a1, v7);
  _Block_release(v7);
}

void InheritanceSecurityManager.removeAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001DCC44(a1, a2, a3, (uint64_t)&unk_10026F268, (SEL *)&selRef_removeInheritanceAccessKeyForBeneficiaryID_completion_);
}

void InheritanceSecurityManager.preflightInheritanceRecovery(for:accessKey:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  Class isa;
  void *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v8 = *(void **)(v4 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v12[4] = a3;
  v13 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1001DC548;
  v12[3] = &unk_10026F290;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain(a4);
  swift_release(v11);
  objc_msgSend(v8, "preflightInheritanceRecoveryForBeneficiaryID:accessKey:completion:", isa, a2, v10);
  _Block_release(v10);

}

void InheritanceSecurityManager.checkInheritanceKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001DCC44(a1, a2, a3, (uint64_t)&unk_10026F2B8, (SEL *)&selRef_checkInheritanceKeyForBeneficiaryID_completion_);
}

void sub_1001DCC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  void *v10;
  Class isa;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v10 = *(void **)(v5 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v14[4] = a2;
  v15 = a3;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1001DC548;
  v14[3] = a4;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(a3);
  swift_release(v13);
  objc_msgSend(v10, *a5, isa, v12);
  _Block_release(v12);

}

uint64_t InheritanceSecurityController.init()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone((Class)CDPInheritanceTrustController), "init");
  return v0;
}

void InheritanceSecurityController.createAccessKey(for:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  Class isa;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone((Class)CDPContext), "init");
  v14 = objc_msgSend(a1, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  objc_msgSend(v13, "setBeneficiaryIdentifier:", isa);

  v16 = *(void **)(v4 + 16);
  v17 = swift_allocObject(&unk_10026F2F0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  aBlock[4] = sub_10002E4D0;
  v21 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100043E24;
  aBlock[3] = &unk_10026F308;
  v18 = _Block_copy(aBlock);
  v19 = v21;
  swift_retain(a3);
  swift_release(v19);
  objc_msgSend(v16, "createInheritanceKeyWithContext:completion:", v13, v18);
  _Block_release(v18);

}

uint64_t sub_1001DD05C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void InheritanceSecurityController.removeAccessKey(for:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v7;
  Class isa;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v4 = v3;
  v7 = objc_msgSend(objc_allocWithZone((Class)CDPContext), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v7, "setBeneficiaryIdentifier:", isa);

  v9 = *(void **)(v4 + 16);
  v10 = swift_allocObject(&unk_10026F340, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v13[4] = sub_10002E4D0;
  v14 = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10009ADD4;
  v13[3] = &unk_10026F358;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain(a3);
  swift_release(v12);
  objc_msgSend(v9, "deleteInheritanceAccessKeyWithContext:completion:", v7, v11);
  _Block_release(v11);

}

void InheritanceSecurityController.preflightInheritanceRecovery(for:accessKey:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void **v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  id v46;
  id v47;
  NSString v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  unsigned __int8 *v66;
  unsigned int v67;
  uint64_t v68;
  id v69;
  void *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  uint64_t v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  void **aBlock;
  uint64_t v101;
  void (*v102)(uint64_t, void *);
  void *v103;
  uint64_t (*v104)();
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v5 = v4;
  v97 = a2;
  v99 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v96 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v90 - v14;
  v16 = sub_1000080B4(&qword_10028FA50);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v5 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v16);
  Dependency.wrappedValue.getter(&aBlock, v16);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v21 = objc_msgSend(*(id *)(*sub_10000732C(&aBlock, (uint64_t)v103) + 16), "aa_primaryAppleAccount");
  sub_100006F58(&aBlock);
  if (v21)
  {
    v98 = v21;
    v95 = v10;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89F0);
    v94 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v23 = v94(v15, v99, v8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(12, -1);
      v92 = a4;
      v93 = a3;
      v27 = (uint8_t *)v26;
      v28 = (void **)swift_slowAlloc(32, -1);
      v91 = v5;
      v29 = v28;
      aBlock = v28;
      *(_DWORD *)v27 = 136315138;
      v30 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v30);
      v33 = v32;
      v106 = sub_1001DEF4C(v31, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Preflighting Inheritance Recovery for beneficiaryID: %s", v27, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      v34 = v29;
      v5 = v91;
      swift_slowDealloc(v34, -1, -1);
      v35 = v27;
      a4 = v92;
      a3 = v93;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }

    v46 = v98;
    v47 = objc_msgSend(v98, "aa_altDSID");
    v48 = v47;
    if (v47)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v50 = v49;

      v48 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v50);
    }
    v51 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForAccountWithAltDSID:", v48);

    if (!v51)
    {

      return;
    }
    v52 = objc_msgSend(v46, "aa_personID");
    if (!v52)
      goto LABEL_78;
    v53 = v52;
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v56 = v55;

    v57 = HIBYTE(v56) & 0xF;
    v58 = v54 & 0xFFFFFFFFFFFFLL;
    if ((v56 & 0x2000000000000000) != 0)
      v59 = HIBYTE(v56) & 0xF;
    else
      v59 = v54 & 0xFFFFFFFFFFFFLL;
    if (!v59)
    {
      swift_bridgeObjectRelease(v56);
      v65 = (void (*)(char *, uint64_t, uint64_t))v94;
      goto LABEL_53;
    }
    if ((v56 & 0x1000000000000000) != 0)
    {
      v61 = (uint64_t)sub_10012C5D0(v54, v56, 10);
      v89 = v88;
      swift_bridgeObjectRelease(v56);
      v65 = (void (*)(char *, uint64_t, uint64_t))v94;
      if ((v89 & 1) != 0)
        goto LABEL_53;
      goto LABEL_52;
    }
    if ((v56 & 0x2000000000000000) == 0)
    {
      if ((v54 & 0x1000000000000000) != 0)
        v60 = (unsigned __int8 *)((v56 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v60 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v54, v56);
      v61 = (uint64_t)sub_10012C5BC(v60, v58, 10);
      v63 = v62 & 1;
      goto LABEL_50;
    }
    aBlock = (void **)v54;
    v101 = v56 & 0xFFFFFFFFFFFFFFLL;
    if (v54 == 43)
    {
      if (!v57)
      {
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
        return;
      }
      if (v57 == 1 || (BYTE1(v54) - 48) > 9u)
        goto LABEL_47;
      v61 = (BYTE1(v54) - 48);
      if (v57 == 2)
      {
LABEL_49:
        v63 = 0;
        goto LABEL_50;
      }
      if ((BYTE2(v54) - 48) > 9u)
        goto LABEL_47;
      v61 = 10 * (BYTE1(v54) - 48) + (BYTE2(v54) - 48);
      v64 = v57 - 3;
      v65 = (void (*)(char *, uint64_t, uint64_t))v94;
      if (v64)
      {
        v66 = (unsigned __int8 *)&aBlock + 3;
        while (1)
        {
          v67 = *v66 - 48;
          if (v67 > 9)
            goto LABEL_71;
          v68 = 10 * v61;
          if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
            goto LABEL_71;
          v61 = v68 + v67;
          if (__OFADD__(v68, v67))
            goto LABEL_71;
          v63 = 0;
          ++v66;
          if (!--v64)
            goto LABEL_51;
        }
      }
    }
    else
    {
      if (v54 == 45)
      {
        if (v57)
        {
          if (v57 != 1 && (BYTE1(v54) - 48) <= 9u)
          {
            if (v57 == 2)
            {
              v63 = 0;
              v61 = -(uint64_t)(BYTE1(v54) - 48);
LABEL_50:
              v65 = (void (*)(char *, uint64_t, uint64_t))v94;
              goto LABEL_51;
            }
            if ((BYTE2(v54) - 48) <= 9u)
            {
              v61 = -10 * (BYTE1(v54) - 48) - (BYTE2(v54) - 48);
              v84 = v57 - 3;
              v65 = (void (*)(char *, uint64_t, uint64_t))v94;
              if (!v84)
                goto LABEL_64;
              v85 = (unsigned __int8 *)&aBlock + 3;
              while (1)
              {
                v86 = *v85 - 48;
                if (v86 > 9)
                  break;
                v87 = 10 * v61;
                if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
                  break;
                v61 = v87 - v86;
                if (__OFSUB__(v87, v86))
                  break;
                v63 = 0;
                ++v85;
                if (!--v84)
                  goto LABEL_51;
              }
LABEL_71:
              v61 = 0;
              v63 = 1;
LABEL_51:
              swift_bridgeObjectRelease(v56);
              if ((v63 & 1) != 0)
              {
LABEL_53:
                v70 = *(void **)(v5 + 16);
                v71 = v96;
                v65(v96, v99, v8);
                v72 = *(unsigned __int8 *)(v9 + 80);
                v73 = (v72 + 16) & ~v72;
                v74 = v9;
                v75 = (v95 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
                v76 = swift_allocObject(&unk_10026F390, v75 + 16, v72 | 7);
                (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v76 + v73, v71, v8);
                v77 = (_QWORD *)(v76 + v75);
                *v77 = a3;
                v77[1] = a4;
                v104 = sub_1001DF5A0;
                v105 = v76;
                aBlock = _NSConcreteStackBlock;
                v101 = 1107296256;
                v102 = sub_1001DC548;
                v103 = &unk_10026F3A8;
                v78 = _Block_copy(&aBlock);
                v79 = v105;
                swift_retain(a4);
                swift_release(v79);
                objc_msgSend(v70, "validateAccessKey:withContext:completion:", v97, v51, v78);
                _Block_release(v78);

                return;
              }
LABEL_52:
              v69 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v61);
              objc_msgSend(v51, "setDsid:", v69);

              goto LABEL_53;
            }
          }
LABEL_47:
          v61 = 0;
          v63 = 1;
          goto LABEL_50;
        }
        __break(1u);
        goto LABEL_77;
      }
      if (!v57 || (v54 - 48) > 9u)
        goto LABEL_47;
      v61 = (v54 - 48);
      if (v57 == 1)
        goto LABEL_49;
      if ((BYTE1(v54) - 48) > 9u)
        goto LABEL_47;
      v61 = 10 * (v54 - 48) + (BYTE1(v54) - 48);
      v80 = v57 - 2;
      v65 = (void (*)(char *, uint64_t, uint64_t))v94;
      if (v80)
      {
        v81 = (unsigned __int8 *)&aBlock + 2;
        while (1)
        {
          v82 = *v81 - 48;
          if (v82 > 9)
            goto LABEL_71;
          v83 = 10 * v61;
          if ((unsigned __int128)(v61 * (__int128)10) >> 64 != (10 * v61) >> 63)
            goto LABEL_71;
          v61 = v83 + v82;
          if (__OFADD__(v83, v82))
            goto LABEL_71;
          v63 = 0;
          ++v81;
          if (!--v80)
            goto LABEL_51;
        }
      }
    }
LABEL_64:
    v63 = 0;
    goto LABEL_51;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_100005288(v36, (uint64_t)qword_1002A8990);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  type metadata accessor for InheritanceError(0);
  v42 = v41;
  v106 = 10;
  v43 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v44 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v106, v43, v42, v44);
  v45 = aBlock;
  a3(aBlock);

}

uint64_t sub_1001DDBEC(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  uint64_t v48;
  uint64_t v49;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v44 - v15;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89F0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
    v18 = swift_errorRetain(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v46 = a4;
      v22 = v21;
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      v45 = swift_slowAlloc(32, -1);
      v49 = v45;
      *(_DWORD *)v22 = 138412546;
      v44 = v19;
      v24 = _convertErrorToNSError(_:)(a1);
      v47 = a3;
      v48 = v24;
      v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      *v23 = v25;
      swift_errorRelease(a1);
      *(_WORD *)(v22 + 12) = 2080;
      v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v8, v26);
      v29 = v28;
      v48 = sub_1001DEF4C(v27, v28, &v49);
      a3 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      v19 = v44;
      _os_log_impl((void *)&_mh_execute_header, v44, v20, "Error Preflighting Inheritance recovery: %@ for %s", (uint8_t *)v22, 0x16u);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v30);
      swift_slowDealloc(v23, -1, -1);
      v31 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    }

    swift_errorRetain(a1);
    a3(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89F0);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a2, v8);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v46 = a4;
      v38 = v37;
      v49 = v37;
      v47 = a3;
      *(_DWORD *)v36 = 136315138;
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v8, v39);
      v42 = v41;
      v48 = sub_1001DEF4C(v40, v41, &v49);
      a3 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Inheritance Preflight successful for beneficiaryID: %s", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }

    return ((uint64_t (*)(_QWORD))a3)(0);
  }
}

void InheritanceSecurityController.checkInheritanceKey(for:completion:)(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void **v41;
  id v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  id v64;
  Class isa;
  void *v66;
  Class v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  __n128 v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  char v85;
  id v86;
  void (*v87)(_QWORD);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void **aBlock;
  uint64_t v93;
  void (*v94)(uint64_t, void *);
  void *v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028FA50);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v12);
  Dependency.wrappedValue.getter(&aBlock, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v17 = objc_msgSend(*(id *)(*sub_10000732C(&aBlock, (uint64_t)v95) + 16), "aa_primaryAppleAccount");
  sub_100006F58(&aBlock);
  if (v17)
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v89 = type metadata accessor for Logger(0);
    sub_100005288(v89, (uint64_t)qword_1002A89F0);
    v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v90 = a1;
    v19 = v18(v11, a1, v7);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v88 = a3;
      v23 = (uint8_t *)v22;
      v24 = (void **)swift_slowAlloc(32, -1);
      v86 = v17;
      v25 = v24;
      aBlock = v24;
      *(_DWORD *)v23 = 136315138;
      v87 = a2;
      v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
      v29 = v28;
      v98 = sub_1001DEF4C(v27, v28, (uint64_t *)&aBlock);
      a2 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "checkInheritanceKey for beneficiaryID: %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v30 = v25;
      v17 = v86;
      swift_slowDealloc(v30, -1, -1);
      v31 = v23;
      a3 = v88;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    }

    v42 = objc_msgSend(v17, "aa_altDSID");
    v43 = v42;
    if (v42)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

      v43 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v45);
    }
    v46 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForAccountWithAltDSID:", v43);

    if (!v46)
    {

      return;
    }
    v47 = objc_msgSend(v17, "aa_personID");
    if (!v47)
      goto LABEL_84;
    v48 = v47;
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v51 = v50;

    v52 = HIBYTE(v51) & 0xF;
    v53 = v49 & 0xFFFFFFFFFFFFLL;
    if ((v51 & 0x2000000000000000) != 0)
      v54 = HIBYTE(v51) & 0xF;
    else
      v54 = v49 & 0xFFFFFFFFFFFFLL;
    if (v54)
    {
      if ((v51 & 0x1000000000000000) == 0)
      {
        if ((v51 & 0x2000000000000000) == 0)
        {
          if ((v49 & 0x1000000000000000) != 0)
            v55 = (unsigned __int8 *)((v51 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v55 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v49, v51);
          v56 = v91;
          v57 = (uint64_t)sub_10012C5BC(v55, v53, 10);
          v59 = v58 & 1;
LABEL_51:
          swift_bridgeObjectRelease(v51);
          if ((v59 & 1) != 0)
            goto LABEL_53;
          goto LABEL_52;
        }
        aBlock = (void **)v49;
        v93 = v51 & 0xFFFFFFFFFFFFFFLL;
        if (v49 == 43)
        {
          if (!v52)
          {
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
            return;
          }
          if (v52 == 1 || (BYTE1(v49) - 48) > 9u)
            goto LABEL_47;
          v57 = (BYTE1(v49) - 48);
          if (v52 == 2)
          {
LABEL_49:
            v59 = 0;
            goto LABEL_50;
          }
          if ((BYTE2(v49) - 48) > 9u)
            goto LABEL_47;
          v57 = 10 * (BYTE1(v49) - 48) + (BYTE2(v49) - 48);
          v60 = v52 - 3;
          v56 = v91;
          if (v60)
          {
            v61 = (unsigned __int8 *)&aBlock + 3;
            while (1)
            {
              v62 = *v61 - 48;
              if (v62 > 9)
                goto LABEL_77;
              v63 = 10 * v57;
              if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                goto LABEL_77;
              v57 = v63 + v62;
              if (__OFADD__(v63, v62))
                goto LABEL_77;
              v59 = 0;
              ++v61;
              if (!--v60)
                goto LABEL_51;
            }
          }
        }
        else
        {
          if (v49 == 45)
          {
            if (v52)
            {
              if (v52 != 1 && (BYTE1(v49) - 48) <= 9u)
              {
                if (v52 == 2)
                {
                  v59 = 0;
                  v57 = -(uint64_t)(BYTE1(v49) - 48);
LABEL_50:
                  v56 = v91;
                  goto LABEL_51;
                }
                if ((BYTE2(v49) - 48) <= 9u)
                {
                  v57 = -10 * (BYTE1(v49) - 48) - (BYTE2(v49) - 48);
                  v80 = v52 - 3;
                  v56 = v91;
                  if (!v80)
                    goto LABEL_70;
                  v81 = (unsigned __int8 *)&aBlock + 3;
                  while (1)
                  {
                    v82 = *v81 - 48;
                    if (v82 > 9)
                      break;
                    v83 = 10 * v57;
                    if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                      break;
                    v57 = v83 - v82;
                    if (__OFSUB__(v83, v82))
                      break;
                    v59 = 0;
                    ++v81;
                    if (!--v80)
                      goto LABEL_51;
                  }
LABEL_77:
                  v57 = 0;
                  v59 = 1;
                  goto LABEL_51;
                }
              }
LABEL_47:
              v57 = 0;
              v59 = 1;
              goto LABEL_50;
            }
            __break(1u);
            goto LABEL_83;
          }
          if (!v52 || (v49 - 48) > 9u)
            goto LABEL_47;
          v57 = (v49 - 48);
          if (v52 == 1)
            goto LABEL_49;
          if ((BYTE1(v49) - 48) > 9u)
            goto LABEL_47;
          v57 = 10 * (v49 - 48) + (BYTE1(v49) - 48);
          v76 = v52 - 2;
          v56 = v91;
          if (v76)
          {
            v77 = (unsigned __int8 *)&aBlock + 2;
            while (1)
            {
              v78 = *v77 - 48;
              if (v78 > 9)
                goto LABEL_77;
              v79 = 10 * v57;
              if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                goto LABEL_77;
              v57 = v79 + v78;
              if (__OFADD__(v79, v78))
                goto LABEL_77;
              v59 = 0;
              ++v77;
              if (!--v76)
                goto LABEL_51;
            }
          }
        }
LABEL_70:
        v59 = 0;
        goto LABEL_51;
      }
      v57 = (uint64_t)sub_10012C5D0(v49, v51, 10);
      v85 = v84;
      swift_bridgeObjectRelease(v51);
      v56 = v91;
      if ((v85 & 1) == 0)
      {
LABEL_52:
        v64 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v57);
        objc_msgSend(v46, "setDsid:", v64);

      }
    }
    else
    {
      swift_bridgeObjectRelease(v51);
      v56 = v91;
    }
LABEL_53:
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v46, "setBeneficiaryIdentifier:", isa);

    v66 = *(void **)(v56 + 16);
    if (objc_msgSend(v66, "respondsToSelector:", Selector.init(_:)(0xD000000000000013, 0x8000000100210160)))
    {
      v67 = UUID._bridgeToObjectiveC()().super.isa;
      v68 = swift_allocObject(&unk_10026F3E0, 32, 7);
      *(_QWORD *)(v68 + 16) = a2;
      *(_QWORD *)(v68 + 24) = a3;
      v96 = sub_1001DF5A4;
      v97 = v68;
      aBlock = _NSConcreteStackBlock;
      v93 = 1107296256;
      v94 = sub_1001DC548;
      v95 = &unk_10026F3F8;
      v69 = _Block_copy(&aBlock);
      v70 = v97;
      swift_retain(a3);
      swift_release(v70);
      objc_msgSend(v66, "checkInheritanceKey:inheritanceKeyUUID:completion:", v46, v67, v69);
      _Block_release(v69);

    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v71 = sub_100005288(v89, (uint64_t)qword_1002A8A08);
      v72 = Logger.logObject.getter(v71);
      v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v72, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v74, "checkInheritanceKey spi not found on InheritanceTrustController", v75, 2u);
        swift_slowDealloc(v75, -1, -1);
      }

      a2(0);
    }
    return;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A8990);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Not logged in to AppleAccount, unable to fetch. checkInheritanceKey aborted.", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  type metadata accessor for InheritanceError(0);
  v38 = v37;
  v98 = 10;
  v39 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v40 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v98, v39, v38, v40);
  v41 = aBlock;
  a2(aBlock);

}

uint64_t sub_1001DEB14(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v10 = _swift_stdlib_bridgeErrorToNSError(a1);
      v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    }
    else
    {
      v13 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      v10 = 0;
    }
    *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Inheritance Check Inheritance Key results: %@", v8, 0xCu);
    v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(a1);
}

uint64_t InheritanceSecurityController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t InheritanceSecurityController.__deallocating_deinit()
{
  id *v0;
  char *v1;
  uint64_t v2;

  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1001DEE98(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1001DEEA8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1001DEEDC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_1001DEF4C(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_1001DEF4C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1001DF01C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000244B0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000244B0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100006F58(v12);
  return v7;
}

uint64_t sub_1001DF01C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1001DF1D4(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_1001DF1D4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_1001DF268(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1001DF440(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1001DF440(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_1001DF268(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1001DF3DC(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1001DF3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_1000080B4((uint64_t *)&unk_10028BC10);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1001DF440(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4((uint64_t *)&unk_10028BC10);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_1001DF58C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_1001DF5A4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001DEB14(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t type metadata accessor for InheritanceSecurityManager()
{
  return objc_opt_self(_TtC13appleaccountd26InheritanceSecurityManager);
}

uint64_t sub_1001DF5CC()
{
  return type metadata accessor for InheritanceSecurityController(0);
}

uint64_t type metadata accessor for InheritanceSecurityController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002985E0;
  if (!qword_1002985E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceSecurityController);
  return result;
}

void sub_1001DF610(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1001DF68C(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  id v44;
  id v45;
  NSString v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  void (**v90)(_QWORD, _QWORD);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void **aBlock;
  uint64_t v96;
  void (*v97)(uint64_t, void *);
  void *v98;
  uint64_t (*v99)();
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v92 = a2;
  v94 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v85 - v12;
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = swift_allocObject(&unk_10026F4A8, 24, 7);
  *(_QWORD *)(v93 + 16) = a4;
  v91 = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v14);
  v90 = a4;
  _Block_copy(a4);
  Dependency.wrappedValue.getter(&aBlock, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v19 = objc_msgSend(*(id *)(*sub_10000732C(&aBlock, (uint64_t)v98) + 16), "aa_primaryAppleAccount");
  sub_100006F58(&aBlock);
  if (!v19)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100005288(v34, (uint64_t)qword_1002A8990);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Not logged in to AppleAccount, unable to fetch. Preflight Inheritance Recovery aborted.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v40 = v39;
    v101 = 10;
    v41 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v101, v41, v40, v42);
    v43 = aBlock;
    v44 = (id)_convertErrorToNSError(_:)(aBlock);
    ((void (**)(_QWORD, id))v90)[2](v90, v44);
    swift_release(v93);

    goto LABEL_53;
  }
  v88 = v8;
  v89 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v20 = type metadata accessor for Logger(0);
  sub_100005288(v20, (uint64_t)qword_1002A89F0);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v22 = v21(v13, v94, v6);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v87 = v7;
    v26 = v6;
    v27 = (uint8_t *)v25;
    v28 = (void **)swift_slowAlloc(32, -1);
    aBlock = v28;
    v86 = v19;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
    v32 = v31;
    v101 = sub_1001DEF4C(v30, v31, (uint64_t *)&aBlock);
    v19 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);
    swift_bridgeObjectRelease(v32);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v13, v26);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Preflighting Inheritance Recovery for beneficiaryID: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v33 = v27;
    v6 = v26;
    v7 = v87;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }

  v45 = objc_msgSend(v19, "aa_altDSID");
  v46 = v45;
  if (v45)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
  }
  v44 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForAccountWithAltDSID:", v46);

  if (!v44)
  {
    swift_release(v93);

    return;
  }
  v49 = objc_msgSend(v19, "aa_personID");
  if (v49)
  {
    v50 = v49;
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    v53 = v52;

    v54 = HIBYTE(v53) & 0xF;
    v55 = v51 & 0xFFFFFFFFFFFFLL;
    if ((v53 & 0x2000000000000000) != 0)
      v56 = HIBYTE(v53) & 0xF;
    else
      v56 = v51 & 0xFFFFFFFFFFFFLL;
    if (!v56)
    {
      swift_bridgeObjectRelease(v53);
      v64 = v89;
LABEL_52:
      v66 = *(void **)(v91 + 16);
      v21(v64, v94, v6);
      v67 = *(unsigned __int8 *)(v7 + 80);
      v68 = v7;
      v69 = (v67 + 16) & ~v67;
      v70 = (v88 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
      v71 = swift_allocObject(&unk_10026F4D0, v70 + 16, v67 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))(v71 + v69, v64, v6);
      v72 = (_QWORD *)(v71 + v70);
      v73 = v93;
      *v72 = sub_1000891D0;
      v72[1] = v73;
      v99 = sub_1001DF5A0;
      v100 = v71;
      aBlock = _NSConcreteStackBlock;
      v96 = 1107296256;
      v97 = sub_1001DC548;
      v98 = &unk_10026F4E8;
      v74 = _Block_copy(&aBlock);
      v75 = v100;
      swift_retain(v73);
      swift_release(v75);
      objc_msgSend(v66, "validateAccessKey:withContext:completion:", v92, v44, v74);
      _Block_release(v74);
      swift_release(v73);

LABEL_53:
      return;
    }
    if ((v53 & 0x1000000000000000) != 0)
    {
      v58 = (uint64_t)sub_10012C5D0(v51, v53, 10);
      LOBYTE(v51) = v84;
LABEL_50:
      swift_bridgeObjectRelease(v53);
      v64 = v89;
      if ((v51 & 1) == 0)
      {
        v65 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v58);
        objc_msgSend(v44, "setDsid:", v65);

      }
      goto LABEL_52;
    }
    if ((v53 & 0x2000000000000000) == 0)
    {
      if ((v51 & 0x1000000000000000) != 0)
        v57 = (unsigned __int8 *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v57 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v51, v53);
      v58 = (uint64_t)sub_10012C5BC(v57, v55, 10);
      LOBYTE(v51) = v59 & 1;
      goto LABEL_50;
    }
    aBlock = (void **)v51;
    v96 = v53 & 0xFFFFFFFFFFFFFFLL;
    if (v51 == 43)
    {
      if (!v54)
      {
LABEL_74:
        __break(1u);
        goto LABEL_75;
      }
      if (v54 == 1 || (BYTE1(v51) - 48) > 9u)
      {
LABEL_47:
        v58 = 0;
        LOBYTE(v51) = 1;
        goto LABEL_50;
      }
      v58 = (BYTE1(v51) - 48);
      if (v54 != 2)
      {
        if ((BYTE2(v51) - 48) > 9u)
          goto LABEL_47;
        v58 = 10 * (BYTE1(v51) - 48) + (BYTE2(v51) - 48);
        v60 = v54 - 3;
        if (v60)
        {
          v61 = (unsigned __int8 *)&aBlock + 3;
          while (1)
          {
            v62 = *v61 - 48;
            if (v62 > 9)
              goto LABEL_47;
            v63 = 10 * v58;
            if ((unsigned __int128)(v58 * (__int128)10) >> 64 != (10 * v58) >> 63)
              goto LABEL_47;
            v58 = v63 + v62;
            if (__OFADD__(v63, v62))
              goto LABEL_47;
            LOBYTE(v51) = 0;
            ++v61;
            if (!--v60)
              goto LABEL_50;
          }
        }
      }
    }
    else
    {
      if (v51 == 45)
      {
        if (v54)
        {
          if (v54 == 1 || (BYTE1(v51) - 48) > 9u)
            goto LABEL_47;
          if (v54 == 2)
          {
            LOBYTE(v51) = 0;
            v58 = -(uint64_t)(BYTE1(v51) - 48);
            goto LABEL_50;
          }
          if ((BYTE2(v51) - 48) > 9u)
            goto LABEL_47;
          v58 = -10 * (BYTE1(v51) - 48) - (BYTE2(v51) - 48);
          v80 = v54 - 3;
          if (v80)
          {
            v81 = (unsigned __int8 *)&aBlock + 3;
            while (1)
            {
              v82 = *v81 - 48;
              if (v82 > 9)
                goto LABEL_47;
              v83 = 10 * v58;
              if ((unsigned __int128)(v58 * (__int128)10) >> 64 != (10 * v58) >> 63)
                goto LABEL_47;
              v58 = v83 - v82;
              if (__OFSUB__(v83, v82))
                goto LABEL_47;
              LOBYTE(v51) = 0;
              ++v81;
              if (!--v80)
                goto LABEL_50;
            }
          }
          goto LABEL_49;
        }
        __break(1u);
        goto LABEL_74;
      }
      if (!v54 || (v51 - 48) > 9u)
        goto LABEL_47;
      v58 = (v51 - 48);
      if (v54 != 1)
      {
        if ((BYTE1(v51) - 48) > 9u)
          goto LABEL_47;
        v58 = 10 * (v51 - 48) + (BYTE1(v51) - 48);
        v76 = v54 - 2;
        if (v76)
        {
          v77 = (unsigned __int8 *)&aBlock + 2;
          while (1)
          {
            v78 = *v77 - 48;
            if (v78 > 9)
              goto LABEL_47;
            v79 = 10 * v58;
            if ((unsigned __int128)(v58 * (__int128)10) >> 64 != (10 * v58) >> 63)
              goto LABEL_47;
            v58 = v79 + v78;
            if (__OFADD__(v79, v78))
              goto LABEL_47;
            LOBYTE(v51) = 0;
            ++v77;
            if (!--v76)
              goto LABEL_50;
          }
        }
      }
    }
LABEL_49:
    LOBYTE(v51) = 0;
    goto LABEL_50;
  }
LABEL_75:
  _Block_release(v90);
  __break(1u);
  _Block_release(v90);
  __break(1u);
}

void sub_1001DFFAC(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint8_t *v24;
  void **v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void **v41;
  void *v42;
  id v43;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  uint64_t v62;
  id v63;
  Class isa;
  void *v65;
  Class v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  __n128 v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned int v81;
  uint64_t v82;
  char v83;
  id v84;
  void (**v85)(_QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **aBlock;
  uint64_t v91;
  void (*v92)(uint64_t, void *);
  void *v93;
  uint64_t (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028FA50);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10026F430, 24, 7);
  *(_QWORD *)(v16 + 16) = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2 + OBJC_IVAR____TtC13appleaccountd29InheritanceSecurityController__accountStore, v11);
  _Block_copy(a3);
  Dependency.wrappedValue.getter(&aBlock, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v17 = objc_msgSend(*(id *)(*sub_10000732C(&aBlock, (uint64_t)v93) + 16), "aa_primaryAppleAccount");
  sub_100006F58(&aBlock);
  if (v17)
  {
    v88 = a2;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89F0);
    v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v89 = a1;
    v20 = v19(v10, a1, v6);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v87 = v18;
    if (v23)
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (void **)swift_slowAlloc(32, -1);
      v86 = v16;
      v26 = v25;
      aBlock = v25;
      v84 = v17;
      v85 = a3;
      *(_DWORD *)v24 = 136315138;
      v27 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v27);
      v30 = v29;
      v96 = sub_1001DEF4C(v28, v29, (uint64_t *)&aBlock);
      v17 = v84;
      a3 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "checkInheritanceKey for beneficiaryID: %s", v24, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v31 = v26;
      v16 = v86;
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }

    v43 = objc_msgSend(v17, "aa_altDSID");
    v44 = v43;
    if (v43)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v46);
    }
    v47 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForAccountWithAltDSID:", v44);

    if (!v47)
    {
      swift_release(v16);

      return;
    }
    v48 = objc_msgSend(v17, "aa_personID");
    if (!v48)
      goto LABEL_80;
    v49 = v48;
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v52 = v51;

    v53 = HIBYTE(v52) & 0xF;
    v54 = v50 & 0xFFFFFFFFFFFFLL;
    if ((v52 & 0x2000000000000000) != 0)
      v55 = HIBYTE(v52) & 0xF;
    else
      v55 = v50 & 0xFFFFFFFFFFFFLL;
    if (!v55)
    {
      swift_bridgeObjectRelease(v52);
LABEL_52:
      isa = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v47, "setBeneficiaryIdentifier:", isa);

      v65 = *(void **)(v88 + 16);
      if (objc_msgSend(v65, "respondsToSelector:", Selector.init(_:)(0xD000000000000013, 0x8000000100210160)))
      {
        v66 = UUID._bridgeToObjectiveC()().super.isa;
        v67 = swift_allocObject(&unk_10026F458, 32, 7);
        *(_QWORD *)(v67 + 16) = sub_1000889B4;
        *(_QWORD *)(v67 + 24) = v16;
        v94 = sub_1001E0AD0;
        v95 = v67;
        aBlock = _NSConcreteStackBlock;
        v91 = 1107296256;
        v92 = sub_1001DC548;
        v93 = &unk_10026F470;
        v68 = _Block_copy(&aBlock);
        v69 = v95;
        swift_retain(v16);
        swift_release(v69);
        objc_msgSend(v65, "checkInheritanceKey:inheritanceKeyUUID:completion:", v47, v66, v68);
        _Block_release(v68);
        swift_release(v16);

      }
      else
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v70 = sub_100005288(v87, (uint64_t)qword_1002A8A08);
        v71 = Logger.logObject.getter(v70);
        v73 = static os_log_type_t.default.getter(v72);
        if (os_log_type_enabled(v71, v73))
        {
          v74 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, v73, "checkInheritanceKey spi not found on InheritanceTrustController", v74, 2u);
          swift_slowDealloc(v74, -1, -1);
        }

        a3[2](a3, 0);
        swift_release(v16);

      }
      return;
    }
    if ((v52 & 0x1000000000000000) != 0)
    {
      v57 = (uint64_t)sub_10012C5D0(v50, v52, 10);
      LOBYTE(v50) = v83;
      goto LABEL_50;
    }
    if ((v52 & 0x2000000000000000) == 0)
    {
      if ((v50 & 0x1000000000000000) != 0)
        v56 = (unsigned __int8 *)((v52 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v56 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v50, v52);
      v57 = (uint64_t)sub_10012C5BC(v56, v54, 10);
      LOBYTE(v50) = v58 & 1;
LABEL_50:
      swift_bridgeObjectRelease(v52);
      if ((v50 & 1) == 0)
      {
        v63 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v57);
        objc_msgSend(v47, "setDsid:", v63);

      }
      goto LABEL_52;
    }
    aBlock = (void **)v50;
    v91 = v52 & 0xFFFFFFFFFFFFFFLL;
    if (v50 == 43)
    {
      if (!v53)
      {
LABEL_79:
        __break(1u);
LABEL_80:
        _Block_release(a3);
        __break(1u);
        _Block_release(a3);
        __break(1u);
        return;
      }
      if (v53 != 1 && (BYTE1(v50) - 48) <= 9u)
      {
        v57 = (BYTE1(v50) - 48);
        if (v53 == 2)
          goto LABEL_49;
        if ((BYTE2(v50) - 48) <= 9u)
        {
          v57 = 10 * (BYTE1(v50) - 48) + (BYTE2(v50) - 48);
          v59 = v53 - 3;
          if (v59)
          {
            v60 = (unsigned __int8 *)&aBlock + 3;
            while (1)
            {
              v61 = *v60 - 48;
              if (v61 > 9)
                goto LABEL_47;
              v62 = 10 * v57;
              if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                goto LABEL_47;
              v57 = v62 + v61;
              if (__OFADD__(v62, v61))
                goto LABEL_47;
              LOBYTE(v50) = 0;
              ++v60;
              if (!--v59)
                goto LABEL_50;
            }
          }
          goto LABEL_49;
        }
      }
    }
    else
    {
      if (v50 == 45)
      {
        if (v53)
        {
          if (v53 == 1 || (BYTE1(v50) - 48) > 9u)
            goto LABEL_47;
          if (v53 == 2)
          {
            LOBYTE(v50) = 0;
            v57 = -(uint64_t)(BYTE1(v50) - 48);
            goto LABEL_50;
          }
          if ((BYTE2(v50) - 48) > 9u)
            goto LABEL_47;
          v57 = -10 * (BYTE1(v50) - 48) - (BYTE2(v50) - 48);
          v79 = v53 - 3;
          if (v79)
          {
            v80 = (unsigned __int8 *)&aBlock + 3;
            while (1)
            {
              v81 = *v80 - 48;
              if (v81 > 9)
                goto LABEL_47;
              v82 = 10 * v57;
              if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                goto LABEL_47;
              v57 = v82 - v81;
              if (__OFSUB__(v82, v81))
                goto LABEL_47;
              LOBYTE(v50) = 0;
              ++v80;
              if (!--v79)
                goto LABEL_50;
            }
          }
LABEL_49:
          LOBYTE(v50) = 0;
          goto LABEL_50;
        }
        __break(1u);
        goto LABEL_79;
      }
      if (v53 && (v50 - 48) <= 9u)
      {
        v57 = (v50 - 48);
        if (v53 == 1)
          goto LABEL_49;
        if ((BYTE1(v50) - 48) <= 9u)
        {
          v57 = 10 * (v50 - 48) + (BYTE1(v50) - 48);
          v75 = v53 - 2;
          if (v75)
          {
            v76 = (unsigned __int8 *)&aBlock + 2;
            while (1)
            {
              v77 = *v76 - 48;
              if (v77 > 9)
                goto LABEL_47;
              v78 = 10 * v57;
              if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63)
                goto LABEL_47;
              v57 = v78 + v77;
              if (__OFADD__(v78, v77))
                goto LABEL_47;
              LOBYTE(v50) = 0;
              ++v76;
              if (!--v75)
                goto LABEL_50;
            }
          }
          goto LABEL_49;
        }
      }
    }
LABEL_47:
    v57 = 0;
    LOBYTE(v50) = 1;
    goto LABEL_50;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A8990);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Not logged in to AppleAccount, unable to fetch. checkInheritanceKey aborted.", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  type metadata accessor for InheritanceError(0);
  v38 = v37;
  v96 = 10;
  v39 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v40 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v96, v39, v38, v40);
  v41 = aBlock;
  v42 = (void *)_convertErrorToNSError(_:)(aBlock);
  ((void (**)(_QWORD, void *))a3)[2](a3, v42);
  swift_release(v16);

}

uint64_t sub_1001E0978()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E09A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001DDBEC(a1, v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001E09F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028C040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E0AD4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;

  if (a2)
    return a2();
  return result;
}

uint64_t type metadata accessor for BeneficiaryRemovedMessageHandler()
{
  return objc_opt_self(_TtC13appleaccountd32BeneficiaryRemovedMessageHandler);
}

uint64_t sub_1001E0B18(void *a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  char v36;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A8990);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v11 = _convertErrorToNSError(_:)(a2);
      v34 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
      *v10 = v11;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error building URL configuration: %@", v9, 0xCu);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    v34 = a2;
    v36 = 1;
    swift_errorRetain(a2);
    a3(&v34);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v13 = qword_10028ADB0;
    v14 = a1;
    if (v13 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8990);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "URL configuration built successfully.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = type metadata accessor for DaemonSetupServiceURLBag();
    v21 = swift_allocObject(v20, 24, 7);
    *(_QWORD *)(v21 + 16) = v14;
    v35[2] = v20;
    v35[3] = &off_100265AA0;
    v34 = v21;
    v36 = 0;
    v22 = v14;
    swift_retain(v21);
    a3(&v34);
    swift_release(v21);

  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A8990);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No URL configuration was built...", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    type metadata accessor for AAError(0);
    v30 = v29;
    v34 = 0;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_1000C2D50();
    _BridgedStoredNSError.init(_:userInfo:)(&v33, &v34, v31, v30, v32);
    v34 = v33;
    v36 = 1;
    a3(&v34);
  }
  return sub_1001E0F20((uint64_t)&v34);
}

uint64_t type metadata accessor for DeamonSetupServiceRequestController()
{
  return objc_opt_self(_TtC13appleaccountd35DeamonSetupServiceRequestController);
}

uint64_t sub_1001E0F20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_100296520);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1001E0F60(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  v8 = objc_msgSend(a1, "databaseScope");
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A89C0);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = a2;
    v14 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    v37 = (uint64_t)v10;
    v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    *v14 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Handling CloudKit APS Notification: %@", v13, 0xCu);
    v16 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v14, 1, v16);
    v17 = v14;
    a2 = v35;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    if (v8 != (id)1)
      goto LABEL_5;
LABEL_10:
    v27 = Logger.logObject.getter(v18);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = "No need to handle zone change for public DB";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
LABEL_18:

    return;
  }

  if (v8 == (id)1)
    goto LABEL_10;
LABEL_5:
  if (v8 != (id)3)
  {
    if (v8 == (id)2)
    {
      v19 = sub_1001FD4C0(a2, a3);
      v20 = objc_msgSend(v19, "privateCloudDatabase");

      v21 = swift_bridgeObjectRetain_n(a3, 2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v37 = v25;
        *(_DWORD *)v24 = 136315138;
        swift_bridgeObjectRetain(a3);
        v36 = sub_1001DEF4C(a2, a3, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        swift_bridgeObjectRelease_n(a3, 3);
        v26 = "Received APS notification to pull private DB changes for container: %s";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v22, v23, v26, v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

        goto LABEL_20;
      }
      goto LABEL_19;
    }
    v27 = Logger.logObject.getter(v18);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = "No need to handle zone change for unknown DB";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  v31 = sub_1001FD4C0(a2, a3);
  v20 = objc_msgSend(v31, "sharedCloudDatabase");

  v32 = swift_bridgeObjectRetain_n(a3, 2);
  v22 = Logger.logObject.getter(v32);
  v23 = static os_log_type_t.debug.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v37 = v25;
    *(_DWORD *)v24 = 136315138;
    swift_bridgeObjectRetain(a3);
    v36 = sub_1001DEF4C(a2, a3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_bridgeObjectRelease_n(a3, 3);
    v26 = "Received APS notification to pull shared DB changes for container: %s";
    goto LABEL_14;
  }
LABEL_19:

  swift_bridgeObjectRelease_n(a3, 2);
LABEL_20:
  sub_1001E2EC8(v4 + 24, (uint64_t)&v37);
  if (v39)
  {
    sub_10000732C(&v37, v39);
    v33 = swift_allocObject(&unk_10026F718, 32, 7);
    *(_QWORD *)(v33 + 16) = a2;
    *(_QWORD *)(v33 + 24) = a3;
    swift_bridgeObjectRetain(a3);
    v34 = v20;
    sub_1000986F0(v34, a2, a3, 1, (uint64_t)sub_1001E2FA0, v33);
    swift_release(v33);

    sub_100006F58(&v37);
  }
  else
  {

    sub_1001E2F10((uint64_t)&v37);
  }
}

void sub_1001E14F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *oslog;
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89A8);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v7 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v22 = v11;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain(a3);
      v21 = sub_1001DEF4C(a2, a3, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v9 + 12) = 2112;
      v12 = _convertErrorToNSError(_:)(a1);
      v21 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v10 = v12;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Error fetching ckDatabase (%s) changes: %@", (uint8_t *)v9, 0x16u);
      v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v13);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A89C0);
    v15 = swift_bridgeObjectRetain_n(a3, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v22 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(a3);
      v21 = sub_1001DEF4C(a2, a3, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfully fetched ckDatabase (%s) changes", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
}

void sub_1001E18CC(void *a1, uint64_t a2, unint64_t a3)
{
  void *v3;
  id v4;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject **v16;
  NSObject *v17;
  uint64_t v18;
  NSObject **v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  NSObject **v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  const char *v41;
  id v42;
  NSObject *v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  id v51;
  unint64_t v52;
  id v53;
  id v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  _BYTE v58[16];
  uint64_t v59;

  v4 = v3;
  v8 = objc_msgSend(a1, "recordZoneID");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(a1, "databaseScope");
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A89A8);
    v12 = a1;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v52 = a3;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = v4;
      v16 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v57 = v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
      *v16 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Handling CloudKit APS Zone Change Notification: %@", v15, 0xCu);
      v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v16, 1, v18);
      v19 = v16;
      v4 = v54;
      swift_slowDealloc(v19, -1, -1);
      v20 = v15;
      a3 = v52;
      swift_slowDealloc(v20, -1, -1);

      if (v10 != (id)1)
        goto LABEL_6;
    }
    else
    {

      if (v10 != (id)1)
      {
LABEL_6:
        if (v10 == (id)3)
        {
          v42 = sub_1001FD4C0(a2, a3);
          v23 = objc_msgSend(v42, "sharedCloudDatabase");

          v24 = v9;
          v25 = Logger.logObject.getter(v24);
          v26 = static os_log_type_t.debug.getter(v25);
          if (os_log_type_enabled(v25, v26))
          {
            v53 = v23;
            v27 = (uint8_t *)swift_slowAlloc(12, -1);
            v28 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v27 = 138412290;
            v57 = v24;
            v43 = v24;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
            *v28 = v9;

            v30 = "Received APS notification to pull shared DB changes for zoneID: %@";
            goto LABEL_20;
          }
LABEL_25:

          v25 = v24;
LABEL_26:

          sub_1001E2EC8((uint64_t)v4 + 24, (uint64_t)&v57);
          if (v59)
          {
            sub_10000732C(&v57, v59);
            v46 = sub_1000080B4(&qword_10028D570);
            v47 = swift_allocObject(v46, 40, 7);
            *(_OWORD *)(v47 + 16) = xmmword_10021A1B0;
            *(_QWORD *)(v47 + 32) = v9;
            v56 = v47;
            specialized Array._endMutation()(v47);
            v48 = swift_allocObject(&unk_10026F6F0, 24, 7);
            *(_QWORD *)(v48 + 16) = v12;
            v49 = v12;
            v50 = v9;
            v51 = v23;
            sub_10009974C(v51, v56, 1u, (uint64_t)sub_1001E2F74, v48);
            swift_bridgeObjectRelease(v56);
            swift_release(v48);

            sub_100006F58(&v57);
          }
          else
          {

            sub_1001E2F10((uint64_t)&v57);
          }
          return;
        }
        if (v10 == (id)2)
        {
          v22 = sub_1001FD4C0(a2, a3);
          v23 = objc_msgSend(v22, "privateCloudDatabase");

          v24 = v9;
          v25 = Logger.logObject.getter(v24);
          v26 = static os_log_type_t.debug.getter(v25);
          if (os_log_type_enabled(v25, v26))
          {
            v53 = v23;
            v27 = (uint8_t *)swift_slowAlloc(12, -1);
            v28 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v27 = 138412290;
            v57 = v24;
            v29 = v24;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
            *v28 = v9;

            v30 = "Received APS notification to pull private DB changes for zoneID: %@";
LABEL_20:
            _os_log_impl((void *)&_mh_execute_header, v25, v26, v30, v27, 0xCu);
            v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
            swift_arrayDestroy(v28, 1, v44);
            swift_slowDealloc(v28, -1, -1);
            v45 = v27;
            v23 = v53;
            swift_slowDealloc(v45, -1, -1);
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        v38 = Logger.logObject.getter(v21);
        v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v40 = 0;
          v41 = "No need to handle zone change for unknown DB";
          goto LABEL_23;
        }
        goto LABEL_24;
      }
    }
    v38 = Logger.logObject.getter(v21);
    v39 = static os_log_type_t.debug.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      v41 = "No need to handle zone change for public DB";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v38, v39, v41, v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }
LABEL_24:

    return;
  }
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v31 = type metadata accessor for Logger(0);
  sub_100005288(v31, (uint64_t)qword_1002A89A8);
  v55 = a1;
  v32 = Logger.logObject.getter(v55);
  v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v34 = 138412290;
    v57 = v55;
    v36 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
    *v35 = v55;

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing recordZoneID in zone notification: %@", v34, 0xCu);
    v37 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v35, 1, v37);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

  }
}

void sub_1001E2054(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A89A8);
  v10 = a2;
  v4 = Logger.logObject.getter(v10);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v11 = v10;
    v8 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    *v7 = v10;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Completed DB pull for APS notification: %@", v6, 0xCu);
    v9 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

void sub_1001E2204(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  Class isa;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  id v78;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  id v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  id v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v97 - v11;
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  sub_100005288(v4, (uint64_t)qword_1002A89C0);
  v13 = a1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v99 = v9;
  v100 = v5;
  v97 = v2;
  v98 = v12;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 138412290;
    v102 = (uint64_t)v13;
    v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
    *v18 = v13;

    _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudKitSyncManager received APS message: %@", v17, 0xCu);
    v20 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v21 = objc_msgSend(v13, "userInfo", v97);
  if (!v21)
  {
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  v22 = v21;
  v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v21, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v23);
  v25 = objc_msgSend((id)objc_opt_self(CKNotification), "notificationFromRemoteNotificationDictionary:", isa);

  if (v25)
  {
    switch((unint64_t)objc_msgSend(v25, "notificationType"))
    {
      case 1uLL:
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v26 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.debug.getter(v27);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_49;
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        v30 = "No need to handle query notification";
        goto LABEL_48;
      case 2uLL:
        v39 = objc_opt_self(CKRecordZoneNotification);
        v40 = swift_dynamicCastObjCClass(v25, v39);
        if (v40)
        {
          v41 = (void *)v40;
          v42 = v25;
          v43 = objc_msgSend(v13, "topic");
          if (v43)
          {
            v44 = v43;
            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v47 = v46;

            if (qword_10028AF60 != -1)
              swift_once(&qword_10028AF60, sub_1001FE2BC);
            v48 = qword_1002A8CF8;
            if (*(_QWORD *)(qword_1002A8CF8 + 16))
            {
              swift_bridgeObjectRetain(v47);
              v49 = sub_10010A9E0(v45, v47);
              if ((v50 & 1) != 0)
              {
                v51 = (uint64_t *)(*(_QWORD *)(v48 + 56) + 16 * v49);
                v52 = *v51;
                v53 = v51[1];
                swift_bridgeObjectRetain(v53);
                swift_bridgeObjectRelease_n(v47, 2);
                sub_1001E18CC(v41, v52, v53);
                swift_bridgeObjectRelease(v53);

                return;
              }
              swift_bridgeObjectRelease(v47);
            }
            v99 = v42;
            swift_bridgeObjectRelease(v47);
            if (qword_10028ADB8 != -1)
              swift_once(&qword_10028ADB8, sub_100046CE4);
            v72 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
            v73 = v100;
            v74 = v98;
            (*(void (**)(id, uint64_t, uint64_t))(v100 + 16))(v98, v72, v4);
            v13 = v13;
            v75 = Logger.logObject.getter(v13);
            v76 = static os_log_type_t.error.getter(v75);
            if (os_log_type_enabled(v75, v76))
            {
              v77 = (uint8_t *)swift_slowAlloc(12, -1);
              v97 = swift_slowAlloc(32, -1);
              v102 = v97;
              *(_DWORD *)v77 = 136315138;
              v78 = objc_msgSend(v13, "topic");
              if (v78)
              {
                v79 = v78;
                v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
                v82 = v81;

                v101 = sub_1001DEF4C(v80, v82, &v102);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);

                swift_bridgeObjectRelease(v82);
                _os_log_impl((void *)&_mh_execute_header, v75, v76, "Received notification for unknown container topic: %s", v77, 0xCu);
                v83 = v97;
                swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v83, -1, -1);
                swift_slowDealloc(v77, -1, -1);

                v84 = v99;
                (*(void (**)(id, uint64_t))(v100 + 8))(v98, v4);
                return;
              }
              goto LABEL_68;
            }

            v85 = v99;
            goto LABEL_64;
          }
          goto LABEL_66;
        }
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v70 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
        v27 = Logger.logObject.getter(v70);
        v28 = static os_log_type_t.error.getter(v27);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_49;
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        v30 = "Unable to cast notification to CKRecordZoneNotification";
        goto LABEL_48;
      case 3uLL:
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v54 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
        v27 = Logger.logObject.getter(v54);
        v28 = static os_log_type_t.debug.getter(v27);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_49;
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        v30 = "No need to handle read notification";
        goto LABEL_48;
      case 4uLL:
        v55 = objc_opt_self(CKDatabaseNotification);
        v56 = swift_dynamicCastObjCClass(v25, v55);
        if (!v56)
        {
          if (qword_10028ADB8 != -1)
            swift_once(&qword_10028ADB8, sub_100046CE4);
          v71 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
          v27 = Logger.logObject.getter(v71);
          v28 = static os_log_type_t.error.getter(v27);
          if (!os_log_type_enabled(v27, v28))
          {
LABEL_49:

            return;
          }
          v29 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v29 = 0;
          v30 = "Unable to cast notification to CKDatabaseNotification";
LABEL_48:
          _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, v29, 2u);
          swift_slowDealloc(v29, -1, -1);

          return;
        }
        v57 = (void *)v56;
        v58 = v25;
        v59 = objc_msgSend(v13, "topic");
        if (!v59)
        {
LABEL_67:
          __break(1u);
LABEL_68:

          __break(1u);
          goto LABEL_69;
        }
        v60 = v59;
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v63 = v62;

        if (qword_10028AF60 != -1)
          swift_once(&qword_10028AF60, sub_1001FE2BC);
        v64 = qword_1002A8CF8;
        if (*(_QWORD *)(qword_1002A8CF8 + 16))
        {
          swift_bridgeObjectRetain(v63);
          v65 = sub_10010A9E0(v61, v63);
          if ((v66 & 1) != 0)
          {
            v67 = (uint64_t *)(*(_QWORD *)(v64 + 56) + 16 * v65);
            v68 = *v67;
            v69 = v67[1];
            swift_bridgeObjectRetain(v69);
            swift_bridgeObjectRelease_n(v63, 2);
            sub_1001E0F60(v57, v68, v69);
            swift_bridgeObjectRelease(v69);

            return;
          }
          swift_bridgeObjectRelease(v63);
        }
        v98 = v58;
        swift_bridgeObjectRelease(v63);
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v86 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
        v74 = v99;
        v73 = v100;
        (*(void (**)(id, uint64_t, uint64_t))(v100 + 16))(v99, v86, v4);
        v13 = v13;
        v87 = Logger.logObject.getter(v13);
        v88 = static os_log_type_t.error.getter(v87);
        if (!os_log_type_enabled(v87, v88))
        {

          v85 = v98;
LABEL_64:

          (*(void (**)(id, uint64_t))(v73 + 8))(v74, v4);
          return;
        }
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        v97 = swift_slowAlloc(32, -1);
        v102 = v97;
        *(_DWORD *)v89 = 136315138;
        v90 = objc_msgSend(v13, "topic");
        if (!v90)
        {
LABEL_69:

          __break(1u);
          JUMPOUT(0x1001E2E6CLL);
        }
        v91 = v90;
        v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v94 = v93;

        v101 = sub_1001DEF4C(v92, v94, &v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102);

        swift_bridgeObjectRelease(v94);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Received notification for unknown container topic: %s", v89, 0xCu);
        v95 = v97;
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v89, -1, -1);

        v96 = v98;
        (*(void (**)(id, uint64_t))(v100 + 8))(v99, v4);
        break;
      default:
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v38 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
        v27 = Logger.logObject.getter(v38);
        v28 = static os_log_type_t.debug.getter(v27);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_49;
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        v30 = "No need to handle unknown APS notification";
        goto LABEL_48;
    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    sub_100005288(v4, (uint64_t)qword_1002A89A8);
    v31 = v13;
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138412290;
      v102 = (uint64_t)v31;
      v36 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103);
      *v35 = v31;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "CloudKitSyncManager received unknown APS message (missing type): %@", v34, 0xCu);
      v37 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v35, 1, v37);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1001E2E7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_1001E2F10(v0 + 24);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for CloudKitSyncPushDelegate()
{
  return objc_opt_self(_TtC13appleaccountd24CloudKitSyncPushDelegate);
}

uint64_t sub_1001E2EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_1002929F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E2F10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_1002929F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E2F50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001E2F74(uint64_t a1)
{
  uint64_t v1;

  sub_1001E2054(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001E2F7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001E2FA0(uint64_t a1)
{
  uint64_t v1;

  sub_1001E14F8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001E2FA8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSObject *oslog;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A89A8);
  sub_10000F450(a1, a2);
  v5 = sub_10000F450(a1, a2);
  oslog = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v20 = v9;
    *(_DWORD *)v8 = 136315138;
    sub_1001D34B0(a1, a2);
    v11 = v10;
    v12 = sub_1000080B4((uint64_t *)&unk_10028E800);
    v13 = sub_10008685C();
    v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v11);
    v18 = sub_1001DEF4C(v14, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19);
    swift_bridgeObjectRelease(v16);
    sub_10000F494(a1, a2);
    sub_10000F494(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Received APS Public Token: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    sub_10000F494(a1, a2);
    sub_10000F494(a1, a2);

  }
}

void sub_1001E31E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89C0);
  sub_10000F450(a1, a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  sub_10000F450(a1, a2);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a6);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v28 = swift_slowAlloc(96, -1);
    v31 = v28;
    *(_DWORD *)v17 = 136315650;
    v26 = a5;
    sub_1001D34B0(a1, a2);
    v19 = v18;
    v25 = a3;
    v20 = sub_1000080B4((uint64_t *)&unk_10028E800);
    v21 = sub_10008685C();
    type = v16;
    v22 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v20, v21);
    v24 = v23;
    swift_bridgeObjectRelease(v19);
    v29 = sub_1001DEF4C(v22, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
    swift_bridgeObjectRelease(v24);
    sub_10000F494(a1, a2);
    sub_10000F494(a1, a2);
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v29 = sub_1001DEF4C(v25, a4, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v17 + 22) = 2080;
    swift_bridgeObjectRetain(a6);
    v29 = sub_1001DEF4C(v26, a6, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
    swift_bridgeObjectRelease_n(a6, 3);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "Received APS Token: %s for topic: %s, identifier: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    sub_10000F494(a1, a2);
    sub_10000F494(a1, a2);

    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease_n(a4, 2);
  }
}

uint64_t type metadata accessor for AccountStoreFactory()
{
  return objc_opt_self(_TtC13appleaccountd19AccountStoreFactory);
}

uint64_t type metadata accessor for XPCActivitySchedulerFactory()
{
  return objc_opt_self(_TtC13appleaccountd27XPCActivitySchedulerFactory);
}

uint64_t sub_1001E3528@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DaemonActivityScheduler();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for HealthSchedulerFactory()
{
  return objc_opt_self(_TtC13appleaccountd22HealthSchedulerFactory);
}

uint64_t sub_1001E3588@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = type metadata accessor for TrustedContactHealthScheduler(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_100299380);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028C8A0);
  result = Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider) = 0;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for CustodianIDMSRequestManagerFactory()
{
  return objc_opt_self(_TtC13appleaccountd34CustodianIDMSRequestManagerFactory);
}

uint64_t type metadata accessor for CustodianKeyRepairFactory()
{
  return objc_opt_self(_TtC13appleaccountd25CustodianKeyRepairFactory);
}

uint64_t sub_1001E367C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = type metadata accessor for BeneficiaryAccessKeyRepairHandler(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_100294B10);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4((uint64_t *)&unk_10028FBC0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_100295290);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4((uint64_t *)&unk_10028FBE0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4((uint64_t *)&unk_10028FBD0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  result = Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  *(_QWORD *)(v3
            + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext) = 1;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory()
{
  return objc_opt_self(_TtC13appleaccountd40BeneficiaryAccessKeyRepairHandlerFactory);
}

uint64_t sub_1001E3844@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001E367C(a1);
}

id sub_1001E3858@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  objc_class *v7;
  id result;
  _QWORD *v9;

  v2 = type metadata accessor for UserNotificationManager(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
  v6 = (_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v6[3] = sub_1000067D4(0, (unint64_t *)&qword_100294950, AAFollowUpController_ptr);
  v6[4] = &off_10026B7F8;
  *v6 = v5;
  v7 = (objc_class *)type metadata accessor for NotificationController();
  result = objc_msgSend(objc_allocWithZone(v7), "init");
  v9 = (_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v9[3] = v7;
  v9[4] = &off_10026DDF8;
  *v9 = result;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for NotificationManagerFactory()
{
  return objc_opt_self(_TtC13appleaccountd26NotificationManagerFactory);
}

id sub_1001E3984@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001E3858(a1);
}

uint64_t type metadata accessor for RecoveryFactorsControllerFactory()
{
  return objc_opt_self(_TtC13appleaccountd32RecoveryFactorsControllerFactory);
}

uint64_t type metadata accessor for DeviceStateFactory()
{
  return objc_opt_self(_TtC13appleaccountd18DeviceStateFactory);
}

uint64_t sub_1001E39D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100003E98((uint64_t (*)(_QWORD))type metadata accessor for DaemonDeviceState, a1);
}

uint64_t type metadata accessor for CustodianHealthCheckVersionProviderFactory()
{
  return objc_opt_self(_TtC13appleaccountd42CustodianHealthCheckVersionProviderFactory);
}

void sub_1001E3A04(_QWORD *a1@<X8>)
{
  a1[3] = &type metadata for CustodianHealthCheckVersionProvider;
  *a1 = 6;
}

uint64_t type metadata accessor for TapToRadarRequesterFactory()
{
  return objc_opt_self(_TtC13appleaccountd26TapToRadarRequesterFactory);
}

uint64_t sub_1001E3A3C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100004970(type metadata accessor for TapToRadarRequestController, (uint64_t (*)(void))sub_10010A594, a1);
}

uint64_t type metadata accessor for CustodianIdMSConfirmationHandlerFactory()
{
  return objc_opt_self(_TtC13appleaccountd39CustodianIdMSConfirmationHandlerFactory);
}

uint64_t type metadata accessor for IdentityTaskSchedulerFactory()
{
  return objc_opt_self(_TtC13appleaccountd28IdentityTaskSchedulerFactory);
}

uint64_t sub_1001E3A90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = type metadata accessor for IdentityTaskScheduler(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_100299380);
  result = Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd21IdentityTaskScheduler____lazy_storage___activityProvider) = 0;
  a1[3] = v2;
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for AAAppleIDAuthenticationProviderFactory()
{
  return objc_opt_self(_TtC13appleaccountd38AAAppleIDAuthenticationProviderFactory);
}

uint64_t type metadata accessor for CDPFollowUpHandlerFactory()
{
  return objc_opt_self(_TtC13appleaccountd25CDPFollowUpHandlerFactory);
}

uint64_t sub_1001E3B54@<X0>(uint64_t *a1@<X8>)
{
  return sub_100003E98((uint64_t (*)(_QWORD))type metadata accessor for DaemonCDPFollowUpHandler, a1);
}

uint64_t type metadata accessor for WalrusPCSSignatureValidatorFactory()
{
  return objc_opt_self(_TtC13appleaccountd34WalrusPCSSignatureValidatorFactory);
}

uint64_t sub_1001E3B80@<X0>(uint64_t *a1@<X8>)
{
  return sub_100003E98((uint64_t (*)(_QWORD))type metadata accessor for WalrusPCSSignatureValidator, a1);
}

uint64_t type metadata accessor for TapToRadarHelperFactory()
{
  return objc_opt_self(_TtC13appleaccountd23TapToRadarHelperFactory);
}

uint64_t sub_1001E3BAC@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend(objc_allocWithZone((Class)AAFTapToRadarHelper), "init");
  result = sub_1000067D4(0, (unint64_t *)&unk_1002921E8, AAFTapToRadarHelper_ptr);
  a1[3] = result;
  *a1 = v2;
  return result;
}

BOOL static DeviceLockState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceLockState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int DeviceLockState.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t sub_1001E3C8C()
{
  unint64_t result;

  result = qword_100299388;
  if (!qword_100299388)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceLockState, &type metadata for DeviceLockState);
    atomic_store(result, (unint64_t *)&qword_100299388);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceLockState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001E3D1C + 4 * byte_1002226B5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001E3D50 + 4 * byte_1002226B0[v4]))();
}

uint64_t sub_1001E3D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E3D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E3D60);
  return result;
}

uint64_t sub_1001E3D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E3D74);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001E3D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E3D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

uint64_t type metadata accessor for CustodianshipHealthCheckAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_1002993B0;
  if (!qword_1002993B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianshipHealthCheckAnalyticsEvent);
  return result;
}

void sub_1001E3DD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v2 = qword_1002A8C50;
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = &unk_1002227B8;
  v5[2] = &unk_1002227D0;
  sub_1000AAD84(319);
  if (v4 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 4, v5, a1 + v2);
  }
}

uint64_t sub_1001E3E70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001E3EAC
                                                                     + 4 * asc_100222770[a1]))(0xD000000000000011, 0x80000001002109B0);
}

uint64_t sub_1001E3EAC()
{
  return 0x6D75736B63656863;
}

unint64_t sub_1001E3ED0()
{
  return 0xD000000000000012;
}

uint64_t sub_1001E3EF8()
{
  uint64_t v0;

  return v0 + 1;
}

uint64_t sub_1001E3F30(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSString v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  uint64_t v25[4];
  _QWORD v26[5];
  unint64_t v27;

  v3 = v2;
  v5 = sub_1000080B4(&qword_10028F658);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3 + qword_1002993A8, v5);
    Dependency.wrappedValue.getter(v26, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v16 = *sub_10000732C(v26, v26[3]);
    v17 = sub_1000080B4(&qword_10028F8B8);
    OS_dispatch_queue.sync<A>(execute:)(v25, sub_1000AAE2C, v16, v17);
    v18 = v25[0];
    sub_1001CE0B4(v25[0]);
    v20 = v19;
    swift_bridgeObjectRelease(v18);
    v27 = v20;
    sub_100006F58(v26);
    v21 = String._bridgeToObjectiveC()();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    v26[0] = v27;
    v27 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v21, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v23 = v27;
    v27 = v26[0];
    swift_bridgeObjectRelease(v23);
    __asm { BR              X10 }
  }
  v10 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v11 = objc_msgSend(v10, "environment");

  v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v12 + 16))
  {
    swift_bridgeObjectRelease(v12);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v14 = v13;
  result = swift_bridgeObjectRelease(v12);
  if ((v14 & 1) == 0)
    goto LABEL_6;
  return result;
}

void sub_1001E492C()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianshipHealthCheckAnalyticsEvent", 52, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1001E4958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100299390));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1002993A0 + 8));
  v1 = v0 + qword_1002993A8;
  v2 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_1001E49BC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001E49F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100299390));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1002993A0 + 8));
  v2 = a1 + qword_1002993A8;
  v3 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1001E4A58()
{
  return type metadata accessor for CustodianshipHealthCheckAnalyticsEvent(0);
}

uint64_t sub_1001E4A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  _QWORD v18[2];

  v1 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(v18[1]);
  strcpy((char *)v18, "{custodianID: ");
  HIBYTE(v18[1]) = -18;
  v5 = type metadata accessor for CustodianRecord(0);
  v6._countAndFlagsBits = UUID.uuidString.getter(v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._object = (void *)0x8000000100210A80;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  sub_100024A20(v0 + *(int *)(v5 + 64), (uint64_t)v4, (uint64_t *)&unk_1002904F0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100004934((uint64_t)v4, (uint64_t *)&unk_1002904F0);
    v12 = 0;
    v13 = (void *)0xE000000000000000;
  }
  else
  {
    v12 = UUID.uuidString.getter(v11);
    v13 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
  }
  v15._countAndFlagsBits = v12;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v13);
  v16._countAndFlagsBits = 125;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v18[0];
}

uint64_t sub_1001E4BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  _QWORD v18[2];

  v1 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease(v18[1]);
  strcpy((char *)v18, "{custodianID: ");
  HIBYTE(v18[1]) = -18;
  v5 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v6._countAndFlagsBits = UUID.uuidString.getter(v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._object = (void *)0x8000000100210A80;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  sub_100024A20(v0 + *(int *)(v5 + 48), (uint64_t)v4, (uint64_t *)&unk_1002904F0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100004934((uint64_t)v4, (uint64_t *)&unk_1002904F0);
    v12 = 0;
    v13 = (void *)0xE000000000000000;
  }
  else
  {
    v12 = UUID.uuidString.getter(v11);
    v13 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
  }
  v15._countAndFlagsBits = v12;
  v15._object = v13;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v13);
  v16._countAndFlagsBits = 125;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v18[0];
}

uint64_t sub_1001E4D98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A20(v2 + *(int *)(v4 + 64), (uint64_t)v11, (uint64_t *)&unk_1002904F0);
  sub_100027FE8(v2, (uint64_t)v7, type metadata accessor for CustodianRecord);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, &v7[*(int *)(v4 + 20)], v12);
    sub_100028388((uint64_t)v7, type metadata accessor for CustodianRecord);
    sub_100004934((uint64_t)v11, (uint64_t *)&unk_1002904F0);
  }
  else
  {
    sub_100028388((uint64_t)v7, type metadata accessor for CustodianRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v12);
  }
  v20 = 0;
  v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v21);
  v20 = 0xD000000000000013;
  v21 = 0x8000000100210AA0;
  v14 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 0x6D6F726620;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18 = v21;
  sub_1001E51D8(v20, v21, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t))sub_1001E4A60);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_1001E4FB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for CustodianRecoverySessionRecord(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A20(v2 + *(int *)(v4 + 48), (uint64_t)v11, (uint64_t *)&unk_1002904F0);
  sub_100027FE8(v2, (uint64_t)v7, type metadata accessor for CustodianRecoverySessionRecord);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a1, &v7[*(int *)(v4 + 20)], v12);
    sub_100028388((uint64_t)v7, type metadata accessor for CustodianRecoverySessionRecord);
    sub_100004934((uint64_t)v11, (uint64_t *)&unk_1002904F0);
  }
  else
  {
    sub_100028388((uint64_t)v7, type metadata accessor for CustodianRecoverySessionRecord);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v11, v12);
  }
  v20 = 0;
  v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease(v21);
  v20 = 0xD000000000000013;
  v21 = 0x8000000100210AA0;
  v14 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 0x6D6F726620;
  v17._object = (void *)0xE500000000000000;
  String.append(_:)(v17);
  v18 = v21;
  sub_1001E51D8(v20, v21, type metadata accessor for CustodianRecoverySessionRecord, (uint64_t (*)(uint64_t))sub_1001E4BFC);
  return swift_bridgeObjectRelease(v18);
}

void sub_1001E51D8(uint64_t a1, unint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = a3(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v23 - v11;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v13 = type metadata accessor for Logger(0);
  sub_100005288(v13, (uint64_t)qword_1002A89D8);
  sub_100027FE8(v4, (uint64_t)v12, a3);
  v14 = swift_bridgeObjectRetain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v24 = v18;
    *(_DWORD *)v17 = 136315394;
    swift_bridgeObjectRetain(a2);
    v23 = sub_1001DEF4C(a1, a2, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    v19 = swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v17 + 12) = 2080;
    v20 = a4(v19);
    v22 = v21;
    v23 = sub_1001DEF4C(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(v22);
    sub_100028388((uint64_t)v12, a3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
    sub_100028388((uint64_t)v12, a3);
  }

}

void sub_1001E5418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FE40, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for CustodianHealthRecord(0) + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100053FB4(a1, v13, (uint64_t)sub_1001F7D9C, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E55AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FCB0, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 40)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_10005421C(a1, v13, (uint64_t)sub_1001F6F24, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E5740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FC88, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for CustodianRecord(0) + 48)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100054464(a1, v13, (uint64_t)sub_1001F6EE8, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E58D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FF08, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 44)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100054914(a1, v13, (uint64_t)sub_1001F7EC8, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E5A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FE68, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for CustodianshipInfoRecord(0) + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100054B5C(a1, v13, (uint64_t)sub_1001F7DD8, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E5BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FEE0, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 40)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100054DC4(a1, v13, (uint64_t)sub_1001F7E8C, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E5D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FEB8, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for BenefactorInfoRecord(0) + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_10005500C(a1, v13, (uint64_t)sub_1001F7E50, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E5F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FE90, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for InheritanceHealthRecord(0) + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_1000546AC(a1, v13, (uint64_t)sub_1001F7E14, (uint64_t)v7);
  swift_release(v7);

}

void sub_1001E60B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;

  sub_10000732C((_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 80));
  v7 = (_QWORD *)swift_allocObject(&unk_10026FFD0, 40, 7);
  v7[2] = v3;
  v7[3] = a2;
  v7[4] = a3;
  v8 = qword_10028AF00;
  swift_retain(v3);
  swift_retain(a3);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for IdentityRecord(0) + 64)) == 1)
  {
    if (qword_10028AF30 != -1)
      swift_once(&qword_10028AF30, sub_1001FDE6C);
    v9 = &qword_1002A8CC0;
  }
  else
  {
    if (qword_10028AF28 != -1)
      swift_once(&qword_10028AF28, sub_1001FDE34);
    v9 = &qword_1002A8CB0;
  }
  v11 = *v9;
  v10 = v9[1];
  swift_bridgeObjectRetain(v10);
  v12 = sub_1001FD4C0(v11, v10);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v10);

  sub_100055274(a1, v13, (uint64_t)sub_1001F8124, (uint64_t)v7);
  swift_release(v7);

}

uint64_t sub_1001E624C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t *a6, void (*a7)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  __n128 v39;
  os_log_type_t v40;
  uint8_t *v41;
  _QWORD v43[3];
  void (*v44)(uint64_t *);
  uint64_t v45;
  uint64_t v46;

  v44 = a3;
  v13 = a5(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)v43 - v15;
  v17 = sub_1000080B4(a6);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (_QWORD *)((char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v22);
  v24 = (_QWORD *)((char *)v43 - v23);
  sub_100024A20(a1, (uint64_t)v43 - v23, a6);
  if (swift_getEnumCaseMultiPayload(v24, v17) == 1)
  {
    v25 = *v24;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v25);
    v27 = swift_errorRetain(v25);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v43[2] = a4;
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v45 = v25;
      v46 = v31;
      *(_DWORD *)v30 = 136315138;
      v43[1] = v30 + 4;
      swift_errorRetain(v25);
      v32 = sub_1000080B4(&qword_10028E850);
      v33 = String.init<A>(describing:)(&v45, v32);
      v35 = v34;
      v45 = sub_1001DEF4C(v33, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v35);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error saving to cloud: %s", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_errorRelease(v25);
      swift_errorRelease(v25);
    }

    *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v17, 1);
    swift_errorRetain(v25);
    v44(v21);
    swift_errorRelease(v25);
    return sub_100004934((uint64_t)v21, a6);
  }
  else
  {
    sub_10003B730((uint64_t)v24, (uint64_t)v16, a5);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100005288(v36, (uint64_t)qword_1002A8A38);
    v38 = Logger.logObject.getter(v37);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v38, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v40, "Cloud record saved to CloudKitStorage.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
    a7(v16, 0, 2, (void (*)(_QWORD))v44, a4);
    return sub_100028388((uint64_t)v16, a5);
  }
}

uint64_t sub_1001E6614(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v7 = type metadata accessor for IdentityRecord(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028D618);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (uint64_t *)((char *)&v39 - v17);
  sub_100024A20(a1, (uint64_t)&v39 - v17, &qword_10028D618);
  if (swift_getEnumCaseMultiPayload(v18, v11) == 1)
  {
    v19 = *v18;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v41 = v19;
      v42 = v25;
      *(_DWORD *)v24 = 136315138;
      v39 = v24 + 4;
      swift_errorRetain(v19);
      v26 = sub_1000080B4(&qword_10028E850);
      v27 = String.init<A>(describing:)(&v41, v26);
      v28 = a3;
      v30 = v29;
      v41 = sub_1001DEF4C(v27, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      v31 = v30;
      a3 = v28;
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error saving to cloud: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }

    *v15 = v19;
    swift_storeEnumTagMultiPayload(v15, v11, 1);
    swift_errorRetain(v19);
    a3(v15);
    swift_errorRelease(v19);
    return sub_100004934((uint64_t)v15, &qword_10028D618);
  }
  else
  {
    sub_10003B730((uint64_t)v18, (uint64_t)v10, type metadata accessor for IdentityRecord);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A8A38);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Cloud record saved to CloudKitStorage.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
    sub_10004E7A4((uint64_t)v10, 0, 2, (uint64_t)a3, v40);
    return sub_100028388((uint64_t)v10, type metadata accessor for IdentityRecord);
  }
}

uint64_t sub_1001E69E4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  int v86;
  id v87;
  double v88;
  char v89;
  double v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void (*v108)(_QWORD);
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(_QWORD);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  void (*v145)(_QWORD);
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  id v149;
  uint64_t v150;
  uint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  id v154;
  id v155;
  uint64_t v156;
  _QWORD v157[2];
  uint64_t v158;
  void (*v159)(_QWORD);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  void (*v187)(_QWORD);
  uint64_t aBlock[5];
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD v192[2];
  char v193[8];

  v180 = a6;
  v186 = a5;
  v187 = a3;
  v178 = type metadata accessor for DispatchWorkItemFlags(0);
  v177 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178, v13);
  v176 = (char *)v157 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for DispatchQoS(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175, v15);
  v173 = (char *)v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for DispatchTime(0);
  v172 = *(_QWORD *)(v182 - 8);
  v18 = __chkstk_darwin(v182, v17);
  v171 = (char *)v157 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v181 = (char *)v157 - v21;
  v169 = type metadata accessor for DispatchQoS.QoSClass(0);
  v168 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169, v22);
  v167 = (char *)v157 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4(&qword_10028D640);
  __chkstk_darwin(v24, v25);
  v185 = (char *)v157 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for CustodianshipInfoRecord(0);
  v179 = *(_QWORD *)(v166 - 8);
  v27 = *(_QWORD *)(v179 + 64);
  v29 = __chkstk_darwin(v166, v28);
  v170 = (uint64_t)v157 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29, v30);
  v163 = (uint64_t)v157 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v164 = (char *)v157 - v35;
  v37 = __chkstk_darwin(v34, v36);
  v162 = (uint64_t)v157 - v38;
  v40 = __chkstk_darwin(v37, v39);
  v165 = (uint64_t)v157 - v41;
  __chkstk_darwin(v40, v42);
  v44 = (char *)v157 - v43;
  v45 = sub_1000080B4(&qword_10028C450);
  v47 = __chkstk_darwin(v45, v46);
  v184 = (char *)v157 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47, v49);
  v51 = (_QWORD *)((char *)v157 - v50);
  sub_100024A20(a1, (uint64_t)v157 - v50, &qword_10028C450);
  v183 = v45;
  if (swift_getEnumCaseMultiPayload(v51, v45) == 1)
  {
    v160 = a8;
    v161 = a2;
    v52 = *v51;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100005288(v53, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v52);
    v55 = swift_errorRetain(v52);
    v157[1] = v54;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v159 = a7;
    if (v58)
    {
      v59 = swift_slowAlloc(12, -1);
      v158 = a4;
      v60 = (uint8_t *)v59;
      v61 = swift_slowAlloc(32, -1);
      aBlock[0] = v61;
      *(_DWORD *)v60 = 136315138;
      v191 = v52;
      swift_errorRetain(v52);
      v62 = sub_1000080B4(&qword_10028E850);
      v63 = String.init<A>(describing:)(&v191, v62);
      v65 = v64;
      v191 = sub_1001DEF4C(v63, v64, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
      swift_bridgeObjectRelease(v65);
      swift_errorRelease(v52);
      swift_errorRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Error saving to cloud: %s", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      v66 = v60;
      a4 = v158;
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_errorRelease(v52);
      swift_errorRelease(v52);
    }

    v74 = v185;
    if (v186 <= 2 && (swift_getErrorValue(v52, v193, v192), (v75 = sub_10015D168(v192[1])) != 0))
    {
      v76 = (char *)v75;
      type metadata accessor for CKError(0);
      v78 = v77;
      v191 = 14;
      v79 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v80 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
      _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v191, v79, v78, v80);
      v81 = (void *)aBlock[0];
      v190 = aBlock[0];
      _BridgedStoredNSError.code.getter(&v191, v78, v80);

      v82 = (void *)sub_10015D724(v191, v76);
      v83 = v179;
      v157[0] = v52;
      v185 = v76;
      if (v82)
      {
        v84 = (void *)sub_10015D200(v76);
        if (v84)
        {
          v85 = v166;
          v86 = *(unsigned __int8 *)(v180 + *(int *)(v166 + 36));
          v87 = v84;
          sub_1000ECBBC(v87, v86, (uint64_t)v74);
          (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v83 + 56))(v74, 0, 1, v85);
          v122 = v165;
          sub_10003B730((uint64_t)v74, v165, type metadata accessor for CustodianshipInfoRecord);
          v123 = v162;
          v124 = sub_100027FE8(v122, v162, type metadata accessor for CustodianshipInfoRecord);
          v125 = Logger.logObject.getter(v124);
          v126 = static os_log_type_t.error.getter(v125);
          if (os_log_type_enabled(v125, v126))
          {
            v128 = (uint8_t *)swift_slowAlloc(12, -1);
            v129 = swift_slowAlloc(32, -1);
            v158 = a4;
            v130 = v129;
            aBlock[0] = v129;
            *(_DWORD *)v128 = 136315138;
            v131 = UUID.uuidString.getter(v129);
            v133 = v132;
            v191 = sub_1001DEF4C(v131, v132, aBlock);
            v83 = v179;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192);
            swift_bridgeObjectRelease(v133);
            sub_100028388(v123, type metadata accessor for CustodianshipInfoRecord);
            _os_log_impl((void *)&_mh_execute_header, v125, v126, "Trying to resave after conflict resolution %s", v128, 0xCu);
            swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
            v134 = v130;
            a4 = v158;
            swift_slowDealloc(v134, -1, -1);
            swift_slowDealloc(v128, -1, -1);
          }
          else
          {
            sub_100028388(v123, type metadata accessor for CustodianshipInfoRecord);
          }

          v135 = v161;
          v184 = (char *)(v186 + 1);
          v186 = (uint64_t)sub_10000732C((_QWORD *)(v161 + 56), *(_QWORD *)(v161 + 80));
          v136 = v164;
          v137 = v165;
          v138 = v160;
          v139 = v159;
          v159(v165);
          v140 = v163;
          sub_100027FE8(v137, v163, type metadata accessor for CustodianshipInfoRecord);
          v141 = *(unsigned __int8 *)(v83 + 80);
          v142 = (v141 + 48) & ~v141;
          v143 = (v27 + v142 + 7) & 0xFFFFFFFFFFFFFFF8;
          v144 = (_QWORD *)swift_allocObject(&unk_10026FF80, v143 + 16, v141 | 7);
          v145 = v187;
          v144[2] = v135;
          v144[3] = v145;
          v146 = v184;
          v144[4] = a4;
          v144[5] = v146;
          sub_10003B730(v140, (uint64_t)v144 + v142, type metadata accessor for CustodianshipInfoRecord);
          v147 = (_QWORD *)((char *)v144 + v143);
          *v147 = v139;
          v147[1] = v138;
          v148 = qword_10028AF00;
          swift_retain(v135);
          swift_retain(a4);
          swift_retain(v138);
          if (v148 != -1)
            swift_once(&qword_10028AF00, sub_1001FD458);
          v149 = v185;
          v150 = (uint64_t)v136;
          if (v136[*(int *)(v166 + 36)] == 1)
          {
            if (qword_10028AF10 != -1)
              swift_once(&qword_10028AF10, sub_1001FDD8C);
            v151 = &qword_1002A8C80;
          }
          else
          {
            if (qword_10028AF08 != -1)
              swift_once(&qword_10028AF08, sub_1001FDD54);
            v151 = &qword_1002A8C70;
          }
          v153 = *v151;
          v152 = v151[1];
          swift_bridgeObjectRetain(v152);
          v154 = sub_1001FD4C0(v153, v152);
          v155 = objc_msgSend(v154, "privateCloudDatabase");
          swift_bridgeObjectRelease(v152);

          sub_100054B5C(v150, v155, (uint64_t)sub_1001F8098, (uint64_t)v144);
          swift_release(v144);

          sub_100028388(v150, type metadata accessor for CustodianshipInfoRecord);
          swift_errorRelease(v157[0]);
          return sub_100028388(v165, type metadata accessor for CustodianshipInfoRecord);
        }
      }
      if (sub_10015D630(v76) || sub_10015D638(v76) || sub_10015D640(v76) || sub_10015D648(v76) || sub_10015D650(v76))
      {
        v88 = COERCE_DOUBLE(sub_10015D540((uint64_t)v76));
        if ((v89 & 1) != 0)
          v90 = 60.0;
        else
          v90 = v88;
        sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
        v91 = v168;
        v92 = v167;
        v93 = v169;
        (*(void (**)(char *, _QWORD, uint64_t))(v168 + 104))(v167, enum case for DispatchQoS.QoSClass.default(_:), v169);
        v183 = static OS_dispatch_queue.global(qos:)(v92);
        v94 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v92, v93);
        v95 = v171;
        static DispatchTime.now()(v94);
        + infix(_:_:)(v95, v90);
        v184 = *(char **)(v172 + 8);
        ((void (*)(char *, uint64_t))v184)(v95, v182);
        v96 = v170;
        sub_100027FE8(v180, v170, type metadata accessor for CustodianshipInfoRecord);
        v97 = *(unsigned __int8 *)(v83 + 80);
        v98 = (v97 + 16) & ~v97;
        v99 = (v27 + v98 + 7) & 0xFFFFFFFFFFFFFFF8;
        v100 = a4;
        v101 = (v99 + 15) & 0xFFFFFFFFFFFFFFF8;
        v102 = (v101 + 23) & 0xFFFFFFFFFFFFFFF8;
        v103 = (v102 + 15) & 0xFFFFFFFFFFFFFFF8;
        v104 = swift_allocObject(&unk_10026FF30, v103 + 16, v97 | 7);
        sub_10003B730(v96, v104 + v98, type metadata accessor for CustodianshipInfoRecord);
        v105 = v161;
        *(_QWORD *)(v104 + v99) = v161;
        v106 = (_QWORD *)(v104 + v101);
        v107 = v160;
        *v106 = v159;
        v106[1] = v107;
        v108 = v187;
        *(_QWORD *)(v104 + v102) = v186;
        v109 = (_QWORD *)(v104 + v103);
        *v109 = v108;
        v109[1] = v100;
        aBlock[4] = (uint64_t)sub_1001F8000;
        v189 = v104;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000051D0;
        aBlock[3] = (uint64_t)&unk_10026FF48;
        v110 = _Block_copy(aBlock);
        swift_retain(v105);
        swift_retain(v100);
        v111 = swift_retain(v107);
        v112 = v173;
        static DispatchQoS.unspecified.getter(v111);
        v191 = (uint64_t)_swiftEmptyArrayStorage;
        v113 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v114 = sub_1000080B4((uint64_t *)&unk_100295A00);
        v115 = sub_100008628();
        v116 = v176;
        v117 = v178;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v191, v114, v115, v178, v113);
        v118 = v181;
        v119 = (void *)v183;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v181, v112, v116, v110);

        _Block_release(v110);
        swift_errorRelease(v157[0]);
        (*(void (**)(char *, uint64_t))(v177 + 8))(v116, v117);
        (*(void (**)(char *, uint64_t))(v174 + 8))(v112, v175);
        ((void (*)(char *, uint64_t))v184)(v118, v182);
        return swift_release(v189);
      }
      v156 = v183;
      v121 = (uint64_t)v184;
      *(_QWORD *)v184 = v52;
      swift_storeEnumTagMultiPayload(v121, v156, 1);
      swift_errorRetain(v52);
      v187(v121);

    }
    else
    {
      v120 = v183;
      v121 = (uint64_t)v184;
      *(_QWORD *)v184 = v52;
      swift_storeEnumTagMultiPayload(v121, v120, 1);
      swift_errorRetain(v52);
      v187(v121);
    }
    swift_errorRelease(v52);
    return sub_100004934(v121, &qword_10028C450);
  }
  sub_10003B730((uint64_t)v51, (uint64_t)v44, type metadata accessor for CustodianshipInfoRecord);
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v67 = type metadata accessor for Logger(0);
  v68 = sub_100005288(v67, (uint64_t)qword_1002A8A38);
  v69 = Logger.logObject.getter(v68);
  v71 = static os_log_type_t.default.getter(v70);
  if (os_log_type_enabled(v69, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v71, "Cloud record saved to CloudKitStorage.", v72, 2u);
    swift_slowDealloc(v72, -1, -1);
  }

  sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  sub_10004E724((uint64_t)v44, 0, 2, (uint64_t)v187, a4);
  return sub_100028388((uint64_t)v44, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001E78D0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v74;
  char *v75;
  char *v76;
  BOOL v77;
  void *v78;
  uint64_t v79;
  int v80;
  char *v81;
  double v82;
  char v83;
  double v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(_QWORD);
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  void (*v129)(_QWORD);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t *v141;
  unint64_t v142;
  uint64_t v143;
  id v144;
  id v145;
  _QWORD v146[3];
  void (*v147)(_QWORD);
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t aBlock[5];
  uint64_t v177;
  _QWORD v178[2];
  char v179[8];

  v167 = a6;
  v173 = a5;
  v174 = a4;
  v166 = type metadata accessor for DispatchWorkItemFlags(0);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166, v13);
  v164 = (char *)v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for DispatchQoS(0);
  v162 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163, v15);
  v161 = (char *)v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for DispatchTime(0);
  v160 = *(_QWORD *)(v170 - 8);
  v18 = __chkstk_darwin(v170, v17);
  v159 = (char *)v146 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v169 = (char *)v146 - v21;
  v157 = type metadata accessor for DispatchQoS.QoSClass(0);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157, v22);
  v155 = (char *)v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4(&qword_10028D5C8);
  __chkstk_darwin(v24, v25);
  v172 = (char *)v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for CustodianRecord(0);
  v168 = *(_QWORD *)(v154 - 8);
  v27 = *(_QWORD *)(v168 + 64);
  v29 = __chkstk_darwin(v154, v28);
  v158 = (uint64_t)v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29, v30);
  v151 = (uint64_t)v146 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v152 = (char *)v146 - v35;
  v37 = __chkstk_darwin(v34, v36);
  v150 = (uint64_t)v146 - v38;
  v40 = __chkstk_darwin(v37, v39);
  v153 = (uint64_t)v146 - v41;
  __chkstk_darwin(v40, v42);
  v44 = (char *)v146 - v43;
  v45 = sub_1000080B4(&qword_10028D5D0);
  v47 = __chkstk_darwin(v45, v46);
  v171 = (char *)v146 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47, v49);
  v51 = (void **)((char *)v146 - v50);
  sub_100024A20(a1, (uint64_t)v146 - v50, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v51, v45) == 1)
  {
    v147 = a7;
    v148 = a8;
    v52 = *v51;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100005288(v53, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v52);
    v55 = swift_errorRetain(v52);
    v146[2] = v54;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v149 = a2;
    if (v58)
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      *(_DWORD *)v59 = 136315138;
      v146[1] = v59 + 4;
      v175 = v52;
      aBlock[0] = v60;
      swift_errorRetain(v52);
      v61 = sub_1000080B4(&qword_10028E850);
      v62 = String.init<A>(describing:)(&v175, v61);
      v63 = a3;
      v65 = v64;
      v175 = (void *)sub_1001DEF4C(v62, v64, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, aBlock);
      v66 = v65;
      a3 = v63;
      swift_bridgeObjectRelease(v66);
      swift_errorRelease(v52);
      swift_errorRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Error saving to cloud: %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      swift_errorRelease(v52);
      swift_errorRelease(v52);
    }

    v74 = v172;
    if (v173 <= 2 && (swift_getErrorValue(v52, v179, v178), (v75 = (char *)sub_10015D168(v178[1])) != 0))
    {
      v76 = v75;
      v77 = sub_10015D1F8(v75);
      v146[0] = v52;
      v172 = v76;
      if (v77)
      {
        v78 = (void *)sub_10015D200(v76);
        if (v78)
        {
          v79 = v154;
          v80 = *(unsigned __int8 *)(v167 + *(int *)(v154 + 48));
          v81 = v78;
          sub_1000940B4(v81, v80, (uint64_t)v74);
          v171 = v81;
          (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v168 + 56))(v74, 0, 1, v79);
          v115 = v153;
          sub_10003B730((uint64_t)v74, v153, type metadata accessor for CustodianRecord);
          v116 = v150;
          v117 = sub_100027FE8(v115, v150, type metadata accessor for CustodianRecord);
          v118 = Logger.logObject.getter(v117);
          v119 = static os_log_type_t.error.getter(v118);
          if (os_log_type_enabled(v118, v119))
          {
            v120 = (uint8_t *)swift_slowAlloc(12, -1);
            v121 = swift_slowAlloc(32, -1);
            aBlock[0] = v121;
            *(_DWORD *)v120 = 136315138;
            v122 = UUID.uuidString.getter(v121);
            v124 = v123;
            v175 = (void *)sub_1001DEF4C(v122, v123, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, aBlock);
            swift_bridgeObjectRelease(v124);
            sub_100028388(v116, type metadata accessor for CustodianRecord);
            _os_log_impl((void *)&_mh_execute_header, v118, v119, "Trying to resave after conflict resolution %s", v120, 0xCu);
            swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v121, -1, -1);
            swift_slowDealloc(v120, -1, -1);
          }
          else
          {
            sub_100028388(v116, type metadata accessor for CustodianRecord);
          }

          v125 = v149;
          v126 = v148;
          v127 = v152;
          v170 = v173 + 1;
          v173 = (uint64_t)sub_10000732C((_QWORD *)(v149 + 56), *(_QWORD *)(v149 + 80));
          v128 = v153;
          v129 = v147;
          v147(v153);
          v130 = v151;
          sub_100027FE8(v128, v151, type metadata accessor for CustodianRecord);
          v131 = *(unsigned __int8 *)(v168 + 80);
          v132 = (v131 + 48) & ~v131;
          v133 = (v27 + v132 + 7) & 0xFFFFFFFFFFFFFFF8;
          v134 = (_QWORD *)swift_allocObject(&unk_10026FB98, v133 + 16, v131 | 7);
          v134[2] = v125;
          v134[3] = a3;
          v135 = v174;
          v136 = v170;
          v134[4] = v174;
          v134[5] = v136;
          sub_10003B730(v130, (uint64_t)v134 + v132, type metadata accessor for CustodianRecord);
          v137 = (_QWORD *)((char *)v134 + v133);
          *v137 = v129;
          v137[1] = v126;
          v138 = qword_10028AF00;
          swift_retain(v125);
          swift_retain(v135);
          swift_retain(v126);
          if (v138 != -1)
            swift_once(&qword_10028AF00, sub_1001FD458);
          v139 = (uint64_t)v127;
          v140 = v171;
          if (v127[*(int *)(v154 + 48)] == 1)
          {
            if (qword_10028AF10 != -1)
              swift_once(&qword_10028AF10, sub_1001FDD8C);
            v141 = &qword_1002A8C80;
          }
          else
          {
            if (qword_10028AF08 != -1)
              swift_once(&qword_10028AF08, sub_1001FDD54);
            v141 = &qword_1002A8C70;
          }
          v143 = *v141;
          v142 = v141[1];
          swift_bridgeObjectRetain(v142);
          v144 = sub_1001FD4C0(v143, v142);
          v145 = objc_msgSend(v144, "privateCloudDatabase");
          swift_bridgeObjectRelease(v142);

          sub_100054464(v139, v145, (uint64_t)sub_1001F6C8C, (uint64_t)v134);
          swift_release(v134);

          sub_100028388(v139, type metadata accessor for CustodianRecord);
          swift_errorRelease(v146[0]);
          return sub_100028388(v153, type metadata accessor for CustodianRecord);
        }
      }
      if (sub_10015D630(v76) || sub_10015D638(v76) || sub_10015D640(v76) || sub_10015D648(v76) || sub_10015D650(v76))
      {
        v82 = COERCE_DOUBLE(sub_10015D540((uint64_t)v76));
        if ((v83 & 1) != 0)
          v84 = 60.0;
        else
          v84 = v82;
        sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
        v85 = v156;
        v86 = v155;
        v87 = v157;
        (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for DispatchQoS.QoSClass.default(_:), v157);
        v154 = static OS_dispatch_queue.global(qos:)(v86);
        v88 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v87);
        v89 = v159;
        static DispatchTime.now()(v88);
        + infix(_:_:)(v89, v84);
        v171 = *(char **)(v160 + 8);
        ((void (*)(char *, uint64_t))v171)(v89, v170);
        v90 = v158;
        sub_100027FE8(v167, v158, type metadata accessor for CustodianRecord);
        v91 = *(unsigned __int8 *)(v168 + 80);
        v92 = (v91 + 16) & ~v91;
        v93 = (v27 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
        v94 = v174;
        v95 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8;
        v96 = a3;
        v97 = (v95 + 23) & 0xFFFFFFFFFFFFFFF8;
        v98 = (v97 + 15) & 0xFFFFFFFFFFFFFFF8;
        v99 = swift_allocObject(&unk_10026FB48, v98 + 16, v91 | 7);
        sub_10003B730(v90, v99 + v92, type metadata accessor for CustodianRecord);
        v100 = v149;
        *(_QWORD *)(v99 + v93) = v149;
        v101 = (_QWORD *)(v99 + v95);
        v102 = v148;
        *v101 = v147;
        v101[1] = v102;
        *(_QWORD *)(v99 + v97) = v173;
        v103 = (_QWORD *)(v99 + v98);
        *v103 = v96;
        v103[1] = v94;
        aBlock[4] = (uint64_t)sub_1001F6E30;
        v177 = v99;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000051D0;
        aBlock[3] = (uint64_t)&unk_10026FB60;
        v104 = _Block_copy(aBlock);
        swift_retain(v100);
        swift_retain(v94);
        v105 = swift_retain(v102);
        v106 = v161;
        static DispatchQoS.unspecified.getter(v105);
        v175 = &_swiftEmptyArrayStorage;
        v107 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v108 = sub_1000080B4((uint64_t *)&unk_100295A00);
        v109 = sub_100008628();
        v110 = v164;
        v111 = v166;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v175, v108, v109, v166, v107);
        v112 = v169;
        v113 = (void *)v154;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v169, v106, v110, v104);

        _Block_release(v104);
        swift_errorRelease(v146[0]);
        (*(void (**)(char *, uint64_t))(v165 + 8))(v110, v111);
        (*(void (**)(char *, uint64_t))(v162 + 8))(v106, v163);
        ((void (*)(char *, uint64_t))v171)(v112, v170);
        return swift_release(v177);
      }
      v114 = (uint64_t)v171;
      *(_QWORD *)v171 = v52;
      swift_storeEnumTagMultiPayload(v114, v45, 1);
      swift_errorRetain(v52);
      a3(v114);

    }
    else
    {
      v114 = (uint64_t)v171;
      *(_QWORD *)v171 = v52;
      swift_storeEnumTagMultiPayload(v114, v45, 1);
      swift_errorRetain(v52);
      a3(v114);
    }
    swift_errorRelease(v52);
    return sub_100004934(v114, &qword_10028D5D0);
  }
  sub_10003B730((uint64_t)v51, (uint64_t)v44, type metadata accessor for CustodianRecord);
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v67 = type metadata accessor for Logger(0);
  v68 = sub_100005288(v67, (uint64_t)qword_1002A8A38);
  v69 = Logger.logObject.getter(v68);
  v71 = static os_log_type_t.default.getter(v70);
  if (os_log_type_enabled(v69, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v71, "Cloud record saved to CloudKitStorage.", v72, 2u);
    swift_slowDealloc(v72, -1, -1);
  }

  sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  sub_10004E664((uint64_t)v44, 0, 2, (uint64_t)a3, v174);
  return sub_100028388((uint64_t)v44, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001E8724(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a7;
  v54 = a4;
  v51 = a6;
  v52 = a3;
  v49 = a2;
  v55 = type metadata accessor for CustodianshipInfoRecord(0);
  v48 = *(_QWORD *)(v55 - 8);
  v9 = *(_QWORD *)(v48 + 64);
  v11 = __chkstk_darwin(v55, v10);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11, v12);
  v56 = (uint64_t)&v47 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v47 - v16;
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A8A38);
  v19 = sub_100027FE8((uint64_t)a1, (uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v47 = a5;
    v24 = v23;
    v58 = v23;
    *(_DWORD *)v22 = 136315138;
    v25 = UUID.uuidString.getter(v23);
    v27 = v26;
    v57 = sub_1001DEF4C(v25, v26, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease(v27);
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v28 = v24;
    a5 = v47;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipInfoRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    v29 = v49;
    sub_10000732C((_QWORD *)(v49 + 56), *(_QWORD *)(v49 + 80));
    v30 = v54;
    v31 = v52;
    v52(a1);
    v32 = v50;
    sub_100027FE8((uint64_t)a1, v50, type metadata accessor for CustodianshipInfoRecord);
    v33 = *(unsigned __int8 *)(v48 + 80);
    v34 = (v33 + 48) & ~v33;
    v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    a1 = (_QWORD *)swift_allocObject(&unk_10026FFA8, v35 + 16, v33 | 7);
    v36 = v51;
    a1[2] = v29;
    a1[3] = v36;
    v37 = v53;
    a1[4] = v53;
    a1[5] = a5 + 1;
    sub_10003B730(v32, (uint64_t)a1 + v34, type metadata accessor for CustodianshipInfoRecord);
    v38 = (_QWORD *)((char *)a1 + v35);
    *v38 = v31;
    v38[1] = v30;
    v39 = qword_10028AF00;
    swift_retain(v29);
    swift_retain(v37);
    swift_retain(v30);
    if (v39 == -1)
      goto LABEL_8;
  }
  swift_once(&qword_10028AF00, sub_1001FD458);
LABEL_8:
  if (*(_BYTE *)(v56 + *(int *)(v55 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v40 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v40 = &qword_1002A8C70;
  }
  v42 = *v40;
  v41 = v40[1];
  swift_bridgeObjectRetain(v41);
  v43 = sub_1001FD4C0(v42, v41);
  v44 = objc_msgSend(v43, "privateCloudDatabase");
  swift_bridgeObjectRelease(v41);

  v45 = v56;
  sub_100054B5C(v56, v44, (uint64_t)sub_1001F8098, (uint64_t)a1);
  swift_release(a1);

  return sub_100028388(v45, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001E8B5C(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a7;
  v54 = a4;
  v51 = a6;
  v52 = a3;
  v49 = a2;
  v55 = type metadata accessor for CustodianRecord(0);
  v48 = *(_QWORD *)(v55 - 8);
  v9 = *(_QWORD *)(v48 + 64);
  v11 = __chkstk_darwin(v55, v10);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11, v12);
  v56 = (uint64_t)&v47 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v47 - v16;
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A8A38);
  v19 = sub_100027FE8((uint64_t)a1, (uint64_t)v17, type metadata accessor for CustodianRecord);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v47 = a5;
    v24 = v23;
    v58 = v23;
    *(_DWORD *)v22 = 136315138;
    v25 = UUID.uuidString.getter(v23);
    v27 = v26;
    v57 = sub_1001DEF4C(v25, v26, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease(v27);
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v28 = v24;
    a5 = v47;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    v29 = v49;
    sub_10000732C((_QWORD *)(v49 + 56), *(_QWORD *)(v49 + 80));
    v30 = v54;
    v31 = v52;
    v52(a1);
    v32 = v50;
    sub_100027FE8((uint64_t)a1, v50, type metadata accessor for CustodianRecord);
    v33 = *(unsigned __int8 *)(v48 + 80);
    v34 = (v33 + 48) & ~v33;
    v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    a1 = (_QWORD *)swift_allocObject(&unk_10026FBC0, v35 + 16, v33 | 7);
    v36 = v51;
    a1[2] = v29;
    a1[3] = v36;
    v37 = v53;
    a1[4] = v53;
    a1[5] = a5 + 1;
    sub_10003B730(v32, (uint64_t)a1 + v34, type metadata accessor for CustodianRecord);
    v38 = (_QWORD *)((char *)a1 + v35);
    *v38 = v31;
    v38[1] = v30;
    v39 = qword_10028AF00;
    swift_retain(v29);
    swift_retain(v37);
    swift_retain(v30);
    if (v39 == -1)
      goto LABEL_8;
  }
  swift_once(&qword_10028AF00, sub_1001FD458);
LABEL_8:
  if (*(_BYTE *)(v56 + *(int *)(v55 + 48)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v40 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v40 = &qword_1002A8C70;
  }
  v42 = *v40;
  v41 = v40[1];
  swift_bridgeObjectRetain(v41);
  v43 = sub_1001FD4C0(v42, v41);
  v44 = objc_msgSend(v43, "privateCloudDatabase");
  swift_bridgeObjectRelease(v41);

  v45 = v56;
  sub_100054464(v56, v44, (uint64_t)sub_1001F6C8C, (uint64_t)a1);
  swift_release(a1);

  return sub_100028388(v45, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001E8F94()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for CustodianOwnerHealthCheck(0);
  v0 = sub_1000080B4(&qword_100299778);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100299400 = result;
  *(_QWORD *)algn_100299408 = v2;
  return result;
}

uint64_t sub_1001E8FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v1 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  v2 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v2);
  v3 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4(&qword_10028E2C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4((uint64_t *)&unk_10028E290);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4((uint64_t *)&unk_10028C870);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4((uint64_t *)&unk_100296B60);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v0 + v10) = v11;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_maxRetryCount) = 3;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount) = 0;
  objc_msgSend(v11, "setMaxConcurrentOperationCount:", 1);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians) = &_swiftEmptySetSingleton;
  return v0;
}

uint64_t sub_1001E920C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v62 = type metadata accessor for CustodianRecord(0);
  v10 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62, v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v26 = (void (*)(uint64_t))a4;
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v28 = swift_errorRetain(a1);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v60 = a5;
      v31 = a1;
      v32 = swift_slowAlloc(22, -1);
      v33 = (uint64_t *)swift_slowAlloc(8, -1);
      v34 = (_QWORD *)swift_slowAlloc(32, -1);
      v64 = v34;
      *(_DWORD *)v32 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v35 = qword_100299400;
      v36 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v63 = sub_1001DEF4C(v35, v36, (uint64_t *)&v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v32 + 12) = 2112;
      v37 = _convertErrorToNSError(_:)(v31);
      v63 = v37;
      a1 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      *v33 = v37;
      sub_1000057B0(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - error fetching custodian records: %@", (uint8_t *)v32, 0x16u);
      v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v33, 1, v38);
      swift_slowDealloc(v33, -1, -1);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {
      sub_1000057B0(a1, 1);

    }
    swift_errorRetain(a1);
    v26(a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v60 = a5;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = _swiftEmptyArrayStorage;
    v59 = v19;
    if (v19)
    {
      v56 = a3;
      v57 = a4;
      v64 = _swiftEmptyArrayStorage;
      sub_1001D4BFC(0, v19, 0);
      v21 = *(unsigned __int8 *)(v10 + 80);
      v58 = a1;
      v22 = v19;
      v23 = a1 + ((v21 + 32) & ~v21);
      v61 = *(_QWORD *)(v10 + 72);
      do
      {
        sub_100027FE8(v23, (uint64_t)v13, type metadata accessor for CustodianRecord);
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, &v13[*(int *)(v62 + 20)], v14);
        sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
        v20 = v64;
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        {
          sub_1001D4BFC(0, v20[2] + 1, 1);
          v20 = v64;
        }
        v25 = v20[2];
        v24 = v20[3];
        if (v25 >= v24 >> 1)
        {
          sub_1001D4BFC(v24 > 1, v25 + 1, 1);
          v20 = v64;
        }
        v20[2] = v25 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v25, v18, v14);
        v64 = v20;
        v23 += v61;
        --v22;
      }
      while (v22);
      a4 = v57;
      a1 = v58;
      a3 = v56;
    }
    v39 = sub_1000FB118((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
    v40 = *(_QWORD *)(v39 + 16);
    swift_bridgeObjectRelease(v39);
    v41 = OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount;
    *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_uniqueCustodianCount) = v40;
    v42 = v59;
    v43 = v59 == v40;
    v44 = v60;
    if (!v43)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A8A08);
      v46 = swift_retain(a3);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v56 = a3;
        v57 = a4;
        v58 = a1;
        v49 = swift_slowAlloc(32, -1);
        v50 = (_QWORD *)swift_slowAlloc(32, -1);
        v64 = v50;
        *(_DWORD *)v49 = 136315650;
        if (qword_10028AEF8 != -1)
          swift_once(&qword_10028AEF8, sub_1001E8F94);
        v51 = qword_100299400;
        v52 = *(_QWORD *)algn_100299408;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
        v63 = sub_1001DEF4C(v51, v52, (uint64_t *)&v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        swift_bridgeObjectRelease(v52);
        *(_WORD *)(v49 + 12) = 2048;
        v63 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        *(_WORD *)(v49 + 22) = 2048;
        v53 = v56;
        v63 = *(_QWORD *)(v56 + v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
        swift_release(v53);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s - Warning: Custodian records count %ld does not match unique custodian UUIDs count %ld", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);

        a4 = v57;
        a1 = v58;
        v44 = v60;
      }
      else
      {

        swift_release(a3);
      }
    }
    return sub_1001E988C(a1, a4, v44);
  }
}

uint64_t sub_1001E988C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  _QWORD *v21;

  v4 = (uint64_t)v3;
  v8 = *v3;
  v9 = type metadata accessor for PartialErrorHandler();
  swift_allocObject(v9, 32, 7);
  v10 = sub_1001561E0();
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_1001E9E78(v13, v4, v10, v8);
      v13 += v14;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease(a1);
  }
  v15 = *(void **)(v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue);
  v16 = (_QWORD *)swift_allocObject(&unk_10026F878, 56, 7);
  v16[2] = a1;
  v16[3] = v4;
  v16[4] = v10;
  v16[5] = a2;
  v16[6] = a3;
  aBlock[4] = sub_1001F5E88;
  v21 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026F890;
  v17 = _Block_copy(aBlock);
  v18 = v21;
  swift_bridgeObjectRetain(a1);
  swift_retain(v4);
  swift_retain(v10);
  swift_retain(a3);
  swift_release(v18);
  objc_msgSend(v15, "addBarrierBlock:", v17);
  _Block_release(v17);
  return swift_release(v10);
}

uint64_t sub_1001E9A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__cloudStorage;
  v2 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage;
  v4 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController;
  v6 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__keyRepair;
  v8 = sub_1000080B4(&qword_10028E840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler;
  v10 = sub_1000080B4(&qword_10028E8C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__securityController;
  v12 = sub_1000080B4(&qword_10028CCE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__statusUpdater;
  v14 = sub_1000080B4(&qword_100296C18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsAccountModel;
  v16 = sub_1000080B4(&qword_10028F658);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory;
  v18 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians));
  return v0;
}

uint64_t sub_1001E9BE4()
{
  uint64_t v0;

  sub_1001E9A1C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001E9C08()
{
  return type metadata accessor for CustodianOwnerHealthCheck(0);
}

uint64_t type metadata accessor for CustodianOwnerHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_1002994A0;
  if (!qword_1002994A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianOwnerHealthCheck);
  return result;
}

void sub_1001E9C4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[13];

  sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
  if (v3 <= 0x3F)
  {
    v20[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
    if (v5 <= 0x3F)
    {
      v20[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
      if (v7 <= 0x3F)
      {
        v20[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028E2B8, &qword_10028E2C0);
        if (v9 <= 0x3F)
        {
          v20[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028E288, (uint64_t *)&unk_10028E290);
          if (v11 <= 0x3F)
          {
            v20[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, &qword_10028C868, (uint64_t *)&unk_10028C870);
            if (v13 <= 0x3F)
            {
              v20[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, (unint64_t *)&qword_100296B58, (uint64_t *)&unk_100296B60);
              if (v15 <= 0x3F)
              {
                v20[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, (unint64_t *)&qword_10028F440, (uint64_t *)&unk_10028F448);
                if (v17 <= 0x3F)
                {
                  v20[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
                  if (v19 <= 0x3F)
                  {
                    v20[8] = *(_QWORD *)(v18 - 8) + 64;
                    v20[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
                    v20[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
                    v20[11] = (char *)&value witness table for Builtin.Int64 + 64;
                    v20[12] = (char *)&value witness table for Builtin.Int64 + 64;
                    swift_updateClassMetadata2(a1, 256, 13, v20, a1 + 80);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001E9E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F5A30(a3, a4);
}

void sub_1001E9E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  objc_class *v20;
  _BYTE *v21;
  uint64_t (**v22)(uint64_t, uint64_t);
  id v23;
  objc_super v24;

  v8 = type metadata accessor for CustodianRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v12, v13);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = (v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_10026F918, v18 + 8, v14 | 7);
  sub_10003B730((uint64_t)v12, v19 + v15, type metadata accessor for CustodianRecord);
  *(_QWORD *)(v19 + v16) = a2;
  *(_QWORD *)(v19 + v17) = a3;
  *(_QWORD *)(v19 + v18) = a4;
  v20 = (objc_class *)type metadata accessor for AsyncOperation();
  v21 = objc_allocWithZone(v20);
  v21[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  v22 = (uint64_t (**)(uint64_t, uint64_t))&v21[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *v22 = sub_1001F60B4;
  v22[1] = (uint64_t (*)(uint64_t, uint64_t))v19;
  v24.receiver = v21;
  v24.super_class = v20;
  swift_retain(a2);
  swift_retain(a3);
  v23 = objc_msgSendSuper2(&v24, "init");
  objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_queue), "addOperation:", v23);

}

uint64_t sub_1001E9FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v44 = a5;
  v45 = a2;
  v43 = a1;
  v7 = type metadata accessor for CustodianRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v11 = __chkstk_darwin(v7, v10);
  v12 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v38 - v14;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A8A08);
  v17 = sub_100027FE8(a3, (uint64_t)v15, type metadata accessor for CustodianRecord);
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v18, v20))
  {
    v40 = v8;
    v41 = a3;
    v42 = a4;
    v21 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v47 = v39;
    *(_DWORD *)v21 = 136315394;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v22 = qword_100299400;
    v23 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v46 = sub_1001DEF4C(v22, v23, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v21 + 12) = 2080;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    v28 = v27;
    v46 = sub_1001DEF4C(v26, v27, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
    swift_bridgeObjectRelease(v28);
    sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "%s - performing healthCheck %s.", (uint8_t *)v21, 0x16u);
    v29 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    a3 = v41;
    v8 = v40;
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);

  }
  sub_100027FE8(a3, (uint64_t)v12, type metadata accessor for CustodianRecord);
  v30 = *(unsigned __int8 *)(v8 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject(&unk_10026F940, v32 + 16, v30 | 7);
  v34 = v44;
  *(_QWORD *)(v33 + 16) = v44;
  sub_10003B730((uint64_t)v12, v33 + v31, type metadata accessor for CustodianRecord);
  v35 = (_QWORD *)(v33 + v32);
  v36 = v45;
  *v35 = v43;
  v35[1] = v36;
  swift_retain(v34);
  swift_retain(v36);
  sub_1001EA494(a3, (uint64_t)sub_1001F6298, v33);
  return swift_release(v33);
}

uint64_t sub_1001EA368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  uint64_t v14;
  uint64_t v16;

  if (!a1)
    return a4();
  v8 = (uint64_t *)(a3 + *(int *)(type metadata accessor for CustodianRecord(0) + 24));
  v9 = v8[1];
  v16 = *v8;
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = 58;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v12._countAndFlagsBits = UUID.uuidString.getter(v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14 = swift_allocObject(&unk_10026FE18, 32, 7);
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  swift_retain(a5);
  sub_100155AC4(v16, v9, a1, (uint64_t)sub_10002E4D0, v14);
  swift_bridgeObjectRelease(v9);
  swift_release(v14);
  return swift_errorRelease(a1);
}

uint64_t sub_1001EA494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v4 = v3;
  v31 = a2;
  v32 = a3;
  v27 = a1;
  v33 = *v3;
  v5 = type metadata accessor for CustodianRecord(0);
  v30 = *(_QWORD *)(v5 - 8);
  v6 = *(_QWORD *)(v30 + 64);
  __chkstk_darwin(v5, v7);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  v29 = v9;
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028C448);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage, v13);
  Dependency.wrappedValue.getter(v34, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_10000732C(v34, v34[3]);
  v18 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v27 + *(int *)(v5 + 20), v8);
  sub_100027FE8(v18, (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecord);
  v19 = *(unsigned __int8 *)(v30 + 80);
  v20 = (v19 + 40) & ~v19;
  v21 = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (_QWORD *)swift_allocObject(&unk_10026F968, v21 + 8, v19 | 7);
  v23 = v31;
  v24 = v32;
  v22[2] = v4;
  v22[3] = v23;
  v22[4] = v24;
  sub_10003B730((uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v22 + v20, type metadata accessor for CustodianRecord);
  *(_QWORD *)((char *)v22 + v21) = v33;
  v25 = swift_allocObject(&unk_10026F990, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_1001F6450;
  *(_QWORD *)(v25 + 24) = v22;
  swift_retain(v4);
  swift_retain(v24);
  swift_retain(v22);
  sub_1001BD630((uint64_t)v12, (uint64_t)sub_10003B8CC, v25);
  swift_release(v22);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v28);
  return sub_100006F58(v34);
}

uint64_t sub_1001EA6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = (_QWORD *)swift_allocObject(&unk_10026F8C8, 48, 7);
  v9[2] = a2;
  v9[3] = a1;
  v9[4] = a4;
  v9[5] = a5;
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  swift_retain(a5);
  sub_100155E5C((uint64_t)sub_1001F5ECC, (uint64_t)v9);
  return swift_release(v9);
}

uint64_t sub_1001EA778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v19[5];

  v10 = sub_1000080B4(&qword_10028E8C8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v19[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v10);
  Dependency.wrappedValue.getter(v19, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10000732C(v19, v19[3]);
  v15 = *(_QWORD *)(a3 + 16);
  v16 = (_QWORD *)swift_allocObject(&unk_10026F8F0, 56, 7);
  v16[2] = a3;
  v16[3] = a2;
  v16[4] = a1;
  v16[5] = a4;
  v16[6] = a5;
  swift_bridgeObjectRetain(a3);
  swift_retain(a2);
  swift_errorRetain(a1);
  swift_retain(a5);
  sub_100138728(v15, (uint64_t)sub_1001F5F2C, (uint64_t)v16);
  swift_release(v16);
  return sub_100006F58(v19);
}

uint64_t sub_1001EA8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  void *v19;
  _QWORD v20[3];

  if (!a4)
  {
    v12 = 0;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_7;
    goto LABEL_6;
  }
  v20[0] = a4;
  swift_errorRetain(a4);
  v10 = sub_1000080B4(&qword_10028E850);
  v11 = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
  if (swift_dynamicCast(&v19, v20, v10, v11, 6))
    v12 = v19;
  else
    v12 = 0;
  if (*(_QWORD *)(a2 + 16))
  {
LABEL_6:
    v13 = (char *)objc_allocWithZone((Class)type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent(0))
        + qword_100291650;
    *v13 = 0;
    v13[1] = 0;
    v14 = sub_1000080B4((uint64_t *)&unk_10028F448);
    Dependency.init(dependencyId:config:)(0, 0, 0, v14);
    v15 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
    v16 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000003ELL, 0x8000000100210A40, v15);
    v17 = a3 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians;
    swift_beginAccess(v17, v20, 0, 0);
    sub_1000EB9C8(*(_QWORD *)(*(_QWORD *)v17 + 16), a1, v12);

  }
LABEL_7:

  return a5(a4);
}

uint64_t sub_1001EAA48(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[5];

  v74 = a5;
  v77 = a2;
  v75 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v75, v8);
  v76 = (uint64_t)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v19, v20);
  v22 = (_QWORD *)((char *)v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v73[0] = a3;
    v73[1] = a4;
    v23 = *v22;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v77 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory, v10);
    Dependency.wrappedValue.getter(v79, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v24 = objc_allocWithZone((Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent(0));
    v25 = (char *)sub_1001354A0(0, 1);
    sub_100006F58(v79);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = os_log_type_enabled(v28, v29);
    v31 = (void (*)(uint64_t))v73[0];
    v32 = v74;
    if (v30)
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to create custodian owner health check analytics event. Aborting...", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = v75;
    v35 = (uint64_t *)(v32 + *(int *)(v75 + 52));
    v37 = *v35;
    v36 = v35[1];
    v38 = &v25[qword_100292EB8];
    v39 = *(_QWORD *)&v25[qword_100292EB8 + 8];
    *(_QWORD *)v38 = v37;
    *((_QWORD *)v38 + 1) = v36;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease(v39);
    v40 = v32 + *(int *)(v34 + 60);
    v41 = *(_QWORD *)v40;
    LOBYTE(v40) = *(_BYTE *)(v40 + 8);
    v42 = &v25[qword_100292EC0];
    *(_QWORD *)v42 = v41;
    v42[8] = v40;
    v43 = (uint64_t *)(v32 + *(int *)(v34 + 56));
    v45 = *v43;
    v44 = v43[1];
    v46 = &v25[qword_100292EC8];
    v47 = *(_QWORD *)&v25[qword_100292EC8 + 8];
    *(_QWORD *)v46 = v45;
    *((_QWORD *)v46 + 1) = v44;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRelease(v47);
    swift_getObjectType(v25);
    v48 = _convertErrorToNSError(_:)(v23);
    v49 = sub_100136318((uint64_t)v79);
    v51 = v50;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
    v53 = *(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v52 = *(_QWORD *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v53 >= v52 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
    v54 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v48);
    specialized Array._endMutation()(v54);
    ((void (*)(uint64_t *, _QWORD))v49)(v79, 0);
    sub_1001355D0(0, 0xAu);

    v55 = v76;
    sub_100027FE8(v32, v76, type metadata accessor for CustodianRecord);
    swift_errorRetain(v23);
    v56 = swift_errorRetain(v23);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(32, -1);
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      v77 = swift_slowAlloc(64, -1);
      v79[0] = v77;
      *(_DWORD *)v59 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v61 = qword_100299400;
      v62 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v78 = sub_1001DEF4C(v61, v62, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      swift_bridgeObjectRelease(v62);
      *(_WORD *)(v59 + 12) = 2080;
      v63 = v76;
      v64 = type metadata accessor for UUID(0);
      v65 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v64, v65);
      v68 = v67;
      v78 = sub_1001DEF4C(v66, v67, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      swift_bridgeObjectRelease(v68);
      sub_100028388(v63, type metadata accessor for CustodianRecord);
      *(_WORD *)(v59 + 22) = 2112;
      v69 = _convertErrorToNSError(_:)(v23);
      v78 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79);
      *v60 = v69;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s - error fetching health check record for %s: %@", (uint8_t *)v59, 0x20u);
      v70 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v60, 1, v70);
      swift_slowDealloc(v60, -1, -1);
      v71 = v77;
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v31 = (void (*)(uint64_t))v73[0];
    }
    else
    {
      sub_100028388(v55, type metadata accessor for CustodianRecord);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
    swift_errorRetain(v23);
    v31(v23);
    swift_errorRelease(v23);
    return swift_errorRelease(v23);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    sub_1001EB0E8((uint64_t)v18, a3, a4);
    return sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
}

void sub_1001EB0E8(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for CustodianshipRecords(0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v31 - v12;
  v14 = type metadata accessor for CustodianRecord(0);
  v15 = *(_QWORD *)(a1 + *(int *)(v14 + 36));
  sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for CustodianshipRecords);
  if (v15 == 2)
  {
    sub_100028388((uint64_t)v13, type metadata accessor for CustodianshipRecords);
LABEL_4:
    sub_1001EB424(a1, (uint64_t)a2, a3);
    return;
  }
  v16 = *(_QWORD *)&v13[*(int *)(v14 + 36)];
  sub_100028388((uint64_t)v13, type metadata accessor for CustodianshipRecords);
  if (v16 == 3)
    goto LABEL_4;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v17 = type metadata accessor for Logger(0);
  sub_100005288(v17, (uint64_t)qword_1002A8A08);
  v18 = sub_100027FE8(a1, (uint64_t)v10, type metadata accessor for CustodianshipRecords);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v34 = v32;
    *(_DWORD *)v22 = 136315394;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v24 = qword_100299400;
    v23 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v33 = sub_1001DEF4C(v24, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v22 + 12) = 2080;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v25, v26);
    v29 = v28;
    v33 = sub_1001DEF4C(v27, v28, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
    swift_bridgeObjectRelease(v29);
    sub_100028388((uint64_t)v10, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "%s - custodian %s does not require a health check, ending check early.", (uint8_t *)v22, 0x16u);
    v30 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v10, type metadata accessor for CustodianshipRecords);
  }

  a2(0);
}

void sub_1001EB424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  int *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v4 = v3;
  v47 = a2;
  v6 = *v3;
  v45 = a3;
  v46 = v6;
  v7 = type metadata accessor for CustodianshipRecords(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__analyticsEventFactory, v12);
  Dependency.wrappedValue.getter(v48, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v17 = a1 + *(int *)(v7 + 24);
  v18 = v17 + *(int *)(type metadata accessor for CustodianHealthRecord(0) + 40);
  v19 = *(_QWORD *)v18;
  LOBYTE(v7) = *(_BYTE *)(v18 + 8);
  v20 = objc_allocWithZone((Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent(0));
  v21 = (char *)sub_1001354A0(v19, v7);
  sub_100006F58(v48);
  *(_QWORD *)&v21[qword_100292EB0] = sub_10016C428();
  v22 = (int *)type metadata accessor for CustodianRecord(0);
  v23 = (uint64_t *)(a1 + v22[13]);
  v25 = *v23;
  v24 = v23[1];
  v26 = &v21[qword_100292EB8];
  v27 = *(_QWORD *)&v21[qword_100292EB8 + 8];
  *(_QWORD *)v26 = v25;
  *((_QWORD *)v26 + 1) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v27);
  v28 = a1 + v22[15];
  v29 = *(_QWORD *)v28;
  LOBYTE(v28) = *(_BYTE *)(v28 + 8);
  v30 = &v21[qword_100292EC0];
  *(_QWORD *)v30 = v29;
  v30[8] = v28;
  v31 = (uint64_t *)(a1 + v22[14]);
  v33 = *v31;
  v32 = v31[1];
  v34 = &v21[qword_100292EC8];
  v35 = *(_QWORD *)&v21[qword_100292EC8 + 8];
  *(_QWORD *)v34 = v33;
  *((_QWORD *)v34 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v35);
  v36 = swift_allocObject(&unk_10026F9B8, 24, 7);
  swift_weakInit(v36 + 16, v4);
  sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for CustodianshipRecords);
  v37 = *(unsigned __int8 *)(v8 + 80);
  v38 = (v37 + 40) & ~v37;
  v39 = (v9 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = (_QWORD *)swift_allocObject(&unk_10026F9E0, v40 + 8, v37 | 7);
  v41[2] = v21;
  v41[3] = &off_1002694F8;
  v41[4] = v36;
  sub_10003B730((uint64_t)v11, (uint64_t)v41 + v38, type metadata accessor for CustodianshipRecords);
  v42 = (_QWORD *)((char *)v41 + v39);
  v43 = v45;
  *v42 = v47;
  v42[1] = v43;
  *(_QWORD *)((char *)v41 + v40) = v46;
  v44 = v21;
  swift_retain(v36);
  swift_retain(v43);
  sub_1001EC820(a1, (uint64_t (*)(uint64_t, _QWORD))sub_1001F67A4, (uint64_t)v41);
  swift_release(v36);
  swift_release(v41);

}

uint64_t sub_1001EB70C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  void (*v35)(uint64_t *, _QWORD);
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  NSObject *v59;
  __n128 v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t Strong;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _BYTE v88[12];
  int v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106[24];
  uint64_t v107[3];
  uint64_t v108;
  uint64_t v109;
  _BYTE v110[24];

  v101 = a7;
  v102 = a8;
  v104 = a4;
  v105 = a3;
  LODWORD(v11) = a1;
  v12 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v94 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_1000080B4(&qword_10028E840);
  v93 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v91 = &v88[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v92 = type metadata accessor for CustodianshipRecords(0);
  v98 = *(_QWORD *)(v92 - 8);
  v19 = __chkstk_darwin(v92, v18);
  v95 = &v88[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v99 = v20;
  __chkstk_darwin(v19, v21);
  v100 = &v88[-v22];
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v96 = v23;
  v97 = v24;
  __chkstk_darwin(v23, v25);
  v90 = &v88[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = sub_1000080B4(&qword_10028E8C8);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v31 = &v88[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v103 = a5 + 16;
  if (a2)
  {
    v89 = v11;
    v32 = v15;
    v11 = a6;
    ObjectType = swift_getObjectType(v105);
    swift_errorRetain(a2);
    v34 = _convertErrorToNSError(_:)(a2);
    v35 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v104 + 104))(v107, ObjectType);
    v37 = v36;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
    v39 = *(_QWORD *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v38 = *(_QWORD *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v39 >= v38 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
    v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v34);
    specialized Array._endMutation()(v40);
    v35(v107, 0);
    swift_errorRelease(a2);
    a6 = v11;
    v15 = v32;
    LOBYTE(v11) = v89;
  }
  if ((v11 & 1) != 0)
  {
    v41 = v103;
    swift_beginAccess(v103, &v109, 0, 0);
    result = swift_weakLoadStrong(v41);
    if (result)
    {
      v43 = result;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 16))(v31, result + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v27);
      Dependency.wrappedValue.getter(v107, v27);
      (*(void (**)(_BYTE *, uint64_t))(v28 + 8))(v31, v27);
      sub_10000732C(v107, v108);
      v44 = type metadata accessor for CustodianRecord(0);
      v45 = v96;
      v46 = (uint64_t)v90;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v97 + 16))(v90, a6 + *(int *)(v44 + 20), v96);
      v47 = v100;
      sub_100027FE8(a6, (uint64_t)v100, type metadata accessor for CustodianshipRecords);
      v48 = *(unsigned __int8 *)(v98 + 80);
      v49 = (v48 + 40) & ~v48;
      v50 = (v99 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
      v51 = (_QWORD *)swift_allocObject(&unk_10026FA58, v50 + 16, v48 | 7);
      v52 = v104;
      v53 = v105;
      v51[2] = v105;
      v51[3] = v52;
      v51[4] = v43;
      sub_10003B730((uint64_t)v47, (uint64_t)v51 + v49, type metadata accessor for CustodianshipRecords);
      v54 = (_QWORD *)((char *)v51 + v50);
      v55 = v102;
      *v54 = v101;
      v54[1] = v55;
      swift_unknownObjectRetain(v53);
      swift_retain(v43);
      swift_retain(v55);
      sub_100139EB8(v46, (uint64_t)sub_1001F68B4, (uint64_t)v51);
      swift_release(v51);
      (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v46, v45);
      sub_100006F58(v107);
      return swift_release(v43);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v56 = type metadata accessor for Logger(0);
    sub_100005288(v56, (uint64_t)qword_1002A8A08);
    v57 = v95;
    v58 = sub_100027FE8(a6, (uint64_t)v95, type metadata accessor for CustodianshipRecords);
    v59 = Logger.logObject.getter(v58);
    v61 = static os_log_type_t.default.getter(v60);
    if (os_log_type_enabled(v59, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v107[0] = v63;
      *(_DWORD *)v62 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v64 = qword_100299400;
      v65 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v109 = sub_1001DEF4C(v64, v65, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      swift_bridgeObjectRelease(v65);
      *(_WORD *)(v62 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v66 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v67 = dispatch thunk of CustomStringConvertible.description.getter(v96, v66);
      v69 = v68;
      v109 = sub_1001DEF4C(v67, v68, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, v110);
      swift_bridgeObjectRelease(v69);
      sub_100028388((uint64_t)v57, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v59, v61, "%s - marking custodian %s as not reachable, and attempting to re-share.", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v57, type metadata accessor for CustodianshipRecords);
    }

    v70 = v103;
    swift_beginAccess(v103, &v109, 0, 0);
    result = swift_weakLoadStrong(v70);
    if (result)
    {
      v71 = result;
      v72 = v93;
      v73 = v91;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v93 + 16))(v91, result + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__keyRepair, v15);
      Dependency.wrappedValue.getter(v107, v15);
      swift_release(v71);
      (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v73, v15);
      sub_10000732C(v107, v108);
      v74 = v94;
      sub_100027FE8(a6 + *(int *)(v92 + 20), (uint64_t)v94, type metadata accessor for CustodianRecoveryInfoRecord);
      v75 = (uint64_t *)(a6 + *(int *)(type metadata accessor for CustodianRecord(0) + 24));
      v76 = v75[1];
      v97 = *v75;
      v77 = swift_allocObject(&unk_10026F9B8, 24, 7);
      swift_beginAccess(v70, v106, 0, 0);
      Strong = swift_weakLoadStrong(v70);
      swift_weakInit(v77 + 16, Strong);
      swift_release(Strong);
      v79 = v100;
      sub_100027FE8(a6, (uint64_t)v100, type metadata accessor for CustodianshipRecords);
      v80 = *(unsigned __int8 *)(v98 + 80);
      v81 = (v80 + 40) & ~v80;
      v82 = (v99 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
      v83 = swift_allocObject(&unk_10026FA30, v82 + 16, v80 | 7);
      v84 = v104;
      v85 = v105;
      *(_QWORD *)(v83 + 16) = v105;
      *(_QWORD *)(v83 + 24) = v84;
      *(_QWORD *)(v83 + 32) = v77;
      sub_10003B730((uint64_t)v79, v83 + v81, type metadata accessor for CustodianshipRecords);
      v86 = (_QWORD *)(v83 + v82);
      v87 = v102;
      *v86 = v101;
      v86[1] = v87;
      swift_unknownObjectRetain(v85);
      swift_retain(v87);
      swift_retain(v77);
      sub_100032BE4((uint64_t)v74, v97, v76, (void (*)(uint64_t))sub_1001F68A4, (void (*)(uint64_t))v83);
      swift_release(v83);
      sub_100028388((uint64_t)v74, type metadata accessor for CustodianRecoveryInfoRecord);
      swift_release(v77);
      return sub_100006F58(v107);
    }
  }
  return result;
}

uint64_t sub_1001EBF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v15;
  void (*v16)(_BYTE *, _QWORD);
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _BYTE v24[32];

  v12 = a4 + 16;
  if (a1)
  {
    ObjectType = swift_getObjectType(a2);
    swift_errorRetain(a1);
    v15 = _convertErrorToNSError(_:)(a1);
    v16 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 104))(v24, ObjectType, a3);
    v18 = v17;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v20 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v19 = *(_QWORD *)((*v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v20 >= v19 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
    v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v15);
    specialized Array._endMutation()(v21);
    v16(v24, 0);
    swift_errorRelease(a1);
  }
  *(_BYTE *)(a2 + qword_100292EA0) = a1 == 0;
  sub_1001355D0(0, 7u);
  swift_beginAccess(v12, v24, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v23 = result;
    sub_1001EC078(a5, a6, a7);
    return swift_release(v23);
  }
  return result;
}

uint64_t sub_1001EC078(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  __n128 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t (**v68)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  _QWORD v76[2];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93[6];

  v4 = v3;
  v88 = a3;
  v82 = *v3;
  v83 = a2;
  v6 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v6, v7);
  v86 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v9, v10);
  v85 = (char *)v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for CustodianRecord(0);
  v12 = *(_QWORD *)(v90 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = __chkstk_darwin(v90, v14);
  v87 = (uint64_t)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)v76 - v18;
  __chkstk_darwin(v17, v20);
  v84 = (uint64_t)v76 - v21;
  v22 = sub_1000080B4(&qword_10028CCC0);
  v81 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v80, v26);
  v28 = (char *)v76 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v29 = type metadata accessor for Logger(0);
  sub_100005288(v29, (uint64_t)qword_1002A8A08);
  v89 = a1;
  v30 = sub_100027FE8(a1, (uint64_t)v28, type metadata accessor for CustodianshipRecords);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v31, v33);
  v91 = v19;
  if (v34)
  {
    v78 = v12;
    v79 = (uint64_t)v3;
    v35 = swift_slowAlloc(22, -1);
    v77 = swift_slowAlloc(64, -1);
    v93[0] = v77;
    *(_DWORD *)v35 = 136315394;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v37 = qword_100299400;
    v36 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v92 = sub_1001DEF4C(v37, v36, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v35 + 12) = 2080;
    v76[1] = v35 + 14;
    type metadata accessor for CustodianHealthRecord(0);
    v38 = type metadata accessor for UUID(0);
    v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
    v42 = v41;
    v92 = sub_1001DEF4C(v40, v41, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
    swift_bridgeObjectRelease(v42);
    sub_100028388((uint64_t)v28, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "%s - custodian %s is being marked as Not reachable.", (uint8_t *)v35, 0x16u);
    v43 = v77;
    swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v12 = v78;
    v4 = (_QWORD *)v79;
  }
  else
  {
    sub_100028388((uint64_t)v28, type metadata accessor for CustodianshipRecords);

  }
  v80 = swift_allocObject(&unk_10026FDA0, 24, 7);
  *(_QWORD *)(v80 + 16) = 3;
  v44 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v25, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v22);
  Dependency.wrappedValue.getter(v93, v22);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v22);
  v45 = sub_10000732C(v93, v93[3]);
  v46 = v89;
  v47 = v84;
  sub_100027FE8(v89, v84, type metadata accessor for CustodianRecord);
  v48 = *(unsigned __int8 *)(v12 + 80);
  v49 = (v48 + 16) & ~v48;
  v79 = v48 | 7;
  v81 = v13 + 7;
  v50 = (v13 + 7 + v49) & 0xFFFFFFFFFFFFFFF8;
  v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_10026FDC8, v52 + 8, v48 | 7);
  sub_10003B730(v47, v53 + v49, type metadata accessor for CustodianRecord);
  *(_QWORD *)(v53 + v50) = 3;
  v54 = (_QWORD *)(v53 + v51);
  v55 = v88;
  *v54 = v83;
  v54[1] = v55;
  *(_QWORD *)(v53 + v52) = v82;
  v56 = *v45;
  v83 = sub_10000732C((_QWORD *)(*v45 + 56), *(_QWORD *)(*v45 + 80));
  sub_100027FE8(v46, v47, type metadata accessor for CustodianRecord);
  v57 = type metadata accessor for UUID(0);
  v58 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v85, 1, 1, v57);
  v59 = type metadata accessor for Date(0);
  v60 = (uint64_t)v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v86, 1, 1, v59);
  v61 = v80;
  swift_retain(v80);
  swift_retain(v55);
  v62 = (uint64_t)v91;
  sub_100093290(v47, 0, 0, 3, 0, 0, 0xF000000000000000, 2u, (uint64_t)v91, v58, 0, 0, v60, 0);
  v63 = v46;
  v64 = v87;
  sub_100027FE8(v63, v87, type metadata accessor for CustodianRecord);
  v65 = (v48 + 48) & ~v48;
  v66 = (v81 + v65) & 0xFFFFFFFFFFFFFFF8;
  v67 = (_QWORD *)swift_allocObject(&unk_10026FDF0, v66 + 16, v79);
  v67[2] = v56;
  v67[3] = sub_1001F6C84;
  v67[4] = v53;
  v67[5] = 0;
  sub_10003B730(v64, (uint64_t)v67 + v65, type metadata accessor for CustodianRecord);
  v68 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v67 + v66);
  *v68 = sub_10011E870;
  v68[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v61;
  v69 = qword_10028AF00;
  swift_retain(v61);
  swift_retain(v56);
  swift_retain(v53);
  if (v69 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(v62 + *(int *)(v90 + 48)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v70 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v70 = &qword_1002A8C70;
  }
  v72 = *v70;
  v71 = v70[1];
  swift_bridgeObjectRetain(v71);
  v73 = sub_1001FD4C0(v72, v71);
  v74 = objc_msgSend(v73, "privateCloudDatabase");
  swift_bridgeObjectRelease(v71);

  sub_100054464(v62, v74, (uint64_t)sub_1001F6C8C, (uint64_t)v67);
  swift_release(v67);

  sub_100028388(v62, type metadata accessor for CustodianRecord);
  swift_release(v53);
  swift_release_n(v61, 2);
  return sub_100006F58(v93);
}

uint64_t sub_1001EC820(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (*v29)(uint64_t, _QWORD);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, _QWORD);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, _QWORD);
  uint64_t v42;
  __int128 v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[6];

  v41 = a2;
  v42 = a3;
  v40 = *v3;
  v5 = type metadata accessor for CustodianshipRecords(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  v9 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028E8C0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__cloudStorage, v14);
  Dependency.wrappedValue.getter(&v45, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v19 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v20 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v43, &v45, v19, v20, 6))
  {
    sub_10003A190(v43, (uint64_t)v47);
    sub_100027FE8(a1 + *(int *)(v5 + 24), (uint64_t)v13, type metadata accessor for CustodianHealthRecord);
    sub_100027FE8(a1, (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    v21 = *(unsigned __int8 *)(v6 + 80);
    v22 = (v21 + 16) & ~v21;
    v23 = (v7 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject(&unk_10026FA08, v24 + 8, v21 | 7);
    sub_10003B730((uint64_t)v9, v25 + v22, type metadata accessor for CustodianshipRecords);
    v26 = (_QWORD *)(v25 + v23);
    v27 = v42;
    *v26 = v41;
    v26[1] = v27;
    *(_QWORD *)(v25 + v24) = v40;
    swift_retain(v27);
    sub_1000E0990((uint64_t)v13, (uint64_t)sub_1001F6830, v25);
    swift_release(v25);
    sub_100028388((uint64_t)v13, type metadata accessor for CustodianHealthRecord);
    return sub_100006F58(v47);
  }
  else
  {
    v29 = v41;
    v44 = 0;
    memset(v43, 0, sizeof(v43));
    sub_100004934((uint64_t)v43, &qword_10028CCB8);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A8A08);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v47[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = v29;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v37 = qword_100299400;
      v38 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v45 = sub_1001DEF4C(v37, v38, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - isSharedAndAccepted unable to obtain pointer to CloudKitSharing", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      v36 = v29;
    }
    return v36(1, 0);
  }
}

uint64_t sub_1001ECC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;
  void (*v14)(uint64_t *, _QWORD);
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  v10 = a2;
  if (a1)
  {
    ObjectType = swift_getObjectType(a2);
    swift_errorRetain(a1);
    v13 = _convertErrorToNSError(_:)(a1);
    v14 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a3 + 104))(&v42, ObjectType, a3);
    v16 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v18 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v13);
    specialized Array._endMutation()(v19);
    v14(&v42, 0);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v21 = swift_errorRetain(a1);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v40 = v10;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      swift_errorRetain(a1);
      v25 = a5;
      v26 = a3;
      v27 = a6;
      v28 = _swift_stdlib_bridgeErrorToNSError(a1);
      v42 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      *v39 = v28;
      a6 = v27;
      a3 = v26;
      a5 = v25;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Finished confirmCustodianWithIdMS with error %@", v24, 0xCu);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v29);
      swift_slowDealloc(v39, -1, -1);
      v30 = v24;
      v10 = v40;
      swift_slowDealloc(v30, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A8A08);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = v10;
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Finished confirmCustodianWithIdMS successfully", v36, 2u);
      v37 = v36;
      v10 = v35;
      swift_slowDealloc(v37, -1, -1);
    }

  }
  return sub_1001ECF68(a5, v10, a3, a6, a7);
}

uint64_t sub_1001ECF68(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  __n128 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  __n128 v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  __n128 v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t ObjectType;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  void (*v118)(uint64_t *, _QWORD);
  _QWORD *v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140[4];
  uint64_t v141;
  uint64_t v142;

  v137 = a2;
  v138 = a4;
  v139 = a5;
  v134 = a3;
  v135 = type metadata accessor for UUID(0);
  v133 = *(_QWORD *)(v135 - 8);
  v7 = __chkstk_darwin(v135, v6);
  v132 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v131 = (uint64_t)&v124 - v10;
  v11 = type metadata accessor for CustodianshipRecords(0);
  v126 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v126 + 64);
  v14 = __chkstk_darwin(v11, v13);
  v15 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v130 = (uint64_t)&v124 - v18;
  v20 = __chkstk_darwin(v17, v19);
  v129 = (uint64_t)&v124 - v21;
  v23 = __chkstk_darwin(v20, v22);
  v125 = (uint64_t)&v124 - v24;
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v124 - v26;
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v124 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v34);
  v36 = (char *)&v124 - v35;
  v128 = v11;
  v37 = *(int *)(v11 + 24);
  v38 = a1;
  v39 = a1 + v37;
  v127 = type metadata accessor for CustodianHealthRecord(0);
  v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v36, v39 + *(int *)(v127 + 24), v28);
  Date.init(timeIntervalSince1970:)(v40, 946713600.0);
  v41 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v42 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v33, v28, v41);
  v43 = *(void (**)(char *, uint64_t))(v29 + 8);
  v43(v33, v28);
  v43(v36, v28);
  if ((v42 & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A8A08);
    v45 = v38;
    v46 = sub_100027FE8(v38, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    v47 = Logger.logObject.getter(v46);
    v49 = static os_log_type_t.default.getter(v48);
    v50 = os_log_type_enabled(v47, v49);
    v51 = v135;
    if (v50)
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v140[0] = v53;
      *(_DWORD *)v52 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v54 = qword_100299400;
      v55 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v141 = sub_1001DEF4C(v54, v55, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v52 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v51, v56);
      v59 = v58;
      v141 = sub_1001DEF4C(v57, v58, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v59);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v47, v49, "%s - custodian %s hasn't updated to a version that has Health Check enabled. Skipping validation of recipient updated attributes.", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
    }

    v74 = type metadata accessor for CustodianRecord(0);
    v76 = v132;
    v75 = v133;
    (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v132, v45 + *(int *)(v74 + 20), v51);
    swift_beginAccess(v136 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians, v140, 33, 0);
    v77 = v131;
    sub_1001F3C08(v131, v76);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v51);
    swift_endAccess(v140);
    sub_1001355D0(1, 0);
    return ((uint64_t (*)(_QWORD))v138)(0);
  }
  else if ((sub_10016C2A0() & 1) != 0)
  {
    v60 = v38;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v61 = type metadata accessor for Logger(0);
    sub_100005288(v61, (uint64_t)qword_1002A8A08);
    v62 = sub_100027FE8(v38, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
    v63 = Logger.logObject.getter(v62);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v63, v65))
    {
      v66 = swift_slowAlloc(22, -1);
      v67 = swift_slowAlloc(64, -1);
      v140[0] = v67;
      *(_DWORD *)v66 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v68 = qword_100299400;
      v69 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v141 = sub_1001DEF4C(v68, v69, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v69);
      *(_WORD *)(v66 + 12) = 2080;
      v70 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v135, v70);
      v73 = v72;
      v141 = sub_1001DEF4C(v71, v72, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v73);
      sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v63, v65, "%s - custodian %s is reachable, continue health check.", (uint8_t *)v66, 0x16u);
      swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    }

    v101 = v125;
    sub_100027FE8(v60, v125, type metadata accessor for CustodianshipRecords);
    v102 = *(unsigned __int8 *)(v126 + 80);
    v103 = (v102 + 40) & ~v102;
    v104 = (v12 + v103 + 7) & 0xFFFFFFFFFFFFFFF8;
    v105 = (_QWORD *)swift_allocObject(&unk_10026FA80, v104 + 16, v102 | 7);
    v107 = v136;
    v106 = v137;
    v108 = v134;
    v105[2] = v137;
    v105[3] = v108;
    v105[4] = v107;
    sub_10003B730(v101, (uint64_t)v105 + v103, type metadata accessor for CustodianshipRecords);
    v109 = (_QWORD *)((char *)v105 + v104);
    v110 = v139;
    *v109 = v138;
    v109[1] = v110;
    swift_unknownObjectRetain(v106);
    swift_retain(v107);
    swift_retain(v110);
    sub_1001EF110(v60, sub_1001F6B94, (uint64_t)v105);
    return swift_release(v105);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v79 = type metadata accessor for Logger(0);
    sub_100005288(v79, (uint64_t)qword_1002A8A08);
    v80 = v129;
    sub_100027FE8(v38, v129, type metadata accessor for CustodianshipRecords);
    v81 = v130;
    v82 = sub_100027FE8(v38, v130, type metadata accessor for CustodianshipRecords);
    v83 = Logger.logObject.getter(v82);
    v85 = static os_log_type_t.default.getter(v84);
    if (os_log_type_enabled(v83, v85))
    {
      v133 = v38;
      v86 = swift_slowAlloc(32, -1);
      v132 = (char *)swift_slowAlloc(96, -1);
      v140[0] = (uint64_t)v132;
      *(_DWORD *)v86 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v87 = qword_100299400;
      v88 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v141 = sub_1001DEF4C(v87, v88, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v88);
      *(_WORD *)(v86 + 12) = 2080;
      v89 = v129;
      v90 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v135, v90);
      v93 = v92;
      v141 = sub_1001DEF4C(v91, v92, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v93);
      sub_100028388(v89, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v86 + 22) = 2080;
      v94 = v130;
      v95 = sub_100005150(&qword_100290528, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v96 = dispatch thunk of CustomStringConvertible.description.getter(v28, v95);
      v98 = v97;
      v141 = sub_1001DEF4C(v96, v97, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      swift_bridgeObjectRelease(v98);
      sub_100028388(v94, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v83, v85, "%s - custodian %s last check in was %s, marking as not reachable.", (uint8_t *)v86, 0x20u);
      v99 = v132;
      swift_arrayDestroy(v132, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v86, -1, -1);

      v100 = v137;
      v38 = v133;
    }
    else
    {
      sub_100028388(v80, type metadata accessor for CustodianshipRecords);
      sub_100028388(v81, type metadata accessor for CustodianshipRecords);

      v100 = v137;
    }
    ObjectType = swift_getObjectType(v100);
    type metadata accessor for AACustodianError(0);
    v113 = v112;
    v140[0] = -7016;
    v114 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v115 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v141, v140, v114, v113, v115);
    v116 = (void *)v141;
    v117 = _convertErrorToNSError(_:)(v141);

    v118 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v134 + 104))(v140, ObjectType);
    v120 = v119;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v118);
    v122 = *(_QWORD *)((*v120 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v121 = *(_QWORD *)((*v120 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v122 >= v121 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v121 > 1, v122 + 1, 1);
    v123 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v122, v117);
    specialized Array._endMutation()(v123);
    v118(v140, 0);
    sub_1001355D0(0, 8u);
    return sub_1001EDB28(v38, v138, v139);
  }
}

uint64_t sub_1001EDB28(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t updated;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (**v45)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[5];
  _QWORD v61[6];

  v59 = a3;
  v56 = a2;
  v48 = a1;
  v55 = *v3;
  v4 = type metadata accessor for UUID(0);
  v57 = *(_QWORD *)(v4 - 8);
  v5 = v57;
  v58 = v4;
  __chkstk_darwin(v4, v6);
  v54 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CustodianRecord(0);
  v50 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v50 + 64);
  __chkstk_darwin(v8, v10);
  v11 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_100296C18);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  v18 = *(_QWORD *)(updated - 8);
  v52 = *(_QWORD *)(v18 + 64);
  v53 = v18;
  v20 = __chkstk_darwin(updated, v19);
  v51 = (uint64_t)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v47 - v23;
  v25 = *(int *)(v8 + 20);
  v26 = v48;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v27((char *)&v47 - v23, v48 + v25, v4);
  v28 = (void (*)(char *, char *, uint64_t))v27;
  *(_QWORD *)&v24[*(int *)(updated + 20)] = 3;
  v24[*(int *)(updated + 24)] = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v49 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__statusUpdater, v12);
  Dependency.wrappedValue.getter(v61, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v29 = sub_10000732C(v61, v61[3]);
  sub_100027FE8(v26, (uint64_t)v11, type metadata accessor for CustodianRecord);
  v30 = *(unsigned __int8 *)(v50 + 80);
  v31 = (v30 + 16) & ~v30;
  v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  v34 = swift_allocObject(&unk_10026FD50, v33 + 8, v30 | 7);
  sub_10003B730((uint64_t)v11, v34 + v31, type metadata accessor for CustodianRecord);
  v35 = (_QWORD *)(v34 + v32);
  v36 = v59;
  *v35 = v56;
  v35[1] = v36;
  *(_QWORD *)(v34 + v33) = v55;
  v37 = *v29;
  sub_100006CA4(*v29 + 16, (uint64_t)v60);
  v56 = sub_10000732C(v60, v60[3]);
  v38 = (uint64_t)v54;
  v28(v54, v24, v58);
  v39 = v51;
  sub_100027FE8((uint64_t)v24, v51, type metadata accessor for CustodianStatusUpdateRequest);
  v40 = *(unsigned __int8 *)(v53 + 80);
  v41 = (v40 + 16) & ~v40;
  v42 = (v52 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_10026FD78, v43 + 16, v40 | 7);
  sub_10003B730(v39, v44 + v41, type metadata accessor for CustodianStatusUpdateRequest);
  *(_QWORD *)(v44 + v42) = v37;
  v45 = (uint64_t (**)(uint64_t))(v44 + v43);
  *v45 = sub_1001F7A54;
  v45[1] = (uint64_t (*)(uint64_t))v34;
  swift_retain(v59);
  swift_retain(v37);
  swift_retain(v34);
  sub_1001BF958(v38, (uint64_t)sub_1001A7858, v44);
  swift_release(v44);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v38, v58);
  sub_100006F58(v60);
  swift_release(v34);
  sub_100028388((uint64_t)v24, type metadata accessor for CustodianStatusUpdateRequest);
  return sub_100006F58(v61);
}

void sub_1001EDEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *), uint64_t a7)
{
  uint64_t ObjectType;
  uint64_t v13;
  void (*v14)(_BYTE *, _QWORD);
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[32];

  if (a1)
  {
    v20 = a7;
    ObjectType = swift_getObjectType(a2);
    swift_errorRetain(a1);
    v13 = _convertErrorToNSError(_:)(a1);
    v14 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a3 + 104))(v21, ObjectType, a3);
    v16 = v15;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
    v18 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v13);
    specialized Array._endMutation()(v19);
    v14(v21, 0);
    swift_errorRelease(a1);
    a7 = v20;
  }
  sub_1001EDFD4(a5, a2, a3, a6, a7);
}

void sub_1001EDFD4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  os_log_t v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  __n128 v87;
  int v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (**v129)(void *);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t (**v148)();
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  os_log_t v215;
  void (*v216)(void *);
  uint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  char v221[8];

  v216 = a4;
  v217 = a5;
  v211 = a3;
  v206 = *v5;
  v8 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v10 = __chkstk_darwin(v8, v9);
  v192 = (uint64_t)&v183 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v193 = (uint64_t)&v183 - v13;
  v14 = sub_1000080B4(&qword_10028CCC0);
  v204 = *(_QWORD *)(v14 - 8);
  v205 = v14;
  __chkstk_darwin(v14, v15);
  v203 = (char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v17, v18);
  v197 = (char *)&v183 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v20, v21);
  v202 = (char *)&v183 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for CustodianRecord(0);
  v198 = *(_QWORD *)(v194 - 8);
  v23 = *(_QWORD *)(v198 + 64);
  v25 = __chkstk_darwin(v194, v24);
  v199 = (uint64_t)&v183 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25, v26);
  v201 = (uint64_t)&v183 - v28;
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v183 - v30;
  v32 = type metadata accessor for CustodianshipRecords(0);
  v210 = *(_QWORD *)(v32 - 8);
  v33 = *(_QWORD *)(v210 + 64);
  v35 = __chkstk_darwin(v32, v34);
  v215 = (os_log_t)((char *)&v183 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = __chkstk_darwin(v35, v36);
  v191 = (uint64_t)&v183 - v38;
  v40 = __chkstk_darwin(v37, v39);
  v196 = (uint64_t)&v183 - v41;
  v43 = __chkstk_darwin(v40, v42);
  v207 = (uint64_t)&v183 - v44;
  v46 = __chkstk_darwin(v43, v45);
  v195 = (uint64_t)&v183 - v47;
  v49 = __chkstk_darwin(v46, v48);
  v213 = (uint64_t)&v183 - v50;
  v52 = __chkstk_darwin(v49, v51);
  v209 = (uint64_t)&v183 - v53;
  __chkstk_darwin(v52, v54);
  v208 = (uint64_t)&v183 - v55;
  v56 = type metadata accessor for SHA256(0);
  v57 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v58);
  v60 = (char *)&v183 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a1 + *(int *)(v32 + 20);
  v200 = v8;
  v62 = (uint64_t *)(v61 + *(int *)(v8 + 32));
  v63 = v62[1];
  if (v63 >> 60 == 15)
  {
    sub_1001355D0(0, 5u);
    type metadata accessor for AACustodianError(0);
    v65 = v64;
    v220 = -7028;
    v66 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v67 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v218, &v220, v66, v65, v67);
    v68 = v218;
    v216(v218);
LABEL_20:

    return;
  }
  v187 = v31;
  v212 = a2;
  v69 = *v62;
  v70 = v63;
  v71 = sub_10000F450(*v62, v63);
  SHA256.init()(v71);
  v189 = v69;
  v190 = v70;
  sub_1001D3844((uint64_t)v60, v69, v70);
  v73 = v72;
  v75 = v74;
  (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
  v76 = a1 + *(int *)(v32 + 24);
  v188 = type metadata accessor for CustodianHealthRecord(0);
  v77 = (uint64_t *)(v76 + *(int *)(v188 + 28));
  v78 = *v77;
  v79 = v77[1];
  if (v79 >> 60 == 15)
  {
    sub_1000144D8(v73, v75);
    sub_1000144D8(v78, v79);
    v80 = v215;
LABEL_12:
    v99 = v189;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v100 = type metadata accessor for Logger(0);
    sub_100005288(v100, (uint64_t)qword_1002A8A08);
    v101 = sub_100027FE8(a1, (uint64_t)v80, type metadata accessor for CustodianshipRecords);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.error.getter(v102);
    if (os_log_type_enabled(v102, v103))
    {
      v104 = swift_slowAlloc(22, -1);
      v105 = swift_slowAlloc(64, -1);
      v218 = (void *)v105;
      *(_DWORD *)v104 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v106 = qword_100299400;
      v107 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v220 = sub_1001DEF4C(v106, v107, (uint64_t *)&v218);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221);
      swift_bridgeObjectRelease(v107);
      *(_WORD *)(v104 + 12) = 2080;
      v108 = type metadata accessor for UUID(0);
      v109 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v110 = dispatch thunk of CustomStringConvertible.description.getter(v108, v109);
      v112 = v111;
      v220 = sub_1001DEF4C(v110, v111, (uint64_t *)&v218);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221);
      swift_bridgeObjectRelease(v112);
      sub_100028388((uint64_t)v80, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "%s - checksum is invalid for %s, no action taken at the moment.", (uint8_t *)v104, 0x16u);
      swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1, -1);
      swift_slowDealloc(v104, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v80, type metadata accessor for CustodianshipRecords);

    }
    *(_BYTE *)(v212 + qword_100292EA0) = 1;
    sub_1001355D0(0, 6u);
    type metadata accessor for AACustodianError(0);
    v114 = v113;
    v220 = -7015;
    v115 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v116 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v218, &v220, v115, v114, v116);
    v68 = v218;
    v216(v218);
    sub_1000144D8(v99, v190);
    goto LABEL_20;
  }
  sub_10000F450(v73, v75);
  sub_100014534(v78, v79);
  sub_10000EA4C(v73, v75);
  v82 = v81;
  sub_1000144D8(v78, v79);
  sub_10000F494(v73, v75);
  sub_10000F494(v73, v75);
  v80 = v215;
  if ((v82 & 1) == 0)
    goto LABEL_12;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v83 = type metadata accessor for Logger(0);
  sub_100005288(v83, (uint64_t)qword_1002A8A08);
  v84 = v208;
  v85 = sub_100027FE8(a1, v208, type metadata accessor for CustodianshipRecords);
  v86 = Logger.logObject.getter(v85);
  v88 = static os_log_type_t.default.getter(v87);
  v89 = os_log_type_enabled(v86, (os_log_type_t)v88);
  v186 = v32;
  if (v89)
  {
    LODWORD(v185) = v88;
    v215 = v86;
    v90 = swift_slowAlloc(22, -1);
    v184 = swift_slowAlloc(64, -1);
    v218 = (void *)v184;
    *(_DWORD *)v90 = 136315394;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v91 = qword_100299400;
    v92 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v220 = sub_1001DEF4C(v91, v92, (uint64_t *)&v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221);
    swift_bridgeObjectRelease(v92);
    *(_WORD *)(v90 + 12) = 2080;
    v93 = type metadata accessor for UUID(0);
    v94 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v95 = dispatch thunk of CustomStringConvertible.description.getter(v93, v94);
    v97 = v96;
    v220 = sub_1001DEF4C(v95, v96, (uint64_t *)&v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221);
    swift_bridgeObjectRelease(v97);
    sub_100028388(v84, type metadata accessor for CustodianshipRecords);
    v86 = v215;
    _os_log_impl((void *)&_mh_execute_header, v215, (os_log_type_t)v185, "%s - custodian %s recovery key checksum is valid.", (uint8_t *)v90, 0x16u);
    v98 = v184;
    swift_arrayDestroy(v184, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v98, -1, -1);
    swift_slowDealloc(v90, -1, -1);
  }
  else
  {
    sub_100028388(v84, type metadata accessor for CustodianshipRecords);
  }

  v117 = (uint64_t)v187;
  sub_100027FE8(a1, (uint64_t)v187, type metadata accessor for CustodianRecord);
  v118 = v209;
  sub_100027FE8(a1, v209, type metadata accessor for CustodianshipRecords);
  sub_100027FE8(v118, v213, type metadata accessor for CustodianshipRecords);
  v119 = *(unsigned __int8 *)(v210 + 80);
  v120 = (v119 + 24) & ~v119;
  v188 = v119;
  v185 = v33 + 7;
  v121 = (v33 + 7 + v120) & 0xFFFFFFFFFFFFFFF8;
  v122 = (v121 + 23) & 0xFFFFFFFFFFFFFFF8;
  v208 = v122 + 16;
  v215 = (os_log_t)(v119 | 7);
  v123 = swift_allocObject(&unk_10026FBE8, v122 + 16, v119 | 7);
  v124 = v214;
  *(_QWORD *)(v123 + 16) = v214;
  sub_10003B730(v118, v123 + v120, type metadata accessor for CustodianshipRecords);
  v125 = (uint64_t *)(v123 + v121);
  v126 = v211;
  v127 = v212;
  *v125 = v212;
  v125[1] = v126;
  v128 = v126;
  v210 = v122;
  v129 = (void (**)(void *))(v123 + v122);
  v130 = (uint64_t)v216;
  v131 = v217;
  *v129 = v216;
  v129[1] = (void (*)(void *))v131;
  v132 = v124;
  v133 = v117;
  swift_retain_n(v132, 2);
  swift_unknownObjectRetain_n(v127, 2);
  swift_retain_n(v131, 2);
  if (sub_1000968FC())
  {
    v134 = v199;
    sub_100027FE8(v117, v199, type metadata accessor for CustodianRecord);
    v135 = type metadata accessor for UUID(0);
    v136 = (uint64_t)v202;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v202, 1, 1, v135);
    v137 = type metadata accessor for Date(0);
    v138 = (uint64_t)v197;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v197, 1, 1, v137);
    v139 = v201;
    sub_100093290(v134, 0, 0, 0, 1, 0, 0xF000000000000000, 2u, v201, v136, 0, 0, v138, 0);
    v140 = v203;
    v141 = v204;
    v142 = v205;
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v214 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v205);
    Dependency.wrappedValue.getter(&v218, v142);
    (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v142);
    sub_10000732C(&v218, v219);
    sub_100027FE8(v117, v134, type metadata accessor for CustodianRecord);
    v143 = *(unsigned __int8 *)(v198 + 80);
    v144 = (v143 + 16) & ~v143;
    v145 = (v23 + v144 + 7) & 0xFFFFFFFFFFFFFFF8;
    v146 = (v145 + 23) & 0xFFFFFFFFFFFFFFF8;
    v147 = swift_allocObject(&unk_10026FC60, v146 + 8, v143 | 7);
    sub_10003B730(v134, v147 + v144, type metadata accessor for CustodianRecord);
    v148 = (uint64_t (**)())(v147 + v145);
    *v148 = sub_1001F6E50;
    v148[1] = (uint64_t (*)())v123;
    *(_QWORD *)(v147 + v146) = v206;
    swift_retain(v123);
    sub_1001E5740(v139, (uint64_t)sub_1001F6ECC, v147);
    swift_release(v147);
    sub_100028388(v139, type metadata accessor for CustodianRecord);
    sub_100006F58(&v218);
    swift_release(v214);
    swift_release(v123);
    v149 = v217;
    v150 = v212;
    v151 = v213;
    v152 = v189;
  }
  else
  {
    v209 = v123;
    v151 = v213;
    v153 = v195;
    sub_100027FE8(v213, v195, type metadata accessor for CustodianshipRecords);
    sub_100027FE8(v153, v207, type metadata accessor for CustodianshipRecords);
    v154 = swift_allocObject(&unk_10026FC10, v208, v215);
    v155 = v214;
    *(_QWORD *)(v154 + 16) = v214;
    sub_10003B730(v153, v154 + v120, type metadata accessor for CustodianshipRecords);
    v156 = (uint64_t *)(v154 + v121);
    *v156 = v212;
    v156[1] = v128;
    v157 = (uint64_t *)(v154 + v210);
    v158 = v217;
    *v157 = v130;
    v157[1] = v158;
    v159 = v151 + *(int *)(v186 + 20);
    v160 = *(_QWORD *)(v159 + *(int *)(v200 + 48) + 8);
    v161 = v196;
    sub_100027FE8(v151, v196, type metadata accessor for CustodianshipRecords);
    v149 = v158;
    if (v160 || !*(_QWORD *)(v161 + *(int *)(v194 + 52) + 8))
    {
      swift_retain_n(v155, 2);
      v162 = v212;
      swift_unknownObjectRetain_n(v212, 2);
      swift_retain_n(v158, 2);
      sub_100028388(v161, type metadata accessor for CustodianshipRecords);
      v163 = v207;
      sub_1001F092C(v207, v162, v128, v130, v149);
      swift_release(v155);
      swift_release(v154);
      v152 = v189;
      v150 = v162;
    }
    else
    {
      v164 = v188;
      swift_retain_n(v155, 2);
      v165 = v212;
      swift_unknownObjectRetain_n(v212, 2);
      swift_retain_n(v149, 2);
      sub_100028388(v161, type metadata accessor for CustodianshipRecords);
      v166 = v192;
      sub_100027FE8(v159, v192, type metadata accessor for CustodianRecoveryInfoRecord);
      v167 = type metadata accessor for UUID(0);
      v168 = (uint64_t)v202;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v202, 1, 1, v167);
      v169 = (uint64_t *)(v151 + *(int *)(v194 + 52));
      v170 = *v169;
      swift_bridgeObjectRetain(v169[1]);
      v171 = v193;
      sub_1001F9904(v166, 0, 0xF000000000000000, 0, 0xF000000000000000, 2u, v168, v170, v193, v172);
      v173 = v203;
      v174 = v204;
      v175 = v205;
      (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v203, v155 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v205);
      Dependency.wrappedValue.getter(&v218, v175);
      (*(void (**)(char *, uint64_t))(v174 + 8))(v173, v175);
      sub_10000732C(&v218, v219);
      v176 = v191;
      sub_100027FE8(v151, v191, type metadata accessor for CustodianshipRecords);
      v177 = (v164 + 16) & ~v164;
      v178 = (v185 + v177) & 0xFFFFFFFFFFFFFFF8;
      v179 = (v178 + 23) & 0xFFFFFFFFFFFFFFF8;
      v180 = swift_allocObject(&unk_10026FC38, v179 + 8, v215);
      v181 = v176;
      v149 = v217;
      sub_10003B730(v181, v180 + v177, type metadata accessor for CustodianshipRecords);
      v182 = (_QWORD *)(v180 + v178);
      v151 = v213;
      v155 = v214;
      *v182 = sub_1001F6EAC;
      v182[1] = v154;
      *(_QWORD *)(v180 + v179) = v206;
      swift_retain(v154);
      sub_1001E55AC(v171, (uint64_t)sub_1001F6EB4, v180);
      swift_release(v180);
      sub_100028388(v171, type metadata accessor for CustodianRecoveryInfoRecord);
      sub_100006F58(&v218);
      swift_release(v155);
      swift_release(v154);
      v152 = v189;
      v163 = v207;
      v150 = v165;
    }
    sub_100028388(v163, type metadata accessor for CustodianshipRecords);
    swift_release(v155);
    swift_release(v209);
    swift_release(v149);
    swift_unknownObjectRelease(v150);
    v133 = (uint64_t)v187;
  }
  sub_100028388(v151, type metadata accessor for CustodianshipRecords);
  swift_release(v149);
  swift_unknownObjectRelease(v150);
  sub_1000144D8(v152, v190);
  sub_100028388(v133, type metadata accessor for CustodianRecord);
}

uint64_t sub_1001EF110(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  __n128 v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  __n128 v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (**v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t (**v104)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v105;
  uint64_t *v106;
  unint64_t v108;
  uint64_t v109;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  os_log_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t (*v132)(_QWORD);
  uint64_t v133[5];
  uint64_t v134;
  uint64_t v135;

  v131 = (_QWORD *)*v3;
  v132 = a2;
  v6 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v6, v7);
  v129 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v9, v10);
  v127 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_1000080B4(&qword_10028CCC0);
  v123 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125, v12);
  v122 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecord(0);
  v124 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v124 + 64);
  v17 = __chkstk_darwin(v14, v16);
  v128 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17, v18);
  v130 = (uint64_t)&v112 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v112 - v23;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v112 - v26;
  v121 = type metadata accessor for CustodianshipRecords(0);
  v28 = *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64);
  v30 = __chkstk_darwin(v121, v29);
  v31 = (char *)&v112 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30, v32);
  v35 = (char *)&v112 - v34;
  __chkstk_darwin(v33, v36);
  v39 = (char *)&v112 - v38;
  if (*(_QWORD *)(a1 + *(int *)(v14 + 36)) == 3)
  {
    v116 = v37;
    v118 = v14;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v40 = type metadata accessor for Logger(0);
    sub_100005288(v40, (uint64_t)qword_1002A8A08);
    v41 = sub_100027FE8(a1, (uint64_t)v39, type metadata accessor for CustodianshipRecords);
    v42 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = os_log_type_enabled(v42, (os_log_type_t)v44);
    v119 = a3;
    v120 = v27;
    v117 = v24;
    if (v45)
    {
      v114 = v44;
      v115 = v42;
      v46 = swift_slowAlloc(22, -1);
      v113 = swift_slowAlloc(64, -1);
      v133[0] = v113;
      *(_DWORD *)v46 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v48 = qword_100299400;
      v47 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v134 = sub_1001DEF4C(v48, v47, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v46 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v49 = type metadata accessor for UUID(0);
      v50 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v49, v50);
      v53 = v52;
      v134 = sub_1001DEF4C(v51, v52, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v53);
      sub_100028388((uint64_t)v39, type metadata accessor for CustodianshipRecords);
      v54 = v115;
      _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v114, "%s - custodian %s was marked as unreachable, marking as accepted again.", (uint8_t *)v46, 0x16u);
      v55 = v113;
      swift_arrayDestroy(v113, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      v27 = v120;
    }
    else
    {
      sub_100028388((uint64_t)v39, type metadata accessor for CustodianshipRecords);

    }
    sub_100027FE8(a1, (uint64_t)v27, type metadata accessor for CustodianRecord);
    sub_100027FE8(a1, (uint64_t)v35, type metadata accessor for CustodianshipRecords);
    v70 = *(unsigned __int8 *)(v116 + 80);
    v71 = (v70 + 16) & ~v70;
    v72 = (v28 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
    v73 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
    v74 = swift_allocObject(&unk_10026FAA8, v73 + 8, v70 | 7);
    sub_10003B730((uint64_t)v35, v74 + v71, type metadata accessor for CustodianshipRecords);
    v75 = (_QWORD *)(v74 + v72);
    v76 = v119;
    *v75 = v132;
    v75[1] = v76;
    *(_QWORD *)(v74 + v73) = v131;
    v121 = swift_allocObject(&unk_10026FAD0, 24, 7);
    *(_QWORD *)(v121 + 16) = 2;
    v77 = v125;
    v78 = v122;
    v79 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v126 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v125);
    swift_retain(v76);
    Dependency.wrappedValue.getter(v133, v77);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v77);
    v80 = sub_10000732C(v133, v133[3]);
    v81 = (uint64_t)v117;
    sub_100027FE8((uint64_t)v27, (uint64_t)v117, type metadata accessor for CustodianRecord);
    v82 = *(unsigned __int8 *)(v124 + 80);
    v83 = (uint64_t)v27;
    v84 = (v82 + 16) & ~v82;
    v125 = v82 | 7;
    v126 = v15 + 7;
    v85 = (v15 + 7 + v84) & 0xFFFFFFFFFFFFFFF8;
    v86 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
    v87 = (v86 + 23) & 0xFFFFFFFFFFFFFFF8;
    v88 = swift_allocObject(&unk_10026FAF8, v87 + 8, v82 | 7);
    v89 = v88 + v84;
    v90 = v83;
    sub_10003B730(v81, v89, type metadata accessor for CustodianRecord);
    *(_QWORD *)(v88 + v85) = 2;
    v91 = (uint64_t (**)(uint64_t))(v88 + v86);
    *v91 = sub_1001F6C10;
    v91[1] = (uint64_t (*)(uint64_t))v74;
    *(_QWORD *)(v88 + v87) = v131;
    v92 = *v80;
    v131 = sub_10000732C((_QWORD *)(v92 + 56), *(_QWORD *)(v92 + 80));
    sub_100027FE8(v83, v81, type metadata accessor for CustodianRecord);
    v93 = type metadata accessor for UUID(0);
    v94 = (uint64_t)v127;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v127, 1, 1, v93);
    v95 = type metadata accessor for Date(0);
    v96 = (uint64_t)v129;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v129, 1, 1, v95);
    v97 = v121;
    swift_retain(v121);
    v132 = (uint64_t (*)(_QWORD))v74;
    swift_retain(v74);
    v98 = v130;
    sub_100093290(v81, 0, 0, 2, 0, 0, 0xF000000000000000, 2u, v130, v94, 0, 0, v96, 0);
    v99 = v90;
    v100 = v128;
    sub_100027FE8(v99, v128, type metadata accessor for CustodianRecord);
    v101 = (v82 + 48) & ~v82;
    v102 = (v126 + v101) & 0xFFFFFFFFFFFFFFF8;
    v103 = (_QWORD *)swift_allocObject(&unk_10026FB20, v102 + 16, v125);
    v103[2] = v92;
    v103[3] = sub_1001F6C84;
    v103[4] = v88;
    v103[5] = 0;
    sub_10003B730(v100, (uint64_t)v103 + v101, type metadata accessor for CustodianRecord);
    v104 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v103 + v102);
    *v104 = sub_100117CF0;
    v104[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v97;
    v105 = qword_10028AF00;
    swift_retain(v97);
    swift_retain(v92);
    swift_retain(v88);
    if (v105 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (*(_BYTE *)(v98 + *(int *)(v118 + 48)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v106 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v106 = &qword_1002A8C70;
    }
    v109 = *v106;
    v108 = v106[1];
    swift_bridgeObjectRetain(v108);
    v110 = sub_1001FD4C0(v109, v108);
    v111 = objc_msgSend(v110, "privateCloudDatabase");
    swift_bridgeObjectRelease(v108);

    sub_100054464(v98, v111, (uint64_t)sub_1001F6C8C, (uint64_t)v103);
    swift_release(v103);

    sub_100028388(v98, type metadata accessor for CustodianRecord);
    swift_release(v88);
    swift_release_n(v97, 2);
    sub_100006F58(v133);
    swift_release(v132);
    return sub_100028388((uint64_t)v120, type metadata accessor for CustodianRecord);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v56 = type metadata accessor for Logger(0);
    sub_100005288(v56, (uint64_t)qword_1002A8A08);
    v57 = sub_100027FE8(a1, (uint64_t)v31, type metadata accessor for CustodianshipRecords);
    v58 = Logger.logObject.getter(v57);
    v60 = static os_log_type_t.default.getter(v59);
    if (os_log_type_enabled(v58, v60))
    {
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(64, -1);
      v133[0] = v62;
      *(_DWORD *)v61 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v63 = qword_100299400;
      v64 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v134 = sub_1001DEF4C(v63, v64, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v64);
      *(_WORD *)(v61 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v65 = type metadata accessor for UUID(0);
      v66 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v67 = dispatch thunk of CustomStringConvertible.description.getter(v65, v66);
      v69 = v68;
      v134 = sub_1001DEF4C(v67, v68, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
      swift_bridgeObjectRelease(v69);
      sub_100028388((uint64_t)v31, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v58, v60, "%s - custodian %s status is not unreachable, bailing.", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v31, type metadata accessor for CustodianshipRecords);

    }
    return v132(0);
  }
}

uint64_t sub_1001EFC54(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v8 = type metadata accessor for CustodianshipRecords(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v47 - v14;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v12, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(a1);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v49 = a3;
      v50 = a4;
      v20 = swift_slowAlloc(32, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      v48 = swift_slowAlloc(64, -1);
      v52 = v48;
      *(_DWORD *)v20 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v22 = qword_100299400;
      v23 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v51 = sub_1001DEF4C(v22, v23, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v20 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v24 = type metadata accessor for UUID(0);
      v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
      v28 = v27;
      v51 = sub_1001DEF4C(v26, v27, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v28);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v20 + 22) = 2112;
      v29 = _convertErrorToNSError(_:)(a1);
      v51 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v21 = v29;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - failed to mark custodian %s as accepted. Error: %@", (uint8_t *)v20, 0x20u);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v30);
      swift_slowDealloc(v21, -1, -1);
      v31 = v48;
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      a3 = v49;
    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    swift_errorRetain(a1);
    a3(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A8A08);
    v33 = sub_100027FE8(a2, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v50 = a4;
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(64, -1);
      v52 = v38;
      *(_DWORD *)v37 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v39 = qword_100299400;
      v40 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v51 = sub_1001DEF4C(v39, v40, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v37 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v41 = type metadata accessor for UUID(0);
      v42 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
      v45 = v44;
      v51 = sub_1001DEF4C(v43, v44, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v45);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "%s - successfully marked custodian %s as accepted.", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);

    }
    return ((uint64_t (*)(_QWORD))a3)(0);
  }
}

uint64_t sub_1001F023C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  __n128 v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  uint64_t v49;
  uint64_t v50;

  v10 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v17, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    v18 = *v17;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8A08);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v47 = a5;
      v48 = a4;
      v23 = swift_slowAlloc(32, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      v25 = swift_slowAlloc(32, -1);
      v50 = v25;
      *(_DWORD *)v23 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v26 = qword_100299400;
      v27 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v49 = sub_1001DEF4C(v26, v27, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v23 + 12) = 2048;
      v49 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *(_WORD *)(v23 + 22) = 2112;
      v28 = _convertErrorToNSError(_:)(v18);
      v49 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *v24 = v28;
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - error marking custodian record with status %ld: %@", (uint8_t *)v23, 0x20u);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v29);
      swift_slowDealloc(v24, -1, -1);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      a4 = v48;
    }
    else
    {
      swift_errorRelease(v18);

    }
    swift_errorRetain(v18);
    a4(v18);
    swift_errorRelease(v18);
    return swift_errorRelease(v18);
  }
  else
  {
    v46 = a3;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v30 = type metadata accessor for Logger(0);
    sub_100005288(v30, (uint64_t)qword_1002A8A08);
    v31 = sub_100027FE8(a2, (uint64_t)v13, type metadata accessor for CustodianRecord);
    v32 = Logger.logObject.getter(v31);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v32, v34))
    {
      v47 = a5;
      v48 = a4;
      v35 = swift_slowAlloc(32, -1);
      v36 = swift_slowAlloc(64, -1);
      v50 = v36;
      *(_DWORD *)v35 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v37 = qword_100299400;
      v38 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v49 = sub_1001DEF4C(v37, v38, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v35 + 12) = 2080;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v43 = v42;
      v49 = sub_1001DEF4C(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(v43);
      sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
      *(_WORD *)(v35 + 22) = 2048;
      v49 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "%s - custodian %s has been updated with status %ld.", (uint8_t *)v35, 0x20u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      a4 = v48;
    }
    else
    {
      sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);

    }
    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    a4(0);
    return sub_100004934((uint64_t)v17, &qword_10028D5D0);
  }
}

uint64_t sub_1001F07F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a5;
  v11 = type metadata accessor for CustodianshipRecords(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a2, (uint64_t)v15, v16);
  v17 = *(unsigned __int8 *)(v12 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_10026FD28, v20 + 16, v17 | 7);
  *(_QWORD *)(v21 + 16) = a1;
  sub_10003B730((uint64_t)v15, v21 + v18, type metadata accessor for CustodianshipRecords);
  v22 = (_QWORD *)(v21 + v19);
  *v22 = a3;
  v22[1] = a4;
  v23 = (_QWORD *)(v21 + v20);
  *v23 = v26;
  v23[1] = a6;
  swift_retain(a1);
  swift_unknownObjectRetain(a3);
  swift_retain(a6);
  sub_1001F0D90(a2, (uint64_t (*)(uint64_t))sub_1001F6EAC, (uint64_t (*)(uint64_t))v21);
  return swift_release(v21);
}

uint64_t sub_1001F092C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[6];

  v59 = a2;
  v60 = a5;
  v56 = a3;
  v57 = *v5;
  v58 = a4;
  v7 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v7 - 8);
  v64 = v7;
  __chkstk_darwin(v7, v8);
  v61 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028CCE0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CustodianshipRecords(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v19 = __chkstk_darwin(v15, v18);
  v55 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v50 - v21;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v23 = type metadata accessor for Logger(0);
  sub_100005288(v23, (uint64_t)qword_1002A89D8);
  v24 = sub_100027FE8(a1, (uint64_t)v22, type metadata accessor for CustodianshipRecords);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v52 = v11;
    v53 = v16;
    v54 = a1;
    v27 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v66[0] = v51;
    *(_DWORD *)v27 = 136315394;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v29 = qword_100299400;
    v28 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v65 = sub_1001DEF4C(v29, v28, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v27 + 12) = 2080;
    v30 = sub_1001E4A60();
    v32 = v31;
    v65 = sub_1001DEF4C(v30, v31, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    swift_bridgeObjectRelease(v32);
    sub_100028388((uint64_t)v22, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v27, 0x16u);
    v33 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v16 = v53;
    a1 = v54;
    v11 = v52;
  }
  else
  {
    sub_100028388((uint64_t)v22, type metadata accessor for CustodianshipRecords);

  }
  v34 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v62 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__securityController, v10);
  Dependency.wrappedValue.getter(v66, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10000732C(v66, v66[3]);
  v35 = v61;
  sub_1001E4D98(v61);
  v36 = v55;
  sub_100027FE8(a1, v55, type metadata accessor for CustodianshipRecords);
  v37 = *(unsigned __int8 *)(v16 + 80);
  v38 = (v37 + 16) & ~v37;
  v39 = (v17 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = (v40 + 23) & 0xFFFFFFFFFFFFFFF8;
  v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject(&unk_10026FCD8, v42 + 8, v37 | 7);
  sub_10003B730(v36, v43 + v38, type metadata accessor for CustodianshipRecords);
  v44 = (_QWORD *)(v43 + v39);
  v45 = v59;
  v46 = v60;
  v47 = v56;
  *v44 = v59;
  v44[1] = v47;
  v48 = (_QWORD *)(v43 + v40);
  *v48 = v58;
  v48[1] = v46;
  *(_QWORD *)(v43 + v41) = v34;
  *(_QWORD *)(v43 + v42) = v57;
  swift_unknownObjectRetain(v45);
  swift_retain(v46);
  swift_retain(v34);
  sub_10018BCE0(v35, (void (*)(_QWORD, _QWORD))sub_1001F723C, v43);
  swift_release(v43);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v35, v64);
  return sub_100006F58(v66);
}

uint64_t sub_1001F0D90(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t (**v50)(uint64_t);
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  uint64_t (*v62)(uint64_t);
  _QWORD v63[5];

  v61 = a2;
  v62 = a3;
  v59 = *v3;
  v57 = sub_1000080B4(&qword_10028CCC0);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57, v5);
  v56 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v52 - v17;
  v19 = type metadata accessor for CustodianshipRecords(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v23 = __chkstk_darwin(v19, v22);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)&v52 - v26;
  v28 = a1 + *(int *)(v25 + 20);
  v29 = *(_QWORD *)(v28 + *(int *)(v11 + 48) + 8);
  sub_100027FE8(a1, (uint64_t)&v52 - v26, v30);
  if (v29)
  {
    v31 = sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    return v61(v31);
  }
  v53 = v20;
  v54 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = v60;
  v55 = v18;
  v34 = type metadata accessor for CustodianRecord(0);
  v35 = *(_QWORD *)&v27[*(int *)(v34 + 52) + 8];
  v31 = sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
  if (!v35)
    return v61(v31);
  sub_100027FE8(v28, (uint64_t)v15, type metadata accessor for CustodianRecoveryInfoRecord);
  v36 = type metadata accessor for UUID(0);
  v37 = (uint64_t)v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v10, 1, 1, v36);
  v38 = (uint64_t *)(a1 + *(int *)(v34 + 52));
  v39 = *v38;
  swift_bridgeObjectRetain(v38[1]);
  v40 = (uint64_t)v55;
  sub_1001F9904((uint64_t)v15, 0, 0xF000000000000000, 0, 0xF000000000000000, 2u, v37, v39, (uint64_t)v55, v41);
  v42 = v57;
  v43 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v56, v58 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__storageController, v57);
  Dependency.wrappedValue.getter(v63, v42);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v43, v42);
  sub_10000732C(v63, v63[3]);
  v44 = v54;
  sub_100027FE8(a1, v54, type metadata accessor for CustodianshipRecords);
  v45 = *(unsigned __int8 *)(v53 + 80);
  v46 = (v45 + 16) & ~v45;
  v47 = (v21 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  v49 = swift_allocObject(&unk_10026FD00, v48 + 8, v45 | 7);
  sub_10003B730(v44, v49 + v46, type metadata accessor for CustodianshipRecords);
  v50 = (uint64_t (**)(uint64_t))(v49 + v47);
  v51 = v62;
  *v50 = v61;
  v50[1] = v51;
  *(_QWORD *)(v49 + v48) = v59;
  swift_retain(v51);
  sub_1001E55AC(v40, (uint64_t)sub_1001F6EB4, v49);
  swift_release(v49);
  sub_100028388(v40, type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_100006F58(v63);
}

void sub_1001F1108(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __n128 v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  __n128 v55;
  os_log_type_t v56;
  void (*v57)(uint64_t, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  void *v77;

  v10 = type metadata accessor for CustodianshipRecords(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v72 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v72 - v20;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    sub_1000E05E4(a1, 1);
    v37 = swift_errorRetain(a1);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v74 = a5;
      v75 = a4;
      v40 = swift_slowAlloc(32, -1);
      v41 = (uint64_t *)swift_slowAlloc(8, -1);
      v73 = swift_slowAlloc(64, -1);
      v77 = (void *)v73;
      *(_DWORD *)v40 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v42 = qword_100299400;
      v43 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v76 = sub_1001DEF4C(v42, v43, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v40 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v44 = type metadata accessor for UUID(0);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v76 = sub_1001DEF4C(v46, v47, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v40 + 22) = 2112;
      v49 = _convertErrorToNSError(_:)(a1);
      v76 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      *v41 = v49;
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - custodian %s failed to check if shared and accepted, assuming accepted for now. Error: %@\"", (uint8_t *)v40, 0x20u);
      v50 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v41, 1, v50);
      swift_slowDealloc(v41, -1, -1);
      v51 = v73;
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      a4 = v75;
    }
    else
    {
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

    }
    swift_errorRetain(a1);
    a4(1, a1);
    sub_10006AEB4(a1, 1);
    sub_10006AEB4(a1, 1);
  }
  else if ((a1 & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v52 = type metadata accessor for Logger(0);
    sub_100005288(v52, (uint64_t)qword_1002A8A08);
    v53 = sub_100027FE8(a3, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    v54 = Logger.logObject.getter(v53);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v54, v56))
    {
      v74 = a5;
      v57 = a4;
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(64, -1);
      v77 = (void *)v59;
      *(_DWORD *)v58 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v60 = qword_100299400;
      v61 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v76 = sub_1001DEF4C(v60, v61, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v58 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v62 = type metadata accessor for UUID(0);
      v63 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v62, v63);
      v66 = v65;
      v76 = sub_1001DEF4C(v64, v65, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v66);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "%s - custodian %s is shared and accepted", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      v57(1, 0);
    }
    else
    {
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);

      a4(1, 0);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A8A08);
    v23 = sub_100027FE8(a3, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v24, v26))
    {
      v75 = a4;
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v77 = (void *)v28;
      *(_DWORD *)v27 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v29 = qword_100299400;
      v30 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v76 = sub_1001DEF4C(v29, v30, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v27 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v35 = v34;
      v76 = sub_1001DEF4C(v33, v34, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v35);
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "%s - custodian %s is NOT shared and accepted", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      a4 = v75;
    }
    else
    {
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);

    }
    type metadata accessor for AACustodianError(0);
    v68 = v67;
    v76 = -7017;
    v69 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v70 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v77, &v76, v69, v68, v70);
    v71 = v77;
    a4(0, v77);

  }
}

uint64_t sub_1001F19E0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;

  v8 = type metadata accessor for CustodianRecord(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v53 - v14;
  v16 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v12, type metadata accessor for CustodianRecord);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v23, v25))
    {
      v55 = a4;
      v56 = a3;
      v26 = swift_slowAlloc(32, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      v54 = swift_slowAlloc(64, -1);
      v58 = v54;
      *(_DWORD *)v26 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v28 = qword_100299400;
      v29 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v57 = sub_1001DEF4C(v28, v29, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 12) = 2080;
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      v57 = sub_1001DEF4C(v32, v33, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
      *(_WORD *)(v26 + 22) = 2112;
      v35 = _convertErrorToNSError(_:)(v20);
      v57 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      *v27 = v35;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s - custodian %s name could not be updated. %@", (uint8_t *)v26, 0x20u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v36);
      swift_slowDealloc(v27, -1, -1);
      v37 = v54;
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      a3 = v56;
    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
    a3();
    return swift_errorRelease(v20);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8A08);
    v39 = sub_100027FE8(a2, (uint64_t)v15, type metadata accessor for CustodianRecord);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v55 = a4;
      v56 = a3;
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v58 = v44;
      *(_DWORD *)v43 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v45 = qword_100299400;
      v46 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v57 = sub_1001DEF4C(v45, v46, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v43 + 12) = 2080;
      v47 = type metadata accessor for UUID(0);
      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      v51 = v50;
      v57 = sub_1001DEF4C(v49, v50, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v51);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "%s - custodian %s name has been updated.", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      a3 = v56;
    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);

    }
    a3();
    return sub_100004934((uint64_t)v19, &qword_10028D5D0);
  }
}

uint64_t sub_1001F1FFC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;

  v8 = type metadata accessor for CustodianshipRecords(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v53 - v14;
  v16 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, &qword_100293AB0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v12, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v23, v25))
    {
      v55 = a4;
      v56 = a3;
      v26 = swift_slowAlloc(32, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      v54 = swift_slowAlloc(64, -1);
      v58 = v54;
      *(_DWORD *)v26 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v28 = qword_100299400;
      v29 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v57 = sub_1001DEF4C(v28, v29, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      v57 = sub_1001DEF4C(v32, v33, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v26 + 22) = 2112;
      v35 = _convertErrorToNSError(_:)(v20);
      v57 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      *v27 = v35;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s - custodian %s recordBuildVersion could not be updated. %@", (uint8_t *)v26, 0x20u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v36);
      swift_slowDealloc(v27, -1, -1);
      v37 = v54;
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      a3 = v56;
    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
    a3();
    return swift_errorRelease(v20);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8A08);
    v39 = sub_100027FE8(a2, (uint64_t)v15, type metadata accessor for CustodianshipRecords);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v55 = a4;
      v56 = a3;
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v58 = v44;
      *(_DWORD *)v43 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v45 = qword_100299400;
      v46 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v57 = sub_1001DEF4C(v45, v46, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v43 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v47 = type metadata accessor for UUID(0);
      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      v51 = v50;
      v57 = sub_1001DEF4C(v49, v50, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v51);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "%s - custodian %s recordBuildVersion updated.", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      a3 = v56;
    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipRecords);

    }
    a3();
    return sub_100004934((uint64_t)v19, &qword_100293AB0);
  }
}

uint64_t sub_1001F262C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  void (*v52)(uint64_t *, _QWORD);
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  __n128 v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  NSObject *v76;
  __n128 v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char v92;
  unsigned __int8 v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t (*v106)(_QWORD);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[24];

  v98 = a8;
  v108 = a7;
  v105 = a5;
  v103 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v103 - 8);
  v14 = __chkstk_darwin(v103, v13);
  v97 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v96 = (uint64_t)&v94 - v17;
  v102 = type metadata accessor for CustodianshipRecords(0);
  v19 = __chkstk_darwin(v102, v18);
  v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v19, v22);
  v101 = (uint64_t)&v94 - v24;
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v94 - v26;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A89D8);
  swift_errorRetain(a2);
  v29 = swift_errorRetain(a2);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v106 = a6;
  v107 = a4;
  if (v32)
  {
    v95 = v21;
    v100 = a3;
    v33 = swift_slowAlloc(18, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v33 = 67109378;
    v104 = a1;
    LODWORD(v110) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 4);
    *(_WORD *)(v33 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v35 = _swift_stdlib_bridgeErrorToNSError(a2);
      v110 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
    }
    else
    {
      v110 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111);
      v35 = 0;
    }
    *v34 = v35;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v33, 0x12u);
    v59 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v34, 1, v59);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    a6 = v106;
    a4 = v107;
    a3 = v100;
    a1 = v104;
    v21 = v95;
    if (!a2)
      goto LABEL_19;
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    if (!a2)
    {
LABEL_19:
      if ((a1 & 1) != 0)
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        sub_100005288(v28, (uint64_t)qword_1002A8A08);
        v60 = v101;
        v61 = sub_100027FE8(a3, v101, type metadata accessor for CustodianshipRecords);
        v62 = Logger.logObject.getter(v61);
        v64 = static os_log_type_t.default.getter(v63);
        if (os_log_type_enabled(v62, v64))
        {
          v100 = a3;
          v65 = swift_slowAlloc(28, -1);
          v66 = swift_slowAlloc(64, -1);
          v110 = v66;
          *(_DWORD *)v65 = 136315650;
          if (qword_10028AEF8 != -1)
            swift_once(&qword_10028AEF8, sub_1001E8F94);
          v67 = qword_100299400;
          v68 = *(_QWORD *)algn_100299408;
          swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
          v109 = sub_1001DEF4C(v67, v68, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
          swift_bridgeObjectRelease(v68);
          *(_WORD *)(v65 + 12) = 2080;
          type metadata accessor for CustodianRecord(0);
          v69 = v101;
          v70 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v71 = v103;
          v72 = dispatch thunk of CustomStringConvertible.description.getter(v103, v70);
          v74 = v73;
          v109 = sub_1001DEF4C(v72, v73, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
          swift_bridgeObjectRelease(v74);
          sub_100028388(v69, type metadata accessor for CustodianshipRecords);
          *(_WORD *)(v65 + 22) = 1024;
          LODWORD(v109) = 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 4);
          _os_log_impl((void *)&_mh_execute_header, v62, v64, "%s - custodian %s check recovery key exists: %{BOOL}d. Ending with success", (uint8_t *)v65, 0x1Cu);
          swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v65, -1, -1);

          a6 = v106;
          a3 = v100;
        }
        else
        {
          sub_100028388(v60, type metadata accessor for CustodianshipRecords);

          v71 = v103;
        }
        v88 = type metadata accessor for CustodianRecord(0);
        v89 = v99;
        v90 = v97;
        (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v97, a3 + *(int *)(v88 + 20), v71);
        swift_beginAccess(v98 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck_healthyCustodians, &v110, 33, 0);
        v91 = v96;
        sub_1001F3C08(v96, v90);
        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v91, v71);
        swift_endAccess(&v110);
        v92 = 1;
        v93 = 2;
      }
      else
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        sub_100005288(v28, (uint64_t)qword_1002A8A08);
        v75 = sub_100027FE8(a3, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
        v76 = Logger.logObject.getter(v75);
        v78 = static os_log_type_t.default.getter(v77);
        if (os_log_type_enabled(v76, v78))
        {
          v79 = (uint64_t)v21;
          v80 = swift_slowAlloc(28, -1);
          v81 = swift_slowAlloc(64, -1);
          v110 = v81;
          *(_DWORD *)v80 = 136315650;
          if (qword_10028AEF8 != -1)
            swift_once(&qword_10028AEF8, sub_1001E8F94);
          v82 = qword_100299400;
          v83 = *(_QWORD *)algn_100299408;
          swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
          v109 = sub_1001DEF4C(v82, v83, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
          swift_bridgeObjectRelease(v83);
          *(_WORD *)(v80 + 12) = 2080;
          type metadata accessor for CustodianRecord(0);
          v84 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v85 = dispatch thunk of CustomStringConvertible.description.getter(v103, v84);
          v87 = v86;
          v109 = sub_1001DEF4C(v85, v86, &v110);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
          swift_bridgeObjectRelease(v87);
          sub_100028388(v79, type metadata accessor for CustodianshipRecords);
          *(_WORD *)(v80 + 22) = 1024;
          LODWORD(v109) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 4);
          _os_log_impl((void *)&_mh_execute_header, v76, v78, "%s - custodian %s check recovery key missing: %{BOOL}d. Ending with failure", (uint8_t *)v80, 0x1Cu);
          swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1, -1);
          swift_slowDealloc(v80, -1, -1);

        }
        else
        {
          sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);

        }
        v92 = 0;
        v93 = 3;
      }
      sub_1001355D0(v92, v93);
      return a6(0);
    }
  }
  swift_errorRetain(a2);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  sub_100005288(v28, (uint64_t)qword_1002A8A08);
  sub_100027FE8(a3, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
  swift_errorRetain(a2);
  v36 = swift_errorRetain(a2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v104 = a1;
    v39 = swift_slowAlloc(38, -1);
    v40 = (uint64_t *)swift_slowAlloc(8, -1);
    v41 = swift_slowAlloc(64, -1);
    v110 = v41;
    *(_DWORD *)v39 = 136315906;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v42 = qword_100299400;
    v43 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v109 = sub_1001DEF4C(v42, v43, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v39 + 12) = 2080;
    type metadata accessor for CustodianHealthRecord(0);
    v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v103, v44);
    v47 = v46;
    v109 = sub_1001DEF4C(v45, v46, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    swift_bridgeObjectRelease(v47);
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    *(_WORD *)(v39 + 22) = 2112;
    v48 = _convertErrorToNSError(_:)(a2);
    v109 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
    *v40 = v48;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    *(_WORD *)(v39 + 32) = 1024;
    LODWORD(v109) = v104 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 4);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - Check custodian recovery failed for custodian %s with error: %@ exists: %{BOOL}d\"", (uint8_t *)v39, 0x26u);
    v49 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v40, 1, v49);
    swift_slowDealloc(v40, -1, -1);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    a6 = v106;
    a4 = v107;
  }
  else
  {
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  ObjectType = swift_getObjectType(a4);
  v51 = _convertErrorToNSError(_:)(a2);
  v52 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v105 + 104))(&v110, ObjectType);
  v54 = v53;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
  v56 = *(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v55 = *(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v56 >= v55 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
  v57 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v51);
  specialized Array._endMutation()(v57);
  v52(&v110, 0);
  sub_1001355D0(0, 4u);
  swift_errorRetain(a2);
  a6(a2);
  swift_errorRelease(a2);
  return swift_errorRelease(a2);
}

uint64_t sub_1001F322C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;

  v8 = type metadata accessor for CustodianRecord(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v49 - v14;
  v16 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v12, type metadata accessor for CustodianRecord);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v51 = a4;
      v52 = a3;
      v25 = swift_slowAlloc(32, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v54 = v50;
      *(_DWORD *)v25 = 136315650;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v27 = qword_100299400;
      v28 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v53 = sub_1001DEF4C(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v29 = swift_bridgeObjectRelease(v28);
      *(_WORD *)(v25 + 12) = 2080;
      v30 = UUID.uuidString.getter(v29);
      v32 = v31;
      v53 = sub_1001DEF4C(v30, v31, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v32);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
      *(_WORD *)(v25 + 22) = 2112;
      v33 = _convertErrorToNSError(_:)(v20);
      v53 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *v26 = v33;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s - error processed non reachable custodian %s: %@", (uint8_t *)v25, 0x20u);
      v34 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v34);
      swift_slowDealloc(v26, -1, -1);
      v35 = v50;
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      a3 = v52;
    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
    swift_errorRetain(v20);
    a3(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A08);
    v37 = sub_100027FE8(a2, (uint64_t)v15, type metadata accessor for CustodianRecord);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v51 = a4;
      v52 = a3;
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v54 = v41;
      *(_DWORD *)v40 = 136315394;
      if (qword_10028AEF8 != -1)
        swift_once(&qword_10028AEF8, sub_1001E8F94);
      v42 = qword_100299400;
      v43 = *(_QWORD *)algn_100299408;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
      v53 = sub_1001DEF4C(v42, v43, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      v44 = swift_bridgeObjectRelease(v43);
      *(_WORD *)(v40 + 12) = 2080;
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      v53 = sub_1001DEF4C(v45, v46, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v47);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - successfully processed non reachable custodian %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v52(0);
    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);

      a3(0);
    }
    return sub_100004934((uint64_t)v19, &qword_10028D5D0);
  }
}

uint64_t sub_1001F3800(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::UInt v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain(a2);
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease(v6);
      swift_release(a2);
      v27 = v9;
      v10 = type metadata accessor for CustodianRecoverySession(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v26, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v26[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = sub_10000D99C(v7, result + 1);
    v26[0] = v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v25 = v23 + 1;
      swift_retain(a2);
      sub_1001F3E64(v25);
      v24 = v26[0];
    }
    else
    {
      v24 = v22;
      swift_retain(a2);
    }
    sub_10000DBA4(a2, v24);
    v21 = *v3;
    *v3 = v24;
  }
  else
  {
    Hasher.init(_seed:)(v26);
    swift_bridgeObjectRetain(v6);
    v12 = ObjectIdentifier.hashValue.getter(a2);
    Hasher._combine(_:)(v12);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      v16 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(v16 + 8 * v15) == a2)
      {
LABEL_12:
        swift_release(a2);
        swift_bridgeObjectRelease(v6);
        v18 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v15);
        *a1 = v18;
        swift_retain(v18);
        return 0;
      }
      v17 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        if (*(_QWORD *)(v16 + 8 * v15) == a2)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v26[0] = *v2;
    *v2 = 0x8000000000000000;
    v20 = swift_retain(a2);
    sub_1001F4768(v20, v15, isUniquelyReferenced_nonNull_native);
    v21 = *v2;
    *v2 = v26[0];
  }
  swift_bridgeObjectRelease(v21);
  *a1 = a2;
  return 1;
}

uint64_t sub_1001F3A5C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1001F48B8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1001F3C08(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, &type metadata accessor for UUID);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100005150((unint64_t *)&qword_10028CC90, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100005150(&qword_10028CC98, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_1001F4A50((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

Swift::Int sub_1001F3E64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000080B4(&qword_10028B9F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v32);
      v22 = ObjectIdentifier.hashValue.getter(v21);
      Hasher._combine(_:)(v22);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1001F4120(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000080B4(&qword_1002927F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1001F43FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_100299780);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_39;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v40 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v38 = v2;
  v39 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v21 >= v39)
      goto LABEL_35;
    v22 = v40[v21];
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v39)
        goto LABEL_35;
      v22 = v40[v17];
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v39)
          goto LABEL_35;
        v22 = v40[v17];
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = v8;
    v25 = *(_QWORD *)(v8 + 48);
    v26 = *(_QWORD *)(v41 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 32);
    v27(v7, v25 + v26 * v20, v4);
    v28 = *(_QWORD *)(v10 + 40);
    v29 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v4, v29);
    v30 = -1 << *(_BYTE *)(v10 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(_QWORD *)(v10 + 48) + v18 * v26, v7, v4);
    ++*(_QWORD *)(v10 + 16);
    v8 = v24;
  }
  v23 = v21 + 3;
  if (v23 < v39)
  {
    v22 = v40[v23];
    if (!v22)
    {
      while (1)
      {
        v17 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_41;
        if (v17 >= v39)
          goto LABEL_35;
        v22 = v40[v17];
        ++v23;
        if (v22)
          goto LABEL_25;
      }
    }
    v17 = v23;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v8);
  v2 = v38;
  v37 = 1 << *(_BYTE *)(v8 + 32);
  if (v37 > 63)
    bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v40 = -1 << v37;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_39:
  result = swift_release(v8);
  *v2 = v10;
  return result;
}

uint64_t sub_1001F4768(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_13;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001F3E64(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1001F4C54();
      goto LABEL_13;
    }
    sub_1001F51D0(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  v10 = ObjectIdentifier.hashValue.getter(v5);
  Hasher._combine(_:)(v10);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for CustodianRecoverySession(0);
    v12 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v12 + 8 * a2) == v5)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(result);
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v11;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v12 + 8 * a2) == v5)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void sub_1001F48B8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1001F4120(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_1001F4DFC();
      goto LABEL_22;
    }
    sub_1001F545C(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_1001F4A50(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v31 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_12;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1001F43FC(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_1001F4FAC();
      goto LABEL_12;
    }
    sub_1001F5708(v13);
  }
  v14 = *v3;
  v15 = *(_QWORD *)(*v3 + 40);
  v16 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v6, v16);
  v18 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v21(v10, *(_QWORD *)(v14 + 48) + v20 * a2, v6);
      v22 = sub_100005150(&qword_10028CC98, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v31, v6, v22);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      if ((v23 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v19;
    }
    while (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v24 = v31;
  v25 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v25 + 48) + *(_QWORD *)(v7 + 72) * a2, v24, v6);
  v27 = *(_QWORD *)(v25 + 16);
  v28 = __OFADD__(v27, 1);
  v29 = v27 + 1;
  if (!v28)
  {
    *(_QWORD *)(v25 + 16) = v29;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_1001F4C54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1000080B4(&qword_10028B9F8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)swift_retain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1001F4DFC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_1000080B4(&qword_1002927F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_1001F4FAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  uint64_t v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000080B4(&qword_100299780);
  v7 = *v0;
  v8 = static _SetStorage.copy(original:)(*v0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release(v7);
LABEL_30:
    *v1 = v9;
    return result;
  }
  v26 = v1;
  result = (void *)(v8 + 56);
  v11 = v7 + 56;
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 56 + 8 * v12)
    result = memmove(result, (const void *)(v7 + 56), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 56);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v18)
        goto LABEL_28;
      v23 = *(_QWORD *)(v11 + 8 * v14);
      if (!v23)
      {
        v14 = v22 + 2;
        if (v22 + 2 >= v18)
          goto LABEL_28;
        v23 = *(_QWORD *)(v11 + 8 * v14);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v17 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v21, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v21, v6, v2);
  }
  v24 = v22 + 3;
  if (v24 >= v18)
  {
LABEL_28:
    result = (void *)swift_release(v7);
    v1 = v26;
    goto LABEL_30;
  }
  v23 = *(_QWORD *)(v11 + 8 * v24);
  if (v23)
  {
    v14 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v18)
      goto LABEL_28;
    v23 = *(_QWORD *)(v11 + 8 * v14);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Int sub_1001F51D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000080B4(&qword_10028B9F8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    Hasher.init(_seed:)(v32);
    v22 = swift_retain(v21);
    v23 = ObjectIdentifier.hashValue.getter(v22);
    Hasher._combine(_:)(v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_1001F545C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_1000080B4(&qword_1002927F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1001F5708(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_1000080B4(&qword_100299780);
  v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = swift_release(v9);
LABEL_37:
    *v2 = v11;
    return result;
  }
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 56);
  v36 = v2;
  v37 = v9 + 56;
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 56;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v22 >= v38)
      goto LABEL_35;
    v23 = *(_QWORD *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_35;
      v23 = *(_QWORD *)(v37 + 8 * v18);
      if (!v23)
      {
        v18 = v22 + 2;
        if (v22 + 2 >= v38)
          goto LABEL_35;
        v23 = *(_QWORD *)(v37 + 8 * v18);
        if (!v23)
          break;
      }
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_26:
    v25 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(_QWORD *)(v9 + 48) + v25 * v21, v4);
    v26 = *(_QWORD *)(v11 + 40);
    v27 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v26, v4, v27);
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v11 + 48) + v19 * v25, v8, v4);
    ++*(_QWORD *)(v11 + 16);
  }
  v24 = v22 + 3;
  if (v24 >= v38)
  {
LABEL_35:
    result = swift_release_n(v9, 2);
    v2 = v36;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
  {
    v18 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v18 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v18 >= v38)
      goto LABEL_35;
    v23 = *(_QWORD *)(v37 + 8 * v18);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001F5A30(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[3];
  uint64_t v56;

  v52 = a2;
  v50 = a1;
  v3 = *v2;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v42 - v11;
  v13 = sub_1000080B4(&qword_10028C448);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028E8C8);
  v47 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v23 = Logger.logObject.getter(v22);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = os_log_type_enabled(v23, v25);
  v53 = v5;
  if (v26)
  {
    v43 = v3;
    v44 = v9;
    v45 = v12;
    v46 = v4;
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v55[0] = v28;
    *(_DWORD *)v27 = 136315138;
    if (qword_10028AEF8 != -1)
      swift_once(&qword_10028AEF8, sub_1001E8F94);
    v29 = qword_100299400;
    v30 = *(_QWORD *)algn_100299408;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100299408);
    v54 = sub_1001DEF4C(v29, v30, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s - started.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    v12 = v45;
    v4 = v46;
    v3 = v43;
    v9 = v44;
  }
  else
  {

  }
  v31 = v51;
  v32 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v20, v51 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__idmsHandler, v17);
  Dependency.wrappedValue.getter(v55, v17);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v17);
  sub_10000732C(v55, v56);
  sub_100138D84();
  sub_100006F58(v55);
  v34 = v48;
  v33 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v16, v31 + OBJC_IVAR____TtC13appleaccountd25CustodianOwnerHealthCheck__custodianStorage, v49);
  Dependency.wrappedValue.getter(v55, v33);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v33);
  v35 = sub_10000732C(v55, v56);
  v36 = (_QWORD *)swift_allocObject(&unk_10026F850, 48, 7);
  v37 = v50;
  v36[2] = v31;
  v36[3] = v37;
  v38 = v52;
  v36[4] = v52;
  v36[5] = v3;
  v39 = sub_10000732C((_QWORD *)(*v35 + 16), *(_QWORD *)(*v35 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v31);
  swift_retain(v38);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v40 = *(void (**)(char *, uint64_t))(v53 + 8);
  v40(v9, v4);
  sub_10000732C((_QWORD *)(*v39 + 16), *(_QWORD *)(*v39 + 40));
  sub_10009D320((uint64_t)v12, (uint64_t)sub_1001F5E6C, (uint64_t)v36);
  v40(v12, v4);
  swift_release(v36);
  return sub_100006F58(v55);
}

uint64_t sub_1001F5E64()
{
  return sub_10005D988(48);
}

uint64_t sub_1001F5E6C(uint64_t a1, char a2)
{
  uint64_t *v2;

  return sub_1001E920C(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001F5E7C()
{
  return sub_1001F5EE4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1001F5E88()
{
  uint64_t *v0;

  return sub_1001EA6EC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1001F5E98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001F5ECC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001EA778(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001F5ED8()
{
  return sub_1001F5EE4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1001F5EE4(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[2]);
  swift_release(v1[3]);
  a1(v1[4]);
  swift_release(v1[6]);
  return swift_deallocObject(v1, 56, 7);
}

uint64_t sub_1001F5F2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EA8B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t sub_1001F5F3C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v13));
  swift_release(*(_QWORD *)(v0 + v14));
  return swift_deallocObject(v0, ((v14 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001F60B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001E9FF8(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001F612C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1001F6298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001EA368(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(void))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001F62F0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001F6450(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8) + 80);
  return sub_1001EAA48(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1001F64A8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F64CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v26 + ((v3 + 40) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, ((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001F67A4(int a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001EB70C(a1, a2, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + v7), *(uint64_t *)((char *)v2 + v7 + 8));
}

void sub_1001F6830(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1001F1108(a1, v4, v2 + v6, *(void (**)(_QWORD, _QWORD))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_1001F68A4(uint64_t a1)
{
  return sub_1001F6BA0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))sub_1001EBF20);
}

uint64_t sub_1001F68B4(uint64_t a1)
{
  return sub_1001F6BA0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))sub_1001ECC04);
}

uint64_t sub_1001F68C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v4 = v0 + ((v3 + 40) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v26 + ((v3 + 40) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, v24 + 16, v3 | 7);
}

uint64_t sub_1001F6B94(uint64_t a1)
{
  return sub_1001F6BA0(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))sub_1001EDEC0);
}

uint64_t sub_1001F6BA0(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  char *v6;

  v4 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = &v2[(*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[v5], *(_QWORD *)v6, *((_QWORD *)v6 + 1));
}

uint64_t sub_1001F6C10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001EFC54(a1, v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001F6C70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F6C8C(uint64_t a1)
{
  return sub_1001F80B0(a1, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))sub_1001E78D0);
}

uint64_t sub_1001F6CA0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v13));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v3 | 7);
}

uint64_t sub_1001F6E30()
{
  return sub_1001F8014(type metadata accessor for CustodianRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E8B5C);
}

uint64_t sub_1001F6E50()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001F07F4(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001F6EB4(uint64_t a1)
{
  return sub_1001F7A68(a1, type metadata accessor for CustodianshipRecords, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1001F1FFC);
}

uint64_t sub_1001F6ECC(uint64_t a1)
{
  return sub_1001F7A68(a1, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1001F19E0);
}

uint64_t sub_1001F6EE0()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F6EE8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for CustodianRecord, &qword_10028D5D0, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E664);
}

uint64_t sub_1001F6F1C()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F6F24(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for CustodianRecoveryInfoRecord, &qword_100293AB0, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E39C);
}

uint64_t sub_1001F6F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v28 = *(_QWORD *)(v2 + 64);
  v29 = (v3 + 16) & ~v3;
  v4 = v0 + v29;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v29, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v0 + v29 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v29 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v29 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v29 + v8[8] + 8));
  v9 = (uint64_t *)(v0 + v29 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v28 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v24));
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  swift_release(*(_QWORD *)(v0 + v26));
  return swift_deallocObject(v0, ((v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001F723C(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001F262C(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(uint64_t (**)(_QWORD))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001F72DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  v27 = (v3 + 16) & ~v3;
  v4 = v0 + v27;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v27, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v0 + v27 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v27 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v27 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v27 + v8[8] + 8));
  v9 = (uint64_t *)(v0 + v27 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v26 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, ((v24 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001F75A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v27 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v24));
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  return swift_deallocObject(v0, v25 + 16, v3 | 7);
}

uint64_t sub_1001F787C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001F092C(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001F78E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1001F7A54(uint64_t a1)
{
  return sub_1001F7A68(a1, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_1001F322C);
}

uint64_t sub_1001F7A68(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, v3 + v6, *(_QWORD *)(v3 + v7), *(_QWORD *)(v3 + v7 + 8), *(_QWORD *)(v3 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001F7AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v3;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v4);
}

uint64_t sub_1001F7B78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F7B8C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1001F7D00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001F023C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(_QWORD))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001F7D70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F7D94()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7D9C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for CustodianHealthRecord, &qword_10028D5B8, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E35C);
}

uint64_t sub_1001F7DD0()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7DD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for CustodianshipInfoRecord, &qword_10028C450, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E724);
}

uint64_t sub_1001F7E0C()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7E14(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for InheritanceHealthRecord, (uint64_t *)&unk_100295390, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E6A4);
}

uint64_t sub_1001F7E48()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7E50(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for BenefactorInfoRecord, (uint64_t *)&unk_10028FA40, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E7E4);
}

uint64_t sub_1001F7E84()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7E8C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for BeneficiaryInfoRecord, &qword_100295630, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E864);
}

uint64_t sub_1001F7EC0()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F7EC8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E624C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for InheritanceInvitationRecord, (uint64_t *)&unk_10028FA70, (void (*)(char *, _QWORD, uint64_t, void (*)(_QWORD), uint64_t))sub_10004E6E4);
}

uint64_t sub_1001F7EFC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = v0 + v4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v9 + v1[5], v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v9 + v1[8]), *(_QWORD *)(v9 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_1001F8000()
{
  return sub_1001F8014(type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E8724);
}

uint64_t sub_1001F8014(uint64_t (*a1)(_QWORD), uint64_t (*a2)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(a1(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return a2(v2 + v4, *(_QWORD *)(v2 + v5), *(_QWORD *)(v2 + v6), *(_QWORD *)(v2 + v6 + 8), *(_QWORD *)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001F8098(uint64_t a1)
{
  return sub_1001F80B0(a1, type metadata accessor for CustodianshipInfoRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))sub_1001E69E4);
}

uint64_t sub_1001F80B0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, char *, _QWORD, _QWORD))
{
  char *v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = &v3[(*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8];
  return a3(a1, *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3), *((_QWORD *)v3 + 4), *((_QWORD *)v3 + 5), &v3[v6], *(_QWORD *)v7, *((_QWORD *)v7 + 1));
}

uint64_t sub_1001F811C()
{
  return sub_10005D988(40);
}

uint64_t sub_1001F8124(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E6614(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001F8144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a1;
  v30 = a3;
  v31 = a4;
  v32 = type metadata accessor for InheritanceInvitationRecord(0);
  v6 = *(_QWORD *)(v32 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v32, v8);
  v10 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v27 - v12;
  v14 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = swift_allocObject(&unk_100270018, 24, 7);
  swift_weakInit(v18 + 16, v4);
  sub_100027FE8(v29, (uint64_t)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceInvitationResponseMessage);
  v19 = a2;
  sub_100027FE8(a2, (uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
  v20 = *(unsigned __int8 *)(v15 + 80);
  v21 = (v20 + 40) & ~v20;
  v22 = *(unsigned __int8 *)(v6 + 80);
  v23 = (v16 + v22 + v21) & ~v22;
  v24 = (_QWORD *)swift_allocObject(&unk_100270040, v23 + v7, v20 | v22 | 7);
  v25 = v31;
  v24[2] = v30;
  v24[3] = v25;
  v24[4] = v18;
  sub_10003B730((uint64_t)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v24 + v21, type metadata accessor for InheritanceInvitationResponseMessage);
  sub_10003B730((uint64_t)v13, (uint64_t)v24 + v23, type metadata accessor for InheritanceInvitationRecord);
  sub_100027FE8(v19, (uint64_t)v10, type metadata accessor for InheritanceInvitationRecord);
  *(_QWORD *)&v10[*(int *)(v32 + 32)] = 4;
  sub_10000732C((_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 40));
  swift_retain(v25);
  swift_retain(v18);
  sub_1000C993C((uint64_t)v10, (uint64_t)sub_1001F8EA8, (uint64_t)v24);
  sub_100028388((uint64_t)v10, type metadata accessor for InheritanceInvitationRecord);
  swift_release(v18);
  return swift_release(v24);
}

uint64_t sub_1001F8350(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Strong;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(uint64_t);
  void (**v49)(uint64_t);
  void (*v50)(uint64_t);
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);
  void (*v59)(uint64_t);
  char v60[24];
  uint64_t v61[5];
  uint64_t v62;
  uint64_t v63;

  v54 = a6;
  v52 = a5;
  v58 = a2;
  v59 = a3;
  v8 = type metadata accessor for InheritanceInvitationRecord(0);
  v53 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v53 + 64);
  __chkstk_darwin(v8, v10);
  v55 = (uint64_t)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v16 - 8);
  v57 = v16;
  __chkstk_darwin(v16, v17);
  v19 = (char *)v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v20, v21);
  v23 = (_QWORD *)((char *)v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013016C(a1, (uint64_t)v23);
  if (swift_getEnumCaseMultiPayload(v23, v20) == 1)
  {
    v24 = *v23;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v25 = type metadata accessor for Logger(0);
    sub_100005288(v25, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v24);
    v26 = swift_errorRetain(v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v61[0] = v30;
      *(_DWORD *)v29 = 136315138;
      v62 = v24;
      swift_errorRetain(v24);
      v31 = sub_1000080B4(&qword_10028E850);
      v32 = String.init<A>(describing:)(&v62, v31);
      v34 = v33;
      v62 = sub_1001DEF4C(v32, v33, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v34);
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to update invitation with error : %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }

    swift_errorRetain(v24);
    v58(v24);
    swift_errorRelease(v24);
    return swift_errorRelease(v24);
  }
  else
  {
    v35 = a4 + 16;
    sub_1001F8F18((uint64_t)v23);
    swift_beginAccess(v35, &v62, 0, 0);
    result = swift_weakLoadStrong(v35);
    if (result)
    {
      v37 = result;
      sub_100006CA4(result + 56, (uint64_t)v61);
      swift_release(v37);
      v51[1] = sub_10000732C(v61, v61[3]);
      v38 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v19, v52 + *(int *)(v11 + 20), v57);
      v39 = swift_allocObject(&unk_100270018, 24, 7);
      swift_beginAccess(v35, v60, 0, 0);
      Strong = swift_weakLoadStrong(v35);
      swift_weakInit(v39 + 16, Strong);
      swift_release(Strong);
      sub_100027FE8(v38, (uint64_t)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceInvitationResponseMessage);
      v41 = v55;
      sub_100027FE8(v54, v55, type metadata accessor for InheritanceInvitationRecord);
      v42 = *(unsigned __int8 *)(v12 + 80);
      v43 = (v42 + 16) & ~v42;
      v44 = *(unsigned __int8 *)(v53 + 80);
      v45 = (v13 + v44 + v43) & ~v44;
      v46 = (v9 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
      v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
      v48 = (void (*)(uint64_t))swift_allocObject(&unk_100270068, v47 + 16, v42 | v44 | 7);
      sub_10003B730((uint64_t)v15, (uint64_t)v48 + v43, type metadata accessor for InheritanceInvitationResponseMessage);
      sub_10003B730(v41, (uint64_t)v48 + v45, type metadata accessor for InheritanceInvitationRecord);
      *(_QWORD *)((char *)v48 + v46) = v39;
      v49 = (void (**)(uint64_t))((char *)v48 + v47);
      v50 = v59;
      *v49 = v58;
      v49[1] = v50;
      swift_retain(v39);
      swift_retain(v50);
      sub_1001825FC((uint64_t)v19, 0, 0, (void (*)(uint64_t))sub_1001F90A0, v48);
      swift_release(v48);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v19, v57);
      swift_release(v39);
      return sub_100006F58(v61);
    }
  }
  return result;
}

uint64_t sub_1001F8828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _UNKNOWN **v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t Strong;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[4];
  char v56[24];
  __int128 v57[3];

  v52 = a6;
  v53 = a2;
  v10 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &off_10028A000;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v50 = v10;
      v19 = swift_slowAlloc(12, -1);
      v51 = a5;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v57[0] = v21;
      v49 = a3;
      *(_DWORD *)v20 = 136315138;
      v54 = a1;
      swift_errorRetain(a1);
      v22 = sub_1000080B4(&qword_10028E850);
      v23 = String.init<A>(describing:)(&v54, v22);
      v24 = a4;
      v26 = v25;
      v54 = sub_1001DEF4C(v23, v25, (uint64_t *)v57);
      a3 = v49;
      v10 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
      v27 = v26;
      a4 = v24;
      v14 = &off_10028A000;
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cleanup Beneficiary completed with error : %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      v28 = v20;
      a5 = v51;
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(a1);
      goto LABEL_12;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A89F0);
    v17 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.info.getter(v17);
    if (os_log_type_enabled(v17, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v31, "Successfully completed cleanup Beneficiary.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }
  }

LABEL_12:
  v33 = a4 + 16;
  if (v14[442] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_100005288(v34, (uint64_t)qword_1002A89F0);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Posting CFU...", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  v39 = &v13[*(int *)(sub_1000080B4(&qword_100295030) + 48)];
  v40 = v53 + *(int *)(type metadata accessor for InheritanceInvitationResponseMessage(0) + 20);
  v41 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v13, v40, v41);
  v42 = (_QWORD *)(a3 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 20));
  v43 = v42[1];
  *(_QWORD *)v39 = *v42;
  *((_QWORD *)v39 + 1) = v43;
  swift_storeEnumTagMultiPayload(v13, v10, 8);
  swift_beginAccess(v33, v56, 0, 0);
  Strong = swift_weakLoadStrong(v33);
  if (Strong)
  {
    v45 = Strong;
    sub_100006CA4(Strong + 96, (uint64_t)&v54);
    swift_bridgeObjectRetain(v43);
    swift_release(v45);
    sub_10000732C(&v54, v55[2]);
    sub_100171484((uint64_t)v57);
    v46 = swift_allocObject(&unk_100270090, 32, 7);
    *(_QWORD *)(v46 + 16) = a5;
    v47 = v52;
    *(_QWORD *)(v46 + 24) = v52;
    swift_retain(v47);
    sub_1001CEA64(v57);
    swift_release(v46);
    sub_100043418((uint64_t)v57);
    sub_100028388((uint64_t)v13, type metadata accessor for TrustedContactUserNotification);
    return sub_100006F58(&v54);
  }
  else
  {
    swift_bridgeObjectRetain(v43);
    return sub_100028388((uint64_t)v13, type metadata accessor for TrustedContactUserNotification);
  }
}

uint64_t type metadata accessor for BeneficiaryDeclinedStatusHandler()
{
  return objc_opt_self(_TtC13appleaccountd32BeneficiaryDeclinedStatusHandler);
}

uint64_t sub_1001F8D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F8144(a1, a2, a3, a4);
}

uint64_t sub_1001F8D5C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F8D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);

  v1 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v12 = v0 + *(int *)(v1 + 20) + v4;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(v0 + v9, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[7] + 8));
  v14(v0 + v9 + v6[9], v13);
  sub_10000F494(*(_QWORD *)(v0 + v9 + v6[10]), *(_QWORD *)(v0 + v9 + v6[10] + 8));
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001F8EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationResponseMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8) + 80);
  return sub_1001F8350(a1, *(void (**)(uint64_t))(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_1001F8F18(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F8F58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v1 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = v0 + *(int *)(v1 + 20) + v4;
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  v15(v0 + v9, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + v6[7] + 8));
  v15(v0 + v9 + v6[9], v14);
  sub_10000F494(*(_QWORD *)(v0 + v9 + v6[10]), *(_QWORD *)(v0 + v9 + v6[10] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, v12 + 16, v10);
}

uint64_t sub_1001F90A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationResponseMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001F8828(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001F912C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F9150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F971C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001F9178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001F971C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001F91A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F91F0()
{
  return type metadata accessor for CustodianInvitationMessage(0);
}

uint64_t type metadata accessor for CustodianInvitationMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100299870;
  if (!qword_100299870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianInvitationMessage);
  return result;
}

uint64_t sub_1001F9234(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100222900;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F92AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  char v22;
  char v23;
  char v24;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v21[0] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_100299938);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10000732C(a1, v13);
  v15 = sub_1001F971C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianInvitationMessage.CodingKeys, &type metadata for CustodianInvitationMessage.CodingKeys, v15, v13, v14);
  v24 = *(_BYTE *)(v2 + 16);
  v23 = 0;
  v16 = sub_100025CE0();
  v17 = v21[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v8, &type metadata for MessageType, v16);
  if (!v17)
  {
    v18 = v21[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v21[0] + 16))(v7, v2 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v4);
    v22 = 1;
    v19 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v7, &v22, v8, v4, v19);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1001F946C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_100299928);
  v8 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v27 = a1;
  sub_10000732C(a1, v13);
  v14 = sub_1001F971C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianInvitationMessage.CodingKeys, &type metadata for CustodianInvitationMessage.CodingKeys, v14, v13, v12);
  if (v1)
  {
    v22 = v28;
    v19 = v27;
    v20 = type metadata accessor for CustodianInvitationMessage(0);
    swift_deallocPartialClassInstance(v22, v20, *(unsigned int *)(*(_QWORD *)v22 + 48), *(unsigned __int16 *)(*(_QWORD *)v22 + 52));
    v24 = v19;
  }
  else
  {
    v15 = v8;
    v16 = v7;
    v25 = v4;
    v30 = 0;
    v17 = sub_100025C9C();
    v18 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for MessageType, &v30, v26, &type metadata for MessageType, v17);
    v22 = v28;
    *(_BYTE *)(v28 + 16) = v31;
    v29 = 1;
    v23 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v3, &v29, v18, v3, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v18);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v22 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v16, v3);
    v24 = v27;
  }
  sub_100006F58(v24);
  return v22;
}

uint64_t sub_1001F96A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for CustodianInvitationMessage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_1001F946C(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_1001F96FC(_QWORD *a1)
{
  return sub_1001F92AC(a1);
}

unint64_t sub_1001F971C()
{
  unint64_t result;

  result = qword_100299930;
  if (!qword_100299930)
  {
    result = swift_getWitnessTable(&unk_100222A2C, &type metadata for CustodianInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299930);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CustodianInvitationMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001F97AC + 4 * byte_1002228B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001F97E0 + 4 * byte_1002228B0[v4]))();
}

uint64_t sub_1001F97E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F97E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F97F0);
  return result;
}

uint64_t sub_1001F97FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F9804);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001F9808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F9810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianInvitationMessage.CodingKeys()
{
  return &type metadata for CustodianInvitationMessage.CodingKeys;
}

unint64_t sub_1001F9830()
{
  unint64_t result;

  result = qword_100299940;
  if (!qword_100299940)
  {
    result = swift_getWitnessTable(&unk_100222A04, &type metadata for CustodianInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299940);
  }
  return result;
}

unint64_t sub_1001F9878()
{
  unint64_t result;

  result = qword_100299948;
  if (!qword_100299948)
  {
    result = swift_getWitnessTable(&unk_100222974, &type metadata for CustodianInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299948);
  }
  return result;
}

unint64_t sub_1001F98C0()
{
  unint64_t result;

  result = qword_100299950;
  if (!qword_100299950)
  {
    result = swift_getWitnessTable(&unk_10022299C, &type metadata for CustodianInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299950);
  }
  return result;
}

uint64_t sub_1001F9904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(char *, char *, uint64_t);
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t result;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;

  v62 = a8;
  v59 = a3;
  v60 = a5;
  v55 = a2;
  v56 = a4;
  v61 = a6;
  v13 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v23 = a9 + v22[11];
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v54(v23, 1, 1, v17);
  v24 = (_QWORD *)(a9 + v22[12]);
  *v24 = 0;
  v24[1] = 0;
  v57 = v24;
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v25(a9, a1, v17);
  v25(a9 + v22[5], a1 + v22[5], v17);
  v26 = v22[6];
  v27 = *(_QWORD *)(a1 + v26);
  v28 = *(_QWORD *)(a1 + v26 + 8);
  v29 = (_QWORD *)(a9 + v26);
  *v29 = v27;
  v29[1] = v28;
  v58 = a7;
  sub_1000144EC(a7, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    swift_bridgeObjectRetain(v28);
    sub_100013AAC((uint64_t)v16);
    sub_100014548(a1 + v22[11], v23);
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v30(v21, v16, v17);
    swift_bridgeObjectRetain(v28);
    sub_100013AAC(v23);
    v30((char *)v23, v21, v17);
    v54(v23, 0, 1, v17);
  }
  v31 = v61;
  if (v61 == 2 || ((((v61 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v22[10])) & 1) != 0)
  {
    sub_100013AAC(v58);
    v32 = v22[9];
    v33 = *(_QWORD *)(a1 + v32);
    v34 = *(_QWORD *)(a1 + v32 + 8);
    v35 = (uint64_t *)(a9 + v32);
    *v35 = v33;
    v35[1] = v34;
    sub_10000F450(v33, v34);
  }
  else
  {
    sub_100013AAC(v58);
    *(_OWORD *)(a9 + v22[9]) = xmmword_100218E90;
  }
  v36 = v22[7];
  v37 = v59;
  if (v59 >> 60 == 15)
  {
    v38 = *(_QWORD *)(a1 + v36);
    v39 = *(_QWORD *)(a1 + v36 + 8);
    v40 = (uint64_t *)(a9 + v36);
    *v40 = v38;
    v40[1] = v39;
    sub_10000F450(v38, v39);
  }
  else
  {
    v41 = (_QWORD *)(a9 + v36);
    *v41 = v55;
    v41[1] = v37;
  }
  v42 = v60;
  v43 = v22[8];
  if (v60 >> 60 == 15)
  {
    v44 = *(_QWORD *)(a1 + v43);
    v45 = *(_QWORD *)(a1 + v43 + 8);
    v46 = (uint64_t *)(a9 + v43);
    *v46 = v44;
    v46[1] = v45;
    sub_100014534(v44, v45);
  }
  else
  {
    v47 = (_QWORD *)(a9 + v43);
    *v47 = v56;
    v47[1] = v42;
  }
  v48 = a10;
  if (v31 == 2)
  {
    *(_BYTE *)(a9 + v22[10]) = *(_BYTE *)(a1 + v22[10]);
    v49 = v62;
    if (!a10)
      goto LABEL_18;
  }
  else
  {
    *(_BYTE *)(a9 + v22[10]) = v31 & 1;
    v49 = v62;
    if (!a10)
    {
LABEL_18:
      v50 = (uint64_t *)(a1 + v22[12]);
      v49 = *v50;
      v48 = v50[1];
      swift_bridgeObjectRetain(v48);
    }
  }
  sub_1001FBD3C(a1);
  v51 = v57;
  result = swift_bridgeObjectRelease(v57[1]);
  *v51 = v49;
  v51[1] = v48;
  return result;
}

uint64_t sub_1001F9C24@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  id v51;
  NSString v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  NSObject **v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t result;
  NSString v72;
  id v73;
  NSString v74;
  id v75;
  NSString v76;
  id v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  NSObject **v86;
  NSObject *v87;
  const char *v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  char *v100;
  uint64_t v101;
  NSString v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  void (*v111)(uint64_t, char *, uint64_t);
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  NSString v117;
  id v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t *v122;
  id v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  id v135;
  char *v136;
  char *v137;
  int *v138;
  uint64_t v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;

  v140 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v7 = __chkstk_darwin(v5, v6);
  v137 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v131 - v11;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v131 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v136 = (char *)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v141 = (char *)&v131 - v23;
  __chkstk_darwin(v22, v24);
  v142 = (char *)&v131 - v25;
  v26 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v27 = *(uint64_t (**)(void))(v17 + 56);
  v144 = a3 + *(int *)(v26 + 44);
  v146 = v16;
  v28 = v27();
  v138 = (int *)v26;
  v139 = a3;
  v29 = (_QWORD *)(a3 + *(int *)(v26 + 48));
  *v29 = 0;
  v29[1] = 0;
  v145 = v29;
  v30 = CKRecord.recordType.getter(v28);
  v32 = v31;
  if (v30 == 0xD00000000000001BLL && v31 == 0x8000000100222B10)
  {
    swift_bridgeObjectRelease(0x8000000100222B10);
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0xD00000000000001BLL, 0x8000000100222B10, 0);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for AACustodianError(0);
      v44 = v43;
      v149 = -7005;
      v45 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v46 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v47 = _BridgedStoredNSError.init(_:userInfo:)(&v147, &v149, v45, v44, v46);
      swift_willThrow(v47);

      v49 = v144;
      v48 = v145;
LABEL_18:
      sub_100013AAC(v49);
      return swift_bridgeObjectRelease(v48[1]);
    }
  }
  v34 = objc_msgSend(a1, "recordID");
  v35 = objc_msgSend(v34, "recordName");

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v143 = v17;
  v38 = v37;

  UUID.init(uuidString:)(v36, v38);
  v39 = v38;
  v40 = v143;
  swift_bridgeObjectRelease(v39);
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v146;
  if (v41(v15, 1, v146) == 1)
  {
    sub_100013AAC((uint64_t)v15);
    goto LABEL_7;
  }
  v50 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  v50(v142, v15, v42);
  v51 = objc_msgSend(a1, "encryptedValues");
  v52 = String._bridgeToObjectiveC()();
  v135 = v51;
  v53 = objc_msgSend(v51, "objectForKeyedSubscript:", v52);

  if (!v53
    || (v149 = (uint64_t)v53,
        v54 = sub_1000080B4(&qword_10028DB30),
        (swift_dynamicCast(&v147, &v149, v54, &type metadata for String, 6) & 1) == 0))
  {
LABEL_12:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v57 = type metadata accessor for Logger(0);
    sub_100005288(v57, (uint64_t)qword_1002A89D8);
    v58 = a1;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v61 = 138412290;
      v147 = (uint64_t)v58;
      v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v62 = v58;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Missing CustodianID - %@", v61, 0xCu);
      v64 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v62, 1, v64);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {

      v59 = v58;
    }
    v65 = v143;
    v49 = v144;
    v48 = v145;

    type metadata accessor for AACustodianError(0);
    v67 = v66;
    v149 = -7005;
    v68 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v69 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v70 = _BridgedStoredNSError.init(_:userInfo:)(&v147, &v149, v68, v67, v69);
    swift_willThrow(v70);
    swift_unknownObjectRelease(v135);

    (*(void (**)(char *, uint64_t))(v65 + 8))(v142, v146);
    goto LABEL_18;
  }
  v55 = v148;
  UUID.init(uuidString:)(v147, v148);
  swift_bridgeObjectRelease(v55);
  v56 = v146;
  if (v41(v12, 1, v146) == 1)
  {
    sub_100013AAC((uint64_t)v12);
    goto LABEL_12;
  }
  v50(v141, v12, v56);
  v72 = String._bridgeToObjectiveC()();
  v73 = objc_msgSend(v135, "objectForKeyedSubscript:", v72);

  if (!v73 || (v149 = (uint64_t)v73, (swift_dynamicCast(&v147, &v149, v54, &type metadata for String, 6) & 1) == 0))
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v81 = type metadata accessor for Logger(0);
    sub_100005288(v81, (uint64_t)qword_1002A89D8);
    v82 = a1;
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v85 = 138412290;
      v147 = (uint64_t)v82;
      v87 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v86 = v82;

      v88 = "Missing Owner AltDSID - %@";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v83, v84, v88, v85, 0xCu);
      v91 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v86, 1, v91);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);
LABEL_37:
      v92 = v143;
      v49 = v144;
      v48 = v145;

      type metadata accessor for AACustodianError(0);
      v94 = v93;
      v149 = -7005;
      v95 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v96 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v97 = _BridgedStoredNSError.init(_:userInfo:)(&v147, &v149, v95, v94, v96);
      swift_willThrow(v97);
      swift_unknownObjectRelease(v135);

      v98 = *(void (**)(char *, uint64_t))(v92 + 8);
      v99 = v146;
      v98(v141, v146);
      v98(v142, v99);
      goto LABEL_18;
    }
LABEL_36:

    v83 = v82;
    goto LABEL_37;
  }
  v133 = v147;
  v134 = v148;
  v74 = String._bridgeToObjectiveC()();
  v75 = objc_msgSend(v135, "objectForKeyedSubscript:", v74);

  if (!v75 || (v149 = (uint64_t)v75, (swift_dynamicCast(&v147, &v149, v54, &type metadata for Data, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v134);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v89 = type metadata accessor for Logger(0);
    sub_100005288(v89, (uint64_t)qword_1002A89D8);
    v82 = a1;
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v85 = 138412290;
      v147 = (uint64_t)v82;
      v90 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148);
      *v86 = v82;

      v88 = "Missing PRK - %@";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  v131 = v148;
  v132 = v147;
  v76 = String._bridgeToObjectiveC()();
  v77 = objc_msgSend(v135, "objectForKeyedSubscript:", v76);

  if (v77)
  {
    v149 = (uint64_t)v77;
    if ((swift_dynamicCast(&v147, &v149, v54, &type metadata for String, 6) & 1) != 0)
    {
      v78 = v148;
      v79 = (uint64_t)v137;
      UUID.init(uuidString:)(v147, v148);
      swift_bridgeObjectRelease(v78);
      v80 = v146;
      if (v41((char *)v79, 1, v146) == 1)
      {
        sub_100013AAC(v79);
      }
      else
      {
        v100 = v136;
        v50(v136, (char *)v79, v80);
        v101 = v144;
        sub_100013AAC(v144);
        v50((char *)v101, v100, v80);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v27)(v101, 0, 1, v80);
      }
    }
  }
  v102 = String._bridgeToObjectiveC()();
  v103 = objc_msgSend(v135, "objectForKeyedSubscript:", v102);

  v104 = v143;
  v106 = v138;
  v105 = v139;
  v107 = v134;
  if (v103)
  {
    v149 = (uint64_t)v103;
    if ((swift_dynamicCast(&v147, &v149, v54, &type metadata for String, 6) & 1) != 0)
    {
      v108 = v147;
      v109 = v148;
      v110 = v145;
      swift_bridgeObjectRelease(v145[1]);
      *v110 = v108;
      v110[1] = v109;
      v107 = v134;
    }
  }
  v111 = *(void (**)(uint64_t, char *, uint64_t))(v104 + 16);
  v112 = v146;
  v111(v105, v142, v146);
  v111(v105 + v106[5], v141, v112);
  v113 = (uint64_t *)(v105 + v106[6]);
  v114 = v132;
  *v113 = v133;
  v113[1] = v107;
  v115 = (uint64_t *)(v105 + v106[7]);
  v116 = v131;
  *v115 = v114;
  v115[1] = v116;
  sub_10000F450(v114, v116);
  v117 = String._bridgeToObjectiveC()();
  v118 = objc_msgSend(v135, "objectForKeyedSubscript:", v117);

  v119 = 0xF000000000000000;
  if (v118)
  {
    v149 = (uint64_t)v118;
    v120 = swift_dynamicCast(&v147, &v149, v54, &type metadata for Data, 6);
    v121 = v147;
    if (v120)
      v119 = v148;
    else
      v121 = 0;
  }
  else
  {
    v121 = 0;
  }
  v122 = (uint64_t *)(v105 + v106[8]);
  *v122 = v121;
  v122[1] = v119;
  v123 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v123);
  objc_msgSend(v123, "finishEncoding");
  v124 = objc_msgSend(v123, "encodedData");
  v125 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v124);
  v127 = v126;
  swift_unknownObjectRelease(v135);

  sub_10000F494(v132, v131);
  v128 = *(void (**)(char *, uint64_t))(v104 + 8);
  v129 = v146;
  v128(v141, v146);
  result = ((uint64_t (*)(char *, uint64_t))v128)(v142, v129);
  v130 = (uint64_t *)(v105 + v106[9]);
  *v130 = v125;
  v130[1] = v127;
  *(_BYTE *)(v105 + v106[10]) = v140 & 1;
  return result;
}

uint64_t sub_1001FA904(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  __int128 v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v59;
  char v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int *v64;
  __int128 v65;
  __int128 v66;
  void *v67;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v61 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v62 = (char *)&v61 - v9;
  v10 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v10);
  CKRecordKeyValueSetting.subscript.getter(&v65, 0x6169646F74737563, 0xEB0000000044496ELL);
  v12 = *((_QWORD *)&v65 + 1);
  v13 = v65;
  v64 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v14 = UUID.uuidString.getter(v64);
  v16 = v15;
  if (!v12)
  {
    v17 = swift_bridgeObjectRelease(v15);
    goto LABEL_7;
  }
  if (v13 != v14 || v12 != v15)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v14, v15, 0);
    swift_bridgeObjectRelease(v12);
    v17 = swift_bridgeObjectRelease(v16);
    if ((v18 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v19 = UUID.uuidString.getter(v17);
    *((_QWORD *)&v66 + 1) = &type metadata for String;
    v67 = &protocol witness table for String;
    *(_QWORD *)&v65 = v19;
    *((_QWORD *)&v65 + 1) = v20;
    CKRecordKeyValueSetting.subscript.setter(&v65, 0x6169646F74737563, 0xEB0000000044496ELL, ObjectType);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v65, 0xD000000000000018, 0x8000000100210B40);
  v21 = *((_QWORD *)&v65 + 1);
  v22 = (unint64_t *)(v1 + v64[6]);
  v24 = *v22;
  v23 = v22[1];
  v63 = v2;
  if (!*((_QWORD *)&v65 + 1))
    goto LABEL_13;
  if (v65 == __PAIR128__(v23, v24))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v65 + 1));
    goto LABEL_14;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, *((_QWORD *)&v65 + 1), v24, v23, 0);
  swift_bridgeObjectRelease(v21);
  if ((v25 & 1) == 0)
  {
LABEL_13:
    *((_QWORD *)&v66 + 1) = &type metadata for String;
    v67 = &protocol witness table for String;
    *(_QWORD *)&v65 = v24;
    *((_QWORD *)&v65 + 1) = v23;
    swift_bridgeObjectRetain(v23);
    CKRecordKeyValueSetting.subscript.setter(&v65, 0xD000000000000018, 0x8000000100210B40, ObjectType);
  }
LABEL_14:
  CKRecordKeyValueSetting.subscript.getter(&v65, 0xD000000000000010, 0x8000000100210B60);
  v26 = v65;
  v27 = (uint64_t *)(v63 + v64[7]);
  v28 = *v27;
  v29 = v27[1];
  sub_10000F450(*v27, v29);
  if (*((_QWORD *)&v26 + 1) >> 60 == 15)
  {
    sub_1000144D8(v26, *((unint64_t *)&v26 + 1));
    sub_1000144D8(v28, v29);
  }
  else
  {
    sub_100014534(v26, *((unint64_t *)&v26 + 1));
    sub_10000EA4C(v26, *((uint64_t *)&v26 + 1));
    v31 = v30;
    sub_10000F494(v28, v29);
    sub_1000144D8(v26, *((unint64_t *)&v26 + 1));
    sub_1000144D8(v26, *((unint64_t *)&v26 + 1));
    if ((v31 & 1) != 0)
      goto LABEL_18;
  }
  *((_QWORD *)&v66 + 1) = &type metadata for Data;
  v67 = &protocol witness table for Data;
  *(_QWORD *)&v65 = v28;
  *((_QWORD *)&v65 + 1) = v29;
  sub_10000F450(v28, v29);
  CKRecordKeyValueSetting.subscript.setter(&v65, 0xD000000000000010, 0x8000000100210B60, ObjectType);
LABEL_18:
  CKRecordKeyValueSetting.subscript.getter(&v65, 0x797265766F636572, 0xEB0000000079654BLL);
  v32 = v65;
  v33 = (uint64_t *)(v63 + v64[8]);
  v35 = *v33;
  v34 = v33[1];
  if (*((_QWORD *)&v65 + 1) >> 60 == 15)
  {
    if (v34 >> 60 == 15)
    {
      v36 = (uint64_t)v62;
      goto LABEL_27;
    }
    sub_100014534(v35, v34);
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    sub_1000144D8(v35, v34);
    v36 = (uint64_t)v62;
LABEL_25:
    *((_QWORD *)&v66 + 1) = &type metadata for Data;
    v67 = &protocol witness table for Data;
    *(_QWORD *)&v65 = v35;
    *((_QWORD *)&v65 + 1) = v34;
    goto LABEL_26;
  }
  sub_100014534(v35, v34);
  if (v34 >> 60 != 15)
  {
    sub_100014534(v32, *((unint64_t *)&v32 + 1));
    sub_10000EA4C(v32, *((uint64_t *)&v32 + 1));
    v38 = v37;
    sub_1000144D8(v35, v34);
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
    v36 = (uint64_t)v62;
    if ((v38 & 1) != 0)
      goto LABEL_27;
    goto LABEL_25;
  }
  sub_1000144D8(v32, *((unint64_t *)&v32 + 1));
  sub_1000144D8(v35, v34);
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  v36 = (uint64_t)v62;
LABEL_26:
  sub_100014534(v35, v34);
  CKRecordKeyValueSetting.subscript.setter(&v65, 0x797265766F636572, 0xEB0000000079654BLL, ObjectType);
LABEL_27:
  CKRecordKeyValueSetting.subscript.getter(&v65, 0x646F74737543746FLL, 0xED000044496E6169);
  v39 = v65;
  v40 = v63 + v64[11];
  sub_1000144EC(v40, v36);
  v41 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v36, 1, v41);
  if ((_DWORD)v44 == 1)
  {
    sub_100013AAC(v36);
    if (!*((_QWORD *)&v39 + 1))
      goto LABEL_41;
    goto LABEL_34;
  }
  v45 = UUID.uuidString.getter(v44);
  v46 = v36;
  v47 = v45;
  v49 = v48;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v41);
  if (!*((_QWORD *)&v39 + 1))
  {
    if (!v49)
      goto LABEL_41;
    goto LABEL_36;
  }
  if (!v49)
  {
LABEL_34:
    v49 = *((_QWORD *)&v39 + 1);
LABEL_36:
    swift_bridgeObjectRelease(v49);
LABEL_37:
    v50 = v61;
    sub_1000144EC(v40, v61);
    v51 = v43(v50, 1, v41);
    if ((_DWORD)v51 == 1)
    {
      sub_100013AAC(v50);
      v65 = 0u;
      v66 = 0u;
      v67 = 0;
    }
    else
    {
      v52 = UUID.uuidString.getter(v51);
      *((_QWORD *)&v66 + 1) = &type metadata for String;
      v67 = &protocol witness table for String;
      *(_QWORD *)&v65 = v52;
      *((_QWORD *)&v65 + 1) = v53;
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v50, v41);
    }
    CKRecordKeyValueSetting.subscript.setter(&v65, 0x646F74737543746FLL, 0xED000044496E6169, ObjectType);
    goto LABEL_41;
  }
  if (v39 == __PAIR128__(v49, v47))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v39 + 1));
    swift_bridgeObjectRelease(v49);
    goto LABEL_41;
  }
  v60 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, *((_QWORD *)&v39 + 1), v47, v49, 0);
  swift_bridgeObjectRelease(*((_QWORD *)&v39 + 1));
  swift_bridgeObjectRelease(v49);
  if ((v60 & 1) == 0)
    goto LABEL_37;
LABEL_41:
  CKRecordKeyValueSetting.subscript.getter(&v65, 0xD000000000000011, 0x800000010020B170);
  v54 = *((_QWORD *)&v65 + 1);
  v55 = (unint64_t *)(v63 + v64[12]);
  v57 = *v55;
  v56 = v55[1];
  if (!*((_QWORD *)&v65 + 1))
  {
    if (!v56)
      return swift_unknownObjectRelease(v10);
    goto LABEL_49;
  }
  if (!v56)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v65 + 1));
    v67 = 0;
    v65 = 0u;
    v66 = 0u;
LABEL_50:
    swift_bridgeObjectRetain(v56);
    CKRecordKeyValueSetting.subscript.setter(&v65, 0xD000000000000011, 0x800000010020B170, ObjectType);
    return swift_unknownObjectRelease(v10);
  }
  if (v65 == __PAIR128__(v56, v57))
  {
    swift_unknownObjectRelease(v10);
    return swift_bridgeObjectRelease(v54);
  }
  v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, *((_QWORD *)&v65 + 1), *v55, v55[1], 0);
  swift_bridgeObjectRelease(v54);
  if ((v59 & 1) == 0)
  {
LABEL_49:
    *((_QWORD *)&v66 + 1) = &type metadata for String;
    v67 = &protocol witness table for String;
    *(_QWORD *)&v65 = v57;
    *((_QWORD *)&v65 + 1) = v56;
    goto LABEL_50;
  }
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_1001FB0F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001FB128 + 4 * byte_100222A80[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_1001FB128()
{
  return 0x6169646F74737563;
}

uint64_t sub_1001FB148()
{
  return 0x646F74737543746FLL;
}

unint64_t sub_1001FB16C()
{
  return 0xD000000000000015;
}

uint64_t sub_1001FB208()
{
  unsigned __int8 *v0;

  return sub_1001FB0F4(*v0);
}

uint64_t sub_1001FB210@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001FCBA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001FB234(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1001FB240(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBD78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FB268(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001FBD78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001FB290@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD v56[2];
  char *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  int *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  __int128 v67;
  char v68;

  v58 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v57 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(char **)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v59 = (char *)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v60 = (_QWORD *)((char *)v56 - v12);
  v13 = sub_1000080B4(&qword_100299978);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(int *)(v20 + 44);
  v62 = v7;
  v63 = &v22[v23];
  v24 = (void (*)(void))*((_QWORD *)v7 + 7);
  v24();
  v61 = (int *)v18;
  v25 = *(int *)(v18 + 48);
  v66 = v22;
  v26 = &v22[v25];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v64 = v26;
  v28 = a1[3];
  v27 = a1[4];
  v29 = a1;
  sub_10000732C(a1, v28);
  v30 = sub_1001FBD78();
  v31 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryInfoRecord.CodingKeys, &type metadata for CustodianRecoveryInfoRecord.CodingKeys, v30, v28, v27);
  if (v31)
  {
    v34 = (uint64_t)v63;
    sub_100006F58(a1);
    v35 = v64;
    sub_100013AAC(v34);
    return swift_bridgeObjectRelease(*((_QWORD *)v35 + 1));
  }
  else
  {
    v32 = v59;
    v56[1] = v24;
    v65 = v14;
    LOBYTE(v67) = 0;
    v33 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v60, v6, &v67, v13, v6, v33);
    v36 = v17;
    v37 = (uint64_t)v66;
    v38 = v60;
    v60 = (_QWORD *)*((_QWORD *)v62 + 4);
    ((void (*)(char *, _QWORD *, uint64_t))v60)(v66, v38, v6);
    LOBYTE(v67) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v6, &v67, v13, v6, v33);
    v39 = v6;
    v56[0] = v33;
    v40 = v61;
    ((void (*)(uint64_t, _QWORD *, uint64_t))v60)(v37 + v61[5], v32, v39);
    LOBYTE(v67) = 3;
    v41 = KeyedDecodingContainer.decode(_:forKey:)(&v67, v13);
    v42 = v29;
    v43 = v13;
    v44 = (uint64_t *)(v37 + v40[6]);
    *v44 = v41;
    v44[1] = v45;
    v68 = 4;
    v46 = sub_10000F40C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for Data, &v68, v13, &type metadata for Data, v46);
    v47 = (uint64_t)v63;
    *(_OWORD *)(v37 + v61[7]) = v67;
    v68 = 5;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v68, v13, &type metadata for Data, v46);
    *(_OWORD *)(v37 + v61[8]) = v67;
    v68 = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for Data, &v68, v13, &type metadata for Data, v46);
    v48 = v61;
    *(_OWORD *)(v37 + v61[9]) = v67;
    LOBYTE(v67) = 7;
    *(_BYTE *)(v37 + v48[10]) = KeyedDecodingContainer.decode(_:forKey:)(&v67, v13) & 1;
    LOBYTE(v67) = 2;
    v49 = (uint64_t)v57;
    v62 = v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v39, &v67, v43, v39, v56[0]);
    v50 = v58;
    sub_100013AEC(v49, v47);
    LOBYTE(v67) = 8;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v67, v43);
    v53 = v52;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v62, v43);
    v54 = (uint64_t *)v64;
    swift_bridgeObjectRelease(*((_QWORD *)v64 + 1));
    *v54 = v51;
    v54[1] = v53;
    sub_1001FBDBC(v37, v50);
    sub_100006F58(v42);
    return sub_1001FBD3C(v37);
  }
}

uint64_t sub_1001FB950(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  char v29;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100299988);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1001FBD78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryInfoRecord.CodingKeys, &type metadata for CustodianRecoveryInfoRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v28) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v28, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
    v16 = v3 + v15[5];
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v28, v5, v13, v14);
    v17 = (uint64_t *)(v3 + v15[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v28, v5);
    v28 = *(_OWORD *)(v3 + v15[7]);
    v29 = 4;
    v27 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, &type metadata for Data, v27);
    v28 = *(_OWORD *)(v3 + v15[8]);
    v29 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, &v29, v5, &type metadata for Data, v27);
    v28 = *(_OWORD *)(v3 + v15[9]);
    v29 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, &type metadata for Data, v27);
    v20 = *(unsigned __int8 *)(v3 + v15[10]);
    LOBYTE(v28) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v28, v5);
    v21 = v3 + v15[11];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v28, v5, v13, v14);
    v22 = (uint64_t *)(v3 + v15[12]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v28) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001FBC40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FB290(a1, a2);
}

uint64_t sub_1001FBC54(_QWORD *a1)
{
  return sub_1001FB950(a1);
}

uint64_t sub_1001FBC68(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100299960, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_100222ABC);
  result = sub_100005150(&qword_10028D5E8, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_100222A94);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1002999E8;
  if (!qword_1002999E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoveryInfoRecord);
  return result;
}

uint64_t sub_1001FBD00(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100299970, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_100222AE4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001FBD3C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001FBD78()
{
  unint64_t result;

  result = qword_100299980;
  if (!qword_100299980)
  {
    result = swift_getWitnessTable(&unk_100222CA8, &type metadata for CustodianRecoveryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299980);
  }
  return result;
}

uint64_t sub_1001FBDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001FBE4C + 4 * byte_100222A8E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001FBE80 + 4 * byte_100222A89[v4]))();
}

uint64_t sub_1001FBE80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FBE88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FBE90);
  return result;
}

uint64_t sub_1001FBE9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FBEA4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001FBEA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FBEB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryInfoRecord.CodingKeys()
{
  return &type metadata for CustodianRecoveryInfoRecord.CodingKeys;
}

char *sub_1001FBECC(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9(&a1[a3[5]], &a2[a3[5]], v7);
    v10 = a3[6];
    v11 = a3[7];
    v12 = &a1[v10];
    v13 = &a2[v10];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = (uint64_t *)&a1[v11];
    v16 = *(_QWORD *)&a2[v11];
    v17 = *(_QWORD *)&a2[v11 + 8];
    swift_bridgeObjectRetain(v14);
    sub_10000F450(v16, v17);
    *v15 = v16;
    v15[1] = v17;
    v18 = a3[8];
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = *((_QWORD *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v23 = *(_QWORD *)v20;
      sub_10000F450(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
      *(_QWORD *)v19 = v23;
      *((_QWORD *)v19 + 1) = v21;
    }
    v24 = a3[9];
    v25 = (uint64_t *)&a1[v24];
    v26 = (uint64_t *)&a2[v24];
    v27 = *v26;
    v28 = v26[1];
    sub_10000F450(*v26, v28);
    v29 = a3[10];
    v30 = a3[11];
    v31 = a2[v29];
    *v25 = v27;
    v25[1] = v28;
    a1[v29] = v31;
    v32 = &a1[v30];
    v33 = &a2[v30];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v30], 1, v7))
    {
      v34 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v9(v32, v33, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v32, 0, 1, v7);
    }
    v35 = a3[12];
    v36 = &a1[v35];
    v37 = &a2[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    swift_bridgeObjectRetain(v38);
  }
  return a1;
}

uint64_t sub_1001FC098(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  sub_10000F494(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
  v7 = (uint64_t *)(a1 + a2[8]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10000F494(*v7, v8);
  sub_10000F494(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
  v9 = a1 + a2[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
    v6(v9, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
}

uint64_t sub_1001FC180(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v9 = a3[6];
  v10 = a3[7];
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (uint64_t *)(a1 + v10);
  v15 = *(_QWORD *)(a2 + v10);
  v16 = *(_QWORD *)(a2 + v10 + 8);
  swift_bridgeObjectRetain(v13);
  sub_10000F450(v15, v16);
  *v14 = v15;
  v14[1] = v16;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_10000F450(*v19, v19[1]);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[9];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10000F450(*v24, v26);
  v27 = a3[10];
  v28 = a3[11];
  v29 = *(_BYTE *)(a2 + v27);
  *v23 = v25;
  v23[1] = v26;
  *(_BYTE *)(a1 + v27) = v29;
  v30 = (void *)(a1 + v28);
  v31 = (const void *)(a2 + v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v28, 1, v6))
  {
    v32 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v30, (uint64_t)v31, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  v33 = a3[12];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = v35[1];
  *v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t sub_1001FC320(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_10000F450(*v16, v18);
  v19 = *v15;
  v20 = v15[1];
  *v15 = v17;
  v15[1] = v18;
  sub_10000F494(v19, v20);
  v21 = a3[8];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = *(_QWORD *)(a2 + v21 + 8);
  if (*(_QWORD *)(a1 + v21 + 8) >> 60 == 15)
  {
    if (v24 >> 60 != 15)
    {
      v25 = *v23;
      sub_10000F450(v25, v24);
      *v22 = v25;
      v22[1] = v24;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v24 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v22);
LABEL_6:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_8;
  }
  v26 = *v23;
  sub_10000F450(v26, v24);
  v27 = *v22;
  v28 = v22[1];
  *v22 = v26;
  v22[1] = v24;
  sub_10000F494(v27, v28);
LABEL_8:
  v29 = a3[9];
  v30 = (uint64_t *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v32 = *v31;
  v33 = v31[1];
  sub_10000F450(*v31, v33);
  v34 = *v30;
  v35 = v30[1];
  *v30 = v32;
  v30[1] = v33;
  sub_10000F494(v34, v35);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v36 = a3[11];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v30) = v39(a1 + v36, 1, v6);
  v40 = v39((uint64_t)v38, 1, v6);
  if (!(_DWORD)v30)
  {
    if (!v40)
    {
      v8((uint64_t)v37, (uint64_t)v38, v6);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v37, v6);
    goto LABEL_13;
  }
  if (v40)
  {
LABEL_13:
    v41 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v37, v38, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
LABEL_14:
  v42 = a3[12];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  return a1;
}

char *sub_1001FC588(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    v14 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *sub_1001FC6AC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t (*v30)(const void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = *(_QWORD *)&a1[v15];
  v17 = *(_QWORD *)&a1[v15 + 8];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  sub_10000F494(v16, v17);
  v18 = a3[8];
  v19 = (uint64_t)&a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a1[v18 + 8];
  if (v21 >> 60 == 15)
    goto LABEL_4;
  v22 = *((_QWORD *)v20 + 1);
  if (v22 >> 60 == 15)
  {
    sub_100071D90(v19);
LABEL_4:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    goto LABEL_6;
  }
  v23 = *(_QWORD *)v19;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *(_QWORD *)(v19 + 8) = v22;
  sub_10000F494(v23, v21);
LABEL_6:
  v24 = a3[9];
  v25 = *(_QWORD *)&a1[v24];
  v26 = *(_QWORD *)&a1[v24 + 8];
  *(_OWORD *)&a1[v24] = *(_OWORD *)&a2[v24];
  sub_10000F494(v25, v26);
  v27 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v31 = v30(&a1[v27], 1, v6);
  v32 = v30(v29, 1, v6);
  if (!v31)
  {
    if (!v32)
    {
      v8(v28, v29, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v28, v6);
    goto LABEL_11;
  }
  if (v32)
  {
LABEL_11:
    v33 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v28, v29, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
LABEL_12:
  v34 = a3[12];
  v35 = &a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v38 = *v36;
  v37 = v36[1];
  v39 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease(v39);
  return a1;
}

uint64_t sub_1001FC8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FC8AC);
}

uint64_t sub_1001FC8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v10 = a1 + *(int *)(a3 + 44);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001FC95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FC968);
}

uint64_t sub_1001FC968(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v12 = a1 + *(int *)(a4 + 44);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1001FCA14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = &unk_100222B78;
    v6[3] = &unk_100222B90;
    v6[4] = &unk_100222BA8;
    v6[5] = &unk_100222B90;
    v6[6] = &unk_100222BC0;
    sub_100015374(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = &unk_100222BD8;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

unint64_t sub_1001FCAD0()
{
  unint64_t result;

  result = qword_100299A48;
  if (!qword_100299A48)
  {
    result = swift_getWitnessTable(&unk_100222C80, &type metadata for CustodianRecoveryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299A48);
  }
  return result;
}

unint64_t sub_1001FCB18()
{
  unint64_t result;

  result = qword_100299A50;
  if (!qword_100299A50)
  {
    result = swift_getWitnessTable(&unk_100222BF0, &type metadata for CustodianRecoveryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299A50);
  }
  return result;
}

unint64_t sub_1001FCB60()
{
  unint64_t result;

  result = qword_100299A58;
  if (!qword_100299A58)
  {
    result = swift_getWitnessTable(&unk_100222C18, &type metadata for CustodianRecoveryInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299A58);
  }
  return result;
}

uint64_t sub_1001FCBA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169)
  {
    v8 = 0xED000044496E6169;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F74737543746FLL, 0xED000044496E6169, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x800000010020C500;
    if (a2 == 0x800000010020C500)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020C500, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100210B60;
    if (a2 == 0x8000000100210B60)
      goto LABEL_30;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100210B60, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x797265766F636572 && a2 == 0xEB0000000079654BLL)
  {
    v11 = 0xEB0000000079654BLL;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797265766F636572, 0xEB0000000079654BLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000010)
  {
    v12 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    v13 = 0x8000000100209670;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010020B170)
  {
    swift_bridgeObjectRelease(0x800000010020B170);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010020B170, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_1001FCF70(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100133D78(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8)
    goto LABEL_24;
  sub_1000080B4(&qword_100292D98);
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001FD0E4(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_100133E98(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001FD234(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_10013428C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[8 * v8 + 32];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  sub_1000080B4(&qword_10028E850);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = *((_QWORD *)v3 + 2);
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    *((_QWORD *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001FD394(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_1001FD458()
{
  uint64_t v0;
  _QWORD *v1;
  _DWORD *v2;
  unint64_t result;

  v0 = type metadata accessor for CloudKitContainerStore();
  v1 = (_QWORD *)swift_allocObject(v0, 40, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *v2 = 0;
  v1[2] = v2;
  v1[3] = sub_1000154A0((uint64_t)&_swiftEmptyArrayStorage);
  result = sub_1000154AC((uint64_t)&_swiftEmptyArrayStorage);
  v1[4] = result;
  qword_1002A8C68 = (uint64_t)v1;
  return result;
}

id sub_1001FD4C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  NSString v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint8_t *v25;
  uint64_t v26;
  os_log_type_t v27;
  const char *v28;
  id v29;
  NSString v30;
  id v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38[3];
  _BYTE v39[24];

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  v6 = (uint64_t *)(v2 + 24);
  swift_beginAccess(v2 + 24, v39, 0, 0);
  v7 = *(_QWORD *)(v2 + 24);
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_5:
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A89A8);
    v12 = swift_bridgeObjectRetain_n(a2, 2);
    v13 = Logger.logObject.getter(v12);
    v15 = static os_log_type_t.default.getter(v14);
    v36 = v5;
    if (os_log_type_enabled(v13, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v38[0] = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain(a2);
      v37 = sub_1001DEF4C(a1, a2, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v13, v15, "Creating CloudKit container named: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v18 = objc_msgSend(objc_allocWithZone((Class)CKContainerOptions), "init");
    objc_msgSend(v18, "setUseZoneWidePCS:", 1);
    v19 = String._bridgeToObjectiveC()();
    objc_msgSend(v18, "setApplicationBundleIdentifierOverrideForPushTopicGeneration:", v19);

    if (qword_10028AF48 != -1)
      swift_once(&qword_10028AF48, sub_1001FE01C);
    v20 = sub_1001FD394(a1, a2, (_QWORD *)qword_1002A8CE0);
    v21 = swift_bridgeObjectRetain_n(a2, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    v24 = os_log_type_enabled(v22, v23);
    if ((v20 & 1) != 0)
    {
      if (v24)
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v38[0] = v26;
        *(_DWORD *)v25 = 136315138;
        swift_bridgeObjectRetain(a2);
        v37 = sub_1001DEF4C(a1, a2, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
        swift_bridgeObjectRelease_n(a2, 3);
        v27 = v23;
        v28 = "Setting useAnonymousToServerShareParticipants to false for container: %s";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v22, v27, v28, v25, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

LABEL_19:
        objc_msgSend(v18, "setUseAnonymousToServerShareParticipants:", (v20 & 1) == 0);
        v29 = objc_allocWithZone((Class)CKContainerID);
        swift_bridgeObjectRetain(a2);
        v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(a2);
        v31 = objc_msgSend(v29, "initWithContainerIdentifier:environment:", v30, 1);

        v32 = objc_msgSend(objc_allocWithZone((Class)CKContainer), "initWithContainerID:options:", v31, v18);
        swift_beginAccess(v6, v38, 33, 0);
        swift_bridgeObjectRetain(a2);
        v10 = v32;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
        v37 = *v6;
        *v6 = 0x8000000000000000;
        sub_10001F704((uint64_t)v10, a1, a2, isUniquelyReferenced_nonNull_native);
        v34 = *v6;
        *v6 = v37;
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v34);
        swift_endAccess(v38);

        v5 = v36;
        goto LABEL_20;
      }
    }
    else if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v38[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(a2);
      v37 = sub_1001DEF4C(a1, a2, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_bridgeObjectRelease_n(a2, 3);
      v27 = v23;
      v28 = "Setting useAnonymousToServerShareParticipants to true for container: %s";
      goto LABEL_17;
    }

    swift_bridgeObjectRelease_n(a2, 2);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v7);
  v8 = sub_10010A9E0(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v7);
    goto LABEL_5;
  }
  v10 = *(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v7);
LABEL_20:
  os_unfair_lock_unlock(v5);
  return v10;
}

objc_class *sub_1001FDA64(uint64_t a1, void *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  objc_class *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28[3];
  _BYTE v29[24];

  v5 = *(os_unfair_lock_s **)(v2 + 16);
  os_unfair_lock_lock(v5);
  v6 = (uint64_t *)(v2 + 32);
  swift_beginAccess(v2 + 32, v29, 0, 0);
  v7 = *(_QWORD *)(v2 + 32);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v7);
    v8 = sub_10010A9E0(a1, (uint64_t)a2);
    if ((v9 & 1) != 0)
    {
      v10 = (objc_class *)*(id *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v7);
      goto LABEL_11;
    }
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v7);
  }
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89A8);
  v12 = swift_bridgeObjectRetain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v28[0] = v17;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(a2);
    v27 = sub_1001DEF4C(a1, (unint64_t)a2, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Creating CloudKit zone named: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  sub_1001FE84C();
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v20 = v19;
  swift_bridgeObjectRetain(a2);
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  v22._countAndFlagsBits = v18;
  v22._object = v20;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v21, v22).super.isa;
  swift_beginAccess(v6, v28, 33, 0);
  swift_bridgeObjectRetain(a2);
  v10 = isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v27 = *v6;
  *v6 = 0x8000000000000000;
  sub_10001FC9C((uint64_t)v10, a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
  v25 = *v6;
  *v6 = v27;
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v25);
  swift_endAccess(v28);
LABEL_11:
  os_unfair_lock_unlock(v5);
  return v10;
}

uint64_t sub_1001FDD54()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD000000000000014, (void *)0x8000000100210CA0);
  qword_1002A8C70 = result;
  *(_QWORD *)algn_1002A8C78 = v1;
  return result;
}

uint64_t sub_1001FDD8C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD00000000000001BLL, (void *)0x8000000100210C80);
  qword_1002A8C80 = result;
  *(_QWORD *)algn_1002A8C88 = v1;
  return result;
}

uint64_t sub_1001FDDC4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD000000000000016, (void *)0x8000000100210C60);
  qword_1002A8C90 = result;
  *(_QWORD *)algn_1002A8C98 = v1;
  return result;
}

uint64_t sub_1001FDDFC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD00000000000001DLL, (void *)0x8000000100210BD0);
  qword_1002A8CA0 = result;
  *(_QWORD *)algn_1002A8CA8 = v1;
  return result;
}

uint64_t sub_1001FDE34()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD000000000000013, (void *)0x8000000100210CE0);
  qword_1002A8CB0 = result;
  *(_QWORD *)algn_1002A8CB8 = v1;
  return result;
}

uint64_t sub_1001FDE6C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001FE550(0xD00000000000001ALL, (void *)0x8000000100210CC0);
  qword_1002A8CC0 = result;
  *(_QWORD *)algn_1002A8CC8 = v1;
  return result;
}

double sub_1001FDEA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v0 = sub_1000080B4(&qword_100292D38);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100219130;
  if (qword_10028AF08 != -1)
    swift_once(&qword_10028AF08, sub_1001FDD54);
  v2 = *(_QWORD *)algn_1002A8C78;
  *(_QWORD *)(v1 + 32) = qword_1002A8C70;
  *(_QWORD *)(v1 + 40) = v2;
  v3 = qword_10028AF10;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v4 = *(_QWORD *)algn_1002A8C88;
  *(_QWORD *)(v1 + 48) = qword_1002A8C80;
  *(_QWORD *)(v1 + 56) = v4;
  qword_1002A8CD0 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

double sub_1001FDF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v0 = sub_1000080B4(&qword_100292D38);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100219130;
  if (qword_10028AF18 != -1)
    swift_once(&qword_10028AF18, sub_1001FDDC4);
  v2 = *(_QWORD *)algn_1002A8C98;
  *(_QWORD *)(v1 + 32) = qword_1002A8C90;
  *(_QWORD *)(v1 + 40) = v2;
  v3 = qword_10028AF20;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_10028AF20, sub_1001FDDFC);
  v4 = *(_QWORD *)algn_1002A8CA8;
  *(_QWORD *)(v1 + 48) = qword_1002A8CA0;
  *(_QWORD *)(v1 + 56) = v4;
  qword_1002A8CD8 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

double sub_1001FE01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  v0 = sub_1000080B4(&qword_100292D38);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100219130;
  if (qword_10028AF28 != -1)
    swift_once(&qword_10028AF28, sub_1001FDE34);
  v2 = *(_QWORD *)algn_1002A8CB8;
  *(_QWORD *)(v1 + 32) = qword_1002A8CB0;
  *(_QWORD *)(v1 + 40) = v2;
  v3 = qword_10028AF30;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_10028AF30, sub_1001FDE6C);
  v4 = *(_QWORD *)algn_1002A8CC8;
  *(_QWORD *)(v1 + 48) = qword_1002A8CC0;
  *(_QWORD *)(v1 + 56) = v4;
  qword_1002A8CE0 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v4).n128_u64[0];
  return result;
}

uint64_t sub_1001FE0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (qword_10028AF38 != -1)
    swift_once(&qword_10028AF38, sub_1001FDEA4);
  swift_bridgeObjectRetain(qword_1002A8CD0);
  sub_1001FD0E4(v0);
  if (qword_10028AF40 != -1)
    swift_once(&qword_10028AF40, sub_1001FDF60);
  swift_bridgeObjectRetain(qword_1002A8CD8);
  sub_1001FD0E4(v1);
  if (qword_10028AF48 != -1)
    swift_once(&qword_10028AF48, sub_1001FE01C);
  swift_bridgeObjectRetain(qword_1002A8CE0);
  result = sub_1001FD0E4(v2);
  qword_1002A8CE8 = (uint64_t)&_swiftEmptyArrayStorage;
  return result;
}

double sub_1001FE1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v0 = sub_1000080B4(&qword_100292D38);
  v1 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10021AF70;
  if (qword_10028AF10 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v2 = *(_QWORD *)algn_1002A8C88;
  *(_QWORD *)(v1 + 32) = qword_1002A8C80;
  *(_QWORD *)(v1 + 40) = v2;
  v3 = qword_10028AF20;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_10028AF20, sub_1001FDDFC);
  v4 = *(_QWORD *)algn_1002A8CA8;
  *(_QWORD *)(v1 + 48) = qword_1002A8CA0;
  *(_QWORD *)(v1 + 56) = v4;
  v5 = qword_10028AF30;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1)
    swift_once(&qword_10028AF30, sub_1001FDE6C);
  v6 = *(_QWORD *)algn_1002A8CC8;
  *(_QWORD *)(v1 + 64) = qword_1002A8CC0;
  *(_QWORD *)(v1 + 72) = v6;
  qword_1002A8CF0 = v1;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_1001FE2BC()
{
  uint64_t result;

  result = sub_1001FE2D8();
  qword_1002A8CF8 = result;
  return result;
}

uint64_t sub_1001FE2D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;

  v0 = (_QWORD *)sub_10001565C((uint64_t)&_swiftEmptyArrayStorage);
  if (qword_10028AF50 != -1)
LABEL_21:
    swift_once(&qword_10028AF50, sub_1001FE0D8);
  v1 = *(_QWORD *)(qword_1002A8CE8 + 16);
  if (!v1)
    return (uint64_t)v0;
  swift_bridgeObjectRetain(qword_1002A8CE8);
  v3 = (_QWORD *)(v2 + 40);
  v23 = v2;
  while (1)
  {
    v6 = *(v3 - 1);
    v5 = (void *)*v3;
    v24 = v1;
    swift_bridgeObjectRetain(*v3);
    v7._countAndFlagsBits = v6;
    v7._object = v5;
    String.append(_:)(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
    v10 = sub_10010A9E0(0xD00000000000001BLL, 0x8000000100210D00);
    v11 = v0[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    v14 = v9;
    if (v0[3] < v13)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v9 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100020264();
      if ((v14 & 1) != 0)
      {
LABEL_4:
        v4 = (uint64_t *)(v0[7] + 16 * v10);
        swift_bridgeObjectRelease(v4[1]);
        *v4 = v6;
        v4[1] = (uint64_t)v5;
        goto LABEL_5;
      }
    }
LABEL_13:
    v0[(v10 >> 6) + 8] |= 1 << v10;
    v17 = (_QWORD *)(v0[6] + 16 * v10);
    *v17 = 0xD00000000000001BLL;
    v17[1] = 0x8000000100210D00;
    v18 = (uint64_t *)(v0[7] + 16 * v10);
    *v18 = v6;
    v18[1] = (uint64_t)v5;
    v19 = v0[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_20;
    v0[2] = v21;
    swift_bridgeObjectRetain(0x8000000100210D00);
LABEL_5:
    v3 += 2;
    swift_bridgeObjectRelease(0x8000000100210D00);
    swift_bridgeObjectRelease(0x8000000000000000);
    v1 = v24 - 1;
    if (v24 == 1)
    {
      swift_bridgeObjectRelease(v23);
      return (uint64_t)v0;
    }
  }
  sub_10001D0C0(v13, isUniquelyReferenced_nonNull_native);
  v15 = sub_10010A9E0(0xD00000000000001BLL, 0x8000000100210D00);
  if ((v14 & 1) == (v16 & 1))
  {
    v10 = v15;
    if ((v14 & 1) != 0)
      goto LABEL_4;
    goto LABEL_13;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001FE504()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for CloudKitContainerStore()
{
  return objc_opt_self(_TtC13appleaccountd22CloudKitContainerStore);
}

uint64_t sub_1001FE550(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6 = objc_msgSend(v5, "infoDictionary");

  if (v6)
  {
    v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v8 = sub_10010A9E0(a1, (uint64_t)a2);
      if ((v9 & 1) != 0)
      {
        sub_1000244B0(*(_QWORD *)(v7 + 56) + 32 * v8, (uint64_t)&v26);
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v7);
        if (*((_QWORD *)&v27 + 1))
        {
          if (swift_dynamicCast(&v25, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6))return v25;
          goto LABEL_12;
        }
LABEL_11:
        sub_10008C388((uint64_t)&v26);
LABEL_12:
        *(_QWORD *)&v26 = 0;
        *((_QWORD *)&v26 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease(*((_QWORD *)&v26 + 1));
        *(_QWORD *)&v26 = 0x7420656C62616E55;
        *((_QWORD *)&v26 + 1) = 0xEF2064616572206FLL;
        v17._countAndFlagsBits = a1;
        v17._object = a2;
        String.append(_:)(v17);
        v18._object = (void *)0x8000000100210C40;
        v18._countAndFlagsBits = 0xD000000000000014;
        String.append(_:)(v18);
        v19 = objc_msgSend(v4, "mainBundle");
        v20 = objc_msgSend(v19, "description");
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v23 = v22;

        v24._countAndFlagsBits = v21;
        v24._object = v23;
        String.append(_:)(v24);

        swift_bridgeObjectRelease(v23);
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v26, *((_QWORD *)&v26 + 1), "appleaccountd/CloudKitContainerStore.swift", 42, 2, 136, 0);
        goto LABEL_13;
      }
      v26 = 0u;
      v27 = 0u;
      swift_bridgeObjectRelease(a2);
    }
    else
    {
      v26 = 0u;
      v27 = 0u;
    }
    swift_bridgeObjectRelease(v7);
    goto LABEL_11;
  }
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  *(_QWORD *)&v26 = 0xD00000000000001DLL;
  *((_QWORD *)&v26 + 1) = 0x8000000100210C20;
  v11 = objc_msgSend(v4, "mainBundle");
  v12 = objc_msgSend(v11, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);

  swift_bridgeObjectRelease(v15);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001DLL, 0x8000000100210C20, "appleaccountd/CloudKitContainerStore.swift", 42, 2, 133, 0);
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_1001FE84C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002953A0;
  if (!qword_1002953A0)
  {
    v1 = objc_opt_self(CKRecordZoneID);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002953A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Coder()
{
  return &type metadata for Coder;
}

uint64_t type metadata accessor for DaemonDeviceState()
{
  return objc_opt_self(_TtC13appleaccountd17DaemonDeviceState);
}

uint64_t type metadata accessor for CustodianMigrationAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100299C00;
  if (!qword_100299C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianMigrationAnalyticsEvent);
  return result;
}

uint64_t sub_1001FE8F4(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8D00);
}

uint64_t sub_1001FE934(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_1000EC1B0(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_1001FED6C(result, v3, 0, a1);
  swift_errorRetain(v5);
  return v5;
}

uint64_t sub_1001FE9A0()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  _BYTE v18[8];
  _QWORD v19[3];
  _BYTE v20[8];
  void *v21;
  id v22;

  v1 = sub_10004973C();
  type metadata accessor for CKError(0);
  v3 = v2;
  v4 = v0;
  if (swift_dynamicCast(&v21, &v22, v1, v3, 6))
  {
    v5 = v21;
    v6 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter(v21);
    if (v6)
    {
      v7 = v6;
      v8 = sub_1001FE934(v6);
      swift_bridgeObjectRelease(v7);
      if (v8)
      {
        swift_getErrorValue(v8, v18, v17);
        v9 = sub_10015D404(v17[1], v17[2]);
        swift_errorRelease(v8);

        goto LABEL_9;
      }
    }

  }
  v22 = v4;
  v10 = sub_1001FED24();
  v11 = v4;
  v12 = _getErrorEmbeddedNSError<A>(_:)(&v22, v1, v10);
  if (v12)
  {
    v9 = v12;

  }
  else
  {
    v9 = swift_allocError(v1, v10, 0, 0);
    *v13 = v22;
  }
LABEL_9:
  swift_getErrorValue(v9, v20, v19);
  v14 = sub_10002FAA8(v19[1], v19[2]);
  v15 = _convertErrorToNSError(_:)(v14);
  swift_errorRelease(v14);
  swift_errorRelease(v9);
  return v15;
}

void sub_1001FEAFC(char a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  uint64_t v13;

  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v5 = objc_msgSend(v4, "environment");

    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (!*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease(v6);
      if (!a2)
        goto LABEL_6;
      goto LABEL_5;
    }
    sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
    v8 = v7;
    swift_bridgeObjectRelease(v6);
    if ((v8 & 1) != 0)
      return;
  }
  if (a2)
  {
LABEL_5:
    v9 = a2;
    a2 = (void *)sub_1001FE9A0();

  }
LABEL_6:
  v10 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v10, &v13);
  *(_OWORD *)(inited + 16) = xmmword_100219130;
  *(_QWORD *)(inited + 32) = 0xD000000000000012;
  *(_QWORD *)(inited + 40) = 0x800000010020FDC0;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000012;
  *(_QWORD *)(inited + 64) = 0x800000010020FDE0;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  v12 = sub_10001612C(inited);
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v12);
  swift_bridgeObjectRelease(v12);

}

void sub_1001FECB8()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianMigrationAnalyticsEvent", 46, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1001FECE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianMigrationAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001FED1C()
{
  return type metadata accessor for CustodianMigrationAnalyticsEvent(0);
}

unint64_t sub_1001FED24()
{
  unint64_t result;
  unint64_t v1;

  result = qword_100299C50;
  if (!qword_100299C50)
  {
    v1 = sub_10004973C();
    result = swift_getWitnessTable(&protocol conformance descriptor for NSError, v1);
    atomic_store(result, (unint64_t *)&qword_100299C50);
  }
  return result;
}

uint64_t sub_1001FED6C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1001FEDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  int *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;

  v12 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v13 = (_QWORD *)(a7 + v12[6]);
  *v13 = 0;
  v13[1] = 0;
  v14 = (_QWORD *)(a7 + v12[7]);
  v15 = type metadata accessor for UUID(0);
  *v14 = 0;
  v14[1] = 0;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(a7, a1, v15);
  v16(a7 + v12[9], a1 + v12[9], v15);
  v17 = v12[10];
  v19 = *(_QWORD *)(a1 + v17);
  v18 = *(_QWORD *)(a1 + v17 + 8);
  v20 = (uint64_t *)(a7 + v17);
  *v20 = v19;
  v20[1] = v18;
  if (a3)
  {
    v21 = (_QWORD *)(a7 + v12[5]);
    *v21 = a2;
    v21[1] = a3;
  }
  else
  {
    v22 = v12[5];
    v24 = *(_QWORD *)(a1 + v22);
    v23 = *(_QWORD *)(a1 + v22 + 8);
    v25 = (_QWORD *)(a7 + v22);
    *v25 = v24;
    v25[1] = v23;
    swift_bridgeObjectRetain(v23);
  }
  v26 = (_QWORD *)(a1 + v12[6]);
  v27 = v26[1];
  v28 = a4;
  if (v27)
  {
    *v13 = *v26;
    v13[1] = v27;
  }
  v29 = (_QWORD *)(a1 + v12[7]);
  v30 = v29[1];
  if (v30)
  {
    *v14 = *v29;
    v14[1] = v30;
  }
  v31 = v12[8];
  if ((a5 & 1) != 0)
    v28 = *(_QWORD *)(a1 + v31);
  *(_QWORD *)(a7 + v31) = v28;
  if (a6 == 2)
    v32 = *(_BYTE *)(a1 + v12[11]);
  else
    v32 = a6 & 1;
  sub_10000F450(v19, v18);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v27);
  result = sub_1001301C4(a1);
  *(_BYTE *)(a7 + v12[11]) = v32;
  return result;
}

uint64_t sub_1001FEF48@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  NSObject **v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t result;
  NSString v62;
  id v63;
  NSObject *v64;
  NSString v65;
  NSObject *v66;
  uint64_t v67;
  NSString v68;
  id v69;
  NSObject *v70;
  NSObject *v71;
  NSObject **v72;
  NSString v73;
  id v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject **v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t (*v86)(uint64_t, char *, uint64_t);
  NSObject **v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  NSObject **v93;
  NSObject *v94;
  const char *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  NSObject *v108;
  void (*v109)(char *, char *, uint64_t);
  id v110;
  int v111;
  char *v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  NSObject *v118;
  NSObject *v119;
  uint64_t v120;

  v111 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v106 - v11;
  v13 = type metadata accessor for UUID(0);
  v117 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13, v14);
  v112 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v113 = (char *)&v106 - v18;
  v19 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v20 = (_QWORD *)(a3 + v19[6]);
  *v20 = 0;
  v20[1] = 0;
  v115 = v20;
  v21 = (_QWORD *)(a3 + v19[7]);
  *v21 = 0;
  v21[1] = 0;
  v116 = v21;
  v22 = CKRecord.recordType.getter(v19);
  v24 = v23;
  if (v22 == 0xD00000000000001BLL && v23 == 0x8000000100222F30)
  {
    swift_bridgeObjectRelease(0x8000000100222F30);
  }
  else
  {
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD00000000000001BLL, 0x8000000100222F30, 0);
    swift_bridgeObjectRelease(v24);
    if ((v25 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      v36 = v35;
      v120 = 2;
      v37 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v38 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v39 = _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v37, v36, v38);
      swift_willThrow(v39);

      v41 = v115;
      v40 = v116;
LABEL_18:
      swift_bridgeObjectRelease(v41[1]);
      return swift_bridgeObjectRelease(v40[1]);
    }
  }
  v26 = objc_msgSend(a1, "recordID");
  v27 = objc_msgSend(v26, "recordName");

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v114 = v13;
  v30 = v29;

  UUID.init(uuidString:)(v28, v30);
  v31 = v30;
  v32 = v114;
  swift_bridgeObjectRelease(v31);
  v33 = v117;
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
  if (v34(v12, 1, v32) == 1)
  {
    sub_100013AAC((uint64_t)v12);
    goto LABEL_7;
  }
  v109 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
  v109(v113, v12, v32);
  v42 = objc_msgSend(a1, "encryptedValuesByKey");
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v42, "objectForKeyedSubscript:", v43);

  v110 = v42;
  if (!v44
    || (v120 = (uint64_t)v44,
        v45 = sub_1000080B4(&qword_10028DB30),
        (swift_dynamicCast(&v118, &v120, v45, &type metadata for String, 6) & 1) == 0))
  {
LABEL_12:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v48 = type metadata accessor for Logger(0);
    sub_100005288(v48, (uint64_t)qword_1002A89F0);
    v49 = a1;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v118 = v49;
      v54 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
      *v53 = v49;

      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Missing Inheritance beneficiaryID - %@", v52, 0xCu);
      v55 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v53, 1, v55);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {

      v50 = v49;
    }
    v41 = v115;
    v40 = v116;

    type metadata accessor for InheritanceError(0);
    v57 = v56;
    v120 = 2;
    v58 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v59 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v60 = _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v58, v57, v59);
    swift_willThrow(v60);
    swift_unknownObjectRelease(v110);

    (*(void (**)(char *, uint64_t))(v117 + 8))(v113, v114);
    goto LABEL_18;
  }
  v46 = v119;
  UUID.init(uuidString:)(v118, v119);
  swift_bridgeObjectRelease(v46);
  v47 = v114;
  if (v34(v9, 1, v114) == 1)
  {
    sub_100013AAC((uint64_t)v9);
    goto LABEL_12;
  }
  v109(v112, v9, v47);
  v62 = String._bridgeToObjectiveC()();
  v63 = objc_msgSend(v42, "objectForKeyedSubscript:", v62);

  if (!v63 || (v120 = (uint64_t)v63, (swift_dynamicCast(&v118, &v120, v45, &type metadata for String, 6) & 1) == 0))
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v88 = type metadata accessor for Logger(0);
    sub_100005288(v88, (uint64_t)qword_1002A89F0);
    v89 = a1;
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v92 = 138412290;
      v118 = v89;
      v94 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
      *v93 = v89;

      v95 = "Missing Inheritance Handle - %@";
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v90, v91, v95, v92, 0xCu);
      v98 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v93, 1, v98);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);
LABEL_40:
      v41 = v115;
      v40 = v116;

      type metadata accessor for InheritanceError(0);
      v100 = v99;
      v120 = 2;
      v101 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v102 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v103 = _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v101, v100, v102);
      swift_willThrow(v103);
      swift_unknownObjectRelease(v110);

      v104 = *(void (**)(char *, uint64_t))(v117 + 8);
      v105 = v114;
      v104(v112, v114);
      v104(v113, v105);
      goto LABEL_18;
    }
LABEL_39:

    v90 = v89;
    goto LABEL_40;
  }
  v64 = v119;
  v108 = v118;
  v65 = String._bridgeToObjectiveC()();
  v66 = objc_msgSend(v110, "objectForKeyedSubscript:", v65);

  if (!v66
    || (v118 = v66, type metadata accessor for Status(0), (swift_dynamicCast(&v120, &v118, v45, v67, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v64);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v96 = type metadata accessor for Logger(0);
    sub_100005288(v96, (uint64_t)qword_1002A89F0);
    v89 = a1;
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v92 = 138412290;
      v118 = v89;
      v97 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
      *v93 = v89;

      v95 = "Missing TrustedContactStatus - %@";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  v117 = v120;
  v68 = String._bridgeToObjectiveC()();
  v69 = objc_msgSend(v110, "objectForKeyedSubscript:", v68);

  if (v69)
  {
    v120 = (uint64_t)v69;
    if ((swift_dynamicCast(&v118, &v120, v45, &type metadata for String, 6) & 1) != 0)
    {
      v107 = v64;
      v70 = v118;
      v71 = v119;
      v72 = (NSObject **)v115;
      swift_bridgeObjectRelease(v115[1]);
      *v72 = v70;
      v72[1] = v71;
      v64 = v107;
    }
  }
  v73 = String._bridgeToObjectiveC()();
  v74 = objc_msgSend(v110, "objectForKeyedSubscript:", v73);

  if (v74)
  {
    v120 = (uint64_t)v74;
    if ((swift_dynamicCast(&v118, &v120, v45, &type metadata for String, 6) & 1) != 0)
    {
      v75 = v118;
      v76 = v119;
      v77 = v64;
      v78 = (NSObject **)v116;
      swift_bridgeObjectRelease(v116[1]);
      *v78 = v75;
      v78[1] = v76;
      v64 = v77;
    }
  }
  v79 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v79);
  objc_msgSend(v79, "finishEncoding");
  v80 = objc_msgSend(v79, "encodedData");
  v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
  v83 = v82;
  swift_unknownObjectRelease(v110);

  v84 = (uint64_t *)(a3 + v19[10]);
  *v84 = v81;
  v84[1] = v83;
  v85 = v114;
  v86 = (uint64_t (*)(uint64_t, char *, uint64_t))v109;
  v109((char *)(a3 + v19[9]), v113, v114);
  result = v86(a3, v112, v85);
  v87 = (NSObject **)(a3 + v19[5]);
  *v87 = v108;
  v87[1] = v64;
  *(_QWORD *)(a3 + v19[8]) = v117;
  *(_BYTE *)(a3 + v19[11]) = v111 & 1;
  return result;
}

uint64_t sub_1001FFA94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001FFAA8(a1, a2);
}

uint64_t sub_1001FFAA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(char *, _QWORD *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  int *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  void (*v47)(uint64_t, _QWORD *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  __int128 v57;
  char v58;

  v48 = a2;
  v3 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (void (**)(uint64_t, _QWORD *, uint64_t))((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  v10 = (void (**)(uint64_t, _QWORD *, uint64_t))((char *)&v47 - v9);
  v50 = sub_1000080B4(&qword_100299C80);
  v11 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50, v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for InheritanceInvitationRecord(0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &v19[*(int *)(v17 + 24)];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v56 = (uint64_t *)v20;
  v51 = (int *)v17;
  v52 = a1;
  v21 = v19;
  v22 = &v19[*(int *)(v17 + 28)];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  v55 = (uint64_t *)v22;
  v24 = a1[3];
  v23 = a1[4];
  sub_10000732C(a1, v24);
  v25 = sub_100200C70();
  v49 = v14;
  v26 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationRecord.CodingKeys, &type metadata for InheritanceInvitationRecord.CodingKeys, v25, v24, v23);
  if (v26)
  {
    sub_100006F58(v52);
    swift_bridgeObjectRelease(v56[1]);
    return swift_bridgeObjectRelease(v55[1]);
  }
  else
  {
    v54 = v7;
    v27 = v11;
    LOBYTE(v57) = 1;
    v28 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v3, &v57, v50, v3, v28);
    v29 = (uint64_t)v21;
    v30 = v10;
    v31 = *(void (**)(char *, _QWORD *, uint64_t))(v53 + 32);
    v31(v21, v30, v3);
    LOBYTE(v57) = 2;
    v32 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v50);
    v47 = (void (*)(uint64_t, _QWORD *, uint64_t))v31;
    v33 = v28;
    v34 = v51;
    v35 = (uint64_t *)(v29 + v51[5]);
    *v35 = v32;
    v35[1] = v36;
    LOBYTE(v57) = 3;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v57, v50);
    v38 = v56;
    *v56 = v37;
    v38[1] = v39;
    LOBYTE(v57) = 4;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v57, v50);
    v41 = v55;
    *v55 = v40;
    v41[1] = v42;
    LOBYTE(v57) = 5;
    *(_QWORD *)(v29 + v34[8]) = KeyedDecodingContainer.decode(_:forKey:)(&v57, v50);
    LOBYTE(v57) = 0;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v54, v3, &v57, v50, v3, v33);
    v47(v29 + v34[9], v54, v3);
    v58 = 6;
    v43 = sub_10000F40C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v57, &type metadata for Data, &v58, v50, &type metadata for Data, v43);
    *(_OWORD *)(v29 + v34[10]) = v57;
    LOBYTE(v57) = 7;
    v44 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v50);
    v45 = v52;
    LOBYTE(v31) = v44;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v49, v50);
    *(_BYTE *)(v29 + v34[11]) = v31 & 1;
    sub_100200CB4(v29, v48);
    sub_100006F58(v45);
    return sub_1001301C4(v29);
  }
}

uint64_t sub_1001FFF7C(_QWORD *a1)
{
  return sub_1001FFF90(a1);
}

uint64_t sub_1001FFF90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v30;
  char v31;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100299C90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_100200C70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationRecord.CodingKeys, &type metadata for InheritanceInvitationRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v30) = 1;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v30, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
    v16 = (uint64_t *)(v3 + v15[5]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v30) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v30, v5);
    v19 = (uint64_t *)(v3 + v15[6]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v30) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v30, v5);
    v22 = (uint64_t *)(v3 + v15[7]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v30) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v30, v5);
    v25 = *(_QWORD *)(v3 + v15[8]);
    LOBYTE(v30) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v30, v5);
    v26 = v3 + v15[9];
    LOBYTE(v30) = 0;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v30, v5, v13, v14);
    v30 = *(_OWORD *)(v3 + v15[10]);
    v31 = 6;
    v27 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v31, v5, &type metadata for Data, v27);
    v28 = *(unsigned __int8 *)(v3 + v15[11]);
    LOBYTE(v30) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v28, &v30, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100200224(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100200258
                                                            + 4 * asc_100222E80[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_100200258()
{
  return 0x69636966656E6562;
}

unint64_t sub_10020027C()
{
  return 0xD000000000000011;
}

uint64_t sub_100200308()
{
  unsigned __int8 *v0;

  return sub_100200224(*v0);
}

uint64_t sub_100200310@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100201680(a1, a2);
  *a3 = result;
  return result;
}

void sub_100200334(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100200340(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200C70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100200368(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200C70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100200390(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v34;
  __int128 v35;
  __int128 v36;
  void *v37;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v3);
  v5 = CKRecordKeyValueSetting.subscript.getter(&v35, 0x69636966656E6562, 0xED00004449797261);
  v6 = *((_QWORD *)&v35 + 1);
  v7 = v35;
  v8 = UUID.uuidString.getter(v5);
  v10 = v9;
  if (!v6)
  {
    v11 = swift_bridgeObjectRelease(v9);
LABEL_7:
    v13 = UUID.uuidString.getter(v11);
    *((_QWORD *)&v36 + 1) = &type metadata for String;
    v37 = &protocol witness table for String;
    *(_QWORD *)&v35 = v13;
    *((_QWORD *)&v35 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v35, 0x69636966656E6562, 0xED00004449797261, ObjectType);
    goto LABEL_8;
  }
  if (v7 == v8 && v6 == v9)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    goto LABEL_8;
  }
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v8, v9, 0);
  swift_bridgeObjectRelease(v6);
  v11 = swift_bridgeObjectRelease(v10);
  if ((v12 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v35, 0xD000000000000011, 0x8000000100209480);
  v15 = *((_QWORD *)&v35 + 1);
  v16 = v35;
  v17 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v18 = (_QWORD *)(v2 + v17[5]);
  v20 = *v18;
  v19 = v18[1];
  if (!v15)
  {
LABEL_14:
    *((_QWORD *)&v36 + 1) = &type metadata for String;
    v37 = &protocol witness table for String;
    *(_QWORD *)&v35 = v20;
    *((_QWORD *)&v35 + 1) = v19;
    swift_bridgeObjectRetain(v19);
    CKRecordKeyValueSetting.subscript.setter(&v35, 0xD000000000000011, 0x8000000100209480, ObjectType);
    goto LABEL_16;
  }
  if (v16 != v20 || v15 != v19)
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, *v18, v18[1], 0);
    swift_bridgeObjectRelease(v15);
    if ((v22 & 1) != 0)
      goto LABEL_16;
    goto LABEL_14;
  }
  swift_bridgeObjectRelease(v15);
LABEL_16:
  CKRecordKeyValueSetting.subscript.getter(&v35, 0xD000000000000014, 0x8000000100210E40);
  v23 = *((_QWORD *)&v35 + 1);
  v24 = (unint64_t *)(v2 + v17[6]);
  v26 = *v24;
  v25 = v24[1];
  if (*((_QWORD *)&v35 + 1))
  {
    if (!v25)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v35 + 1));
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
LABEL_25:
      swift_bridgeObjectRetain(v25);
      CKRecordKeyValueSetting.subscript.setter(&v35, 0xD000000000000014, 0x8000000100210E40, ObjectType);
      goto LABEL_26;
    }
    if (v35 == __PAIR128__(v25, v26))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v35 + 1));
      goto LABEL_26;
    }
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, *((_QWORD *)&v35 + 1), *v24, v24[1], 0);
    swift_bridgeObjectRelease(v23);
    if ((v27 & 1) == 0)
    {
LABEL_24:
      *((_QWORD *)&v36 + 1) = &type metadata for String;
      v37 = &protocol witness table for String;
      *(_QWORD *)&v35 = v26;
      *((_QWORD *)&v35 + 1) = v25;
      goto LABEL_25;
    }
  }
  else if (v25)
  {
    goto LABEL_24;
  }
LABEL_26:
  CKRecordKeyValueSetting.subscript.getter(&v35, 0xD000000000000013, 0x8000000100210E60);
  v28 = *((_QWORD *)&v35 + 1);
  v29 = (unint64_t *)(v2 + v17[7]);
  v31 = *v29;
  v30 = v29[1];
  if (!*((_QWORD *)&v35 + 1))
  {
    if (!v30)
      goto LABEL_36;
LABEL_34:
    *((_QWORD *)&v36 + 1) = &type metadata for String;
    v37 = &protocol witness table for String;
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v30;
    goto LABEL_35;
  }
  if (!v30)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v35 + 1));
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
LABEL_35:
    swift_bridgeObjectRetain(v30);
    CKRecordKeyValueSetting.subscript.setter(&v35, 0xD000000000000013, 0x8000000100210E60, ObjectType);
    goto LABEL_36;
  }
  if (v35 != __PAIR128__(v30, v31))
  {
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, *((_QWORD *)&v35 + 1), *v29, v29[1], 0);
    swift_bridgeObjectRelease(v28);
    if ((v34 & 1) != 0)
      goto LABEL_36;
    goto LABEL_34;
  }
  swift_bridgeObjectRelease(*((_QWORD *)&v35 + 1));
LABEL_36:
  CKRecordKeyValueSetting.subscript.getter(&v35, 0x737574617473, 0xE600000000000000);
  v32 = *(_QWORD *)(v2 + v17[8]);
  if ((BYTE8(v35) & 1) != 0 || (_QWORD)v35 != v32)
  {
    *((_QWORD *)&v36 + 1) = &type metadata for Int;
    v37 = &protocol witness table for Int;
    *(_QWORD *)&v35 = v32;
    CKRecordKeyValueSetting.subscript.setter(&v35, 0x737574617473, 0xE600000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_10020082C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  __n128 v34;
  __n128 v35;
  void *v36;
  Class isa;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];

  v1 = v0;
  v2 = type metadata accessor for PersonNameComponents(0);
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52[0] = 0;
  v52[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(143);
  v6 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v50 = (uint64_t)v6;
  v7 = sub_1000080B4(&qword_100299C78);
  v8._countAndFlagsBits = String.init<A>(describing:)(&v50, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._object = (void *)0x8000000100209460;
  v10._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v10);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0xD000000000000016;
  v15._object = (void *)0x8000000100210DC0;
  String.append(_:)(v15);
  v16 = (uint64_t *)(v0 + v6[5]);
  v17 = *v16;
  v18 = (void *)v16[1];
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20._countAndFlagsBits = 0xD000000000000019;
  v20._object = (void *)0x8000000100210DE0;
  String.append(_:)(v20);
  v21 = (uint64_t *)(v0 + v6[6]);
  v23 = v21[1];
  v50 = *v21;
  v22 = v50;
  v51 = v23;
  swift_bridgeObjectRetain(v23);
  v24 = sub_1000080B4(&qword_10028BBE8);
  v25._countAndFlagsBits = String.init<A>(describing:)(&v50, v24);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  v27._countAndFlagsBits = 0xD000000000000018;
  v27._object = (void *)0x8000000100210E00;
  String.append(_:)(v27);
  v28 = (uint64_t *)(v0 + v6[7]);
  v30 = v28[1];
  v50 = *v28;
  v29 = v50;
  v51 = v30;
  swift_bridgeObjectRetain(v30);
  v31._countAndFlagsBits = String.init<A>(describing:)(&v50, v24);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v32);
  v33._countAndFlagsBits = 0xD00000000000001BLL;
  v33._object = (void *)0x8000000100210E20;
  String.append(_:)(v33);
  PersonNameComponents.init()();
  v34 = swift_bridgeObjectRetain(v23);
  PersonNameComponents.givenName.setter(v22, v23, v34);
  v35 = swift_bridgeObjectRetain(v30);
  PersonNameComponents.familyName.setter(v29, v30, v35);
  v36 = (void *)objc_opt_self(NSPersonNameComponentsFormatter);
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v38 = objc_msgSend(v36, "localizedStringFromPersonNameComponents:style:options:", isa, 0, 0);

  v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v41 = v40;

  (*(void (**)(char *, uint64_t))(v48 + 8))(v5, v49);
  v50 = v39;
  v51 = v41;
  v42._countAndFlagsBits = String.init<A>(describing:)(&v50, v24);
  v43 = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v43);
  v44._countAndFlagsBits = 0x7375746174730A2CLL;
  v44._object = (void *)0xEB00000000202D20;
  String.append(_:)(v44);
  v50 = *(_QWORD *)(v1 + v6[8]);
  type metadata accessor for Status(0);
  _print_unlocked<A, B>(_:_:)(&v50, v52, v45, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 44;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  return v52[0];
}

uint64_t sub_100200B9C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100299C60, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_100222F00);
  result = sub_100005150(&qword_10028D5F8, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_100222ED8);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for InheritanceInvitationRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100299CF0;
  if (!qword_100299CF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInvitationRecord);
  return result;
}

uint64_t sub_100200C34(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100299C70, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_100222EBC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100200C70()
{
  unint64_t result;

  result = qword_100299C88;
  if (!qword_100299C88)
  {
    result = swift_getWitnessTable(&unk_1002230B0, &type metadata for InheritanceInvitationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299C88);
  }
  return result;
}

uint64_t sub_100200CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InheritanceInvitationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for InheritanceInvitationRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceInvitationRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100200DD4 + 4 * byte_100222E8D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100200E08 + 4 * byte_100222E88[v4]))();
}

uint64_t sub_100200E08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200E10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100200E18);
  return result;
}

uint64_t sub_100200E24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100200E2CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100200E30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200E38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationRecord.CodingKeys()
{
  return &type metadata for InheritanceInvitationRecord.CodingKeys;
}

_QWORD *sub_100200E54(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t, __n128);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v33);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v8)(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[7];
    v18 = a3[8];
    v19 = (_QWORD *)((char *)a1 + v17);
    v20 = (_QWORD *)((char *)a2 + v17);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_QWORD *)((char *)a2 + v18);
    *v19 = v21;
    v19[1] = v22;
    *(_QWORD *)((char *)a1 + v18) = v23;
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    v27 = swift_bridgeObjectRetain(v22);
    v8(v25, v26, v7, v27);
    v28 = a3[10];
    v29 = (_QWORD *)((char *)a1 + v28);
    v30 = (_QWORD *)((char *)a2 + v28);
    v31 = *v30;
    v32 = v30[1];
    sub_10000F450(*v30, v32);
    *v29 = v31;
    v29[1] = v32;
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  }
  return a1;
}

uint64_t sub_100200F88(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v5(a1 + a2[9], v4);
  return sub_10000F494(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_10020101C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[7];
  v17 = a3[8];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (uint64_t *)(a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  v22 = *(_QWORD *)(a2 + v17);
  *v18 = v20;
  v18[1] = v21;
  *(_QWORD *)(a1 + v17) = v22;
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  v26 = swift_bridgeObjectRetain(v21);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(v24, v25, v6, v26);
  v27 = a3[10];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  v31 = v29[1];
  sub_10000F450(*v29, v31);
  *v28 = v30;
  v28[1] = v31;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100201124(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = a3[7];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v22 = v19[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v23 = a3[10];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  sub_10000F450(*v25, v27);
  v28 = *v24;
  v29 = v24[1];
  *v24 = v26;
  v24[1] = v27;
  sub_10000F494(v28, v29);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_100201258(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v7(a1 + a3[9], a2 + a3[9], v6);
  v10 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

uint64_t sub_100201304(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[7];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v7(a1 + v26, a2 + v26, v6);
  v27 = a3[10];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  sub_10000F494(v28, v29);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1002013F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100201400);
}

uint64_t sub_100201400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100201480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10020148C);
}

uint64_t sub_10020148C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100201508(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100222F98;
    v4[2] = &unk_100222FB0;
    v4[3] = &unk_100222FB0;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = v4[0];
    v4[6] = &unk_100222FC8;
    v4[7] = &unk_100222FE0;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1002015AC()
{
  unint64_t result;

  result = qword_100299D40;
  if (!qword_100299D40)
  {
    result = swift_getWitnessTable(&unk_100223088, &type metadata for InheritanceInvitationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299D40);
  }
  return result;
}

unint64_t sub_1002015F4()
{
  unint64_t result;

  result = qword_100299D48;
  if (!qword_100299D48)
  {
    result = swift_getWitnessTable(&unk_100222FF8, &type metadata for InheritanceInvitationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299D48);
  }
  return result;
}

unint64_t sub_10020163C()
{
  unint64_t result;

  result = qword_100299D50;
  if (!qword_100299D50)
  {
    result = swift_getWitnessTable(&unk_100223020, &type metadata for InheritanceInvitationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100299D50);
  }
  return result;
}

uint64_t sub_100201680(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100209480)
  {
    v8 = 0x8000000100209480;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100209480, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100210E40)
  {
    v9 = 0x8000000100210E40;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100210E40, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000013)
  {
    v10 = 0x8000000100210E60;
    if (a2 == 0x8000000100210E60)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100210E60, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100209650)
  {
    v12 = 0x8000000100209650;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}
