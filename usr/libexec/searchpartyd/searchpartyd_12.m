_OWORD *sub_1006E082C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for StableIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v9);
  if (EnumCaseMultiPayload == 3)
  {
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
    v14 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    *(_OWORD *)&v7[v14[12]] = *(_OWORD *)&v8[v14[12]];
    *(_OWORD *)&v7[v14[16]] = *(_OWORD *)&v8[v14[16]];
    *(_OWORD *)&v7[v14[20]] = *(_OWORD *)&v8[v14[20]];
    v7[v14[24]] = v8[v14[24]];
    swift_storeEnumTagMultiPayload(v7, v9, 3);
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    v12 = (int *)sub_10001A9A8(&qword_101106F40);
    *(_OWORD *)&v7[v12[12]] = *(_OWORD *)&v8[v12[12]];
    *(_OWORD *)&v7[v12[16]] = *(_OWORD *)&v8[v12[16]];
    *(_OWORD *)&v7[v12[20]] = *(_OWORD *)&v8[v12[20]];
    *(_WORD *)&v7[v12[24]] = *(_WORD *)&v8[v12[24]];
    *(_OWORD *)&v7[v12[28]] = *(_OWORD *)&v8[v12[28]];
    swift_storeEnumTagMultiPayload(v7, v9, 2);
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  v15 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  v16 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  v17 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v18 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  v19 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  v20 = a3[17];
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
  v21 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
  v22 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
  v23 = a3[23];
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  v24 = a3[24];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[26];
  *(_WORD *)((char *)a1 + a3[25]) = *(_WORD *)((char *)a2 + a3[25]);
  v31 = (char *)a1 + v30;
  v32 = (char *)a2 + v30;
  v33 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v34 = *((_QWORD *)v33 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
  {
    v35 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v32, v27);
    v31[v33[5]] = v32[v33[5]];
    v31[v33[6]] = v32[v33[6]];
    v31[v33[7]] = v32[v33[7]];
    *(_OWORD *)&v31[v33[8]] = *(_OWORD *)&v32[v33[8]];
    *(_OWORD *)&v31[v33[9]] = *(_OWORD *)&v32[v33[9]];
    v36 = v33[10];
    v37 = &v31[v36];
    v38 = &v32[v36];
    *(_QWORD *)v37 = *(_QWORD *)v38;
    v37[8] = v38[8];
    *(_OWORD *)&v31[v33[11]] = *(_OWORD *)&v32[v33[11]];
    v39 = v33[12];
    v40 = &v31[v39];
    v41 = &v32[v39];
    v42 = type metadata accessor for URL(0);
    v43 = *(_QWORD *)(v42 - 8);
    v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    if (v80(v41, 1, v42))
    {
      v44 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v45 = v33[13];
    v46 = &v31[v45];
    v47 = &v32[v45];
    v79 = v43;
    if (v80(&v32[v45], 1, v42))
    {
      v48 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v46, v47, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v42);
    }
    *(_OWORD *)&v31[v33[14]] = *(_OWORD *)&v32[v33[14]];
    *(_QWORD *)&v31[v33[15]] = *(_QWORD *)&v32[v33[15]];
    v49 = v33[16];
    v50 = &v31[v49];
    v51 = &v32[v49];
    v52 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v53 = *((_QWORD *)v52 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v53 + 48))(v51, 1, v52))
    {
      v54 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v77 = v53;
      v78 = v34;
      v55 = *((_OWORD *)v51 + 1);
      *(_OWORD *)v50 = *(_OWORD *)v51;
      *((_OWORD *)v50 + 1) = v55;
      *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
      *((_WORD *)v50 + 24) = *((_WORD *)v51 + 24);
      v56 = *((_QWORD *)v51 + 8);
      *((_QWORD *)v50 + 7) = *((_QWORD *)v51 + 7);
      *((_QWORD *)v50 + 8) = v56;
      v50[72] = v51[72];
      v57 = v52[10];
      v58 = &v50[v57];
      v59 = &v51[v57];
      if (v80(&v51[v57], 1, v42))
      {
        v60 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v58, v59, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v58, 0, 1, v42);
      }
      v61 = v52[11];
      v62 = &v50[v61];
      v63 = &v51[v61];
      if (v80(&v51[v61], 1, v42))
      {
        v64 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v62, v63, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v62, 0, 1, v42);
      }
      v65 = v52[12];
      v66 = &v50[v65];
      v67 = &v51[v65];
      *(_QWORD *)v66 = *(_QWORD *)v67;
      v66[8] = v67[8];
      *(_OWORD *)&v50[v52[13]] = *(_OWORD *)&v51[v52[13]];
      *(_QWORD *)&v50[v52[14]] = *(_QWORD *)&v51[v52[14]];
      *(_OWORD *)&v50[v52[15]] = *(_OWORD *)&v51[v52[15]];
      *(_QWORD *)&v50[v52[16]] = *(_QWORD *)&v51[v52[16]];
      v68 = v52[17];
      v69 = &v50[v68];
      v70 = &v51[v68];
      v69[16] = v70[16];
      *(_OWORD *)v69 = *(_OWORD *)v70;
      v71 = v52[18];
      v72 = &v50[v71];
      v73 = &v51[v71];
      v72[16] = v73[16];
      *(_OWORD *)v72 = *(_OWORD *)v73;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56))(v50, 0, 1, v52);
      v34 = v78;
    }
    *(_DWORD *)&v31[v33[17]] = *(_DWORD *)&v32[v33[17]];
    *(_QWORD *)&v31[v33[18]] = *(_QWORD *)&v32[v33[18]];
    v74 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    v74(&v31[v33[19]], &v32[v33[19]], v42);
    v74(&v31[v33[20]], &v32[v33[20]], v42);
    v74(&v31[v33[21]], &v32[v33[21]], v42);
    v74(&v31[v33[22]], &v32[v33[22]], v42);
    v74(&v31[v33[23]], &v32[v33[23]], v42);
    v74(&v31[v33[24]], &v32[v33[24]], v42);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v34 + 56))(v31, 0, 1, v33);
  }
  v75 = type metadata accessor for ProductInfoState(0);
  *(_OWORD *)&v31[*(int *)(v75 + 20)] = *(_OWORD *)&v32[*(int *)(v75 + 20)];
  return a1;
}

_QWORD *sub_1006E0FC4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  uint64_t (*v69)(_BYTE *, uint64_t, int *);
  int v70;
  int v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  void (**v79)(void *, const void *, uint64_t);
  void (*v80)(void *, const void *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(void);
  unsigned int v107;
  unsigned int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  _OWORD *v115;
  int *v116;
  unsigned int (**v117)(_OWORD *, uint64_t, int *);
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  int *v140;
  uint64_t (*v141)(uint64_t, uint64_t, int *);
  int v142;
  int v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  void (*v166)(void *, const void *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unsigned int v173;
  size_t v174;
  void *v175;
  uint64_t v176;
  void *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  int v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  _QWORD *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  void (*v215)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  int v222;
  void *__src;
  void *__srca;
  void (**v225)(void *, const void *, uint64_t);
  _QWORD *v226;
  void *v227;
  void (*v228)(void *, const void *, uint64_t);
  uint64_t (*v229)(void);
  uint64_t v230;
  uint64_t v231;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    sub_1000126B0((uint64_t)a1 + v7, type metadata accessor for StableIdentifier);
    v10 = type metadata accessor for StableIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v10);
    if (EnumCaseMultiPayload == 3)
    {
      v14 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v8, v9, v14);
      v15 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v8[v15[12]] = *(_OWORD *)&v9[v15[12]];
      *(_OWORD *)&v8[v15[16]] = *(_OWORD *)&v9[v15[16]];
      *(_OWORD *)&v8[v15[20]] = *(_OWORD *)&v9[v15[20]];
      v8[v15[24]] = v9[v15[24]];
      swift_storeEnumTagMultiPayload(v8, v10, 3);
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
      v13 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v8[v13[12]] = *(_OWORD *)&v9[v13[12]];
      *(_OWORD *)&v8[v13[16]] = *(_OWORD *)&v9[v13[16]];
      *(_OWORD *)&v8[v13[20]] = *(_OWORD *)&v9[v13[20]];
      *(_WORD *)&v8[v13[24]] = *(_WORD *)&v9[v13[24]];
      *(_OWORD *)&v8[v13[28]] = *(_OWORD *)&v9[v13[28]];
      swift_storeEnumTagMultiPayload(v8, v10, 2);
    }
    else
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v16 = a3[6];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = a3[8];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  v31 = a3[9];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  v36 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v36) = *(_QWORD *)((char *)a2 + v36);
  v37 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v42) = *(_QWORD *)((char *)a2 + v42);
  v43 = a3[16];
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease();
  v48 = a3[18];
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + v48) = *(_QWORD *)((char *)a2 + v48);
  v49 = a3[19];
  v50 = (_QWORD *)((char *)a1 + v49);
  v51 = (_QWORD *)((char *)a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[21]) = *(_QWORD *)((char *)a2 + a3[21]);
  swift_bridgeObjectRelease();
  v54 = a3[23];
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  *((_BYTE *)a1 + v54) = *((_BYTE *)a2 + v54);
  v55 = a3[24];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_12:
    v63 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
LABEL_13:
  v64 = a3[26];
  *(_WORD *)((char *)a1 + a3[25]) = *(_WORD *)((char *)a2 + a3[25]);
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v68 = *((_QWORD *)v67 - 1);
  v69 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (v71)
    {
      sub_1000126B0((uint64_t)v65, type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_19;
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 40))(v65, v66, v58);
    v65[v67[5]] = v66[v67[5]];
    v65[v67[6]] = v66[v67[6]];
    v65[v67[7]] = v66[v67[7]];
    v83 = v67[8];
    v84 = &v65[v83];
    v85 = (uint64_t *)&v66[v83];
    v87 = *v85;
    v86 = v85[1];
    *v84 = v87;
    v84[1] = v86;
    swift_bridgeObjectRelease();
    v88 = v67[9];
    v89 = &v65[v88];
    v90 = (uint64_t *)&v66[v88];
    v92 = *v90;
    v91 = v90[1];
    *v89 = v92;
    v89[1] = v91;
    swift_bridgeObjectRelease();
    v93 = v67[10];
    v94 = &v65[v93];
    v95 = &v66[v93];
    *(_QWORD *)v94 = *(_QWORD *)v95;
    v94[8] = v95[8];
    v96 = v67[11];
    v97 = &v65[v96];
    v98 = (uint64_t *)&v66[v96];
    v100 = *v98;
    v99 = v98[1];
    *v97 = v100;
    v97[1] = v99;
    swift_bridgeObjectRelease();
    v101 = v67[12];
    v102 = &v65[v101];
    v103 = &v66[v101];
    v104 = type metadata accessor for URL(0);
    v105 = *(_QWORD *)(v104 - 8);
    v106 = *(uint64_t (**)(void))(v105 + 48);
    v107 = ((uint64_t (*)(char *, uint64_t, uint64_t))v106)(v102, 1, v104);
    v108 = ((uint64_t (*)(char *, uint64_t, uint64_t))v106)(v103, 1, v104);
    if (v107)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v102, v103, v104);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
        goto LABEL_35;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v102, v103, v104);
LABEL_35:
        v126 = v67[13];
        v127 = &v65[v126];
        v128 = &v66[v126];
        v129 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v106)(&v65[v126], 1, v104);
        v130 = ((uint64_t (*)(char *, uint64_t, uint64_t))v106)(v128, 1, v104);
        v229 = v106;
        v231 = v105;
        if (v129)
        {
          if (!v130)
          {
            (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v127, v128, v104);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v127, 0, 1, v104);
            goto LABEL_41;
          }
        }
        else
        {
          if (!v130)
          {
            (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v127, v128, v104);
LABEL_41:
            v132 = v67[14];
            v133 = &v65[v132];
            v134 = (uint64_t *)&v66[v132];
            v136 = *v134;
            v135 = v134[1];
            *v133 = v136;
            v133[1] = v135;
            swift_bridgeObjectRelease();
            *(_QWORD *)&v65[v67[15]] = *(_QWORD *)&v66[v67[15]];
            v137 = v67[16];
            v138 = (uint64_t)&v65[v137];
            v139 = &v66[v137];
            v140 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            v226 = (_QWORD *)*((_QWORD *)v140 - 1);
            v141 = (uint64_t (*)(uint64_t, uint64_t, int *))v226[6];
            v142 = v141(v138, 1, v140);
            v143 = v141((uint64_t)v139, 1, v140);
            if (v142)
            {
              if (!v143)
              {
                v144 = *((_OWORD *)v139 + 1);
                *(_OWORD *)v138 = *(_OWORD *)v139;
                *(_OWORD *)(v138 + 16) = v144;
                *(_OWORD *)(v138 + 32) = *((_OWORD *)v139 + 2);
                *(_WORD *)(v138 + 48) = *((_WORD *)v139 + 24);
                v145 = *((_QWORD *)v139 + 8);
                *(_QWORD *)(v138 + 56) = *((_QWORD *)v139 + 7);
                *(_QWORD *)(v138 + 64) = v145;
                *(_BYTE *)(v138 + 72) = v139[72];
                v146 = v140[10];
                v147 = (void *)(v138 + v146);
                v148 = &v139[v146];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v229)(&v139[v146], 1, v104))
                {
                  v149 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v231 + 32))(v147, v148, v104);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v147, 0, 1, v104);
                }
                v176 = v140[11];
                v177 = (void *)(v138 + v176);
                v178 = &v139[v176];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v229)(&v139[v176], 1, v104))
                {
                  v179 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v177, v178, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
                  v151 = v231;
                }
                else
                {
                  v180 = v178;
                  v151 = v231;
                  (*(void (**)(void *, char *, uint64_t))(v231 + 32))(v177, v180, v104);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v177, 0, 1, v104);
                }
                v181 = v140[12];
                v182 = v138 + v181;
                v183 = &v139[v181];
                *(_QWORD *)v182 = *(_QWORD *)v183;
                *(_BYTE *)(v182 + 8) = v183[8];
                *(_OWORD *)(v138 + v140[13]) = *(_OWORD *)&v139[v140[13]];
                *(_QWORD *)(v138 + v140[14]) = *(_QWORD *)&v139[v140[14]];
                *(_OWORD *)(v138 + v140[15]) = *(_OWORD *)&v139[v140[15]];
                *(_QWORD *)(v138 + v140[16]) = *(_QWORD *)&v139[v140[16]];
                v184 = v140[17];
                v185 = v138 + v184;
                v186 = &v139[v184];
                *(_BYTE *)(v185 + 16) = v186[16];
                *(_OWORD *)v185 = *(_OWORD *)v186;
                v187 = v140[18];
                v188 = v138 + v187;
                v189 = &v139[v187];
                *(_BYTE *)(v188 + 16) = v189[16];
                *(_OWORD *)v188 = *(_OWORD *)v189;
                ((void (*)(uint64_t, _QWORD, uint64_t, int *))v226[7])(v138, 0, 1, v140);
                goto LABEL_77;
              }
LABEL_47:
              v150 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v138, v139, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
              v151 = v231;
LABEL_77:
              *(_DWORD *)&v65[v67[17]] = *(_DWORD *)&v66[v67[17]];
              *(_QWORD *)&v65[v67[18]] = *(_QWORD *)&v66[v67[18]];
              swift_bridgeObjectRelease();
              v215 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 40);
              v215(&v65[v67[19]], &v66[v67[19]], v104);
              v215(&v65[v67[20]], &v66[v67[20]], v104);
              v215(&v65[v67[21]], &v66[v67[21]], v104);
              v215(&v65[v67[22]], &v66[v67[22]], v104);
              v215(&v65[v67[23]], &v66[v67[23]], v104);
              v215(&v65[v67[24]], &v66[v67[24]], v104);
              goto LABEL_78;
            }
            if (v143)
            {
              sub_1000126B0(v138, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_47;
            }
            v167 = *((_QWORD *)v139 + 1);
            *(_QWORD *)v138 = *(_QWORD *)v139;
            *(_QWORD *)(v138 + 8) = v167;
            swift_bridgeObjectRelease();
            v168 = *((_QWORD *)v139 + 3);
            *(_QWORD *)(v138 + 16) = *((_QWORD *)v139 + 2);
            *(_QWORD *)(v138 + 24) = v168;
            swift_bridgeObjectRelease();
            v169 = *((_QWORD *)v139 + 5);
            *(_QWORD *)(v138 + 32) = *((_QWORD *)v139 + 4);
            *(_QWORD *)(v138 + 40) = v169;
            swift_bridgeObjectRelease();
            *(_WORD *)(v138 + 48) = *((_WORD *)v139 + 24);
            v170 = *((_QWORD *)v139 + 8);
            *(_QWORD *)(v138 + 56) = *((_QWORD *)v139 + 7);
            *(_QWORD *)(v138 + 64) = v170;
            *(_BYTE *)(v138 + 72) = v139[72];
            v171 = v140[10];
            v172 = &v139[v171];
            v227 = (void *)(v138 + v171);
            v222 = v229();
            v173 = ((uint64_t (*)(char *, uint64_t, uint64_t))v229)(v172, 1, v104);
            if (v222)
            {
              if (!v173)
              {
                (*(void (**)(void *, char *, uint64_t))(v231 + 32))(v227, v172, v104);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v227, 0, 1, v104);
                goto LABEL_69;
              }
              v174 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v175 = v227;
            }
            else
            {
              if (!v173)
              {
                (*(void (**)(void *, char *, uint64_t))(v231 + 40))(v227, v172, v104);
                goto LABEL_69;
              }
              (*(void (**)(void *, uint64_t))(v231 + 8))(v227, v104);
              v174 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v175 = v227;
            }
            memcpy(v175, v172, v174);
LABEL_69:
            v190 = v140[11];
            v191 = &v139[v190];
            __srca = (void *)(v138 + v190);
            v192 = v229();
            v193 = ((uint64_t (*)(char *, uint64_t, uint64_t))v229)(v191, 1, v104);
            if (v192)
            {
              if (v193)
              {
                v194 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(__srca, v191, *(_QWORD *)(*(_QWORD *)(v194 - 8) + 64));
                v151 = v231;
              }
              else
              {
                v151 = v231;
                (*(void (**)(void *, char *, uint64_t))(v231 + 32))(__srca, v191, v104);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v231 + 56))(__srca, 0, 1, v104);
              }
            }
            else
            {
              v151 = v231;
              if (v193)
              {
                (*(void (**)(void *, uint64_t))(v231 + 8))(__srca, v104);
                v195 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(__srca, v191, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, char *, uint64_t))(v231 + 40))(__srca, v191, v104);
              }
            }
            v196 = v140[12];
            v197 = v138 + v196;
            v198 = &v139[v196];
            *(_QWORD *)v197 = *(_QWORD *)v198;
            *(_BYTE *)(v197 + 8) = v198[8];
            v199 = v140[13];
            v200 = (_QWORD *)(v138 + v199);
            v201 = &v139[v199];
            v203 = *(_QWORD *)v201;
            v202 = *((_QWORD *)v201 + 1);
            *v200 = v203;
            v200[1] = v202;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v138 + v140[14]) = *(_QWORD *)&v139[v140[14]];
            swift_bridgeObjectRelease();
            v204 = v140[15];
            v205 = (_QWORD *)(v138 + v204);
            v206 = &v139[v204];
            v208 = *(_QWORD *)v206;
            v207 = *((_QWORD *)v206 + 1);
            *v205 = v208;
            v205[1] = v207;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v138 + v140[16]) = *(_QWORD *)&v139[v140[16]];
            swift_bridgeObjectRelease();
            v209 = v140[17];
            v210 = v138 + v209;
            v211 = &v139[v209];
            *(_OWORD *)v210 = *(_OWORD *)v211;
            *(_BYTE *)(v210 + 16) = v211[16];
            v212 = v140[18];
            v213 = v138 + v212;
            v214 = &v139[v212];
            *(_BYTE *)(v213 + 16) = v214[16];
            *(_OWORD *)v213 = *(_OWORD *)v214;
            goto LABEL_77;
          }
          (*(void (**)(char *, uint64_t))(v105 + 8))(v127, v104);
        }
        v131 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
        goto LABEL_41;
      }
      (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v104);
    }
    v125 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
    goto LABEL_35;
  }
  if (v71)
  {
LABEL_19:
    v82 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_78;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v59 + 32))(v65, v66, v58);
  v65[v67[5]] = v66[v67[5]];
  v65[v67[6]] = v66[v67[6]];
  v65[v67[7]] = v66[v67[7]];
  *(_OWORD *)&v65[v67[8]] = *(_OWORD *)&v66[v67[8]];
  *(_OWORD *)&v65[v67[9]] = *(_OWORD *)&v66[v67[9]];
  v72 = v67[10];
  v73 = &v65[v72];
  v74 = &v66[v72];
  *(_QWORD *)v73 = *(_QWORD *)v74;
  v73[8] = v74[8];
  *(_OWORD *)&v65[v67[11]] = *(_OWORD *)&v66[v67[11]];
  v75 = v67[12];
  v76 = &v65[v75];
  v77 = &v66[v75];
  v78 = type metadata accessor for URL(0);
  v79 = *(void (***)(void *, const void *, uint64_t))(v78 - 8);
  v80 = v79[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v80)(v77, 1, v78))
  {
    v81 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    v79[4](v76, v77, v78);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v79[7])(v76, 0, 1, v78);
  }
  v109 = v67[13];
  v110 = &v65[v109];
  v111 = &v66[v109];
  v228 = v80;
  v230 = v68;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v80)(&v66[v109], 1, v78))
  {
    v112 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    v79[4](v110, v111, v78);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v79[7])(v110, 0, 1, v78);
  }
  *(_OWORD *)&v65[v67[14]] = *(_OWORD *)&v66[v67[14]];
  *(_QWORD *)&v65[v67[15]] = *(_QWORD *)&v66[v67[15]];
  v113 = v67[16];
  v114 = &v65[v113];
  v115 = &v66[v113];
  v116 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v117 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((_QWORD *)v116 - 1);
  if (v117[6](v115, 1, v116))
  {
    v118 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
  }
  else
  {
    __src = v117;
    v225 = v79;
    v119 = v115[1];
    *v114 = *v115;
    v114[1] = v119;
    v114[2] = v115[2];
    *((_WORD *)v114 + 24) = *((_WORD *)v115 + 24);
    v120 = *((_QWORD *)v115 + 8);
    *((_QWORD *)v114 + 7) = *((_QWORD *)v115 + 7);
    *((_QWORD *)v114 + 8) = v120;
    *((_BYTE *)v114 + 72) = *((_BYTE *)v115 + 72);
    v121 = v116[10];
    v122 = (char *)v114 + v121;
    v123 = (char *)v115 + v121;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v228)((char *)v115 + v121, 1, v78))
    {
      v124 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v122, v123, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    }
    else
    {
      v225[4](v122, v123, v78);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v225[7])(v122, 0, 1, v78);
    }
    v152 = v116[11];
    v153 = (char *)v114 + v152;
    v154 = (char *)v115 + v152;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v228)((char *)v115 + v152, 1, v78))
    {
      v155 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
      v79 = v225;
    }
    else
    {
      v156 = v154;
      v79 = v225;
      v225[4](v153, v156, v78);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v225[7])(v153, 0, 1, v78);
    }
    v157 = v116[12];
    v158 = (char *)v114 + v157;
    v159 = (char *)v115 + v157;
    *(_QWORD *)v158 = *(_QWORD *)v159;
    v158[8] = v159[8];
    *(_OWORD *)((char *)v114 + v116[13]) = *(_OWORD *)((char *)v115 + v116[13]);
    *(_QWORD *)((char *)v114 + v116[14]) = *(_QWORD *)((char *)v115 + v116[14]);
    *(_OWORD *)((char *)v114 + v116[15]) = *(_OWORD *)((char *)v115 + v116[15]);
    *(_QWORD *)((char *)v114 + v116[16]) = *(_QWORD *)((char *)v115 + v116[16]);
    v160 = v116[17];
    v161 = (char *)v114 + v160;
    v162 = (char *)v115 + v160;
    v161[16] = v162[16];
    *(_OWORD *)v161 = *(_OWORD *)v162;
    v163 = v116[18];
    v164 = (char *)v114 + v163;
    v165 = (char *)v115 + v163;
    v164[16] = v165[16];
    *(_OWORD *)v164 = *(_OWORD *)v165;
    (*((void (**)(_OWORD *, _QWORD, uint64_t, int *))__src + 7))(v114, 0, 1, v116);
  }
  *(_DWORD *)&v65[v67[17]] = *(_DWORD *)&v66[v67[17]];
  *(_QWORD *)&v65[v67[18]] = *(_QWORD *)&v66[v67[18]];
  v166 = v79[4];
  v166(&v65[v67[19]], &v66[v67[19]], v78);
  v166(&v65[v67[20]], &v66[v67[20]], v78);
  v166(&v65[v67[21]], &v66[v67[21]], v78);
  v166(&v65[v67[22]], &v66[v67[22]], v78);
  v166(&v65[v67[23]], &v66[v67[23]], v78);
  v166(&v65[v67[24]], &v66[v67[24]], v78);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v230 + 56))(v65, 0, 1, v67);
LABEL_78:
  v216 = *(int *)(type metadata accessor for ProductInfoState(0) + 20);
  v217 = &v65[v216];
  v218 = (uint64_t *)&v66[v216];
  v220 = *v218;
  v219 = v218[1];
  *v217 = v220;
  v217[1] = v219;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006E209C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E20A8);
}

uint64_t sub_1006E20A8(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for StableIdentifier(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1010ED860);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[24];
      }
      else
      {
        v10 = type metadata accessor for ProductInfoState(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[26];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1006E2170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E217C);
}

uint64_t sub_1006E217C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for StableIdentifier(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1010ED860);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[24];
      }
      else
      {
        v10 = type metadata accessor for ProductInfoState(0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[26];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1006E2240(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[23];

  v8[0] = &unk_100E498C0;
  v2 = type metadata accessor for StableIdentifier(319);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    v8[2] = &unk_100E498C0;
    v8[3] = &unk_100E498C0;
    v8[4] = &unk_100E498C0;
    v8[5] = &unk_100E498C0;
    v8[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[9] = &unk_100E498C0;
    v8[10] = &unk_100E49928;
    v8[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[12] = &unk_100E498C0;
    v8[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[14] = (char *)&value witness table for Builtin.Int64 + 64;
    v8[15] = &unk_100E498C0;
    v8[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v8[18] = &unk_100E49928;
    v8[19] = &unk_100E49928;
    sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v8[20] = *(_QWORD *)(v4 - 8) + 64;
      v8[21] = &unk_100E49940;
      v6 = type metadata accessor for ProductInfoState(319);
      if (v7 <= 0x3F)
      {
        v8[22] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 23, v8, a1 + 16);
      }
    }
  }
}

_QWORD *sub_1006E2348(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t, __n128);
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *__dst;
  uint64_t v60;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v55 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v55 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    v60 = v11;
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v14 = swift_bridgeObjectRetain(v7);
    v57 = v13;
    ((void (*)(char *, char *, uint64_t, __n128))v13)(v9, v10, v11, v14);
    v15 = a3[6];
    v16 = a3[7];
    v17 = (_QWORD *)((char *)v4 + v15);
    v18 = (_QWORD *)((char *)a2 + v15);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = (_QWORD *)((char *)v4 + v16);
    v21 = (_QWORD *)((char *)a2 + v16);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = a3[8];
    v24 = a3[9];
    v25 = (_QWORD *)((char *)v4 + v23);
    v26 = (_QWORD *)((char *)a2 + v23);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    v28 = (_QWORD *)((char *)v4 + v24);
    v29 = (_QWORD *)((char *)a2 + v24);
    v30 = v29[1];
    *v28 = *v29;
    v28[1] = v30;
    v31 = a3[10];
    v32 = a3[11];
    v33 = (_QWORD *)((char *)v4 + v31);
    v34 = (_QWORD *)((char *)a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *(_QWORD *)((char *)v4 + v32) = *(_QWORD *)((char *)a2 + v32);
    v36 = a3[13];
    *(_QWORD *)((char *)v4 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
    *((_BYTE *)v4 + v36) = *((_BYTE *)a2 + v36);
    v37 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
    v38 = (_QWORD *)((char *)v4 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = *v39;
    v41 = v39[1];
    v42 = a3[16];
    v43 = a3[17];
    v44 = *(_QWORD *)((char *)a2 + v42);
    *v38 = v40;
    v38[1] = v41;
    *(_QWORD *)((char *)v4 + v42) = v44;
    v45 = (_QWORD *)((char *)v4 + v43);
    v46 = *(_QWORD *)((char *)a2 + v43);
    v47 = *(_QWORD *)((char *)a2 + v43 + 8);
    v48 = a3[18];
    v49 = a3[19];
    v50 = *(_QWORD *)((char *)a2 + v48);
    *v45 = v46;
    v45[1] = v47;
    *(_QWORD *)((char *)v4 + v48) = v50;
    v58 = v12;
    __dst = (char *)v4 + v49;
    v51 = (char *)a2 + v49;
    v52 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v47);
    v53 = swift_bridgeObjectRetain(v50);
    if (v52(v51, 1, v60, v53))
    {
      v54 = sub_10001A9A8(&qword_1010ED860);
      memcpy(__dst, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v57(__dst, v51, v60);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(__dst, 0, 1, v60);
    }
  }
  return v4;
}

uint64_t sub_1006E2584(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[18]));
  v7 = a1 + a2[19];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v7, v5);
  return result;
}

_QWORD *sub_1006E26B0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unsigned int (*v51)(char *, uint64_t, uint64_t, __n128);
  __n128 v52;
  uint64_t v53;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *__dst;
  uint64_t v58;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v13 = swift_bridgeObjectRetain(v6);
  v55 = v12;
  ((void (*)(char *, char *, uint64_t, __n128))v12)(v8, v9, v10, v13);
  v14 = a3[6];
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = (_QWORD *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = (_QWORD *)((char *)a1 + v15);
  v20 = (_QWORD *)((char *)a2 + v15);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = a3[8];
  v23 = a3[9];
  v24 = (_QWORD *)((char *)a1 + v22);
  v25 = (_QWORD *)((char *)a2 + v22);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  v27 = (_QWORD *)((char *)a1 + v23);
  v28 = (_QWORD *)((char *)a2 + v23);
  v29 = v28[1];
  *v27 = *v28;
  v27[1] = v29;
  v30 = a3[10];
  v31 = a3[11];
  v32 = (_QWORD *)((char *)a1 + v30);
  v33 = (_QWORD *)((char *)a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  v35 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v35) = *((_BYTE *)a2 + v35);
  v36 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = *v38;
  v40 = v38[1];
  v41 = a3[16];
  v42 = a3[17];
  v43 = *(_QWORD *)((char *)a2 + v41);
  *v37 = v39;
  v37[1] = v40;
  *(_QWORD *)((char *)a1 + v41) = v43;
  v44 = (_QWORD *)((char *)a1 + v42);
  v45 = *(_QWORD *)((char *)a2 + v42);
  v46 = *(_QWORD *)((char *)a2 + v42 + 8);
  v47 = a3[18];
  v48 = a3[19];
  v49 = *(_QWORD *)((char *)a2 + v47);
  *v44 = v45;
  v44[1] = v46;
  *(_QWORD *)((char *)a1 + v47) = v49;
  v56 = v11;
  __dst = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRetain(v46);
  v52 = swift_bridgeObjectRetain(v49);
  if (v51(v50, 1, v58, v52))
  {
    v53 = sub_10001A9A8(&qword_1010ED860);
    memcpy(__dst, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v55(__dst, v50, v58);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v58);
  }
  return a1;
}

_QWORD *sub_1006E28C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 24);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = (_QWORD *)((char *)a1 + v17);
  v19 = (_QWORD *)((char *)a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  v25 = a3[9];
  v26 = (_QWORD *)((char *)a1 + v25);
  v27 = (_QWORD *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  v29 = a3[10];
  v30 = (_QWORD *)((char *)a1 + v29);
  v31 = (_QWORD *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  v33 = a3[15];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  *v34 = *v35;
  v36 = v35[1];
  v34[1] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  v37 = a3[17];
  v38 = (_QWORD *)((char *)a1 + v37);
  v39 = (_QWORD *)((char *)a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  v41 = a3[18];
  v42 = *(_QWORD *)((char *)a2 + v41);
  *(_QWORD *)((char *)a1 + v41) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  v43 = a3[19];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v46((char *)a1 + v43, 1, v10);
  v47 = v46(v45, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v47)
    {
      v12(v44, v45, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v44, v10);
    goto LABEL_6;
  }
  if (v47)
  {
LABEL_6:
    v48 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v44, v45, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v44, 0, 1, v10);
  return a1;
}

_OWORD *sub_1006E2B90(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + v14) = *(_QWORD *)((char *)a2 + v14);
  v15 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
  v16 = a3[15];
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  *(_OWORD *)((char *)a1 + v16) = *(_OWORD *)((char *)a2 + v16);
  v17 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  *(_OWORD *)((char *)a1 + v17) = *(_OWORD *)((char *)a2 + v17);
  v18 = a3[19];
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v20, 1, v9))
  {
    v21 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v11(v19, v20, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
  }
  return a1;
}

_QWORD *sub_1006E2CF8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t (*v53)(char *, uint64_t, uint64_t);
  int v54;
  uint64_t v55;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[6];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[8];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  v28 = a3[9];
  v29 = (_QWORD *)((char *)a1 + v28);
  v30 = (_QWORD *)((char *)a2 + v28);
  v32 = *v30;
  v31 = v30[1];
  *v29 = v32;
  v29[1] = v31;
  swift_bridgeObjectRelease();
  v33 = a3[10];
  v34 = (_QWORD *)((char *)a1 + v33);
  v35 = (_QWORD *)((char *)a2 + v33);
  v37 = *v35;
  v36 = v35[1];
  *v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v38 = a3[12];
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + v38) = *(_QWORD *)((char *)a2 + v38);
  v39 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *(_QWORD *)((char *)a1 + v39) = *(_QWORD *)((char *)a2 + v39);
  v40 = a3[15];
  v41 = (_QWORD *)((char *)a1 + v40);
  v42 = (_QWORD *)((char *)a2 + v40);
  v44 = *v42;
  v43 = v42[1];
  *v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  v45 = a3[17];
  *(_QWORD *)((char *)a1 + a3[16]) = *(_QWORD *)((char *)a2 + a3[16]);
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v49 = *v47;
  v48 = v47[1];
  *v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  swift_bridgeObjectRelease();
  v50 = a3[19];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  LODWORD(v8) = v53((char *)a1 + v50, 1, v10);
  v54 = v53(v52, 1, v10);
  if (!(_DWORD)v8)
  {
    if (!v54)
    {
      v12(v51, v52, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v51, v10);
    goto LABEL_6;
  }
  if (v54)
  {
LABEL_6:
    v55 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v51, v52, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v51, 0, 1, v10);
  return a1;
}

uint64_t sub_1006E2F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006E2F40);
}

uint64_t sub_1006E2F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = sub_10001A9A8(&qword_1010ED860);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1006E2FE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006E2FF0);
}

uint64_t sub_1006E2FF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = sub_10001A9A8(&qword_1010ED860);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 76);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1006E3090(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[16];

  v6[0] = &unk_100E498C0;
  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = &unk_100E498C0;
    v6[3] = &unk_100E498C0;
    v6[4] = &unk_100E498C0;
    v6[5] = &unk_100E498C0;
    v6[6] = &unk_100E498C0;
    v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[9] = &unk_100E49928;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = &unk_100E498C0;
    v6[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[13] = &unk_100E498C0;
    v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v6[15] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 16, v6, a1 + 16);
    }
  }
}

uint64_t sub_1006E3168(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1006E31C8 + 4 * byte_100E49830[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_1006E3E14(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      v4 = (int *)type metadata accessor for OwnedBeaconState(0);
      v5 = a1 + v4[5];
      v6 = type metadata accessor for StableIdentifier(0);
      switch(swift_getEnumCaseMultiPayload(v5, v6))
      {
        case 0u:
        case 4u:
          goto LABEL_11;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 2u:
          v12 = type metadata accessor for UUID(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v5, v12);
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_11;
        case 3u:
          v13 = type metadata accessor for UUID(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v5, v13);
          sub_10001A9A8((uint64_t *)&unk_1010F46F0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_11:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = a1 + v4[24];
      v15 = type metadata accessor for UUID(0);
      v16 = *(_QWORD *)(v15 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
      v17 = a1 + v4[26];
      v18 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48))(v17, 1, v18))
      {
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v17, v15);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v17 + v18[12];
        v20 = type metadata accessor for URL(0);
        v21 = *(_QWORD *)(v20 - 8);
        v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
        if (!v22(v19, 1, v20))
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
        v23 = v17 + v18[13];
        if (!v22(v23, 1, v20))
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
        swift_bridgeObjectRelease();
        v24 = v17 + v18[16];
        v25 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v26 = v24 + *(int *)(v25 + 40);
          if (!v22(v26, 1, v20))
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v26, v20);
          v27 = v24 + *(int *)(v25 + 44);
          if (!v22(v27, 1, v20))
            (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v27, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v28(v17 + v18[19], v20);
        v28(v17 + v18[20], v20);
        v28(v17 + v18[21], v20);
        v28(v17 + v18[22], v20);
        v28(v17 + v18[23], v20);
        v28(v17 + v18[24], v20);
      }
      type metadata accessor for ProductInfoState(0);
      goto LABEL_27;
    case 1:
      swift_bridgeObjectRelease();
      v7 = type metadata accessor for SharedBeaconState(0);
      v8 = a1 + *(int *)(v7 + 20);
      v9 = type metadata accessor for UUID(0);
      v10 = *(_QWORD *)(v9 - 8);
      v29 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v29(v8, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = a1 + *(int *)(v7 + 76);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
      if (!(_DWORD)result)
        return ((uint64_t (*)(uint64_t, uint64_t))v29)(v11, v9);
      return result;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_27;
    case 3:
      swift_bridgeObjectRelease();
LABEL_27:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

void sub_1006E4410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1006E4468 + 4 * byte_100E49842[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_1006E4468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t EnumCaseMultiPayload;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (char *)v11 + *(int *)(type metadata accessor for OwnedBeaconState(0) + 20);
  v14 = type metadata accessor for StableIdentifier(0);
  swift_bridgeObjectRetain(v12);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_1006E44D0 + 4 * byte_100E49846[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v16, v17, v18, v19, v20, v21, v22, a9, a10);
}

uint64_t sub_1006E44D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__dst, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  int *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int *v115;
  unsigned int (*v116)(char *, uint64_t, int *, __n128);
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (*v152)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  void (*v159)(char *, char *, uint64_t, __n128);
  __n128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  void *v166;
  unsigned int (*v167)(const void *, uint64_t, uint64_t, __n128);
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(char *, uint64_t, uint64_t);
  uint64_t v180;
  unsigned int v181;

  v38 = v37[1];
  *v34 = *v37;
  v34[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_storeEnumTagMultiPayload(v34, v35, v36);
  v39 = v32[6];
  v40 = (_QWORD *)(v31 + v39);
  v41 = (_QWORD *)(v33 + v39);
  v178 = v41[1];
  *v40 = *v41;
  v40[1] = v178;
  v42 = v32[7];
  v43 = (_QWORD *)(v31 + v42);
  v44 = (_QWORD *)(v33 + v42);
  v176 = v44[1];
  *v43 = *v44;
  v43[1] = v176;
  v45 = v32[8];
  v46 = (_QWORD *)(v31 + v45);
  v47 = (_QWORD *)(v33 + v45);
  v174 = v47[1];
  *v46 = *v47;
  v46[1] = v174;
  v48 = v32[9];
  v49 = (_QWORD *)(v31 + v48);
  v50 = (_QWORD *)(v33 + v48);
  v172 = v50[1];
  *v49 = *v50;
  v49[1] = v172;
  *(_QWORD *)(v31 + v32[10]) = *(_QWORD *)(v33 + v32[10]);
  *(_QWORD *)(v31 + v32[11]) = *(_QWORD *)(v33 + v32[11]);
  *(_QWORD *)(v31 + v32[12]) = *(_QWORD *)(v33 + v32[12]);
  v51 = v32[13];
  v52 = (_QWORD *)(v31 + v51);
  v53 = (_QWORD *)(v33 + v51);
  v169 = v53[1];
  *v52 = *v53;
  v52[1] = v169;
  *(_BYTE *)(v31 + v32[14]) = *(_BYTE *)(v33 + v32[14]);
  *(_QWORD *)(v31 + v32[15]) = *(_QWORD *)(v33 + v32[15]);
  v54 = v32[16];
  v55 = (_QWORD *)(v31 + v54);
  v56 = (_QWORD *)(v33 + v54);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  *(_QWORD *)(v31 + v32[17]) = *(_QWORD *)(v33 + v32[17]);
  *(_QWORD *)(v31 + v32[18]) = *(_QWORD *)(v33 + v32[18]);
  v58 = v32[19];
  v59 = (_QWORD *)(v31 + v58);
  v60 = (_QWORD *)(v33 + v58);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  v62 = v32[20];
  v63 = *(_QWORD *)(v33 + v62);
  *(_QWORD *)(v31 + v62) = v63;
  v64 = v32[21];
  v65 = *(_QWORD *)(v33 + v64);
  *(_QWORD *)(v31 + v64) = v65;
  *(_BYTE *)(v31 + v32[22]) = *(_BYTE *)(v33 + v32[22]);
  *(_BYTE *)(v31 + v32[23]) = *(_BYTE *)(v33 + v32[23]);
  v66 = v32[24];
  v166 = (void *)(v31 + v66);
  v67 = (const void *)(v33 + v66);
  v68 = type metadata accessor for UUID(0);
  v69 = *(_QWORD *)(v68 - 8);
  v167 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v69 + 48);
  swift_bridgeObjectRetain(v178);
  swift_bridgeObjectRetain(v176);
  swift_bridgeObjectRetain(v174);
  swift_bridgeObjectRetain(v172);
  swift_bridgeObjectRetain(v169);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v63);
  v70 = swift_bridgeObjectRetain(v65);
  if (v167(v67, 1, v68, v70))
  {
    v71 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v166, v67, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v69 + 16))(v166, v67, v68);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v166, 0, 1, v68);
  }
  v72 = v181;
  *(_WORD *)(v31 + v32[25]) = *(_WORD *)(v33 + v32[25]);
  v73 = v32[26];
  v74 = (char *)(v31 + v73);
  v75 = (char *)(v33 + v73);
  v76 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v77 = *((_QWORD *)v76 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v77 + 48))(v75, 1, v76))
  {
    v78 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    v79 = v180;
  }
  else
  {
    v173 = v77;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v74, v75, v68);
    v74[v76[5]] = v75[v76[5]];
    v74[v76[6]] = v75[v76[6]];
    v74[v76[7]] = v75[v76[7]];
    v80 = v76[8];
    v81 = &v74[v80];
    v82 = &v75[v80];
    v83 = *((_QWORD *)v82 + 1);
    *(_QWORD *)v81 = *(_QWORD *)v82;
    *((_QWORD *)v81 + 1) = v83;
    v84 = v76[9];
    v85 = &v74[v84];
    v86 = &v75[v84];
    v87 = *((_QWORD *)v86 + 1);
    *(_QWORD *)v85 = *(_QWORD *)v86;
    *((_QWORD *)v85 + 1) = v87;
    v88 = v76[10];
    v89 = &v74[v88];
    v90 = &v75[v88];
    *(_QWORD *)v89 = *(_QWORD *)v90;
    v89[8] = v90[8];
    v91 = v76[11];
    v92 = &v74[v91];
    v93 = &v75[v91];
    v94 = *((_QWORD *)v93 + 1);
    *(_QWORD *)v92 = *(_QWORD *)v93;
    *((_QWORD *)v92 + 1) = v94;
    v95 = v76[12];
    v170 = &v74[v95];
    v96 = &v75[v95];
    v97 = type metadata accessor for URL(0);
    v98 = *(_QWORD *)(v97 - 8);
    v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48);
    v100 = v83;
    v101 = v97;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v87);
    v102 = swift_bridgeObjectRetain(v94);
    v179 = v99;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v99)(v96, 1, v101, v102))
    {
      v103 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v170, v96, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v170, v96, v101);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v170, 0, 1, v101);
    }
    v104 = v76[13];
    v105 = &v74[v104];
    v106 = &v75[v104];
    v175 = v98;
    v177 = v101;
    if (v179(&v75[v104], 1, v101))
    {
      v107 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v105, v106, v101);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v105, 0, 1, v101);
    }
    v108 = v76[14];
    v109 = &v74[v108];
    v110 = &v75[v108];
    v111 = *((_QWORD *)v110 + 1);
    *(_QWORD *)v109 = *(_QWORD *)v110;
    *((_QWORD *)v109 + 1) = v111;
    *(_QWORD *)&v74[v76[15]] = *(_QWORD *)&v75[v76[15]];
    v112 = v76[16];
    v113 = &v74[v112];
    v114 = &v75[v112];
    v115 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v171 = *((_QWORD *)v115 - 1);
    v116 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v171 + 48);
    v117 = swift_bridgeObjectRetain(v111);
    if (v116(v114, 1, v115, v117))
    {
      v118 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      v119 = *((_QWORD *)v114 + 1);
      *(_QWORD *)v113 = *(_QWORD *)v114;
      *((_QWORD *)v113 + 1) = v119;
      v120 = *((_QWORD *)v114 + 3);
      *((_QWORD *)v113 + 2) = *((_QWORD *)v114 + 2);
      *((_QWORD *)v113 + 3) = v120;
      v121 = *((_QWORD *)v114 + 5);
      *((_QWORD *)v113 + 4) = *((_QWORD *)v114 + 4);
      *((_QWORD *)v113 + 5) = v121;
      *((_WORD *)v113 + 24) = *((_WORD *)v114 + 24);
      v113[72] = v114[72];
      v122 = *((_QWORD *)v114 + 8);
      *((_QWORD *)v113 + 7) = *((_QWORD *)v114 + 7);
      *((_QWORD *)v113 + 8) = v122;
      v123 = v115[10];
      v168 = &v113[v123];
      v124 = &v114[v123];
      swift_bridgeObjectRetain(v119);
      swift_bridgeObjectRetain(v120);
      v125 = swift_bridgeObjectRetain(v121);
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v179)(v124, 1, v177, v125))
      {
        v126 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v168, v124, *(_QWORD *)(*(_QWORD *)(v126 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v168, v124, v177);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v168, 0, 1, v177);
      }
      v127 = v115[11];
      v128 = &v113[v127];
      v129 = &v114[v127];
      if (v179(&v114[v127], 1, v177))
      {
        v130 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v128, v129, v177);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v128, 0, 1, v177);
      }
      v131 = v115[12];
      v132 = &v113[v131];
      v133 = &v114[v131];
      *(_QWORD *)v132 = *(_QWORD *)v133;
      v132[8] = v133[8];
      v134 = v115[13];
      v135 = &v113[v134];
      v136 = &v114[v134];
      v137 = *((_QWORD *)v136 + 1);
      *(_QWORD *)v135 = *(_QWORD *)v136;
      *((_QWORD *)v135 + 1) = v137;
      v138 = v115[14];
      v139 = *(_QWORD *)&v114[v138];
      *(_QWORD *)&v113[v138] = v139;
      v140 = v115[15];
      v141 = &v113[v140];
      v142 = &v114[v140];
      v143 = *((_QWORD *)v142 + 1);
      *(_QWORD *)v141 = *(_QWORD *)v142;
      *((_QWORD *)v141 + 1) = v143;
      v144 = v115[16];
      v145 = *(_QWORD *)&v114[v144];
      *(_QWORD *)&v113[v144] = v145;
      v146 = v115[17];
      v147 = &v113[v146];
      v148 = &v114[v146];
      *(_OWORD *)v147 = *(_OWORD *)v148;
      v147[16] = v148[16];
      v149 = v115[18];
      v150 = &v113[v149];
      v151 = &v114[v149];
      *(_OWORD *)v150 = *(_OWORD *)v151;
      v150[16] = v151[16];
      v152 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v171 + 56);
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRetain(v143);
      v153 = swift_bridgeObjectRetain(v145);
      v152(v113, 0, 1, v115, v153);
    }
    *(_DWORD *)&v74[v76[17]] = *(_DWORD *)&v75[v76[17]];
    v154 = v76[18];
    v155 = *(_QWORD *)&v75[v154];
    *(_QWORD *)&v74[v154] = v155;
    v156 = v76[19];
    v157 = &v74[v156];
    v158 = &v75[v156];
    v159 = *(void (**)(char *, char *, uint64_t, __n128))(v175 + 16);
    v160 = swift_bridgeObjectRetain(v155);
    v159(v157, v158, v177, v160);
    ((void (*)(char *, char *, uint64_t))v159)(&v74[v76[20]], &v75[v76[20]], v177);
    ((void (*)(char *, char *, uint64_t))v159)(&v74[v76[21]], &v75[v76[21]], v177);
    ((void (*)(char *, char *, uint64_t))v159)(&v74[v76[22]], &v75[v76[22]], v177);
    ((void (*)(char *, char *, uint64_t))v159)(&v74[v76[23]], &v75[v76[23]], v177);
    ((void (*)(char *, char *, uint64_t))v159)(&v74[v76[24]], &v75[v76[24]], v177);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v173 + 56))(v74, 0, 1, v76);
    v79 = v180;
    v72 = v181;
  }
  v161 = *(int *)(type metadata accessor for ProductInfoState(0) + 20);
  v162 = &v74[v161];
  v163 = &v75[v161];
  v164 = *((_QWORD *)v163 + 1);
  *(_QWORD *)v162 = *(_QWORD *)v163;
  *((_QWORD *)v162 + 1) = v164;
  swift_bridgeObjectRetain(v164);
  swift_storeEnumTagMultiPayload(v31, v79, v72);
  return v31;
}

uint64_t sub_1006E5070(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_1000126B0(result, type metadata accessor for BeaconState);
    v5 = (char *)&loc_1006E50E0 + 4 * byte_100E4984B[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

_OWORD *sub_1006E5E40(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v82;
  char *__dst;
  char *__dsta;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v15 = (int *)type metadata accessor for SharedBeaconState(0);
    v16 = v15[5];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
    v21(v17, v18, v19);
    *(_OWORD *)((char *)a1 + v15[6]) = *(_OWORD *)((char *)a2 + v15[6]);
    *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
    *(_OWORD *)((char *)a1 + v15[8]) = *(_OWORD *)((char *)a2 + v15[8]);
    *(_OWORD *)((char *)a1 + v15[9]) = *(_OWORD *)((char *)a2 + v15[9]);
    *(_OWORD *)((char *)a1 + v15[10]) = *(_OWORD *)((char *)a2 + v15[10]);
    *(_QWORD *)((char *)a1 + v15[11]) = *(_QWORD *)((char *)a2 + v15[11]);
    *(_QWORD *)((char *)a1 + v15[12]) = *(_QWORD *)((char *)a2 + v15[12]);
    *((_BYTE *)a1 + v15[13]) = *((_BYTE *)a2 + v15[13]);
    *(_QWORD *)((char *)a1 + v15[14]) = *(_QWORD *)((char *)a2 + v15[14]);
    *(_OWORD *)((char *)a1 + v15[15]) = *(_OWORD *)((char *)a2 + v15[15]);
    *(_QWORD *)((char *)a1 + v15[16]) = *(_QWORD *)((char *)a2 + v15[16]);
    *(_OWORD *)((char *)a1 + v15[17]) = *(_OWORD *)((char *)a2 + v15[17]);
    *(_QWORD *)((char *)a1 + v15[18]) = *(_QWORD *)((char *)a2 + v15[18]);
    v22 = v15[19];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v24, 1, v19))
    {
      v25 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v21(v23, v24, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
    }
    v26 = a1;
    v27 = a3;
    v28 = 1;
    goto LABEL_35;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    v7 = (int *)type metadata accessor for OwnedBeaconState(0);
    v8 = v7[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for StableIdentifier(0);
    v12 = swift_getEnumCaseMultiPayload(v10, v11);
    if (v12 == 3)
    {
      v29 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v9, v10, v29);
      v30 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v9[v30[12]] = *(_OWORD *)&v10[v30[12]];
      *(_OWORD *)&v9[v30[16]] = *(_OWORD *)&v10[v30[16]];
      *(_OWORD *)&v9[v30[20]] = *(_OWORD *)&v10[v30[20]];
      v9[v30[24]] = v10[v30[24]];
      swift_storeEnumTagMultiPayload(v9, v11, 3);
    }
    else if (v12 == 2)
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
      v14 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v9[v14[12]] = *(_OWORD *)&v10[v14[12]];
      *(_OWORD *)&v9[v14[16]] = *(_OWORD *)&v10[v14[16]];
      *(_OWORD *)&v9[v14[20]] = *(_OWORD *)&v10[v14[20]];
      *(_WORD *)&v9[v14[24]] = *(_WORD *)&v10[v14[24]];
      *(_OWORD *)&v9[v14[28]] = *(_OWORD *)&v10[v14[28]];
      swift_storeEnumTagMultiPayload(v9, v11, 2);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    *(_OWORD *)((char *)a1 + v7[6]) = *(_OWORD *)((char *)a2 + v7[6]);
    *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
    *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
    *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
    *(_QWORD *)((char *)a1 + v7[10]) = *(_QWORD *)((char *)a2 + v7[10]);
    *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
    *(_QWORD *)((char *)a1 + v7[12]) = *(_QWORD *)((char *)a2 + v7[12]);
    *(_OWORD *)((char *)a1 + v7[13]) = *(_OWORD *)((char *)a2 + v7[13]);
    *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
    *(_QWORD *)((char *)a1 + v7[15]) = *(_QWORD *)((char *)a2 + v7[15]);
    *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
    *(_QWORD *)((char *)a1 + v7[17]) = *(_QWORD *)((char *)a2 + v7[17]);
    *(_QWORD *)((char *)a1 + v7[18]) = *(_QWORD *)((char *)a2 + v7[18]);
    *(_OWORD *)((char *)a1 + v7[19]) = *(_OWORD *)((char *)a2 + v7[19]);
    *(_QWORD *)((char *)a1 + v7[20]) = *(_QWORD *)((char *)a2 + v7[20]);
    *(_QWORD *)((char *)a1 + v7[21]) = *(_QWORD *)((char *)a2 + v7[21]);
    *((_BYTE *)a1 + v7[22]) = *((_BYTE *)a2 + v7[22]);
    *((_BYTE *)a1 + v7[23]) = *((_BYTE *)a2 + v7[23]);
    v31 = v7[24];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for UUID(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    *(_WORD *)((char *)a1 + v7[25]) = *(_WORD *)((char *)a2 + v7[25]);
    v37 = v7[26];
    v38 = (char *)a1 + v37;
    v39 = (char *)a2 + v37;
    v40 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
    v41 = *((_QWORD *)v40 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
    {
      v42 = sub_10001A9A8(&qword_10110EEB0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v85 = v41;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v38, v39, v34);
      v38[v40[5]] = v39[v40[5]];
      v38[v40[6]] = v39[v40[6]];
      v38[v40[7]] = v39[v40[7]];
      *(_OWORD *)&v38[v40[8]] = *(_OWORD *)&v39[v40[8]];
      *(_OWORD *)&v38[v40[9]] = *(_OWORD *)&v39[v40[9]];
      v43 = v40[10];
      v44 = &v38[v43];
      v45 = &v39[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
      v46 = v40[12];
      v47 = &v38[v46];
      v48 = &v39[v46];
      v49 = type metadata accessor for URL(0);
      v50 = *(_QWORD *)(v49 - 8);
      v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      if (v87(v48, 1, v49))
      {
        v51 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
      }
      v52 = v40[13];
      v53 = &v38[v52];
      v54 = &v39[v52];
      v86 = v50;
      if (v87(&v39[v52], 1, v49))
      {
        v55 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v53, v54, v49);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v53, 0, 1, v49);
      }
      *(_OWORD *)&v38[v40[14]] = *(_OWORD *)&v39[v40[14]];
      *(_QWORD *)&v38[v40[15]] = *(_QWORD *)&v39[v40[15]];
      v56 = v40[16];
      v57 = &v38[v56];
      v58 = &v39[v56];
      v59 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      v60 = *((_QWORD *)v59 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v58, 1, v59))
      {
        v61 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        v62 = *((_OWORD *)v58 + 1);
        *(_OWORD *)v57 = *(_OWORD *)v58;
        *((_OWORD *)v57 + 1) = v62;
        *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
        *((_WORD *)v57 + 24) = *((_WORD *)v58 + 24);
        v63 = *((_QWORD *)v58 + 8);
        *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
        *((_QWORD *)v57 + 8) = v63;
        v57[72] = v58[72];
        v64 = v59[10];
        v82 = v60;
        __dst = &v57[v64];
        v65 = &v58[v64];
        if (v87(&v58[v64], 1, v49))
        {
          v66 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v86 + 32))(__dst, v65, v49);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v49);
        }
        v67 = v59[11];
        __dsta = &v57[v67];
        v68 = &v58[v67];
        if (v87(&v58[v67], 1, v49))
        {
          v69 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__dsta, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v86 + 32))(__dsta, v68, v49);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dsta, 0, 1, v49);
        }
        v70 = v59[12];
        v71 = &v57[v70];
        v72 = &v58[v70];
        *(_QWORD *)v71 = *(_QWORD *)v72;
        v71[8] = v72[8];
        *(_OWORD *)&v57[v59[13]] = *(_OWORD *)&v58[v59[13]];
        *(_QWORD *)&v57[v59[14]] = *(_QWORD *)&v58[v59[14]];
        *(_OWORD *)&v57[v59[15]] = *(_OWORD *)&v58[v59[15]];
        *(_QWORD *)&v57[v59[16]] = *(_QWORD *)&v58[v59[16]];
        v73 = v59[17];
        v74 = &v57[v73];
        v75 = &v58[v73];
        v74[16] = v75[16];
        *(_OWORD *)v74 = *(_OWORD *)v75;
        v76 = v59[18];
        v77 = &v57[v76];
        v78 = &v58[v76];
        v77[16] = v78[16];
        *(_OWORD *)v77 = *(_OWORD *)v78;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v82 + 56))(v57, 0, 1, v59);
      }
      *(_DWORD *)&v38[v40[17]] = *(_DWORD *)&v39[v40[17]];
      *(_QWORD *)&v38[v40[18]] = *(_QWORD *)&v39[v40[18]];
      v79 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
      v79(&v38[v40[19]], &v39[v40[19]], v49);
      v79(&v38[v40[20]], &v39[v40[20]], v49);
      v79(&v38[v40[21]], &v39[v40[21]], v49);
      v79(&v38[v40[22]], &v39[v40[22]], v49);
      v79(&v38[v40[23]], &v39[v40[23]], v49);
      v79(&v38[v40[24]], &v39[v40[24]], v49);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v85 + 56))(v38, 0, 1, v40);
    }
    v80 = type metadata accessor for ProductInfoState(0);
    *(_OWORD *)&v38[*(int *)(v80 + 20)] = *(_OWORD *)&v39[*(int *)(v80 + 20)];
    v26 = a1;
    v27 = a3;
    v28 = 0;
LABEL_35:
    swift_storeEnumTagMultiPayload(v26, v27, v28);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_1006E67B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  uint64_t v82;
  char *__dst;
  char *__dsta;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t);

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for BeaconState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v15 = (int *)type metadata accessor for SharedBeaconState(0);
      v16 = v15[5];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for UUID(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v21(v17, v18, v19);
      *(_OWORD *)((char *)a1 + v15[6]) = *(_OWORD *)((char *)a2 + v15[6]);
      *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
      *(_OWORD *)((char *)a1 + v15[8]) = *(_OWORD *)((char *)a2 + v15[8]);
      *(_OWORD *)((char *)a1 + v15[9]) = *(_OWORD *)((char *)a2 + v15[9]);
      *(_OWORD *)((char *)a1 + v15[10]) = *(_OWORD *)((char *)a2 + v15[10]);
      *(_QWORD *)((char *)a1 + v15[11]) = *(_QWORD *)((char *)a2 + v15[11]);
      *(_QWORD *)((char *)a1 + v15[12]) = *(_QWORD *)((char *)a2 + v15[12]);
      *((_BYTE *)a1 + v15[13]) = *((_BYTE *)a2 + v15[13]);
      *(_QWORD *)((char *)a1 + v15[14]) = *(_QWORD *)((char *)a2 + v15[14]);
      *(_OWORD *)((char *)a1 + v15[15]) = *(_OWORD *)((char *)a2 + v15[15]);
      *(_QWORD *)((char *)a1 + v15[16]) = *(_QWORD *)((char *)a2 + v15[16]);
      *(_OWORD *)((char *)a1 + v15[17]) = *(_OWORD *)((char *)a2 + v15[17]);
      *(_QWORD *)((char *)a1 + v15[18]) = *(_QWORD *)((char *)a2 + v15[18]);
      v22 = v15[19];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v24, 1, v19))
      {
        v25 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v21(v23, v24, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v23, 0, 1, v19);
      }
      v26 = a1;
      v27 = a3;
      v28 = 1;
      goto LABEL_36;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      v7 = (int *)type metadata accessor for OwnedBeaconState(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for StableIdentifier(0);
      v12 = swift_getEnumCaseMultiPayload(v10, v11);
      if (v12 == 3)
      {
        v29 = type metadata accessor for UUID(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v9, v10, v29);
        v30 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        *(_OWORD *)&v9[v30[12]] = *(_OWORD *)&v10[v30[12]];
        *(_OWORD *)&v9[v30[16]] = *(_OWORD *)&v10[v30[16]];
        *(_OWORD *)&v9[v30[20]] = *(_OWORD *)&v10[v30[20]];
        v9[v30[24]] = v10[v30[24]];
        swift_storeEnumTagMultiPayload(v9, v11, 3);
      }
      else if (v12 == 2)
      {
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v9, v10, v13);
        v14 = (int *)sub_10001A9A8(&qword_101106F40);
        *(_OWORD *)&v9[v14[12]] = *(_OWORD *)&v10[v14[12]];
        *(_OWORD *)&v9[v14[16]] = *(_OWORD *)&v10[v14[16]];
        *(_OWORD *)&v9[v14[20]] = *(_OWORD *)&v10[v14[20]];
        *(_WORD *)&v9[v14[24]] = *(_WORD *)&v10[v14[24]];
        *(_OWORD *)&v9[v14[28]] = *(_OWORD *)&v10[v14[28]];
        swift_storeEnumTagMultiPayload(v9, v11, 2);
      }
      else
      {
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      *(_OWORD *)((char *)a1 + v7[6]) = *(_OWORD *)((char *)a2 + v7[6]);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      *(_OWORD *)((char *)a1 + v7[8]) = *(_OWORD *)((char *)a2 + v7[8]);
      *(_OWORD *)((char *)a1 + v7[9]) = *(_OWORD *)((char *)a2 + v7[9]);
      *(_QWORD *)((char *)a1 + v7[10]) = *(_QWORD *)((char *)a2 + v7[10]);
      *(_QWORD *)((char *)a1 + v7[11]) = *(_QWORD *)((char *)a2 + v7[11]);
      *(_QWORD *)((char *)a1 + v7[12]) = *(_QWORD *)((char *)a2 + v7[12]);
      *(_OWORD *)((char *)a1 + v7[13]) = *(_OWORD *)((char *)a2 + v7[13]);
      *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
      *(_QWORD *)((char *)a1 + v7[15]) = *(_QWORD *)((char *)a2 + v7[15]);
      *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
      *(_QWORD *)((char *)a1 + v7[17]) = *(_QWORD *)((char *)a2 + v7[17]);
      *(_QWORD *)((char *)a1 + v7[18]) = *(_QWORD *)((char *)a2 + v7[18]);
      *(_OWORD *)((char *)a1 + v7[19]) = *(_OWORD *)((char *)a2 + v7[19]);
      *(_QWORD *)((char *)a1 + v7[20]) = *(_QWORD *)((char *)a2 + v7[20]);
      *(_QWORD *)((char *)a1 + v7[21]) = *(_QWORD *)((char *)a2 + v7[21]);
      *((_BYTE *)a1 + v7[22]) = *((_BYTE *)a2 + v7[22]);
      *((_BYTE *)a1 + v7[23]) = *((_BYTE *)a2 + v7[23]);
      v31 = v7[24];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v34 = type metadata accessor for UUID(0);
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      *(_WORD *)((char *)a1 + v7[25]) = *(_WORD *)((char *)a2 + v7[25]);
      v37 = v7[26];
      v38 = (char *)a1 + v37;
      v39 = (char *)a2 + v37;
      v40 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
      v41 = *((_QWORD *)v40 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
      {
        v42 = sub_10001A9A8(&qword_10110EEB0);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v85 = v41;
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v38, v39, v34);
        v38[v40[5]] = v39[v40[5]];
        v38[v40[6]] = v39[v40[6]];
        v38[v40[7]] = v39[v40[7]];
        *(_OWORD *)&v38[v40[8]] = *(_OWORD *)&v39[v40[8]];
        *(_OWORD *)&v38[v40[9]] = *(_OWORD *)&v39[v40[9]];
        v43 = v40[10];
        v44 = &v38[v43];
        v45 = &v39[v43];
        *(_QWORD *)v44 = *(_QWORD *)v45;
        v44[8] = v45[8];
        *(_OWORD *)&v38[v40[11]] = *(_OWORD *)&v39[v40[11]];
        v46 = v40[12];
        v47 = &v38[v46];
        v48 = &v39[v46];
        v49 = type metadata accessor for URL(0);
        v50 = *(_QWORD *)(v49 - 8);
        v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
        if (v87(v48, 1, v49))
        {
          v51 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v47, v48, v49);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
        }
        v52 = v40[13];
        v53 = &v38[v52];
        v54 = &v39[v52];
        v86 = v50;
        if (v87(&v39[v52], 1, v49))
        {
          v55 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v53, v54, v49);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v53, 0, 1, v49);
        }
        *(_OWORD *)&v38[v40[14]] = *(_OWORD *)&v39[v40[14]];
        *(_QWORD *)&v38[v40[15]] = *(_QWORD *)&v39[v40[15]];
        v56 = v40[16];
        v57 = &v38[v56];
        v58 = &v39[v56];
        v59 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
        v60 = *((_QWORD *)v59 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v60 + 48))(v58, 1, v59))
        {
          v61 = sub_10001A9A8(&qword_1010FBA50);
          memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          v62 = *((_OWORD *)v58 + 1);
          *(_OWORD *)v57 = *(_OWORD *)v58;
          *((_OWORD *)v57 + 1) = v62;
          *((_OWORD *)v57 + 2) = *((_OWORD *)v58 + 2);
          *((_WORD *)v57 + 24) = *((_WORD *)v58 + 24);
          v63 = *((_QWORD *)v58 + 8);
          *((_QWORD *)v57 + 7) = *((_QWORD *)v58 + 7);
          *((_QWORD *)v57 + 8) = v63;
          v57[72] = v58[72];
          v64 = v59[10];
          v82 = v60;
          __dst = &v57[v64];
          v65 = &v58[v64];
          if (v87(&v58[v64], 1, v49))
          {
            v66 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(__dst, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v86 + 32))(__dst, v65, v49);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v49);
          }
          v67 = v59[11];
          __dsta = &v57[v67];
          v68 = &v58[v67];
          if (v87(&v58[v67], 1, v49))
          {
            v69 = sub_10001A9A8(&qword_1010FBA40);
            memcpy(__dsta, v68, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v86 + 32))(__dsta, v68, v49);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dsta, 0, 1, v49);
          }
          v70 = v59[12];
          v71 = &v57[v70];
          v72 = &v58[v70];
          *(_QWORD *)v71 = *(_QWORD *)v72;
          v71[8] = v72[8];
          *(_OWORD *)&v57[v59[13]] = *(_OWORD *)&v58[v59[13]];
          *(_QWORD *)&v57[v59[14]] = *(_QWORD *)&v58[v59[14]];
          *(_OWORD *)&v57[v59[15]] = *(_OWORD *)&v58[v59[15]];
          *(_QWORD *)&v57[v59[16]] = *(_QWORD *)&v58[v59[16]];
          v73 = v59[17];
          v74 = &v57[v73];
          v75 = &v58[v73];
          v74[16] = v75[16];
          *(_OWORD *)v74 = *(_OWORD *)v75;
          v76 = v59[18];
          v77 = &v57[v76];
          v78 = &v58[v76];
          v77[16] = v78[16];
          *(_OWORD *)v77 = *(_OWORD *)v78;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v82 + 56))(v57, 0, 1, v59);
        }
        *(_DWORD *)&v38[v40[17]] = *(_DWORD *)&v39[v40[17]];
        *(_QWORD *)&v38[v40[18]] = *(_QWORD *)&v39[v40[18]];
        v79 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
        v79(&v38[v40[19]], &v39[v40[19]], v49);
        v79(&v38[v40[20]], &v39[v40[20]], v49);
        v79(&v38[v40[21]], &v39[v40[21]], v49);
        v79(&v38[v40[22]], &v39[v40[22]], v49);
        v79(&v38[v40[23]], &v39[v40[23]], v49);
        v79(&v38[v40[24]], &v39[v40[24]], v49);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v85 + 56))(v38, 0, 1, v40);
      }
      v80 = type metadata accessor for ProductInfoState(0);
      *(_OWORD *)&v38[*(int *)(v80 + 20)] = *(_OWORD *)&v39[*(int *)(v80 + 20)];
      v26 = a1;
      v27 = a3;
      v28 = 0;
LABEL_36:
      swift_storeEnumTagMultiPayload(v26, v27, v28);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_1006E7138(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for OwnedBeaconState(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for SharedBeaconState(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "A";
      v5[3] = &unk_100E49998;
      swift_initEnumMetadataMultiPayload(a1, 256, 4, v5);
      return 0;
    }
  }
  return result;
}

uint64_t initializeWithCopy for SafeLocationState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for SafeLocationState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for SafeLocationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SafeLocationState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SafeLocationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationState()
{
  return &type metadata for SafeLocationState;
}

uint64_t destroy for BeaconStateCapture(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s12searchpartyd18BeaconStateCaptureVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for BeaconStateCapture(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for BeaconStateCapture(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for BeaconStateCapture()
{
  return &type metadata for BeaconStateCapture;
}

unint64_t sub_1006E74C0()
{
  unint64_t result;

  result = qword_101104AB8;
  if (!qword_101104AB8)
  {
    result = swift_getWitnessTable(byte_100E4A2A0, &type metadata for BeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104AB8);
  }
  return result;
}

unint64_t sub_1006E7504()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101104AC8;
  if (!qword_101104AC8)
  {
    v1 = sub_10001F784(&qword_101104AC0);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100006204(&qword_101104AD0, type metadata accessor for BeaconState, (uint64_t)&unk_100E49A0C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101104AC8);
  }
  return result;
}

unint64_t sub_1006E75A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101104AE0;
  if (!qword_101104AE0)
  {
    v1 = sub_10001F784(&qword_101104AD8);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_1006E7624();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101104AE0);
  }
  return result;
}

unint64_t sub_1006E7624()
{
  unint64_t result;

  result = qword_101104AE8;
  if (!qword_101104AE8)
  {
    result = swift_getWitnessTable(a5_9, &type metadata for SafeLocationState);
    atomic_store(result, (unint64_t *)&qword_101104AE8);
  }
  return result;
}

unint64_t sub_1006E7668()
{
  unint64_t result;

  result = qword_101104AF8;
  if (!qword_101104AF8)
  {
    result = swift_getWitnessTable(a1_23, &type metadata for ObservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104AF8);
  }
  return result;
}

unint64_t sub_1006E76AC()
{
  unint64_t result;

  result = qword_101104B08;
  if (!qword_101104B08)
  {
    result = swift_getWitnessTable(byte_100E4A200, &type metadata for ShareState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104B08);
  }
  return result;
}

unint64_t sub_1006E76F0()
{
  unint64_t result;

  result = qword_101104B18;
  if (!qword_101104B18)
  {
    result = swift_getWitnessTable(byte_100E4A1B0, &type metadata for ProductInfoState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104B18);
  }
  return result;
}

unint64_t sub_1006E7734()
{
  unint64_t result;

  result = qword_101104B28;
  if (!qword_101104B28)
  {
    result = swift_getWitnessTable(asc_100E4A160, &type metadata for OwnedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104B28);
  }
  return result;
}

unint64_t sub_1006E7778()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101104B38;
  if (!qword_101104B38)
  {
    v1 = sub_10001F784(&qword_101104B30);
    v2 = sub_100006204(&qword_101104B40, type metadata accessor for ShareState, (uint64_t)&unk_100E49AAC);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101104B38);
  }
  return result;
}

unint64_t sub_1006E77F4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_101104B50;
  if (!qword_101104B50)
  {
    v1 = sub_10001F784(&qword_101104B48);
    v2 = sub_1006E7858();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101104B50);
  }
  return result;
}

unint64_t sub_1006E7858()
{
  unint64_t result;

  result = qword_101104B58;
  if (!qword_101104B58)
  {
    result = swift_getWitnessTable(aE_34, &type metadata for ObservationState);
    atomic_store(result, (unint64_t *)&qword_101104B58);
  }
  return result;
}

unint64_t sub_1006E789C()
{
  unint64_t result;

  result = qword_101104B70;
  if (!qword_101104B70)
  {
    result = swift_getWitnessTable(aQ_26, &type metadata for SharedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104B70);
  }
  return result;
}

unint64_t sub_1006E78E0()
{
  unint64_t result;

  result = qword_101104B78;
  if (!qword_101104B78)
  {
    result = swift_getWitnessTable(a1_24, &type metadata for SharedBeaconGroupState);
    atomic_store(result, (unint64_t *)&qword_101104B78);
  }
  return result;
}

unint64_t sub_1006E7924()
{
  unint64_t result;

  result = qword_101104B80;
  if (!qword_101104B80)
  {
    result = swift_getWitnessTable(aY_48, &type metadata for OwnedBeaconGroupState);
    atomic_store(result, (unint64_t *)&qword_101104B80);
  }
  return result;
}

unint64_t sub_1006E7968()
{
  unint64_t result;

  result = qword_101104BA0;
  if (!qword_101104BA0)
  {
    result = swift_getWitnessTable(byte_100E4A070, &type metadata for SafeLocationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BA0);
  }
  return result;
}

uint64_t sub_1006E79AC(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable(a3, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SafeLocationState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1006E7A70 + 4 * byte_100E49859[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1006E7AA4 + 4 * byte_100E49854[v4]))();
}

uint64_t sub_1006E7AA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7AAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006E7AB4);
  return result;
}

uint64_t sub_1006E7AC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006E7AC8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1006E7ACC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7AD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationState.CodingKeys()
{
  return &type metadata for SafeLocationState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SharedBeaconState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1006E7B3C + 4 * byte_100E49863[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1006E7B70 + 4 * byte_100E4985E[v4]))();
}

uint64_t sub_1006E7B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006E7B80);
  return result;
}

uint64_t sub_1006E7B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006E7B94);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1006E7B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedBeaconState.CodingKeys()
{
  return &type metadata for SharedBeaconState.CodingKeys;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEA)
    goto LABEL_17;
  if (a2 + 22 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 22) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 22;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 22;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 22;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x17;
  v8 = v6 - 23;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 22 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 22) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE9)
    return ((uint64_t (*)(void))((char *)&loc_1006E7C98 + 4 * byte_100E4986D[v4]))();
  *a1 = a2 + 22;
  return ((uint64_t (*)(void))((char *)sub_1006E7CCC + 4 * byte_100E49868[v4]))();
}

uint64_t sub_1006E7CCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7CD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006E7CDCLL);
  return result;
}

uint64_t sub_1006E7CE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006E7CF0);
  *(_BYTE *)result = a2 + 22;
  return result;
}

uint64_t sub_1006E7CF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7CFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconState.CodingKeys()
{
  return &type metadata for OwnedBeaconState.CodingKeys;
}

ValueMetadata *type metadata accessor for ProductInfoState.CodingKeys()
{
  return &type metadata for ProductInfoState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ShareState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1006E7D78 + 4 * byte_100E49877[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1006E7DAC + 4 * byte_100E49872[v4]))();
}

uint64_t sub_1006E7DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006E7DBCLL);
  return result;
}

uint64_t sub_1006E7DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006E7DD0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1006E7DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareState.CodingKeys()
{
  return &type metadata for ShareState.CodingKeys;
}

ValueMetadata *type metadata accessor for ObservationState.CodingKeys()
{
  return &type metadata for ObservationState.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BeaconStateCapture.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1006E7E54 + 4 * byte_100E49881[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1006E7E88 + 4 * byte_100E4987C[v4]))();
}

uint64_t sub_1006E7E88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7E90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006E7E98);
  return result;
}

uint64_t sub_1006E7EA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006E7EACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1006E7EB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006E7EB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconStateCapture.CodingKeys()
{
  return &type metadata for BeaconStateCapture.CodingKeys;
}

ValueMetadata *type metadata accessor for SharedBeaconGroupState()
{
  return &type metadata for SharedBeaconGroupState;
}

uint64_t destroy for OwnedBeaconGroupState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for OwnedBeaconGroupState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for OwnedBeaconGroupState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for OwnedBeaconGroupState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroupState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroupState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroupState()
{
  return &type metadata for OwnedBeaconGroupState;
}

unint64_t sub_1006E8168()
{
  unint64_t result;

  result = qword_101104BA8;
  if (!qword_101104BA8)
  {
    result = swift_getWitnessTable(aY_49, &type metadata for BeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BA8);
  }
  return result;
}

unint64_t sub_1006E81B0()
{
  unint64_t result;

  result = qword_101104BB0;
  if (!qword_101104BB0)
  {
    result = swift_getWitnessTable(byte_100E49CB0, &type metadata for ObservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BB0);
  }
  return result;
}

unint64_t sub_1006E81F8()
{
  unint64_t result;

  result = qword_101104BB8;
  if (!qword_101104BB8)
  {
    result = swift_getWitnessTable(asc_100E49D68, &type metadata for ShareState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BB8);
  }
  return result;
}

unint64_t sub_1006E8240()
{
  unint64_t result;

  result = qword_101104BC0;
  if (!qword_101104BC0)
  {
    result = swift_getWitnessTable(aQ_27, &type metadata for ProductInfoState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BC0);
  }
  return result;
}

unint64_t sub_1006E8288()
{
  unint64_t result;

  result = qword_101104BC8;
  if (!qword_101104BC8)
  {
    result = swift_getWitnessTable(byte_100E49ED8, &type metadata for OwnedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BC8);
  }
  return result;
}

unint64_t sub_1006E82D0()
{
  unint64_t result;

  result = qword_101104BD0;
  if (!qword_101104BD0)
  {
    result = swift_getWitnessTable(byte_100E49F90, &type metadata for SharedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BD0);
  }
  return result;
}

unint64_t sub_1006E8318()
{
  unint64_t result;

  result = qword_101104BD8;
  if (!qword_101104BD8)
  {
    result = swift_getWitnessTable(asc_100E4A048, &type metadata for SafeLocationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BD8);
  }
  return result;
}

unint64_t sub_1006E8360()
{
  unint64_t result;

  result = qword_101104BE0;
  if (!qword_101104BE0)
  {
    result = swift_getWitnessTable(aQ_28, &type metadata for SafeLocationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BE0);
  }
  return result;
}

unint64_t sub_1006E83A8()
{
  unint64_t result;

  result = qword_101104BE8;
  if (!qword_101104BE8)
  {
    result = swift_getWitnessTable(aY_50, &type metadata for SafeLocationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BE8);
  }
  return result;
}

unint64_t sub_1006E83F0()
{
  unint64_t result;

  result = qword_101104BF0;
  if (!qword_101104BF0)
  {
    result = swift_getWitnessTable(asc_100E49F00, &type metadata for SharedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BF0);
  }
  return result;
}

unint64_t sub_1006E8438()
{
  unint64_t result;

  result = qword_101104BF8;
  if (!qword_101104BF8)
  {
    result = swift_getWitnessTable(byte_100E49F28, &type metadata for SharedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104BF8);
  }
  return result;
}

unint64_t sub_1006E8480()
{
  unint64_t result;

  result = qword_101104C00;
  if (!qword_101104C00)
  {
    result = swift_getWitnessTable(byte_100E49E48, &type metadata for OwnedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C00);
  }
  return result;
}

unint64_t sub_1006E84C8()
{
  unint64_t result;

  result = qword_101104C08;
  if (!qword_101104C08)
  {
    result = swift_getWitnessTable(byte_100E49E70, &type metadata for OwnedBeaconState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C08);
  }
  return result;
}

unint64_t sub_1006E8510()
{
  unint64_t result;

  result = qword_101104C10;
  if (!qword_101104C10)
  {
    result = swift_getWitnessTable(byte_100E49D90, &type metadata for ProductInfoState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C10);
  }
  return result;
}

unint64_t sub_1006E8558()
{
  unint64_t result;

  result = qword_101104C18;
  if (!qword_101104C18)
  {
    result = swift_getWitnessTable(byte_100E49DB8, &type metadata for ProductInfoState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C18);
  }
  return result;
}

unint64_t sub_1006E85A0()
{
  unint64_t result;

  result = qword_101104C20;
  if (!qword_101104C20)
  {
    result = swift_getWitnessTable(aQ_29, &type metadata for ShareState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C20);
  }
  return result;
}

unint64_t sub_1006E85E8()
{
  unint64_t result;

  result = qword_101104C28;
  if (!qword_101104C28)
  {
    result = swift_getWitnessTable(a9_10, &type metadata for ShareState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C28);
  }
  return result;
}

unint64_t sub_1006E8630()
{
  unint64_t result;

  result = qword_101104C30;
  if (!qword_101104C30)
  {
    result = swift_getWitnessTable(asc_100E49C20, &type metadata for ObservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C30);
  }
  return result;
}

unint64_t sub_1006E8678()
{
  unint64_t result;

  result = qword_101104C38;
  if (!qword_101104C38)
  {
    result = swift_getWitnessTable(byte_100E49C48, &type metadata for ObservationState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C38);
  }
  return result;
}

unint64_t sub_1006E86C0()
{
  unint64_t result;

  result = qword_101104C40;
  if (!qword_101104C40)
  {
    result = swift_getWitnessTable(byte_100E49B68, &type metadata for BeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C40);
  }
  return result;
}

unint64_t sub_1006E8708()
{
  unint64_t result;

  result = qword_101104C48;
  if (!qword_101104C48)
  {
    result = swift_getWitnessTable(byte_100E49B90, &type metadata for BeaconStateCapture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C48);
  }
  return result;
}

uint64_t sub_1006E874C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100EE13B0;
    if (a2 == 0x8000000100EE13B0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EE13B0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    v8 = 0xED00006574617453;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061, 0xED00006574617453, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100EE13D0)
  {
    swift_bridgeObjectRelease(0x8000000100EE13D0);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EE13D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1006E890C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x49746375646F7270 && a2 == 0xEB000000006F666ELL)
  {
    v5 = 0xEB000000006F666ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xEB000000006F666ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    swift_bridgeObjectRelease(0xEC00000073656974);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1006E8A2C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449656C62617473 && a2 == 0xEF72656669746E65)
  {
    v7 = 0xEF72656669746E65;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C62617473, 0xEF72656669746E65, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x44676E6972696170 && a2 == 0xEB00000000657461)
  {
    v8 = 0xEB00000000657461;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44676E6972696170, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    v11 = 0xED00006E6F697372;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566D6574737973, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v12 = 0xE800000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v13 = 0xE900000000000064;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v14 = 0xE400000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x4C79726574746162 && a2 == 0xEC0000006C657665)
  {
    v15 = 0xEC0000006C657665;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C79726574746162, 0xEC0000006C657665, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ED97D0)
  {
    v16 = 0x8000000100ED97D0;
LABEL_68:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ED97D0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_68;
  }
  if (a1 == 0xD000000000000018)
  {
    v17 = 0x8000000100EE12C0;
    if (a2 == 0x8000000100EE12C0)
      goto LABEL_73;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EE12C0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100EE12E0)
  {
    v18 = 0x8000000100EE12E0;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EE12E0, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0xD000000000000018)
  {
    v19 = 0x8000000100EE1300;
    if (a2 == 0x8000000100EE1300)
      goto LABEL_84;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EE1300, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v20 = 0x8000000100EE1320;
    if (a2 == 0x8000000100EE1320)
      goto LABEL_89;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EE1320, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x8000000100EE1340)
  {
    v21 = 0x8000000100EE1340;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100EE1340, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_95;
  }
  if (a1 == 0x736572616873 && a2 == 0xE600000000000000)
  {
    v22 = 0xE600000000000000;
LABEL_101:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736572616873, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_101;
  }
  if (a1 == 0x746176726573626FLL && a2 == 0xEC000000736E6F69)
  {
    v23 = 0xEC000000736E6F69;
LABEL_107:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746176726573626FLL, 0xEC000000736E6F69, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_107;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100EE1370)
  {
    v24 = 0x8000000100EE1370;
LABEL_113:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EE1370, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_113;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v25 = 0x8000000100EE1390;
    if (a2 == 0x8000000100EE1390)
      goto LABEL_118;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EE1390, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
LABEL_118:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    v26 = 0xE700000000000000;
LABEL_124:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_124;
  }
  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v27 = 0xE600000000000000;
LABEL_130:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_130;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xEB000000006F666ELL)
  {
    swift_bridgeObjectRelease(0xEB000000006F666ELL);
    return 22;
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xEB000000006F666ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v28 & 1) != 0)
      return 22;
    else
      return 23;
  }
}

uint64_t sub_1006E9350(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v4 = 0xEA00000000007265;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x7461446572616873 && a2 == 0xE900000000000065)
  {
    v6 = 0xE900000000000065;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446572616873, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x6974617269707865 && a2 == 0xEA00000000006E6FLL)
  {
    v7 = 0xEA00000000006E6FLL;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974617269707865, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x6148656572616873 && a2 == 0xEC000000656C646ELL)
  {
    v8 = 0xEC000000656C646ELL;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6148656572616873, 0xEC000000656C646ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x8000000100EC2AE0;
    if (a2 == 0x8000000100EC2AE0)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x8000000100EC7600;
    if (a2 == 0x8000000100EC7600)
      goto LABEL_34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC7600, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1006E9658(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    v7 = 0xEF7265696669746ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6564496572616873, 0xEF7265696669746ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    v8 = 0xEB00000000656C64;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000015)
  {
    v9 = 0x8000000100EC2AE0;
    if (a2 == 0x8000000100EC2AE0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C65646F6DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    v12 = 0xED00006E6F697372;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566D6574737973, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v14 = 0xE900000000000064;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465747065636361, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v16 = 0xE400000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    v17 = 0xE900000000000065;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7079546572616873, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x7369747265766461 && a2 == 0xEF7865646E496465)
  {
    v18 = 0xEF7865646E496465;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7369747265766461, 0xEF7865646E496465, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x7461446572616873 && a2 == 0xE900000000000065)
  {
    v19 = 0xE900000000000065;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461446572616873, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x746176726573626FLL && a2 == 0xEC000000736E6F69)
  {
    v20 = 0xEC000000736E6F69;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746176726573626FLL, 0xEC000000736E6F69, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x644970756F7267 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x644970756F7267, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t sub_1006E9D30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v7 = 0xEA00000000007373;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000016)
  {
    v8 = 0x8000000100EC3000;
    if (a2 == 0x8000000100EC3000)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EC3000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x614D6E6F63616562 && a2 == 0xE900000000000070)
  {
    v10 = 0xE900000000000070;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614D6E6F63616562, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EE1410)
  {
    swift_bridgeObjectRelease(0x8000000100EE1410);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EE1410, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1006E9F9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EE13F0)
  {
    swift_bridgeObjectRelease(0x8000000100EE13F0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE13F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1006EA078(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6F636165426C6C61 && a2 == 0xEA0000000000736ELL)
  {
    v5 = 0xEA0000000000736ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F636165426C6C61, 0xEA0000000000736ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EE12A0;
    if (a2 == 0x8000000100EE12A0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EE12A0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x70756F72476C6C61 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x70756F72476C6C61, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1006EA1DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7365746164 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365746164, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1006EA2B4()
{
  unint64_t result;

  result = qword_101104C58;
  if (!qword_101104C58)
  {
    result = swift_getWitnessTable(byte_100E4A4B0, &type metadata for SharedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C58);
  }
  return result;
}

unint64_t sub_1006EA2F8()
{
  unint64_t result;

  result = qword_101104C70;
  if (!qword_101104C70)
  {
    result = swift_getWitnessTable(asc_100E4A460, &type metadata for OwnedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C70);
  }
  return result;
}

unint64_t sub_1006EA33C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101103CD0;
  if (!qword_101103CD0)
  {
    v1 = sub_10001F784(&qword_101103CB8);
    v2[0] = &protocol witness table for String;
    v2[1] = &protocol witness table for String;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101103CD0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroupState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1006EA3E4 + 4 * byte_100E4988B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1006EA418 + 4 * byte_100E49886[v4]))();
}

uint64_t sub_1006EA418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EA420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006EA428);
  return result;
}

uint64_t sub_1006EA434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006EA43CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1006EA440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EA448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroupState.CodingKeys()
{
  return &type metadata for OwnedBeaconGroupState.CodingKeys;
}

uint64_t _s12searchpartyd16ProductInfoStateV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006EA4B0 + 4 * byte_100E49895[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006EA4E4 + 4 * byte_100E49890[v4]))();
}

uint64_t sub_1006EA4E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EA4EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006EA4F4);
  return result;
}

uint64_t sub_1006EA500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006EA508);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006EA50C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EA514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedBeaconGroupState.CodingKeys()
{
  return &type metadata for SharedBeaconGroupState.CodingKeys;
}

unint64_t sub_1006EA534()
{
  unint64_t result;

  result = qword_101104C78;
  if (!qword_101104C78)
  {
    result = swift_getWitnessTable(byte_100E4A380, &type metadata for SharedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C78);
  }
  return result;
}

unint64_t sub_1006EA57C()
{
  unint64_t result;

  result = qword_101104C80;
  if (!qword_101104C80)
  {
    result = swift_getWitnessTable(a9_11, &type metadata for OwnedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C80);
  }
  return result;
}

unint64_t sub_1006EA5C4()
{
  unint64_t result;

  result = qword_101104C88;
  if (!qword_101104C88)
  {
    result = swift_getWitnessTable(byte_100E4A3A8, &type metadata for OwnedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C88);
  }
  return result;
}

unint64_t sub_1006EA60C()
{
  unint64_t result;

  result = qword_101104C90;
  if (!qword_101104C90)
  {
    result = swift_getWitnessTable(aI_28, &type metadata for OwnedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C90);
  }
  return result;
}

unint64_t sub_1006EA654()
{
  unint64_t result;

  result = qword_101104C98;
  if (!qword_101104C98)
  {
    result = swift_getWitnessTable(a9_12, &type metadata for SharedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104C98);
  }
  return result;
}

unint64_t sub_1006EA69C()
{
  unint64_t result;

  result = qword_101104CA0;
  if (!qword_101104CA0)
  {
    result = swift_getWitnessTable(asc_100E4A318, &type metadata for SharedBeaconGroupState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104CA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNetworkIDResponsePayload()
{
  return &type metadata for AccessoryNetworkIDResponsePayload;
}

uint64_t sub_1006EA6F0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1006EA788(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1006EA718(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1006EA744();
  result = sub_1003ECCA0();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006EA744()
{
  unint64_t result;

  result = qword_101104CA8;
  if (!qword_101104CA8)
  {
    result = swift_getWitnessTable(byte_100E4A694, &type metadata for AccessoryNetworkIDResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101104CA8);
  }
  return result;
}

uint64_t sub_1006EA788(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[30];
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(&v20[8], v6, v7);
  v8 = v21;
  v9 = v22;
  v10 = sub_10009F5D0((uint64_t)&v20[8], v21);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v8, v9);
  if (!v1)
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v15);
    sub_100059570();
    FixedWidthInteger.init(data:ofEndianness:)(&v20[6], v13, v14, v5);
    if (v20[7] != 1)
    {
      v10 = v20[6];
      sub_10001BC14(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }
    v10 = type metadata accessor for BinaryEncodingError(0);
    v16 = sub_1001120A4();
    swift_allocError(v10, v16, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v17, enum case for BinaryEncodingError.encodingError(_:), v10);
    swift_willThrow(v18);
    sub_10001BC14(v13, v14);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

_QWORD *sub_1006EA928(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_1006EA9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_1006EAA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1006EAAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1006EAB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1006EABF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1006EAC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006EAC8C);
}

uint64_t sub_1006EAC8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0x2C)
    return v14 - 43;
  else
    return 0;
}

uint64_t sub_1006EAD30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006EAD3C);
}

uint64_t sub_1006EAD3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 43;
  return result;
}

uint64_t type metadata accessor for BeaconObservation(uint64_t a1)
{
  uint64_t result;

  result = qword_101104D08;
  if (!qword_101104D08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconObservation);
  return result;
}

uint64_t sub_1006EAE1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_100E4A818;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BeaconObservation.ObservationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD5)
    goto LABEL_17;
  if (a2 + 43 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 43) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 43;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 43;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 43;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2C;
  v8 = v6 - 44;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconObservation.ObservationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 43 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 43) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD4)
    return ((uint64_t (*)(void))((char *)&loc_1006EAF84 + 4 * byte_100E4A705[v4]))();
  *a1 = a2 + 43;
  return ((uint64_t (*)(void))((char *)sub_1006EAFB8 + 4 * byte_100E4A700[v4]))();
}

uint64_t sub_1006EAFB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EAFC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006EAFC8);
  return result;
}

uint64_t sub_1006EAFD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006EAFDCLL);
  *(_BYTE *)result = a2 + 43;
  return result;
}

uint64_t sub_1006EAFE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006EAFE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconObservation.ObservationType()
{
  return &type metadata for BeaconObservation.ObservationType;
}

unint64_t sub_1006EB008()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101104D48;
  if (!qword_101104D48)
  {
    v1 = sub_10001F784(&qword_101104D50);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_101104D48);
  }
  return result;
}

void sub_1006EB054(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1006EB080()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x64657461636F6C2ELL;
}

uint64_t sub_1006EBC2C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104D80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006ECA64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconObservation.CodingKeys, &type metadata for BeaconObservation.CodingKeys, v11, v9, v10);
  v24 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v24, v5, v12, v13);
  if (!v2)
  {
    v14 = type metadata accessor for BeaconObservation(0);
    v15 = v3 + *(int *)(v14 + 20);
    v23 = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v23, v5, v16, v17);
    v22 = *(_BYTE *)(v3 + *(int *)(v14 + 24));
    v21 = 2;
    v18 = sub_100590168();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for BeaconObservation.ObservationType, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006EBDF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;

  v30 = a2;
  v3 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v35 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_10001A9A8(&qword_101104D70);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconObservation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1006ECA64();
  v37 = v9;
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconObservation.CodingKeys, &type metadata for BeaconObservation.CodingKeys, v15, v14, v13);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v28 = v5;
  v29 = v7;
  v17 = (uint64_t)v12;
  v38 = a1;
  v19 = v31;
  v18 = v32;
  v20 = v33;
  BYTE2(v40) = 0;
  v21 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v22 = v34;
  v23 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v34, (char *)&v40 + 2, v36, v34, v21);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v28 + 32))(v17, v35, v22);
  BYTE1(v40) = 1;
  v24 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, (char *)&v40 + 1, v23, v20, v24);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v17 + *(int *)(v10 + 20), v19, v20);
  v39 = 2;
  v25 = sub_1005902BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v40, &type metadata for BeaconObservation.ObservationType, &v39, v36, &type metadata for BeaconObservation.ObservationType, v25);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v37, v36);
  *(_BYTE *)(v17 + *(int *)(v10 + 24)) = v40;
  sub_10012D874(v17, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return sub_10012D8F8(v17);
}

BOOL sub_1006EC154(char *a1, char *a2)
{
  return qword_100E4AC18[*a1] == qword_100E4AC18[*a2];
}

Swift::Int sub_1006EC178()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E4AC18[v1]);
  return Hasher._finalize()();
}

void sub_1006EC1C4()
{
  char *v0;

  Hasher._combine(_:)(qword_100E4AC18[*v0]);
}

Swift::Int sub_1006EC1F8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E4AC18[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1006EC240@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1006ECAA8(*a1);
  *a2 = result;
  return result;
}

void sub_1006EC268(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E4AC18[*v1];
}

BOOL sub_1006EC280(char *a1, char *a2)
{
  return qword_100E4AC18[*a1] < qword_100E4AC18[*a2];
}

BOOL sub_1006EC2A4(char *a1, char *a2)
{
  return qword_100E4AC18[*a2] >= qword_100E4AC18[*a1];
}

BOOL sub_1006EC2C8(char *a1, char *a2)
{
  return qword_100E4AC18[*a1] >= qword_100E4AC18[*a2];
}

BOOL sub_1006EC2EC(char *a1, char *a2)
{
  return qword_100E4AC18[*a2] < qword_100E4AC18[*a1];
}

uint64_t sub_1006EC310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006ECC94();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006EC36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006ECC94();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1006EC3B8()
{
  char *v0;

  sub_1006EB054(*v0);
}

void sub_1006EC3C0(_QWORD *a1@<X8>)
{
  *a1 = &off_101048768;
}

unint64_t sub_1006EC3D4()
{
  unint64_t result;

  result = qword_101104D58;
  if (!qword_101104D58)
  {
    result = swift_getWitnessTable(aY_51, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_101104D58);
  }
  return result;
}

unint64_t sub_1006EC418()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1702125924;
  if (*v0 != 1)
    v1 = 1701869940;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1006EC468@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006ECE7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006EC48C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006ECA64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006EC4B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006ECA64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006EC4DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006EBDF8(a1, a2);
}

uint64_t sub_1006EC4F0(_QWORD *a1)
{
  return sub_1006EBC2C(a1);
}

Swift::Int sub_1006EC504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  v5 = type metadata accessor for Date(0);
  v6 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  Hasher._combine(_:)(qword_100E4AC18[*(char *)(v1 + *(int *)(a1 + 24))]);
  return Hasher._finalize()();
}

void sub_1006EC5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = type metadata accessor for Date(0);
  v8 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(qword_100E4AC18[*(char *)(v2 + *(int *)(a2 + 24))]);
}

Swift::Int sub_1006EC6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  v6 = type metadata accessor for Date(0);
  v7 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  Hasher._combine(_:)(qword_100E4AC18[*(char *)(v2 + *(int *)(a2 + 24))]);
  return Hasher._finalize()();
}

BOOL sub_1006EC778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)(a1, a2) & 1) != 0
      && (static Date.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0
      && qword_100E4AC18[*(char *)(a1 + *(int *)(a3 + 24))] == qword_100E4AC18[*(char *)(a2 + *(int *)(a3 + 24))];
}

uint64_t sub_1006EC7EC()
{
  return sub_100006204(&qword_101104D60, type metadata accessor for BeaconObservation, (uint64_t)&unk_100E4A9D8);
}

uint64_t sub_1006EC818(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

BOOL sub_1006EC828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 20), a1 + *(int *)(a3 + 20)) & 1) == 0;
}

BOOL sub_1006EC854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) == 0;
}

uint64_t sub_1006EC87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 20), a1 + *(int *)(a3 + 20));
}

uint64_t sub_1006EC890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for BeaconObservation(0);
  v2 = sub_100006204(&qword_101104D68, type metadata accessor for BeaconObservation, (uint64_t)&unk_100E4AA90);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646920;
  v4._object = (void *)0xED0000203A726569;
  String.append(_:)(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A6570797420;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  sub_1006EB054(*(_BYTE *)(v0 + *(int *)(v1 + 24)));
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x203A6574616420;
  v10._object = (void *)0xE700000000000000;
  String.append(_:)(v10);
  v11 = type metadata accessor for Date(0);
  v12 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return 60;
}

unint64_t sub_1006ECA64()
{
  unint64_t result;

  result = qword_101104D78;
  if (!qword_101104D78)
  {
    result = swift_getWitnessTable(byte_100E4ABC4, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104D78);
  }
  return result;
}

uint64_t sub_1006ECAA8(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;

  if (a1 > 399)
  {
    if (a1 > 600)
    {
      if (a1 <= 699)
      {
        if (a1 == 601)
          return 39;
        if (a1 == 602)
          return 40;
      }
      else
      {
        switch(a1)
        {
          case 700:
            return 41;
          case 701:
            return 42;
          case 801:
            return 43;
        }
      }
      return 44;
    }
    else
    {
      v2 = a1 - 400;
      result = 1;
      switch(v2)
      {
        case 0:
          result = 0;
          break;
        case 2:
          return result;
        case 3:
          result = 2;
          break;
        case 5:
          result = 3;
          break;
        case 6:
          result = 4;
          break;
        case 7:
          result = 5;
          break;
        case 100:
          result = 32;
          break;
        case 101:
          result = 33;
          break;
        case 102:
          result = 34;
          break;
        case 103:
          result = 35;
          break;
        case 104:
          result = 36;
          break;
        case 105:
          result = 37;
          break;
        case 106:
          result = 38;
          break;
        default:
          return 44;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 2:
        result = 6;
        break;
      case 3:
        result = 7;
        break;
      case 4:
        result = 8;
        break;
      case 5:
        result = 9;
        break;
      case 6:
        result = 14;
        break;
      case 7:
        result = 15;
        break;
      case 8:
        result = 16;
        break;
      case 9:
        result = 17;
        break;
      case 10:
        result = 18;
        break;
      case 11:
        result = 19;
        break;
      case 16:
        result = 10;
        break;
      case 17:
        result = 11;
        break;
      case 18:
        result = 12;
        break;
      case 19:
        result = 30;
        break;
      case 20:
        result = 31;
        break;
      case 22:
        result = 20;
        break;
      case 23:
        result = 21;
        break;
      case 24:
        result = 23;
        break;
      case 25:
        result = 24;
        break;
      case 26:
        result = 25;
        break;
      case 27:
        result = 26;
        break;
      case 28:
        result = 27;
        break;
      case 29:
        result = 28;
        break;
      case 31:
        result = 13;
        break;
      case 32:
        result = 29;
        break;
      case 33:
        result = 22;
        break;
      default:
        return 44;
    }
  }
  return result;
}

unint64_t sub_1006ECC94()
{
  unint64_t result;

  result = qword_101104D88;
  if (!qword_101104D88)
  {
    result = swift_getWitnessTable(byte_100E4A938, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_101104D88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconObservation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1006ECD24 + 4 * byte_100E4A7F2[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1006ECD58 + 4 * byte_100E4A7ED[v4]))();
}

uint64_t sub_1006ECD58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006ECD60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006ECD68);
  return result;
}

uint64_t sub_1006ECD74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006ECD7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1006ECD80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006ECD88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconObservation.CodingKeys()
{
  return &type metadata for BeaconObservation.CodingKeys;
}

unint64_t sub_1006ECDA8()
{
  unint64_t result;

  result = qword_101104D90;
  if (!qword_101104D90)
  {
    result = swift_getWitnessTable(byte_100E4AB9C, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104D90);
  }
  return result;
}

unint64_t sub_1006ECDF0()
{
  unint64_t result;

  result = qword_101104D98;
  if (!qword_101104D98)
  {
    result = swift_getWitnessTable(asc_100E4AB0C, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104D98);
  }
  return result;
}

unint64_t sub_1006ECE38()
{
  unint64_t result;

  result = qword_101104DA0;
  if (!qword_101104DA0)
  {
    result = swift_getWitnessTable(aM_28, &type metadata for BeaconObservation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104DA0);
  }
  return result;
}

uint64_t sub_1006ECE7C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    v6 = 0xE400000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1702125924, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t storeEnumTagSinglePayload for ItemSharingCrossAccountMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1006ECFF8 + 4 * byte_100E4AD85[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1006ED02C + 4 * byte_100E4AD80[v4]))();
}

uint64_t sub_1006ED02C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006ED034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006ED03CLL);
  return result;
}

uint64_t sub_1006ED048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006ED050);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1006ED054(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006ED05C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemSharingCrossAccountMessageType()
{
  return &type metadata for ItemSharingCrossAccountMessageType;
}

Swift::Int sub_1006ED078()
{
  unsigned __int8 *v0;
  int v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1006ED0BC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1006ED0E8()
{
  unsigned __int8 *v0;
  int v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_1006ED128@<X0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1006ED3B0(*a1);
  *a2 = result;
  return result;
}

void sub_1006ED150(_DWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

void sub_1006ED160(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DB48;
}

uint64_t sub_1006ED170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006ED2D4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006ED1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1006ED2D4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1006ED218(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_1006ED24C();
  a1[2] = sub_1006ED290();
  result = sub_1006ED2D4();
  a1[3] = result;
  return result;
}

unint64_t sub_1006ED24C()
{
  unint64_t result;

  result = qword_101104DA8;
  if (!qword_101104DA8)
  {
    result = swift_getWitnessTable(aE_35, &type metadata for ItemSharingCrossAccountMessageType);
    atomic_store(result, (unint64_t *)&qword_101104DA8);
  }
  return result;
}

unint64_t sub_1006ED290()
{
  unint64_t result;

  result = qword_101104DB0;
  if (!qword_101104DB0)
  {
    result = swift_getWitnessTable(asc_100E4ADB4, &type metadata for ItemSharingCrossAccountMessageType);
    atomic_store(result, (unint64_t *)&qword_101104DB0);
  }
  return result;
}

unint64_t sub_1006ED2D4()
{
  unint64_t result;

  result = qword_101104DB8;
  if (!qword_101104DB8)
  {
    result = swift_getWitnessTable(asc_100E4AE58, &type metadata for ItemSharingCrossAccountMessageType);
    atomic_store(result, (unint64_t *)&qword_101104DB8);
  }
  return result;
}

unint64_t sub_1006ED31C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101104DC0;
  if (!qword_101104DC0)
  {
    v1 = sub_10001F784(&qword_101104DC8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_101104DC0);
  }
  return result;
}

unint64_t sub_1006ED36C()
{
  unint64_t result;

  result = qword_101104DD0;
  if (!qword_101104DD0)
  {
    result = swift_getWitnessTable(byte_100E4AED0, &type metadata for ItemSharingCrossAccountMessageType);
    atomic_store(result, (unint64_t *)&qword_101104DD0);
  }
  return result;
}

uint64_t sub_1006ED3B0(int a1)
{
  if ((a1 - 1) >= 8)
    return 8;
  else
    return (a1 - 1);
}

_QWORD *sub_1006ED3C4(_WORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for MACAddress(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t sub_1006ED4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for MACAddress(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

_WORD *sub_1006ED534(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_BYTE *sub_1006ED60C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 24);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  a1[*(int *)(a3 + 28)] = a2[*(int *)(a3 + 28)];
  return a1;
}

_WORD *sub_1006ED738(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

_WORD *sub_1006ED810(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_1006ED934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006ED940);
}

uint64_t sub_1006ED940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 253)
  {
    v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 3)
      return v4 - 2;
    else
      return 0;
  }
  else
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1006ED9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006ED9C4);
}

uint64_t sub_1006ED9C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 253)
  {
    *(_BYTE *)(result + 1) = a2 + 2;
  }
  else
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for MultipartAccessoryPairingInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_101104E30, (uint64_t)&nominal type descriptor for MultipartAccessoryPairingInfo);
}

void sub_1006EDA4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_100E4B020;
  sub_100149C5C(319, (unint64_t *)&qword_1010FB4F0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100E4B020;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

id sub_1006EDADC(uint64_t *a1, char a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id result;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  void (*v58)(uint64_t);
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;

  v86 = a3;
  v87 = a4;
  v82 = *v4;
  v83 = a1;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v84 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  __chkstk_darwin(v8);
  v81 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v78);
  v77 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10001A9A8(&qword_1010EC588);
  __chkstk_darwin(v75);
  v76 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v15);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v74 - v23;
  v25 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v26 = qword_1011B7DF0;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  *(_QWORD *)(v28 + 64) = sub_10001AA00();
  *(_QWORD *)(v28 + 32) = 0xD000000000000048;
  *(_QWORD *)(v28 + 40) = 0x8000000100EE1CB0;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "%@", 2, 2, v28);
  swift_bridgeObjectRelease();
  v29 = enum case for FMNAccountType.w2Accessory(_:);
  v30 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v24, v29, v30);
  v31 = a2 & 1;
  v24[*(int *)(v18 + 20)] = a2 & 1;
  v32 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v17, 1, 1, v33);
  v34 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v17);
  v35 = type metadata accessor for ServerInteractionController(0);
  v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  sub_10005972C((uint64_t)v24, (uint64_t)v21, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  v37 = sub_10041D354((uint64_t)v21, v34, v36);
  v38 = 0;
  v39 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_7;
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v41 = result;
    v42 = sub_100362120();

    if (!v42 || (v38 = sub_100362238(), v39 = v43, v42, !v39))
    {
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v63 = type metadata accessor for Logger(0);
      v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B7E28);
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.error.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unable to retrieve masked identifier", v67, 2u);
        swift_slowDealloc(v67, -1, -1);
      }

      type metadata accessor for SPPairingSessionError(0);
      v69 = v68;
      v88 = 27;
      v70 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v71 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v89, &v88, v70, v69, v71);
      v72 = v75;
      v73 = (uint64_t)v76;
      *(_QWORD *)v76 = v89;
      swift_storeEnumTagMultiPayload(v73, v72, 1);
      v86(v73);
      swift_release(v37);
      sub_100004048(v73, &qword_1010EC588);
      v62 = (uint64_t)v24;
      return (id)sub_1000126B0(v62, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
    }
LABEL_7:
    v44 = sub_10001F6FC();
    v76 = v24;
    v45 = v31;
    v46 = v37;
    v47 = v13;
    static DispatchQoS.unspecified.getter(v44);
    v89 = _swiftEmptyArrayStorage;
    v48 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
    v50 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
    v51 = v77;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v49, v50, v78, v48);
    v52 = v81;
    (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v81, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v80);
    v53 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EE1D00, v47, v51, v52, 0);
    v54 = type metadata accessor for TaskPriority(0);
    v55 = (uint64_t)v84;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v84, 1, 1, v54);
    v56 = swift_allocObject(&unk_10108A9D0, 440, 7);
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)(v56 + 24) = 0;
    v57 = v83;
    memcpy((void *)(v56 + 32), v83, 0x150uLL);
    *(_QWORD *)(v56 + 368) = v38;
    *(_QWORD *)(v56 + 376) = v39;
    v58 = v86;
    *(_QWORD *)(v56 + 384) = v85;
    *(_QWORD *)(v56 + 392) = v53;
    v59 = v87;
    *(_QWORD *)(v56 + 400) = v58;
    *(_QWORD *)(v56 + 408) = v59;
    *(_QWORD *)(v56 + 416) = v46;
    *(_BYTE *)(v56 + 424) = v45;
    *(_QWORD *)(v56 + 432) = v82;
    sub_100705F38(v57);
    swift_retain();
    v60 = v53;
    swift_retain();
    swift_retain();
    v61 = sub_100691AC0(v55, (uint64_t)&unk_101104F58, v56);

    swift_release(v46);
    swift_release(v61);
    v62 = (uint64_t)v76;
    return (id)sub_1000126B0(v62, type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  }
  __break(1u);
  return result;
}

uint64_t sub_1006EE1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  id v52;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;

  v61 = a2;
  v62 = a3;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v59 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  __chkstk_darwin(v6);
  v56 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v55);
  v54 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessoryIdentityPairingLockAckEndPoint(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v54 - v23;
  v25 = enum case for FMNAccountType.w2Accessory(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v26(v18, enum case for FMNAccountType.w2Accessory(_:), v15);
  v27 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v27, 56, 7);
  *(_QWORD *)v24 = sub_100C511C4((uint64_t)v18);
  v26(&v24[*(int *)(v19 + 20)], v25, v15);
  v28 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  v30 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v14);
  v31 = type metadata accessor for ServerInteractionController(0);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  sub_10005972C((uint64_t)v24, (uint64_t)v22, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  v33 = sub_10041D370((uint64_t)v22, v30, v32);
  v34 = sub_10001F6FC();
  static DispatchQoS.unspecified.getter(v34);
  v63 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v37 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  v38 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v63, v36, v37, v55, v35);
  v39 = v56;
  (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v58);
  v40 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x8000000100EE1C90, v11, v38, v39, 0);
  v41 = type metadata accessor for TaskPriority(0);
  v42 = (uint64_t)v59;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v59, 1, 1, v41);
  v43 = swift_allocObject(&unk_10108A7C8, 296, 7);
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  v44 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v43 + 192) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v43 + 208) = v44;
  v45 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(v43 + 224) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(v43 + 240) = v45;
  v46 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v43 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v43 + 144) = v46;
  v47 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v43 + 160) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v43 + 176) = v47;
  v48 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v43 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v43 + 80) = v48;
  v49 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v43 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v43 + 112) = v49;
  v50 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v43 + 48) = v50;
  v51 = v61;
  *(_QWORD *)(v43 + 256) = v60;
  *(_QWORD *)(v43 + 264) = v40;
  *(_QWORD *)(v43 + 272) = v51;
  *(_QWORD *)(v43 + 280) = v62;
  *(_QWORD *)(v43 + 288) = v33;
  sub_100705A7C((_QWORD *)a1);
  swift_retain();
  v52 = v40;
  swift_retain();
  swift_retain();
  sub_100691AC0(v42, (uint64_t)&unk_101104F40, v43);

  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v24, type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
}

id sub_1006EE6A4(uint64_t *a1, char a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id result;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  void (*v94)(_QWORD *);
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;

  v94 = a3;
  v95 = a4;
  v93 = a1;
  v88 = *v4;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v89 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v85 = *(_QWORD *)(v8 - 8);
  v86 = v8;
  __chkstk_darwin(v8);
  v87 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v83);
  v84 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v82 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_10001A9A8(&qword_1010EEC78);
  __chkstk_darwin(v92);
  v14 = (unint64_t *)((char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v15);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AirPodsLEPairingLockCheckEndPoint(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v80 - v23;
  v25 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v26 = qword_1011B7DF0;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  *(_QWORD *)(v28 + 64) = sub_10001AA00();
  *(_QWORD *)(v28 + 32) = 0xD000000000000048;
  *(_QWORD *)(v28 + 40) = 0x8000000100EE1BE0;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "%@", 2, 2, v28);
  swift_bridgeObjectRelease();
  v29 = enum case for FMNAccountType.w2Accessory(_:);
  v30 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v24, v29, v30);
  v31 = a2 & 1;
  v24[*(int *)(v18 + 20)] = a2 & 1;
  v32 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  v33 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v17, 1, 1, v33);
  v34 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v17);
  v35 = type metadata accessor for ServerInteractionController(0);
  v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  sub_10005972C((uint64_t)v24, (uint64_t)v21, type metadata accessor for AirPodsLEPairingLockCheckEndPoint);
  v37 = sub_10041D6F8((uint64_t)v21, v34, v36);
  v38 = 0;
  v39 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_7;
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v41 = result;
    v42 = sub_100362120();

    if (!v42 || (v38 = sub_100362238(), v39 = v43, v42, !v39))
    {
      if (qword_1010EA328 != -1)
        swift_once(&qword_1010EA328, sub_100B5E37C);
      v72 = type metadata accessor for Logger(0);
      v73 = sub_10001A9E8(v72, (uint64_t)qword_1011B7E28);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Unable to retrieve masked identifier", v76, 2u);
        swift_slowDealloc(v76, -1, -1);
      }

      type metadata accessor for SPPairingSessionError(0);
      v55 = v77;
      v56 = 27;
      goto LABEL_19;
    }
LABEL_7:
    v91 = v24;
    v44 = v93;
    sub_100704FDC(v93);
    v45 = sub_1006FFD6C(v44);
    v47 = v46;
    sub_100705188(v44);
    if (v47 >> 60 != 15)
    {
      v80 = sub_10001F6FC();
      v57 = v82;
      static DispatchQoS.unspecified.getter(v80);
      v97 = _swiftEmptyArrayStorage;
      v58 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v81 = v45;
      v59 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      LODWORD(v92) = v31;
      v60 = v59;
      v61 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
      v62 = v84;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v60, v61, v83, v58);
      v63 = v87;
      (*(void (**)(char *, _QWORD, uint64_t))(v85 + 104))(v87, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v86);
      v64 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EE1C30, v57, v62, v63, 0);
      v65 = type metadata accessor for TaskPriority(0);
      v66 = (uint64_t)v89;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v89, 1, 1, v65);
      v67 = swift_allocObject(&unk_10108A3B8, 472, 7);
      *(_QWORD *)(v67 + 16) = 0;
      *(_QWORD *)(v67 + 24) = 0;
      memcpy((void *)(v67 + 32), v44, 0x160uLL);
      *(_QWORD *)(v67 + 384) = v38;
      *(_QWORD *)(v67 + 392) = v39;
      v68 = v81;
      *(_QWORD *)(v67 + 400) = v81;
      *(_QWORD *)(v67 + 408) = v47;
      *(_QWORD *)(v67 + 416) = v90;
      *(_QWORD *)(v67 + 424) = v64;
      v69 = v95;
      *(_QWORD *)(v67 + 432) = v94;
      *(_QWORD *)(v67 + 440) = v69;
      *(_QWORD *)(v67 + 448) = v37;
      *(_BYTE *)(v67 + 456) = v92;
      *(_QWORD *)(v67 + 464) = v88;
      sub_100704FDC(v44);
      sub_10001BD08(v68, v47);
      swift_retain();
      v70 = v64;
      swift_retain();
      swift_retain();
      sub_100691AC0(v66, (uint64_t)&unk_101104F28, v67);

      swift_release();
      swift_release();
      sub_10001EF3C(v68, v47);
      v71 = (uint64_t)v91;
      return (id)sub_1000126B0(v71, type metadata accessor for AirPodsLEPairingLockCheckEndPoint);
    }
    swift_bridgeObjectRelease();
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B7E28);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v24 = v91;
    if (v52)
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Unable to generate BAA payload", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    type metadata accessor for SPPairingSessionError(0);
    v55 = v54;
    v56 = 26;
LABEL_19:
    v96 = v56;
    v78 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v79 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v97, &v96, v78, v55, v79);
    *v14 = v97;
    swift_storeEnumTagMultiPayload(v14, v92, 1);
    v94(v14);
    swift_release();
    sub_100004048((uint64_t)v14, &qword_1010EEC78);
    v71 = (uint64_t)v24;
    return (id)sub_1000126B0(v71, type metadata accessor for AirPodsLEPairingLockCheckEndPoint);
  }
  __break(1u);
  return result;
}

uint64_t sub_1006EEEE0(_QWORD *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;

  v77 = a2;
  v78 = a3;
  v73 = sub_10001A9A8(&qword_1010EEC90);
  __chkstk_darwin(v73);
  v75 = (uint64_t *)((char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v74 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  __chkstk_darwin(v7);
  v72 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v68);
  v69 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v13);
  v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMNAccountType(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AirPodsLEPairingLockAckEndPoint(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v67 - v24;
  v26 = enum case for FMNAccountType.w2Accessory(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
  v27(v19, enum case for FMNAccountType.w2Accessory(_:), v16);
  v28 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v28, 56, 7);
  *(_QWORD *)v25 = sub_100C511C4((uint64_t)v19);
  v27(&v25[*(int *)(v20 + 20)], v26, v16);
  v29 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v30 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v15, 1, 1, v30);
  v31 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v15);
  v32 = type metadata accessor for ServerInteractionController(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  sub_10005972C((uint64_t)v25, (uint64_t)v23, type metadata accessor for AirPodsLEPairingLockAckEndPoint);
  v34 = sub_10041D714((uint64_t)v23, v31, v33);
  sub_10016837C(a1);
  v35 = sub_1007008A8(a1);
  v37 = v36;
  sub_1001687CC(a1);
  if (v37 >> 60 == 15)
  {
    v38 = v77;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B7E28);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to generate BAA payload", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    type metadata accessor for SPPairingSessionError(0);
    v45 = v44;
    v79 = 1;
    v46 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v47 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v80, &v79, v46, v45, v47);
    v48 = (uint64_t)v75;
    *v75 = v80;
    swift_storeEnumTagMultiPayload(v48, v73, 1);
    v38(v48);
    swift_release();
    sub_100004048(v48, &qword_1010EEC90);
  }
  else
  {
    v49 = sub_10001F6FC();
    static DispatchQoS.unspecified.getter(v49);
    v80 = _swiftEmptyArrayStorage;
    v50 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v51 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
    v75 = (_QWORD *)v35;
    v52 = a1;
    v53 = v34;
    v54 = v51;
    v55 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
    v56 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v80, v54, v55, v68, v50);
    v57 = v72;
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v72, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v71);
    v58 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x8000000100EE1BC0, v12, v56, v57, 0);
    v59 = type metadata accessor for TaskPriority(0);
    v60 = (uint64_t)v74;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v74, 1, 1, v59);
    v61 = (_QWORD *)swift_allocObject(&unk_10108A1B0, 360, 7);
    v61[2] = 0;
    v61[3] = 0;
    memcpy(v61 + 4, v52, 0x110uLL);
    v63 = (uint64_t)v75;
    v62 = v76;
    v61[38] = v75;
    v61[39] = v37;
    v61[40] = v62;
    v61[41] = v58;
    v64 = v78;
    v61[42] = v77;
    v61[43] = v64;
    v61[44] = v53;
    sub_10016837C(v52);
    sub_10001BD08(v63, v37);
    swift_retain();
    v65 = v58;
    swift_retain();
    swift_retain();
    sub_100691AC0(v60, (uint64_t)&unk_101104F00, (uint64_t)v61);

    swift_release();
    swift_release();
    sub_10001EF3C(v63, v37);
  }
  return sub_1000126B0((uint64_t)v25, type metadata accessor for AirPodsLEPairingLockAckEndPoint);
}

id sub_1006EF54C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id result;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  uint64_t (*v63)(_QWORD);
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t (*v85)(_QWORD);
  _QWORD *v86;

  v85 = a3;
  v82 = a2;
  v73 = a1;
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v83 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v78 = *(_QWORD *)(v7 - 8);
  v79 = v7;
  __chkstk_darwin(v7);
  v80 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v76);
  v77 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v75 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v74 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FMNAccountType(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for AirPodsUnpairEndPoint(0);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v81 = (uint64_t *)((char *)&v71 - v22);
  v23 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v23);
  v25 = (char *)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v27 = result;
    v28 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v28)
    {
      v72 = a4;

      v30 = static os_log_type_t.default.getter(v29);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v31 = qword_1011B7DF0;
      v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v33 = swift_allocObject(v32, 72, 7);
      *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
      sub_10000F9B8(v73, (uint64_t)v25, &qword_1010ED860);
      v34 = String.init<A>(describing:)(v25, v23);
      v36 = v35;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      *(_QWORD *)(v33 + 64) = sub_10001AA00();
      *(_QWORD *)(v33 + 32) = v34;
      *(_QWORD *)(v33 + 40) = v36;
      os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Removing pairing lock for UUID - %@", 35, 2, v33);
      swift_bridgeObjectRelease();
      v37 = enum case for FMNAccountType.w2Accessory(_:);
      v38 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
      v38(v17, enum case for FMNAccountType.w2Accessory(_:), v14);
      v39 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v39, 56, 7);
      v40 = sub_100C511C4((uint64_t)v17);
      v41 = (uint64_t)v81;
      *v81 = v40;
      v38((char *)(v41 + *(int *)(v18 + 20)), v37, v14);
      v42 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
      v43 = type metadata accessor for FMNMockingPreferences(0);
      v44 = v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v74, 1, 1, v43);
      v45 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v44);
      v46 = type metadata accessor for ServerInteractionController(0);
      v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      sub_10005972C(v41, (uint64_t)v21, type metadata accessor for AirPodsUnpairEndPoint);
      v48 = sub_10041D7D8((uint64_t)v21, v45, v47);
      v49 = sub_10001F6FC();
      v50 = v75;
      static DispatchQoS.unspecified.getter(v49);
      v86 = _swiftEmptyArrayStorage;
      v51 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v52 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      v53 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
      v54 = v77;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v52, v53, v76, v51);
      v55 = v80;
      (*(void (**)(char *, _QWORD, uint64_t))(v78 + 104))(v80, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v79);
      v56 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EE1A30, v50, v54, v55, 0);
      v57 = type metadata accessor for TaskPriority(0);
      v58 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v83, 1, 1, v57);
      v59 = swift_allocObject(&unk_1010899E0, 152, 7);
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)(v59 + 24) = 0;
      v60 = v82;
      v61 = *(_OWORD *)(v82 + 48);
      *(_OWORD *)(v59 + 64) = *(_OWORD *)(v82 + 32);
      *(_OWORD *)(v59 + 80) = v61;
      *(_OWORD *)(v59 + 96) = *(_OWORD *)(v60 + 64);
      v62 = *(_OWORD *)(v60 + 16);
      *(_OWORD *)(v59 + 32) = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 48) = v62;
      v63 = v85;
      *(_QWORD *)(v59 + 112) = v84;
      *(_QWORD *)(v59 + 120) = v56;
      v64 = v72;
      *(_QWORD *)(v59 + 128) = v63;
      *(_QWORD *)(v59 + 136) = v64;
      *(_QWORD *)(v59 + 144) = v48;
      sub_100350B58((_QWORD *)v60);
      swift_retain();
      v65 = v56;
      swift_retain();
      swift_retain();
      sub_100691AC0(v58, (uint64_t)&unk_101104E78, v59);

      swift_release();
      swift_release();
      return (id)sub_1000126B0(v41, type metadata accessor for AirPodsUnpairEndPoint);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v66 = type metadata accessor for Logger(0);
      v67 = sub_10001A9E8(v66, (uint64_t)qword_1011B7DF8);
      v68 = Logger.logObject.getter(v67);
      v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "iCloud not signed in: Skip pairing lock removal.", v70, 2u);
        swift_slowDealloc(v70, -1, -1);
      }

      return (id)v85(0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Int sub_1006EFC18()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 - 1);
  return Hasher._finalize()();
}

void sub_1006EFC5C()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 - 1);
}

Swift::Int sub_1006EFC88()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 - 1);
  return Hasher._finalize()();
}

_QWORD *sub_1006EFCC8@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  if ((unint64_t)(*result + 1) < 3)
    v2 = *result + 1;
  else
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1006EFCE4(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 - 1;
}

uint64_t sub_1006EFCF4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x63697373616C632ELL;
  if (*v0 != 1)
    v1 = 0x72656E45776F6C2ELL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_1006EFD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10070A83C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006EFDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10070A83C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006EFDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10070A7F8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006EFE58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10070A7F8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006EFEA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10070A7F8();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_1006EFEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_10070A7F8();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_1006EFF4C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6465726961702ELL;
  if (*v0 != 1)
    v1 = 0x64656B636F6C2ELL;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_1006EFFA8()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  _BYTE v25[16];
  uint64_t v26;
  unint64_t v27;

  v1 = 0x6E776F6E6B6E752ELL;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v2);
  v4 = &v25[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = 0;
  v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v5._countAndFlagsBits = 0x203A644974726170;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  v25[15] = *v0;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0xED0000203A737574;
  v7._countAndFlagsBits = 0x617453636E797320;
  String.append(_:)(v7);
  v8 = 0x6465726961702ELL;
  if (v0[1] != 1)
    v8 = 0x64656B636F6C2ELL;
  if (v0[1])
    v9 = v8;
  else
    v9 = 0x6E776F6E6B6E752ELL;
  if (v0[1])
    v10 = 0xE700000000000000;
  else
    v10 = 0xE800000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x7264644163616D20;
  v12._object = (void *)0xED0000203A737365;
  String.append(_:)(v12);
  v13 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  sub_10000F9B8((uint64_t)&v0[*(int *)(v13 + 24)], (uint64_t)v4, (uint64_t *)&unk_1010F9890);
  v14 = type metadata accessor for MACAddress(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v4, 1, v14);
  if ((_DWORD)v16 == 1)
  {
    sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F9890);
    v17 = (void *)0xE400000000000000;
    v18 = 1701736302;
  }
  else
  {
    v18 = MACAddress.description.getter(v16);
    v17 = v19;
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v4, v14);
  }
  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x676E697269617020;
  v21._object = (void *)0xEE00203A65707954;
  String.append(_:)(v21);
  if (v0[*(int *)(v13 + 28)])
  {
    if (v0[*(int *)(v13 + 28)] == 1)
    {
      v22 = (void *)0xE800000000000000;
      v1 = 0x63697373616C632ELL;
    }
    else
    {
      v22 = (void *)0xEA00000000007967;
      v1 = 0x72656E45776F6C2ELL;
    }
  }
  else
  {
    v22 = (void *)0xE800000000000000;
  }
  v23._countAndFlagsBits = v1;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_1006F0270(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  unsigned __int8 v22;
  char v23;
  char v24;
  unsigned __int8 v25;
  char v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104E98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007022A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MultipartAccessoryPairingInfo.CodingKeys, &type metadata for MultipartAccessoryPairingInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v26, v5);
  if (!v2)
  {
    v25 = v3[1];
    v24 = 1;
    v13 = sub_100702328();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus, v13);
    v14 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v15 = &v3[*(int *)(v14 + 24)];
    v23 = 2;
    v16 = type metadata accessor for MACAddress(0);
    v17 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v23, v5, v16, v17);
    v22 = v3[*(int *)(v14 + 28)];
    v21 = 3;
    v18 = sub_100375D54();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for PairingTransportType, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006F044C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;

  v25 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_101104E80);
  v7 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v27 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_1007022A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MultipartAccessoryPairingInfo.CodingKeys, &type metadata for MultipartAccessoryPairingInfo.CodingKeys, v15, v13, v14);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  v16 = v7;
  BYTE4(v29) = 0;
  v17 = (uint64_t)v12;
  *v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v29 + 4, v26);
  BYTE2(v29) = 1;
  v18 = sub_1007022E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v29 + 3), &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus, (char *)&v29 + 2, v26, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus, v18);
  v12[1] = BYTE3(v29);
  v19 = type metadata accessor for MACAddress(0);
  BYTE1(v29) = 2;
  v20 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, (char *)&v29 + 1, v26, v19, v20);
  sub_1004340EC((uint64_t)v6, (uint64_t)&v12[*(int *)(v10 + 24)]);
  v28 = 3;
  v21 = sub_100375D10();
  v22 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for PairingTransportType, &v28, v26, &type metadata for PairingTransportType, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v22);
  *(_BYTE *)(v17 + *(int *)(v10 + 28)) = v29;
  sub_10005972C(v17, v25, type metadata accessor for MultipartAccessoryPairingInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_1000126B0(v17, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_1006F0734()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006F0760 + 4 * byte_100E4AF10[*v0]))(0x644974726170, 0xE600000000000000);
}

uint64_t sub_1006F0760()
{
  return 0x74617453636E7973;
}

uint64_t sub_1006F0780()
{
  return 0x657264644163616DLL;
}

uint64_t sub_1006F079C()
{
  return 0x54676E6972696170;
}

uint64_t sub_1006F07BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007025F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006F07E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007022A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F0808(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007022A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006F0830@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006F044C(a1, a2);
}

uint64_t sub_1006F0844(_QWORD *a1)
{
  return sub_1006F0270(a1);
}

uint64_t sub_1006F085C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, _BYTE *a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 v11;

  v8 = a4;
  *a5 = a1;
  a5[1] = a2;
  v9 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  result = sub_1004340EC(a3, (uint64_t)&a5[*(int *)(v9 + 24)]);
  if (v8 == 3)
    v11 = 0;
  else
    v11 = a4;
  a5[*(int *)(v9 + 28)] = v11;
  return result;
}

uint64_t sub_1006F08C8(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101105070);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10070A880();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v25 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v26 = v3[1];
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    v26 = v3[2];
    v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    v13 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    v14 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[8]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v26, v5);
    v20 = (uint64_t *)((char *)v3 + v13[9]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006F0B14(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101105030);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10070A6F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsUnpairData.CodingKeys, &type metadata for AirPodsUnpairData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v32 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = v3[4];
    v17 = v3[5];
    v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v30, v5);
    v18 = v3[6];
    v19 = v3[7];
    v29 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v29, v5);
    v28 = *((_BYTE *)v3 + 64);
    v27 = 4;
    v20 = sub_10070A738();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for AirPodsUnpairContext, v20);
    v26 = v3[9];
    v25 = 5;
    v21 = sub_10001A9A8(&qword_101105048);
    v22 = sub_10070A77C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006F0D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10070AC68();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006F0D50()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006F0D78 + 4 * byte_100E4AF14[*v0]))(1684628325, 0xE400000000000000);
}

uint64_t sub_1006F0D78()
{
  return 0x644970696863;
}

uint64_t sub_1006F0D8C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_1006F0DAC()
{
  return 0x6449616E6D66;
}

uint64_t sub_1006F0DC0()
{
  return 0x49746375646F7270;
}

uint64_t sub_1006F0DDC()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1006F0DF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007027D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006F0E18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10070A880();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F0E40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10070A880();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006F0E68(_QWORD *a1)
{
  return sub_1006F08C8(a1);
}

uint64_t sub_1006F0E7C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006F0EB0 + 4 * byte_100E4AF1A[*v0]))(0x69634572656E776FLL, 0xE900000000000064);
}

uint64_t sub_1006F0EB0()
{
  return 0x69684372656E776FLL;
}

unint64_t sub_1006F0ED0()
{
  return 0xD000000000000011;
}

uint64_t sub_1006F0EEC()
{
  return 1684628597;
}

uint64_t sub_1006F0EFC()
{
  return 0x6F4365766F6D6572;
}

uint64_t sub_1006F0F20()
{
  return 0x73656369766564;
}

uint64_t sub_1006F0F38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10070A6F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006F0F60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10070A6F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006F0F88(_QWORD *a1)
{
  return sub_1006F0B14(a1);
}

void sub_1006F0F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  NSString v5;
  Class isa;
  uint64_t v7;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSDateFormatter), "init");
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setDateFormat:", v5);

  Locale.init(identifier:)(0x4F505F53555F6E65, 0xEB00000000584953);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  objc_msgSend(v4, "setLocale:", isa);

  qword_1011B7548 = (uint64_t)v4;
}

uint64_t sub_1006F10B0()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(stringLiteral:)(0xD000000000000082, 0x8000000100EE1B00);
  qword_1011B7550 = result;
  *(_QWORD *)algn_1011B7558 = v1;
  return result;
}

uint64_t sub_1006F10E8()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(stringLiteral:)(0xD000000000000082, 0x8000000100EE1D20);
  qword_1011B7560 = result;
  *(_QWORD *)algn_1011B7568 = v1;
  return result;
}

uint64_t sub_1006F1120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  *(_BYTE *)(v8 + 288) = v18;
  *(_QWORD *)(v8 + 192) = v17;
  *(_QWORD *)(v8 + 200) = v19;
  *(_OWORD *)(v8 + 160) = v15;
  *(_OWORD *)(v8 + 176) = v16;
  *(_QWORD *)(v8 + 144) = a7;
  *(_QWORD *)(v8 + 152) = a8;
  *(_QWORD *)(v8 + 128) = a5;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 120) = a4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 208) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 216) = v11;
  *(_QWORD *)(v8 + 224) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 232) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 240) = v13;
  *(_QWORD *)(v8 + 248) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a6);
  return swift_task_switch(sub_1006F11D8, 0, 0);
}

uint64_t sub_1006F11D8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v1 = v0[19];
  v2 = v0[18];
  v3 = (uint64_t *)v0[15];
  v4 = *(_QWORD *)(v0[20] + 16);
  swift_retain();
  sub_100704FDC(v3);
  sub_10001BBBC(v2, v1);
  v7 = (char *)&dword_10110B968 + dword_10110B968;
  v5 = (_QWORD *)swift_task_alloc(unk_10110B96C);
  v0[32] = v5;
  *v5 = v0;
  v5[1] = sub_1006F127C;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))v7)(v0[15], v0[16], v0[17], v0[18], v0[19], v4);
}

uint64_t sub_1006F127C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 256);
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006F12DC, 0, 0);
}

uint64_t sub_1006F12DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  _QWORD *v88;
  id v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  if (*(_QWORD *)(v0 + 264))
  {
    v96 = *(_QWORD *)(v0 + 264);
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v2 = (uint64_t **)(v0 + 120);
    v1 = *(uint64_t **)(v0 + 120);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7E28);
    sub_100704FDC(v1);
    v4 = sub_100704FDC(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(uint64_t **)(v0 + 120);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v101 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = Data.hexString.getter(v8[30], v8[31]);
      *(_QWORD *)(v0 + 112) = sub_100016940(v11, v12, &v101);
      v2 = (uint64_t **)(v0 + 120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      sub_100705188(v8);
      sub_100705188(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "nonce: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_100705188(v8);
      sub_100705188(v8);
    }

    v30 = *v2;
    sub_100704FDC(*v2);
    v31 = sub_100704FDC(v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter(v32);
    v34 = os_log_type_enabled(v32, v33);
    v35 = *v2;
    if (v34)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v101 = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = Data.hexString.getter(v35[17], v35[18]);
      *(_QWORD *)(v0 + 104) = sub_100016940(v38, v39, &v101);
      v2 = (uint64_t **)(v0 + 120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      sub_100705188(v35);
      sub_100705188(v35);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "serialNumber: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_100705188(v35);
      sub_100705188(v35);
    }

    v40 = *v2;
    sub_100704FDC(*v2);
    v41 = sub_100704FDC(v40);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v45 = *v2;
    if (v44)
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v101 = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = Data.hexString.getter(v45[13], v45[14]);
      *(_QWORD *)(v0 + 96) = sub_100016940(v48, v49, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v46 + 4, v46 + 12);
      v2 = (uint64_t **)(v0 + 120);
      swift_bridgeObjectRelease();
      sub_100705188(v45);
      sub_100705188(v45);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "ECID: %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_100705188(v45);
      sub_100705188(v45);
    }

    v50 = *v2;
    sub_100704FDC(*v2);
    v51 = sub_100704FDC(v50);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.debug.getter(v52);
    v54 = os_log_type_enabled(v52, v53);
    v55 = *v2;
    if (v54)
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v101 = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = Data.hexString.getter(v55[15], v55[16]);
      *(_QWORD *)(v0 + 88) = sub_100016940(v58, v59, &v101);
      v2 = (uint64_t **)(v0 + 120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      sub_100705188(v55);
      sub_100705188(v55);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "ChipId: %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      sub_100705188(v55);
      sub_100705188(v55);
    }

    v60 = *v2;
    sub_100704FDC(*v2);
    v61 = sub_100704FDC(v60);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = *v2;
    if (v64)
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v101 = v67;
      *(_DWORD *)v66 = 136315138;
      v68 = Data.hexString.getter(v65[24], v65[25]);
      *(_QWORD *)(v0 + 80) = sub_100016940(v68, v69, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v66 + 4, v66 + 12);
      v2 = (uint64_t **)(v0 + 120);
      swift_bridgeObjectRelease();
      sub_100705188(v65);
      sub_100705188(v65);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "SeedK1: %s", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      sub_100705188(v65);
      sub_100705188(v65);
    }

    v70 = *v2;
    sub_100704FDC(*v2);
    v71 = sub_100704FDC(v70);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.debug.getter(v72);
    v74 = os_log_type_enabled(v72, v73);
    v75 = *v2;
    if (v74)
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      v101 = v77;
      *(_DWORD *)v76 = 136315138;
      v78 = Data.hexString.getter(*v75, v75[1]);
      *(_QWORD *)(v0 + 72) = sub_100016940(v78, v79, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease();
      sub_100705188(v75);
      sub_100705188(v75);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "H1 (hashed C2): %s", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      sub_100705188(*v2);
      sub_100705188(v75);
    }

    v81 = *(_QWORD *)(v0 + 272);
    v80 = *(_QWORD *)(v0 + 280);
    v82 = *(_QWORD *)(v0 + 264);
    v95 = *(_BYTE *)(v0 + 288);
    v83 = *(_QWORD **)(v0 + 192);
    v99 = *(_QWORD *)(v0 + 200);
    v100 = v82;
    v84 = *(_QWORD *)(v0 + 176);
    v85 = *(_QWORD *)(v0 + 184);
    v86 = *(void **)(v0 + 168);
    v94 = *(_QWORD *)(v0 + 160);
    v87 = *(void **)(v0 + 120);
    swift_bridgeObjectRetain(v96);
    sub_10001BBBC(v81, v80);
    sub_10034E410(v96, v81, v80, 0, v83);
    sub_100153D94(v82, v81, v80);
    v88 = (_QWORD *)swift_allocObject(&unk_10108A430, 40, 7);
    v88[2] = v86;
    v88[3] = v84;
    v88[4] = v85;
    v89 = v86;
    swift_retain();
    Future.addFailure(block:)(sub_100705564, v88);
    swift_release();
    swift_release();
    v90 = swift_allocObject(&unk_10108A458, 416, 7);
    *(_QWORD *)(v90 + 16) = v89;
    *(_QWORD *)(v90 + 24) = v84;
    *(_QWORD *)(v90 + 32) = v85;
    *(_BYTE *)(v90 + 40) = v95;
    *(_QWORD *)(v90 + 48) = v94;
    memcpy((void *)(v90 + 56), v87, 0x160uLL);
    *(_QWORD *)(v90 + 408) = v99;
    sub_100704FDC((uint64_t *)v87);
    v91 = v89;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007056AC, v90);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v100, v81, v80);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7E28);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Could not create pairing lock request", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 224);
    v97 = *(_QWORD *)(v0 + 240);
    v98 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 184);

    v24 = swift_allocObject(&unk_10108A3E0, 32, 7);
    *(_QWORD *)(v24 + 16) = v22;
    *(_QWORD *)(v24 + 24) = v23;
    *(_QWORD *)(v0 + 48) = sub_10070553C;
    *(_QWORD *)(v0 + 56) = v24;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100016FB8;
    *(_QWORD *)(v0 + 40) = &unk_10108A3F8;
    v25 = _Block_copy((const void *)(v0 + 16));
    v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    *(_QWORD *)(v0 + 64) = _swiftEmptyArrayStorage;
    v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v29 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 64, v28, v29, v21, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v19, v25);
    _Block_release(v25);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v18, v98);
    swift_release();
  }
  v92 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v92);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006F1E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void **v75;
  uint64_t v76;
  void **v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  void **v100;
  uint64_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  NSObject *v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  void **v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void **v162;
  char v163;
  char v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  _BOOL4 v178;
  uint8_t *v179;
  void **v180;
  void **v181;
  void **v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  os_log_t v214;
  char *v215;
  Class v216;
  void *v217;
  NSString v218;
  id v219;
  char *v220;
  void (*v221)(char *, char *, os_log_t);
  uint64_t v222;
  char *v223;
  void (*v224)(char *, char *, os_log_t);
  char *v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t (*v235)(char *, os_log_t);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  os_log_t v248;
  void **v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  uint8_t *v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  NSObject *v264;
  os_log_type_t v265;
  uint64_t v266;
  uint64_t v267;
  void **v268;
  const char *v269;
  unint64_t v270;
  void **v271;
  const char *v272;
  uint8_t *v273;
  char *v274;
  uint64_t *v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  NSObject *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  NSObject *v286;
  os_log_type_t v287;
  int v288;
  _BOOL4 v289;
  uint64_t v290;
  uint8_t *v291;
  uint8_t *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  NSObject *v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  NSObject *v303;
  uint8_t *v304;
  void **v305;
  uint64_t v306;
  NSObject *v307;
  os_log_type_t v308;
  _BOOL4 v309;
  uint8_t *v310;
  void **v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  uint64_t v319;
  unint64_t v320;
  __CFString *v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  void *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t (*v341)(char *, uint64_t);
  char *v342;
  char *v343;
  char *v344;
  char *v345;
  char *v346;
  Class isa;
  char *v348;
  os_log_t v349;
  uint8_t *v350;
  uint8_t *v351;
  uint64_t *v352;
  uint64_t v353;
  void **v354;
  char *v355;
  char *v356;
  NSObject *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char v370[16];
  uint64_t v371;
  char v372[8];
  _QWORD *v373;
  void **aBlock;
  uint64_t v375;
  uint64_t (*v376)(uint64_t);
  void *v377;
  uint64_t (*v378)();
  _QWORD *v379;

  v352 = a7;
  LODWORD(v350) = a5;
  v358 = a4;
  v359 = a3;
  v360 = a2;
  v357 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  __chkstk_darwin(v357);
  v351 = (uint8_t *)&v339 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v363 = type metadata accessor for DispatchWorkItemFlags(0);
  v361 = *(_QWORD *)(v363 - 8);
  __chkstk_darwin(v363);
  v362 = (char *)&v339 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v366 = type metadata accessor for DispatchQoS(0);
  v364 = *(_QWORD *)(v366 - 8);
  __chkstk_darwin(v366);
  v365 = (char *)&v339 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v11);
  v346 = (char *)&v339 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v349 = (os_log_t)type metadata accessor for Date(0);
  isa = v349[-1].isa;
  v13 = __chkstk_darwin(v349);
  v343 = (char *)&v339 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v348 = (char *)&v339 - v16;
  v17 = __chkstk_darwin(v15);
  v342 = (char *)&v339 - v18;
  v19 = __chkstk_darwin(v17);
  v345 = (char *)&v339 - v20;
  __chkstk_darwin(v19);
  v344 = (char *)&v339 - v21;
  v22 = sub_10001A9A8(&qword_1010F8378);
  v23 = __chkstk_darwin(v22);
  v355 = (char *)&v339 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v354 = (void **)((char *)&v339 - v25);
  v26 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v339 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v368 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v29 = *(_QWORD *)(v368 - 8);
  v30 = __chkstk_darwin(v368);
  v32 = (char *)&v339 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v339 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v339 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v339 - v39;
  v41 = sub_10001A9A8(&qword_1010F8380);
  v42 = __chkstk_darwin(v41);
  v353 = (uint64_t)&v339 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v356 = (char *)&v339 - v45;
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v339 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v339 - v50;
  v369 = a1;
  v52 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v49);
  v53 = (uint64_t)v51;
  ServerStatusCode.init(rawValue:)(v52);
  v54 = type metadata accessor for ServerStatusCode(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54);
  v367 = v53;
  if (v56 == 1)
    goto LABEL_2;
  sub_10000F9B8(v53, (uint64_t)v48, &qword_1010F8380);
  v341 = *(uint64_t (**)(char *, uint64_t))(v55 + 88);
  v67 = v341(v48, v54);
  if (v67 == enum case for ServerStatusCode.success(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_10001A9E8(v68, (uint64_t)qword_1011B7E28);
    v70 = v368;
    v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v40, v369, v368);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.default.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = (void **)swift_slowAlloc(32, -1);
      v340 = v29;
      v76 = v70;
      v77 = v75;
      aBlock = v75;
      v356 = (char *)v69;
      *(_DWORD *)v74 = 136446210;
      v78 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v76, v78);
      v371 = sub_100016940(v79, v80, (uint64_t *)&aBlock);
      v69 = (uint64_t)v356;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v340 + 8))(v40, v76);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Pairing success: %{public}s", v74, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v40, v70);
    }

    v107 = FMNServerInteractionController.FMNResponseFields.data.getter(v106);
    v109 = v108;
    static String.Encoding.utf8.getter(v107);
    v110 = String.init(data:encoding:)(v107, v109, v28);
    v112 = v111;
    sub_10001BC14(v107, v109);
    v113 = v357;
    if (v112)
    {
      swift_bridgeObjectRetain(v112);
      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.info.getter(v115);
      if (os_log_type_enabled(v115, v116))
      {
        v117 = (uint8_t *)swift_slowAlloc(12, -1);
        v118 = (void **)swift_slowAlloc(32, -1);
        aBlock = v118;
        *(_DWORD *)v117 = 136315138;
        swift_bridgeObjectRetain(v112);
        v371 = sub_100016940(v110, v112, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v117 + 4, v117 + 12);
        swift_bridgeObjectRelease_n(v112, 3);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "response data: %s", v117, 0xCu);
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v118, -1, -1);
        swift_slowDealloc(v117, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v112, 2);
      }
    }
    v129 = type metadata accessor for JSONDecoder(0);
    v130 = swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
    v131 = JSONDecoder.init()(v130);
    v132 = swift_allocBox(v113);
    v134 = v133;
    v135 = FMNServerInteractionController.FMNResponseFields.data.getter(v132);
    v137 = v136;
    v138 = sub_100006204(&qword_101104F30, type metadata accessor for AirPodsLEPairingLockCheckResponse, (uint64_t)&unk_100E61DA0);
    v369 = v131;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v113, v135, v137, v113, v138);
    v139 = sub_10001BC14(v135, v137);
    v140 = (uint64_t)v354;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v139);
    v141 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v142 = *(_QWORD *)(v141 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v140, 1, v141) == 1)
    {
      v143 = sub_100004048(v140, &qword_1010F8378);
    }
    else
    {
      v160 = FMNServerInteractionController.InternalServerMetadata.dateEpoch.getter();
      v161 = v140;
      v162 = (void **)v160;
      v164 = v163;
      v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 8))(v161, v141);
      if ((v164 & 1) == 0)
      {
        v165 = Logger.logObject.getter(v143);
        v166 = static os_log_type_t.default.getter(v165);
        if (os_log_type_enabled(v165, v166))
        {
          v167 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v167 = 134217984;
          aBlock = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v375, v167 + 4, v167 + 12);
          _os_log_impl((void *)&_mh_execute_header, v165, v166, "Server epoch: %lld", v167, 0xCu);
          swift_slowDealloc(v167, -1, -1);
        }

        goto LABEL_76;
      }
    }
    v169 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v143);
    if (*(_QWORD *)(v169 + 16) && (v170 = sub_100518DA0(1702125892, 0xE400000000000000), (v171 & 1) != 0))
    {
      v355 = (char *)v134;
      v172 = (uint64_t *)(*(_QWORD *)(v169 + 56) + 16 * v170);
      v174 = *v172;
      v173 = v172[1];
      swift_bridgeObjectRetain_n(v173, 3);
      v175 = swift_bridgeObjectRelease();
      v176 = Logger.logObject.getter(v175);
      v177 = static os_log_type_t.default.getter(v176);
      v178 = os_log_type_enabled(v176, v177);
      v354 = (void **)v174;
      if (v178)
      {
        v368 = v132;
        v179 = (uint8_t *)swift_slowAlloc(12, -1);
        v180 = (void **)swift_slowAlloc(32, -1);
        v356 = (char *)v69;
        v181 = v180;
        aBlock = v180;
        *(_DWORD *)v179 = 136446210;
        swift_bridgeObjectRetain(v173);
        v371 = sub_100016940(v174, v173, (uint64_t *)&aBlock);
        v132 = v368;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v179 + 4, v179 + 12);
        swift_bridgeObjectRelease_n(v173, 3);
        _os_log_impl((void *)&_mh_execute_header, v176, v177, "Server date: %{public}s", v179, 0xCu);
        swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
        v182 = v181;
        v69 = (uint64_t)v356;
        swift_slowDealloc(v182, -1, -1);
        swift_slowDealloc(v179, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v173, 2);
      }
      v214 = v349;
      v215 = v348;
      v216 = isa;
      if (qword_1010E9EB0 != -1)
        swift_once(&qword_1010E9EB0, sub_1006F0F9C);
      v217 = (void *)qword_1011B7548;
      v218 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v219 = objc_msgSend(v217, "dateFromString:", v218);

      if (v219)
      {
        v220 = v345;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v219);

        v221 = (void (*)(char *, char *, os_log_t))*((_QWORD *)v216 + 4);
        v222 = (uint64_t)v346;
        v221(v346, v220, v214);
        (*((void (**)(uint64_t, _QWORD, uint64_t, os_log_t))v216 + 7))(v222, 0, 1, v214);
        if ((*((unsigned int (**)(uint64_t, uint64_t, os_log_t))v216 + 6))(v222, 1, v214) != 1)
        {
          v223 = v344;
          v221(v344, (char *)v222, v214);
          v224 = (void (*)(char *, char *, os_log_t))*((_QWORD *)v216 + 2);
          v224(v342, v223, v214);
          v224(v215, v223, v214);
          v225 = v343;
          v226 = ((uint64_t (*)(char *, char *, os_log_t))v224)(v343, v223, v214);
          v227 = Logger.logObject.getter(v226);
          v228 = static os_log_type_t.default.getter(v227);
          v229 = v228;
          if (os_log_type_enabled(v227, v228))
          {
            v230 = swift_slowAlloc(32, -1);
            v354 = (void **)swift_slowAlloc(64, -1);
            aBlock = v354;
            *(_DWORD *)v230 = 136446722;
            v356 = (char *)v69;
            v348 = (char *)(v230 + 4);
            v231 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            LODWORD(v353) = v229;
            v232 = v342;
            v233 = dispatch thunk of CustomStringConvertible.description.getter(v214, v231);
            v371 = sub_100016940(v233, v234, (uint64_t *)&aBlock);
            v349 = v227;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v348, v230 + 12);
            swift_bridgeObjectRelease();
            v235 = (uint64_t (*)(char *, os_log_t))*((_QWORD *)v216 + 1);
            v236 = v235(v232, v214);
            *(_WORD *)(v230 + 12) = 2048;
            v237 = Date.epoch.getter(v236);
            v235(v215, v214);
            v371 = v237;
            v238 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v230 + 14, v230 + 22);
            *(_WORD *)(v230 + 22) = 2082;
            v371 = Date.epoch.getter(v238);
            v239 = sub_100059CC8();
            v240 = FixedWidthInteger.data.getter(&type metadata for Int64, v239);
            v242 = v241;
            v243 = v132;
            v244 = Data.hexString.getter(v240, v241);
            v246 = v245;
            sub_10001BC14(v240, v242);
            v247 = v244;
            v132 = v243;
            v371 = sub_100016940(v247, v246, (uint64_t *)&aBlock);
            v69 = (uint64_t)v356;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v230 + 24, v230 + 32);
            v113 = v357;
            swift_bridgeObjectRelease();
            v235(v343, v214);
            v248 = v349;
            _os_log_impl((void *)&_mh_execute_header, v349, (os_log_type_t)v353, "pairingEpoch: %{public}s [%lld/%{public}s]", (uint8_t *)v230, 0x20u);
            v249 = v354;
            swift_arrayDestroy(v354, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v249, -1, -1);
            swift_slowDealloc(v230, -1, -1);

          }
          else
          {
            v235 = (uint64_t (*)(char *, os_log_t))*((_QWORD *)v216 + 1);
            v235(v215, v214);
            v235(v342, v214);
            v235(v225, v214);

          }
          v263 = v344;
          v162 = (void **)Date.epoch.getter(v250);
          v168 = v235(v263, v214);
          v134 = (uint64_t)v355;
LABEL_76:
          v368 = v132;
          *(_QWORD *)(v134 + SLODWORD(v113[7].isa)) = v162;
          v264 = Logger.logObject.getter(v168);
          v265 = static os_log_type_t.default.getter(v264);
          if (os_log_type_enabled(v264, v265))
          {
            v266 = swift_slowAlloc(22, -1);
            v267 = v134;
            v268 = (void **)swift_slowAlloc(32, -1);
            aBlock = v268;
            *(_DWORD *)v266 = 141558275;
            v371 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v266 + 4, v266 + 12);
            *(_WORD *)(v266 + 12) = 2081;
            if ((v350 & 1) != 0)
              v269 = "ATTEST_AUTH_NOTKN";
            else
              v269 = "ATTEST_AUTH_TOKEN";
            v270 = (unint64_t)(v269 - 32) | 0x8000000000000000;
            v371 = sub_100016940(0xD000000000000011, v270, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v266 + 14, v266 + 22);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v264, v265, "authSuffix: %{private,mask.hash}s", (uint8_t *)v266, 0x16u);
            swift_arrayDestroy(v268, 1, (char *)&type metadata for Any + 8);
            v271 = v268;
            v134 = v267;
            swift_slowDealloc(v271, -1, -1);
            swift_slowDealloc(v266, -1, -1);

          }
          else
          {

            v272 = "ATTEST_AUTH_TOKEN";
            if ((v350 & 1) != 0)
              v272 = "ATTEST_AUTH_NOTKN";
            v270 = (unint64_t)(v272 - 32) | 0x8000000000000000;
          }
          v273 = v351;
          sub_10005972C(v134, (uint64_t)v351, type metadata accessor for AirPodsLEPairingLockCheckResponse);
          v274 = (char *)v134;
          v275 = v352;
          sub_100704FDC(v352);
          v276 = sub_100702A54(v275, (uint64_t)v273);
          v278 = v277;
          sub_1000126B0((uint64_t)v273, type metadata accessor for AirPodsLEPairingLockCheckResponse);
          sub_100705188(v275);
          v279 = String.utf8Data.getter(0xD000000000000011, v270);
          v281 = v280;
          swift_bridgeObjectRelease();
          aBlock = (void **)v276;
          v375 = v278;
          sub_10001BBBC(v276, v278);
          sub_10001BBBC(v279, v281);
          sub_10078E27C(v279, v281);
          sub_10001BC14(v279, v281);
          sub_10001BC14(v279, v281);
          sub_10001BC14(v276, v278);
          v283 = (uint64_t)aBlock;
          v282 = v375;
          v284 = v368;
          v285 = swift_retain_n(v368, 2);
          v286 = Logger.logObject.getter(v285);
          v287 = static os_log_type_t.debug.getter(v286);
          v288 = v287;
          v357 = v286;
          v289 = os_log_type_enabled(v286, v287);
          v355 = v274;
          if (v289)
          {
            v290 = swift_slowAlloc(12, -1);
            LODWORD(v353) = v288;
            v291 = (uint8_t *)v290;
            v354 = (void **)swift_slowAlloc(32, -1);
            aBlock = v354;
            v351 = v291;
            *(_DWORD *)v291 = 136315138;
            v292 = v291 + 12;
            v350 = v291 + 4;
            swift_beginAccess(v274, v370, 0, 0);
            v293 = v283;
            v295 = *((_QWORD *)v274 + 8);
            v294 = *((_QWORD *)v274 + 9);
            sub_10001BBBC(v295, v294);
            v296 = v282;
            v297 = Data.hexString.getter(v295, v294);
            v298 = v284;
            v300 = v299;
            v301 = v295;
            v283 = v293;
            sub_10001BC14(v301, v294);
            v302 = v297;
            v282 = v296;
            v371 = sub_100016940(v302, v300, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v350, v292);
            swift_release_n(v298, 2);
            swift_bridgeObjectRelease();
            v303 = v357;
            v304 = v351;
            _os_log_impl((void *)&_mh_execute_header, v357, (os_log_type_t)v353, "S3: %s", v351, 0xCu);
            v305 = v354;
            swift_arrayDestroy(v354, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v305, -1, -1);
            swift_slowDealloc(v304, -1, -1);

          }
          else
          {

            swift_release_n(v284, 2);
          }
          sub_10001BBBC(v283, (unint64_t)v282);
          v306 = sub_10001BBBC(v283, (unint64_t)v282);
          v307 = Logger.logObject.getter(v306);
          v308 = static os_log_type_t.debug.getter(v307);
          v309 = os_log_type_enabled(v307, v308);
          v356 = (char *)v69;
          if (v309)
          {
            v310 = (uint8_t *)swift_slowAlloc(12, -1);
            v311 = (void **)swift_slowAlloc(32, -1);
            aBlock = v311;
            *(_DWORD *)v310 = 136315138;
            v312 = Data.hexString.getter(v283, v282);
            v371 = sub_100016940(v312, v313, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v310 + 4, v310 + 12);
            swift_bridgeObjectRelease();
            sub_10001BC14(v283, (unint64_t)v282);
            sub_10001BC14(v283, (unint64_t)v282);
            _os_log_impl((void *)&_mh_execute_header, v307, v308, "dataForSignatureVerification: %s", v310, 0xCu);
            swift_arrayDestroy(v311, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v311, -1, -1);
            swift_slowDealloc(v310, -1, -1);
          }
          else
          {
            sub_10001BC14(v283, (unint64_t)v282);
            sub_10001BC14(v283, (unint64_t)v282);
          }

          v314 = v352[34];
          v315 = v352[35];
          v316 = v314;
          v317 = v315;
          if (v315 >> 60 == 15)
          {
            if (qword_1010E9AE8 != -1)
              swift_once(&qword_1010E9AE8, sub_1002659E8);
            v316 = qword_1011B6C68;
            v317 = qword_1011B6C70;
            sub_10001BBBC(qword_1011B6C68, qword_1011B6C70);
          }
          v318 = v355;
          swift_beginAccess(v355, &v371, 0, 0);
          v319 = *((_QWORD *)v318 + 8);
          v320 = *((_QWORD *)v318 + 9);
          sub_10001BD08(v314, v315);
          sub_10001BBBC(v319, v320);
          v321 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
          v322 = sub_1007DFE84(v316, v317, v283, (uint64_t)v282, v319, v320, v321);
          v357 = v282;

          sub_10001BC14(v319, v320);
          v323 = sub_10001BC14(v316, v317);
          v324 = static os_log_type_t.default.getter(v323);
          if (qword_1010EA310 != -1)
            swift_once(&qword_1010EA310, sub_100B5E2C8);
          v325 = qword_1011B7DF0;
          v326 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v327 = swift_allocObject(v326, 72, 7);
          *(_OWORD *)(v327 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v327 + 56) = &type metadata for Bool;
          *(_QWORD *)(v327 + 64) = &protocol witness table for Bool;
          *(_BYTE *)(v327 + 32) = v322 & 1;
          os_log(_:dso:log:_:_:)(v324, &_mh_execute_header, v325, "Signature S3 verified? %d", v339);
          swift_bridgeObjectRelease();
          v328 = (_QWORD *)swift_allocObject(&unk_10108A700, 40, 7);
          v329 = v358;
          v328[2] = v359;
          v328[3] = v329;
          v328[4] = v368;
          v378 = sub_1007057D0;
          v379 = v328;
          aBlock = _NSConcreteStackBlock;
          v375 = 1107296256;
          v376 = sub_100016FB8;
          v377 = &unk_10108A718;
          v330 = _Block_copy(&aBlock);
          swift_retain();
          v331 = swift_retain();
          v332 = v365;
          static DispatchQoS.unspecified.getter(v331);
          v373 = _swiftEmptyArrayStorage;
          v333 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v334 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v335 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
          v336 = v362;
          v337 = v334;
          v338 = v363;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v373, v337, v335, v363, v333);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v332, v336, v330);
          swift_release();
          _Block_release(v330);
          sub_10001BC14(v283, (unint64_t)v357);
          (*(void (**)(char *, uint64_t))(v361 + 8))(v336, v338);
          (*(void (**)(char *, uint64_t))(v364 + 8))(v332, v366);
          goto LABEL_73;
        }
      }
      else
      {
        v222 = (uint64_t)v346;
        (*((void (**)(char *, uint64_t, uint64_t, os_log_t))v216 + 7))(v346, 1, 1, v214);
      }
      v251 = sub_100004048(v222, (uint64_t *)&unk_1010EA690);
      v252 = Logger.logObject.getter(v251);
      v253 = static os_log_type_t.error.getter(v252);
      if (os_log_type_enabled(v252, v253))
      {
        v254 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v254 = 0;
        _os_log_impl((void *)&_mh_execute_header, v252, v253, "Unable to parse server Date!", v254, 2u);
        swift_slowDealloc(v254, -1, -1);
      }

      v255 = swift_allocObject(&unk_10108A6B0, 32, 7);
      v256 = v358;
      *(_QWORD *)(v255 + 16) = v359;
      *(_QWORD *)(v255 + 24) = v256;
      v378 = sub_1007057A0;
      v379 = (_QWORD *)v255;
      aBlock = _NSConcreteStackBlock;
      v375 = 1107296256;
      v376 = sub_100016FB8;
      v377 = &unk_10108A6C8;
      v257 = _Block_copy(&aBlock);
      v258 = swift_retain();
      v191 = v365;
      static DispatchQoS.unspecified.getter(v258);
      v371 = (uint64_t)_swiftEmptyArrayStorage;
      v259 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v260 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v261 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v195 = v362;
      v262 = v260;
      v197 = v363;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v371, v262, v261, v363, v259);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v191, v195, v257);
      _Block_release(v257);
      swift_release();
    }
    else
    {
      v183 = swift_bridgeObjectRelease();
      v184 = Logger.logObject.getter(v183);
      v185 = static os_log_type_t.error.getter(v184);
      if (os_log_type_enabled(v184, v185))
      {
        v186 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v186 = 0;
        _os_log_impl((void *)&_mh_execute_header, v184, v185, "Server response is missing Date header!", v186, 2u);
        swift_slowDealloc(v186, -1, -1);
      }

      v187 = swift_allocObject(&unk_10108A660, 32, 7);
      v188 = v358;
      *(_QWORD *)(v187 + 16) = v359;
      *(_QWORD *)(v187 + 24) = v188;
      v378 = sub_10070577C;
      v379 = (_QWORD *)v187;
      aBlock = _NSConcreteStackBlock;
      v375 = 1107296256;
      v376 = sub_100016FB8;
      v377 = &unk_10108A678;
      v189 = _Block_copy(&aBlock);
      v190 = swift_retain();
      v191 = v365;
      static DispatchQoS.unspecified.getter(v190);
      v371 = (uint64_t)_swiftEmptyArrayStorage;
      v192 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v193 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v194 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v195 = v362;
      v196 = v193;
      v197 = v363;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v371, v196, v194, v363, v192);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v191, v195, v189);
      swift_release();
      _Block_release(v189);
    }
    (*(void (**)(char *, uint64_t))(v361 + 8))(v195, v197);
    (*(void (**)(char *, uint64_t))(v364 + 8))(v191, v366);
LABEL_73:
    swift_release();
    goto LABEL_31;
  }
  if (v67 == enum case for ServerStatusCode.forbidden(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v93 = type metadata accessor for Logger(0);
    v94 = sub_10001A9E8(v93, (uint64_t)qword_1011B7E28);
    v95 = v368;
    v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v35, v369, v368);
    v357 = v94;
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter(v97);
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = (void **)swift_slowAlloc(32, -1);
      v340 = v29;
      v101 = v95;
      v102 = v100;
      aBlock = v100;
      *(_DWORD *)v99 = 136446210;
      v354 = (void **)(v99 + 4);
      v103 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v104 = dispatch thunk of CustomStringConvertible.description.getter(v101, v103);
      v371 = sub_100016940(v104, v105, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v354, v99 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v340 + 8))(v35, v101);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Pairing not allowed! %{public}s", v99, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v99, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v95);
    }

    v145 = (uint64_t)v355;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v146);
    v147 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v145, 1, v147) == 1)
    {
      sub_100004048(v145, &qword_1010F8378);
      v149 = (uint64_t)v356;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v356, 1, 1, v54);
    }
    else
    {
      v149 = (uint64_t)v356;
      FMNServerInteractionController.InternalServerMetadata.errorCode.getter();
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v145, v147);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v149, 0, 1, v54);
      v153 = v353;
      sub_10000F9B8(v149, v353, &qword_1010F8380);
      v154 = v341((char *)v153, v54);
      if ((_DWORD)v154 == enum case for ServerStatusCode.preconditionFailed(_:))
      {
        v155 = Logger.logObject.getter(v154);
        v156 = static os_log_type_t.error.getter(v155);
        if (os_log_type_enabled(v155, v156))
        {
          v157 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v157 = 0;
          _os_log_impl((void *)&_mh_execute_header, v155, v156, "Pairing has been completed by another device", v157, 2u);
          swift_slowDealloc(v157, -1, -1);
        }

        v158 = swift_allocObject(&unk_10108A570, 32, 7);
        v159 = v358;
        *(_QWORD *)(v158 + 16) = v359;
        *(_QWORD *)(v158 + 24) = v159;
        v378 = sub_100705710;
        v379 = (_QWORD *)v158;
        aBlock = _NSConcreteStackBlock;
        v375 = 1107296256;
        v152 = &unk_10108A588;
        goto LABEL_59;
      }
      if ((_DWORD)v154 == enum case for ServerStatusCode.locked(_:))
      {
        v200 = Logger.logObject.getter(v154);
        v201 = static os_log_type_t.error.getter(v200);
        if (os_log_type_enabled(v200, v201))
        {
          v202 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v202 = 0;
          _os_log_impl((void *)&_mh_execute_header, v200, v201, "Pairing is pending from another device", v202, 2u);
          swift_slowDealloc(v202, -1, -1);
        }

        v203 = swift_allocObject(&unk_10108A520, 32, 7);
        v204 = v358;
        *(_QWORD *)(v203 + 16) = v359;
        *(_QWORD *)(v203 + 24) = v204;
        v378 = sub_1007056EC;
        v379 = (_QWORD *)v203;
        aBlock = _NSConcreteStackBlock;
        v375 = 1107296256;
        v152 = &unk_10108A538;
        goto LABEL_59;
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v153, v54);
    }
    v150 = v358;
    v151 = swift_allocObject(&unk_10108A4D0, 32, 7);
    *(_QWORD *)(v151 + 16) = v359;
    *(_QWORD *)(v151 + 24) = v150;
    v378 = sub_1007056C8;
    v379 = (_QWORD *)v151;
    aBlock = _NSConcreteStackBlock;
    v375 = 1107296256;
    v152 = &unk_10108A4E8;
LABEL_59:
    v376 = sub_100016FB8;
    v377 = v152;
    v205 = _Block_copy(&aBlock);
    v206 = swift_retain();
    v207 = v365;
    static DispatchQoS.unspecified.getter(v206);
    v371 = (uint64_t)_swiftEmptyArrayStorage;
    v208 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v209 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v210 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v211 = v362;
    v212 = v209;
    v213 = v363;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v371, v212, v210, v363, v208);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v207, v211, v205);
    _Block_release(v205);
    (*(void (**)(char *, uint64_t))(v361 + 8))(v211, v213);
    (*(void (**)(char *, uint64_t))(v364 + 8))(v207, v366);
    swift_release();
    sub_100004048(v149, &qword_1010F8380);
    return sub_100004048(v367, &qword_1010F8380);
  }
  if (v67 == enum case for ServerStatusCode.serverConflict(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v119 = type metadata accessor for Logger(0);
    sub_10001A9E8(v119, (uint64_t)qword_1011B7E28);
    v120 = v368;
    v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v38, v369, v368);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = (void **)swift_slowAlloc(32, -1);
      aBlock = v125;
      *(_DWORD *)v124 = 136446210;
      v126 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v120, v126);
      v371 = sub_100016940(v127, v128, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v124 + 4, v124 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v120);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Linked to another Apple ID. %{public}s", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v120);
    }

    v198 = v358;
    v199 = swift_allocObject(&unk_10108A5C0, 32, 7);
    *(_QWORD *)(v199 + 16) = v359;
    *(_QWORD *)(v199 + 24) = v198;
    v378 = sub_100705734;
    v379 = (_QWORD *)v199;
    aBlock = _NSConcreteStackBlock;
    v375 = 1107296256;
    v83 = &unk_10108A5D8;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v54);
LABEL_2:
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v57 = type metadata accessor for Logger(0);
  sub_10001A9E8(v57, (uint64_t)qword_1011B7E28);
  v58 = v368;
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v369, v368);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = (void **)swift_slowAlloc(32, -1);
    aBlock = v63;
    *(_DWORD *)v62 = 136446210;
    v64 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v58, v64);
    v371 = sub_100016940(v65, v66, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v371, v372, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v58);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Pairing lock failed: %{public}s", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v58);
  }

  v81 = v358;
  v82 = swift_allocObject(&unk_10108A480, 32, 7);
  *(_QWORD *)(v82 + 16) = v359;
  *(_QWORD *)(v82 + 24) = v81;
  v378 = sub_10070ACB8;
  v379 = (_QWORD *)v82;
  aBlock = _NSConcreteStackBlock;
  v375 = 1107296256;
  v83 = &unk_10108A498;
LABEL_13:
  v376 = sub_100016FB8;
  v377 = v83;
  v84 = _Block_copy(&aBlock);
  v85 = swift_retain();
  v86 = v365;
  static DispatchQoS.unspecified.getter(v85);
  v371 = (uint64_t)_swiftEmptyArrayStorage;
  v87 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v88 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v89 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v90 = v362;
  v91 = v88;
  v92 = v363;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v371, v91, v89, v363, v87);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v90, v84);
  _Block_release(v84);
  (*(void (**)(char *, uint64_t))(v361 + 8))(v90, v92);
  (*(void (**)(char *, uint64_t))(v364 + 8))(v86, v366);
LABEL_31:
  swift_release();
  return sub_100004048(v367, &qword_1010F8380);
}

uint64_t sub_1006F47A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  *(_BYTE *)(v8 + 280) = v17;
  *(_QWORD *)(v8 + 184) = v16;
  *(_QWORD *)(v8 + 192) = v18;
  *(_OWORD *)(v8 + 168) = v15;
  *(_QWORD *)(v8 + 152) = a7;
  *(_QWORD *)(v8 + 160) = a8;
  *(_QWORD *)(v8 + 136) = a5;
  *(_QWORD *)(v8 + 144) = a6;
  *(_QWORD *)(v8 + 128) = a4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 200) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 208) = v11;
  *(_QWORD *)(v8 + 216) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 224) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 232) = v13;
  *(_QWORD *)(v8 + 240) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a6);
  return swift_task_switch(sub_1006F4860, 0, 0);
}

uint64_t sub_1006F4860()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (uint64_t *)v0[16];
  v2 = *(_QWORD *)(v0[19] + 16);
  swift_retain();
  sub_100705F38(v1);
  v5 = (char *)&dword_1011176F8 + dword_1011176F8;
  v3 = (_QWORD *)swift_task_alloc(unk_1011176FC);
  v0[31] = v3;
  *v3 = v0;
  v3[1] = sub_1006F48E8;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[16], v0[17], v0[18], v2);
}

uint64_t sub_1006F48E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 248);
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006F4948, 0, 0);
}

uint64_t sub_1006F4948()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint8_t *v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint8_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t *v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t *v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint8_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t *v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint8_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  NSObject *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  uint64_t *v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  _QWORD *v110;
  id v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t *v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t **v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;

  if (v0[32])
  {
    v119 = v0[32];
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v1 = v0 + 15;
    v125 = v0;
    v3 = (uint64_t *)v0[16];
    v2 = (uint64_t **)(v0 + 16);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7E28);
    sub_100705F38(v3);
    v5 = sub_100705F38(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *v2;
    v117 = v1;
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v126 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = Data.hexString.getter(v9[34], v9[35]);
      *v1 = sub_100016940(v12, v13, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v2, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v9);
      sub_1007060F4(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "nonce: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1007060F4(v9);
      sub_1007060F4(v9);
    }

    v31 = v125 + 14;
    v32 = *v2;
    sub_100705F38(*v2);
    v33 = sub_100705F38(v32);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = *v2;
    v121 = v2;
    if (v36)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v126 = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = Data.hexString.getter(v37[15], v37[16]);
      *v31 = sub_100016940(v40, v41, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v117, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v37);
      sub_1007060F4(v37);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "serialNumber: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v42 = v38;
      v43 = v2;
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      v43 = v2;
      sub_1007060F4(v37);
      sub_1007060F4(v37);
    }

    v44 = v125 + 13;
    v45 = *v43;
    sub_100705F38(*v43);
    v46 = sub_100705F38(v45);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    v49 = os_log_type_enabled(v47, v48);
    v50 = *v43;
    if (v49)
    {
      v51 = (uint8_t *)swift_slowAlloc(12, -1);
      v52 = swift_slowAlloc(32, -1);
      v126 = v52;
      *(_DWORD *)v51 = 136315138;
      v53 = Data.hexString.getter(v50[17], v50[18]);
      *v44 = sub_100016940(v53, v54, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, v125 + 14, v51 + 4, v51 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v50);
      sub_1007060F4(v50);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "AltSerialNumber: %s", v51, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      v55 = v51;
      v43 = v121;
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      sub_1007060F4(v50);
      sub_1007060F4(v50);
    }

    v56 = v125 + 12;
    v57 = *v43;
    sub_100705F38(*v43);
    v58 = sub_100705F38(v57);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter(v59);
    v61 = os_log_type_enabled(v59, v60);
    v62 = *v43;
    if (v61)
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = swift_slowAlloc(32, -1);
      v126 = v64;
      *(_DWORD *)v63 = 136315138;
      v65 = Data.hexString.getter(v62[28], v62[29]);
      *v56 = sub_100016940(v65, v66, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v125 + 13, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v62);
      sub_1007060F4(v62);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "CSR: %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      v67 = v63;
      v43 = v121;
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      sub_1007060F4(v62);
      sub_1007060F4(v62);
    }

    v68 = v125 + 11;
    v69 = *v43;
    sub_100705F38(*v43);
    v70 = sub_100705F38(v69);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.debug.getter(v71);
    v73 = os_log_type_enabled(v71, v72);
    v74 = *v43;
    if (v73)
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v126 = v76;
      *(_DWORD *)v75 = 136315138;
      v77 = Data.hexString.getter(v74[26], v74[27]);
      *v68 = sub_100016940(v77, v78, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, v125 + 12, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v74);
      sub_1007060F4(v74);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Certs: %s", v75, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      v79 = v75;
      v43 = v121;
      swift_slowDealloc(v79, -1, -1);
    }
    else
    {
      sub_1007060F4(*v43);
      sub_1007060F4(v74);
    }

    v80 = v125 + 10;
    v81 = *v43;
    sub_100705F38(*v43);
    v82 = sub_100705F38(v81);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.debug.getter(v83);
    v85 = os_log_type_enabled(v83, v84);
    v86 = *v43;
    if (v85)
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = swift_slowAlloc(32, -1);
      v126 = v88;
      *(_DWORD *)v87 = 136315138;
      v89 = Data.hexString.getter(v86[24], v86[25]);
      *v80 = sub_100016940(v89, v90, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v80, v68, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v86);
      sub_1007060F4(v86);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "SeedK1: %s", v87, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      v91 = v87;
      v43 = v121;
      swift_slowDealloc(v91, -1, -1);
    }
    else
    {
      sub_1007060F4(v86);
      sub_1007060F4(v86);
    }

    v92 = *v43;
    sub_100705F38(*v43);
    v93 = sub_100705F38(v92);
    v94 = Logger.logObject.getter(v93);
    v95 = static os_log_type_t.debug.getter(v94);
    v96 = os_log_type_enabled(v94, v95);
    v97 = *v43;
    v0 = v125;
    if (v96)
    {
      v98 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(32, -1);
      v126 = v99;
      *(_DWORD *)v98 = 136315138;
      v100 = Data.hexString.getter(*v97, v97[1]);
      v125[9] = sub_100016940(v100, v101, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v125 + 9, v125 + 10, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease();
      sub_1007060F4(v97);
      sub_1007060F4(v97);
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "H1 (hashed C2): %s", v98, 0xCu);
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v98, -1, -1);
    }
    else
    {
      sub_1007060F4(*v43);
      sub_1007060F4(v97);
    }

    v103 = v125[33];
    v102 = v125[34];
    v104 = v125[32];
    v118 = *((_BYTE *)v125 + 280);
    v105 = (_QWORD *)v125[23];
    v122 = v125[24];
    v124 = v104;
    v106 = v125[21];
    v107 = v125[22];
    v108 = (void *)v125[20];
    v116 = v125[19];
    v109 = (void *)v125[16];
    swift_bridgeObjectRetain(v119);
    sub_10001BBBC(v103, v102);
    sub_10034E6A0(v119, v103, v102, 0, v105);
    sub_100153D94(v104, v103, v102);
    v110 = (_QWORD *)swift_allocObject(&unk_10108AA48, 40, 7);
    v110[2] = v108;
    v110[3] = v106;
    v110[4] = v107;
    v111 = v108;
    swift_retain();
    Future.addFailure(block:)(sub_100706290, v110);
    swift_release();
    swift_release();
    v112 = swift_allocObject(&unk_10108AA70, 400, 7);
    *(_QWORD *)(v112 + 16) = v111;
    *(_QWORD *)(v112 + 24) = v106;
    *(_QWORD *)(v112 + 32) = v107;
    *(_BYTE *)(v112 + 40) = v118;
    *(_QWORD *)(v112 + 48) = v116;
    memcpy((void *)(v112 + 56), v109, 0x150uLL);
    *(_QWORD *)(v112 + 392) = v122;
    sub_100705F38((uint64_t *)v109);
    v113 = v111;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007063C0, v112);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v124, v103, v102);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7E28);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Could not create pairing lock request", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v19 = v0[30];
    v20 = v0[27];
    v120 = v0[29];
    v123 = v0[28];
    v22 = v0[25];
    v21 = v0[26];
    v23 = v0[21];
    v24 = v0[22];

    v25 = swift_allocObject(&unk_10108A9F8, 32, 7);
    *(_QWORD *)(v25 + 16) = v23;
    *(_QWORD *)(v25 + 24) = v24;
    v0[6] = sub_1007060D0;
    v0[7] = v25;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_10108AA10;
    v26 = _Block_copy(v0 + 2);
    v27 = swift_retain();
    static DispatchQoS.unspecified.getter(v27);
    v0[8] = _swiftEmptyArrayStorage;
    v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v30 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 8, v29, v30, v22, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v20, v26);
    _Block_release(v26);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v19, v123);
    swift_release();
  }
  v114 = v0[27];
  swift_task_dealloc(v0[30]);
  swift_task_dealloc(v114);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1006F560C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  os_log_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  os_log_t v75;
  uint64_t v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  os_log_t v100;
  uint64_t v101;
  os_log_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  os_log_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  os_log_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  os_log_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_t v161;
  char v162;
  char v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  uint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  _BOOL4 v177;
  uint8_t *v178;
  os_log_t v179;
  os_log_t v180;
  os_log_t v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  void *v217;
  NSString v218;
  id v219;
  char *v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  char *v223;
  void (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  NSObject *v227;
  os_log_type_t v228;
  int v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t (*v236)(char *, uint64_t);
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  os_log_t v247;
  uint64_t v248;
  NSObject *v249;
  os_log_type_t v250;
  uint8_t *v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  NSObject *v262;
  os_log_type_t v263;
  uint64_t v264;
  os_log_t v265;
  const char *v266;
  unint64_t v267;
  const char *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  NSObject *v279;
  os_log_type_t v280;
  uint64_t *v281;
  char *v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t *v288;
  os_log_t v289;
  uint64_t v290;
  uint64_t v291;
  NSObject *v292;
  os_log_type_t v293;
  _BOOL4 v294;
  uint8_t *v295;
  os_log_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  __CFString *v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t (*v325)(char *, uint64_t);
  char *v326;
  char *v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t v331;
  char *v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t *v336;
  os_log_t v337;
  os_log_t v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char v354[16];
  uint64_t v355;
  char v356[8];
  _QWORD *v357;
  os_log_t aBlock;
  uint64_t v359;
  uint64_t (*v360)(uint64_t);
  void *v361;
  uint64_t (*v362)();
  _QWORD *v363;

  v336 = a7;
  v334 = a5;
  v342 = a4;
  v343 = a3;
  v344 = a2;
  v341 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  __chkstk_darwin(v341);
  v335 = (uint64_t)&v323 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v347 = type metadata accessor for DispatchWorkItemFlags(0);
  v345 = *(_QWORD *)(v347 - 8);
  __chkstk_darwin(v347);
  v346 = (char *)&v323 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v350 = type metadata accessor for DispatchQoS(0);
  v348 = *(_QWORD *)(v350 - 8);
  __chkstk_darwin(v350);
  v349 = (char *)&v323 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v11);
  v329 = (char *)&v323 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v333 = type metadata accessor for Date(0);
  v331 = *(_QWORD *)(v333 - 8);
  v13 = __chkstk_darwin(v333);
  v326 = (char *)&v323 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v332 = (char *)&v323 - v16;
  v17 = __chkstk_darwin(v15);
  v330 = (char *)&v323 - v18;
  v19 = __chkstk_darwin(v17);
  v328 = (char *)&v323 - v20;
  __chkstk_darwin(v19);
  v327 = (char *)&v323 - v21;
  v22 = sub_10001A9A8(&qword_1010F8378);
  v23 = __chkstk_darwin(v22);
  v339 = (char *)&v323 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v338 = (os_log_t)((char *)&v323 - v25);
  v26 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v323 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v352 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v29 = *(_QWORD *)(v352 - 8);
  v30 = __chkstk_darwin(v352);
  v32 = (char *)&v323 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v323 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v323 - v37;
  __chkstk_darwin(v36);
  v40 = (char *)&v323 - v39;
  v41 = sub_10001A9A8(&qword_1010F8380);
  v42 = __chkstk_darwin(v41);
  v337 = (os_log_t)((char *)&v323 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = __chkstk_darwin(v42);
  v340 = (char *)&v323 - v45;
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v323 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)&v323 - v50;
  v353 = a1;
  v52 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v49);
  v53 = (uint64_t)v51;
  ServerStatusCode.init(rawValue:)(v52);
  v54 = type metadata accessor for ServerStatusCode(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54);
  v351 = v53;
  if (v56 == 1)
    goto LABEL_2;
  sub_10000F9B8(v53, (uint64_t)v48, &qword_1010F8380);
  v325 = *(uint64_t (**)(char *, uint64_t))(v55 + 88);
  v67 = v325(v48, v54);
  if (v67 == enum case for ServerStatusCode.success(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v68 = type metadata accessor for Logger(0);
    v69 = sub_10001A9E8(v68, (uint64_t)qword_1011B7E28);
    v70 = v352;
    v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v40, v353, v352);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.default.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = (os_log_t)swift_slowAlloc(32, -1);
      v324 = v29;
      v76 = v70;
      v77 = v75;
      aBlock = v75;
      v340 = (char *)v69;
      *(_DWORD *)v74 = 136446210;
      v78 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v76, v78);
      v355 = sub_100016940(v79, v80, (uint64_t *)&aBlock);
      v69 = (uint64_t)v340;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v74 + 4, v74 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v324 + 8))(v40, v76);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Pairing success: %{public}s", v74, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v40, v70);
    }

    v107 = FMNServerInteractionController.FMNResponseFields.data.getter(v106);
    v109 = v108;
    static String.Encoding.utf8.getter(v107);
    v110 = String.init(data:encoding:)(v107, v109, v28);
    v112 = v111;
    sub_10001BC14(v107, v109);
    v113 = v341;
    if (v112)
    {
      swift_bridgeObjectRetain(v112);
      v115 = Logger.logObject.getter(v114);
      v116 = static os_log_type_t.info.getter(v115);
      if (os_log_type_enabled(v115, v116))
      {
        v117 = (uint8_t *)swift_slowAlloc(12, -1);
        v118 = (os_log_t)swift_slowAlloc(32, -1);
        aBlock = v118;
        *(_DWORD *)v117 = 136315138;
        swift_bridgeObjectRetain(v112);
        v355 = sub_100016940(v110, v112, (uint64_t *)&aBlock);
        v113 = v341;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v117 + 4, v117 + 12);
        swift_bridgeObjectRelease_n(v112, 3);
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "response data: %s", v117, 0xCu);
        swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v118, -1, -1);
        swift_slowDealloc(v117, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v112, 2);
      }
    }
    v129 = type metadata accessor for JSONDecoder(0);
    v130 = swift_allocObject(v129, *(unsigned int *)(v129 + 48), *(unsigned __int16 *)(v129 + 52));
    v131 = JSONDecoder.init()(v130);
    v353 = swift_allocBox(v113);
    v133 = v132;
    v134 = FMNServerInteractionController.FMNResponseFields.data.getter(v353);
    v136 = v135;
    v137 = sub_100006204(&qword_101104F60, type metadata accessor for AirPodsSWPairingLockCheckResponse, (uint64_t)&unk_100E5AEF0);
    v352 = v131;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v113, v134, v136, v113, v137);
    v138 = sub_10001BC14(v134, v136);
    v139 = (uint64_t)v338;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v138);
    v140 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v141 = *(_QWORD *)(v140 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v139, 1, v140) == 1)
    {
      v142 = sub_100004048(v139, &qword_1010F8378);
    }
    else
    {
      v159 = FMNServerInteractionController.InternalServerMetadata.dateEpoch.getter();
      v160 = v139;
      v161 = (os_log_t)v159;
      v163 = v162;
      v142 = (*(uint64_t (**)(uint64_t, uint64_t))(v141 + 8))(v160, v140);
      if ((v163 & 1) == 0)
      {
        v164 = Logger.logObject.getter(v142);
        v165 = static os_log_type_t.default.getter(v164);
        if (os_log_type_enabled(v164, v165))
        {
          v166 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v166 = 134217984;
          aBlock = v161;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v359, v166 + 4, v166 + 12);
          _os_log_impl((void *)&_mh_execute_header, v164, v165, "Server epoch: %lld", v166, 0xCu);
          swift_slowDealloc(v166, -1, -1);
        }

        goto LABEL_76;
      }
    }
    v168 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v142);
    if (*(_QWORD *)(v168 + 16) && (v169 = sub_100518DA0(1702125892, 0xE400000000000000), (v170 & 1) != 0))
    {
      v171 = (uint64_t *)(*(_QWORD *)(v168 + 56) + 16 * v169);
      v173 = *v171;
      v172 = v171[1];
      swift_bridgeObjectRetain_n(v172, 3);
      v174 = swift_bridgeObjectRelease();
      v175 = Logger.logObject.getter(v174);
      v176 = static os_log_type_t.default.getter(v175);
      v177 = os_log_type_enabled(v175, v176);
      v339 = (char *)v133;
      if (v177)
      {
        v178 = (uint8_t *)swift_slowAlloc(12, -1);
        v179 = (os_log_t)swift_slowAlloc(32, -1);
        v340 = (char *)v69;
        v180 = v179;
        aBlock = v179;
        *(_DWORD *)v178 = 136446210;
        swift_bridgeObjectRetain(v172);
        v355 = sub_100016940(v173, v172, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v178 + 4, v178 + 12);
        swift_bridgeObjectRelease_n(v172, 3);
        _os_log_impl((void *)&_mh_execute_header, v175, v176, "Server date: %{public}s", v178, 0xCu);
        swift_arrayDestroy(v180, 1, (char *)&type metadata for Any + 8);
        v181 = v180;
        v69 = (uint64_t)v340;
        swift_slowDealloc(v181, -1, -1);
        swift_slowDealloc(v178, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v172, 2);
      }
      v213 = v333;
      v214 = v331;
      v215 = v330;
      v216 = v332;
      if (qword_1010E9EB0 != -1)
        swift_once(&qword_1010E9EB0, sub_1006F0F9C);
      v217 = (void *)qword_1011B7548;
      v218 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v219 = objc_msgSend(v217, "dateFromString:", v218);

      if (v219)
      {
        v220 = v328;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v219);

        v221 = *(void (**)(char *, char *, uint64_t))(v214 + 32);
        v222 = (uint64_t)v329;
        v221(v329, v220, v213);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v214 + 56))(v222, 0, 1, v213);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48))(v222, 1, v213) != 1)
        {
          v223 = v327;
          v221(v327, (char *)v222, v213);
          v224 = *(void (**)(char *, char *, uint64_t))(v214 + 16);
          v224(v215, v223, v213);
          v224(v216, v223, v213);
          v225 = v326;
          v226 = ((uint64_t (*)(char *, char *, uint64_t))v224)(v326, v223, v213);
          v227 = Logger.logObject.getter(v226);
          v228 = static os_log_type_t.default.getter(v227);
          v229 = v228;
          if (os_log_type_enabled(v227, v228))
          {
            v230 = swift_slowAlloc(32, -1);
            v337 = v227;
            v231 = v225;
            v232 = v230;
            v338 = (os_log_t)swift_slowAlloc(64, -1);
            aBlock = v338;
            *(_DWORD *)v232 = 136446722;
            v340 = (char *)v69;
            v233 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            LODWORD(v333) = v229;
            v234 = dispatch thunk of CustomStringConvertible.description.getter(v213, v233);
            v355 = sub_100016940(v234, v235, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v232 + 4, v232 + 12);
            swift_bridgeObjectRelease();
            v236 = *(uint64_t (**)(char *, uint64_t))(v214 + 8);
            v237 = v236(v215, v213);
            *(_WORD *)(v232 + 12) = 2048;
            v238 = Date.epoch.getter(v237);
            v236(v216, v213);
            v355 = v238;
            v239 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v232 + 14, v232 + 22);
            *(_WORD *)(v232 + 22) = 2082;
            v355 = Date.epoch.getter(v239);
            v240 = sub_100059CC8();
            v241 = FixedWidthInteger.data.getter(&type metadata for Int64, v240);
            v243 = v242;
            v244 = Data.hexString.getter(v241, v242);
            v246 = v245;
            sub_10001BC14(v241, v243);
            v355 = sub_100016940(v244, v246, (uint64_t *)&aBlock);
            v69 = (uint64_t)v340;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v232 + 24, v232 + 32);
            swift_bridgeObjectRelease();
            v236(v231, v213);
            v227 = v337;
            _os_log_impl((void *)&_mh_execute_header, v337, (os_log_type_t)v333, "pairingEpoch: %{public}s [%lld/%{public}s]", (uint8_t *)v232, 0x20u);
            v247 = v338;
            swift_arrayDestroy(v338, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v247, -1, -1);
            swift_slowDealloc(v232, -1, -1);
          }
          else
          {
            v236 = *(uint64_t (**)(char *, uint64_t))(v214 + 8);
            v236(v216, v213);
            v236(v215, v213);
            v236(v225, v213);
          }

          v113 = v341;
          v133 = (uint64_t)v339;
          v260 = v327;
          v161 = (os_log_t)Date.epoch.getter(v261);
          v167 = v236(v260, v213);
LABEL_76:
          *(_QWORD *)(v133 + *(int *)(v113 + 44)) = v161;
          v262 = Logger.logObject.getter(v167);
          v263 = static os_log_type_t.default.getter(v262);
          if (os_log_type_enabled(v262, v263))
          {
            v264 = swift_slowAlloc(22, -1);
            v265 = (os_log_t)swift_slowAlloc(32, -1);
            aBlock = v265;
            *(_DWORD *)v264 = 141558275;
            v355 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v264 + 4, v264 + 12);
            *(_WORD *)(v264 + 12) = 2081;
            if ((v334 & 1) != 0)
              v266 = "ATTEST_AUTH_NOTKN";
            else
              v266 = "ATTEST_AUTH_TOKEN";
            v267 = (unint64_t)(v266 - 32) | 0x8000000000000000;
            v355 = sub_100016940(0xD000000000000011, v267, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v264 + 14, v264 + 22);
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v262, v263, "authSuffix: %{private,mask.hash}s", (uint8_t *)v264, 0x16u);
            swift_arrayDestroy(v265, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v265, -1, -1);
            swift_slowDealloc(v264, -1, -1);

          }
          else
          {

            v268 = "ATTEST_AUTH_TOKEN";
            if ((v334 & 1) != 0)
              v268 = "ATTEST_AUTH_NOTKN";
            v267 = (unint64_t)(v268 - 32) | 0x8000000000000000;
          }
          v269 = v335;
          sub_10005972C(v133, v335, type metadata accessor for AirPodsSWPairingLockCheckResponse);
          v270 = v336;
          sub_100705F38(v336);
          v271 = sub_1007031E0(v270, v269);
          v273 = v272;
          sub_1000126B0(v269, type metadata accessor for AirPodsSWPairingLockCheckResponse);
          sub_1007060F4(v270);
          v274 = String.utf8Data.getter(0xD000000000000011, v267);
          v276 = v275;
          swift_bridgeObjectRelease();
          aBlock = (os_log_t)v271;
          v359 = v273;
          sub_10001BBBC(v271, v273);
          sub_10001BBBC(v274, v276);
          sub_10078E27C(v274, v276);
          sub_10001BC14(v274, v276);
          sub_10001BC14(v274, v276);
          sub_10001BC14(v271, v273);
          v277 = v359;
          v341 = (uint64_t)aBlock;
          v278 = swift_retain_n(v353, 2);
          v279 = Logger.logObject.getter(v278);
          v280 = static os_log_type_t.debug.getter(v279);
          if (os_log_type_enabled(v279, v280))
          {
            v281 = (uint64_t *)swift_slowAlloc(12, -1);
            v337 = (os_log_t)swift_slowAlloc(32, -1);
            aBlock = v337;
            v338 = (os_log_t)v277;
            v336 = v281;
            *(_DWORD *)v281 = 136315138;
            v282 = (char *)v281 + 12;
            v335 = (uint64_t)v281 + 4;
            swift_beginAccess(v133, v354, 0, 0);
            v284 = *(_QWORD *)(v133 + 48);
            v283 = *(_QWORD *)(v133 + 56);
            sub_10001BBBC(v284, v283);
            v285 = Data.hexString.getter(v284, v283);
            v339 = (char *)v133;
            v287 = v286;
            sub_10001BC14(v284, v283);
            v355 = sub_100016940(v285, v287, (uint64_t *)&aBlock);
            v277 = (unint64_t)v338;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v335, v282);
            swift_release_n(v353, 2);
            v133 = (uint64_t)v339;
            swift_bridgeObjectRelease();
            v288 = v336;
            _os_log_impl((void *)&_mh_execute_header, v279, v280, "S3: %s", (uint8_t *)v336, 0xCu);
            v289 = v337;
            swift_arrayDestroy(v337, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v289, -1, -1);
            swift_slowDealloc(v288, -1, -1);

          }
          else
          {

            swift_release_n(v353, 2);
          }
          v290 = v341;
          sub_10001BBBC(v341, v277);
          v291 = sub_10001BBBC(v290, v277);
          v292 = Logger.logObject.getter(v291);
          v293 = static os_log_type_t.debug.getter(v292);
          v294 = os_log_type_enabled(v292, v293);
          v340 = (char *)v69;
          if (v294)
          {
            v295 = (uint8_t *)swift_slowAlloc(12, -1);
            v296 = (os_log_t)swift_slowAlloc(32, -1);
            aBlock = v296;
            *(_DWORD *)v295 = 136315138;
            v338 = (os_log_t)(v295 + 4);
            v297 = v341;
            v298 = Data.hexString.getter(v341, v277);
            v355 = sub_100016940(v298, v299, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v338, v295 + 12);
            swift_bridgeObjectRelease();
            sub_10001BC14(v297, v277);
            sub_10001BC14(v297, v277);
            _os_log_impl((void *)&_mh_execute_header, v292, v293, "dataForSignatureVerification: %s", v295, 0xCu);
            swift_arrayDestroy(v296, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v296, -1, -1);
            swift_slowDealloc(v295, -1, -1);
          }
          else
          {
            v300 = v341;
            sub_10001BC14(v341, v277);
            sub_10001BC14(v300, v277);
          }

          if (qword_1010E9EC0 != -1)
            swift_once(&qword_1010E9EC0, sub_1006F10E8);
          v301 = qword_1011B7560;
          v302 = *(_QWORD *)algn_1011B7568;
          swift_beginAccess(v133, &v355, 0, 0);
          v303 = *(_QWORD *)(v133 + 48);
          v304 = *(_QWORD *)(v133 + 56);
          sub_10001BBBC(v303, v304);
          v305 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
          v306 = sub_1007DFE84(v301, v302, v341, v277, v303, v304, v305);

          v307 = sub_10001BC14(v303, v304);
          v308 = static os_log_type_t.default.getter(v307);
          if (qword_1010EA310 != -1)
            swift_once(&qword_1010EA310, sub_100B5E2C8);
          v309 = qword_1011B7DF0;
          v310 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v311 = swift_allocObject(v310, 72, 7);
          *(_OWORD *)(v311 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v311 + 56) = &type metadata for Bool;
          *(_QWORD *)(v311 + 64) = &protocol witness table for Bool;
          *(_BYTE *)(v311 + 32) = v306 & 1;
          os_log(_:dso:log:_:_:)(v308, &_mh_execute_header, v309, "Signature S3 verified? %d", v323);
          swift_bridgeObjectRelease();
          v312 = (_QWORD *)swift_allocObject(&unk_10108AD18, 40, 7);
          v313 = v342;
          v312[2] = v343;
          v312[3] = v313;
          v312[4] = v353;
          v362 = sub_1007064E4;
          v363 = v312;
          aBlock = (os_log_t)_NSConcreteStackBlock;
          v359 = 1107296256;
          v360 = sub_100016FB8;
          v361 = &unk_10108AD30;
          v314 = _Block_copy(&aBlock);
          swift_retain();
          v315 = swift_retain();
          v316 = v349;
          static DispatchQoS.unspecified.getter(v315);
          v357 = _swiftEmptyArrayStorage;
          v317 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v318 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v319 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
          v320 = v346;
          v321 = v318;
          v322 = v347;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v357, v321, v319, v347, v317);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v316, v320, v314);
          swift_release();
          _Block_release(v314);
          sub_10001BC14(v341, v277);
          (*(void (**)(char *, uint64_t))(v345 + 8))(v320, v322);
          (*(void (**)(char *, uint64_t))(v348 + 8))(v316, v350);
          goto LABEL_73;
        }
      }
      else
      {
        v222 = (uint64_t)v329;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v214 + 56))(v329, 1, 1, v213);
      }
      v248 = sub_100004048(v222, (uint64_t *)&unk_1010EA690);
      v249 = Logger.logObject.getter(v248);
      v250 = static os_log_type_t.error.getter(v249);
      if (os_log_type_enabled(v249, v250))
      {
        v251 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v251 = 0;
        _os_log_impl((void *)&_mh_execute_header, v249, v250, "Unable to parse server Date!", v251, 2u);
        swift_slowDealloc(v251, -1, -1);
      }

      v252 = swift_allocObject(&unk_10108ACC8, 32, 7);
      v253 = v342;
      *(_QWORD *)(v252 + 16) = v343;
      *(_QWORD *)(v252 + 24) = v253;
      v362 = sub_1007064B4;
      v363 = (_QWORD *)v252;
      aBlock = (os_log_t)_NSConcreteStackBlock;
      v359 = 1107296256;
      v360 = sub_100016FB8;
      v361 = &unk_10108ACE0;
      v254 = _Block_copy(&aBlock);
      v255 = swift_retain();
      v190 = v349;
      static DispatchQoS.unspecified.getter(v255);
      v355 = (uint64_t)_swiftEmptyArrayStorage;
      v256 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v257 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v258 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v194 = v346;
      v259 = v257;
      v196 = v347;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v355, v259, v258, v347, v256);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v190, v194, v254);
      _Block_release(v254);
      swift_release();
    }
    else
    {
      v182 = swift_bridgeObjectRelease();
      v183 = Logger.logObject.getter(v182);
      v184 = static os_log_type_t.error.getter(v183);
      if (os_log_type_enabled(v183, v184))
      {
        v185 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v185 = 0;
        _os_log_impl((void *)&_mh_execute_header, v183, v184, "Server response is missing Date header!", v185, 2u);
        swift_slowDealloc(v185, -1, -1);
      }

      v186 = swift_allocObject(&unk_10108AC78, 32, 7);
      v187 = v342;
      *(_QWORD *)(v186 + 16) = v343;
      *(_QWORD *)(v186 + 24) = v187;
      v362 = sub_100706490;
      v363 = (_QWORD *)v186;
      aBlock = (os_log_t)_NSConcreteStackBlock;
      v359 = 1107296256;
      v360 = sub_100016FB8;
      v361 = &unk_10108AC90;
      v188 = _Block_copy(&aBlock);
      v189 = swift_retain();
      v190 = v349;
      static DispatchQoS.unspecified.getter(v189);
      v355 = (uint64_t)_swiftEmptyArrayStorage;
      v191 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v192 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v193 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v194 = v346;
      v195 = v192;
      v196 = v347;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v355, v195, v193, v347, v191);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v190, v194, v188);
      swift_release();
      _Block_release(v188);
    }
    (*(void (**)(char *, uint64_t))(v345 + 8))(v194, v196);
    (*(void (**)(char *, uint64_t))(v348 + 8))(v190, v350);
LABEL_73:
    swift_release();
    goto LABEL_31;
  }
  if (v67 == enum case for ServerStatusCode.forbidden(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v93 = type metadata accessor for Logger(0);
    v94 = sub_10001A9E8(v93, (uint64_t)qword_1011B7E28);
    v95 = v352;
    v96 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v35, v353, v352);
    v341 = v94;
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter(v97);
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = (os_log_t)swift_slowAlloc(32, -1);
      v324 = v29;
      v101 = v95;
      v102 = v100;
      aBlock = v100;
      *(_DWORD *)v99 = 136446210;
      v338 = (os_log_t)(v99 + 4);
      v103 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v104 = dispatch thunk of CustomStringConvertible.description.getter(v101, v103);
      v355 = sub_100016940(v104, v105, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v338, v99 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v324 + 8))(v35, v101);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "Pairing not allowed! %{public}s", v99, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v99, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v95);
    }

    v144 = (uint64_t)v340;
    v145 = (uint64_t)v339;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v146);
    v147 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v148 = *(_QWORD *)(v147 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v145, 1, v147) == 1)
    {
      sub_100004048(v145, &qword_1010F8378);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v144, 1, 1, v54);
    }
    else
    {
      FMNServerInteractionController.InternalServerMetadata.errorCode.getter();
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v145, v147);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v55 + 56))(v144, 0, 1, v54);
      v152 = v337;
      sub_10000F9B8(v144, (uint64_t)v337, &qword_1010F8380);
      v153 = v325((char *)v152, v54);
      if ((_DWORD)v153 == enum case for ServerStatusCode.preconditionFailed(_:))
      {
        v154 = Logger.logObject.getter(v153);
        v155 = static os_log_type_t.error.getter(v154);
        if (os_log_type_enabled(v154, v155))
        {
          v156 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v156 = 0;
          _os_log_impl((void *)&_mh_execute_header, v154, v155, "Pairing has been completed by another device", v156, 2u);
          swift_slowDealloc(v156, -1, -1);
        }

        v157 = swift_allocObject(&unk_10108AB88, 32, 7);
        v158 = v342;
        *(_QWORD *)(v157 + 16) = v343;
        *(_QWORD *)(v157 + 24) = v158;
        v362 = sub_100706424;
        v363 = (_QWORD *)v157;
        aBlock = (os_log_t)_NSConcreteStackBlock;
        v359 = 1107296256;
        v151 = &unk_10108ABA0;
        goto LABEL_59;
      }
      if ((_DWORD)v153 == enum case for ServerStatusCode.locked(_:))
      {
        v199 = Logger.logObject.getter(v153);
        v200 = static os_log_type_t.error.getter(v199);
        if (os_log_type_enabled(v199, v200))
        {
          v201 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v201 = 0;
          _os_log_impl((void *)&_mh_execute_header, v199, v200, "Pairing is pending from another device", v201, 2u);
          swift_slowDealloc(v201, -1, -1);
        }

        v202 = swift_allocObject(&unk_10108AB38, 32, 7);
        v203 = v342;
        *(_QWORD *)(v202 + 16) = v343;
        *(_QWORD *)(v202 + 24) = v203;
        v362 = sub_100706400;
        v363 = (_QWORD *)v202;
        aBlock = (os_log_t)_NSConcreteStackBlock;
        v359 = 1107296256;
        v151 = &unk_10108AB50;
        goto LABEL_59;
      }
      (*(void (**)(os_log_t, uint64_t))(v55 + 8))(v152, v54);
    }
    v149 = v342;
    v150 = swift_allocObject(&unk_10108AAE8, 32, 7);
    *(_QWORD *)(v150 + 16) = v343;
    *(_QWORD *)(v150 + 24) = v149;
    v362 = sub_1007063DC;
    v363 = (_QWORD *)v150;
    aBlock = (os_log_t)_NSConcreteStackBlock;
    v359 = 1107296256;
    v151 = &unk_10108AB00;
LABEL_59:
    v360 = sub_100016FB8;
    v361 = v151;
    v204 = _Block_copy(&aBlock);
    v205 = swift_retain();
    v206 = v349;
    static DispatchQoS.unspecified.getter(v205);
    v355 = (uint64_t)_swiftEmptyArrayStorage;
    v207 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v208 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v209 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v210 = v346;
    v211 = v208;
    v212 = v347;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v355, v211, v209, v347, v207);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v206, v210, v204);
    _Block_release(v204);
    (*(void (**)(char *, uint64_t))(v345 + 8))(v210, v212);
    (*(void (**)(char *, uint64_t))(v348 + 8))(v206, v350);
    swift_release();
    sub_100004048(v144, &qword_1010F8380);
    return sub_100004048(v351, &qword_1010F8380);
  }
  if (v67 == enum case for ServerStatusCode.serverConflict(_:))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v119 = type metadata accessor for Logger(0);
    sub_10001A9E8(v119, (uint64_t)qword_1011B7E28);
    v120 = v352;
    v121 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v38, v353, v352);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v125 = (os_log_t)swift_slowAlloc(32, -1);
      aBlock = v125;
      *(_DWORD *)v124 = 136446210;
      v126 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v127 = dispatch thunk of CustomStringConvertible.description.getter(v120, v126);
      v355 = sub_100016940(v127, v128, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v124 + 4, v124 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v120);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Linked to another Apple ID. %{public}s", v124, 0xCu);
      swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v125, -1, -1);
      swift_slowDealloc(v124, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v120);
    }

    v197 = v342;
    v198 = swift_allocObject(&unk_10108ABD8, 32, 7);
    *(_QWORD *)(v198 + 16) = v343;
    *(_QWORD *)(v198 + 24) = v197;
    v362 = sub_100706448;
    v363 = (_QWORD *)v198;
    aBlock = (os_log_t)_NSConcreteStackBlock;
    v359 = 1107296256;
    v83 = &unk_10108ABF0;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v54);
LABEL_2:
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v57 = type metadata accessor for Logger(0);
  sub_10001A9E8(v57, (uint64_t)qword_1011B7E28);
  v58 = v352;
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v353, v352);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.error.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = (os_log_t)swift_slowAlloc(32, -1);
    aBlock = v63;
    *(_DWORD *)v62 = 136446210;
    v64 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v58, v64);
    v355 = sub_100016940(v65, v66, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v355, v356, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v58);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Pairing lock failed: %{public}s", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v58);
  }

  v81 = v342;
  v82 = swift_allocObject(&unk_10108AA98, 32, 7);
  *(_QWORD *)(v82 + 16) = v343;
  *(_QWORD *)(v82 + 24) = v81;
  v362 = sub_10070ACC0;
  v363 = (_QWORD *)v82;
  aBlock = (os_log_t)_NSConcreteStackBlock;
  v359 = 1107296256;
  v83 = &unk_10108AAB0;
LABEL_13:
  v360 = sub_100016FB8;
  v361 = v83;
  v84 = _Block_copy(&aBlock);
  v85 = swift_retain();
  v86 = v349;
  static DispatchQoS.unspecified.getter(v85);
  v355 = (uint64_t)_swiftEmptyArrayStorage;
  v87 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v88 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v89 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v90 = v346;
  v91 = v88;
  v92 = v347;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v355, v91, v89, v347, v87);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v90, v84);
  _Block_release(v84);
  (*(void (**)(char *, uint64_t))(v345 + 8))(v90, v92);
  (*(void (**)(char *, uint64_t))(v348 + 8))(v86, v350);
LABEL_31:
  swift_release();
  return sub_100004048(v351, &qword_1010F8380);
}

id sub_1006F7EAC(uint64_t *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id result;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v80 = a2;
  v81 = a3;
  v76 = a1;
  v75 = *v3;
  v78 = sub_10001A9A8(&qword_101104EC8);
  __chkstk_darwin(v78);
  v79 = (char **)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v74 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v71 = *(_QWORD *)(v7 - 8);
  v72 = v7;
  __chkstk_darwin(v7);
  v73 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v69);
  v70 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v68 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AirPodsPairingLockCheckEndPoint(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v68 - v24;
  v26 = static os_log_type_t.default.getter(v23);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v27 = qword_1011B7DF0;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_10001AA00();
  *(_QWORD *)(v29 + 32) = 0xD000000000000034;
  *(_QWORD *)(v29 + 40) = 0x8000000100EE1A70;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "%@", 2, 2, v29);
  swift_bridgeObjectRelease();
  v30 = enum case for FMNAccountType.w2Accessory(_:);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v31(v18, enum case for FMNAccountType.w2Accessory(_:), v15);
  v32 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v32, 56, 7);
  *(_QWORD *)v25 = sub_100C511C4((uint64_t)v18);
  v31(&v25[*(int *)(v19 + 20)], v30, v15);
  v33 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v34 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
  v35 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v14);
  v36 = type metadata accessor for ServerInteractionController(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  sub_10005972C((uint64_t)v25, (uint64_t)v22, type metadata accessor for AirPodsPairingLockCheckEndPoint);
  v38 = sub_10041D944((uint64_t)v22, v35, v37);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v40 = result;
    v41 = sub_100362120();

    if (v41 && (v43 = sub_100362238(), v45 = v44, v41, v45))
    {
      v46 = sub_10001F6FC();
      v47 = v68;
      static DispatchQoS.unspecified.getter(v46);
      v83 = _swiftEmptyArrayStorage;
      v48 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v49 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      v50 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
      v51 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v49, v50, v69, v48);
      v52 = v73;
      (*(void (**)(char *, _QWORD, uint64_t))(v71 + 104))(v73, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v72);
      v53 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100EE1AB0, v47, v51, v52, 0);
      v54 = type metadata accessor for TaskPriority(0);
      v55 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v74, 1, 1, v54);
      v56 = (_QWORD *)swift_allocObject(&unk_101089DA0, 416, 7);
      v56[2] = 0;
      v56[3] = 0;
      v57 = v76;
      memcpy(v56 + 4, v76, 0x140uLL);
      v56[44] = v43;
      v56[45] = v45;
      v56[46] = v77;
      v56[47] = v53;
      v58 = v81;
      v56[48] = v80;
      v56[49] = v58;
      v59 = v75;
      v56[50] = v38;
      v56[51] = v59;
      sub_1005FFCD8(v57);
      swift_retain();
      v60 = v53;
      swift_retain();
      swift_retain();
      sub_100691AC0(v55, (uint64_t)&unk_101104ED8, (uint64_t)v56);

      swift_release();
      swift_release();
    }
    else
    {
      v61 = static os_log_type_t.error.getter(v42);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7D88, "Unable to retrieve masked identifier", 36, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0);
      v63 = v62;
      v82 = 27;
      v64 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v65 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v83, &v82, v64, v63, v65);
      v66 = v78;
      v67 = (uint64_t)v79;
      *v79 = v83;
      swift_storeEnumTagMultiPayload(v67, v66, 1);
      v80(v67);
      swift_release();
      sub_100004048(v67, &qword_101104EC8);
    }
    return (id)sub_1000126B0((uint64_t)v25, type metadata accessor for AirPodsPairingLockCheckEndPoint);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006F85A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 128) = v15;
  *(_QWORD *)(v8 + 136) = v16;
  *(_OWORD *)(v8 + 112) = v14;
  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a5;
  *(_QWORD *)(v8 + 88) = a6;
  *(_QWORD *)(v8 + 72) = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 144) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 152) = v10;
  *(_QWORD *)(v8 + 160) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 168) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 176) = v12;
  *(_QWORD *)(v8 + 184) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006F8644, 0, 0);
}

uint64_t sub_1006F8644()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (uint64_t *)v0[9];
  v2 = *(_QWORD *)(v0[12] + 16);
  swift_bridgeObjectRetain(v0[11]);
  swift_retain();
  sub_1005FFCD8(v1);
  v5 = (char *)&dword_101100BC0 + dword_101100BC0;
  v3 = (_QWORD *)swift_task_alloc(unk_101100BC4);
  v0[24] = v3;
  *v3 = v0;
  v3[1] = sub_1006F86D0;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[9], v0[10], v0[11], v2);
}

uint64_t sub_1006F86D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 192);
  v4[25] = a1;
  v4[26] = a2;
  v4[27] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006F8730, 0, 0);
}

uint64_t sub_1006F8730(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  if (v1[25])
  {
    v59 = v1[25];
    v2 = static os_log_type_t.debug.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v68 = v1[17];
    v69 = v1[27];
    v60 = v1[26];
    v61 = (_QWORD *)v1[16];
    v64 = v1[14];
    v65 = v1[15];
    v62 = v1[25];
    v63 = (void *)v1[13];
    v66 = v1[12];
    v3 = (_QWORD *)v1[9];
    v4 = qword_1011B7DF0;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    v7 = Data.hexString.getter(v3[30], v3[31]);
    v9 = v8;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    v10 = sub_10001AA00();
    *(_QWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "nonce: %@", 9, 2, v6);
    v11 = swift_bridgeObjectRelease();
    v12 = static os_log_type_t.debug.getter(v11);
    v13 = qword_1011B7DF0;
    v14 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    v15 = Data.hexString.getter(v3[17], v3[18]);
    *(_QWORD *)(v14 + 56) = &type metadata for String;
    *(_QWORD *)(v14 + 64) = v10;
    *(_QWORD *)(v14 + 32) = v15;
    *(_QWORD *)(v14 + 40) = v16;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "serialNumber: %@", 16, 2, v14);
    v17 = swift_bridgeObjectRelease();
    v18 = static os_log_type_t.debug.getter(v17);
    v19 = qword_1011B7DF0;
    v20 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    v21 = Data.hexString.getter(v3[13], v3[14]);
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = v10;
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v22;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "ECID: %@", 8, 2, v20);
    v23 = swift_bridgeObjectRelease();
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    v27 = Data.hexString.getter(v3[15], v3[16]);
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    *(_QWORD *)(v26 + 64) = v10;
    *(_QWORD *)(v26 + 32) = v27;
    *(_QWORD *)(v26 + 40) = v28;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "ChipId: %@", 10, 2, v26);
    v29 = swift_bridgeObjectRelease();
    v30 = static os_log_type_t.debug.getter(v29);
    v31 = qword_1011B7DF0;
    v32 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    v33 = Data.hexString.getter(v3[24], v3[25]);
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v10;
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v34;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "SeedK1: %@", 10, 2, v32);
    v35 = swift_bridgeObjectRelease();
    v36 = static os_log_type_t.debug.getter(v35);
    v37 = qword_1011B7DF0;
    v38 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = Data.hexString.getter(*v3, v3[1]);
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = v10;
    *(_QWORD *)(v38 + 32) = v39;
    *(_QWORD *)(v38 + 40) = v40;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "H1 (hashed C2): %@", 18, 2, v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v59);
    sub_10001BBBC(v60, v69);
    sub_10034E930(v59, v60, v69, 0, v61);
    sub_100153D94(v62, v60, v69);
    v41 = (_QWORD *)swift_allocObject(&unk_101089E18, 40, 7);
    v41[2] = v63;
    v41[3] = v64;
    v41[4] = v65;
    v42 = v63;
    swift_retain();
    Future.addFailure(block:)(sub_10070483C, v41);
    swift_release();
    swift_release();
    v43 = (_QWORD *)swift_allocObject(&unk_101089E40, 376, 7);
    v43[2] = v66;
    memcpy(v43 + 3, v3, 0x140uLL);
    v43[43] = v42;
    v43[44] = v64;
    v43[45] = v65;
    v43[46] = v68;
    sub_1005FFCD8(v3);
    v44 = v42;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100704944, v43);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v62, v60, v69);
  }
  else
  {
    v45 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v46 = v1[23];
    v47 = v1[20];
    v70 = v1[22];
    v71 = v1[21];
    v48 = v1[18];
    v67 = v1[19];
    v49 = v1[14];
    v50 = v1[15];
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7DF0, "Could not create pairing lock request", 37, 2, _swiftEmptyArrayStorage);
    v51 = swift_allocObject(&unk_101089DC8, 32, 7);
    *(_QWORD *)(v51 + 16) = v49;
    *(_QWORD *)(v51 + 24) = v50;
    v1[6] = sub_100704814;
    v1[7] = v51;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_101089DE0;
    v52 = _Block_copy(v1 + 2);
    v53 = swift_retain();
    static DispatchQoS.unspecified.getter(v53);
    v1[8] = _swiftEmptyArrayStorage;
    v54 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v55 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v56 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 8, v55, v56, v48, v54);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v47, v52);
    _Block_release(v52);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v47, v48);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v46, v71);
    swift_release();
  }
  v57 = v1[20];
  swift_task_dealloc(v1[23]);
  swift_task_dealloc(v57);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1006F8D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v29 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  v10 = __chkstk_darwin(v30);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Error in verify pairing request. Error - %@", 43, 2, v16);
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_10108A0C0, 32, 7);
  *(_QWORD *)(v21 + 16) = v29;
  *(_QWORD *)(v21 + 24) = a4;
  aBlock[4] = sub_100704B4C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108A0D8;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1006F9050(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  uint8_t *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void **v99;
  void **v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  void **v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  void **v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  os_log_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  _BOOL4 v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  os_log_t v156;
  void **v157;
  char v158;
  char v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  void **v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  void *v211;
  NSString v212;
  id v213;
  char *v214;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  uint64_t v221;
  NSObject *v222;
  os_log_type_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t (*v229)(char *, uint64_t);
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  os_log_t v241;
  void **v242;
  uint64_t v243;
  NSObject *v244;
  os_log_type_t v245;
  uint8_t *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  __CFString *v259;
  char v261;
  uint64_t v262;
  NSObject *v263;
  uint64_t v264;
  uint8_t *v265;
  _QWORD *v266;
  uint64_t v267;
  void *v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  void (*v277)(char *, uint64_t);
  uint64_t v278;
  uint64_t (*v279)(char *, uint64_t);
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  os_log_t v289;
  uint64_t v290;
  uint64_t *v291;
  char *v292;
  char *v293;
  void **v294;
  void **v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  _QWORD *v307;
  void **aBlock;
  uint64_t v309;
  uint64_t (*v310)(uint64_t);
  void *v311;
  uint64_t (*v312)();
  _QWORD *v313;

  v297 = a6;
  v298 = a5;
  v299 = a4;
  v291 = a3;
  v303 = type metadata accessor for DispatchWorkItemFlags(0);
  v300 = *(_QWORD *)(v303 - 8);
  __chkstk_darwin(v303);
  v301 = (char *)&v278 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v296 = type metadata accessor for DispatchQoS(0);
  v302 = *(_QWORD *)(v296 - 8);
  __chkstk_darwin(v296);
  v304 = (char *)&v278 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = (void **)type metadata accessor for AirPodsPairingLockCheckResponse(0);
  __chkstk_darwin(v295);
  v290 = (uint64_t)&v278 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v10);
  v282 = (char *)&v278 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v286 = type metadata accessor for Date(0);
  v283 = *(_QWORD *)(v286 - 8);
  v12 = __chkstk_darwin(v286);
  v285 = (char *)&v278 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v284 = (char *)&v278 - v15;
  v16 = __chkstk_darwin(v14);
  v288 = (char *)&v278 - v17;
  v18 = __chkstk_darwin(v16);
  v281 = (char *)&v278 - v19;
  __chkstk_darwin(v18);
  v280 = (char *)&v278 - v20;
  v21 = sub_10001A9A8(&qword_1010F8378);
  v22 = __chkstk_darwin(v21);
  v292 = (char *)&v278 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v289 = (os_log_t)((char *)&v278 - v24);
  v25 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v25);
  v294 = (void **)((char *)&v278 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v31 = (char *)&v278 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v278 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v278 - v36;
  __chkstk_darwin(v35);
  v39 = (char *)&v278 - v38;
  v40 = sub_10001A9A8(&qword_1010F8380);
  v41 = __chkstk_darwin(v40);
  v287 = (uint64_t)&v278 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v293 = (char *)&v278 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v278 - v46;
  v48 = __chkstk_darwin(v45);
  v50 = (char *)&v278 - v49;
  v306 = a1;
  v51 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v48);
  v52 = (uint64_t)v50;
  ServerStatusCode.init(rawValue:)(v51);
  v53 = type metadata accessor for ServerStatusCode(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53);
  v305 = v52;
  if (v55 == 1)
  {
LABEL_2:
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v56 = type metadata accessor for Logger(0);
    sub_10001A9E8(v56, (uint64_t)qword_1011B7DF8);
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v306, v27);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = (void **)swift_slowAlloc(32, -1);
      aBlock = v61;
      *(_DWORD *)v60 = 136446210;
      v62 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v27, v62);
      v307 = (_QWORD *)sub_100016940(v63, v64, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Pairing lock failed: %{public}s", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    }

    v78 = v297;
    v77 = v298;
    v79 = swift_allocObject(&unk_101089E68, 32, 7);
    *(_QWORD *)(v79 + 16) = v77;
    *(_QWORD *)(v79 + 24) = v78;
    v312 = sub_10070ACB0;
    v313 = (_QWORD *)v79;
    aBlock = _NSConcreteStackBlock;
    v309 = 1107296256;
    v310 = sub_100016FB8;
    v311 = &unk_101089E80;
    v80 = _Block_copy(&aBlock);
    v81 = swift_retain();
    v82 = v304;
    static DispatchQoS.unspecified.getter(v81);
    v307 = _swiftEmptyArrayStorage;
    v83 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v84 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v85 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v86 = v301;
    v87 = v84;
    v88 = v303;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v307, v87, v85, v303, v83);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v82, v86, v80);
    _Block_release(v80);
    (*(void (**)(char *, uint64_t))(v300 + 8))(v86, v88);
    (*(void (**)(char *, uint64_t))(v302 + 8))(v82, v296);
LABEL_75:
    swift_release();
    return sub_100004048(v305, &qword_1010F8380);
  }
  sub_10000F9B8(v52, (uint64_t)v47, &qword_1010F8380);
  v279 = *(uint64_t (**)(char *, uint64_t))(v54 + 88);
  v65 = v279(v47, v53);
  if (v65 == enum case for ServerStatusCode.success(_:))
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v66 = type metadata accessor for Logger(0);
    v67 = sub_10001A9E8(v66, (uint64_t)qword_1011B7DF8);
    v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v39, v306, v27);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter(v69);
    v71 = os_log_type_enabled(v69, v70);
    v293 = (char *)v67;
    if (v71)
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = (void **)swift_slowAlloc(32, -1);
      aBlock = v73;
      *(_DWORD *)v72 = 136446210;
      v74 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v27, v74);
      v307 = (_QWORD *)sub_100016940(v75, v76, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v72 + 4, v72 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v39, v27);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Pairing success: %{public}s", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v39, v27);
    }

    v100 = v294;
    v102 = FMNServerInteractionController.FMNResponseFields.data.getter(v101);
    v104 = v103;
    static String.Encoding.utf8.getter(v102);
    v105 = String.init(data:encoding:)(v102, v104, v100);
    v107 = v106;
    sub_10001BC14(v102, v104);
    v108 = v295;
    if (v107)
    {
      swift_bridgeObjectRetain(v107);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.info.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = (void **)swift_slowAlloc(32, -1);
        aBlock = v113;
        *(_DWORD *)v112 = 136315138;
        swift_bridgeObjectRetain(v107);
        v307 = (_QWORD *)sub_100016940(v105, v107, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v112 + 4, v112 + 12);
        swift_bridgeObjectRelease_n(v107, 3);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "response data: %s", v112, 0xCu);
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v112, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v107, 2);
      }
    }
    v123 = type metadata accessor for JSONDecoder(0);
    v124 = swift_allocObject(v123, *(unsigned int *)(v123 + 48), *(unsigned __int16 *)(v123 + 52));
    v125 = JSONDecoder.init()(v124);
    v126 = swift_allocBox(v108);
    v128 = v127;
    v129 = FMNServerInteractionController.FMNResponseFields.data.getter(v126);
    v131 = v130;
    v132 = sub_100006204(&qword_101104EE0, type metadata accessor for AirPodsPairingLockCheckResponse, (uint64_t)&unk_100E62AD8);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v108, v129, v131, v108, v132);
    v133 = sub_10001BC14(v129, v131);
    v134 = v289;
    FMNServerInteractionController.FMNResponseFields.metadata.getter(v133);
    v135 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
    v136 = *(_QWORD *)(v135 - 8);
    v137 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135);
    v294 = (void **)v125;
    v292 = (char *)v126;
    if (v137 == 1)
    {
      v138 = sub_100004048((uint64_t)v134, &qword_1010F8378);
      v139 = v288;
    }
    else
    {
      v155 = FMNServerInteractionController.InternalServerMetadata.dateEpoch.getter();
      v156 = v134;
      v157 = (void **)v155;
      v159 = v158;
      v138 = (*(uint64_t (**)(os_log_t, uint64_t))(v136 + 8))(v156, v135);
      v139 = v288;
      if ((v159 & 1) == 0)
      {
        v160 = Logger.logObject.getter(v138);
        v161 = static os_log_type_t.default.getter(v160);
        if (os_log_type_enabled(v160, v161))
        {
          v162 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v162 = 134217984;
          aBlock = v157;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v309, v162 + 4, v162 + 12);
          _os_log_impl((void *)&_mh_execute_header, v160, v161, "Server epoch: %lld", v162, 0xCu);
          swift_slowDealloc(v162, -1, -1);
        }

        *(_QWORD *)(v128 + *((int *)v108 + 12)) = v157;
        goto LABEL_70;
      }
    }
    v163 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v138);
    if (!*(_QWORD *)(v163 + 16) || (v164 = sub_100518DA0(1702125892, 0xE400000000000000), (v165 & 1) == 0))
    {
      v174 = swift_bridgeObjectRelease();
      v175 = Logger.logObject.getter(v174);
      v176 = static os_log_type_t.error.getter(v175);
      if (os_log_type_enabled(v175, v176))
      {
        v177 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v177 = 0;
        _os_log_impl((void *)&_mh_execute_header, v175, v176, "Server response is missing Date header!", v177, 2u);
        swift_slowDealloc(v177, -1, -1);
      }

      goto LABEL_70;
    }
    v306 = v128;
    v166 = (uint64_t *)(*(_QWORD *)(v163 + 56) + 16 * v164);
    v168 = *v166;
    v167 = v166[1];
    swift_bridgeObjectRetain_n(v167, 3);
    v169 = swift_bridgeObjectRelease();
    v170 = Logger.logObject.getter(v169);
    v171 = static os_log_type_t.default.getter(v170);
    if (os_log_type_enabled(v170, v171))
    {
      v172 = (uint8_t *)swift_slowAlloc(12, -1);
      v173 = (void **)swift_slowAlloc(32, -1);
      aBlock = v173;
      *(_DWORD *)v172 = 136446210;
      swift_bridgeObjectRetain(v167);
      v307 = (_QWORD *)sub_100016940(v168, v167, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v172 + 4, v172 + 12);
      swift_bridgeObjectRelease_n(v167, 3);
      _os_log_impl((void *)&_mh_execute_header, v170, v171, "Server date: %{public}s", v172, 0xCu);
      swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v172, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v167, 2);
    }
    v207 = v286;
    v208 = v285;
    v209 = v283;
    v210 = v284;
    if (qword_1010E9EB0 != -1)
      swift_once(&qword_1010E9EB0, sub_1006F0F9C);
    v211 = (void *)qword_1011B7548;
    v212 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v213 = objc_msgSend(v211, "dateFromString:", v212);

    if (v213)
    {
      v214 = v281;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v213);

      v215 = *(void (**)(char *, char *, uint64_t))(v209 + 32);
      v216 = (uint64_t)v282;
      v215(v282, v214, v207);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v209 + 56))(v216, 0, 1, v207);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v216, 1, v207) != 1)
      {
        v217 = v280;
        v218 = ((uint64_t (*)(char *, uint64_t, uint64_t))v215)(v280, v216, v207);
        v219 = Date.epoch.getter(v218);
        *(_QWORD *)(v306 + *((int *)v295 + 12)) = v219;
        v220 = *(void (**)(char *, char *, uint64_t))(v209 + 16);
        v220(v139, v217, v207);
        v220(v210, v217, v207);
        v221 = ((uint64_t (*)(char *, char *, uint64_t))v220)(v208, v217, v207);
        v222 = Logger.logObject.getter(v221);
        v223 = static os_log_type_t.default.getter(v222);
        v224 = v223;
        if (os_log_type_enabled(v222, v223))
        {
          v225 = swift_slowAlloc(32, -1);
          v295 = (void **)swift_slowAlloc(64, -1);
          aBlock = v295;
          *(_DWORD *)v225 = 136446722;
          v289 = v222;
          v226 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          LODWORD(v288) = v224;
          v227 = dispatch thunk of CustomStringConvertible.description.getter(v207, v226);
          v307 = (_QWORD *)sub_100016940(v227, v228, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v225 + 4, v225 + 12);
          swift_bridgeObjectRelease();
          v229 = *(uint64_t (**)(char *, uint64_t))(v209 + 8);
          v230 = v229(v139, v207);
          *(_WORD *)(v225 + 12) = 2048;
          v231 = Date.epoch.getter(v230);
          v229(v210, v207);
          v307 = (_QWORD *)v231;
          v232 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v225 + 14, v225 + 22);
          *(_WORD *)(v225 + 22) = 2082;
          v307 = (_QWORD *)Date.epoch.getter(v232);
          v233 = sub_100059CC8();
          v234 = FixedWidthInteger.data.getter(&type metadata for Int64, v233);
          v236 = v235;
          v237 = v208;
          v238 = Data.hexString.getter(v234, v235);
          v240 = v239;
          sub_10001BC14(v234, v236);
          v307 = (_QWORD *)sub_100016940(v238, v240, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v225 + 24, v225 + 32);
          swift_bridgeObjectRelease();
          v229(v237, v207);
          v241 = v289;
          _os_log_impl((void *)&_mh_execute_header, v289, (os_log_type_t)v288, "pairingEpoch: %{public}s [%lld/%{public}s]", (uint8_t *)v225, 0x20u);
          v242 = v295;
          swift_arrayDestroy(v295, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v242, -1, -1);
          swift_slowDealloc(v225, -1, -1);

          v229(v280, v207);
        }
        else
        {
          v277 = *(void (**)(char *, uint64_t))(v209 + 8);
          v277(v210, v207);

          v277(v208, v207);
          v277(v139, v207);
          v277(v217, v207);
        }
LABEL_69:
        v128 = v306;
LABEL_70:
        v247 = v128;
        v248 = v290;
        sub_10005972C(v128, v290, type metadata accessor for AirPodsPairingLockCheckResponse);
        v249 = v291;
        sub_1005FFCD8(v291);
        v250 = sub_100703D78(v249, v248);
        v252 = v251;
        sub_1000126B0(v248, type metadata accessor for AirPodsPairingLockCheckResponse);
        sub_100600034(v249);
        v253 = v249[34];
        v255 = v253;
        v256 = v249[35];
        v254 = v256;
        if (v256 >> 60 == 15)
        {
          if (qword_1010E9EB8 != -1)
            swift_once(&qword_1010E9EB8, sub_1006F10B0);
          v255 = qword_1011B7550;
          v256 = *(_QWORD *)algn_1011B7558;
          sub_10001BBBC(qword_1011B7550, *(unint64_t *)algn_1011B7558);
        }
        v257 = *(_QWORD *)(v247 + 64);
        v258 = *(_QWORD *)(v247 + 72);
        sub_10001BD08(v253, v254);
        sub_10001BBBC(v257, v258);
        v259 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
        v261 = sub_1007DFE84(v255, v256, v250, v252, v257, v258, v259);

        sub_10001BC14(v257, v258);
        v262 = sub_10001BC14(v255, v256);
        v263 = Logger.logObject.getter(v262);
        v264 = static os_log_type_t.default.getter(v263);
        if (os_log_type_enabled(v263, (os_log_type_t)v264))
        {
          v265 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v265 = 67109120;
          LODWORD(aBlock) = v261 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v265 + 4, v265 + 8);
          _os_log_impl((void *)&_mh_execute_header, v263, (os_log_type_t)v264, "Signature S3 verified? %{BOOL}d", v265, 8u);
          swift_slowDealloc(v265, -1, -1);
        }

        v266 = (_QWORD *)swift_allocObject(&unk_10108A048, 40, 7);
        v267 = v297;
        v266[2] = v298;
        v266[3] = v267;
        v266[4] = v292;
        v312 = sub_100704A3C;
        v313 = v266;
        aBlock = _NSConcreteStackBlock;
        v309 = 1107296256;
        v310 = sub_100016FB8;
        v311 = &unk_10108A060;
        v268 = _Block_copy(&aBlock);
        swift_retain();
        v269 = swift_retain();
        v270 = v304;
        static DispatchQoS.unspecified.getter(v269);
        v307 = _swiftEmptyArrayStorage;
        v271 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v272 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v273 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
        v274 = v301;
        v275 = v272;
        v276 = v303;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v307, v275, v273, v303, v271);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v270, v274, v268);
        _Block_release(v268);
        sub_10001BC14(v250, v252);
        swift_release();
        (*(void (**)(char *, uint64_t))(v300 + 8))(v274, v276);
        (*(void (**)(char *, uint64_t))(v302 + 8))(v270, v296);
        swift_release();
        goto LABEL_75;
      }
    }
    else
    {
      v216 = (uint64_t)v282;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v209 + 56))(v282, 1, 1, v207);
    }
    v243 = sub_100004048(v216, (uint64_t *)&unk_1010EA690);
    v244 = Logger.logObject.getter(v243);
    v245 = static os_log_type_t.error.getter(v244);
    if (os_log_type_enabled(v244, v245))
    {
      v246 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v246 = 0;
      _os_log_impl((void *)&_mh_execute_header, v244, v245, "Unable to parse server Date!", v246, 2u);
      swift_slowDealloc(v246, -1, -1);
    }

    goto LABEL_69;
  }
  if (v65 != enum case for ServerStatusCode.forbidden(_:))
  {
    if (v65 == enum case for ServerStatusCode.serverConflict(_:))
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v114 = type metadata accessor for Logger(0);
      sub_10001A9E8(v114, (uint64_t)qword_1011B7DF8);
      v115 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v37, v306, v27);
      v116 = Logger.logObject.getter(v115);
      v117 = static os_log_type_t.error.getter(v116);
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = (void **)swift_slowAlloc(32, -1);
        aBlock = v119;
        *(_DWORD *)v118 = 136446210;
        v120 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v121 = dispatch thunk of CustomStringConvertible.description.getter(v27, v120);
        v307 = (_QWORD *)sub_100016940(v121, v122, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v118 + 4, v118 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
        _os_log_impl((void *)&_mh_execute_header, v116, v117, "Linked to another Apple ID. %{public}s", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        swift_slowDealloc(v118, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v28 + 8))(v37, v27);
      }

      v179 = v296;
      v178 = v297;
      v180 = v298;
      v181 = swift_allocObject(&unk_101089FA8, 32, 7);
      *(_QWORD *)(v181 + 16) = v180;
      *(_QWORD *)(v181 + 24) = v178;
      v312 = sub_1007049E8;
      v313 = (_QWORD *)v181;
      aBlock = _NSConcreteStackBlock;
      v309 = 1107296256;
      v310 = sub_100016FB8;
      v311 = &unk_101089FC0;
      v182 = _Block_copy(&aBlock);
      v183 = swift_retain();
      v184 = v304;
      static DispatchQoS.unspecified.getter(v183);
      v307 = _swiftEmptyArrayStorage;
      v185 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v186 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v187 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
      v188 = v301;
      v189 = v186;
      v190 = v303;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v307, v189, v187, v303, v185);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v184, v188, v182);
      _Block_release(v182);
      (*(void (**)(char *, uint64_t))(v300 + 8))(v188, v190);
      (*(void (**)(char *, uint64_t))(v302 + 8))(v184, v179);
      goto LABEL_75;
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v47, v53);
    goto LABEL_2;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v89 = type metadata accessor for Logger(0);
  v90 = sub_10001A9E8(v89, (uint64_t)qword_1011B7DF8);
  v91 = v27;
  v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 16))(v34, v306, v27);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.error.getter(v93);
  if (os_log_type_enabled(v93, v94))
  {
    v95 = swift_slowAlloc(12, -1);
    v294 = (void **)swift_slowAlloc(32, -1);
    aBlock = v294;
    v295 = (void **)v90;
    *(_DWORD *)v95 = 136446210;
    v291 = (uint64_t *)(v95 + 4);
    v96 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v97 = dispatch thunk of CustomStringConvertible.description.getter(v91, v96);
    v307 = (_QWORD *)sub_100016940(v97, v98, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v307, &aBlock, v291, v95 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v91);
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Pairing not allowed! %{public}s", (uint8_t *)v95, 0xCu);
    v99 = v294;
    swift_arrayDestroy(v294, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v95, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v91);
  }

  v140 = v298;
  v141 = (uint64_t)v293;
  v142 = (uint64_t)v292;
  ((void (*)(void))FMNServerInteractionController.FMNResponseFields.metadata.getter)();
  v143 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata(0);
  v144 = *(_QWORD *)(v143 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143) == 1)
  {
    sub_100004048(v142, &qword_1010F8378);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v141, 1, 1, v53);
    v145 = v296;
  }
  else
  {
    FMNServerInteractionController.InternalServerMetadata.errorCode.getter();
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v142, v143);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v141, 0, 1, v53);
    v146 = v287;
    sub_10000F9B8(v141, v287, &qword_1010F8380);
    v147 = v279((char *)v146, v53);
    if ((_DWORD)v147 == enum case for ServerStatusCode.preconditionFailed(_:))
    {
      v148 = Logger.logObject.getter(v147);
      v149 = static os_log_type_t.error.getter(v148);
      v150 = os_log_type_enabled(v148, v149);
      v145 = v296;
      if (v150)
      {
        v151 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v151 = 0;
        _os_log_impl((void *)&_mh_execute_header, v148, v149, "Pairing has been completed by another device", v151, 2u);
        swift_slowDealloc(v151, -1, -1);
      }

      v152 = swift_allocObject(&unk_101089F58, 32, 7);
      v153 = v297;
      *(_QWORD *)(v152 + 16) = v140;
      *(_QWORD *)(v152 + 24) = v153;
      v312 = sub_1007049C4;
      v313 = (_QWORD *)v152;
      aBlock = _NSConcreteStackBlock;
      v309 = 1107296256;
      v154 = &unk_101089F70;
      goto LABEL_57;
    }
    v145 = v296;
    if ((_DWORD)v147 == enum case for ServerStatusCode.locked(_:))
    {
      v191 = Logger.logObject.getter(v147);
      v192 = static os_log_type_t.error.getter(v191);
      if (os_log_type_enabled(v191, v192))
      {
        v193 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v193 = 0;
        _os_log_impl((void *)&_mh_execute_header, v191, v192, "Pairing is pending from another device", v193, 2u);
        swift_slowDealloc(v193, -1, -1);
      }

      v194 = swift_allocObject(&unk_101089F08, 32, 7);
      v195 = v297;
      *(_QWORD *)(v194 + 16) = v140;
      *(_QWORD *)(v194 + 24) = v195;
      v312 = sub_1007049A0;
      v313 = (_QWORD *)v194;
      aBlock = _NSConcreteStackBlock;
      v309 = 1107296256;
      v154 = &unk_101089F20;
      goto LABEL_57;
    }
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v146, v53);
  }
  v196 = v297;
  v197 = swift_allocObject(&unk_101089EB8, 32, 7);
  *(_QWORD *)(v197 + 16) = v140;
  *(_QWORD *)(v197 + 24) = v196;
  v312 = sub_100704958;
  v313 = (_QWORD *)v197;
  aBlock = _NSConcreteStackBlock;
  v309 = 1107296256;
  v154 = &unk_101089ED0;
LABEL_57:
  v310 = sub_100016FB8;
  v311 = v154;
  v198 = _Block_copy(&aBlock);
  v199 = swift_retain();
  v200 = v304;
  static DispatchQoS.unspecified.getter(v199);
  v307 = _swiftEmptyArrayStorage;
  v201 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v202 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v203 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v204 = v301;
  v205 = v202;
  v206 = v303;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v307, v205, v203, v303, v201);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v200, v204, v198);
  _Block_release(v198);
  (*(void (**)(char *, uint64_t))(v300 + 8))(v204, v206);
  (*(void (**)(char *, uint64_t))(v302 + 8))(v200, v145);
  swift_release();
  sub_100004048(v141, &qword_1010F8380);
  return sub_100004048(v305, &qword_1010F8380);
}

uint64_t sub_1006FB1B8(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v15[24];

  v9 = sub_10001A9A8(a4);
  __chkstk_darwin(v9);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a5(0);
  v12 = swift_projectBox(a3);
  swift_beginAccess(v12, v15, 0, 0);
  sub_10005972C(v12, (uint64_t)v11, (uint64_t (*)(_QWORD))a5);
  swift_storeEnumTagMultiPayload(v11, v9, 0);
  a1(v11);
  return sub_100004048((uint64_t)v11, a4);
}

uint64_t sub_1006FB298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006FB32C, 0, 0);
}

uint64_t sub_1006FB32C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)v0[13];
  v2 = *(_QWORD *)(v0[14] + 16);
  swift_retain();
  sub_100350B58(v1);
  v5 = (char *)&dword_101103D38 + dword_101103D38;
  v3 = (_QWORD *)swift_task_alloc(unk_101103D3C);
  v0[25] = v3;
  *v3 = v0;
  v3[1] = sub_1006FB3AC;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[13], v2);
}

uint64_t sub_1006FB3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[25];
  v4[26] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006FB410, 0, 0);
}

uint64_t sub_1006FB410(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1[26];
  if (v2)
  {
    v3 = v1[10];
    v4 = v1[11];
    v6 = v1[17];
    v5 = (_QWORD *)v1[18];
    v7 = (void *)v1[15];
    v8 = v1[16];
    swift_bridgeObjectRetain(v1[26]);
    sub_10001BBBC(v3, v4);
    sub_10034EBC0(v2, v3, v4, 0, v5);
    sub_100153D94(v2, v3, v4);
    v9 = (_QWORD *)swift_allocObject(&unk_101089A58, 40, 7);
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v6;
    v10 = v7;
    swift_retain();
    Future.addFailure(block:)(sub_100702278, v9);
    swift_release();
    swift_release();
    v11 = (_QWORD *)swift_allocObject(&unk_101089A80, 40, 7);
    v11[2] = v10;
    v11[3] = v8;
    v11[4] = v6;
    v12 = v10;
    swift_retain();
    Future.addSuccess(block:)(sub_100702288, v11);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v2, v3, v4);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v14 = v1[24];
    v15 = v1[21];
    v28 = v1[23];
    v29 = v1[22];
    v16 = v1[19];
    v27 = v1[20];
    v17 = v1[16];
    v18 = v1[17];
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DF0, "Could not create unpair command", 31, 2, _swiftEmptyArrayStorage);
    v19 = swift_allocObject(&unk_101089A08, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v1[6] = sub_1002A3A7C;
    v1[7] = v19;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_101089A20;
    v20 = _Block_copy(v1 + 2);
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v1[12] = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v23, v24, v16, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v15, v20);
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v29);
    swift_release();
  }
  v25 = v1[21];
  swift_task_dealloc(v1[24]);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1006FB72C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v28 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Remove pairing lock command failed. Error - %@", 46, 2, v16);
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)swift_allocObject(&unk_101089B48, 40, 7);
  v21[2] = v28;
  v21[3] = a4;
  v21[4] = a1;
  aBlock[4] = sub_100016FE4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101089B60;
  v22 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1006FB9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void **aBlock;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  void *v64;
  uint64_t v65;

  v51 = a3;
  v52 = a4;
  v54 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v56 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v53 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v49[1] = a1;
    v17 = (uint8_t *)v16;
    v18 = (void **)swift_slowAlloc(32, -1);
    aBlock = v18;
    *(_DWORD *)v17 = 136446210;
    v50 = v5;
    v19 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v8, v19);
    v59 = (_QWORD *)sub_100016940(v20, v21, (uint64_t *)&aBlock);
    v5 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &aBlock, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Remove pairing lock response %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  v23 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (v23 == 200)
  {
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7DF0, "Remove pairing lock was successful.", 35, 2, _swiftEmptyArrayStorage);
    v25 = swift_allocObject(&unk_101089AF8, 32, 7);
    v26 = v52;
    *(_QWORD *)(v25 + 16) = v51;
    *(_QWORD *)(v25 + 24) = v26;
    v64 = sub_1002A3AD4;
    v65 = v25;
    aBlock = _NSConcreteStackBlock;
    v61 = 1107296256;
    v62 = sub_100016FB8;
    v63 = &unk_101089B10;
    v27 = _Block_copy(&aBlock);
    v28 = swift_retain();
    v29 = v53;
    static DispatchQoS.unspecified.getter(v28);
    v59 = _swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v33 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v31, v32, v5, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v27);
    v34 = v27;
  }
  else
  {
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v35 = qword_1011B7DF0;
    v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v37 = swift_allocObject(v36, 72, 7);
    *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
    aBlock = (void **)FMNServerInteractionController.FMNResponseFields.statusCode.getter(v37);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v40 = v39;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    *(_QWORD *)(v37 + 64) = sub_10001AA00();
    *(_QWORD *)(v37 + 32) = v38;
    *(_QWORD *)(v37 + 40) = v40;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v35, "Remove pairing lock failed. Status code - %@", 44, 2, v37);
    swift_bridgeObjectRelease();
    v41 = swift_allocObject(&unk_101089AA8, 32, 7);
    v42 = v52;
    *(_QWORD *)(v41 + 16) = v51;
    *(_QWORD *)(v41 + 24) = v42;
    v64 = sub_1002A3AB8;
    v65 = v41;
    aBlock = _NSConcreteStackBlock;
    v61 = 1107296256;
    v62 = sub_100016FB8;
    v63 = &unk_101089AC0;
    v43 = _Block_copy(&aBlock);
    v44 = swift_retain();
    v29 = v53;
    static DispatchQoS.unspecified.getter(v44);
    v59 = _swiftEmptyArrayStorage;
    v45 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v47 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v33 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v46, v47, v5, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v43);
    v34 = v43;
  }
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v5);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v58);
  return swift_release();
}

uint64_t sub_1006FC014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  id v51;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v60 = a2;
  v61 = a3;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v58 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v54);
  v53 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AirPodsPairingLockAckEndPoint(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v53 - v23;
  v25 = enum case for FMNAccountType.w2Accessory(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v26(v18, enum case for FMNAccountType.w2Accessory(_:), v15);
  v27 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v27, 56, 7);
  *(_QWORD *)v24 = sub_100C511C4((uint64_t)v18);
  v26(&v24[*(int *)(v19 + 20)], v25, v15);
  v28 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  v30 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v14);
  v31 = type metadata accessor for ServerInteractionController(0);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  sub_10005972C((uint64_t)v24, (uint64_t)v22, type metadata accessor for AirPodsPairingLockAckEndPoint);
  v33 = sub_10041D960((uint64_t)v22, v30, v32);
  v34 = sub_10001F6FC();
  static DispatchQoS.unspecified.getter(v34);
  v62 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v37 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  v38 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v36, v37, v54, v35);
  v39 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v57);
  v40 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x8000000100EE1A50, v11, v38, v39, 0);
  v41 = type metadata accessor for TaskPriority(0);
  v42 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v58, 1, 1, v41);
  v43 = swift_allocObject(&unk_101089B98, 280, 7);
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  v44 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v43 + 192) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v43 + 208) = v44;
  *(_OWORD *)(v43 + 224) = *(_OWORD *)(a1 + 192);
  v45 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v43 + 128) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v43 + 144) = v45;
  v46 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v43 + 160) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v43 + 176) = v46;
  v47 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v43 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v43 + 80) = v47;
  v48 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v43 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v43 + 112) = v48;
  v49 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v43 + 48) = v49;
  v50 = v60;
  *(_QWORD *)(v43 + 240) = v59;
  *(_QWORD *)(v43 + 248) = v40;
  *(_QWORD *)(v43 + 256) = v50;
  *(_QWORD *)(v43 + 264) = v61;
  *(_QWORD *)(v43 + 272) = v33;
  sub_1007024DC((_QWORD *)a1);
  swift_retain();
  v51 = v40;
  swift_retain();
  swift_retain();
  sub_100691AC0(v42, (uint64_t)&unk_101104EB0, v43);

  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v24, type metadata accessor for AirPodsPairingLockAckEndPoint);
}

uint64_t sub_1006FC4C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006FC558, 0, 0);
}

uint64_t sub_1006FC558()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)v0[13];
  v2 = *(_QWORD *)(v0[14] + 16);
  swift_retain();
  sub_1007024DC(v1);
  v5 = (char *)&dword_101112868 + dword_101112868;
  v3 = (_QWORD *)swift_task_alloc(unk_10111286C);
  v0[25] = v3;
  *v3 = v0;
  v3[1] = sub_1006FC5D8;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[13], v2);
}

uint64_t sub_1006FC5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[25];
  v4[26] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006FC63C, 0, 0);
}

uint64_t sub_1006FC63C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1[26];
  if (v2)
  {
    v3 = v1[10];
    v4 = v1[11];
    v6 = v1[17];
    v5 = (_QWORD *)v1[18];
    v7 = (void *)v1[15];
    v8 = v1[16];
    swift_bridgeObjectRetain(v1[26]);
    sub_10001BBBC(v3, v4);
    sub_10034EE50(v2, v3, v4, 0, v5);
    sub_100153D94(v2, v3, v4);
    v9 = (_QWORD *)swift_allocObject(&unk_101089C10, 40, 7);
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v6;
    v10 = v7;
    swift_retain();
    Future.addFailure(block:)(sub_10070452C, v9);
    swift_release();
    swift_release();
    v11 = (_QWORD *)swift_allocObject(&unk_101089C38, 40, 7);
    v11[2] = v10;
    v11[3] = v8;
    v11[4] = v6;
    v12 = v10;
    swift_retain();
    Future.addSuccess(block:)(sub_10070453C, v11);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v2, v3, v4);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v14 = v1[24];
    v15 = v1[21];
    v28 = v1[23];
    v29 = v1[22];
    v16 = v1[19];
    v27 = v1[20];
    v17 = v1[16];
    v18 = v1[17];
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DF0, "Could not create pairing ack request", 36, 2, _swiftEmptyArrayStorage);
    v19 = swift_allocObject(&unk_101089BC0, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v1[6] = sub_100704504;
    v1[7] = v19;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_101089BD8;
    v20 = _Block_copy(v1 + 2);
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v1[12] = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v23, v24, v16, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v15, v20);
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v29);
    swift_release();
  }
  v25 = v1[21];
  swift_task_dealloc(v1[24]);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1006FC958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v29 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  v10 = __chkstk_darwin(v30);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Ack pairing failed. Error - %@", 30, 2, v16);
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_101089D50, 32, 7);
  *(_QWORD *)(v21 + 16) = v29;
  *(_QWORD *)(v21 + 24) = a4;
  aBlock[4] = sub_100704624;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101089D68;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1006FCC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;
  uint8_t *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  void **aBlock;
  uint64_t v90;
  uint64_t (*v91)(uint64_t);
  void *v92;
  uint64_t (*v93)();
  uint64_t v94;

  v82 = a4;
  v84 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v83 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v86 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v85 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  v80 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v80 + 64);
  v12 = __chkstk_darwin(v10);
  __chkstk_darwin(v12);
  v81 = (char *)&v71 - v13;
  v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v16);
  if (v19 == 200)
  {
    v75 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v77 = a3;
    v79 = v8;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7DF8);
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v78 = a1;
    v23 = v22(v18, a1, v14);
    v76 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = (void **)swift_slowAlloc(32, -1);
      aBlock = v73;
      v74 = v6;
      *(_DWORD *)v26 = 136446210;
      v72 = v26 + 4;
      v27 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v14, v27);
      v88 = (_QWORD *)sub_100016940(v28, v29, (uint64_t *)&aBlock);
      v6 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &aBlock, v72, v26 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ack pairing success: %{public}s", v26, 0xCu);
      v30 = v73;
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }

    v49 = v79;
    v50 = type metadata accessor for JSONDecoder(0);
    v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    v52 = JSONDecoder.init()(v51);
    v53 = FMNServerInteractionController.FMNResponseFields.data.getter(v52);
    v55 = v54;
    v56 = sub_100006204(&qword_101104EB8, type metadata accessor for AirPodsPairingLockAckResponse, (uint64_t)&unk_100E47828);
    v57 = (uint64_t)v81;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v10, v53, v55, v10, v56);
    sub_10001BC14(v53, v55);
    v58 = v75;
    sub_10005972C(v57, v75, type metadata accessor for AirPodsPairingLockAckResponse);
    v59 = *(unsigned __int8 *)(v80 + 80);
    v60 = (v59 + 32) & ~v59;
    v61 = swift_allocObject(&unk_101089D00, v60 + v11, v59 | 7);
    v62 = v82;
    *(_QWORD *)(v61 + 16) = v77;
    *(_QWORD *)(v61 + 24) = v62;
    sub_1000126EC(v58, v61 + v60, type metadata accessor for AirPodsPairingLockAckResponse);
    v93 = sub_100704610;
    v94 = v61;
    aBlock = _NSConcreteStackBlock;
    v90 = 1107296256;
    v91 = sub_100016FB8;
    v92 = &unk_101089D18;
    v63 = _Block_copy(&aBlock);
    v64 = swift_retain();
    v65 = v85;
    static DispatchQoS.unspecified.getter(v64);
    v88 = _swiftEmptyArrayStorage;
    v66 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v67 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v68 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v69 = v86;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v67, v68, v6, v66);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v65, v69, v63);
    _Block_release(v63);
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v69, v6);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v49);
    sub_1000126B0(v57, type metadata accessor for AirPodsPairingLockAckResponse);
  }
  else
  {
    v31 = a3;
    v32 = static os_log_type_t.default.getter(v19);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v33 = qword_1011B7DF0;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
    v36 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
    v39 = v38;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v37;
    *(_QWORD *)(v35 + 40) = v39;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Ack pairing failed. Response %@", 31, 2, v35);
    swift_bridgeObjectRelease();
    v40 = swift_allocObject(&unk_101089C60, 32, 7);
    v41 = v82;
    *(_QWORD *)(v40 + 16) = v31;
    *(_QWORD *)(v40 + 24) = v41;
    v93 = sub_10070ACAC;
    v94 = v40;
    aBlock = _NSConcreteStackBlock;
    v90 = 1107296256;
    v91 = sub_100016FB8;
    v92 = &unk_101089C78;
    v42 = _Block_copy(&aBlock);
    v43 = swift_retain();
    v44 = v85;
    static DispatchQoS.unspecified.getter(v43);
    v88 = _swiftEmptyArrayStorage;
    v45 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v47 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v48 = v86;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v46, v47, v6, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v42);
    _Block_release(v42);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v6);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v44, v8);
  }
  return swift_release();
}

uint64_t sub_1006FD62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)(v8 + 160) = v15;
  *(_OWORD *)(v8 + 144) = v14;
  *(_QWORD *)(v8 + 128) = a7;
  *(_QWORD *)(v8 + 136) = a8;
  *(_QWORD *)(v8 + 112) = a5;
  *(_QWORD *)(v8 + 120) = a6;
  *(_QWORD *)(v8 + 104) = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 168) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 184) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 192) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 200) = v12;
  *(_QWORD *)(v8 + 208) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006FD6CC, 0, 0);
}

uint64_t sub_1006FD6CC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v1 = v0[15];
  v3 = (_QWORD *)v0[13];
  v2 = v0[14];
  v4 = *(_QWORD *)(v0[16] + 16);
  swift_retain();
  sub_10016837C(v3);
  sub_10001BBBC(v2, v1);
  v7 = (char *)&dword_1010F11B0 + dword_1010F11B0;
  v5 = (_QWORD *)swift_task_alloc(unk_1010F11B4);
  v0[27] = v5;
  *v5 = v0;
  v5[1] = sub_1006FD768;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v7)(v0[13], v0[14], v0[15], v4);
}

uint64_t sub_1006FD768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[27];
  v4[28] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006FD7CC, 0, 0);
}

uint64_t sub_1006FD7CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[28];
  if (v1)
  {
    v2 = v0[10];
    v3 = v0[11];
    v5 = v0[19];
    v4 = (_QWORD *)v0[20];
    v6 = (void *)v0[17];
    v7 = v0[18];
    swift_bridgeObjectRetain(v0[28]);
    sub_10001BBBC(v2, v3);
    sub_10034F0E0(v1, v2, v3, 0, v4);
    sub_100153D94(v1, v2, v3);
    v8 = (_QWORD *)swift_allocObject(&unk_10108A228, 40, 7);
    v8[2] = v6;
    v8[3] = v7;
    v8[4] = v5;
    v9 = v6;
    swift_retain();
    Future.addFailure(block:)(sub_100704DBC, v8);
    swift_release();
    swift_release();
    v10 = (_QWORD *)swift_allocObject(&unk_10108A250, 40, 7);
    v10[2] = v9;
    v10[3] = v7;
    v10[4] = v5;
    v11 = v9;
    swift_retain();
    Future.addSuccess(block:)(sub_100704DFC, v10);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v1, v2, v3);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7E28);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Could not create pairing ack request", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = v0[26];
    v18 = v0[23];
    v31 = v0[25];
    v32 = v0[24];
    v20 = v0[21];
    v19 = v0[22];
    v21 = v0[18];
    v22 = v0[19];

    v23 = swift_allocObject(&unk_10108A1D8, 32, 7);
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = v22;
    v0[6] = sub_100704D94;
    v0[7] = v23;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_10108A1F0;
    v24 = _Block_copy(v0 + 2);
    v25 = swift_retain();
    static DispatchQoS.unspecified.getter(v25);
    v0[12] = _swiftEmptyArrayStorage;
    v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v28 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 12, v27, v28, v20, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v18, v24);
    _Block_release(v24);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v17, v32);
    swift_release();
  }
  v29 = v0[23];
  swift_task_dealloc(v0[26]);
  swift_task_dealloc(v29);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1006FDB30(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t aBlock[6];

  v44 = a5;
  v45 = a6;
  v46 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  __chkstk_darwin(v16);
  v47 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7E28);
  swift_errorRetain(a1);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v40 = a8;
    v22 = swift_slowAlloc(12, -1);
    v39 = a7;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v41 = a4;
    v25 = v24;
    v50 = a1;
    aBlock[0] = v24;
    v42 = v15;
    v43 = v13;
    *(_DWORD *)v23 = 136446210;
    swift_errorRetain(a1);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v27 = String.init<A>(describing:)(&v50, v26);
    v50 = (_QWORD *)sub_100016940(v27, v28, aBlock);
    v15 = v42;
    v13 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, aBlock, v23 + 4, v23 + 12);
    a8 = v40;
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, v44, v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v29 = v25;
    a4 = v41;
    swift_slowDealloc(v29, -1, -1);
    v30 = v23;
    a7 = v39;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v31 = swift_allocObject(v45, 32, 7);
  *(_QWORD *)(v31 + 16) = v46;
  *(_QWORD *)(v31 + 24) = a4;
  aBlock[4] = a7;
  aBlock[5] = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = a8;
  v32 = _Block_copy(aBlock);
  v33 = swift_retain();
  v34 = v47;
  static DispatchQoS.unspecified.getter(v33);
  v50 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v36, v37, v12, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v15, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v49);
  return swift_release();
}

uint64_t sub_1006FDEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void **v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v79;
  uint8_t *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void **aBlock;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  void *v100;
  uint64_t (*v101)();
  uint64_t v102;

  v89 = a3;
  v90 = a4;
  v91 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v93 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v94 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v92 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  v84 = *(_QWORD *)(v87 - 8);
  v10 = *(_QWORD *)(v84 + 64);
  v11 = __chkstk_darwin(v87);
  v85 = (uint64_t)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v79 - v12;
  v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v79 - v20;
  v95 = a1;
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v19) == 200)
  {
    v86 = v6;
    v88 = v8;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7E28);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v95, v14);
    v82 = v23;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v81 = v13;
      v28 = (uint8_t *)v27;
      v29 = (void **)swift_slowAlloc(32, -1);
      v83 = v5;
      v30 = v29;
      aBlock = v29;
      *(_DWORD *)v28 = 136446210;
      v80 = v28 + 4;
      v31 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v14, v31);
      v96 = (_QWORD *)sub_100016940(v32, v33, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v80, v28 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ack pairing success: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v34 = v30;
      v5 = v83;
      swift_slowDealloc(v34, -1, -1);
      v35 = v28;
      v13 = v81;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    }

    v47 = type metadata accessor for JSONDecoder(0);
    v48 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
    v49 = JSONDecoder.init()(v48);
    v50 = FMNServerInteractionController.FMNResponseFields.data.getter(v49);
    v52 = v51;
    v53 = sub_100006204(&qword_101104F08, type metadata accessor for AirPodsLEPairingLockAckResponse, (uint64_t)&unk_100E2EFB8);
    v54 = (uint64_t)v13;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v87, v50, v52, v87, v53);
    v55 = v88;
    sub_10001BC14(v50, v52);
    v65 = v85;
    sub_10005972C((uint64_t)v13, v85, type metadata accessor for AirPodsLEPairingLockAckResponse);
    v66 = *(unsigned __int8 *)(v84 + 80);
    v67 = (v66 + 32) & ~v66;
    v68 = swift_allocObject(&unk_10108A318, v67 + v10, v66 | 7);
    v69 = v90;
    *(_QWORD *)(v68 + 16) = v89;
    *(_QWORD *)(v68 + 24) = v69;
    sub_1000126EC(v65, v68 + v67, type metadata accessor for AirPodsLEPairingLockAckResponse);
    v101 = sub_100704F1C;
    v102 = v68;
    aBlock = _NSConcreteStackBlock;
    v98 = 1107296256;
    v99 = sub_100016FB8;
    v100 = &unk_10108A330;
    v70 = _Block_copy(&aBlock);
    v71 = swift_retain();
    v72 = v92;
    static DispatchQoS.unspecified.getter(v71);
    v96 = _swiftEmptyArrayStorage;
    v73 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v74 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v75 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v76 = v55;
    v77 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v96, v74, v75, v5, v73);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v72, v77, v70);
    _Block_release(v70);
    swift_release();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v77, v5);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v72, v76);
    sub_1000126B0(v54, type metadata accessor for AirPodsLEPairingLockAckResponse);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B7E28);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v95, v14);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void **)swift_slowAlloc(32, -1);
      v88 = v8;
      v42 = v41;
      aBlock = v41;
      v83 = v5;
      *(_DWORD *)v40 = 136446210;
      v86 = v6;
      v43 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v14, v43);
      v96 = (_QWORD *)sub_100016940(v44, v45, (uint64_t *)&aBlock);
      v6 = v86;
      v5 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Ack pairing failed. Response %{public}s", v40, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      v46 = v42;
      v8 = v88;
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }

    v56 = v90;
    v57 = swift_allocObject(&unk_10108A278, 32, 7);
    *(_QWORD *)(v57 + 16) = v89;
    *(_QWORD *)(v57 + 24) = v56;
    v101 = sub_10070ACB4;
    v102 = v57;
    aBlock = _NSConcreteStackBlock;
    v98 = 1107296256;
    v99 = sub_100016FB8;
    v100 = &unk_10108A290;
    v58 = _Block_copy(&aBlock);
    v59 = swift_retain();
    v60 = v92;
    static DispatchQoS.unspecified.getter(v59);
    v96 = _swiftEmptyArrayStorage;
    v61 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v62 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v63 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v64 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v96, v62, v63, v5, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v64, v58);
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v64, v5);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v60, v8);
  }
  return swift_release();
}

uint64_t sub_1006FE9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006FEA48, 0, 0);
}

uint64_t sub_1006FEA48()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)v0[13];
  v2 = *(_QWORD *)(v0[14] + 16);
  swift_retain();
  sub_100705A7C(v1);
  v5 = (char *)&dword_101114998 + dword_101114998;
  v3 = (_QWORD *)swift_task_alloc(unk_10111499C);
  v0[25] = v3;
  *v3 = v0;
  v3[1] = sub_1006FEAC8;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[13], v2);
}

uint64_t sub_1006FEAC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[25];
  v4[26] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1006FEB2C, 0, 0);
}

uint64_t sub_1006FEB2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v1 = v0[26];
  if (v1)
  {
    v2 = v0[10];
    v3 = v0[11];
    v5 = v0[17];
    v4 = (_QWORD *)v0[18];
    v6 = (void *)v0[15];
    v7 = v0[16];
    swift_bridgeObjectRetain(v0[26]);
    sub_10001BBBC(v2, v3);
    sub_10034F370(v1, v2, v3, 0, v4);
    sub_100153D94(v1, v2, v3);
    v8 = (_QWORD *)swift_allocObject(&unk_10108A840, 40, 7);
    v8[2] = v6;
    v8[3] = v7;
    v8[4] = v5;
    v9 = v6;
    swift_retain();
    Future.addFailure(block:)(sub_100705BDC, v8);
    swift_release();
    swift_release();
    v10 = (_QWORD *)swift_allocObject(&unk_10108A868, 40, 7);
    v10[2] = v9;
    v10[3] = v7;
    v10[4] = v5;
    v11 = v9;
    swift_retain();
    Future.addSuccess(block:)(sub_100705C1C, v10);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v1, v2, v3);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7E28);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Could not create pairing ack request", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = v0[24];
    v18 = v0[21];
    v31 = v0[23];
    v32 = v0[22];
    v20 = v0[19];
    v19 = v0[20];
    v21 = v0[16];
    v22 = v0[17];

    v23 = swift_allocObject(&unk_10108A7F0, 32, 7);
    *(_QWORD *)(v23 + 16) = v21;
    *(_QWORD *)(v23 + 24) = v22;
    v0[6] = sub_100705BB4;
    v0[7] = v23;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_10108A808;
    v24 = _Block_copy(v0 + 2);
    v25 = swift_retain();
    static DispatchQoS.unspecified.getter(v25);
    v0[12] = _swiftEmptyArrayStorage;
    v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v28 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 12, v27, v28, v20, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v18, v24);
    _Block_release(v24);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v17, v32);
    swift_release();
  }
  v29 = v0[21];
  swift_task_dealloc(v0[24]);
  swift_task_dealloc(v29);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1006FEE90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void **aBlock;
  _QWORD v51[5];

  v43 = a5;
  v44 = a6;
  v45 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v16 - 8);
  v48 = v16;
  __chkstk_darwin(v16);
  v46 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7E28);
  swift_errorRetain(a1);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v39 = a8;
    v22 = swift_slowAlloc(12, -1);
    v38 = a7;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(8, -1);
    v40 = a4;
    v25 = (_QWORD *)v24;
    v41 = v15;
    v42 = v13;
    *(_DWORD *)v23 = 138543362;
    swift_errorRetain(a1);
    v26 = _swift_stdlib_bridgeErrorToNSError(a1);
    aBlock = (void **)v26;
    v15 = v41;
    v13 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v51, v23 + 4, v23 + 12);
    *v25 = v26;
    a8 = v39;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, v43, v23, 0xCu);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v25, 1, v27);
    v28 = v25;
    a4 = v40;
    swift_slowDealloc(v28, -1, -1);
    v29 = v23;
    a7 = v38;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v30 = swift_allocObject(v44, 32, 7);
  *(_QWORD *)(v30 + 16) = v45;
  *(_QWORD *)(v30 + 24) = a4;
  v51[3] = a7;
  v51[4] = v30;
  aBlock = _NSConcreteStackBlock;
  v51[0] = 1107296256;
  v51[1] = sub_100016FB8;
  v51[2] = a8;
  v31 = _Block_copy(&aBlock);
  v32 = swift_retain();
  v33 = v46;
  static DispatchQoS.unspecified.getter(v32);
  v49 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v35, v36, v12, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v15, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v48);
  return swift_release();
}

uint64_t sub_1006FF208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void **v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v80;
  uint8_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void **aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  void *v101;
  uint64_t (*v102)();
  uint64_t v103;

  v90 = a3;
  v91 = a4;
  v92 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v94 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v95 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v93 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  v85 = *(_QWORD *)(v87 - 8);
  v10 = *(_QWORD *)(v85 + 64);
  v11 = __chkstk_darwin(v87);
  v86 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v80 - v12;
  v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v80 - v20;
  v96 = a1;
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v19) == 200)
  {
    v88 = v6;
    v89 = v8;
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7E28);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v96, v14);
    v83 = v23;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(12, -1);
      v82 = v13;
      v28 = (uint8_t *)v27;
      v29 = (void **)swift_slowAlloc(32, -1);
      v84 = v5;
      v30 = v29;
      aBlock = v29;
      *(_DWORD *)v28 = 136446210;
      v81 = v28 + 4;
      v31 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v14, v31);
      v97 = (_QWORD *)sub_100016940(v32, v33, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock, v81, v28 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Ack pairing success: %{public}s", v28, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v34 = v30;
      v5 = v84;
      swift_slowDealloc(v34, -1, -1);
      v35 = v28;
      v13 = v82;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    }

    v47 = v88;
    v48 = type metadata accessor for JSONDecoder(0);
    v49 = swift_allocObject(v48, *(unsigned int *)(v48 + 48), *(unsigned __int16 *)(v48 + 52));
    v50 = JSONDecoder.init()(v49);
    v51 = FMNServerInteractionController.FMNResponseFields.data.getter(v50);
    v53 = v52;
    v54 = sub_100006204(&qword_101104F48, type metadata accessor for AirPodsSWPairingLockAckResponse, (uint64_t)&unk_100E3EEB8);
    v55 = (uint64_t)v13;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v87, v51, v53, v87, v54);
    v56 = v89;
    v84 = v50;
    sub_10001BC14(v51, v53);
    v66 = v86;
    sub_10005972C((uint64_t)v13, v86, type metadata accessor for AirPodsSWPairingLockAckResponse);
    v67 = *(unsigned __int8 *)(v85 + 80);
    v68 = (v67 + 32) & ~v67;
    v69 = swift_allocObject(&unk_10108A930, v68 + v10, v67 | 7);
    v70 = v91;
    *(_QWORD *)(v69 + 16) = v90;
    *(_QWORD *)(v69 + 24) = v70;
    sub_1000126EC(v66, v69 + v68, type metadata accessor for AirPodsSWPairingLockAckResponse);
    v102 = sub_100705D24;
    v103 = v69;
    aBlock = _NSConcreteStackBlock;
    v99 = 1107296256;
    v100 = sub_100016FB8;
    v101 = &unk_10108A948;
    v71 = _Block_copy(&aBlock);
    v72 = swift_retain();
    v73 = v93;
    static DispatchQoS.unspecified.getter(v72);
    v97 = _swiftEmptyArrayStorage;
    v74 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v75 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v76 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v77 = v47;
    v78 = v94;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v75, v76, v5, v74);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v73, v78, v71);
    _Block_release(v71);
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v5);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v73, v56);
    sub_1000126B0(v55, type metadata accessor for AirPodsSWPairingLockAckResponse);
  }
  else
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B7E28);
    v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v96, v14);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void **)swift_slowAlloc(32, -1);
      v89 = v8;
      v42 = v41;
      aBlock = v41;
      v84 = v5;
      *(_DWORD *)v40 = 136446210;
      v88 = v6;
      v43 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v14, v43);
      v97 = (_QWORD *)sub_100016940(v44, v45, (uint64_t *)&aBlock);
      v6 = v88;
      v5 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Ack pairing failed. Response %{public}s", v40, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      v46 = v42;
      v8 = v89;
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }

    v57 = v91;
    v58 = swift_allocObject(&unk_10108A890, 32, 7);
    *(_QWORD *)(v58 + 16) = v90;
    *(_QWORD *)(v58 + 24) = v57;
    v102 = sub_10070ACBC;
    v103 = v58;
    aBlock = _NSConcreteStackBlock;
    v99 = 1107296256;
    v100 = sub_100016FB8;
    v101 = &unk_10108A8A8;
    v59 = _Block_copy(&aBlock);
    v60 = swift_retain();
    v61 = v93;
    static DispatchQoS.unspecified.getter(v60);
    v97 = _swiftEmptyArrayStorage;
    v62 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v63 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v64 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v65 = v94;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v97, v63, v64, v5, v62);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v61, v65, v59);
    _Block_release(v59);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v65, v5);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v61, v8);
  }
  return swift_release();
}

uint64_t sub_1006FFCC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[17];
  v10 = (_QWORD *)swift_task_alloc(dword_101104E74);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_1006FB298(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

uint64_t sub_1006FFD6C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8_t *v61;
  NSObject *v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  os_log_t v69;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = sub_100704FDC(a1);
  v83 = PropertyListEncoder.init()(v6);
  dispatch thunk of PropertyListEncoder.outputFormat.setter(100);
  v7 = a1[17];
  v8 = a1[18];
  v84 = a1;
  sub_10001BBBC(v7, v8);
  v9 = Data.trimmed.getter(v7, v8);
  v11 = v10;
  v12 = sub_10001BC14(v7, v8);
  v82 = v9;
  *(_QWORD *)&v93 = v9;
  *((_QWORD *)&v93 + 1) = v11;
  v81 = v11;
  static String.Encoding.utf8.getter(v12);
  v13 = sub_1000DCC90();
  v14 = String.init<A>(bytes:encoding:)(&v93, v4, &type metadata for Data, v13);
  if (!v15)
    v14 = Data.hexString.getter(v82, v81);
  v16 = v14;
  v17 = v15;
  v18 = v84;
  v93 = *(_OWORD *)(v84 + 15);
  v19 = sub_100035530();
  v20 = DataProtocol.intValue.getter(&type metadata for Data, v19);
  v93 = *(_OWORD *)(v18 + 13);
  v21 = DataProtocol.intValue.getter(&type metadata for Data, v19);
  v22 = v18[40];
  v23 = v18[41];
  *(_QWORD *)&v93 = 0;
  *((_QWORD *)&v93 + 1) = v20;
  v24 = v22;
  v26 = v18[42];
  v25 = v18[43];
  *(_QWORD *)&v94 = v21;
  *((_QWORD *)&v94 + 1) = &off_101048FA0;
  *(_QWORD *)&v95 = v16;
  *((_QWORD *)&v95 + 1) = v17;
  v96 = xmmword_100E4AF00;
  *(_QWORD *)&v97 = v22;
  *((_QWORD *)&v97 + 1) = v23;
  *(_QWORD *)&v98 = v26;
  *((_QWORD *)&v98 + 1) = v25;
  sub_10001BBBC(v22, v23);
  sub_10001BBBC(v26, v25);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
  swift_bridgeObjectRetain(&off_101048FA0);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v24, v23);
  sub_10001BBBC(v26, v25);
  swift_bridgeObjectRetain(&off_101048FA0);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v24, v23);
  v29 = sub_10001BBBC(v26, v25);
  v80 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v79 = v30;
    v32 = v24;
    v33 = v23;
    v34 = v26;
    v35 = v25;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v87 = v78;
    *(_DWORD *)v36 = 136315138;
    v77 = (v36 + 4);
    swift_bridgeObjectRetain(&off_101048FA0);
    swift_bridgeObjectRetain(v17);
    sub_10001BBBC(v32, v33);
    sub_10001BBBC(v34, v25);
    sub_100C27658();
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v33);
    sub_10001BC14(v34, v35);
    v85 = sub_100016940(v38, v40, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v77, v36 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v35;
    v26 = v34;
    v23 = v33;
    v24 = v32;
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v23);
    sub_10001BC14(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v23);
    sub_10001BC14(v26, v25);
    v41 = v79;
    _os_log_impl((void *)&_mh_execute_header, v79, v31, "BAARKProperties %s", v36, 0xCu);
    v42 = v78;
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v24, v23);
    sub_10001BC14(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v24, v23);
    sub_10001BC14(v26, v25);

  }
  v89 = v95;
  v90 = v96;
  v91 = v97;
  v92 = v98;
  v87 = v93;
  v88 = v94;
  v43 = sub_100704F54();
  v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v87, &type metadata for BAARKProperties, v43);
  v46 = v45;
  v48 = v84[26];
  v47 = v84[27];
  sub_10001BBBC(v48, v47);
  sub_10001BBBC((uint64_t)v44, v46);
  sub_10001BBBC(v48, v47);
  sub_10001BBBC((uint64_t)v44, v46);
  sub_10001BBBC(v48, v47);
  v49 = sub_10001BBBC((uint64_t)v44, v46);
  v78 = v46;
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter(v50);
  v77 = v50;
  v75 = v51;
  v52 = os_log_type_enabled(v50, v51);
  v76 = v24;
  v79 = v44;
  if (v52)
  {
    v73 = v17;
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v72 = v54;
    v74 = v26;
    v55 = v25;
    v71 = v53;
    *(_DWORD *)v53 = 136315138;
    v56 = v53 + 12;
    v85 = v54;
    v57 = v53 + 4;
    *(_QWORD *)&v87 = v48;
    *((_QWORD *)&v87 + 1) = v47;
    *(_QWORD *)&v88 = v44;
    v58 = v78;
    *((_QWORD *)&v88 + 1) = v78;
    sub_10001BBBC(v48, v47);
    sub_10001BBBC((uint64_t)v44, v58);
    v59 = String.init<A>(describing:)(&v87, &type metadata for BAARequestPayload);
    *(_QWORD *)&v87 = sub_100016940(v59, v60, &v85);
    v61 = v56;
    v25 = v55;
    v26 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v57, v61);
    swift_bridgeObjectRelease();
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v58);
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v58);
    v62 = v77;
    v63 = v71;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v75, "BAARequestPayload %s", v71, 0xCu);
    v64 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    v65 = v78;
  }
  else
  {
    sub_10001BC14(v48, v47);
    v66 = v78;
    sub_10001BC14((uint64_t)v44, v78);
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v66);

    v65 = v66;
  }
  *(_QWORD *)&v87 = v48;
  *((_QWORD *)&v87 + 1) = v47;
  *(_QWORD *)&v88 = v79;
  *((_QWORD *)&v88 + 1) = v65;
  v67 = sub_100704F98();
  v68 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v87, &type metadata for BAARequestPayload, v67);
  sub_10001BC14(v82, v81);
  swift_release();
  v69 = v79;
  sub_10001BC14((uint64_t)v79, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v76, v23);
  sub_10001BC14(v26, v25);
  sub_10001BC14(v48, v47);
  sub_10001BC14((uint64_t)v69, v65);
  sub_100705188(v84);
  return v68;
}

uint64_t sub_1007008A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  os_log_t v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint8_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8_t *v61;
  NSObject *v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  os_log_t v69;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  os_log_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = sub_10016837C(a1);
  v83 = PropertyListEncoder.init()(v6);
  dispatch thunk of PropertyListEncoder.outputFormat.setter(100);
  v7 = a1[14];
  v8 = a1[15];
  v84 = a1;
  sub_10001BBBC(v7, v8);
  v9 = Data.trimmed.getter(v7, v8);
  v11 = v10;
  v12 = sub_10001BC14(v7, v8);
  v82 = v9;
  *(_QWORD *)&v93 = v9;
  *((_QWORD *)&v93 + 1) = v11;
  v81 = v11;
  static String.Encoding.utf8.getter(v12);
  v13 = sub_1000DCC90();
  v14 = String.init<A>(bytes:encoding:)(&v93, v4, &type metadata for Data, v13);
  if (!v15)
    v14 = Data.hexString.getter(v82, v81);
  v16 = v14;
  v17 = v15;
  v18 = v84;
  v93 = *((_OWORD *)v84 + 6);
  v19 = sub_100035530();
  v20 = DataProtocol.intValue.getter(&type metadata for Data, v19);
  v93 = *((_OWORD *)v18 + 5);
  v21 = DataProtocol.intValue.getter(&type metadata for Data, v19);
  v22 = v18[26];
  v23 = v18[27];
  *(_QWORD *)&v93 = 0;
  *((_QWORD *)&v93 + 1) = v20;
  v24 = v22;
  v26 = v18[28];
  v25 = v18[29];
  *(_QWORD *)&v94 = v21;
  *((_QWORD *)&v94 + 1) = &off_101049038;
  *(_QWORD *)&v95 = v16;
  *((_QWORD *)&v95 + 1) = v17;
  v96 = xmmword_100E4AF00;
  *(_QWORD *)&v97 = v22;
  *((_QWORD *)&v97 + 1) = v23;
  *(_QWORD *)&v98 = v26;
  *((_QWORD *)&v98 + 1) = v25;
  sub_10001BBBC(v22, v23);
  sub_10001BBBC(v26, v25);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7DF8);
  swift_bridgeObjectRetain(&off_101049038);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v24, v23);
  sub_10001BBBC(v26, v25);
  swift_bridgeObjectRetain(&off_101049038);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v24, v23);
  v29 = sub_10001BBBC(v26, v25);
  v80 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.debug.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v79 = v30;
    v32 = v24;
    v33 = v23;
    v34 = v26;
    v35 = v25;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v87 = v78;
    *(_DWORD *)v36 = 136315138;
    v77 = (v36 + 4);
    swift_bridgeObjectRetain(&off_101049038);
    swift_bridgeObjectRetain(v17);
    sub_10001BBBC(v32, v33);
    sub_10001BBBC(v34, v25);
    sub_100C27658();
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v33);
    sub_10001BC14(v34, v35);
    v85 = sub_100016940(v38, v40, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v77, v36 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v35;
    v26 = v34;
    v23 = v33;
    v24 = v32;
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v23);
    sub_10001BC14(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v23);
    sub_10001BC14(v26, v25);
    v41 = v79;
    _os_log_impl((void *)&_mh_execute_header, v79, v31, "BAARKProperties %s", v36, 0xCu);
    v42 = v78;
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v24, v23);
    sub_10001BC14(v26, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v24, v23);
    sub_10001BC14(v26, v25);

  }
  v89 = v95;
  v90 = v96;
  v91 = v97;
  v92 = v98;
  v87 = v93;
  v88 = v94;
  v43 = sub_100704F54();
  v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v87, &type metadata for BAARKProperties, v43);
  v46 = v45;
  v48 = v84[18];
  v47 = v84[19];
  sub_10001BBBC(v48, v47);
  sub_10001BBBC((uint64_t)v44, v46);
  sub_10001BBBC(v48, v47);
  sub_10001BBBC((uint64_t)v44, v46);
  sub_10001BBBC(v48, v47);
  v49 = sub_10001BBBC((uint64_t)v44, v46);
  v78 = v46;
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter(v50);
  v77 = v50;
  v75 = v51;
  v52 = os_log_type_enabled(v50, v51);
  v76 = v24;
  v79 = v44;
  if (v52)
  {
    v73 = v17;
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v72 = v54;
    v74 = v26;
    v55 = v25;
    v71 = v53;
    *(_DWORD *)v53 = 136315138;
    v56 = v53 + 12;
    v85 = v54;
    v57 = v53 + 4;
    *(_QWORD *)&v87 = v48;
    *((_QWORD *)&v87 + 1) = v47;
    *(_QWORD *)&v88 = v44;
    v58 = v78;
    *((_QWORD *)&v88 + 1) = v78;
    sub_10001BBBC(v48, v47);
    sub_10001BBBC((uint64_t)v44, v58);
    v59 = String.init<A>(describing:)(&v87, &type metadata for BAARequestPayload);
    *(_QWORD *)&v87 = sub_100016940(v59, v60, &v85);
    v61 = v56;
    v25 = v55;
    v26 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 8, v57, v61);
    swift_bridgeObjectRelease();
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v58);
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v58);
    v62 = v77;
    v63 = v71;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v75, "BAARequestPayload %s", v71, 0xCu);
    v64 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    v65 = v78;
  }
  else
  {
    sub_10001BC14(v48, v47);
    v66 = v78;
    sub_10001BC14((uint64_t)v44, v78);
    sub_10001BC14(v48, v47);
    sub_10001BC14((uint64_t)v44, v66);

    v65 = v66;
  }
  *(_QWORD *)&v87 = v48;
  *((_QWORD *)&v87 + 1) = v47;
  *(_QWORD *)&v88 = v79;
  *((_QWORD *)&v88 + 1) = v65;
  v67 = sub_100704F98();
  v68 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v87, &type metadata for BAARequestPayload, v67);
  sub_10001BC14(v82, v81);
  swift_release();
  v69 = v79;
  sub_10001BC14((uint64_t)v79, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v76, v23);
  sub_10001BC14(v26, v25);
  sub_10001BC14(v48, v47);
  sub_10001BC14((uint64_t)v69, v65);
  sub_1001687CC(v84);
  return v68;
}

uint64_t sub_1007013E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _QWORD v92[3];

  v88 = a2;
  v89 = a3;
  v79 = a1;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v90 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v84 = *(_QWORD *)(v9 - 8);
  v85 = v9;
  __chkstk_darwin(v9);
  v86 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v82);
  v83 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v81 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v14);
  v80 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMNAccountType(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AirPodsUnpairEndPoint(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v87 = (uint64_t *)((char *)&v77 - v24);
  v25 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v25);
  v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = swift_allocObject(&unk_10108A160, 32, 7);
  *(_QWORD *)(v28 + 16) = a4;
  *(_QWORD *)(v28 + 24) = a5;
  v91 = v28;
  v29 = (void *)objc_opt_self(ACAccountStore);
  swift_retain();
  v78 = a5;
  v30 = objc_msgSend(v29, "defaultStore");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "aa_primaryAppleAccount");

    if (v32)
    {

      v34 = static os_log_type_t.default.getter(v33);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v35 = qword_1011B7DF0;
      v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
      sub_10000F9B8(v79, (uint64_t)v27, &qword_1010ED860);
      v38 = String.init<A>(describing:)(v27, v25);
      v40 = v39;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = sub_10001AA00();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v37 + 40) = v40;
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Removing pairing lock for UUID - %@", 35, 2, v37);
      swift_bridgeObjectRelease();
      v41 = enum case for FMNAccountType.w2Accessory(_:);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 104);
      v42(v19, enum case for FMNAccountType.w2Accessory(_:), v16);
      v43 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v43, 56, 7);
      v44 = sub_100C511C4((uint64_t)v19);
      v45 = (uint64_t)v87;
      *v87 = v44;
      v42((char *)(v45 + *(int *)(v20 + 20)), v41, v16);
      v46 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      v47 = type metadata accessor for FMNMockingPreferences(0);
      v48 = v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v80, 1, 1, v47);
      v49 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v48);
      v50 = type metadata accessor for ServerInteractionController(0);
      v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      sub_10005972C(v45, (uint64_t)v23, type metadata accessor for AirPodsUnpairEndPoint);
      v52 = sub_10041D7D8((uint64_t)v23, v49, v51);
      v53 = sub_10001F6FC();
      v54 = v81;
      static DispatchQoS.unspecified.getter(v53);
      v92[0] = _swiftEmptyArrayStorage;
      v55 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v56 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      v57 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
      v58 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)(v92, v56, v57, v82, v55);
      v59 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v86, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v85);
      v60 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EE1A30, v54, v58, v59, 0);
      v61 = type metadata accessor for TaskPriority(0);
      v62 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v90, 1, 1, v61);
      v63 = swift_allocObject(&unk_10108A188, 152, 7);
      *(_QWORD *)(v63 + 16) = 0;
      *(_QWORD *)(v63 + 24) = 0;
      v64 = v88;
      v65 = v89;
      v66 = *(_OWORD *)(v88 + 48);
      *(_OWORD *)(v63 + 64) = *(_OWORD *)(v88 + 32);
      *(_OWORD *)(v63 + 80) = v66;
      *(_OWORD *)(v63 + 96) = *(_OWORD *)(v64 + 64);
      v67 = *(_OWORD *)(v64 + 16);
      *(_OWORD *)(v63 + 32) = *(_OWORD *)v64;
      *(_OWORD *)(v63 + 48) = v67;
      *(_QWORD *)(v63 + 112) = v65;
      *(_QWORD *)(v63 + 120) = v60;
      v68 = v91;
      *(_QWORD *)(v63 + 128) = sub_100704BE0;
      *(_QWORD *)(v63 + 136) = v68;
      *(_QWORD *)(v63 + 144) = v52;
      sub_100350B58((_QWORD *)v64);
      swift_retain();
      v69 = v60;
      swift_retain();
      swift_retain();
      sub_100691AC0(v62, (uint64_t)&unk_101104EF0, v63);

      swift_release();
      swift_release();
      sub_1000126B0(v45, type metadata accessor for AirPodsUnpairEndPoint);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v70 = type metadata accessor for Logger(0);
      v71 = sub_10001A9E8(v70, (uint64_t)qword_1011B7DF8);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "iCloud not signed in: Skip pairing lock removal.", v74, 2u);
        swift_slowDealloc(v74, -1, -1);
      }

      swift_beginAccess(a4 + 16, v92, 1, 0);
      v75 = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = 0;
      swift_errorRelease(v75);
      dispatch_group_leave(v78);
    }
    return swift_release();
  }
  else
  {

    result = swift_release();
    __break(1u);
  }
  return result;
}

void sub_100701B18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD v91[3];

  v88 = a2;
  v89 = a3;
  v78 = a1;
  v9 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v9);
  v90 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v84 = *(_QWORD *)(v11 - 8);
  v85 = v11;
  __chkstk_darwin(v11);
  v86 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v82);
  v83 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v14);
  v81 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v16);
  v80 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for FMNAccountType(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for AirPodsUnpairEndPoint(0);
  v22 = __chkstk_darwin(v77);
  v79 = (uint64_t)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v87 = (NSObject **)((char *)&v76 - v24);
  v25 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v25);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (_QWORD *)swift_allocObject(&unk_10108A110, 40, 7);
  v28[2] = a4;
  v28[3] = a5;
  v28[4] = a6;
  v29 = (void *)objc_opt_self(ACAccountStore);
  v76 = a4;
  swift_retain();
  swift_retain();
  v30 = objc_msgSend(v29, "defaultStore");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "aa_primaryAppleAccount");

    if (v32)
    {

      v34 = static os_log_type_t.default.getter(v33);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v35 = qword_1011B7DF0;
      v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
      sub_10000F9B8(v78, (uint64_t)v27, &qword_1010ED860);
      v38 = String.init<A>(describing:)(v27, v25);
      v40 = v39;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = sub_10001AA00();
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v37 + 40) = v40;
      os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Removing pairing lock for UUID - %@", 35, 2, v37);
      swift_bridgeObjectRelease();
      v41 = enum case for FMNAccountType.w2Accessory(_:);
      v42 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
      v42(v21, enum case for FMNAccountType.w2Accessory(_:), v18);
      v43 = type metadata accessor for AccountURLComponents();
      swift_allocObject(v43, 56, 7);
      v44 = sub_100C511C4((uint64_t)v21);
      v45 = (uint64_t)v87;
      *v87 = v44;
      v42((char *)(v45 + *(int *)(v77 + 20)), v41, v18);
      v46 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
      v47 = type metadata accessor for FMNMockingPreferences(0);
      v48 = v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v80, 1, 1, v47);
      v49 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v48);
      v50 = type metadata accessor for ServerInteractionController(0);
      v51 = swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
      v52 = v79;
      sub_10005972C(v45, v79, type metadata accessor for AirPodsUnpairEndPoint);
      v53 = sub_10041D7D8(v52, v49, v51);
      v54 = sub_10001F6FC();
      v55 = v81;
      static DispatchQoS.unspecified.getter(v54);
      v91[0] = _swiftEmptyArrayStorage;
      v56 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
      v57 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
      v58 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
      v59 = v83;
      dispatch thunk of SetAlgebra.init<A>(_:)(v91, v57, v58, v82, v56);
      v60 = v86;
      (*(void (**)(char *, _QWORD, uint64_t))(v84 + 104))(v86, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v85);
      v61 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100EE1A30, v55, v59, v60, 0);
      v62 = type metadata accessor for TaskPriority(0);
      v63 = (uint64_t)v90;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v90, 1, 1, v62);
      v64 = swift_allocObject(&unk_10108A138, 152, 7);
      *(_QWORD *)(v64 + 16) = 0;
      *(_QWORD *)(v64 + 24) = 0;
      v65 = v88;
      v66 = v89;
      v67 = *(_OWORD *)(v88 + 48);
      *(_OWORD *)(v64 + 64) = *(_OWORD *)(v88 + 32);
      *(_OWORD *)(v64 + 80) = v67;
      *(_OWORD *)(v64 + 96) = *(_OWORD *)(v65 + 64);
      v68 = *(_OWORD *)(v65 + 16);
      *(_OWORD *)(v64 + 32) = *(_OWORD *)v65;
      *(_OWORD *)(v64 + 48) = v68;
      *(_QWORD *)(v64 + 112) = v66;
      *(_QWORD *)(v64 + 120) = v61;
      *(_QWORD *)(v64 + 128) = sub_100704BA4;
      *(_QWORD *)(v64 + 136) = v28;
      *(_QWORD *)(v64 + 144) = v53;
      sub_100350B58((_QWORD *)v65);
      swift_retain();
      v69 = v61;
      swift_retain();
      swift_retain();
      sub_100691AC0(v63, (uint64_t)&unk_101104EE8, v64);

      swift_release();
      swift_release();
      sub_1000126B0(v45, type metadata accessor for AirPodsUnpairEndPoint);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v70 = type metadata accessor for Logger(0);
      v71 = sub_10001A9E8(v70, (uint64_t)qword_1011B7DF8);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "iCloud not signed in: Skip pairing lock removal.", v74, 2u);
        swift_slowDealloc(v74, -1, -1);
      }

      Transaction.capture()();
      swift_beginAccess(a6 + 16, v91, 1, 0);
      v75 = *(_QWORD *)(a6 + 16);
      *(_QWORD *)(a6 + 16) = 0;
      swift_errorRelease(v75);
      dispatch_group_leave(v76);
    }
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();

    __break(1u);
  }
}

uint64_t sub_100702278(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FB72C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100702288(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FB9FC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100702294()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

unint64_t sub_1007022A0()
{
  unint64_t result;

  result = qword_101104E88;
  if (!qword_101104E88)
  {
    result = swift_getWitnessTable(byte_100E4B5C4, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104E88);
  }
  return result;
}

unint64_t sub_1007022E4()
{
  unint64_t result;

  result = qword_101104E90;
  if (!qword_101104E90)
  {
    result = swift_getWitnessTable(byte_100E4B59C, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_101104E90);
  }
  return result;
}

unint64_t sub_100702328()
{
  unint64_t result;

  result = qword_101104EA0;
  if (!qword_101104EA0)
  {
    result = swift_getWitnessTable(byte_100E4B54C, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, &qword_101104EA0);
  }
  return result;
}

uint64_t sub_10070236C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  v1 = *(_QWORD *)(v0 + 200);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 192), v1);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 232);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 224), v2);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 280, 7);
}

uint64_t sub_100702438(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[30];
  v7 = v1[31];
  v8 = v1[32];
  v9 = v1[33];
  v10 = (_QWORD *)swift_task_alloc(dword_101104EAC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_1006FC4C4(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

_QWORD *sub_1007024DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v9 = a1[10];
  v8 = a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  v17 = a1[19];
  v18 = a1[18];
  v19 = a1[21];
  v20 = a1[20];
  v21 = a1[23];
  v22 = a1[25];
  v23 = a1[24];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v9, v8);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BD08(v20, v19);
  swift_bridgeObjectRetain(v21);
  sub_10001BD08(v23, v22);
  return a1;
}

uint64_t sub_1007025F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74617453636E7973 && a2 == 0xEA00000000007375)
  {
    v7 = 0xEA00000000007375;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74617453636E7973, 0xEA00000000007375, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v8 = 0xEA00000000007373;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x54676E6972696170 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease(0xEB00000000657079);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x54676E6972696170, 0xEB00000000657079, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1007027D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v10 = 0xE900000000000064;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100702A54(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  _UNKNOWN **v100;
  _QWORD v101[6];

  v101[3] = &type metadata for AirPodsLEPairingCheckData;
  v101[4] = &off_10108B540;
  v4 = (_QWORD *)swift_allocObject(&unk_10108A750, 368, 7);
  v101[0] = v4;
  memcpy(v4 + 2, a1, 0x160uLL);
  v99 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  v100 = &off_1010AF710;
  v5 = sub_100018F08(v98);
  sub_10005972C(a2, (uint64_t)v5, type metadata accessor for AirPodsLEPairingLockCheckResponse);
  v6 = sub_100704FDC((uint64_t *)a1);
  v7 = static os_log_type_t.debug.getter(v6);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v8 = qword_1011B7DF0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  v92 = sub_10001AA44(v101, (uint64_t)&type metadata for AirPodsLEPairingCheckData);
  v11 = v4[32];
  v12 = v4[33];
  sub_10001BBBC(v11, v12);
  v13 = Data.hexString.getter(v11, v12);
  v15 = v14;
  sub_10001BC14(v11, v12);
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v94 = sub_10001AA00();
  *(_QWORD *)(v10 + 64) = v94;
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "nonce: %@", 9, 2, v10);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_log_type_t.debug.getter(v16);
  v95 = v4;
  v18 = qword_1011B7DF0;
  v19 = v9;
  v93 = v9;
  v20 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  v91 = sub_10001AA44(v98, v99);
  v22 = v5[4];
  v21 = v5[5];
  sub_10001BBBC(v22, v21);
  v23 = Data.hexString.getter(v22, v21);
  v25 = v24;
  sub_10001BC14(v22, v21);
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = v94;
  *(_QWORD *)(v20 + 32) = v23;
  *(_QWORD *)(v20 + 40) = v25;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "serialNumber: %@", 16, 2, v20);
  v26 = swift_bridgeObjectRelease();
  v27 = static os_log_type_t.debug.getter(v26);
  v89 = qword_1011B7DF0;
  v28 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  v29 = *v5;
  v30 = v5[1];
  sub_10001BBBC(*v5, v30);
  v31 = Data.hexString.getter(v29, v30);
  v33 = v32;
  sub_10001BC14(v29, v30);
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  *(_QWORD *)(v28 + 64) = v94;
  *(_QWORD *)(v28 + 32) = v31;
  *(_QWORD *)(v28 + 40) = v33;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v89, "ECID: %@", 8, 2, v28);
  v34 = swift_bridgeObjectRelease();
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = qword_1011B7DF0;
  v37 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  v38 = v5[2];
  v39 = v5[3];
  sub_10001BBBC(v38, v39);
  v40 = Data.hexString.getter(v38, v39);
  v42 = v41;
  sub_10001BC14(v38, v39);
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = v94;
  *(_QWORD *)(v37 + 32) = v40;
  *(_QWORD *)(v37 + 40) = v42;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "ChipId: %@", 10, 2, v37);
  v43 = swift_bridgeObjectRelease();
  v44 = static os_log_type_t.debug.getter(v43);
  v45 = qword_1011B7DF0;
  v46 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22B00;
  v47 = v95[26];
  v48 = v95[27];
  sub_10001BBBC(v47, v48);
  v49 = Data.hexString.getter(v47, v48);
  v51 = v50;
  sub_10001BC14(v47, v48);
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = v94;
  *(_QWORD *)(v46 + 32) = v49;
  *(_QWORD *)(v46 + 40) = v51;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "SeedK1: %@", 10, 2, v46);
  v52 = swift_bridgeObjectRelease();
  v53 = static os_log_type_t.debug.getter(v52);
  v90 = qword_1011B7DF0;
  v54 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v54 + 16) = xmmword_100E22B00;
  v55 = v95[2];
  v56 = v95[3];
  sub_10001BBBC(v55, v56);
  v57 = Data.hexString.getter(v55, v56);
  v59 = v58;
  sub_10001BC14(v55, v56);
  *(_QWORD *)(v54 + 56) = &type metadata for String;
  *(_QWORD *)(v54 + 64) = v94;
  *(_QWORD *)(v54 + 32) = v57;
  *(_QWORD *)(v54 + 40) = v59;
  os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v90, "H1 (hashed C2): %@", 18, 2, v54);
  v60 = swift_bridgeObjectRelease();
  v61 = static os_log_type_t.debug.getter(v60);
  v62 = qword_1011B7DF0;
  v63 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
  v64 = v5[6];
  v65 = v5[7];
  sub_10001BBBC(v64, v65);
  v66 = Data.hexString.getter(v64, v65);
  v68 = v67;
  sub_10001BC14(v64, v65);
  *(_QWORD *)(v63 + 56) = &type metadata for String;
  *(_QWORD *)(v63 + 64) = v94;
  *(_QWORD *)(v63 + 32) = v66;
  *(_QWORD *)(v63 + 40) = v68;
  os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "SeedS: %@", 9, 2, v63);
  swift_bridgeObjectRelease();
  v96 = v92[30];
  v97 = v92[31];
  v69 = v91[4];
  v70 = v91[5];
  sub_10001BBBC(v96, v97);
  sub_10001BBBC(v69, v70);
  Data.append(_:)(v69, v70);
  sub_10001BC14(v69, v70);
  v71 = *v5;
  v72 = v5[1];
  sub_10001BBBC(*v5, v72);
  Data.append(_:)(v71, v72);
  sub_10001BC14(v71, v72);
  v73 = v5[2];
  v74 = v5[3];
  sub_10001BBBC(v73, v74);
  Data.append(_:)(v73, v74);
  sub_10001BC14(v73, v74);
  v75 = v95[26];
  v76 = v95[27];
  sub_10001BBBC(v75, v76);
  Data.append(_:)(v75, v76);
  sub_10001BC14(v75, v76);
  v78 = v95[2];
  v77 = v95[3];
  sub_10001BBBC(v78, v77);
  Data.append(_:)(v78, v77);
  sub_10001BC14(v78, v77);
  v79 = v5[6];
  v80 = v5[7];
  sub_10001BBBC(v79, v80);
  Data.append(_:)(v79, v80);
  v81 = sub_10001BC14(v79, v80);
  v82 = static os_log_type_t.debug.getter(v81);
  v83 = qword_1011B7DF0;
  v84 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v84 + 16) = xmmword_100E22B00;
  sub_10001BBBC(v96, v97);
  v85 = Data.hexString.getter(v96, v97);
  v87 = v86;
  sub_10001BC14(v96, v97);
  *(_QWORD *)(v84 + 56) = &type metadata for String;
  *(_QWORD *)(v84 + 64) = v94;
  *(_QWORD *)(v84 + 32) = v85;
  *(_QWORD *)(v84 + 40) = v87;
  os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "dataForSignatureVerification: %@", 32, 2, v84);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
  return v96;
}

uint64_t sub_1007031E0(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  _UNKNOWN **v107;
  _QWORD v108[6];

  v108[3] = &type metadata for AirPodsSWPairingCheckData;
  v108[4] = &off_10108B520;
  v99 = (_QWORD *)swift_allocObject(&unk_10108AD68, 352, 7);
  v108[0] = v99;
  memcpy(v99 + 2, a1, 0x150uLL);
  v106 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  v107 = &off_1010A8878;
  v4 = sub_100018F08(v105);
  sub_10005972C(a2, (uint64_t)v4, type metadata accessor for AirPodsSWPairingLockCheckResponse);
  sub_100705F38((uint64_t *)a1);
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7E28);
  v6 = sub_100030784((uint64_t)v108, (uint64_t)v103);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v101 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_10001AA44(v103, v104);
    v12 = v11[34];
    v13 = v11[35];
    sub_10001BBBC(v12, v13);
    v14 = Data.hexString.getter(v12, v13);
    v16 = v15;
    sub_10001BC14(v12, v13);
    v100 = sub_100016940(v14, v16, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "nonce: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v17 = sub_100030784((uint64_t)v105, (uint64_t)v103);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v101 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = sub_10001AA44(v103, v104);
    v23 = *v22;
    v24 = v22[1];
    sub_10001BBBC(*v22, v24);
    v25 = Data.hexString.getter(v23, v24);
    v27 = v26;
    sub_10001BC14(v23, v24);
    v100 = sub_100016940(v25, v27, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "serialNumber: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v28 = sub_100030784((uint64_t)v105, (uint64_t)v103);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v101 = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = sub_10001AA44(v103, v104);
    v34 = v33[2];
    v35 = v33[3];
    sub_10001BBBC(v34, v35);
    v36 = Data.hexString.getter(v34, v35);
    v38 = v37;
    sub_10001BC14(v34, v35);
    v100 = sub_100016940(v36, v38, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "altSerialNumber: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v39 = sub_100030784((uint64_t)v108, (uint64_t)v103);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v101 = v43;
    *(_DWORD *)v42 = 136315138;
    v44 = sub_10001AA44(v103, v104);
    v45 = v44[24];
    v46 = v44[25];
    sub_10001BBBC(v45, v46);
    v47 = Data.hexString.getter(v45, v46);
    v49 = v48;
    sub_10001BC14(v45, v46);
    v100 = sub_100016940(v47, v49, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "SeedK1: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v50 = sub_100030784((uint64_t)v108, (uint64_t)v103);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v101 = v54;
    *(_DWORD *)v53 = 136315138;
    v55 = sub_10001AA44(v103, v104);
    v56 = *v55;
    v57 = v55[1];
    sub_10001BBBC(*v55, v57);
    v58 = Data.hexString.getter(v56, v57);
    v60 = v59;
    sub_10001BC14(v56, v57);
    v100 = sub_100016940(v58, v60, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "H1 (hashed C2): %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v61 = sub_100030784((uint64_t)v105, (uint64_t)v103);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.default.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    v101 = v65;
    *(_DWORD *)v64 = 136315138;
    v66 = sub_10001AA44(v103, v104);
    v67 = v66[4];
    v68 = v66[5];
    sub_10001BBBC(v67, v68);
    v69 = Data.hexString.getter(v67, v68);
    v71 = v70;
    sub_10001BC14(v67, v68);
    v100 = sub_100016940(v69, v71, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "SeedS: %s", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v103);
  }

  v72 = v99;
  v74 = v99[37];
  v101 = v99[36];
  v73 = v101;
  v102 = v74;
  v75 = sub_10001AA44(v105, v106);
  v76 = *v75;
  v77 = v75[1];
  sub_10001BBBC(v73, v74);
  sub_10001BBBC(v76, v77);
  Data.append(_:)(v76, v77);
  sub_10001BC14(v76, v77);
  v78 = sub_10001AA44(v105, v106);
  v79 = v78[2];
  v80 = v78[3];
  sub_10001BBBC(v79, v80);
  Data.append(_:)(v79, v80);
  sub_10001BC14(v79, v80);
  v81 = v99[26];
  v82 = v99[27];
  sub_10001BBBC(v72[26], v72[27]);
  Data.append(_:)(v81, v82);
  sub_10001BC14(v81, v82);
  v83 = v99[2];
  v84 = v99[3];
  sub_10001BBBC(v72[2], v72[3]);
  Data.append(_:)(v83, v84);
  sub_10001BC14(v83, v84);
  v85 = sub_10001AA44(v105, v106);
  v86 = v85[4];
  v87 = v85[5];
  sub_10001BBBC(v86, v87);
  Data.append(_:)(v86, v87);
  sub_10001BC14(v86, v87);
  v88 = v101;
  v89 = v102;
  sub_10001BBBC(v101, v102);
  v90 = sub_10001BBBC(v88, v89);
  v91 = Logger.logObject.getter(v90);
  v92 = static os_log_type_t.debug.getter(v91);
  if (os_log_type_enabled(v91, v92))
  {
    v93 = (uint8_t *)swift_slowAlloc(12, -1);
    v94 = swift_slowAlloc(32, -1);
    v103[0] = v94;
    *(_DWORD *)v93 = 136315138;
    v95 = Data.hexString.getter(v88, v89);
    v100 = sub_100016940(v95, v96, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v93 + 4, v93 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v88, v89);
    sub_10001BC14(v88, v89);
    _os_log_impl((void *)&_mh_execute_header, v91, v92, "dataForSignatureVerification: %s", v93, 0xCu);
    swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1, -1);
    swift_slowDealloc(v93, -1, -1);
  }
  else
  {
    sub_10001BC14(v88, v89);
    sub_10001BC14(v88, v89);
  }

  swift_beginAccess(&v101, v103, 0, 0);
  v97 = v101;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v108);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
  return v97;
}

uint64_t sub_100703D78(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD v98[3];
  uint64_t v99;
  _UNKNOWN **v100;
  _QWORD v101[6];

  v101[3] = &type metadata for AirPodsPairingCheckData;
  v101[4] = &off_10108B560;
  v4 = (_QWORD *)swift_allocObject(&unk_10108A098, 336, 7);
  v101[0] = v4;
  memcpy(v4 + 2, a1, 0x140uLL);
  v99 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  v100 = &off_1010B0F48;
  v5 = sub_100018F08(v98);
  sub_10005972C(a2, (uint64_t)v5, type metadata accessor for AirPodsPairingLockCheckResponse);
  v6 = sub_1005FFCD8((uint64_t *)a1);
  v7 = static os_log_type_t.debug.getter(v6);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v8 = qword_1011B7DF0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  v92 = sub_10001AA44(v101, (uint64_t)&type metadata for AirPodsPairingCheckData);
  v11 = v4[32];
  v12 = v4[33];
  sub_10001BBBC(v11, v12);
  v13 = Data.hexString.getter(v11, v12);
  v15 = v14;
  sub_10001BC14(v11, v12);
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v94 = sub_10001AA00();
  *(_QWORD *)(v10 + 64) = v94;
  *(_QWORD *)(v10 + 32) = v13;
  *(_QWORD *)(v10 + 40) = v15;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "nonce: %@", 9, 2, v10);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_log_type_t.debug.getter(v16);
  v95 = v4;
  v18 = qword_1011B7DF0;
  v19 = v9;
  v93 = v9;
  v20 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  v91 = sub_10001AA44(v98, v99);
  v22 = v5[4];
  v21 = v5[5];
  sub_10001BBBC(v22, v21);
  v23 = Data.hexString.getter(v22, v21);
  v25 = v24;
  sub_10001BC14(v22, v21);
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = v94;
  *(_QWORD *)(v20 + 32) = v23;
  *(_QWORD *)(v20 + 40) = v25;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "serialNumber: %@", 16, 2, v20);
  v26 = swift_bridgeObjectRelease();
  v27 = static os_log_type_t.debug.getter(v26);
  v89 = qword_1011B7DF0;
  v28 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  v29 = *v5;
  v30 = v5[1];
  sub_10001BBBC(*v5, v30);
  v31 = Data.hexString.getter(v29, v30);
  v33 = v32;
  sub_10001BC14(v29, v30);
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  *(_QWORD *)(v28 + 64) = v94;
  *(_QWORD *)(v28 + 32) = v31;
  *(_QWORD *)(v28 + 40) = v33;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v89, "ECID: %@", 8, 2, v28);
  v34 = swift_bridgeObjectRelease();
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = qword_1011B7DF0;
  v37 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  v38 = v5[2];
  v39 = v5[3];
  sub_10001BBBC(v38, v39);
  v40 = Data.hexString.getter(v38, v39);
  v42 = v41;
  sub_10001BC14(v38, v39);
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = v94;
  *(_QWORD *)(v37 + 32) = v40;
  *(_QWORD *)(v37 + 40) = v42;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "ChipId: %@", 10, 2, v37);
  v43 = swift_bridgeObjectRelease();
  v44 = static os_log_type_t.debug.getter(v43);
  v45 = qword_1011B7DF0;
  v46 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22B00;
  v47 = v95[26];
  v48 = v95[27];
  sub_10001BBBC(v47, v48);
  v49 = Data.hexString.getter(v47, v48);
  v51 = v50;
  sub_10001BC14(v47, v48);
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = v94;
  *(_QWORD *)(v46 + 32) = v49;
  *(_QWORD *)(v46 + 40) = v51;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "SeedK1: %@", 10, 2, v46);
  v52 = swift_bridgeObjectRelease();
  v53 = static os_log_type_t.debug.getter(v52);
  v90 = qword_1011B7DF0;
  v54 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v54 + 16) = xmmword_100E22B00;
  v55 = v95[2];
  v56 = v95[3];
  sub_10001BBBC(v55, v56);
  v57 = Data.hexString.getter(v55, v56);
  v59 = v58;
  sub_10001BC14(v55, v56);
  *(_QWORD *)(v54 + 56) = &type metadata for String;
  *(_QWORD *)(v54 + 64) = v94;
  *(_QWORD *)(v54 + 32) = v57;
  *(_QWORD *)(v54 + 40) = v59;
  os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v90, "H1 (hashed C2): %@", 18, 2, v54);
  v60 = swift_bridgeObjectRelease();
  v61 = static os_log_type_t.debug.getter(v60);
  v62 = qword_1011B7DF0;
  v63 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
  v64 = v5[6];
  v65 = v5[7];
  sub_10001BBBC(v64, v65);
  v66 = Data.hexString.getter(v64, v65);
  v68 = v67;
  sub_10001BC14(v64, v65);
  *(_QWORD *)(v63 + 56) = &type metadata for String;
  *(_QWORD *)(v63 + 64) = v94;
  *(_QWORD *)(v63 + 32) = v66;
  *(_QWORD *)(v63 + 40) = v68;
  os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "SeedS: %@", 9, 2, v63);
  swift_bridgeObjectRelease();
  v96 = v92[30];
  v97 = v92[31];
  v69 = v91[4];
  v70 = v91[5];
  sub_10001BBBC(v96, v97);
  sub_10001BBBC(v69, v70);
  Data.append(_:)(v69, v70);
  sub_10001BC14(v69, v70);
  v71 = *v5;
  v72 = v5[1];
  sub_10001BBBC(*v5, v72);
  Data.append(_:)(v71, v72);
  sub_10001BC14(v71, v72);
  v73 = v5[2];
  v74 = v5[3];
  sub_10001BBBC(v73, v74);
  Data.append(_:)(v73, v74);
  sub_10001BC14(v73, v74);
  v75 = v95[26];
  v76 = v95[27];
  sub_10001BBBC(v75, v76);
  Data.append(_:)(v75, v76);
  sub_10001BC14(v75, v76);
  v78 = v95[2];
  v77 = v95[3];
  sub_10001BBBC(v78, v77);
  Data.append(_:)(v78, v77);
  sub_10001BC14(v78, v77);
  v79 = v5[6];
  v80 = v5[7];
  sub_10001BBBC(v79, v80);
  Data.append(_:)(v79, v80);
  v81 = sub_10001BC14(v79, v80);
  v82 = static os_log_type_t.debug.getter(v81);
  v83 = qword_1011B7DF0;
  v84 = swift_allocObject(v93, 72, 7);
  *(_OWORD *)(v84 + 16) = xmmword_100E22B00;
  sub_10001BBBC(v96, v97);
  v85 = Data.hexString.getter(v96, v97);
  v87 = v86;
  sub_10001BC14(v96, v97);
  *(_QWORD *)(v84 + 56) = &type metadata for String;
  *(_QWORD *)(v84 + 64) = v94;
  *(_QWORD *)(v84 + 32) = v85;
  *(_QWORD *)(v84 + 40) = v87;
  os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v83, "dataForSignatureVerification: %@", 32, 2, v84);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
  return v96;
}

uint64_t sub_100704504()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC0, 6);
}

uint64_t sub_10070452C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FC958(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10070453C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FCC1C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100704548()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC0, 1);
}

uint64_t sub_10070456C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  sub_10001BC14(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  sub_10001BC14(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  v8 = v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100704610()
{
  return sub_1002A3F88(type metadata accessor for AirPodsPairingLockAckResponse, &qword_101104EC0);
}

uint64_t sub_100704624()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC0, 5);
}

uint64_t sub_100704648()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 72);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 64), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  sub_10001BC14(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10001BC14(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  sub_10001BC14(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  sub_10001BC14(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  sub_10001BC14(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  v2 = *(_QWORD *)(v0 + 312);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 304), v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 344);
  if (v3 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 336), v3);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 416, 7);
}

uint64_t sub_10070475C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = v1[3];
  v11 = v1[2];
  v5 = v1[44];
  v6 = v1[45];
  v7 = v1[46];
  v8 = v1[47];
  v9 = (_QWORD *)swift_task_alloc(dword_101104ED4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_1006F85A4(a1, v11, v4, (uint64_t)(v1 + 4), v5, v6, v7, v8);
}

uint64_t sub_100704814()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 6);
}

uint64_t sub_10070483C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006F8D8C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100704848()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  v1 = *(_QWORD *)(v0 + 64);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 56), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224));
  sub_10001BC14(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  sub_10001BC14(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  v2 = *(_QWORD *)(v0 + 304);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 296), v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 336);
  if (v3 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 328), v3);

  swift_release();
  return swift_deallocObject(v0, 376, 7);
}

uint64_t sub_100704944(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006F9050(a1, v1[2], v1 + 3, v1[43], v1[44], v1[45]);
}

uint64_t sub_100704958()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 1);
}

uint64_t sub_10070497C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007049A0()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 21);
}

uint64_t sub_1007049C4()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 22);
}

uint64_t sub_1007049E8()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 18);
}

uint64_t sub_100704A0C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 24);
}

uint64_t sub_100704A30()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100704A3C()
{
  uint64_t v0;

  return sub_1006FB1B8(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &qword_101104EC8, (void (*)(_QWORD))type metadata accessor for AirPodsPairingLockCheckResponse);
}

uint64_t sub_100704A68()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  v1 = v0[7];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[6], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[15], v0[16]);
  sub_10001BC14(v0[17], v0[18]);
  sub_10001BC14(v0[19], v0[20]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[26], v0[27]);
  sub_10001BC14(v0[28], v0[29]);
  sub_10001BC14(v0[30], v0[31]);
  sub_10001BC14(v0[32], v0[33]);
  sub_10001BC14(v0[34], v0[35]);
  v2 = v0[37];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[36], v2);
  swift_bridgeObjectRelease();
  v3 = v0[41];
  if (v3 >> 60 != 15)
    sub_10001BC14(v0[40], v3);
  return swift_deallocObject(v0, 336, 7);
}

uint64_t sub_100704B4C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_101104EC8, 5);
}

uint64_t sub_100704B70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100704BA4(uint64_t a1)
{
  uint64_t v1;

  sub_100A43498(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100704BB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100704BE0(uint64_t a1)
{
  uint64_t v1;

  sub_10047F44C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100704BEC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 232);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 224), v1);
  sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  sub_10001BC14(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 296);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 288), v2);
  sub_10001BC14(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 360, 7);
}

uint64_t sub_100704CE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[38];
  v7 = v1[39];
  v8 = v1[40];
  v9 = v1[41];
  v10 = (_QWORD *)swift_task_alloc(dword_101104EFC);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_1006FD62C(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

uint64_t sub_100704D94()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC90, 6);
}

uint64_t sub_100704DBC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1006FDB30(a1, v1[2], v1[3], v1[4], "Ack pairing failed. %{public}s", (uint64_t)&unk_10108A368, (uint64_t)sub_100704F30, (uint64_t)&unk_10108A380);
}

uint64_t sub_100704DFC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FDEC4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100704E08()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC90, 1);
}

uint64_t sub_100704E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = (uint64_t *)(v0 + v4);
  v7 = *(_QWORD *)(v0 + v4 + 8);
  if (v7 >> 60 != 15)
    sub_10001BC14(*v6, v7);
  v8 = v6[3];
  if (v8 >> 60 != 15)
    sub_10001BC14(v6[2], v8);
  v9 = v6[5];
  if (v9 >> 60 != 15)
    sub_10001BC14(v6[4], v9);
  v10 = (char *)v6 + *(int *)(v1 + 28);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100704F1C()
{
  return sub_1002A3F88(type metadata accessor for AirPodsLEPairingLockAckResponse, &qword_1010EEC90);
}

uint64_t sub_100704F30()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC90, 5);
}

unint64_t sub_100704F54()
{
  unint64_t result;

  result = qword_101104F10;
  if (!qword_101104F10)
  {
    result = swift_getWitnessTable(byte_100E6852C, &type metadata for BAARKProperties);
    atomic_store(result, (unint64_t *)&qword_101104F10);
  }
  return result;
}

unint64_t sub_100704F98()
{
  unint64_t result;

  result = qword_101104F18;
  if (!qword_101104F18)
  {
    result = swift_getWitnessTable(byte_100E68504, &type metadata for BAARequestPayload);
    atomic_store(result, &qword_101104F18);
  }
  return result;
}

uint64_t *sub_100704FDC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[15];
  v14 = a1[18];
  v15 = a1[17];
  v16 = a1[21];
  v17 = a1[22];
  v18 = a1[25];
  v19 = a1[24];
  v20 = a1[27];
  v21 = a1[26];
  v22 = a1[29];
  v23 = a1[28];
  v24 = a1[31];
  v25 = a1[30];
  v26 = a1[33];
  v27 = a1[32];
  v28 = a1[35];
  v29 = a1[34];
  v30 = a1[37];
  v31 = a1[39];
  v32 = a1[38];
  v33 = a1[41];
  v34 = a1[40];
  v35 = a1[43];
  v36 = a1[42];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  sub_10001BBBC(v15, v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v19, v18);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v23, v22);
  sub_10001BBBC(v25, v24);
  sub_10001BBBC(v27, v26);
  sub_10001BD08(v29, v28);
  swift_bridgeObjectRetain(v30);
  sub_10001BD08(v32, v31);
  sub_10001BBBC(v34, v33);
  sub_10001BBBC(v36, v35);
  return a1;
}

uint64_t *sub_100705188(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[13];
  v7 = a1[14];
  v9 = a1[16];
  v10 = a1[15];
  v11 = a1[18];
  v12 = a1[17];
  v13 = a1[25];
  v14 = a1[24];
  v15 = a1[27];
  v16 = a1[26];
  v17 = a1[29];
  v18 = a1[28];
  v19 = a1[31];
  v20 = a1[30];
  v21 = a1[33];
  v22 = a1[32];
  v23 = a1[35];
  v24 = a1[34];
  v25 = a1[39];
  v26 = a1[38];
  v27 = a1[41];
  v28 = a1[40];
  v29 = a1[43];
  v30 = a1[42];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  sub_10001BC14(v12, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001EF3C(v24, v23);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v26, v25);
  sub_10001BC14(v28, v27);
  sub_10001BC14(v30, v29);
  return a1;
}

uint64_t sub_100705334()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 72);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 64), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  sub_10001BC14(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10001BC14(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  sub_10001BC14(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  sub_10001BC14(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  sub_10001BC14(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  v2 = *(_QWORD *)(v0 + 312);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 304), v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 344);
  if (v3 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 336), v3);
  sub_10001BC14(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
  sub_10001BC14(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 472, 7);
}

uint64_t sub_100705460(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v11 = v1[2];
  v10 = v1[3];
  v4 = v1[48];
  v5 = v1[49];
  v6 = v1[50];
  v7 = v1[51];
  v8 = (_QWORD *)swift_task_alloc(dword_101104F24);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1006F1120(a1, v11, v10, (uint64_t)(v1 + 4), v4, v5, v6, v7);
}

uint64_t sub_10070553C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 6);
}

uint64_t sub_100705564(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1006FDB30(a1, v1[2], v1[3], v1[4], "Error in verify pairing request. Error - %{public}s", (uint64_t)&unk_10108A778, (uint64_t)sub_1007058F0, (uint64_t)&unk_10108A790);
}

uint64_t sub_1007055A0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001BC14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 88), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  sub_10001BC14(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  sub_10001BC14(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
  sub_10001BC14(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  v2 = *(_QWORD *)(v0 + 336);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 328), v2);
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v0 + 368);
  if (v3 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 360), v3);
  sub_10001BC14(*(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 384));
  sub_10001BC14(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
  return swift_deallocObject(v0, 416, 7);
}

uint64_t sub_1007056AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1006F1E58(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), (uint64_t *)(v1 + 56));
}

uint64_t sub_1007056C8()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 1);
}

uint64_t sub_1007056EC()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 21);
}

uint64_t sub_100705710()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 22);
}

uint64_t sub_100705734()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 18);
}

uint64_t sub_100705758()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 24);
}

uint64_t sub_10070577C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 23);
}

uint64_t sub_1007057A0()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 25);
}

uint64_t sub_1007057C4()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1007057D0()
{
  uint64_t v0;

  return sub_1006FB1B8(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &qword_1010EEC78, (void (*)(_QWORD))type metadata accessor for AirPodsLEPairingLockCheckResponse);
}

uint64_t sub_1007057FC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  v1 = v0[7];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[6], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[15], v0[16]);
  sub_10001BC14(v0[17], v0[18]);
  sub_10001BC14(v0[19], v0[20]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[26], v0[27]);
  sub_10001BC14(v0[28], v0[29]);
  sub_10001BC14(v0[30], v0[31]);
  sub_10001BC14(v0[32], v0[33]);
  sub_10001BC14(v0[34], v0[35]);
  v2 = v0[37];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[36], v2);
  swift_bridgeObjectRelease();
  v3 = v0[41];
  if (v3 >> 60 != 15)
    sub_10001BC14(v0[40], v3);
  sub_10001BC14(v0[42], v0[43]);
  sub_10001BC14(v0[44], v0[45]);
  return swift_deallocObject(v0, 368, 7);
}

uint64_t sub_1007058F0()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EEC78, 5);
}

uint64_t sub_100705914()
{
  uint64_t v0;
  unint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 248);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 240), v1);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 296, 7);
}

uint64_t sub_1007059D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[32];
  v7 = v1[33];
  v8 = v1[34];
  v9 = v1[35];
  v10 = (_QWORD *)swift_task_alloc(dword_101104F3C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004A74;
  return sub_1006FE9B4(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

_QWORD *sub_100705A7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[11];
  v10 = a1[12];
  v12 = a1[13];
  v13 = a1[15];
  v14 = a1[14];
  v15 = a1[17];
  v16 = a1[16];
  v17 = a1[19];
  v18 = a1[18];
  v19 = a1[21];
  v20 = a1[20];
  v21 = a1[23];
  v22 = a1[22];
  v23 = a1[25];
  v25 = a1[26];
  v24 = a1[27];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  swift_bridgeObjectRetain(v23);
  sub_10001BD08(v25, v24);
  return a1;
}

uint64_t sub_100705BB4()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC520, 6);
}

uint64_t sub_100705BDC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FEE90(a1, v1[2], v1[3], v1[4], "Ack pairing failed. %{public}@", (uint64_t)&unk_10108A980, (uint64_t)sub_100705D38, (uint64_t)&unk_10108A998);
}

uint64_t sub_100705C1C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FF208(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100705C28()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC520, 1);
}

uint64_t sub_100705C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = (uint64_t *)(v0 + v4);
  v7 = *(_QWORD *)(v0 + v4 + 8);
  if (v7 >> 60 != 15)
    sub_10001BC14(*v6, v7);
  v8 = v6[3];
  if (v8 >> 60 != 15)
    sub_10001BC14(v6[2], v8);
  v9 = (char *)v6 + *(int *)(v1 + 24);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100705D24()
{
  return sub_1002A3F88(type metadata accessor for AirPodsSWPairingLockAckResponse, &qword_1010EC520);
}

uint64_t sub_100705D38()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC520, 5);
}

uint64_t sub_100705D5C()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 72);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 64), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144));
  sub_10001BC14(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  sub_10001BC14(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  sub_10001BC14(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
  sub_10001BC14(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  sub_10001BC14(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  sub_10001BC14(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
  sub_10001BC14(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 360);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 352), v2);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 440, 7);
}

uint64_t sub_100705E68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v11 = v1[2];
  v10 = v1[3];
  v4 = v1[46];
  v5 = v1[47];
  v6 = v1[48];
  v7 = v1[49];
  v8 = (_QWORD *)swift_task_alloc(dword_101104F54);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return sub_1006F47A8(a1, v11, v10, (uint64_t)(v1 + 4), v4, v5, v6, v7);
}

uint64_t *sub_100705F38(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[15];
  v14 = a1[18];
  v15 = a1[17];
  v16 = a1[21];
  v17 = a1[22];
  v18 = a1[25];
  v19 = a1[24];
  v20 = a1[27];
  v21 = a1[26];
  v22 = a1[29];
  v23 = a1[28];
  v24 = a1[31];
  v25 = a1[30];
  v26 = a1[33];
  v27 = a1[32];
  v28 = a1[35];
  v29 = a1[34];
  v30 = a1[37];
  v31 = a1[36];
  v34 = a1[40];
  v32 = a1[39];
  v33 = a1[41];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BD08(v4, v5);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  sub_10001BBBC(v15, v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  sub_10001BBBC(v19, v18);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v23, v22);
  sub_10001BBBC(v25, v24);
  sub_10001BBBC(v27, v26);
  sub_10001BBBC(v29, v28);
  sub_10001BBBC(v31, v30);
  swift_bridgeObjectRetain(v32);
  sub_10001BD08(v34, v33);
  return a1;
}

uint64_t sub_1007060D0()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 6);
}

uint64_t *sub_1007060F4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[13];
  v7 = a1[14];
  v9 = a1[16];
  v10 = a1[15];
  v11 = a1[18];
  v12 = a1[17];
  v13 = a1[25];
  v14 = a1[24];
  v15 = a1[27];
  v16 = a1[26];
  v17 = a1[29];
  v18 = a1[28];
  v19 = a1[31];
  v20 = a1[30];
  v21 = a1[33];
  v22 = a1[32];
  v23 = a1[35];
  v24 = a1[34];
  v25 = a1[37];
  v26 = a1[36];
  v28 = a1[40];
  v27 = a1[41];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  sub_10001BC14(v12, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  sub_10001BC14(v24, v23);
  sub_10001BC14(v26, v25);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v28, v27);
  return a1;
}

uint64_t sub_100706290(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006FEE90(a1, v1[2], v1[3], v1[4], "Error in verify pairing request. Error - %{public}@", (uint64_t)&unk_10108AD90, (uint64_t)sub_1007065EC, (uint64_t)&unk_10108ADA8);
}

uint64_t sub_1007062CC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001BC14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 96);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 88), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  sub_10001BC14(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  sub_10001BC14(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
  sub_10001BC14(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320));
  sub_10001BC14(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  sub_10001BC14(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 352));
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 384);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 376), v2);
  return swift_deallocObject(v0, 400, 7);
}

uint64_t sub_1007063C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1006F560C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), (uint64_t *)(v1 + 56));
}

uint64_t sub_1007063DC()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 1);
}

uint64_t sub_100706400()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 21);
}

uint64_t sub_100706424()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 22);
}

uint64_t sub_100706448()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 18);
}

uint64_t sub_10070646C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 24);
}

uint64_t sub_100706490()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 23);
}

uint64_t sub_1007064B4()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 25);
}

uint64_t sub_1007064D8()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1007064E4()
{
  uint64_t v0;

  return sub_1006FB1B8(*(void (**)(char *))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), &qword_1010EC588, (void (*)(_QWORD))type metadata accessor for AirPodsSWPairingLockCheckResponse);
}

uint64_t sub_100706510()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  v1 = v0[7];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[6], v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[15], v0[16]);
  sub_10001BC14(v0[17], v0[18]);
  sub_10001BC14(v0[19], v0[20]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v0[26], v0[27]);
  sub_10001BC14(v0[28], v0[29]);
  sub_10001BC14(v0[30], v0[31]);
  sub_10001BC14(v0[32], v0[33]);
  sub_10001BC14(v0[34], v0[35]);
  sub_10001BC14(v0[36], v0[37]);
  sub_10001BC14(v0[38], v0[39]);
  swift_bridgeObjectRelease();
  v2 = v0[43];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[42], v2);
  return swift_deallocObject(v0, 352, 7);
}

uint64_t sub_1007065EC()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010EC588, 5);
}

uint64_t destroy for AirPodsSWPairingCheckData(uint64_t *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[13], a1[14]);
  sub_10001BC14(a1[15], a1[16]);
  sub_10001BC14(a1[17], a1[18]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  sub_10001BC14(a1[28], a1[29]);
  sub_10001BC14(a1[30], a1[31]);
  sub_10001BC14(a1[32], a1[33]);
  sub_10001BC14(a1[34], a1[35]);
  sub_10001BC14(a1[36], a1[37]);
  result = swift_bridgeObjectRelease();
  v4 = a1[41];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[40], v4);
  return result;
}

uint64_t initializeWithCopy for AirPodsSWPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  uint64_t v39;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v23 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 192) = v22;
  *(_QWORD *)(a1 + 200) = v23;
  v24 = *(_QWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 208) = v24;
  *(_QWORD *)(a1 + 216) = v25;
  v26 = *(_QWORD *)(a2 + 224);
  v27 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 224) = v26;
  *(_QWORD *)(a1 + 232) = v27;
  v28 = *(_QWORD *)(a2 + 240);
  v29 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 240) = v28;
  *(_QWORD *)(a1 + 248) = v29;
  v30 = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 256) = v30;
  *(_QWORD *)(a1 + 264) = v31;
  v32 = *(_QWORD *)(a2 + 272);
  v33 = *(_QWORD *)(a2 + 280);
  sub_10001BBBC(v32, v33);
  *(_QWORD *)(a1 + 272) = v32;
  *(_QWORD *)(a1 + 280) = v33;
  v34 = *(_QWORD *)(a2 + 288);
  v35 = *(_QWORD *)(a2 + 296);
  sub_10001BBBC(v34, v35);
  *(_QWORD *)(a1 + 288) = v34;
  *(_QWORD *)(a1 + 296) = v35;
  v36 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v36;
  v37 = (_OWORD *)(a2 + 320);
  v38 = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRetain(v36);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 320) = *v37;
  }
  else
  {
    v39 = *(_QWORD *)v37;
    sub_10001BBBC(v39, v38);
    *(_QWORD *)(a1 + 320) = v39;
    *(_QWORD *)(a1 + 328) = v38;
  }
  return a1;
}

uint64_t assignWithCopy for AirPodsSWPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v16, v17);
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  sub_10001BBBC(v21, v22);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v22;
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a2 + 120);
  v26 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v25, v26);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v25;
  *(_QWORD *)(a1 + 128) = v26;
  sub_10001BC14(v27, v28);
  v29 = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v29, v30);
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v29;
  *(_QWORD *)(a1 + 144) = v30;
  sub_10001BC14(v31, v32);
  v33 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v33;
  v34 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v36 = *(_QWORD *)(a2 + 192);
  v37 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 192);
  v39 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v36;
  *(_QWORD *)(a1 + 200) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 208);
  v41 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 208);
  v43 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v40;
  *(_QWORD *)(a1 + 216) = v41;
  sub_10001BC14(v42, v43);
  v44 = *(_QWORD *)(a2 + 224);
  v45 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v44, v45);
  v46 = *(_QWORD *)(a1 + 224);
  v47 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v44;
  *(_QWORD *)(a1 + 232) = v45;
  sub_10001BC14(v46, v47);
  v48 = *(_QWORD *)(a2 + 240);
  v49 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v48, v49);
  v50 = *(_QWORD *)(a1 + 240);
  v51 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v48;
  *(_QWORD *)(a1 + 248) = v49;
  sub_10001BC14(v50, v51);
  v52 = *(_QWORD *)(a2 + 256);
  v53 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v52, v53);
  v54 = *(_QWORD *)(a1 + 256);
  v55 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v52;
  *(_QWORD *)(a1 + 264) = v53;
  sub_10001BC14(v54, v55);
  v56 = *(_QWORD *)(a2 + 272);
  v57 = *(_QWORD *)(a2 + 280);
  sub_10001BBBC(v56, v57);
  v58 = *(_QWORD *)(a1 + 272);
  v59 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v56;
  *(_QWORD *)(a1 + 280) = v57;
  sub_10001BC14(v58, v59);
  v60 = *(_QWORD *)(a2 + 288);
  v61 = *(_QWORD *)(a2 + 296);
  sub_10001BBBC(v60, v61);
  v62 = *(_QWORD *)(a1 + 288);
  v63 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v60;
  *(_QWORD *)(a1 + 296) = v61;
  sub_10001BC14(v62, v63);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  v64 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease();
  v65 = (uint64_t *)(a2 + 320);
  v66 = *(_QWORD *)(a2 + 328);
  if (*(_QWORD *)(a1 + 328) >> 60 != 15)
  {
    if (v66 >> 60 != 15)
    {
      v68 = *v65;
      sub_10001BBBC(*v65, v66);
      v69 = *(_QWORD *)(a1 + 320);
      v70 = *(_QWORD *)(a1 + 328);
      *(_QWORD *)(a1 + 320) = v68;
      *(_QWORD *)(a1 + 328) = v66;
      sub_10001BC14(v69, v70);
      return a1;
    }
    sub_10015B504(a1 + 320);
    goto LABEL_13;
  }
  if (v66 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 320) = *(_OWORD *)v65;
    return a1;
  }
  v67 = *v65;
  sub_10001BBBC(*v65, v66);
  *(_QWORD *)(a1 + 320) = v67;
  *(_QWORD *)(a1 + 328) = v66;
  return a1;
}

uint64_t assignWithTake for AirPodsSWPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 40) = v10;
  sub_10001BC14(v11, v9);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_10001BC14(v19, v20);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 200);
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 208);
  v25 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 224);
  v27 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a1 + 240);
  v29 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a1 + 256);
  v31 = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a1 + 272);
  v33 = *(_QWORD *)(a1 + 280);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  sub_10001BC14(v32, v33);
  v34 = *(_QWORD *)(a1 + 288);
  v35 = *(_QWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_10001BC14(v34, v35);
  v36 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = v36;
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)(a2 + 320);
  v38 = *(_QWORD *)(a1 + 328);
  if (v38 >> 60 != 15)
  {
    v39 = *(_QWORD *)(a2 + 328);
    if (v39 >> 60 != 15)
    {
      v40 = *(_QWORD *)(a1 + 320);
      *(_QWORD *)(a1 + 320) = *v37;
      *(_QWORD *)(a1 + 328) = v39;
      sub_10001BC14(v40, v38);
      return a1;
    }
    sub_10015B504(a1 + 320);
  }
  *(_OWORD *)(a1 + 320) = *(_OWORD *)v37;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 336))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 336) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 336) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingCheckData()
{
  return &type metadata for AirPodsSWPairingCheckData;
}

uint64_t destroy for AirPodsSWPairingAckData(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  sub_10001BC14(a1[14], a1[15]);
  sub_10001BC14(a1[16], a1[17]);
  sub_10001BC14(a1[18], a1[19]);
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  result = swift_bridgeObjectRelease();
  v3 = a1[27];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[26], v3);
  return result;
}

uint64_t initializeWithCopy for AirPodsSWPairingAckData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  unint64_t v27;
  uint64_t v28;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[6];
  v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = a2[14];
  v16 = a2[15];
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a2[16];
  v18 = a2[17];
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = a2[18];
  v20 = a2[19];
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  v21 = a2[20];
  v22 = a2[21];
  sub_10001BBBC(v21, v22);
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)(a1 + 168) = v22;
  v23 = a2[22];
  v24 = a2[23];
  sub_10001BBBC(v23, v24);
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v24;
  v25 = a2[25];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = v25;
  v26 = a2 + 26;
  v27 = a2[27];
  swift_bridgeObjectRetain(v25);
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 208) = *v26;
  }
  else
  {
    v28 = *(_QWORD *)v26;
    sub_10001BBBC(v28, v27);
    *(_QWORD *)(a1 + 208) = v28;
    *(_QWORD *)(a1 + 216) = v27;
  }
  return a1;
}

_QWORD *assignWithCopy for AirPodsSWPairingAckData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[6];
  v8 = a2[7];
  sub_10001BBBC(v7, v8);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_10001BC14(v9, v10);
  v11 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v11, v12);
  v13 = a1[8];
  v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_10001BC14(v13, v14);
  v15 = a2[10];
  v16 = a2[11];
  sub_10001BBBC(v15, v16);
  v17 = a1[10];
  v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[12];
  v20 = a2[13];
  sub_10001BBBC(v19, v20);
  v21 = a1[12];
  v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_10001BC14(v21, v22);
  v23 = a2[14];
  v24 = a2[15];
  sub_10001BBBC(v23, v24);
  v25 = a1[14];
  v26 = a1[15];
  a1[14] = v23;
  a1[15] = v24;
  sub_10001BC14(v25, v26);
  v27 = a2[16];
  v28 = a2[17];
  sub_10001BBBC(v27, v28);
  v29 = a1[16];
  v30 = a1[17];
  a1[16] = v27;
  a1[17] = v28;
  sub_10001BC14(v29, v30);
  v31 = a2[18];
  v32 = a2[19];
  sub_10001BBBC(v31, v32);
  v33 = a1[18];
  v34 = a1[19];
  a1[18] = v31;
  a1[19] = v32;
  sub_10001BC14(v33, v34);
  v35 = a2[20];
  v36 = a2[21];
  sub_10001BBBC(v35, v36);
  v37 = a1[20];
  v38 = a1[21];
  a1[20] = v35;
  a1[21] = v36;
  sub_10001BC14(v37, v38);
  v39 = a2[22];
  v40 = a2[23];
  sub_10001BBBC(v39, v40);
  v41 = a1[22];
  v42 = a1[23];
  a1[22] = v39;
  a1[23] = v40;
  sub_10001BC14(v41, v42);
  a1[24] = a2[24];
  v43 = a2[25];
  a1[25] = v43;
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  v44 = a2 + 26;
  v45 = a2[27];
  if (a1[27] >> 60 != 15)
  {
    if (v45 >> 60 != 15)
    {
      v47 = *v44;
      sub_10001BBBC(*v44, v45);
      v48 = a1[26];
      v49 = a1[27];
      a1[26] = v47;
      a1[27] = v45;
      sub_10001BC14(v48, v49);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 26));
    goto LABEL_6;
  }
  if (v45 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 13) = *(_OWORD *)v44;
    return a1;
  }
  v46 = *v44;
  sub_10001BBBC(*v44, v45);
  a1[26] = v46;
  a1[27] = v45;
  return a1;
}

__n128 initializeWithTake for AirPodsSWPairingAckData(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

_QWORD *assignWithTake for AirPodsSWPairingAckData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[6];
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v7, v8);
  v9 = a1[8];
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v9, v10);
  v11 = a1[10];
  v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v11, v12);
  v13 = a1[12];
  v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v13, v14);
  v15 = a1[14];
  v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v15, v16);
  v17 = a1[16];
  v18 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v17, v18);
  v19 = a1[18];
  v20 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v19, v20);
  v21 = a1[20];
  v22 = a1[21];
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v21, v22);
  v23 = a1[22];
  v24 = a1[23];
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a2 + 200);
  a1[24] = *(_QWORD *)(a2 + 192);
  a1[25] = v25;
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)(a2 + 208);
  v27 = a1[27];
  if (v27 >> 60 != 15)
  {
    v28 = *(_QWORD *)(a2 + 216);
    if (v28 >> 60 != 15)
    {
      v29 = a1[26];
      a1[26] = *v26;
      a1[27] = v28;
      sub_10001BC14(v29, v27);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 26));
  }
  *((_OWORD *)a1 + 13) = *(_OWORD *)v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingAckData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 224))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingAckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 224) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingAckData()
{
  return &type metadata for AirPodsSWPairingAckData;
}

uint64_t destroy for AirPodsLEPairingAckData(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  sub_10001BC14(a1[14], a1[15]);
  sub_10001BC14(a1[16], a1[17]);
  sub_10001BC14(a1[18], a1[19]);
  sub_10001BC14(a1[20], a1[21]);
  sub_10001BC14(a1[22], a1[23]);
  v2 = a1[25];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[24], v2);
  sub_10001BC14(a1[26], a1[27]);
  sub_10001BC14(a1[28], a1[29]);
  result = swift_bridgeObjectRelease();
  v4 = a1[33];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[32], v4);
  return result;
}

uint64_t initializeWithCopy for AirPodsLEPairingAckData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  unint64_t v34;
  uint64_t v35;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[6];
  v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = a2[14];
  v16 = a2[15];
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a2[16];
  v18 = a2[17];
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = a2[18];
  v20 = a2[19];
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  v21 = a2[20];
  v22 = a2[21];
  sub_10001BBBC(v21, v22);
  *(_QWORD *)(a1 + 160) = v21;
  *(_QWORD *)(a1 + 168) = v22;
  v23 = a2[22];
  v24 = a2[23];
  sub_10001BBBC(v23, v24);
  *(_QWORD *)(a1 + 176) = v23;
  *(_QWORD *)(a1 + 184) = v24;
  v25 = a2 + 24;
  v26 = a2[25];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 192) = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    sub_10001BBBC(*v25, a2[25]);
    *(_QWORD *)(a1 + 192) = v27;
    *(_QWORD *)(a1 + 200) = v26;
  }
  v28 = a2[26];
  v29 = a2[27];
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 208) = v28;
  *(_QWORD *)(a1 + 216) = v29;
  v30 = a2[28];
  v31 = a2[29];
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 224) = v30;
  *(_QWORD *)(a1 + 232) = v31;
  v32 = a2[31];
  *(_QWORD *)(a1 + 240) = a2[30];
  *(_QWORD *)(a1 + 248) = v32;
  v33 = a2 + 32;
  v34 = a2[33];
  swift_bridgeObjectRetain(v32);
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 256) = *v33;
  }
  else
  {
    v35 = *(_QWORD *)v33;
    sub_10001BBBC(v35, v34);
    *(_QWORD *)(a1 + 256) = v35;
    *(_QWORD *)(a1 + 264) = v34;
  }
  return a1;
}

_QWORD *assignWithCopy for AirPodsLEPairingAckData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[6];
  v8 = a2[7];
  sub_10001BBBC(v7, v8);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_10001BC14(v9, v10);
  v11 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v11, v12);
  v13 = a1[8];
  v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_10001BC14(v13, v14);
  v15 = a2[10];
  v16 = a2[11];
  sub_10001BBBC(v15, v16);
  v17 = a1[10];
  v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[12];
  v20 = a2[13];
  sub_10001BBBC(v19, v20);
  v21 = a1[12];
  v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_10001BC14(v21, v22);
  v23 = a2[14];
  v24 = a2[15];
  sub_10001BBBC(v23, v24);
  v25 = a1[14];
  v26 = a1[15];
  a1[14] = v23;
  a1[15] = v24;
  sub_10001BC14(v25, v26);
  v27 = a2[16];
  v28 = a2[17];
  sub_10001BBBC(v27, v28);
  v29 = a1[16];
  v30 = a1[17];
  a1[16] = v27;
  a1[17] = v28;
  sub_10001BC14(v29, v30);
  v31 = a2[18];
  v32 = a2[19];
  sub_10001BBBC(v31, v32);
  v33 = a1[18];
  v34 = a1[19];
  a1[18] = v31;
  a1[19] = v32;
  sub_10001BC14(v33, v34);
  v35 = a2[20];
  v36 = a2[21];
  sub_10001BBBC(v35, v36);
  v37 = a1[20];
  v38 = a1[21];
  a1[20] = v35;
  a1[21] = v36;
  sub_10001BC14(v37, v38);
  v39 = a2[22];
  v40 = a2[23];
  sub_10001BBBC(v39, v40);
  v41 = a1[22];
  v42 = a1[23];
  a1[22] = v39;
  a1[23] = v40;
  sub_10001BC14(v41, v42);
  v43 = a2 + 24;
  v44 = a2[25];
  if (a1[25] >> 60 == 15)
  {
    if (v44 >> 60 != 15)
    {
      v45 = *v43;
      sub_10001BBBC(*v43, a2[25]);
      a1[24] = v45;
      a1[25] = v44;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v44 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 24));
LABEL_6:
    *((_OWORD *)a1 + 12) = *(_OWORD *)v43;
    goto LABEL_8;
  }
  v46 = *v43;
  sub_10001BBBC(*v43, a2[25]);
  v47 = a1[24];
  v48 = a1[25];
  a1[24] = v46;
  a1[25] = v44;
  sub_10001BC14(v47, v48);
LABEL_8:
  v49 = a2[26];
  v50 = a2[27];
  sub_10001BBBC(v49, v50);
  v51 = a1[26];
  v52 = a1[27];
  a1[26] = v49;
  a1[27] = v50;
  sub_10001BC14(v51, v52);
  v53 = a2[28];
  v54 = a2[29];
  sub_10001BBBC(v53, v54);
  v55 = a1[28];
  v56 = a1[29];
  a1[28] = v53;
  a1[29] = v54;
  sub_10001BC14(v55, v56);
  a1[30] = a2[30];
  v57 = a2[31];
  a1[31] = v57;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRelease();
  v58 = a2 + 32;
  v59 = a2[33];
  if (a1[33] >> 60 != 15)
  {
    if (v59 >> 60 != 15)
    {
      v61 = *v58;
      sub_10001BBBC(*v58, v59);
      v62 = a1[32];
      v63 = a1[33];
      a1[32] = v61;
      a1[33] = v59;
      sub_10001BC14(v62, v63);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 32));
    goto LABEL_13;
  }
  if (v59 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 16) = *(_OWORD *)v58;
    return a1;
  }
  v60 = *v58;
  sub_10001BBBC(*v58, v59);
  a1[32] = v60;
  a1[33] = v59;
  return a1;
}

void *initializeWithTake for AirPodsLEPairingAckData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

_QWORD *assignWithTake for AirPodsLEPairingAckData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[6];
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v7, v8);
  v9 = a1[8];
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v9, v10);
  v11 = a1[10];
  v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v11, v12);
  v13 = a1[12];
  v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v13, v14);
  v15 = a1[14];
  v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v15, v16);
  v17 = a1[16];
  v18 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v17, v18);
  v19 = a1[18];
  v20 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v19, v20);
  v21 = a1[20];
  v22 = a1[21];
  *((_OWORD *)a1 + 10) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v21, v22);
  v23 = a1[22];
  v24 = a1[23];
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v23, v24);
  v25 = (_OWORD *)(a2 + 192);
  v26 = a1[25];
  if (v26 >> 60 == 15)
    goto LABEL_4;
  v27 = *(_QWORD *)(a2 + 200);
  if (v27 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 24));
LABEL_4:
    *((_OWORD *)a1 + 12) = *v25;
    goto LABEL_6;
  }
  v28 = a1[24];
  a1[24] = *(_QWORD *)v25;
  a1[25] = v27;
  sub_10001BC14(v28, v26);
LABEL_6:
  v29 = a1[26];
  v30 = a1[27];
  *((_OWORD *)a1 + 13) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v29, v30);
  v31 = a1[28];
  v32 = a1[29];
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  sub_10001BC14(v31, v32);
  v33 = *(_QWORD *)(a2 + 248);
  a1[30] = *(_QWORD *)(a2 + 240);
  a1[31] = v33;
  swift_bridgeObjectRelease();
  v34 = (_QWORD *)(a2 + 256);
  v35 = a1[33];
  if (v35 >> 60 != 15)
  {
    v36 = *(_QWORD *)(a2 + 264);
    if (v36 >> 60 != 15)
    {
      v37 = a1[32];
      a1[32] = *v34;
      a1[33] = v36;
      sub_10001BC14(v37, v35);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 32));
  }
  *((_OWORD *)a1 + 16) = *(_OWORD *)v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingAckData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 272))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingAckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 272) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 272) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingAckData()
{
  return &type metadata for AirPodsLEPairingAckData;
}

uint64_t destroy for AirPodsLEPairingCheckData(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[13], a1[14]);
  sub_10001BC14(a1[15], a1[16]);
  sub_10001BC14(a1[17], a1[18]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  sub_10001BC14(a1[28], a1[29]);
  sub_10001BC14(a1[30], a1[31]);
  sub_10001BC14(a1[32], a1[33]);
  v3 = a1[35];
  if (v3 >> 60 != 15)
    sub_10001BC14(a1[34], v3);
  swift_bridgeObjectRelease();
  v4 = a1[39];
  if (v4 >> 60 != 15)
    sub_10001BC14(a1[38], v4);
  sub_10001BC14(a1[40], a1[41]);
  return sub_10001BC14(a1[42], a1[43]);
}

uint64_t initializeWithCopy for AirPodsLEPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v23 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 192) = v22;
  *(_QWORD *)(a1 + 200) = v23;
  v24 = *(_QWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 208) = v24;
  *(_QWORD *)(a1 + 216) = v25;
  v26 = *(_QWORD *)(a2 + 224);
  v27 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 224) = v26;
  *(_QWORD *)(a1 + 232) = v27;
  v28 = *(_QWORD *)(a2 + 240);
  v29 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 240) = v28;
  *(_QWORD *)(a1 + 248) = v29;
  v30 = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 256) = v30;
  *(_QWORD *)(a1 + 264) = v31;
  v32 = (uint64_t *)(a2 + 272);
  v33 = *(_QWORD *)(a2 + 280);
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 272) = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_10001BBBC(*v32, *(_QWORD *)(a2 + 280));
    *(_QWORD *)(a1 + 272) = v34;
    *(_QWORD *)(a1 + 280) = v33;
  }
  v35 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v35;
  v36 = (_OWORD *)(a2 + 304);
  v37 = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRetain(v35);
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 304) = *v36;
  }
  else
  {
    v38 = *(_QWORD *)v36;
    sub_10001BBBC(v38, v37);
    *(_QWORD *)(a1 + 304) = v38;
    *(_QWORD *)(a1 + 312) = v37;
  }
  v39 = *(_QWORD *)(a2 + 320);
  v40 = *(_QWORD *)(a2 + 328);
  sub_10001BBBC(v39, v40);
  *(_QWORD *)(a1 + 320) = v39;
  *(_QWORD *)(a1 + 328) = v40;
  v42 = *(_QWORD *)(a2 + 336);
  v41 = *(_QWORD *)(a2 + 344);
  sub_10001BBBC(v42, v41);
  *(_QWORD *)(a1 + 336) = v42;
  *(_QWORD *)(a1 + 344) = v41;
  return a1;
}

uint64_t assignWithCopy for AirPodsLEPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v16, v17);
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  sub_10001BBBC(v21, v22);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v22;
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a2 + 120);
  v26 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v25, v26);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v25;
  *(_QWORD *)(a1 + 128) = v26;
  sub_10001BC14(v27, v28);
  v29 = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v29, v30);
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v29;
  *(_QWORD *)(a1 + 144) = v30;
  sub_10001BC14(v31, v32);
  v33 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v33;
  v34 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v36 = *(_QWORD *)(a2 + 192);
  v37 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 192);
  v39 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v36;
  *(_QWORD *)(a1 + 200) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 208);
  v41 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 208);
  v43 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v40;
  *(_QWORD *)(a1 + 216) = v41;
  sub_10001BC14(v42, v43);
  v44 = *(_QWORD *)(a2 + 224);
  v45 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v44, v45);
  v46 = *(_QWORD *)(a1 + 224);
  v47 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v44;
  *(_QWORD *)(a1 + 232) = v45;
  sub_10001BC14(v46, v47);
  v48 = *(_QWORD *)(a2 + 240);
  v49 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v48, v49);
  v50 = *(_QWORD *)(a1 + 240);
  v51 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v48;
  *(_QWORD *)(a1 + 248) = v49;
  sub_10001BC14(v50, v51);
  v52 = *(_QWORD *)(a2 + 256);
  v53 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v52, v53);
  v54 = *(_QWORD *)(a1 + 256);
  v55 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v52;
  *(_QWORD *)(a1 + 264) = v53;
  sub_10001BC14(v54, v55);
  v56 = (uint64_t *)(a2 + 272);
  v57 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280) >> 60 == 15)
  {
    if (v57 >> 60 != 15)
    {
      v58 = *v56;
      sub_10001BBBC(*v56, *(_QWORD *)(a2 + 280));
      *(_QWORD *)(a1 + 272) = v58;
      *(_QWORD *)(a1 + 280) = v57;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v57 >> 60 == 15)
  {
    sub_1000DC964(a1 + 272);
LABEL_13:
    *(_OWORD *)(a1 + 272) = *(_OWORD *)v56;
    goto LABEL_15;
  }
  v59 = *v56;
  sub_10001BBBC(*v56, *(_QWORD *)(a2 + 280));
  v60 = *(_QWORD *)(a1 + 272);
  v61 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v59;
  *(_QWORD *)(a1 + 280) = v57;
  sub_10001BC14(v60, v61);
LABEL_15:
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v62 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  v63 = (uint64_t *)(a2 + 304);
  v64 = *(_QWORD *)(a2 + 312);
  if (*(_QWORD *)(a1 + 312) >> 60 != 15)
  {
    if (v64 >> 60 != 15)
    {
      v66 = *v63;
      sub_10001BBBC(*v63, *(_QWORD *)(a2 + 312));
      v67 = *(_QWORD *)(a1 + 304);
      v68 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 304) = v66;
      *(_QWORD *)(a1 + 312) = v64;
      sub_10001BC14(v67, v68);
      goto LABEL_22;
    }
    sub_10015B504(a1 + 304);
    goto LABEL_20;
  }
  if (v64 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 304) = *(_OWORD *)v63;
    goto LABEL_22;
  }
  v65 = *v63;
  sub_10001BBBC(*v63, *(_QWORD *)(a2 + 312));
  *(_QWORD *)(a1 + 304) = v65;
  *(_QWORD *)(a1 + 312) = v64;
LABEL_22:
  v69 = *(_QWORD *)(a2 + 320);
  v70 = *(_QWORD *)(a2 + 328);
  sub_10001BBBC(v69, v70);
  v71 = *(_QWORD *)(a1 + 320);
  v72 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 320) = v69;
  *(_QWORD *)(a1 + 328) = v70;
  sub_10001BC14(v71, v72);
  v74 = *(_QWORD *)(a2 + 336);
  v73 = *(_QWORD *)(a2 + 344);
  sub_10001BBBC(v74, v73);
  v75 = *(_QWORD *)(a1 + 336);
  v76 = *(_QWORD *)(a1 + 344);
  *(_QWORD *)(a1 + 336) = v74;
  *(_QWORD *)(a1 + 344) = v73;
  sub_10001BC14(v75, v76);
  return a1;
}

uint64_t assignWithTake for AirPodsLEPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 40) = v10;
  sub_10001BC14(v11, v9);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_10001BC14(v19, v20);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 200);
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 208);
  v25 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 224);
  v27 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a1 + 240);
  v29 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a1 + 256);
  v31 = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  sub_10001BC14(v30, v31);
  v32 = (_OWORD *)(a2 + 272);
  v33 = *(_QWORD *)(a1 + 280);
  if (v33 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 272) = *v32;
    goto LABEL_11;
  }
  v34 = *(_QWORD *)(a2 + 280);
  if (v34 >> 60 == 15)
  {
    sub_1000DC964(a1 + 272);
    goto LABEL_9;
  }
  v35 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)v32;
  *(_QWORD *)(a1 + 280) = v34;
  sub_10001BC14(v35, v33);
LABEL_11:
  v36 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v36;
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)(a2 + 304);
  v38 = *(_QWORD *)(a1 + 312);
  if (v38 >> 60 != 15)
  {
    v39 = *(_QWORD *)(a2 + 312);
    if (v39 >> 60 != 15)
    {
      v40 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 304) = *v37;
      *(_QWORD *)(a1 + 312) = v39;
      sub_10001BC14(v40, v38);
      goto LABEL_16;
    }
    sub_10015B504(a1 + 304);
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)v37;
LABEL_16:
  v41 = *(_QWORD *)(a1 + 320);
  v42 = *(_QWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  sub_10001BC14(v41, v42);
  v43 = *(_QWORD *)(a1 + 336);
  v44 = *(_QWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  sub_10001BC14(v43, v44);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 352))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 352) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 352) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCheckData()
{
  return &type metadata for AirPodsLEPairingCheckData;
}

uint64_t destroy for AirPodsPairingAckData(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  sub_10001BC14(a1[14], a1[15]);
  sub_10001BC14(a1[16], a1[17]);
  sub_10001BC14(a1[18], a1[19]);
  v2 = a1[21];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[20], v2);
  result = swift_bridgeObjectRelease();
  v4 = a1[25];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[24], v4);
  return result;
}

uint64_t initializeWithCopy for AirPodsPairingAckData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  unint64_t v26;
  uint64_t v27;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[6];
  v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = a2[14];
  v16 = a2[15];
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v16;
  v17 = a2[16];
  v18 = a2[17];
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v18;
  v19 = a2[18];
  v20 = a2[19];
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = v20;
  v21 = a2 + 20;
  v22 = a2[21];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_10001BBBC(*v21, a2[21]);
    *(_QWORD *)(a1 + 160) = v23;
    *(_QWORD *)(a1 + 168) = v22;
  }
  v24 = a2[23];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = v24;
  v25 = a2 + 24;
  v26 = a2[25];
  swift_bridgeObjectRetain(v24);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 192) = *v25;
  }
  else
  {
    v27 = *(_QWORD *)v25;
    sub_10001BBBC(v27, v26);
    *(_QWORD *)(a1 + 192) = v27;
    *(_QWORD *)(a1 + 200) = v26;
  }
  return a1;
}

_QWORD *assignWithCopy for AirPodsPairingAckData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[6];
  v8 = a2[7];
  sub_10001BBBC(v7, v8);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_10001BC14(v9, v10);
  v11 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v11, v12);
  v13 = a1[8];
  v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_10001BC14(v13, v14);
  v15 = a2[10];
  v16 = a2[11];
  sub_10001BBBC(v15, v16);
  v17 = a1[10];
  v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[12];
  v20 = a2[13];
  sub_10001BBBC(v19, v20);
  v21 = a1[12];
  v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_10001BC14(v21, v22);
  v23 = a2[14];
  v24 = a2[15];
  sub_10001BBBC(v23, v24);
  v25 = a1[14];
  v26 = a1[15];
  a1[14] = v23;
  a1[15] = v24;
  sub_10001BC14(v25, v26);
  v27 = a2[16];
  v28 = a2[17];
  sub_10001BBBC(v27, v28);
  v29 = a1[16];
  v30 = a1[17];
  a1[16] = v27;
  a1[17] = v28;
  sub_10001BC14(v29, v30);
  v31 = a2[18];
  v32 = a2[19];
  sub_10001BBBC(v31, v32);
  v33 = a1[18];
  v34 = a1[19];
  a1[18] = v31;
  a1[19] = v32;
  sub_10001BC14(v33, v34);
  v35 = a2 + 20;
  v36 = a2[21];
  if (a1[21] >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_10001BBBC(*v35, a2[21]);
      a1[20] = v37;
      a1[21] = v36;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v36 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 20));
LABEL_6:
    *((_OWORD *)a1 + 10) = *(_OWORD *)v35;
    goto LABEL_8;
  }
  v38 = *v35;
  sub_10001BBBC(*v35, a2[21]);
  v39 = a1[20];
  v40 = a1[21];
  a1[20] = v38;
  a1[21] = v36;
  sub_10001BC14(v39, v40);
LABEL_8:
  a1[22] = a2[22];
  v41 = a2[23];
  a1[23] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  v42 = a2 + 24;
  v43 = a2[25];
  if (a1[25] >> 60 != 15)
  {
    if (v43 >> 60 != 15)
    {
      v45 = *v42;
      sub_10001BBBC(*v42, v43);
      v46 = a1[24];
      v47 = a1[25];
      a1[24] = v45;
      a1[25] = v43;
      sub_10001BC14(v46, v47);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 24));
    goto LABEL_13;
  }
  if (v43 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 12) = *(_OWORD *)v42;
    return a1;
  }
  v44 = *v42;
  sub_10001BBBC(*v42, v43);
  a1[24] = v44;
  a1[25] = v43;
  return a1;
}

_QWORD *assignWithTake for AirPodsPairingAckData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[6];
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v7, v8);
  v9 = a1[8];
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v9, v10);
  v11 = a1[10];
  v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v11, v12);
  v13 = a1[12];
  v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v13, v14);
  v15 = a1[14];
  v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v15, v16);
  v17 = a1[16];
  v18 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v17, v18);
  v19 = a1[18];
  v20 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v19, v20);
  v21 = (_OWORD *)(a2 + 160);
  v22 = a1[21];
  if (v22 >> 60 == 15)
    goto LABEL_4;
  v23 = *(_QWORD *)(a2 + 168);
  if (v23 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 20));
LABEL_4:
    *((_OWORD *)a1 + 10) = *v21;
    goto LABEL_6;
  }
  v24 = a1[20];
  a1[20] = *(_QWORD *)v21;
  a1[21] = v23;
  sub_10001BC14(v24, v22);
LABEL_6:
  v25 = *(_QWORD *)(a2 + 184);
  a1[22] = *(_QWORD *)(a2 + 176);
  a1[23] = v25;
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)(a2 + 192);
  v27 = a1[25];
  if (v27 >> 60 != 15)
  {
    v28 = *(_QWORD *)(a2 + 200);
    if (v28 >> 60 != 15)
    {
      v29 = a1[24];
      a1[24] = *v26;
      a1[25] = v28;
      sub_10001BC14(v29, v27);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 24));
  }
  *((_OWORD *)a1 + 12) = *(_OWORD *)v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingAckData(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingAckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingAckData()
{
  return &type metadata for AirPodsPairingAckData;
}

uint64_t destroy for AirPodsPairingCheckData(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  v2 = a1[5];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[4], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[13], a1[14]);
  sub_10001BC14(a1[15], a1[16]);
  sub_10001BC14(a1[17], a1[18]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[24], a1[25]);
  sub_10001BC14(a1[26], a1[27]);
  sub_10001BC14(a1[28], a1[29]);
  sub_10001BC14(a1[30], a1[31]);
  sub_10001BC14(a1[32], a1[33]);
  v3 = a1[35];
  if (v3 >> 60 != 15)
    sub_10001BC14(a1[34], v3);
  result = swift_bridgeObjectRelease();
  v5 = a1[39];
  if (v5 >> 60 != 15)
    return sub_10001BC14(a1[38], v5);
  return result;
}

uint64_t initializeWithCopy for AirPodsPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  unint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = (uint64_t *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, *(_QWORD *)(a2 + 40));
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v13;
  v14 = *(_QWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v15;
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  v18 = *(_QWORD *)(a2 + 136);
  v19 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 136) = v18;
  *(_QWORD *)(a1 + 144) = v19;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v20 = *(_QWORD *)(a2 + 168);
  v21 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v20;
  *(_QWORD *)(a1 + 176) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v23 = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 192) = v22;
  *(_QWORD *)(a1 + 200) = v23;
  v24 = *(_QWORD *)(a2 + 208);
  v25 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 208) = v24;
  *(_QWORD *)(a1 + 216) = v25;
  v26 = *(_QWORD *)(a2 + 224);
  v27 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 224) = v26;
  *(_QWORD *)(a1 + 232) = v27;
  v28 = *(_QWORD *)(a2 + 240);
  v29 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 240) = v28;
  *(_QWORD *)(a1 + 248) = v29;
  v30 = *(_QWORD *)(a2 + 256);
  v31 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 256) = v30;
  *(_QWORD *)(a1 + 264) = v31;
  v32 = (uint64_t *)(a2 + 272);
  v33 = *(_QWORD *)(a2 + 280);
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 272) = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_10001BBBC(*v32, *(_QWORD *)(a2 + 280));
    *(_QWORD *)(a1 + 272) = v34;
    *(_QWORD *)(a1 + 280) = v33;
  }
  v35 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v35;
  v36 = (_OWORD *)(a2 + 304);
  v37 = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRetain(v35);
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 304) = *v36;
  }
  else
  {
    v38 = *(_QWORD *)v36;
    sub_10001BBBC(v38, v37);
    *(_QWORD *)(a1 + 304) = v38;
    *(_QWORD *)(a1 + 312) = v37;
  }
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = (uint64_t *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
      *(_QWORD *)(a1 + 32) = v14;
      *(_QWORD *)(a1 + 40) = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_6:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  sub_10001BBBC(*v12, *(_QWORD *)(a2 + 40));
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v16, v17);
LABEL_8:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  sub_10001BBBC(v21, v22);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v21;
  *(_QWORD *)(a1 + 112) = v22;
  sub_10001BC14(v23, v24);
  v25 = *(_QWORD *)(a2 + 120);
  v26 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v25, v26);
  v27 = *(_QWORD *)(a1 + 120);
  v28 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v25;
  *(_QWORD *)(a1 + 128) = v26;
  sub_10001BC14(v27, v28);
  v29 = *(_QWORD *)(a2 + 136);
  v30 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v29, v30);
  v31 = *(_QWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v29;
  *(_QWORD *)(a1 + 144) = v30;
  sub_10001BC14(v31, v32);
  v33 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v33;
  v34 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v36 = *(_QWORD *)(a2 + 192);
  v37 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 192);
  v39 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v36;
  *(_QWORD *)(a1 + 200) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 208);
  v41 = *(_QWORD *)(a2 + 216);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 208);
  v43 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 208) = v40;
  *(_QWORD *)(a1 + 216) = v41;
  sub_10001BC14(v42, v43);
  v44 = *(_QWORD *)(a2 + 224);
  v45 = *(_QWORD *)(a2 + 232);
  sub_10001BBBC(v44, v45);
  v46 = *(_QWORD *)(a1 + 224);
  v47 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 224) = v44;
  *(_QWORD *)(a1 + 232) = v45;
  sub_10001BC14(v46, v47);
  v48 = *(_QWORD *)(a2 + 240);
  v49 = *(_QWORD *)(a2 + 248);
  sub_10001BBBC(v48, v49);
  v50 = *(_QWORD *)(a1 + 240);
  v51 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 240) = v48;
  *(_QWORD *)(a1 + 248) = v49;
  sub_10001BC14(v50, v51);
  v52 = *(_QWORD *)(a2 + 256);
  v53 = *(_QWORD *)(a2 + 264);
  sub_10001BBBC(v52, v53);
  v54 = *(_QWORD *)(a1 + 256);
  v55 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v52;
  *(_QWORD *)(a1 + 264) = v53;
  sub_10001BC14(v54, v55);
  v56 = (uint64_t *)(a2 + 272);
  v57 = *(_QWORD *)(a2 + 280);
  if (*(_QWORD *)(a1 + 280) >> 60 == 15)
  {
    if (v57 >> 60 != 15)
    {
      v58 = *v56;
      sub_10001BBBC(*v56, *(_QWORD *)(a2 + 280));
      *(_QWORD *)(a1 + 272) = v58;
      *(_QWORD *)(a1 + 280) = v57;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v57 >> 60 == 15)
  {
    sub_1000DC964(a1 + 272);
LABEL_13:
    *(_OWORD *)(a1 + 272) = *(_OWORD *)v56;
    goto LABEL_15;
  }
  v59 = *v56;
  sub_10001BBBC(*v56, *(_QWORD *)(a2 + 280));
  v60 = *(_QWORD *)(a1 + 272);
  v61 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 272) = v59;
  *(_QWORD *)(a1 + 280) = v57;
  sub_10001BC14(v60, v61);
LABEL_15:
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v62 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 296) = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  v63 = (uint64_t *)(a2 + 304);
  v64 = *(_QWORD *)(a2 + 312);
  if (*(_QWORD *)(a1 + 312) >> 60 != 15)
  {
    if (v64 >> 60 != 15)
    {
      v66 = *v63;
      sub_10001BBBC(*v63, v64);
      v67 = *(_QWORD *)(a1 + 304);
      v68 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 304) = v66;
      *(_QWORD *)(a1 + 312) = v64;
      sub_10001BC14(v67, v68);
      return a1;
    }
    sub_10015B504(a1 + 304);
    goto LABEL_20;
  }
  if (v64 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 304) = *(_OWORD *)v63;
    return a1;
  }
  v65 = *v63;
  sub_10001BBBC(*v63, v64);
  *(_QWORD *)(a1 + 304) = v65;
  *(_QWORD *)(a1 + 312) = v64;
  return a1;
}

void *initializeWithTake for AirPodsPairingCheckData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x140uLL);
}

uint64_t assignWithTake for AirPodsPairingCheckData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (_OWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 40);
  if (v10 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v8;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v8;
  *(_QWORD *)(a1 + 40) = v10;
  sub_10001BC14(v11, v9);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001BC14(v15, v16);
  v17 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001BC14(v17, v18);
  v19 = *(_QWORD *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_10001BC14(v19, v20);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 200);
  v22 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 208);
  v25 = *(_QWORD *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 224);
  v27 = *(_QWORD *)(a1 + 232);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a1 + 240);
  v29 = *(_QWORD *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001BC14(v28, v29);
  v30 = *(_QWORD *)(a1 + 256);
  v31 = *(_QWORD *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  sub_10001BC14(v30, v31);
  v32 = (_OWORD *)(a2 + 272);
  v33 = *(_QWORD *)(a1 + 280);
  if (v33 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 272) = *v32;
    goto LABEL_11;
  }
  v34 = *(_QWORD *)(a2 + 280);
  if (v34 >> 60 == 15)
  {
    sub_1000DC964(a1 + 272);
    goto LABEL_9;
  }
  v35 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)v32;
  *(_QWORD *)(a1 + 280) = v34;
  sub_10001BC14(v35, v33);
LABEL_11:
  v36 = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = v36;
  swift_bridgeObjectRelease();
  v37 = (_QWORD *)(a2 + 304);
  v38 = *(_QWORD *)(a1 + 312);
  if (v38 >> 60 != 15)
  {
    v39 = *(_QWORD *)(a2 + 312);
    if (v39 >> 60 != 15)
    {
      v40 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 304) = *v37;
      *(_QWORD *)(a1 + 312) = v39;
      sub_10001BC14(v40, v38);
      return a1;
    }
    sub_10015B504(a1 + 304);
  }
  *(_OWORD *)(a1 + 304) = *(_OWORD *)v37;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 320))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 312) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 320) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 320) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingCheckData()
{
  return &type metadata for AirPodsPairingCheckData;
}

uint64_t storeEnumTagSinglePayload for MultipartAccessoryPairingInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100709928 + 4 * byte_100E4AF25[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10070995C + 4 * byte_100E4AF20[v4]))();
}

uint64_t sub_10070995C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100709964(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10070996CLL);
  return result;
}

uint64_t sub_100709978(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100709980);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100709984(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070998C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultipartAccessoryPairingInfo.CodingKeys()
{
  return &type metadata for MultipartAccessoryPairingInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData()
{
  return &type metadata for AirPodsUnpairData;
}

_OWORD *sub_1007099B8(_OWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    v10 = a2 + 2;
    v11 = a2[3];
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10001BBBC(*v10, a2[3]);
      *((_QWORD *)v4 + 2) = v12;
      *((_QWORD *)v4 + 3) = v11;
    }
    v13 = a2[4];
    v14 = a2[5];
    sub_10001BBBC(v13, v14);
    *((_QWORD *)v4 + 4) = v13;
    *((_QWORD *)v4 + 5) = v14;
    v15 = a3[7];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UUID(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = a3[8];
    v22 = a3[9];
    v23 = (_QWORD *)((char *)v4 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (_QWORD *)((char *)v4 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
  }
  return v4;
}

uint64_t sub_100709B54(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10001BC14(*a1, v4);
  v5 = a1[3];
  if (v5 >> 60 != 15)
    sub_10001BC14(a1[2], v5);
  sub_10001BC14(a1[4], a1[5]);
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100709C18(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = a2[4];
  v12 = a2[5];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = (_QWORD *)(a1 + v19);
  v22 = (uint64_t *)((char *)a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_QWORD *)(a1 + v20);
  v25 = (uint64_t *)((char *)a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t *sub_100709D88(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *a2;
  sub_10001BBBC(*a2, a2[1]);
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = a2 + 2;
  v12 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      v13 = *v11;
      sub_10001BBBC(*v11, a2[3]);
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v14 = *v11;
  sub_10001BBBC(*v11, a2[3]);
  v15 = a1[2];
  v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_10001BC14(v15, v16);
LABEL_15:
  v17 = a2[4];
  v18 = a2[5];
  sub_10001BBBC(v17, v18);
  v19 = a1[4];
  v20 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  sub_10001BC14(v19, v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v22, v23, v24);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_20;
  }
  if (v28)
  {
LABEL_20:
    v29 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_21:
  v30 = a3[8];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  v34 = a3[9];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100709FFC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

uint64_t sub_10070A0E4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = (_OWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1000DC964(a1 + 16);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10001BC14(v12, v10);
LABEL_11:
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v13, v14);
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_16;
  }
  if (v22)
  {
LABEL_16:
    v23 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_17:
  v24 = a3[8];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v29 = a3[9];
  v30 = (_QWORD *)(a1 + v29);
  v31 = (uint64_t *)(a2 + v29);
  v33 = *v31;
  v32 = v31[1];
  *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10070A2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10070A2D8);
}

uint64_t sub_10070A2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10070A36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10070A378);
}

uint64_t sub_10070A378(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_1010ED860);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirPodsUnpairData.DeviceUnpairData(uint64_t a1)
{
  return sub_10001B630(a1, qword_101104FC0, (uint64_t)&nominal type descriptor for AirPodsUnpairData.DeviceUnpairData);
}

void sub_10070A410(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E4B1B8;
  v4[1] = &unk_100E4B1B8;
  v4[2] = &unk_100E4B1D0;
  sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100E4B1E8;
    v4[5] = &unk_100E4B1E8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

ValueMetadata *type metadata accessor for PairingTransportType()
{
  return &type metadata for PairingTransportType;
}

uint64_t _s12searchpartyd20PairingTransportTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10070A50C + 4 * byte_100E4AF2F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10070A540 + 4 * byte_100E4AF2A[v4]))();
}

uint64_t sub_10070A540(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070A548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10070A550);
  return result;
}

uint64_t sub_10070A55C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10070A564);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10070A568(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070A570(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MultipartAccessoryPairingInfo.CloudKitSyncStatus()
{
  return &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus;
}

unint64_t sub_10070A590()
{
  unint64_t result;

  result = qword_101105008;
  if (!qword_101105008)
  {
    result = swift_getWitnessTable(byte_100E4B304, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_101105008);
  }
  return result;
}

unint64_t sub_10070A5D8()
{
  unint64_t result;

  result = qword_101105010;
  if (!qword_101105010)
  {
    result = swift_getWitnessTable(byte_100E4B3CC, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_101105010);
  }
  return result;
}

unint64_t sub_10070A620()
{
  unint64_t result;

  result = qword_101105018;
  if (!qword_101105018)
  {
    result = swift_getWitnessTable(byte_100E4B4AC, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105018);
  }
  return result;
}

unint64_t sub_10070A668()
{
  unint64_t result;

  result = qword_101105020;
  if (!qword_101105020)
  {
    result = swift_getWitnessTable(byte_100E4B41C, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105020);
  }
  return result;
}

unint64_t sub_10070A6B0()
{
  unint64_t result;

  result = qword_101105028;
  if (!qword_101105028)
  {
    result = swift_getWitnessTable(byte_100E4B444, &type metadata for MultipartAccessoryPairingInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105028);
  }
  return result;
}

unint64_t sub_10070A6F4()
{
  unint64_t result;

  result = qword_101105038;
  if (!qword_101105038)
  {
    result = swift_getWitnessTable(byte_100E4B8E0, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105038);
  }
  return result;
}

unint64_t sub_10070A738()
{
  unint64_t result;

  result = qword_101105040;
  if (!qword_101105040)
  {
    result = swift_getWitnessTable(byte_100E4B8B8, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_101105040);
  }
  return result;
}

unint64_t sub_10070A77C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101105050;
  if (!qword_101105050)
  {
    v1 = sub_10001F784(&qword_101105048);
    v2 = sub_100006204(&qword_101105058, type metadata accessor for AirPodsUnpairData.DeviceUnpairData, (uint64_t)&unk_100E4B3F4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101105050);
  }
  return result;
}

unint64_t sub_10070A7F8()
{
  unint64_t result;

  result = qword_101105060;
  if (!qword_101105060)
  {
    result = swift_getWitnessTable(byte_100E4B28C, &type metadata for MultipartAccessoryPairingInfo.CloudKitSyncStatus);
    atomic_store(result, (unint64_t *)&qword_101105060);
  }
  return result;
}

unint64_t sub_10070A83C()
{
  unint64_t result;

  result = qword_101105068;
  if (!qword_101105068)
  {
    result = swift_getWitnessTable(asc_100E4B354, &type metadata for PairingTransportType);
    atomic_store(result, (unint64_t *)&qword_101105068);
  }
  return result;
}

unint64_t sub_10070A880()
{
  unint64_t result;

  result = qword_101105078;
  if (!qword_101105078)
  {
    result = swift_getWitnessTable(aY_52, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105078);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData.DeviceUnpairData.CodingKeys()
{
  return &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys;
}

uint64_t _s12searchpartyd17AirPodsUnpairDataV16DeviceUnpairDataV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10070A924 + 4 * byte_100E4AF39[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10070A958 + 4 * byte_100E4AF34[v4]))();
}

uint64_t sub_10070A958(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070A960(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10070A968);
  return result;
}

uint64_t sub_10070A974(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10070A97CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10070A980(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070A988(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairData.CodingKeys()
{
  return &type metadata for AirPodsUnpairData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirPodsUnpairContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10070A9F0 + 4 * byte_100E4AF43[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10070AA24 + 4 * byte_100E4AF3E[v4]))();
}

uint64_t sub_10070AA24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070AA2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10070AA34);
  return result;
}

uint64_t sub_10070AA40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10070AA48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10070AA4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070AA54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairContext()
{
  return &type metadata for AirPodsUnpairContext;
}

unint64_t sub_10070AA74()
{
  unint64_t result;

  result = qword_101105080;
  if (!qword_101105080)
  {
    result = swift_getWitnessTable(byte_100E4B6D0, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_101105080);
  }
  return result;
}

unint64_t sub_10070AABC()
{
  unint64_t result;

  result = qword_101105088;
  if (!qword_101105088)
  {
    result = swift_getWitnessTable((const char *)L"9$쀴\r", &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105088);
  }
  return result;
}

unint64_t sub_10070AB04()
{
  unint64_t result;

  result = qword_101105090;
  if (!qword_101105090)
  {
    result = swift_getWitnessTable(byte_100E4B840, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105090);
  }
  return result;
}

unint64_t sub_10070AB4C()
{
  unint64_t result;

  result = qword_101105098;
  if (!qword_101105098)
  {
    result = swift_getWitnessTable((const char *)L"!$뿨\r", &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105098);
  }
  return result;
}

unint64_t sub_10070AB94()
{
  unint64_t result;

  result = qword_1011050A0;
  if (!qword_1011050A0)
  {
    result = swift_getWitnessTable(aY_53, &type metadata for AirPodsUnpairData.DeviceUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011050A0);
  }
  return result;
}

unint64_t sub_10070ABDC()
{
  unint64_t result;

  result = qword_1011050A8;
  if (!qword_1011050A8)
  {
    result = swift_getWitnessTable(byte_100E4B6F8, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011050A8);
  }
  return result;
}

unint64_t sub_10070AC24()
{
  unint64_t result;

  result = qword_1011050B0;
  if (!qword_1011050B0)
  {
    result = swift_getWitnessTable(byte_100E4B720, &type metadata for AirPodsUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011050B0);
  }
  return result;
}

unint64_t sub_10070AC68()
{
  unint64_t result;

  result = qword_1011050B8;
  if (!qword_1011050B8)
  {
    result = swift_getWitnessTable(asc_100E4B658, &type metadata for AirPodsUnpairContext);
    atomic_store(result, (unint64_t *)&qword_1011050B8);
  }
  return result;
}

uint64_t sub_10070AEEC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for PersistentConnectionObserver()
{
  return objc_opt_self(_TtC12searchpartyd28PersistentConnectionObserver);
}

uint64_t sub_10070AF40()
{
  uint64_t My;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  My = type metadata accessor for Feature.FindMy(0);
  v13[3] = My;
  v13[4] = sub_100654A70();
  v1 = sub_100018F08(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v1, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v13);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
  if ((My & 1) != 0)
  {
    v3 = static os_log_type_t.default.getter(v2);
    if (qword_1010E9B50 != -1)
      swift_once(&qword_1010E9B50, sub_100308774);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B6D20, "Persisting connections is disabled when spPlaySoundAll is enabled.", 66, 2, _swiftEmptyArrayStorage);
LABEL_19:
    LOBYTE(v13[0]) = 0;
    return CurrentValueSubject.send(_:)(v13);
  }
  v4 = (uint64_t)AnyCurrentValuePublisher.value.getter(v13, v2);
  if (LOBYTE(v13[0]) == 1 && (v4 = (uint64_t)sub_10070B770(v4), (v4 & 1) != 0))
  {
    v5 = static os_log_type_t.default.getter(v4);
    if (qword_1010E9B50 != -1)
    {
      v11 = v5;
      swift_once(&qword_1010E9B50, sub_100308774);
      v5 = v11;
    }
  }
  else
  {
    v6 = (uint64_t)AnyCurrentValuePublisher.value.getter(v13, v4);
    if (v13[0] != 1 || (v6 = (uint64_t)sub_10070B770(v6), (v6 & 1) == 0))
    {
      v8 = static os_log_type_t.default.getter(v6);
      if (qword_1010E9B50 != -1)
      {
        v10 = v8;
        swift_once(&qword_1010E9B50, sub_100308774);
        v8 = v10;
      }
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B6D20, "This device does not support Persistent Connections.", 52, 2, _swiftEmptyArrayStorage);
      goto LABEL_19;
    }
    v7 = static os_log_type_t.default.getter(v6);
    if (qword_1010E9B50 != -1)
    {
      v12 = v7;
      swift_once(&qword_1010E9B50, sub_100308774);
      v7 = v12;
    }
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B6D20, "This is the only device which supports Persistent Connections.", 62, 2, _swiftEmptyArrayStorage);
  }
  LOBYTE(v13[0]) = 1;
  return CurrentValueSubject.send(_:)(v13);
}

uint64_t sub_10070B19C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v12[0] = AnyCurrentValuePublisher.publisher.getter(a1);
  v2 = swift_allocObject(&unk_10108B8B8, 24, 7);
  swift_weakInit(v2 + 16, v1);
  v3 = sub_10001A9A8(&qword_1011194D0);
  v4 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_10070B768, v2, v3, v4);
  swift_release();
  swift_release();
  swift_beginAccess(v1 + 32, v12, 33, 0);
  v5 = sub_10001A9A8(&qword_1010ECF68);
  v6 = sub_1000193A4(&qword_1010ECF70, &qword_1010ECF68, (const char *)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v1 + 32, v5, v6);
  swift_endAccess(v12);
  v7 = swift_release();
  v12[0] = AnyCurrentValuePublisher.publisher.getter(v7);
  v8 = swift_allocObject(&unk_10108B8B8, 24, 7);
  swift_weakInit(v8 + 16, v1);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FAAC0);
  v10 = sub_1000193A4((unint64_t *)&unk_101107EC0, (uint64_t *)&unk_1010FAAC0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_10070B768, v8, v9, v10);
  swift_release();
  swift_release();
  swift_beginAccess(v1 + 32, v12, 33, 0);
  AnyCancellable.store<A>(in:)(v1 + 32, v5, v6);
  swift_endAccess(v12);
  swift_release();
  return sub_10070AF40();
}

uint64_t sub_10070B394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10070AF40();
    return swift_release();
  }
  return result;
}

Swift::Int sub_10070B3E8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x656E6F687069, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10070B434(uint64_t a1)
{
  return String.hash(into:)(a1, 0x656E6F687069, 0xE600000000000000);
}

Swift::Int sub_10070B448()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x656E6F687069, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10070B490@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D530, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10070B4E0(_QWORD *a1@<X8>)
{
  *a1 = 0x656E6F687069;
  a1[1] = 0xE600000000000000;
}

void sub_10070B4F8(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DB70;
}

uint64_t sub_10070B508()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_release(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10070B524()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PersistentConnectionObserveriOS()
{
  return objc_opt_self(_TtC12searchpartydP33_667BD1C5948B949596FE06CFCE63FD1931PersistentConnectionObserveriOS);
}

uint64_t storeEnumTagSinglePayload for PersistentConnectionObserver.PersistentConnectionPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10070B5D4 + 4 * byte_100E4B935[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10070B608 + 4 * byte_100E4B930[v4]))();
}

uint64_t sub_10070B608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070B610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10070B618);
  return result;
}

uint64_t sub_10070B624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10070B62CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10070B630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10070B638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersistentConnectionObserver.PersistentConnectionPolicy()
{
  return &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy;
}

unint64_t sub_10070B658()
{
  unint64_t result;

  result = qword_1011052B0;
  if (!qword_1011052B0)
  {
    result = swift_getWitnessTable(asc_100E4BA0C, &type metadata for PersistentConnectionObserver.PersistentConnectionPolicy);
    atomic_store(result, (unint64_t *)&qword_1011052B0);
  }
  return result;
}

_QWORD *sub_10070B69C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2[6] = a2;
  v2[4] = _swiftEmptyArrayStorage;
  v2[5] = a1;
  v7 = 1;
  v3 = sub_10001A9A8(&qword_1011052B8);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  swift_retain();
  swift_retain();
  v2[2] = CurrentValueSubject.init(_:)(&v7);
  v4 = swift_retain();
  v5 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v4);
  swift_release();
  v2[3] = v5;
  return v2;
}

uint64_t sub_10070B744()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10070B768(uint64_t a1)
{
  uint64_t v1;

  return sub_10070B394(a1, v1);
}

id sub_10070B770(uint64_t a1)
{
  id result;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  char v6;

  result = (id)MobileGestalt_get_current_device(a1);
  if (result)
  {
    v2 = result;
    v3 = (id)MobileGestalt_copy_productType_obj();

    if (v3)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

    }
    v4 = String.lowercased()();
    swift_bridgeObjectRelease();
    v5 = v4;
    sub_10070B848();
    sub_1000330C8();
    static PartialMatchCase<>.first(containing:)(&v5);
    swift_bridgeObjectRelease();
    return (id)((v6 & 1) == 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10070B848()
{
  unint64_t result;

  result = qword_1011052C0;
  if (!qword_1011052C0)
  {
    result = swift_getWitnessTable(byte_100E4BB40, &type metadata for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1011052C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10070B8CC + 4 * byte_100E4B93A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10070B8EC + 4 * byte_100E4B93F[v4]))();
}

_BYTE *sub_10070B8CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10070B8EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10070B8F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10070B8FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10070B904(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10070B90C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType()
{
  return &type metadata for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType;
}

uint64_t sub_10070B928()
{
  return sub_1000193A4(&qword_1011052C8, &qword_1011052D0, (const char *)&protocol conformance descriptor for [A]);
}

unint64_t sub_10070B958()
{
  unint64_t result;

  result = qword_1011052D8;
  if (!qword_1011052D8)
  {
    result = swift_getWitnessTable(aQ_30, &type metadata for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1011052D8);
  }
  return result;
}

unint64_t sub_10070B9A0()
{
  unint64_t result;

  result = qword_1011052E0;
  if (!qword_1011052E0)
  {
    result = swift_getWitnessTable(a1_25, &type metadata for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1011052E0);
  }
  return result;
}

unint64_t sub_10070B9E8()
{
  unint64_t result;

  result = qword_1011052E8;
  if (!qword_1011052E8)
  {
    result = swift_getWitnessTable(byte_100E4BAA0, &type metadata for PersistentConnectionObserveriOS.PersistentConnectionSupportedDeviceType);
    atomic_store(result, (unint64_t *)&qword_1011052E8);
  }
  return result;
}

uint64_t sub_10070BA2C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7570);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7570);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD00000000000001BLL, 0x8000000100EE2250);
}

uint64_t sub_10070BAAC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t sub_10070BAB8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_10070BAC4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_10070BAD0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

NSString sub_10070BAD8()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1011B7588 = (uint64_t)result;
  return result;
}

uint64_t sub_10070BB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper);
  }
  else
  {
    v2 = sub_10070BB70(v0);
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10070BB70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (qword_1010E9ED0 != -1)
    swift_once(&qword_1010E9ED0, sub_10070BAD8);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(qword_1011B7588);
  v4 = v3;
  v5 = swift_allocObject(&unk_10108BFF0, 24, 7);
  swift_weakInit(v5 + 16, a1);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010A630((uint64_t)sub_100710E00, v5, v2, v4, isUniquelyReferenced_nonNull_native);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010A630((uint64_t)sub_10070BD70, 0, 0xD00000000000002BLL, 0x8000000100EE2340, v7);
  swift_bridgeObjectRelease();
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCurrentLocaleDidChangeNotification);
  v10 = v9;
  v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010A630((uint64_t)sub_10070BD70, 0, v8, v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  return DarwinNotificationHelper.init(notificationHandlers:)(_swiftEmptyDictionarySingleton);
}

uint64_t sub_10070BD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10070C784();
    return swift_release();
  }
  return result;
}

uint64_t sub_10070BD74()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010E9EC8 != -1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7570);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Language change notification received. Exiting at next opportunity.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return xpc_transaction_exit_clean();
}

uint64_t sub_10070BE40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(char *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  unsigned int v45;
  uint64_t (*v46)(char *);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void **aBlock;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  v55 = v2;
  __chkstk_darwin(v1);
  v53 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS.QoSClass(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  __chkstk_darwin(v9);
  v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v45 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v46 = *(uint64_t (**)(char *))(v12 + 104);
  v15 = v46(v14);
  static DispatchQoS.unspecified.getter(v15);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v43 = v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v6, v16);
  v19 = v44;
  v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100EE2370, v44, v8, v14, 0);
  v21 = v46;
  v22 = v47;
  *(_QWORD *)(v47 + 24) = v20;
  v23 = ((uint64_t (*)(char *, _QWORD, uint64_t))v21)(v14, v45, v11);
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v17, v18, v6, v43);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ELL, 0x8000000100EE23B0, v19, v8, v14, 0);
  *(_QWORD *)(v22 + 32) = v24;
  PressuredExitTransactionManager.init()(v24);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) = 0;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 0;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_macConfigUpdateInProgress) = 0;
  *(_QWORD *)(v22 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper) = 0;
  sub_10070BB0C();
  swift_release();
  v25 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v26 = swift_allocObject(&unk_10108BFF0, 24, 7);
  swift_weakInit(v26 + 16, v22);
  v61 = sub_100710E00;
  v62 = v26;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_100B354E4;
  v60 = &unk_10108C4B8;
  v27 = _Block_copy(&aBlock);
  swift_release();
  v28 = objc_msgSend(v25, "addObserverForName:object:queue:usingBlock:", NSCurrentLocaleDidChangeNotification, 0, 0, v27);
  _Block_release(v27);
  swift_unknownObjectRelease(v28);

  v30 = v48;
  v29 = v49;
  v31 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, enum case for DispatchQoS.QoSClass.default(_:), v50);
  v32 = (void *)static OS_dispatch_queue.global(qos:)(v30);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
  v61 = sub_100710F68;
  v62 = v22;
  aBlock = _NSConcreteStackBlock;
  v58 = 1107296256;
  v59 = sub_100016FB8;
  v60 = &unk_10108C4E0;
  v33 = _Block_copy(&aBlock);
  v34 = swift_retain();
  static DispatchQoS.unspecified.getter(v34);
  v56 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v53;
  v39 = v36;
  v40 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v39, v37, v54, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v38, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v52);
  swift_release();
  return v22;
}

uint64_t sub_10070C3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v0 = type metadata accessor for Locale(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v38 - v5;
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "stringForKey:", v8);

  if (v9)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = static Locale.current.getter(v10);
  v15 = Locale.languageCode.getter(v14);
  v17 = v16;
  v18 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  result = v18(v6, v0);
  if (v17)
  {
    if (v13)
    {
      if (v15 == v11 && v17 == v13)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v11, v13, 0);
      swift_bridgeObjectRelease();
      if ((v21 & 1) != 0)
        return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else if (!v13)
  {
    return result;
  }
  if (qword_1010E9EC8 != -1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v22 = type metadata accessor for Logger(0);
  sub_10001A9E8(v22, (uint64_t)qword_1011B7570);
  swift_bridgeObjectRetain(v13);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v40 = v27;
    v43 = v27;
    *(_DWORD *)v26 = 136446466;
    v38 = v26 + 4;
    v28 = static Locale.current.getter(v27);
    v29 = Locale.languageCode.getter(v28);
    v39 = v11;
    v31 = v30;
    v18(v4, v0);
    v41 = v29;
    v42 = v31;
    v32 = sub_10001A9A8(&qword_1010F6350);
    v33 = String.init<A>(describing:)(&v41, v32);
    v41 = sub_100016940(v33, v34, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v38, v26 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2082;
    v41 = v39;
    v42 = v13;
    swift_bridgeObjectRetain(v13);
    v35 = String.init<A>(describing:)(&v41, v32);
    v41 = sub_100016940(v35, v36, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(v13, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Current locale (%{public}s) does not match last one we know (%{public}s). Updating configuration.", (uint8_t *)v26, 0x16u);
    v37 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
  return sub_10070C784();
}

uint64_t sub_10070C784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[16];

  v1 = v0;
  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  v8 = &v25[-v7];
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(void **)(v1 + 24);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.notOnQueue(_:), v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  static SystemInfo.lockState.getter(v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v17 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v6, v2, v17);
  v19 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v19(v6, v2);
  v20 = ((uint64_t (*)(_BYTE *, uint64_t))v19)(v8, v2);
  if ((v18 & 1) != 0)
  {
    v1 = static os_log_type_t.default.getter(v20);
    if (qword_1010EA228 == -1)
      return os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7CF8, "updateConfiguration aborted because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
LABEL_11:
    swift_once(&qword_1010EA228, sub_100B5D7D4);
    return os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7CF8, "updateConfiguration aborted because device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
  }
  v22 = OS_dispatch_queue.sync<A>(execute:)(sub_100710570, v1, &type metadata for Bool);
  if (v25[15] == 1)
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.configuration", 43, 2, sub_1007105B4, v1, &type metadata for () + 1);
    v23 = sub_1007105CC();
    *(_QWORD *)&v25[-32] = __chkstk_darwin(v23);
    *(_QWORD *)&v25[-24] = v1;
    *(_QWORD *)&v25[-16] = v14;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.rolesConfiguration", 48, 2, sub_100710880, &v25[-48], &type metadata for () + 1);
    return swift_release();
  }
  else
  {
    v24 = static os_log_type_t.default.getter(v22);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    return os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7CF8, "updateConfiguration aborted because we already started updating.", 64, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10070CAA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  id v10;

  v7 = (_QWORD *)swift_allocObject(&unk_10108C090, 40, 7);
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  v8 = a4;
  Future.addFailure(block:)(sub_1007108A0, v7);
  swift_release();
  swift_release();
  v9 = (_QWORD *)swift_allocObject(&unk_10108C0B8, 40, 7);
  v9[2] = a1;
  v9[3] = a3;
  v9[4] = v8;
  swift_retain();
  swift_retain();
  v10 = v8;
  Future.addSuccess(block:)(sub_1007108B0, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_10070CB88(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[4];
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[6];

  v36 = a4;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Transaction.capture()();
  v32 = static os_log_type_t.error.getter(v12);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  aBlock[0] = *a3;
  v15 = sub_10001A9A8(&qword_1011054C8);
  v16 = String.init<A>(describing:)(aBlock, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v21 = String.init<A>(describing:)(aBlock, v20);
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 72) = v21;
  *(_QWORD *)(v14 + 80) = v22;
  v23 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v24 = (void *)static OS_os_log.default.getter(v23);
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v24, "%@: Error getting roles from server. Error - %@", 47, 2, v14);
  swift_bridgeObjectRelease();

  aBlock[4] = sub_100710FBC;
  aBlock[5] = a3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108C198;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v37 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v25);
  _Block_release(v25);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

uint64_t sub_10070CE60(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  NSString v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t aBlock[6];

  v47 = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v48 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Locale(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*a1;
  Transaction.capture()();
  v16 = static Locale.current.getter(v15);
  v17 = Locale.languageCode.getter(v16);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v19)
    v20 = v17;
  else
    v20 = 0x6E776F6E6B6E75;
  if (v19)
    v21 = v19;
  else
    v21 = 0xE700000000000000;
  if (qword_1010E9EC8 != -1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v22 = type metadata accessor for Logger(0);
  sub_10001A9E8(v22, (uint64_t)qword_1011B7570);
  swift_bridgeObjectRetain_n(v14, 2);
  swift_bridgeObjectRetain_n(v21, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v27 = swift_slowAlloc(64, -1);
    v45 = v7;
    v28 = v27;
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136446466;
    v46 = v5;
    swift_bridgeObjectRetain(v21);
    v51 = (_QWORD *)sub_100016940(v20, v21, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v21, 3);
    *(_WORD *)(v26 + 12) = 2080;
    v51 = v14;
    swift_bridgeObjectRetain(v14);
    v29 = String.init<A>(describing:)(&v51, &type metadata for RolesResponse);
    v44 = v20;
    v51 = (_QWORD *)sub_100016940(v29, v30, aBlock);
    v5 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, aBlock, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received [%{public}s] roles from server %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    v31 = v28;
    v7 = v45;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(v21, 2);
  }
  swift_bridgeObjectRetain(v14);
  v32 = v47;
  sub_10070FE10(v33, 2, v47);
  swift_bridgeObjectRelease();
  v34 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "setObject:forKey:", v35, v36);

  aBlock[4] = (uint64_t)sub_1007108BC;
  aBlock[5] = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_10108C0D0;
  v37 = _Block_copy(aBlock);
  v38 = swift_retain();
  v39 = v48;
  static DispatchQoS.unspecified.getter(v38);
  v51 = _swiftEmptyArrayStorage;
  v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v42 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v41, v42, v4, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v7, v37);
  _Block_release(v37);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
  return swift_release();
}

uint64_t sub_10070D350(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;

  v4 = *(void **)(a2 + 24);
  sub_100710A7C();
  v5 = (_QWORD *)swift_allocObject(&unk_10108C270, 40, 7);
  v5[2] = a1;
  v5[3] = v4;
  v5[4] = a2;
  swift_retain();
  v6 = v4;
  swift_retain();
  Future.addFailure(block:)(sub_100710D64, v5);
  swift_release();
  swift_release();
  v7 = (_QWORD *)swift_allocObject(&unk_10108C298, 40, 7);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = v6;
  swift_retain();
  v8 = v6;
  swift_retain();
  Future.addSuccess(block:)(sub_100710DA8, v7);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10070D448(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  __chkstk_darwin(v10);
  v34 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010E9EC8 != -1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7570);
  swift_errorRetain(a1);
  v13 = swift_errorRetain(a1);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31 = a4;
    v18 = v17;
    v37 = a1;
    aBlock[0] = v17;
    v32 = v9;
    v33 = v7;
    *(_DWORD *)v16 = 136446210;
    swift_errorRetain(a1);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v37, v19);
    v37 = (_QWORD *)sub_100016940(v20, v21, aBlock);
    v9 = v32;
    v7 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to update server config due to %{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v22 = v18;
    a4 = v31;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  aBlock[4] = (uint64_t)sub_100710FC0;
  aBlock[5] = a4;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_10108C328;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain();
  v25 = v34;
  static DispatchQoS.unspecified.getter(v24);
  v37 = _swiftEmptyArrayStorage;
  v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v25, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v36);
  return swift_release();
}

uint64_t sub_10070D7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v46 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v43 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ConfigurationResponse(0);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v38 - v16;
  Transaction.capture()();
  if (qword_1010E9EC8 != -1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7570);
  v19 = sub_10005972C(a1, (uint64_t)v17, type metadata accessor for ConfigurationResponse);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v40 = a3;
    v22 = swift_slowAlloc(12, -1);
    v39 = a1;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v41 = v8;
    v25 = v24;
    aBlock[0] = v24;
    v42 = a4;
    *(_DWORD *)v23 = 136315138;
    sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for ConfigurationResponse);
    v26 = String.init<A>(describing:)(v15, v12);
    v47 = (_QWORD *)sub_100016940(v26, v27, aBlock);
    a3 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, aBlock, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v17, type metadata accessor for ConfigurationResponse);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received server config %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v28 = v25;
    v8 = v41;
    swift_slowDealloc(v28, -1, -1);
    v29 = v23;
    a1 = v39;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for ConfigurationResponse);
  }

  sub_100710084(a1, 1, a3);
  aBlock[4] = (uint64_t)sub_100710DB4;
  aBlock[5] = a3;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_10108C2B0;
  v30 = _Block_copy(aBlock);
  v31 = swift_retain();
  v32 = v43;
  static DispatchQoS.unspecified.getter(v31);
  v47 = _swiftEmptyArrayStorage;
  v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v36 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v35, v7, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v7);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v45);
  return swift_release();
}

uint64_t sub_10070DBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v5 = sub_10001A9A8(&qword_1010ED378);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100030784(a1, (uint64_t)aBlock);
  v8 = swift_allocObject(&unk_10108BFF0, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v9 = sub_10001A9A8(&qword_1011054C0);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_1007104F4, v8, v9);
  v10 = *(NSObject **)(v2 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_10108C018, v12 + v7, v11 | 7);
  *(_QWORD *)(v13 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v14 = swift_allocObject(&unk_10108C040, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100710510;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10108C058;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 120, 196, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10070DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10070DF84(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10070DE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t *v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _BYTE v15[24];

  v4 = sub_10001A9A8(&qword_1010ED378);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v15, 33, 0);
  v9 = *(_QWORD *)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1007CA3B4(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1007CA3B4(v11 > 1, v12 + 1, 1, v9);
    *v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess(v15);
}

uint64_t sub_10070DF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = sub_10001A9A8(&qword_1010ED378);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = *(NSObject **)(v1 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_10108BF78, v8 + v5, v7 | 7);
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_10108BFA0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1007104BC;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10108BFB8;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 120, 204, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10070E134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];

  swift_beginAccess(a1 + 16, v7, 1, 0);
  v4 = *(_QWORD *)(a1 + 16);
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(a1 + 16) = sub_10008BE4C((uint64_t (*)(char *))sub_1007104D8, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_10070E1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001A9A8(&qword_1010ED378);
  v5 = sub_1000193A4(&qword_1011054B8, &qword_1010ED378, (const char *)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_10070E234(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD aBlock[6];
  __int128 v70;
  char v71[8];
  char v72[8];

  v58 = a3;
  v59 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v57 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchQoS(0);
  v55 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v64 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for DispatchQoS.QoSClass(0);
  v62 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v61 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_10001A9A8(&qword_1010ED378);
  v63 = *(_QWORD *)(v67 - 8);
  v9 = *(_QWORD *)(v63 + 64);
  v10 = __chkstk_darwin(v67);
  v60 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v66 = (char *)v42 - v11;
  a1 += 16;
  swift_beginAccess(a1, v72, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v13 = result;
    v53 = v6;
    v14 = v4;
    swift_beginAccess(result + 16, v71, 0, 0);
    v15 = *(_QWORD *)(v13 + 16);
    swift_bridgeObjectRetain(v15);
    swift_release();
    if (*(_QWORD *)(v15 + 16))
    {
      v65 = *(_QWORD *)(v15 + 16);
      v52 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v16 = *(unsigned __int8 *)(v63 + 80);
      v42[1] = v15;
      v17 = (char *)(v15 + ((v16 + 32) & ~v16));
      v51 = *(_QWORD *)(v63 + 72);
      v49 = v16 | 7;
      v48 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      v50 = (v16 + 16) & ~v16;
      v47 = enum case for DispatchQoS.QoSClass.default(_:);
      v18 = (v9 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      v45 = v18 + 40;
      v46 = v18;
      v44 = v18 + 41;
      v43 = v14;
      v19 = v63;
      v20 = v67;
      do
      {
        v21 = v66;
        v22 = v48;
        v48(v66, v17, v20);
        v23 = v62;
        v24 = v61;
        v25 = v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v61, v47, v54);
        v26 = static OS_dispatch_queue.global(qos:)(v24);
        (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
        v27 = v60;
        v22(v60, v21, v67);
        sub_100030784(v59, (uint64_t)&v70);
        v28 = swift_allocObject(&unk_10108C158, v44, v49);
        (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v28 + v50, v27, v67);
        sub_10000F9FC(&v70, v28 + v46);
        *(_BYTE *)(v28 + v45) = v58;
        aBlock[4] = sub_100710958;
        aBlock[5] = v28;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_10108C170;
        v29 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v29);
        v68 = _swiftEmptyArrayStorage;
        v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v33 = v53;
        v34 = v43;
        v35 = v30;
        v36 = v56;
        v37 = v64;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v31, v32, v43, v35);
        v38 = (void *)v26;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v33, v29);
        v20 = v67;
        v39 = v29;
        v40 = v57;
        v41 = v55;
        v19 = v63;
        _Block_release(v39);

        (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v34);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v37, v36);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v66, v20);
        swift_release();
        v17 += v51;
        --v65;
      }
      while (v65);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10070E7A8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v5 = sub_10001A9A8(&qword_1010ED378);
  Subscription.subscriber.getter(v11, v5);
  v6 = *sub_10001AA44(v11, v11[3]);
  v7 = a2[3];
  v8 = a2[4];
  v9 = sub_10001AA44(a2, v7);
  sub_10009F640((uint64_t)v9, a3, 1, 0, 0, v6, v7, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

uint64_t sub_10070E840(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __objc2_ivar_list **p_ivars;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55[2];

  v52 = a2;
  v3 = type metadata accessor for ConfigurationResponse(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = a1;
  v14 = FMNServerInteractionController.FMNResponseFields.data.getter(v11);
  v16 = v15;
  static String.Encoding.utf8.getter(v14);
  v17 = String.init(data:encoding:)(v14, v16, v13);
  v19 = v18;
  sub_10001BC14(v14, v16);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (v19)
  {
    if (qword_1010E9EC8 != -1)
      swift_once(&qword_1010E9EC8, sub_10070BA2C);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7570);
    swift_bridgeObjectRetain(v19);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v50 = v7;
      v25 = swift_slowAlloc(12, -1);
      v51 = v3;
      v26 = (uint8_t *)v25;
      v27 = swift_slowAlloc(32, -1);
      v49 = v5;
      v28 = v27;
      v55[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(v19);
      v54 = sub_100016940(v17, v19, v55);
      v7 = v50;
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "serverConfiguration raw data: %s", v26, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v29 = v28;
      v5 = v49;
      swift_slowDealloc(v29, -1, -1);
      v30 = v26;
      v3 = v51;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
    }
  }
  if (p_ivars[473] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9EC8, sub_10070BA2C);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B7570);
  v32 = v9;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v53, v6);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v55[0] = v37;
    v50 = v7;
    v51 = v3;
    *(_DWORD *)v36 = 136315138;
    v38 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v6, v38);
    v54 = sub_100016940(v39, v40, v55);
    v3 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v6);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "serverConfiguration: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  v41 = type metadata accessor for JSONDecoder(0);
  v42 = swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v43 = JSONDecoder.init()(v42);
  v44 = FMNServerInteractionController.FMNResponseFields.data.getter(v43);
  v46 = v45;
  v47 = sub_100006204(&qword_1011054F0, type metadata accessor for ConfigurationResponse, (uint64_t)&unk_100E4E198);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v3, v44, v46, v3, v47);
  sub_10001BC14(v44, v46);
  Future.finish(result:)(v5);
  swift_release();
  return sub_1000126B0((uint64_t)v5, type metadata accessor for ConfigurationResponse);
}

uint64_t sub_10070EE24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v2 = static os_log_type_t.error.getter(a1);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v12 = a1;
  swift_errorRetain(a1);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v6 = String.init<A>(describing:)(&v12, v5);
  v8 = v7;
  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10001AA00();
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  v9 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v10 = (void *)static OS_os_log.default.getter(v9);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v10, "Request to get roles from server failed with error - %@", 55, 2, v4);
  swift_bridgeObjectRelease();

  return Future.finish(error:)(a1);
}

uint64_t sub_10070EF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for JSONDecoder(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = JSONDecoder.init()(v1);
  v3 = FMNServerInteractionController.FMNResponseFields.data.getter(v2);
  v5 = v4;
  v6 = sub_1007109B0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for RolesResponse, v3, v5, &type metadata for RolesResponse, v6);
  sub_10001BC14(v3, v5);
  Future.finish(result:)(&v8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10070F084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider____lazy_storage___darwinHelper));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10070F0FC()
{
  return type metadata accessor for ServerConfigurationProvider(0);
}

uint64_t type metadata accessor for ServerConfigurationProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_101105338;
  if (!qword_101105338)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServerConfigurationProvider);
  return result;
}

uint64_t sub_10070F140(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for PressuredExitTransactionManager(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100E4BBB0;
    v4[5] = &unk_100E4BBB0;
    v4[6] = &unk_100E4BBB0;
    v4[7] = &unk_100E4BBC8;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t (*sub_10070F1E4(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 16, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_10070F224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10070DBC0(a1, a2);
}

uint64_t sub_10070F244(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1011054B0, type metadata accessor for ServerConfigurationProvider, (uint64_t)&unk_100E4BBE0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10070F280(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[5];
  __int128 v27[2];
  _QWORD v28[5];

  v8 = *a4;
  v9 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AirPodsLostModeRequest;
  v12 = sub_100710EA8();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  v13 = *(void **)((char *)a4 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v13, "lock");
  *((_BYTE *)a4 + qword_1010F7CE8) = 0;
  objc_msgSend(v13, "unlock");
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v15 + 16, a4);
  v16 = (_QWORD *)swift_allocObject(&unk_10108C450, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_100691AC0((uint64_t)v11, (uint64_t)&unk_101105518, (uint64_t)v16);
  swift_release();
  v17 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = Future.init()();
  v19 = (uint64_t)a4 + qword_1010F7CD0;
  v20 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v20 + 16, a4);
  sub_100030784(v19, (uint64_t)v27);
  v21 = swift_allocObject(&unk_10108C478, 72, 7);
  *(_QWORD *)(v21 + 16) = v18;
  sub_10000F9FC(v27, v21 + 24);
  *(_QWORD *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_10033C338((uint64_t)v28, (uint64_t)v26);
  v22 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v22 + 16, a4);
  v23 = swift_allocObject(&unk_10108C4A0, 56, 7);
  *(_QWORD *)(v23 + 16) = sub_100710FB8;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v22;
  *(_QWORD *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v19, v26, 0x6170686372616573, 0xEC00000064797472, 0, sub_100710A78, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_10070F564(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[5];
  __int128 v27[2];
  _QWORD v28[5];

  v8 = *a4;
  v9 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for AccessoryLostModeRequest;
  v12 = sub_100710E58();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  v13 = *(void **)((char *)a4 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v13, "lock");
  *((_BYTE *)a4 + qword_1010F7CE8) = 0;
  objc_msgSend(v13, "unlock");
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v15 + 16, a4);
  v16 = (_QWORD *)swift_allocObject(&unk_10108C3D8, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_100691AC0((uint64_t)v11, (uint64_t)&unk_1010F83D8, (uint64_t)v16);
  swift_release();
  v17 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = Future.init()();
  v19 = (uint64_t)a4 + qword_1010F7CD0;
  v20 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v20 + 16, a4);
  sub_100030784(v19, (uint64_t)v27);
  v21 = swift_allocObject(&unk_10108C400, 72, 7);
  *(_QWORD *)(v21 + 16) = v18;
  sub_10000F9FC(v27, v21 + 24);
  *(_QWORD *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_10033C338((uint64_t)v28, (uint64_t)v26);
  v22 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v22 + 16, a4);
  v23 = swift_allocObject(&unk_10108C428, 56, 7);
  *(_QWORD *)(v23 + 16) = sub_100710FB8;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v22;
  *(_QWORD *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v19, v26, 0x6170686372616573, 0xEC00000064797472, 0, sub_100710A78, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_10070F848(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[5];
  __int128 v27[2];
  _QWORD v28[5];

  v8 = *a4;
  v9 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for LostModeRequest;
  v12 = sub_100710E08();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  v13 = *(void **)((char *)a4 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v13, "lock");
  *((_BYTE *)a4 + qword_1010F7CE8) = 0;
  objc_msgSend(v13, "unlock");
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v15 + 16, a4);
  v16 = (_QWORD *)swift_allocObject(&unk_10108C360, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_100691AC0((uint64_t)v11, (uint64_t)&unk_101105500, (uint64_t)v16);
  swift_release();
  v17 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = Future.init()();
  v19 = (uint64_t)a4 + qword_1010F7CD0;
  v20 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v20 + 16, a4);
  sub_100030784(v19, (uint64_t)v27);
  v21 = swift_allocObject(&unk_10108C388, 72, 7);
  *(_QWORD *)(v21 + 16) = v18;
  sub_10000F9FC(v27, v21 + 24);
  *(_QWORD *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_10033C338((uint64_t)v28, (uint64_t)v26);
  v22 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v22 + 16, a4);
  v23 = swift_allocObject(&unk_10108C3B0, 56, 7);
  *(_QWORD *)(v23 + 16) = sub_100710FB8;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v22;
  *(_QWORD *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v19, v26, 0x6170686372616573, 0xEC00000064797472, 0, sub_100710A78, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_10070FB2C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[5];
  __int128 v27[2];
  _QWORD v28[5];

  v8 = *a4;
  v9 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = &type metadata for ConfigurationRequest;
  v12 = sub_1007109F4();
  v28[0] = a1;
  v28[1] = a2;
  v28[4] = v12;
  v28[2] = a3;
  v13 = *(void **)((char *)a4 + qword_1010F7CE0);
  swift_bridgeObjectRetain(a1);
  sub_10001BBBC(a2, a3);
  objc_msgSend(v13, "lock");
  *((_BYTE *)a4 + qword_1010F7CE8) = 0;
  objc_msgSend(v13, "unlock");
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v15 + 16, a4);
  v16 = (_QWORD *)swift_allocObject(&unk_10108C1F8, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v15;
  sub_100691AC0((uint64_t)v11, (uint64_t)&unk_1010F7E48, (uint64_t)v16);
  swift_release();
  v17 = sub_10001A9A8(&qword_1010F8328);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v18 = Future.init()();
  v19 = (uint64_t)a4 + qword_1010F7CD0;
  v20 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v20 + 16, a4);
  sub_100030784(v19, (uint64_t)v27);
  v21 = swift_allocObject(&unk_10108C220, 72, 7);
  *(_QWORD *)(v21 + 16) = v18;
  sub_10000F9FC(v27, v21 + 24);
  *(_QWORD *)(v21 + 64) = v20;
  swift_retain();
  swift_retain();
  sub_10033C338((uint64_t)v28, (uint64_t)v26);
  v22 = swift_allocObject(&unk_10108C1D0, 24, 7);
  swift_weakInit(v22 + 16, a4);
  v23 = swift_allocObject(&unk_10108C248, 56, 7);
  *(_QWORD *)(v23 + 16) = sub_100710A64;
  *(_QWORD *)(v23 + 24) = v21;
  *(_BYTE *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v22;
  *(_QWORD *)(v23 + 48) = v8;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)(v19, v26, 0x6170686372616573, 0xEC00000064797472, 0, sub_100710A78, v23);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return v18;
}

uint64_t sub_10070FE10(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];
  __int128 v25[2];
  _QWORD v26[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for RolesResponse;
  v26[4] = &off_10107AC68;
  v26[0] = a1;
  v21 = *(_QWORD *)(a3 + 32);
  v13 = swift_allocObject(&unk_10108BFF0, 24, 7);
  swift_weakInit(v13 + 16, a3);
  sub_100030784((uint64_t)v26, (uint64_t)v25);
  v14 = swift_allocObject(&unk_10108C108, 65, 7);
  *(_QWORD *)(v14 + 16) = v13;
  sub_10000F9FC(v25, v14 + 24);
  *(_BYTE *)(v14 + 64) = a2;
  aBlock[4] = sub_1007108D0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108C120;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_release();
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

uint64_t sub_100710084(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];
  __int128 v25[2];
  _QWORD v26[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = type metadata accessor for ConfigurationResponse(0);
  v26[4] = &off_10108BA00;
  v12 = sub_100018F08(v26);
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for ConfigurationResponse);
  v13 = swift_allocObject(&unk_10108BFF0, 24, 7);
  swift_weakInit(v13 + 16, a3);
  sub_100030784((uint64_t)v26, (uint64_t)v25);
  v14 = swift_allocObject(&unk_10108C2E8, 65, 7);
  *(_QWORD *)(v14 + 16) = v13;
  sub_10000F9FC(v25, v14 + 24);
  *(_BYTE *)(v14 + 64) = a2;
  aBlock[4] = sub_100710F70;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108C300;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v21);
  swift_release();
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

void sub_100710308(uint64_t a1)
{
  uint64_t v2;
  __CFNotificationCenter *v3;
  __CFNotificationCenter *v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v2 = sub_100C1ADA8(v11);
  swift_bridgeObjectRelease();
  if (v2 != a1)
  {
    v3 = CFNotificationCenterGetDarwinNotifyCenter();
    if (v3)
    {
      v4 = v3;
      if (qword_1010E9ED0 != -1)
        swift_once(&qword_1010E9ED0, sub_10070BAD8);
      v5 = (const __CFString *)qword_1011B7588;
      v6 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v7 = (void *)static OS_os_log.default.getter(v6);
      v8 = static os_log_type_t.default.getter(v7);
      os_log(_:dso:log:type:_:)("Posting com.apple.icloud.searchpartyd.fetchServerConfiguration Darwin notification", 82, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

      CFNotificationCenterPostNotification(v4, v5, 0, 0, 1u);
    }
    else
    {
      v9 = static os_log_type_t.error.getter(0);
      v10 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v4 = (__CFNotificationCenter *)static OS_os_log.default.getter(v10);
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v4, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);
    }

  }
}

uint64_t sub_1007104BC()
{
  return sub_10071051C(sub_10070E134);
}

uint64_t sub_1007104C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_1007104D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10070E1B0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1007104F4(uint64_t a1)
{
  uint64_t v1;

  return sub_10070DDBC(a1, v1);
}

uint64_t sub_100710510()
{
  return sub_10071051C(sub_10070DE3C);
}

uint64_t sub_10071051C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED378) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100710560()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100710570(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) & 1) != 0)
  {
    *a1 = 0;
  }
  else if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) & 1) != 0)
  {
    *a1 = 0;
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 1;
    *(_BYTE *)(v1 + v2) = 1;
    *a1 = 1;
  }
}

uint64_t sub_1007105B4(uint64_t a1)
{
  uint64_t v1;

  return sub_10070D350(a1, v1);
}

uint64_t sub_1007105CC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FMNAccountType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoleCategoriesEndpoint(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = sub_10001A9A8(&qword_1011054D0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = Future.init()();
  v15 = enum case for FMNAccountType.searchParty(_:);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v16(v6, enum case for FMNAccountType.searchParty(_:), v3);
  v17 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v17, 56, 7);
  *(_QWORD *)v12 = sub_100C511C4((uint64_t)v6);
  v16(&v12[*(int *)(v7 + 20)], v15, v3);
  v18 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v2, 1, 1, v19);
  v20 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v2);
  v21 = type metadata accessor for ServerInteractionController(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for RoleCategoriesEndpoint);
  v23 = (_QWORD *)sub_10041D97C((uint64_t)v10, v20, v22);
  sub_1000126B0((uint64_t)v12, type metadata accessor for RoleCategoriesEndpoint);
  sub_100DFEA64();
  v25 = v24;
  v27 = v26;
  sub_10070FB2C(v28, v24, v26, v23);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v25, v27);
  swift_retain();
  Future.addFailure(block:)(sub_1007109A0, v14);
  swift_release();
  swift_release();
  swift_retain();
  Future.addSuccess(block:)(sub_1007109A8, v14);
  swift_release();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_100710880(uint64_t a1)
{
  uint64_t v1;

  return sub_10070CAA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1007108A0(uint64_t a1)
{
  uint64_t v1;

  return sub_10070CB88(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1007108B0(_QWORD *a1)
{
  uint64_t v1;

  return sub_10070CE60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1007108BC()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_rolesUpdateInProgress) = 0;
}

uint64_t sub_1007108D0()
{
  uint64_t v0;

  return sub_10070E234(*(_QWORD *)(v0 + 16), v0 + 24, *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1007108E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010ED378);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 41, v5);
}

uint64_t sub_100710958()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED378) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10070E7A8(v0 + v2, (_QWORD *)v3, *(unsigned __int8 *)(v3 + 40));
}

uint64_t sub_1007109A0(uint64_t a1)
{
  return sub_10070EE24(a1);
}

uint64_t sub_1007109A8()
{
  return sub_10070EF34();
}

unint64_t sub_1007109B0()
{
  unint64_t result;

  result = qword_1011054D8;
  if (!qword_1011054D8)
  {
    result = swift_getWitnessTable("ݯ#", &type metadata for RolesResponse);
    atomic_store(result, (unint64_t *)&qword_1011054D8);
  }
  return result;
}

unint64_t sub_1007109F4()
{
  unint64_t result;

  result = qword_1011054E0;
  if (!qword_1011054E0)
  {
    result = swift_getWitnessTable(byte_100E72AB8, &type metadata for ConfigurationRequest);
    atomic_store(result, (unint64_t *)&qword_1011054E0);
  }
  return result;
}

uint64_t sub_100710A38()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100710A64(uint64_t a1)
{
  uint64_t v1;

  return sub_10033A474(a1, *(_QWORD *)(v1 + 16), v1 + 24, *(_QWORD *)(v1 + 64));
}

uint64_t sub_100710A7C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FMNAccountType(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ConfigurationEndpoint(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v30 - v11;
  v13 = sub_10001A9A8(&qword_1011054E8);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = Future.init()();
  v15 = enum case for FMNAccountType.searchParty(_:);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v16(v6, enum case for FMNAccountType.searchParty(_:), v3);
  v17 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v17, 56, 7);
  *(_QWORD *)v12 = sub_100C511C4((uint64_t)v6);
  v16(&v12[*(int *)(v7 + 20)], v15, v3);
  v18 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v2, 1, 1, v19);
  v20 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v2);
  v21 = type metadata accessor for ServerInteractionController(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for ConfigurationEndpoint);
  v23 = (_QWORD *)sub_10041D998((uint64_t)v10, v20, v22);
  sub_1000126B0((uint64_t)v12, type metadata accessor for ConfigurationEndpoint);
  sub_100DFEA64();
  v25 = v24;
  v27 = v26;
  sub_10070FB2C(v28, v24, v26, v23);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v25, v27);
  swift_retain();
  Future.addFailure(block:)(j___s8SPShared6FutureC6finish5errorSbs5Error_p_tF, v14);
  swift_release();
  swift_release();
  swift_retain();
  Future.addSuccess(block:)(sub_100710DF8, v14);
  swift_release();
  swift_release();
  swift_release();
  return v14;
}

uint64_t sub_100710D30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100710D64(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10070D448(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100710D74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100710DA8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10070D7C8(a1, v1[2], v1[3], v1[4]);
}

void sub_100710DB4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd27ServerConfigurationProvider_configurationUpdateInProgress) = 0;
}

uint64_t sub_100710DC8()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_100710DF8(uint64_t a1)
{
  uint64_t v1;

  return sub_10070E840(a1, v1);
}

uint64_t sub_100710E00(uint64_t a1)
{
  uint64_t v1;

  return sub_10070BD1C(a1, v1);
}

unint64_t sub_100710E08()
{
  unint64_t result;

  result = qword_1011054F8;
  if (!qword_1011054F8)
  {
    result = swift_getWitnessTable(byte_100E5FB88, &type metadata for LostModeRequest);
    atomic_store(result, (unint64_t *)&qword_1011054F8);
  }
  return result;
}

unint64_t sub_100710E58()
{
  unint64_t result;

  result = qword_101105508;
  if (!qword_101105508)
  {
    result = swift_getWitnessTable(asc_100E60E84, &type metadata for AccessoryLostModeRequest);
    atomic_store(result, (unint64_t *)&qword_101105508);
  }
  return result;
}

unint64_t sub_100710EA8()
{
  unint64_t result;

  result = qword_101105510;
  if (!qword_101105510)
  {
    result = swift_getWitnessTable(a1_26, &type metadata for AirPodsLostModeRequest);
    atomic_store(result, (unint64_t *)&qword_101105510);
  }
  return result;
}

uint64_t sub_100710EF4()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100710F2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100710F58(uint64_t a1)
{
  uint64_t v1;

  return sub_10033A034(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100710F68()
{
  return sub_10070C3CC();
}

uint64_t sub_100710FC4(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_100E4BCA0;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 224);
}

uint64_t sub_100711020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(void);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t);
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  void (*v80)(void);
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;

  v91 = a1;
  v88 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v86 = *(_QWORD *)(v88 - 8);
  v2 = __chkstk_darwin(v88);
  v83 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v85 = (uint64_t)&v73 - v4;
  v5 = sub_10001A9A8(&qword_1010FB1F0);
  v6 = __chkstk_darwin(v5);
  v84 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v87 = (uint64_t)&v73 - v8;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v9);
  v92 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v82 = *(void (**)(char *, uint64_t))(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v78 = (uint64_t)&v73 - v15;
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v89 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v73 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v73 - v23;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v77 = (uint64_t)&v73 - v29;
  v76 = (char *)sub_100CA8018((uint64_t)&off_101048170);
  v90 = *(_QWORD *)(v1 + 160);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v30 = sub_10001A9E8(v16, (uint64_t)qword_1011B7B10);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v31(v24, v30, v16);
  v31(v22, (uint64_t)v24, v16);
  v73 = &v14[*(int *)(v11 + 40)];
  v32 = (uint64_t)v73;
  v33 = (uint64_t)v14;
  v34 = type metadata accessor for DirectorySequence(0);
  v35 = *(_QWORD *)(v34 - 8);
  v81 = v17;
  v36 = *(void (**)(void))(v35 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v36)(v32, 1, 1, v34);
  v31((char *)v33, (uint64_t)v22, v16);
  v37 = *(int *)(v11 + 36);
  v74 = v11;
  v75 = v31;
  v38 = v89;
  *(_QWORD *)(v33 + v37) = v90;
  v31(v38, (uint64_t)v22, v16);
  swift_retain();
  v39 = v38;
  v40 = v24;
  v41 = v92;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v39, 0, 0);
  v42 = *(void (**)(char *, uint64_t))(v81 + 8);
  v79 = v22;
  v42(v22, v16);
  v80 = v36;
  v81 = v34;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v36)(v41, 0, 1, v34);
  v43 = (uint64_t)v41;
  v44 = v40;
  sub_10000C778(v43, (uint64_t)v73);
  v45 = v78;
  sub_100005CF0(v33, v78, (uint64_t *)&unk_1011115B0);
  v46 = (void (*)(char *, uint64_t, uint64_t, uint64_t))*((_QWORD *)v82 + 7);
  v47 = v74;
  v46(v28, 1, 1, v74);
  sub_100004048((uint64_t)v28, (uint64_t *)&unk_1010F77C0);
  sub_100005CF0(v45, (uint64_t)v28, (uint64_t *)&unk_1011115B0);
  v46(v28, 0, 1, v47);
  sub_100005CF0((uint64_t)v28, v77, (uint64_t *)&unk_1010F77B0);
  v82 = v42;
  v48 = ((uint64_t (*)(char *, uint64_t))v42)(v44, v16);
  __chkstk_darwin(v48);
  v49 = v91;
  *(&v73 - 2) = v76;
  *(&v73 - 1) = (char *)v49;
  sub_100A79994(sub_100330A84, (uint64_t)(&v73 - 4));
  v51 = v50;
  v77 = 0;
  swift_bridgeObjectRelease();
  v78 = *(_QWORD *)(v51 + 16);
  swift_bridgeObjectRelease();
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v52 = sub_10001A9E8(v16, (uint64_t)qword_1011B6C00);
  v53 = v44;
  v54 = v16;
  v55 = v16;
  v56 = v44;
  v57 = (void (*)(char *, char *, uint64_t))v75;
  v75(v53, v52, v54);
  v58 = v79;
  v57(v79, v56, v55);
  v59 = v88;
  v60 = (uint64_t)v83;
  v76 = &v83[*(int *)(v88 + 40)];
  v61 = v80;
  v62 = v81;
  v80();
  v57((char *)v60, v58, v55);
  v63 = v89;
  *(_QWORD *)(v60 + *(int *)(v59 + 36)) = v90;
  v57(v63, v58, v55);
  swift_retain();
  v64 = (uint64_t)v92;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v63, 0, 0);
  v65 = (uint64_t (*)(char *, uint64_t))v82;
  v82(v58, v55);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v61)(v64, 0, 1, v62);
  sub_10000C778(v64, (uint64_t)v76);
  v66 = v85;
  sub_100005CF0(v60, v85, (uint64_t *)&unk_1011057F0);
  v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
  v68 = (uint64_t)v84;
  v67(v84, 1, 1, v59);
  sub_100004048(v68, &qword_101105800);
  sub_100005CF0(v66, v68, (uint64_t *)&unk_1011057F0);
  v67((char *)v68, 0, 1, v59);
  sub_100005CF0(v68, v87, &qword_1010FB1F0);
  v69 = v65(v56, v55);
  __chkstk_darwin(v69);
  *(&v73 - 2) = (char *)v91;
  sub_100A7A30C(sub_100425B14, (uint64_t)(&v73 - 4));
  v71 = *(_QWORD *)(v70 + 16);
  swift_bridgeObjectRelease();
  result = v78 + v71;
  if (__OFADD__(v78, v71))
    __break(1u);
  return result;
}

uint64_t sub_1007116BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7598);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7598);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EE24C0);
}

void sub_10071173C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7598);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "All sessions went away.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void (**)(uint64_t))(v1 + 40);
  if (v7)
  {
    v8 = *(_QWORD *)(v1 + 48);
    v9 = swift_retain();
    v7(v9);
    sub_10001D8A8((uint64_t)v7, v8);
  }
}

uint64_t sub_10071183C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v1 + 64);
  v11 = swift_allocObject(&unk_10108D1A8, 32, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = a1;
  aBlock[4] = sub_1007286C4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108D1C0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_100711A38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[24];

  v3 = *a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v31 - v10;
  XPCSession.identifier.getter(v9);
  v12 = a1 + 56;
  swift_beginAccess(a1 + 56, v37, 0, 0);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = swift_bridgeObjectRetain(v13);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v3, &type metadata for SimpleBeaconUpdateContext, "session context ", 0, v14);
  v16 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  Dictionary.subscript.getter(&v34, v11, v13, v4, TupleTypeMetadata2, v16);
  swift_bridgeObjectRelease();
  v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  v18 = v34;
  if ((_QWORD)v34)
  {
    v19 = v35;
    v20 = *((_QWORD *)&v36 + 1);
    XPCSession.identifier.getter(v17);
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    v21 = swift_beginAccess(v12, &v32, 33, 0);
    v22 = type metadata accessor for Dictionary(0, v4, TupleTypeMetadata2, v16, v21);
    Dictionary.subscript.setter(&v34, v8, v22);
    swift_endAccess(&v32);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7598);
    swift_bridgeObjectRetain_n(*((_QWORD *)&v19 + 1), 2);
    swift_bridgeObjectRetain_n(v20, 2);
    v24 = swift_retain_n(v18, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v34 = v28;
      *(_DWORD *)v27 = 136446210;
      if (*((_QWORD *)&v19 + 1))
        v29 = v19;
      else
        v29 = 0x6E776F6E6B6E75;
      v31 = v20;
      if (*((_QWORD *)&v19 + 1))
        v30 = *((_QWORD *)&v19 + 1);
      else
        v30 = 0xE700000000000000;
      swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
      v32 = sub_100016940(v29, v30, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v31, 2);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v19 + 1), 2);
      swift_release_n(v18, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Session went away - bundle: %{public}s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 3);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v19 + 1), 3);
      swift_release_n(v18, 3);
    }
  }
}

uint64_t sub_100711DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101105910);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_10108CC08, v17 + v14, v16 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v15, v12);
  aBlock[4] = sub_10072800C;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108CC20;
  v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v20);
  v29 = _swiftEmptyArrayStorage;
  v21 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release(v31);
}

uint64_t sub_100712050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[24];

  swift_beginAccess(a1 + 56, v10, 0, 0);
  v4 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v4);
  sub_100727BC8(_swiftEmptyArrayStorage, v4, a2);
  v6 = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_101105910);
  return CheckedContinuation.resume(returning:)(&v9, v7);
}

uint64_t sub_1007120F4(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  char *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, __n128);
  void (*v76)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v67 = a1;
  v4 = *a2;
  v61 = a2[1];
  v5 = a2[3];
  v65 = a2[2];
  v62 = *((unsigned __int8 *)a2 + 32);
  v6 = a2[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v77 = (char *)&v59 - v12;
  v13 = sub_10001A9A8(&qword_1010ED860);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v71 = (char *)&v59 - v17;
  v18 = *(_QWORD *)(v6 + 16);
  v66 = v5;
  v64 = v4;
  v70 = v18;
  if (v18)
  {
    v19 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v69 = v6 + v19;
    v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v74 = *(_QWORD *)(v8 + 72);
    v75 = v20;
    v63 = a3 + v19;
    v60 = v6;
    swift_bridgeObjectRetain_n(v6, 2);
    v21 = swift_bridgeObjectRetain(a3);
    v22 = 0;
    v68 = a3;
    while (1)
    {
      v23 = v71;
      v75(v71, v69 + v74 * v22, v7, v21);
      v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v76)(v23, 0, 1, v7);
      v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v24(v23, 1, v7) == 1)
        break;
      v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v72 = v22;
      v73 = v25;
      v25(v77, v23, v7);
      v26 = *(_QWORD *)(a3 + 16);
      v27 = swift_bridgeObjectRetain(a3);
      if (v26)
      {
        v28 = v63;
        while (1)
        {
          v75(v16, v28, v7, v27);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v76)(v16, 0, 1, v7);
          if (v24(v16, 1, v7) == 1)
            break;
          v73(v11, v16, v7);
          v29 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v77, v7, v29);
          v31 = v8;
          v32 = *(void (**)(char *, uint64_t))(v8 + 8);
          v32(v11, v7);
          if ((v30 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v32(v77, v7);
            swift_bridgeObjectRelease();
            v34 = v60;
            swift_bridgeObjectRelease();
            if (qword_1010E9ED8 != -1)
              swift_once(&qword_1010E9ED8, sub_1007116BC);
            v35 = type metadata accessor for Logger(0);
            sub_10001A9E8(v35, (uint64_t)qword_1011B7598);
            v5 = v66;
            swift_bridgeObjectRetain_n(v66, 2);
            swift_bridgeObjectRetain_n(v34, 3);
            v36 = v64;
            v37 = swift_retain_n(v64, 2);
            v38 = Logger.logObject.getter(v37);
            v39 = static os_log_type_t.default.getter(v38);
            if (os_log_type_enabled(v38, v39))
            {
              v40 = swift_slowAlloc(22, -1);
              v41 = swift_slowAlloc(32, -1);
              v80 = v41;
              *(_DWORD *)v40 = 136446466;
              if (v5)
                v42 = v65;
              else
                v42 = 0x6E776F6E6B6E75;
              if (v5)
                v43 = v5;
              else
                v43 = 0xE700000000000000;
              swift_bridgeObjectRetain(v5);
              v78 = sub_100016940(v42, v43, &v80);
              v36 = v64;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v40 + 4, v40 + 12);
              swift_bridgeObjectRelease_n(v34, 2);
              swift_bridgeObjectRelease_n(v66, 2);
              swift_release_n(v36, 2);
              swift_bridgeObjectRelease();
              *(_WORD *)(v40 + 12) = 2048;
              swift_bridgeObjectRelease();
              v78 = v70;
              v5 = v66;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v40 + 14, v40 + 22);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "Bundle: %{public}s is listening for updates to %ld beacons.", (uint8_t *)v40, 0x16u);
              swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v41, -1, -1);
              swift_slowDealloc(v40, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v5, 2);
              swift_release_n(v36, 2);
              swift_bridgeObjectRelease_n(v34, 4);
            }
            v52 = *v67;
            swift_bridgeObjectRetain(v34);
            swift_retain();
            swift_bridgeObjectRetain(v5);
            result = swift_isUniquelyReferenced_nonNull_native(v52);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_100016E94(0, v52[2] + 1, 1, v52);
              v52 = (_QWORD *)result;
            }
            v54 = v52[2];
            v53 = v52[3];
            if (v54 >= v53 >> 1)
            {
              result = (uint64_t)sub_100016E94((_QWORD *)(v53 > 1), v54 + 1, 1, v52);
              v52 = (_QWORD *)result;
            }
            v52[2] = v54 + 1;
            v55 = &v52[6 * v54];
            v55[4] = v36;
            goto LABEL_45;
          }
          v28 += v74;
          --v26;
          v8 = v31;
          if (!v26)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        v76(v16, 1, 1, v7, v27);
      }
      v22 = v72 + 1;
      a3 = v68;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v77, v7);
      if (v22 == v70)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v76)(v71, 1, 1, v7);
        break;
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n(v60, 2);
  }
  else
  {
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v44 = type metadata accessor for Logger(0);
    sub_10001A9E8(v44, (uint64_t)qword_1011B7598);
    swift_bridgeObjectRetain_n(v5, 2);
    v34 = v6;
    swift_bridgeObjectRetain_n(v6, 2);
    v45 = swift_retain_n(v4, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v80 = v49;
      *(_DWORD *)v48 = 136446210;
      if (v5)
        v50 = v65;
      else
        v50 = 0x6E776F6E6B6E75;
      if (v5)
        v51 = v5;
      else
        v51 = 0xE700000000000000;
      swift_bridgeObjectRetain(v66);
      v78 = sub_100016940(v50, v51, &v80);
      v5 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease_n(v5, 2);
      swift_release_n(v64, 2);
      v4 = v64;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Bundle: %{public}s is listening for updates to any beacons.", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease_n(v5, 2);
      swift_release_n(v4, 2);
    }
    v52 = *v67;
    swift_bridgeObjectRetain(v34);
    swift_retain();
    swift_bridgeObjectRetain(v5);
    result = swift_isUniquelyReferenced_nonNull_native(v52);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100016E94(0, v52[2] + 1, 1, v52);
      v52 = (_QWORD *)result;
    }
    v57 = v52[2];
    v56 = v52[3];
    if (v57 >= v56 >> 1)
    {
      result = (uint64_t)sub_100016E94((_QWORD *)(v56 > 1), v57 + 1, 1, v52);
      v52 = (_QWORD *)result;
    }
    v52[2] = v57 + 1;
    v55 = &v52[6 * v57];
    v55[4] = v4;
LABEL_45:
    v58 = v65;
    v55[5] = v61;
    v55[6] = v58;
    v55[7] = v5;
    *((_BYTE *)v55 + 64) = v62;
    v55[9] = v34;
    *v67 = v52;
  }
  return result;
}

uint64_t sub_100712984()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[5] = 0;
  v1[6] = 0;
  v1[7] = _swiftEmptyDictionarySingleton;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  v19 = _swiftEmptyArrayStorage;
  v13 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  v1[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100EE2630, v7, v4, v11, 0);
  v16 = swift_release();
  return sub_100B1AC90(v16);
}

void sub_100712B84()
{
  uint64_t v0;

  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();

}

uint64_t sub_100712BA8()
{
  uint64_t v0;

  v0 = sub_100C6BEB0();
  sub_10001D8A8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_100712BE8()
{
  uint64_t v0;

  v0 = sub_100712BA8();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SimpleBeaconUpdateConnections(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SimpleBeaconUpdateConnections);
}

uint64_t sub_100712C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[2];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v0);
  *(_QWORD *)(v0 + 112) = 0xD000000000000019;
  *(_QWORD *)(v0 + 120) = 0x8000000100E4BD10;
  v5 = sub_10001A9A8((uint64_t *)&unk_101105AE0);
  swift_allocObject(v5, 72, 7);
  *(_QWORD *)(v0 + 128) = sub_100712984();
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001ED74(v16[1]);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = sub_10001A9A8(&qword_1010EE320);
  *(_QWORD *)(v0 + 160) = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v8, v7);
  v9 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v9);
  v10 = WorkItemQueue.__allocating_init(identifier:)(v4);
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 168) = v10;
  *(_BYTE *)(v0 + 192) = 1;
  *(_QWORD *)(v0 + 200) = _swiftEmptyDictionarySingleton;
  v11 = *(_QWORD *)(v0 + 128);
  v12 = swift_allocObject(&unk_10108CB40, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = *(_QWORD *)(v11 + 40);
  v14 = *(_QWORD *)(v11 + 48);
  *(_QWORD *)(v11 + 40) = sub_1007287B8;
  *(_QWORD *)(v11 + 48) = v12;
  sub_10001D8A8(v13, v14);
  return v1;
}

uint64_t sub_100712DC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v3);
    static Transaction.asyncTask(name:block:)("StopProcessingSimpleBeaconUpdates", 33, 2, &unk_101105AF8, v3);
    return swift_release_n(v3, 2);
  }
  return result;
}

uint64_t sub_100712E48(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100712E60, a1, 0);
}

uint64_t sub_100712E60()
{
  uint64_t v0;

  sub_10000FEA4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100712E90()
{
  return sub_100712EB8((uint64_t)&unk_10108D180, (uint64_t)&unk_101105AC0);
}

uint64_t sub_100712EA4()
{
  return sub_100712EB8((uint64_t)&unk_10108D158, (uint64_t)&unk_101105AB8);
}

uint64_t sub_100712EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD v25[4];

  v5 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = (_QWORD *)swift_allocObject(a1, 40, 7);
  v11[2] = 0;
  v12 = v11 + 2;
  v11[3] = 0;
  v11[4] = v5;
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  v14 = swift_retain();
  if (v13 == 1)
  {
    sub_100004048((uint64_t)v8, &qword_1010F46C0);
    v15 = 7168;
LABEL_6:
    v23 = 0;
    goto LABEL_7;
  }
  v16 = TaskPriority.rawValue.getter(v14);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v15 = v16 | 0x1C00;
  v17 = *v12;
  if (!*v12)
    goto LABEL_6;
  v18 = v11[3];
  ObjectType = swift_getObjectType(*v12);
  swift_unknownObjectRetain(v17);
  v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
  v22 = v21;
  swift_unknownObjectRelease(v17);
  if (!(v22 | v20))
    goto LABEL_6;
  v25[0] = 0;
  v25[1] = 0;
  v23 = v25;
  v25[2] = v20;
  v25[3] = v22;
LABEL_7:
  swift_task_create(v15, v23, &type metadata for () + 1, a2, v11);
  return swift_release();
}

uint64_t sub_100713078(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007130D0, v1, 0);
}

uint64_t sub_1007130D0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 144) = v2;
    *v2 = v0;
    v2[1] = sub_1007131BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007131BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10071321C, v3, 0);
}

uint64_t sub_10071321C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 152);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for WorkItemQueue.WorkItem(0);
    v6 = (_QWORD *)swift_allocObject(&unk_10108D130, 48, 7);
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = 0;
    v6[5] = v2;
    swift_retain();
    swift_bridgeObjectRetain(v5);
    v7 = swift_retain();
    UUID.init()(v7);
    v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v3, &unk_101105AA8, v6, &unk_101105930, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
    swift_release();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100713314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1011055DC);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_100004C28;
  v6[4] = a4;
  return swift_task_switch(sub_100717B6C, a4, 0);
}

uint64_t sub_100713374()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);
  uint64_t (__cdecl *v4)();

  if ((*(_BYTE *)(v0 + 368) & 0x20) != 0)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 256, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 200))
    {
      sub_10000F9FC((__int128 *)(v0 + 176), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
      *(_QWORD *)(v0 + 376) = v2;
      v3 = sub_100713520;
      goto LABEL_10;
    }
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 280, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 392) = v2;
      v3 = sub_100713808;
LABEL_10:
      *v2 = v0;
      v2[1] = v3;
      return v4();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100713520(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100713580, v3, 0);
}

uint64_t sub_100713580()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t (*v16)(void);

  v1 = (_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 384);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 328) = *(_QWORD *)(v2
                                      + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
    v4 = swift_allocObject(&unk_10108CB40, 24, 7);
    swift_weakInit(v4 + 16, v3);
    swift_retain();
    v5 = sub_10001A9A8(&qword_1011059A0);
    v6 = sub_1000193A4(&qword_1011059A8, &qword_1011059A0, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v7 = Publisher<>.sink(receiveValue:)(sub_10001DC04, v4, v5, v6);
    swift_release(v4);
    swift_release(*(_QWORD *)(v0 + 328));
    v8 = *(_QWORD *)(v3 + 136);
    *(_QWORD *)(v3 + 136) = v7;
    swift_release(v8);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7598);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Subscribed to connectableDeviceCount changes.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
      swift_release(v2);

    }
    else
    {

      swift_release(v2);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 280, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v16 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v15 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 392) = v15;
    *v15 = v0;
    v15[1] = sub_100713808;
    return v16();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100713808(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001DC0C, v3, 0);
}

uint64_t sub_100713868(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007138C8, v3, 0);
}

uint64_t sub_1007138C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  v1 = v0 + 27;
  v2 = v0[53];
  if (v2)
  {
    v3 = v0[42];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (*(_QWORD *)(v3 + 176))
    {
      v4 = v2;
    }
    else
    {
      v5 = v0[50];
      v7 = v0[42];
      v6 = v0[43];
      v8 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
      v9 = (_QWORD *)swift_allocObject(&unk_10108CD48, 56, 7);
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v2;
      v9[5] = v7;
      v9[6] = v5;
      swift_retain();
      swift_retain();
      v10 = sub_100791A98(v6, (uint64_t)&unk_101105998, (uint64_t)v9);
      sub_100004048(v6, &qword_1010F46C0);
      v4 = *(_QWORD *)(v3 + 176);
      *(_QWORD *)(v3 + 176) = v10;
    }
    swift_release(v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7598);
  v0[54] = v12;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Subscribed to record changes.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  return swift_task_switch(sub_100713A7C, v0[50], 0);
}

uint64_t sub_100713A7C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[42];
  v0[55] = *(_QWORD *)(*(_QWORD *)(v0[50] + 128) + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  return swift_task_switch(sub_100713AD4, v1, 0);
}

uint64_t sub_100713AD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 440);
  v4 = swift_allocObject(&unk_10108CB40, 24, 7);
  swift_weakInit(v4 + 16, v3);
  v5 = (_QWORD *)swift_allocObject(&unk_10108CD20, 40, 7);
  v5[2] = v4;
  v5[3] = v1;
  v5[4] = v2;
  swift_retain();
  v6 = sub_10001A9A8((uint64_t *)&unk_101105980);
  v7 = sub_1000193A4(&qword_1010F5FB8, (uint64_t *)&unk_101105980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v8 = Publisher<>.sink(receiveValue:)(sub_1007282B8, v5, v6, v7);
  swift_release(v5);
  swift_release(*(_QWORD *)(v0 + 304));
  v9 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v3 + 152) = v8;
  v10 = swift_release(v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 400);
  if (v13)
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Subscribed to record deletions.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  swift_release(v14);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100713C60()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[2];
  v0[8] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1011055E4);
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_100713CC4;
  v3 = v0[3];
  v2[18] = v1;
  v2[19] = v3;
  return swift_task_switch(sub_10000F8A4, v3, 0);
}

uint64_t sub_100713CC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 64);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100713D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  const char *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  void (*v98)(char *, uint64_t, uint64_t, uint64_t);
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  void (*v117)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  _QWORD *v133;
  uint64_t (*v134)(uint64_t);
  uint64_t v135;
  uint64_t v136;
  char v137;
  void (*v138)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  _QWORD *v156;
  uint64_t v157;
  char v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  _QWORD *v173;
  uint64_t (*v174)(uint64_t);
  uint64_t v175;
  uint64_t v176;
  char v177;
  void (*v178)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint8_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217[2];
  uint64_t v218;
  uint64_t v219;
  char v220[8];
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226[8];

  v214 = a4;
  v215 = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v6);
  v201 = (char *)&v191 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = type metadata accessor for MemberSharingCircle(0);
  v200 = *(_QWORD *)(v205 - 8);
  __chkstk_darwin(v205);
  v202 = (uint64_t)&v191 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v9);
  v209 = (char *)&v191 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for OwnerSharingCircle(0);
  v208 = *(_QWORD *)(v213 - 8);
  __chkstk_darwin(v213);
  v207 = (uint64_t)&v191 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v12);
  v193 = (char *)&v191 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for SafeLocation(0);
  v192 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v195 = (uint64_t)&v191 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v15);
  v204 = (char *)&v191 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = type metadata accessor for LostModeRecord(0);
  v17 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v197 = (uint64_t)&v191 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v19);
  v21 = (char *)&v191 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for BeaconNamingRecord(0);
  v22 = *(_QWORD *)(v203 - 8);
  v23 = __chkstk_darwin(v203);
  v198 = (uint64_t)&v191 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v199 = (uint64_t)&v191 - v25;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v26);
  v28 = (char *)&v191 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for KeyAlignmentRecord(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v32 = (char *)&v191 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for UUID(0);
  v212 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v34 = (char *)&v191 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v226, 0, 0);
  result = swift_weakLoadStrong(a2);
  v210 = result;
  if (!result)
    return result;
  sub_100030784(a1, (uint64_t)&v219);
  v36 = sub_10001A9A8(&qword_1010EE3A8);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v206 = v36;
  if ((swift_dynamicCast(v217, &v219, v36, v37, 6) & 1) != 0)
  {
    v204 = (char *)a1;
    sub_10000F9FC(v217, (uint64_t)&v223);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7598);
    v39 = sub_100030784((uint64_t)&v223, (uint64_t)&v219);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = v211;
    if (v42)
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(32, -1);
      *(_DWORD *)v44 = 141558275;
      v216 = 1752392040;
      *(_QWORD *)&v217[0] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v44 + 4, v44 + 12);
      *(_WORD *)(v44 + 12) = 2081;
      v203 = v44 + 14;
      v47 = v221;
      v46 = v222;
      sub_10001AA44(&v219, v221);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v46 + 8) + 8) + 32))(v47);
      v48 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v43, v48);
      v51 = v50;
      v52 = v212;
      v53 = v34;
      v54 = v43;
      (*(void (**)(char *, uint64_t))(v212 + 8))(v53, v43);
      v216 = sub_100016940(v49, v51, (uint64_t *)v217);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v216, v217, v203, v44 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Updating sessions for BeaconRecord changes. Beacon: %{private,mask.hash}s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      v55 = v210;
      v56 = v213;
    }
    else
    {
      v54 = v211;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v219);

      v55 = v210;
      v56 = v213;
      v52 = v212;
    }
    v77 = v214;
    v78 = sub_1006548BC(&v223);
    v79 = sub_10001A9A8(&qword_1011003C0);
    v80 = *(unsigned __int8 *)(v52 + 80);
    v81 = (v80 + 32) & ~v80;
    v82 = swift_allocObject(v79, v81 + *(_QWORD *)(v52 + 72), v80 | 7);
    *(_OWORD *)(v82 + 16) = xmmword_100E22B00;
    v83 = v82 + v81;
    v85 = v224;
    v84 = v225;
    sub_10001AA44(&v223, v224);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 8) + 8) + 32))(v85);
    if ((v78 & 1) != 0)
    {
      v86 = sub_1003B9FE0(v82);
      swift_setDeallocating(v82);
      v87 = v83;
      v67 = v54;
      swift_arrayDestroy(v87, 1, v54);
      swift_deallocClassInstance(v82, 32, 7);
      type metadata accessor for Transaction(0);
      v88 = (_QWORD *)swift_allocObject(&unk_10108D0B8, 48, 7);
      v88[2] = v55;
      v88[3] = v86;
      v88[4] = 0;
      v88[5] = v215;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v86);
      v89 = "SimpleBeaconUpdate-receivedSimpleBeacons";
      v90 = &unk_101105A98;
      v91 = 40;
    }
    else
    {
      v92 = sub_10001B664(v82);
      swift_setDeallocating(v82);
      v93 = v83;
      v67 = v54;
      swift_arrayDestroy(v93, 1, v54);
      swift_deallocClassInstance(v82, 32, 7);
      type metadata accessor for Transaction(0);
      v88 = (_QWORD *)swift_allocObject(&unk_10108D090, 40, 7);
      v94 = v215;
      v88[2] = v92;
      v88[3] = v94;
      v88[4] = v55;
      swift_bridgeObjectRetain(v92);
      swift_retain();
      swift_retain();
      v89 = "SimpleBeaconUpdate-receivedSimpleBeaconRemovals";
      v90 = &unk_101105A90;
      v91 = 47;
    }
    static Transaction.asyncTask(name:block:)(v89, v91, 2, v90, v88);
    swift_release(v88);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v223);
    a1 = (uint64_t)v204;
    v58 = v206;
    v57 = v77;
    v76 = v56;
    goto LABEL_44;
  }
  v218 = 0;
  memset(v217, 0, sizeof(v217));
  sub_100004048((uint64_t)v217, (uint64_t *)&unk_1010EE310);
  v57 = v214;
  v58 = v206;
  if ((v214 & 0x300) != 0)
  {
    sub_100030784(a1, (uint64_t)&v223);
    v59 = swift_dynamicCast(v28, &v223, v58, v29, 6);
    v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    if ((v59 & 1) != 0)
    {
      v61 = a1;
      v60(v28, 0, 1, v29);
      sub_1000126EC((uint64_t)v28, (uint64_t)v32, type metadata accessor for KeyAlignmentRecord);
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v62 = type metadata accessor for Logger(0);
      v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7598);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter(v64);
      v66 = os_log_type_enabled(v64, v65);
      v55 = v210;
      v67 = v211;
      v52 = v212;
      if (v66)
      {
        v68 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Updating sessions for KeySyncRecord changes.", v68, 2u);
        swift_slowDealloc(v68, -1, -1);
      }

      v69 = sub_10001A9A8(&qword_1011003C0);
      v70 = *(unsigned __int8 *)(v52 + 80);
      v71 = (v70 + 32) & ~v70;
      v72 = swift_allocObject(v69, v71 + *(_QWORD *)(v52 + 72), v70 | 7);
      *(_OWORD *)(v72 + 16) = xmmword_100E22B00;
      v73 = v72 + v71;
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v72 + v71, &v32[*(int *)(v29 + 24)], v67);
      v74 = sub_1003B9FE0(v72);
      swift_setDeallocating(v72);
      swift_arrayDestroy(v73, 1, v67);
      swift_deallocClassInstance(v72, 32, 7);
      type metadata accessor for Transaction(0);
      v75 = (_QWORD *)swift_allocObject(&unk_10108D068, 48, 7);
      v75[2] = v55;
      v75[3] = v74;
      v75[4] = 0;
      v75[5] = v215;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v74);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A88, v75);
      swift_release(v75);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v32, type metadata accessor for KeyAlignmentRecord);
      v76 = v213;
      a1 = v61;
      v57 = v214;
      v58 = v206;
      goto LABEL_44;
    }
    v60(v28, 1, 1, v29);
    sub_100004048((uint64_t)v28, (uint64_t *)&unk_1010F47D0);
  }
  v76 = v213;
  v52 = v212;
  v95 = (uint64_t)v204;
  if ((v57 & 0x280) != 0)
  {
    sub_100030784(a1, (uint64_t)&v223);
    v96 = v203;
    v97 = swift_dynamicCast(v21, &v223, v58, v203, 6);
    v98 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    if ((v97 & 1) != 0)
    {
      v99 = v57;
      v204 = (char *)a1;
      v98(v21, 0, 1, v96);
      v100 = v199;
      sub_1000126EC((uint64_t)v21, v199, type metadata accessor for BeaconNamingRecord);
      v101 = v211;
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v102 = type metadata accessor for Logger(0);
      sub_10001A9E8(v102, (uint64_t)qword_1011B7598);
      v103 = v198;
      v104 = sub_10005972C(v100, v198, type metadata accessor for BeaconNamingRecord);
      v105 = Logger.logObject.getter(v104);
      v106 = static os_log_type_t.default.getter(v105);
      v107 = os_log_type_enabled(v105, v106);
      v55 = v210;
      if (v107)
      {
        v108 = swift_slowAlloc(22, -1);
        v109 = swift_slowAlloc(32, -1);
        v223 = v109;
        *(_DWORD *)v108 = 141558275;
        v219 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v108 + 4, v108 + 12);
        *(_WORD *)(v108 + 12) = 2081;
        v110 = v203;
        v111 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v112 = dispatch thunk of CustomStringConvertible.description.getter(v101, v111);
        v219 = sub_100016940(v112, v113, &v223);
        v52 = v212;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v108 + 14, v108 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v198, type metadata accessor for BeaconNamingRecord);
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "Updating sessions for Beacon Name changes. Beacon: %{private,mask.hash}s", (uint8_t *)v108, 0x16u);
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        v114 = v109;
        v58 = v206;
        v99 = v214;
        swift_slowDealloc(v114, -1, -1);
        swift_slowDealloc(v108, -1, -1);

      }
      else
      {
        sub_1000126B0(v103, type metadata accessor for BeaconNamingRecord);

        v110 = v203;
      }
      v148 = sub_10001A9A8(&qword_1011003C0);
      v149 = *(unsigned __int8 *)(v52 + 80);
      v150 = (v149 + 32) & ~v149;
      v151 = swift_allocObject(v148, v150 + *(_QWORD *)(v52 + 72), v149 | 7);
      *(_OWORD *)(v151 + 16) = xmmword_100E22B00;
      v152 = v151 + v150;
      v153 = *(int *)(v110 + 24);
      v154 = v199;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v151 + v150, v199 + v153, v101);
      v155 = sub_1003B9FE0(v151);
      swift_setDeallocating(v151);
      swift_arrayDestroy(v152, 1, v101);
      swift_deallocClassInstance(v151, 32, 7);
      type metadata accessor for Transaction(0);
      v156 = (_QWORD *)swift_allocObject(&unk_10108D040, 48, 7);
      v156[2] = v55;
      v156[3] = v155;
      v156[4] = 0;
      v156[5] = v215;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v155);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A80, v156);
      swift_release(v156);
      swift_bridgeObjectRelease();
      sub_1000126B0(v154, type metadata accessor for BeaconNamingRecord);
      a1 = (uint64_t)v204;
      v67 = v101;
LABEL_43:
      v57 = v99;
      v76 = v213;
      goto LABEL_44;
    }
    v98(v21, 1, 1, v96);
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_101105880);
  }
  v55 = v210;
  v67 = v211;
  if ((v57 & 0x200) != 0)
  {
    sub_100030784(a1, (uint64_t)&v223);
    v115 = v196;
    v116 = swift_dynamicCast(v95, &v223, v58, v196, 6);
    v117 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    if (v116)
    {
      v118 = v95;
      v99 = v57;
      v119 = a1;
      v117(v118, 0, 1, v115);
      sub_1000126EC(v118, v197, type metadata accessor for LostModeRecord);
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v120 = type metadata accessor for Logger(0);
      v121 = sub_10001A9E8(v120, (uint64_t)qword_1011B7598);
      v122 = Logger.logObject.getter(v121);
      v123 = static os_log_type_t.default.getter(v122);
      if (os_log_type_enabled(v122, v123))
      {
        v124 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v124 = 0;
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "Updating sessions for Lost Mode changes.", v124, 2u);
        swift_slowDealloc(v124, -1, -1);
      }

      v125 = sub_10001A9A8(&qword_1011003C0);
      v126 = *(unsigned __int8 *)(v52 + 80);
      v127 = (v126 + 32) & ~v126;
      v128 = swift_allocObject(v125, v127 + *(_QWORD *)(v52 + 72), v126 | 7);
      *(_OWORD *)(v128 + 16) = xmmword_100E22B00;
      v129 = v128 + v127;
      v130 = *(int *)(v115 + 24);
      v131 = v197;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v128 + v127, v197 + v130, v67);
      v132 = sub_1003B9FE0(v128);
      swift_setDeallocating(v128);
      swift_arrayDestroy(v129, 1, v67);
      swift_deallocClassInstance(v128, 32, 7);
      type metadata accessor for Transaction(0);
      v133 = (_QWORD *)swift_allocObject(&unk_10108D018, 48, 7);
      v133[2] = v55;
      v133[3] = v132;
      v133[4] = 0;
      v133[5] = v215;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v132);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A78, v133);
      swift_release(v133);
      swift_bridgeObjectRelease();
      v134 = type metadata accessor for LostModeRecord;
    }
    else
    {
      v117(v95, 1, 1, v115);
      sub_100004048(v95, (uint64_t *)&unk_1010F47F0);
      sub_100030784(a1, (uint64_t)&v223);
      v135 = (uint64_t)v193;
      v136 = v194;
      v137 = swift_dynamicCast(v193, &v223, v58, v194, 6);
      v138 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v192 + 56);
      if ((v137 & 1) == 0)
      {
        v138(v135, 1, 1, v136);
        sub_100004048(v135, &qword_101106E40);
        goto LABEL_44;
      }
      v99 = v57;
      v119 = a1;
      v138(v135, 0, 1, v136);
      sub_1000126EC(v135, v195, type metadata accessor for SafeLocation);
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v139 = type metadata accessor for Logger(0);
      v140 = sub_10001A9E8(v139, (uint64_t)qword_1011B7598);
      v141 = Logger.logObject.getter(v140);
      v142 = static os_log_type_t.default.getter(v141);
      if (os_log_type_enabled(v141, v142))
      {
        v143 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v143 = 0;
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "Updating sessions for Safe Location changes.", v143, 2u);
        swift_slowDealloc(v143, -1, -1);
      }

      v144 = *(int *)(v136 + 52);
      v131 = v195;
      swift_bridgeObjectRetain(*(_QWORD *)(v195 + v144));
      v146 = sub_10001B664(v145);
      swift_bridgeObjectRelease();
      type metadata accessor for Transaction(0);
      v147 = (_QWORD *)swift_allocObject(&unk_10108CFF0, 48, 7);
      v147[2] = v55;
      v147[3] = v146;
      v147[4] = 0;
      v147[5] = v215;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v146);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A70, v147);
      swift_release(v147);
      swift_bridgeObjectRelease();
      v134 = type metadata accessor for SafeLocation;
    }
    sub_1000126B0(v131, v134);
    a1 = v119;
    goto LABEL_43;
  }
LABEL_44:
  if ((v57 & 0x220) == 0)
    return swift_release(v55);
  sub_100030784(a1, (uint64_t)&v223);
  v157 = (uint64_t)v209;
  v158 = swift_dynamicCast(v209, &v223, v58, v76, 6);
  v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v208 + 56);
  if ((v158 & 1) != 0)
  {
    v159(v157, 0, 1, v76);
    sub_1000126EC(v157, v207, type metadata accessor for OwnerSharingCircle);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v160 = type metadata accessor for Logger(0);
    v161 = sub_10001A9E8(v160, (uint64_t)qword_1011B7598);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.default.getter(v162);
    if (os_log_type_enabled(v162, v163))
    {
      v164 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v164 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Updating sessions for sharing changes [OwnerSharingCircle].", v164, 2u);
      swift_slowDealloc(v164, -1, -1);
    }

    v165 = sub_10001A9A8(&qword_1011003C0);
    v166 = *(unsigned __int8 *)(v52 + 80);
    v167 = (v166 + 32) & ~v166;
    v168 = swift_allocObject(v165, v167 + *(_QWORD *)(v52 + 72), v166 | 7);
    *(_OWORD *)(v168 + 16) = xmmword_100E22B00;
    v169 = v168 + v167;
    v170 = *(int *)(v76 + 24);
    v171 = v207;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v168 + v167, v207 + v170, v67);
    v172 = sub_1003B9FE0(v168);
    swift_setDeallocating(v168);
    swift_arrayDestroy(v169, 1, v67);
    swift_deallocClassInstance(v168, 32, 7);
    type metadata accessor for Transaction(0);
    v173 = (_QWORD *)swift_allocObject(&unk_10108CFC8, 48, 7);
    v173[2] = v55;
    v173[3] = v172;
    v173[4] = 0;
    v173[5] = v215;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v172);
    static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A68, v173);
    swift_release(v173);
    swift_bridgeObjectRelease();
    swift_release(v55);
    v174 = type metadata accessor for OwnerSharingCircle;
    return sub_1000126B0(v171, v174);
  }
  v159(v157, 1, 1, v76);
  sub_100004048(v157, &qword_1010EE0E0);
  sub_100030784(a1, (uint64_t)&v223);
  v175 = (uint64_t)v201;
  v176 = v205;
  v177 = swift_dynamicCast(v201, &v223, v58, v205, 6);
  v178 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v200 + 56);
  if ((v177 & 1) != 0)
  {
    v178(v175, 0, 1, v176);
    sub_1000126EC(v175, v202, type metadata accessor for MemberSharingCircle);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v179 = type metadata accessor for Logger(0);
    v180 = sub_10001A9E8(v179, (uint64_t)qword_1011B7598);
    v181 = Logger.logObject.getter(v180);
    v182 = static os_log_type_t.default.getter(v181);
    if (os_log_type_enabled(v181, v182))
    {
      v183 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v183 = 0;
      _os_log_impl((void *)&_mh_execute_header, v181, v182, "Updating sessions for sharing changes [MemberSharingCircle].", v183, 2u);
      swift_slowDealloc(v183, -1, -1);
    }

    v184 = sub_10001A9A8(&qword_1011003C0);
    v185 = *(unsigned __int8 *)(v52 + 80);
    v186 = (v185 + 32) & ~v185;
    v187 = swift_allocObject(v184, v186 + *(_QWORD *)(v52 + 72), v185 | 7);
    *(_OWORD *)(v187 + 16) = xmmword_100E22B00;
    v188 = v187 + v186;
    v171 = v202;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v187 + v186, v202 + *(int *)(v205 + 24), v67);
    v189 = sub_1003B9FE0(v187);
    swift_setDeallocating(v187);
    swift_arrayDestroy(v188, 1, v67);
    swift_deallocClassInstance(v187, 32, 7);
    type metadata accessor for Transaction(0);
    v190 = (_QWORD *)swift_allocObject(&unk_10108CFA0, 48, 7);
    v190[2] = v55;
    v190[3] = v189;
    v190[4] = 0;
    v190[5] = v215;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v189);
    static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A60, v190);
    swift_release(v190);
    swift_release(v55);
    swift_bridgeObjectRelease();
    v174 = type metadata accessor for MemberSharingCircle;
    return sub_1000126B0(v171, v174);
  }
  v178(v175, 1, 1, v176);
  swift_release(v55);
  return sub_100004048(v175, (uint64_t *)&unk_101111440);
}

uint64_t sub_10071556C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6[15] = a5;
  v6[16] = a6;
  v6[14] = a4;
  v8 = sub_10001A9A8(&qword_1010ED860);
  v6[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v6[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[20] = swift_task_alloc(v11);
  v6[21] = swift_task_alloc(v11);
  v6[22] = swift_task_alloc(v11);
  v6[23] = swift_task_alloc(v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v6[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v6[25] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[26] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[27] = swift_task_alloc(v15);
  v6[28] = swift_task_alloc(v15);
  v16 = type metadata accessor for CloudStorageStore.State(0);
  v6[29] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v6[30] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[31] = swift_task_alloc(v18);
  v6[32] = swift_task_alloc(v18);
  v19 = sub_10001A9A8((uint64_t *)&unk_101100420);
  v6[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1011088A0);
  v6[34] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v6[35] = v21;
  v6[36] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_101100430);
  v6[37] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v6[38] = v23;
  v6[39] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_101100438);
  v6[40] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v6[41] = v25;
  v6[42] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10071575C, a4, 0);
}

uint64_t sub_10071575C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 128);
  *(_QWORD *)(v0 + 344) = v1;
  return swift_task_switch(sub_100715778, v1, 0);
}

uint64_t sub_100715778()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[43];
  v3 = v0[35];
  v2 = v0[36];
  v4 = v0[34];
  v5 = v0[29];
  v6 = swift_allocObject(&unk_10108CDC0, 24, 7);
  swift_weakInit(v6 + 16, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v5, v2, sub_1005CD3D8, v6, v5);
  swift_release();
  return swift_task_switch(sub_100715840, 0, 0);
}

uint64_t sub_100715840()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[38];
  v1 = v0[39];
  v3 = v0[37];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[44] = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[45] = v4;
  *v4 = v0;
  v4[1] = sub_1007158D0;
  return AsyncStream.Iterator.next(isolation:)(v0[33], 0, 0, v0[40]);
}

uint64_t sub_1007158D0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_100715924, 0, 0);
}

uint64_t sub_100715924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_QWORD, _QWORD, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132[2];

  v1 = *(_QWORD *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 48))(v1, 1, *(_QWORD *)(v0 + 232)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 336);
    v3 = *(_QWORD *)(v0 + 312);
    v4 = *(_QWORD *)(v0 + 288);
    v6 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 256);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    v9 = *(_QWORD *)(v0 + 192);
    v118 = *(_QWORD *)(v0 + 184);
    v121 = *(_QWORD *)(v0 + 176);
    v123 = *(_QWORD *)(v0 + 168);
    v126 = *(_QWORD *)(v0 + 160);
    v129 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(v2, *(_QWORD *)(v0 + 320));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v118);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v11 = *(_QWORD *)(v0 + 352);
  v12 = sub_1000126EC(v1, *(_QWORD *)(v0 + 256), type metadata accessor for CloudStorageStore.State);
  static Task<>.checkCancellation()(v12);
  *(_QWORD *)(v0 + 368) = v11;
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 328);
    v14 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 312);
    v15 = *(_QWORD *)(v0 + 320);
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 256);
    v19 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 248);
    v115 = *(_QWORD *)(v0 + 224);
    v116 = *(_QWORD *)(v0 + 216);
    v117 = *(_QWORD *)(v0 + 192);
    v119 = *(_QWORD *)(v0 + 184);
    v122 = *(_QWORD *)(v0 + 176);
    v124 = *(_QWORD *)(v0 + 168);
    v127 = *(_QWORD *)(v0 + 160);
    v130 = *(_QWORD *)(v0 + 136);
    sub_1000126B0(v18, type metadata accessor for CloudStorageStore.State);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    swift_task_dealloc(v130);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v22 = *(_QWORD *)(v0 + 248);
  v23 = *(_QWORD *)(v0 + 232);
  sub_10005972C(*(_QWORD *)(v0 + 256), v22, type metadata accessor for CloudStorageStore.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v23);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v128 = *(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 + 152) + 32);
      v128(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 144));
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v25 = *(_QWORD *)(v0 + 168);
      v26 = *(_QWORD *)(v0 + 176);
      v27 = *(_QWORD *)(v0 + 144);
      v28 = *(_QWORD *)(v0 + 152);
      v29 = type metadata accessor for Logger(0);
      sub_10001A9E8(v29, (uint64_t)qword_1011B7598);
      v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
      v30 = v131(v25, v26, v27);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      v33 = os_log_type_enabled(v31, v32);
      v34 = *(_QWORD *)(v0 + 168);
      v35 = *(_QWORD *)(v0 + 144);
      v36 = *(_QWORD *)(v0 + 152);
      if (v33)
      {
        v37 = swift_slowAlloc(22, -1);
        v38 = swift_slowAlloc(32, -1);
        v132[0] = v38;
        *(_DWORD *)v37 = 141558275;
        *(_QWORD *)(v0 + 96) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v37 + 4, v37 + 12);
        *(_WORD *)(v37 + 12) = 2081;
        v39 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v40 = dispatch thunk of CustomStringConvertible.description.getter(v35, v39);
        *(_QWORD *)(v0 + 104) = sub_100016940(v40, v41, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v37 + 14, v37 + 22);
        swift_bridgeObjectRelease();
        v42 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v42(v34, v35);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Updating sessions for local findable record deleted %{private,mask.hash}s.", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        v42 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v42(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
      }

      v67 = *(_QWORD *)(v0 + 176);
      v68 = *(_QWORD *)(v0 + 144);
      v69 = *(_QWORD *)(v0 + 152);
      v70 = *(_QWORD *)(v0 + 136);
      v71 = sub_10001A9A8(&qword_1011003C0);
      v72 = *(unsigned __int8 *)(v69 + 80);
      v73 = (v72 + 32) & ~v72;
      v125 = *(_QWORD *)(v69 + 72);
      v74 = swift_allocObject(v71, v73 + v125, v72 | 7);
      *(_OWORD *)(v74 + 16) = xmmword_100E22B00;
      v75 = v74 + v73;
      v131(v74 + v73, v67, v68);
      v76 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = Set.init(minimumCapacity:)(1);
      v131(v70, v75, v68);
      v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
      v78(v70, 0, 1, v68);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v70, 1, v68) != 1)
      {
        v120 = v78;
        v81 = *(_QWORD *)(v0 + 144);
        v128(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136), v81);
        v82 = *(_QWORD *)(v77 + 40);
        swift_bridgeObjectRetain(v77);
        v83 = dispatch thunk of Hashable._rawHashValue(seed:)(v82, v81, v76);
        v84 = -1 << *(_BYTE *)(v77 + 32);
        v85 = v83 & ~v84;
        if (((*(_QWORD *)(v77 + 56 + ((v85 >> 3) & 0xFFFFFFFFFFFFF8)) >> v85) & 1) != 0)
        {
          v86 = ~v84;
          while (1)
          {
            v87 = *(_QWORD *)(v0 + 184);
            v88 = *(_QWORD *)(v0 + 160);
            v89 = v42;
            v90 = *(_QWORD *)(v0 + 144);
            v131(v87, *(_QWORD *)(v77 + 48) + v85 * v125, v90);
            v91 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            LOBYTE(v88) = dispatch thunk of static Equatable.== infix(_:_:)(v87, v88, v90, v91);
            v92 = v90;
            v42 = v89;
            v89(v87, v92);
            if ((v88 & 1) != 0)
              break;
            v85 = (v85 + 1) & v86;
            if (((*(_QWORD *)(v77 + 56 + ((v85 >> 3) & 0xFFFFFFFFFFFFF8)) >> v85) & 1) == 0)
              goto LABEL_26;
          }
        }
        else
        {
LABEL_26:
          v93 = *(_QWORD *)(v0 + 184);
          v94 = *(_QWORD *)(v0 + 160);
          v95 = *(_QWORD *)(v0 + 144);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v77);
          v131(v93, v94, v95);
          v132[0] = v77;
          sub_100A1CCB8(v93, v85, isUniquelyReferenced_nonNull_native);
          v77 = v132[0];
        }
        swift_bridgeObjectRelease();
        v107 = *(_QWORD *)(v0 + 136);
        v106 = *(_QWORD *)(v0 + 144);
        v42(*(_QWORD *)(v0 + 160), v106);
        v120(v107, 1, 1, v106);
      }
      swift_bridgeObjectRelease();
      v108 = *(_QWORD *)(v0 + 256);
      v109 = *(_QWORD *)(v0 + 176);
      v110 = *(_QWORD *)(v0 + 144);
      v112 = *(_QWORD *)(v0 + 120);
      v111 = *(_QWORD *)(v0 + 128);
      type metadata accessor for Transaction(0);
      v113 = (_QWORD *)swift_allocObject(&unk_10108CDE8, 40, 7);
      v113[2] = v77;
      v113[3] = v111;
      v113[4] = v112;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v77);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeaconRemovals", 47, 2, &unk_1011059E0, v113);
      swift_bridgeObjectRelease();
      swift_release();
      v42(v109, v110);
      v66 = v108;
    }
    else
    {
      v65 = *(_QWORD *)(v0 + 248);
      sub_1000126B0(*(_QWORD *)(v0 + 256), type metadata accessor for CloudStorageStore.State);
      v66 = v65;
    }
    sub_1000126B0(v66, type metadata accessor for CloudStorageStore.State);
    goto LABEL_32;
  }
  v43 = *(_QWORD *)(v0 + 200);
  v44 = *(_QWORD *)(v0 + 208);
  v45 = *(_QWORD *)(v0 + 192);
  sub_10000F9FC(*(__int128 **)(v0 + 248), v0 + 16);
  sub_100030784(v0 + 16, v0 + 56);
  v46 = sub_10001A9A8(&qword_101100440);
  v47 = swift_dynamicCast(v45, v0 + 56, v46, v43, 6);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v44 + 56);
  if ((v47 & 1) == 0)
  {
    v79 = *(_QWORD *)(v0 + 256);
    v80 = *(_QWORD *)(v0 + 192);
    v48(v80, 1, 1, *(_QWORD *)(v0 + 200));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    sub_1000126B0(v79, type metadata accessor for CloudStorageStore.State);
    sub_100004048(v80, (uint64_t *)&unk_1010EDC50);
LABEL_32:
    *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 368);
    v114 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 360) = v114;
    *v114 = v0;
    v114[1] = sub_1007158D0;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 264), 0, 0, *(_QWORD *)(v0 + 320));
  }
  v49 = *(_QWORD *)(v0 + 224);
  v50 = *(_QWORD *)(v0 + 192);
  v48(v50, 0, 1, *(_QWORD *)(v0 + 200));
  sub_1000126EC(v50, v49, type metadata accessor for LocalFindableAccessoryRecord);
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v51 = *(_QWORD *)(v0 + 216);
  v52 = *(_QWORD *)(v0 + 224);
  v53 = type metadata accessor for Logger(0);
  sub_10001A9E8(v53, (uint64_t)qword_1011B7598);
  v54 = sub_10005972C(v52, v51, type metadata accessor for LocalFindableAccessoryRecord);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  v57 = os_log_type_enabled(v55, v56);
  v58 = *(_QWORD *)(v0 + 216);
  if (v57)
  {
    v59 = *(_QWORD *)(v0 + 144);
    v60 = swift_slowAlloc(22, -1);
    v61 = swift_slowAlloc(32, -1);
    v132[0] = v61;
    *(_DWORD *)v60 = 141558275;
    *(_QWORD *)(v60 + 4) = 1752392040;
    *(_WORD *)(v60 + 12) = 2081;
    v62 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v63 = dispatch thunk of CustomStringConvertible.description.getter(v59, v62);
    *(_QWORD *)(v60 + 14) = sub_100016940(v63, v64, v132);
    swift_bridgeObjectRelease();
    sub_1000126B0(v58, type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Updating sessions for local findable record modified %{private,mask.hash}s.", (uint8_t *)v60, 0x16u);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 216), type metadata accessor for LocalFindableAccessoryRecord);
  }

  v97 = *(_QWORD *)(v0 + 224);
  v98 = *(_QWORD *)(v0 + 144);
  v99 = *(_QWORD *)(v0 + 152);
  v100 = *(_QWORD *)(v0 + 120);
  v101 = sub_10001A9A8(&qword_1011003C0);
  v102 = *(unsigned __int8 *)(v99 + 80);
  v103 = (v102 + 32) & ~v102;
  v104 = swift_allocObject(v101, v103 + *(_QWORD *)(v99 + 72), v102 | 7);
  *(_OWORD *)(v104 + 16) = xmmword_100E22B00;
  v105 = v104 + v103;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16))(v105, v97, v98);
  *(_QWORD *)(v0 + 376) = sub_1003B9FE0(v104);
  swift_setDeallocating(v104);
  swift_arrayDestroy(v105, 1, v98);
  swift_deallocClassInstance(v104, 32, 7);
  return swift_task_switch(sub_100716408, v100, 0);
}

uint64_t sub_100716408()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[47];
  v2 = v0[23];
  v4 = v0[15];
  v3 = v0[16];
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v5 = (_QWORD *)swift_allocObject(&unk_10108CE10, 48, 7);
  v5[2] = v4;
  v5[3] = v1;
  v5[4] = 0;
  v5[5] = v3;
  swift_retain();
  swift_bridgeObjectRetain(v1);
  v6 = swift_retain();
  UUID.init()(v6);
  v7 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v2, &unk_1011059F0, v5, &unk_101105930, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v7);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch(sub_1007164F0, 0, 0);
}

uint64_t sub_1007164F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[32];
  sub_1000126B0(v0[28], type metadata accessor for LocalFindableAccessoryRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  v0[44] = v0[46];
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[45] = v2;
  *v2 = v0;
  v2[1] = sub_1007158D0;
  return AsyncStream.Iterator.next(isolation:)(v0[33], 0, 0, v0[40]);
}

uint64_t sub_100716588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  char v66;
  void (*v67)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  void (*v87)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  uint64_t (*v104)(uint64_t);
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  void *v134;
  _QWORD *v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  uint64_t v138;
  char v139;
  void (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  void (*v159)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199[2];
  uint64_t v200;
  char v201[8];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205[8];

  v194 = a4;
  v195 = a3;
  v196 = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v5);
  v186 = (char *)&v169 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = type metadata accessor for MemberSharingCircle(0);
  v185 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v182 = (uint64_t)&v169 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v8);
  v191 = (char *)&v169 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for OwnerSharingCircle(0);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v188 = (uint64_t)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v11);
  v174 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for SafeLocation(0);
  v173 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v172 = (uint64_t)&v169 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v14);
  v16 = (char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for LostModeRecord(0);
  v179 = *(_QWORD *)(v180 - 8);
  __chkstk_darwin(v180);
  v176 = (uint64_t)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v18);
  v20 = (char *)&v169 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BeaconNamingRecord(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v181 = (uint64_t)&v169 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v24);
  v26 = (char *)&v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v27);
  v184 = (uint64_t)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for UUID(0);
  v197 = *(_QWORD *)(v29 - 8);
  v198 = v29;
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v169 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v30);
  v178 = (uint64_t)&v169 - v34;
  __chkstk_darwin(v33);
  v177 = (char *)&v169 - v35;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v36);
  v38 = (char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for SharedBeaconRecord(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v183 = (uint64_t)&v169 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v205, 0, 0);
  result = swift_weakLoadStrong(a2);
  v193 = result;
  if (!result)
    return result;
  v171 = v26;
  v170 = v32;
  v43 = (uint64_t)v16;
  v44 = v196;
  sub_100030784(v196, (uint64_t)v201);
  v45 = sub_10001A9A8((uint64_t *)&unk_101105A10);
  v46 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v189 = v45;
  if ((swift_dynamicCast(v199, v201, v45, v46, 6) & 1) != 0)
  {
    v47 = v44;
    sub_10000F9FC(v199, (uint64_t)&v202);
    v48 = sub_10001A9A8(&qword_1011003C0);
    v49 = *(unsigned __int8 *)(v197 + 80);
    v50 = (v49 + 32) & ~v49;
    v51 = swift_allocObject(v48, v50 + *(_QWORD *)(v197 + 72), v49 | 7);
    *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
    v52 = v51 + v50;
    v54 = v203;
    v53 = v204;
    sub_10001AA44(&v202, v203);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v53 + 8) + 8) + 32))(v54);
    v55 = sub_10001B664(v51);
    swift_setDeallocating(v51);
    swift_arrayDestroy(v52, 1, v198);
    swift_deallocClassInstance(v51, 32, 7);
    *(_QWORD *)&v199[0] = v55;
    sub_100030784((uint64_t)&v202, (uint64_t)v201);
    v56 = swift_dynamicCast(v38, v201, v46, v39, 6);
    v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
    if ((v56 & 1) == 0)
    {
      v57(v38, 1, 1, v39);
      sub_100004048((uint64_t)v38, (uint64_t *)&unk_1010EE180);
      v62 = v195;
      v65 = v193;
      v64 = v194;
LABEL_25:
      v113 = *(_QWORD *)&v199[0];
      type metadata accessor for Transaction(0);
      v114 = (_QWORD *)swift_allocObject(&unk_10108CF50, 40, 7);
      v114[2] = v113;
      v114[3] = v62;
      v114[4] = v65;
      swift_bridgeObjectRetain(v113);
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeaconRemovals", 47, 2, &unk_101105A50, v114);
      swift_release(v114);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v202);
LABEL_26:
      v44 = v47;
      goto LABEL_27;
    }
    v57(v38, 0, 1, v39);
    v58 = v183;
    sub_1000126EC((uint64_t)v38, v183, type metadata accessor for SharedBeaconRecord);
    v59 = (uint64_t)v171;
    sub_10000F9B8(v58 + *(int *)(v39 + 80), (uint64_t)v171, (uint64_t *)&unk_1010F47B0);
    v60 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v59, 1, v60);
    v62 = v195;
    if (v61 == 1)
    {
      sub_100004048(v59, (uint64_t *)&unk_1010F47B0);
      v63 = v184;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v197 + 56))(v184, 1, 1, v198);
      v64 = v194;
    }
    else
    {
      v63 = v184;
      sub_10000F9B8(v59 + *(int *)(v60 + 20), v184, &qword_1010ED860);
      sub_1000126B0(v59, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v63, 1, v198);
      v64 = v194;
      if (v106 != 1)
      {
        v107 = v197;
        v108 = v198;
        v109 = v177;
        (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v177, v63, v198);
        v110 = v170;
        (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v170, v109, v108);
        v111 = v178;
        sub_100A09F38(v178, v110);
        v112 = *(void (**)(uint64_t, uint64_t))(v107 + 8);
        v112(v111, v108);
        v112((uint64_t)v109, v108);
        sub_1000126B0(v58, type metadata accessor for SharedBeaconRecord);
        goto LABEL_24;
      }
    }
    sub_1000126B0(v58, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v63, &qword_1010ED860);
LABEL_24:
    v65 = v193;
    goto LABEL_25;
  }
  v200 = 0;
  memset(v199, 0, sizeof(v199));
  sub_100004048((uint64_t)v199, (uint64_t *)&unk_1010EE310);
  v64 = v194;
  v62 = v195;
  v65 = v193;
  if ((v194 & 0x280) != 0)
  {
    sub_100030784(v44, (uint64_t)&v202);
    v66 = swift_dynamicCast(v20, &v202, v189, v21, 6);
    v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    if ((v66 & 1) != 0)
    {
      v47 = v44;
      v67(v20, 0, 1, v21);
      v68 = v181;
      sub_1000126EC((uint64_t)v20, v181, type metadata accessor for BeaconNamingRecord);
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v69 = type metadata accessor for Logger(0);
      v70 = sub_10001A9E8(v69, (uint64_t)qword_1011B7598);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.default.getter(v71);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "Updating sessions for name record changes.", v73, 2u);
        swift_slowDealloc(v73, -1, -1);
      }

      v74 = sub_10001A9A8(&qword_1011003C0);
      v75 = v197;
      v76 = *(unsigned __int8 *)(v197 + 80);
      v77 = (v76 + 32) & ~v76;
      v78 = swift_allocObject(v74, v77 + *(_QWORD *)(v197 + 72), v76 | 7);
      *(_OWORD *)(v78 + 16) = xmmword_100E22B00;
      v79 = v78 + v77;
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16);
      v81 = v198;
      v80(v78 + v77, v68 + *(int *)(v21 + 24), v198);
      v82 = sub_1003B9FE0(v78);
      swift_setDeallocating(v78);
      swift_arrayDestroy(v79, 1, v81);
      swift_deallocClassInstance(v78, 32, 7);
      type metadata accessor for Transaction(0);
      v83 = (_QWORD *)swift_allocObject(&unk_10108CF28, 48, 7);
      v83[2] = v65;
      v83[3] = v82;
      v83[4] = 0;
      v83[5] = v62;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v82);
      static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A48, v83);
      swift_release(v83);
      swift_bridgeObjectRelease();
      sub_1000126B0(v68, type metadata accessor for BeaconNamingRecord);
      goto LABEL_26;
    }
    v67(v20, 1, 1, v21);
    sub_100004048((uint64_t)v20, (uint64_t *)&unk_101105880);
    if ((v64 & 0x200) != 0)
    {
      sub_100030784(v44, (uint64_t)&v202);
      v84 = v189;
      v85 = v180;
      v86 = swift_dynamicCast(v43, &v202, v189, v180, 6);
      v87 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56);
      if (v86)
      {
        v87(v43, 0, 1, v85);
        v88 = v176;
        sub_1000126EC(v43, v176, type metadata accessor for LostModeRecord);
        if (qword_1010E9ED8 != -1)
          swift_once(&qword_1010E9ED8, sub_1007116BC);
        v89 = type metadata accessor for Logger(0);
        v90 = sub_10001A9E8(v89, (uint64_t)qword_1011B7598);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter(v91);
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v93 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "Updating sessions for Lost Mode changes.", v93, 2u);
          swift_slowDealloc(v93, -1, -1);
        }

        v94 = sub_10001A9A8(&qword_1011003C0);
        v95 = v197;
        v96 = *(unsigned __int8 *)(v197 + 80);
        v97 = (v96 + 32) & ~v96;
        v98 = swift_allocObject(v94, v97 + *(_QWORD *)(v197 + 72), v96 | 7);
        *(_OWORD *)(v98 + 16) = xmmword_100E22B00;
        v99 = v98 + v97;
        v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
        v101 = v198;
        v100(v98 + v97, v88 + *(int *)(v180 + 24), v198);
        v102 = sub_1003B9FE0(v98);
        swift_setDeallocating(v98);
        swift_arrayDestroy(v99, 1, v101);
        swift_deallocClassInstance(v98, 32, 7);
        type metadata accessor for Transaction(0);
        v103 = (_QWORD *)swift_allocObject(&unk_10108CF00, 48, 7);
        v103[2] = v65;
        v103[3] = v102;
        v103[4] = 0;
        v103[5] = v62;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v102);
        static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A40, v103);
        swift_release(v103);
        swift_bridgeObjectRelease();
        v104 = type metadata accessor for LostModeRecord;
        v105 = v88;
      }
      else
      {
        v87(v43, 1, 1, v85);
        sub_100004048(v43, (uint64_t *)&unk_1010F47F0);
        sub_100030784(v44, (uint64_t)&v202);
        v156 = (uint64_t)v174;
        v157 = v175;
        v158 = swift_dynamicCast(v174, &v202, v84, v175, 6);
        v159 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56);
        if ((v158 & 1) == 0)
        {
          v159(v156, 1, 1, v157);
          sub_100004048(v156, &qword_101106E40);
          goto LABEL_27;
        }
        v159(v156, 0, 1, v157);
        v160 = v172;
        sub_1000126EC(v156, v172, type metadata accessor for SafeLocation);
        if (qword_1010E9ED8 != -1)
          swift_once(&qword_1010E9ED8, sub_1007116BC);
        v161 = type metadata accessor for Logger(0);
        v162 = sub_10001A9E8(v161, (uint64_t)qword_1011B7598);
        v163 = Logger.logObject.getter(v162);
        v164 = static os_log_type_t.default.getter(v163);
        if (os_log_type_enabled(v163, v164))
        {
          v165 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v165 = 0;
          _os_log_impl((void *)&_mh_execute_header, v163, v164, "Updating sessions for Safe Location changes.", v165, 2u);
          swift_slowDealloc(v165, -1, -1);
        }

        swift_bridgeObjectRetain(*(_QWORD *)(v160 + *(int *)(v157 + 52)));
        v167 = sub_10001B664(v166);
        swift_bridgeObjectRelease();
        type metadata accessor for Transaction(0);
        v168 = (_QWORD *)swift_allocObject(&unk_10108CED8, 48, 7);
        v168[2] = v65;
        v168[3] = v167;
        v168[4] = 0;
        v168[5] = v62;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain(v167);
        static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A38, v168);
        swift_release(v168);
        swift_bridgeObjectRelease();
        v104 = type metadata accessor for SafeLocation;
        v105 = v160;
      }
      sub_1000126B0(v105, v104);
    }
  }
LABEL_27:
  if ((v64 & 0x220) == 0)
    return swift_release(v65);
  sub_100030784(v44, (uint64_t)&v202);
  v115 = (uint64_t)v191;
  v116 = v189;
  v117 = v192;
  v118 = swift_dynamicCast(v191, &v202, v189, v192, 6);
  v119 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56);
  if ((v118 & 1) != 0)
  {
    v119(v115, 0, 1, v117);
    v120 = v188;
    sub_1000126EC(v115, v188, type metadata accessor for OwnerSharingCircle);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v121 = type metadata accessor for Logger(0);
    v122 = sub_10001A9E8(v121, (uint64_t)qword_1011B7598);
    v123 = Logger.logObject.getter(v122);
    v124 = static os_log_type_t.default.getter(v123);
    if (os_log_type_enabled(v123, v124))
    {
      v125 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v125 = 0;
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "Updating sessions for sharing changes [OwnerSharingCircle].", v125, 2u);
      swift_slowDealloc(v125, -1, -1);
    }

    v126 = sub_10001A9A8(&qword_1011003C0);
    v127 = v197;
    v128 = *(unsigned __int8 *)(v197 + 80);
    v129 = (v128 + 32) & ~v128;
    v130 = swift_allocObject(v126, v129 + *(_QWORD *)(v197 + 72), v128 | 7);
    *(_OWORD *)(v130 + 16) = xmmword_100E22B00;
    v131 = v130 + v129;
    v132 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16);
    v133 = v198;
    v132(v130 + v129, v120 + *(int *)(v117 + 24), v198);
    v134 = sub_1003B9FE0(v130);
    swift_setDeallocating(v130);
    swift_arrayDestroy(v131, 1, v133);
    swift_deallocClassInstance(v130, 32, 7);
    type metadata accessor for Transaction(0);
    v135 = (_QWORD *)swift_allocObject(&unk_10108CEB0, 48, 7);
    v135[2] = v65;
    v135[3] = v134;
    v135[4] = 0;
    v135[5] = v62;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v134);
    static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A30, v135);
    swift_release(v135);
    swift_bridgeObjectRelease();
    swift_release(v65);
    v136 = type metadata accessor for OwnerSharingCircle;
    return sub_1000126B0(v120, v136);
  }
  v119(v115, 1, 1, v117);
  sub_100004048(v115, &qword_1010EE0E0);
  sub_100030784(v44, (uint64_t)&v202);
  v137 = (uint64_t)v186;
  v138 = v187;
  v139 = swift_dynamicCast(v186, &v202, v116, v187, 6);
  v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v185 + 56);
  if ((v139 & 1) != 0)
  {
    v140(v137, 0, 1, v138);
    v120 = v182;
    sub_1000126EC(v137, v182, type metadata accessor for MemberSharingCircle);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v141 = type metadata accessor for Logger(0);
    v142 = sub_10001A9E8(v141, (uint64_t)qword_1011B7598);
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.default.getter(v143);
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v145 = 0;
      _os_log_impl((void *)&_mh_execute_header, v143, v144, "Updating sessions for sharing changes [MemberSharingCircle].", v145, 2u);
      swift_slowDealloc(v145, -1, -1);
    }

    v146 = sub_10001A9A8(&qword_1011003C0);
    v147 = v197;
    v148 = *(unsigned __int8 *)(v197 + 80);
    v149 = (v148 + 32) & ~v148;
    v150 = swift_allocObject(v146, v149 + *(_QWORD *)(v197 + 72), v148 | 7);
    *(_OWORD *)(v150 + 16) = xmmword_100E22B00;
    v151 = v150 + v149;
    v152 = v120 + *(int *)(v138 + 24);
    v153 = v198;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 16))(v150 + v149, v152, v198);
    v154 = sub_1003B9FE0(v150);
    swift_setDeallocating(v150);
    swift_arrayDestroy(v151, 1, v153);
    swift_deallocClassInstance(v150, 32, 7);
    type metadata accessor for Transaction(0);
    v155 = (_QWORD *)swift_allocObject(&unk_10108CE88, 48, 7);
    v155[2] = v65;
    v155[3] = v154;
    v155[4] = 0;
    v155[5] = v62;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v154);
    static Transaction.asyncTask(name:block:)("SimpleBeaconUpdate-receivedSimpleBeacons", 40, 2, &unk_101105A28, v155);
    swift_release(v155);
    swift_release(v65);
    swift_bridgeObjectRelease();
    v136 = type metadata accessor for MemberSharingCircle;
    return sub_1000126B0(v120, v136);
  }
  v140(v137, 1, 1, v138);
  swift_release(v65);
  return sub_100004048(v137, (uint64_t *)&unk_101111440);
}

uint64_t sub_1007179B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100717A14, 0, 0);
}

uint64_t sub_100717A14()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = v0 + 17;
  if (v0[39])
  {
    v2 = v0[33];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    CurrentValueSubject.value.getter(v0 + 32);
    v0[40] = v0[32];
    return swift_task_switch(sub_100717AC4, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = (_QWORD *)swift_task_alloc(dword_1011055D4);
    v0[41] = v4;
    *v4 = v0;
    v4[1] = sub_10001DEDC;
    return sub_10001DE80();
  }
}

uint64_t sub_100717AC4()
{
  uint64_t v0;

  sub_10000A0B8(*(_QWORD *)(v0 + 320));
  return swift_task_switch(sub_100717B04, 0, 0);
}

uint64_t sub_100717B04()
{
  uint64_t v0;
  _QWORD *v1;

  swift_release(*(_QWORD *)(v0 + 312));
  v1 = (_QWORD *)swift_task_alloc(dword_1011055D4);
  *(_QWORD *)(v0 + 328) = v1;
  *v1 = v0;
  v1[1] = sub_10001DEDC;
  return sub_10001DE80();
}

uint64_t sub_100717B54()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_100717B6C, v0, 0);
}

uint64_t sub_100717B6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7598);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pre-throttle updateAllBeacons.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v0[2] = 0xD000000000000010;
  v0[3] = 0x8000000100EE2500;
  v6 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
       + 1);
  v9 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[5] = v7;
  *v7 = v0;
  v7[1] = sub_100717CD0;
  return ((uint64_t (*)(_QWORD *, void *, _QWORD, uint64_t (*)(_QWORD), _QWORD))v9)(v0 + 2, &unk_101105958, v0[4], SharingCircleWildAdvertisementKey.init(key:), 0);
}

uint64_t sub_100717CD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
    return swift_task_switch(sub_100717D58, *(_QWORD *)(v3 + 32), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100717D58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100717D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for UUID(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100717DBC, 0, 0);
}

uint64_t sub_100717DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v3 = swift_retain(v2);
  UUID.init()(v3);
  v4 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101105968, v2, &unk_101105970, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v4);
  swift_release(v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_100717E58(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch(sub_100717E70, 0, 0);
}

uint64_t sub_100717E70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7598);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Post-throttle updateAllBeacons.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[3];

  v7 = *(_QWORD *)(v6 + 128);
  v8 = swift_task_alloc(32);
  v0[4] = v8;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 512;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v9;
  v10 = sub_10001A9A8(&qword_1011058D0);
  *v9 = v0;
  v9[1] = sub_100717FD4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001BLL, 0x8000000100EE2520, sub_1007281C0, v8, v10);
}

uint64_t sub_100717FD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100718030, 0, 0);
}

uint64_t sub_100718030()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[2];
  v0[6] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1011055E4);
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_100718094;
  v3 = v0[3];
  v2[18] = v1;
  v2[19] = v3;
  return swift_task_switch(sub_10000F8A4, v3, 0);
}

uint64_t sub_100718094()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1007180E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = v1;
  return swift_task_switch(sub_10000F8A4, v1, 0);
}

uint64_t sub_100718100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v3[15] = v8;
  v3[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007181A0, 0, 0);
}

uint64_t sub_1007181A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = v1[3];
  v4 = v1[4];
  sub_10001AA44(v1, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 32))(v3);
  return swift_task_switch(sub_10071820C, v2, 0);
}

uint64_t sub_10071820C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[13];
  v3 = v0[11];
  v2 = v0[12];
  v5 = v0[9];
  v4 = v0[10];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[14], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108CC80, v7 + v2, v6 | 7);
  v0[17] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[18] = v9;
  v9(v8 + v7, v1, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[19] = v11;
  *v11 = v0;
  v11[1] = sub_1007182E4;
  return unsafeBlocking<A>(_:)(v0[16], sub_100728110, v8, v0[15]);
}

uint64_t sub_1007182E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_100718364, 0, 0);
}

uint64_t sub_100718364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_100030784(*(_QWORD *)(v0 + 64), v0 + 16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 40);
    sub_10001AA44((_QWORD *)(v0 + 16), v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v6);
    sub_100004048(v4, &qword_1010ED860);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 80));
  }
  v7 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100718458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[12] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007184BC, v2, 0);
}

uint64_t sub_1007184BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7598);
  v3 = sub_100030784(v1, v0 + 16);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 112);
    v34 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(32, -1);
    v36 = v35;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = *(_QWORD *)(v0 + 40);
    v9 = *(_QWORD *)(v0 + 48);
    sub_10001AA44((_QWORD *)(v0 + 16), v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 32))(v10);
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v6, v7);
    *(_QWORD *)(v0 + 64) = sub_100016940(v12, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "updateBeaconConnectedState. Beacon: %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  }

  v16 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v19 = *(_QWORD **)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 80);
  v21 = sub_10001A9A8(&qword_1011003C0);
  v22 = *(_QWORD *)(v16 + 72);
  v23 = *(unsigned __int8 *)(v16 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = swift_allocObject(v21, v24 + v22, v23 | 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
  v26 = v25 + v24;
  v27 = v19[3];
  v28 = v19[4];
  sub_10001AA44(v19, v27);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
  v29 = sub_1003B9FE0(v25);
  swift_setDeallocating(v25);
  swift_arrayDestroy(v26, 1, v18);
  swift_deallocClassInstance(v25, 32, 7);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v30 = (_QWORD *)swift_allocObject(&unk_10108CC58, 48, 7);
  v30[2] = v17;
  v30[3] = v29;
  v30[4] = 0;
  v30[5] = v20;
  swift_retain();
  swift_bridgeObjectRetain(v29);
  v31 = swift_retain();
  UUID.init()(v31);
  v32 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v15, &unk_101105928, v30, &unk_101105930, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100718848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[8] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v7);
  v3[10] = swift_task_alloc(v7);
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v3[13] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v9);
  v3[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_100718910, 0, 0);
}

uint64_t sub_100718910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, unint64_t, uint64_t, __n128);
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 184) = v3;
  v4 = -1;
  v5 = -1 << v3;
  if (-(-1 << v3) < 64)
    v4 = ~(-1 << -(char)(-1 << v3));
  v6 = v4 & *(_QWORD *)(v1 + 56);
  v7 = swift_bridgeObjectRetain_n(v1, 2);
  if (v6)
  {
    v8 = 0;
    v9 = __clz(__rbit64(v6));
    v10 = (v6 - 1) & v6;
    goto LABEL_5;
  }
  v22 = 63 - v5;
  if ((unint64_t)(63 - v5) <= 0x7F)
    goto LABEL_26;
  v23 = *(_QWORD *)(v1 + 64);
  if (!v23)
  {
    if (v22 >= 0xC0)
    {
      v23 = *(_QWORD *)(v1 + 72);
      if (v23)
      {
        v8 = 2;
        goto LABEL_10;
      }
      if (v22 >= 0x100)
      {
        v23 = *(_QWORD *)(v1 + 80);
        if (v23)
        {
          v8 = 3;
          goto LABEL_10;
        }
        if (v22 >= 0x140)
        {
          v23 = *(_QWORD *)(v1 + 88);
          if (v23)
          {
            v8 = 4;
            goto LABEL_10;
          }
          v24 = 0;
          v25 = v22 >> 6;
          if (v25 <= 5)
            v25 = 5;
          v26 = v25 - 5;
          while (v26 != v24)
          {
            v23 = *(_QWORD *)(v1 + 96 + 8 * v24++);
            if (v23)
            {
              v8 = v24 + 4;
              goto LABEL_10;
            }
          }
        }
      }
    }
LABEL_26:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))(v2 + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 48), v7);
    goto LABEL_27;
  }
  v8 = 1;
LABEL_10:
  v10 = (v23 - 1) & v23;
  v9 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_5:
  *(_QWORD *)(v0 + 128) = v8;
  *(_QWORD *)(v0 + 136) = v10;
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 48);
  v13 = *(_QWORD *)(v1 + 48) + *(_QWORD *)(v2 + 72) * v9;
  v14 = *(void (**)(uint64_t, unint64_t, uint64_t, __n128))(v2 + 16);
  *(_QWORD *)(v0 + 144) = v14;
  v14(v11, v13, v12, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56))(v11, 0, 1, v12);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(_QWORD *)(v0 + 152) = v15;
  if (v15(v11, 1, v12) != 1)
  {
    v16 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 48);
    v19 = *(_QWORD *)(v0 + 32);
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 32);
    *(_QWORD *)(v0 + 160) = v20;
    v20(v17, v16, v18);
    return swift_task_switch(sub_100718C10, v19, 0);
  }
LABEL_27:
  swift_release();
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 120);
  v29 = *(_QWORD *)(v0 + 96);
  v36 = *(_QWORD *)(v0 + 88);
  v37 = *(_QWORD *)(v0 + 80);
  v38 = *(_QWORD *)(v0 + 72);
  v30 = *(_QWORD *)(v0 + 40);
  v31 = *(_QWORD *)(v0 + 16);
  v32 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v33 = (_QWORD *)swift_allocObject(&unk_10108CE38, 40, 7);
  v33[2] = v32;
  v33[3] = v30;
  v33[4] = v31;
  swift_bridgeObjectRetain(v32);
  v34 = swift_retain();
  UUID.init()(v34);
  v35 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v29, &unk_101105A00, v33, &unk_101105A08, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v35);
  swift_release();
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100718C10()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 144))(v2, *(_QWORD *)(v0 + 88), v5);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_10108CE60, v8 + v3, v7 | 7);
  *(_QWORD *)(v0 + 168) = v9;
  *(_QWORD *)(v9 + 16) = v6;
  v1(v9 + v8, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 176) = v11;
  *v11 = v0;
  v11[1] = sub_100718CE8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 112), sub_100728110, v9, *(_QWORD *)(v0 + 104));
}

uint64_t sub_100718CE8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_100718D44, 0, 0);
}

uint64_t sub_100718D44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, unint64_t, uint64_t);
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  int64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 152))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 88), v2);
    result = sub_100004048(v1, &qword_1010ED860);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    if (v5)
    {
LABEL_3:
      v6 = (v5 - 1) & v5;
      v7 = __clz(__rbit64(v5)) | (v4 << 6);
      v8 = *(_QWORD *)(v0 + 24);
      goto LABEL_4;
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 144);
    v17 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v19 = *(char **)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 160))(v18, v1, v2);
    v15(v19, v18, v2);
    sub_100A09F38(v16, v19);
    v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v21(v16, v2);
    v21(v18, v2);
    result = ((uint64_t (*)(uint64_t, uint64_t))v21)(v17, v2);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 136);
    if (v5)
      goto LABEL_3;
  }
  v22 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v23 = (unint64_t)((1 << *(_BYTE *)(v0 + 184)) + 63) >> 6;
    v8 = *(_QWORD *)(v0 + 24);
    if (v22 >= v23)
      goto LABEL_22;
    v24 = v8 + 56;
    v25 = *(_QWORD *)(v8 + 56 + 8 * v22);
    ++v4;
    if (v25)
    {
LABEL_10:
      v6 = (v25 - 1) & v25;
      v7 = __clz(__rbit64(v25)) + (v4 << 6);
LABEL_4:
      *(_QWORD *)(v0 + 128) = v4;
      *(_QWORD *)(v0 + 136) = v6;
      v9 = *(_QWORD *)(v0 + 120);
      v10 = *(_QWORD *)(v0 + 48);
      v11 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v8 + 48) + *(_QWORD *)(v11 + 72) * v7;
      v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16);
      *(_QWORD *)(v0 + 144) = v13;
      v13(v9, v12, v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
      v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      *(_QWORD *)(v0 + 152) = v14;
      if (v14(v9, 1, v10) != 1)
      {
        v26 = *(_QWORD *)(v0 + 120);
        v27 = *(_QWORD *)(v0 + 88);
        v28 = *(_QWORD *)(v0 + 48);
        v29 = *(_QWORD *)(v0 + 32);
        v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 56) + 32);
        *(_QWORD *)(v0 + 160) = v30;
        v30(v27, v26, v28);
        return swift_task_switch(sub_100718C10, v29, 0);
      }
      goto LABEL_23;
    }
    v4 = v22 + 1;
    if (v22 + 1 >= v23)
      goto LABEL_22;
    v25 = *(_QWORD *)(v24 + 8 * v4);
    if (v25)
      goto LABEL_10;
    v4 = v22 + 2;
    if (v22 + 2 >= v23)
      goto LABEL_22;
    v25 = *(_QWORD *)(v24 + 8 * v4);
    if (v25)
      goto LABEL_10;
    v31 = v22 + 3;
    if (v31 >= v23)
    {
LABEL_22:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 48));
LABEL_23:
      swift_release();
      v32 = *(_QWORD *)(v0 + 112);
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 96);
      v41 = *(_QWORD *)(v0 + 88);
      v42 = *(_QWORD *)(v0 + 80);
      v43 = *(_QWORD *)(v0 + 72);
      v35 = *(_QWORD *)(v0 + 40);
      v36 = *(_QWORD *)(v0 + 16);
      v37 = *(_QWORD *)(v0 + 24);
      type metadata accessor for WorkItemQueue.WorkItem(0);
      v38 = (_QWORD *)swift_allocObject(&unk_10108CE38, 40, 7);
      v38[2] = v37;
      v38[3] = v35;
      v38[4] = v36;
      swift_bridgeObjectRetain(v37);
      v39 = swift_retain();
      UUID.init()(v39);
      v40 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v34, &unk_101105A00, v38, &unk_101105A08, 0);
      dispatch thunk of WorkItemQueue.enqueue(_:)(v40);
      swift_release();
      swift_task_dealloc(v33);
      swift_task_dealloc(v32);
      swift_task_dealloc(v34);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v25 = *(_QWORD *)(v24 + 8 * v31);
    if (v25)
    {
      v4 = v31;
      goto LABEL_10;
    }
    while (1)
    {
      v4 = v31 + 1;
      if (__OFADD__(v31, 1))
        break;
      if (v4 >= v23)
        goto LABEL_22;
      v25 = *(_QWORD *)(v24 + 8 * v4);
      ++v31;
      if (v25)
        goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1007190C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return swift_task_switch(sub_1007190E4, 0, 0);
}

uint64_t sub_1007190E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;

  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v1 = v0[6];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7598);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[6];
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 141558275;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    swift_bridgeObjectRetain(v7);
    v13 = Set.description.getter(v12, v10, v11);
    v15 = v14;
    swift_bridgeObjectRelease();
    v0[5] = sub_100016940(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating sessions for BeaconRecord removed. Beacons: %{private,mask.hash}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[6], 2);
  }

  v16 = *(_QWORD *)(v0[7] + 128);
  swift_bridgeObjectRetain(v0[6]);
  v18 = sub_100508DAC(v17);
  v0[9] = v18;
  swift_bridgeObjectRelease();
  v19 = swift_task_alloc(32);
  v0[10] = v19;
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[11] = v20;
  v21 = sub_10001A9A8(&qword_1011058D0);
  *v20 = v0;
  v20[1] = sub_1007193B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001ELL, 0x8000000100EE24E0, sub_100728864, v19, v21);
}

uint64_t sub_1007193B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10071940C, 0, 0);
}

uint64_t sub_10071940C()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  uint64_t *v3;
  Class isa;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  swift_release();
  v19 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v19 + 16);
  if (!v1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = (void **)(v0 + 24);
  v20 = *(_QWORD *)(v0 + 64);
  v3 = (uint64_t *)(v19 + 72);
  while (1)
  {
    v5 = *v3;
    swift_bridgeObjectRetain(*(v3 - 2));
    swift_retain();
    swift_bridgeObjectRetain(v5);
    XPCSession.proxy.getter(v2);
    v6 = *v2;
    if (!*v2)
      goto LABEL_4;
    v7 = *(_QWORD *)(v20 + 16);
    if (v7)
      break;
LABEL_3:
    type metadata accessor for UUID(0);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    objc_msgSend(v6, "receivedSimpleBeaconRemovals:", isa);
    swift_unknownObjectRelease(v6);

LABEL_4:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 += 6;
    if (!--v1)
      goto LABEL_14;
  }
  v21 = *v2;
  v8 = sub_10001A9A8(&qword_1011003C0);
  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = (_QWORD *)swift_allocObject(v8, v12 + v10 * v7, v11 | 7);
  result = j__malloc_size(v13);
  if (v10)
  {
    if (result - v12 == 0x8000000000000000 && v10 == -1)
      goto LABEL_17;
    v16 = v2;
    v17 = *(_QWORD *)(v0 + 64);
    v13[2] = v7;
    v13[3] = 2 * ((result - v12) / v10);
    swift_bridgeObjectRetain_n(v17, 2);
    v18 = sub_10050AE8C(&v22, (uint64_t)v13 + v12, v7, v17);
    result = sub_10007CC38(v22);
    if (v18 != v7)
      goto LABEL_16;
    swift_bridgeObjectRelease();
    v2 = v16;
    v6 = v21;
    goto LABEL_3;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_100719620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v6 = type metadata accessor for UUID(0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100719680, a1, 0);
}

uint64_t sub_100719680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v6 = (_QWORD *)swift_allocObject(&unk_10108CF78, 48, 7);
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = v3;
  v6[5] = v2;
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  swift_retain(v5);
  v7 = swift_bridgeObjectRetain(v4);
  UUID.init()(v7);
  v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101105A58, v6, &unk_101105930, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100719764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_1011055F4);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100030654;
  return sub_1000134A0(a2, a3, a4);
}

uint64_t sub_1007197D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 736) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 720);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 744) = v2;
  v3 = sub_10001A9A8(&qword_1011058D0);
  *v2 = v0;
  v2[1] = sub_100719880;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 432, 0, 0, 0xD00000000000001ELL, 0x8000000100EE24E0, sub_100727EFC, v1, v3);
}

uint64_t sub_100719880()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 736);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 744));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1007198E0, 0, 0);
}

uint64_t sub_1007198E0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[67];
  swift_release(v0[91]);
  v0[94] = v0[54];
  return swift_task_switch(sub_100719928, v1, 0);
}

uint64_t sub_100719928()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[65];
  v0[95] = v0[94];
  v0[62] = v0[64];
  v2 = async function pointer to Sequence.asyncMap<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[96] = v3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
  v5 = sub_1000193A4((unint64_t *)&unk_1011058F0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
  *v3 = v0;
  v3[1] = sub_100005230;
  return Sequence.asyncMap<A>(_:)(&unk_1011058E0, v0[66], v4, v0[74], v5);
}

uint64_t sub_1007199E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[81];
  v2 = v0[76];
  v3 = v0[75];
  v4 = v0[74];
  v5 = v0[66];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[82], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108CBB8, v7 + v2, v6 | 7);
  v0[111] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[112] = v10;
  v11 = sub_10001A9A8(&qword_1010EC840);
  *v10 = v0;
  v10[1] = sub_100719ADC;
  return unsafeBlocking<A>(_:)(v0 + 55, sub_1005AC640, v8, v11);
}

uint64_t sub_100719ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 896));
  swift_release(v1);
  return swift_task_switch(sub_100719B40, v2, 0);
}

uint64_t sub_100719B40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[82];
  v2 = v0[75];
  v3 = v0[74];
  v4 = v0[67];
  v0[113] = v0[55];
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100719B94, v4, 0);
}

void sub_100719B94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  Class isa;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  void (*v93)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t My;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v135 = (_QWORD *)(v0 + 16);
  v136 = (_QWORD *)(v0 + 56);
  v137 = v0 + 96;
  v132 = (_QWORD *)(v0 + 136);
  v133 = (_QWORD *)(v0 + 256);
  v134 = (_QWORD *)(v0 + 296);
  v1 = (_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 904);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 568) + 80);
    sub_10005972C(v2 + ((v3 + 32) & ~v3), *(_QWORD *)(v0 + 672), type metadata accessor for MemberSharingCircle);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v5 = (uint64_t *)(v0 + 464);
  v6 = (uint64_t *)(v0 + 480);
  v7 = *(_QWORD *)(v0 + 672);
  v8 = *(_QWORD *)(v0 + 664);
  v9 = *(_QWORD *)(v0 + 568);
  v10 = *(_QWORD *)(v0 + 560);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v4, 1, v10);
  swift_bridgeObjectRelease();
  sub_100005CF0(v7, v8, (uint64_t *)&unk_101111440);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v10);
  v12 = *(_QWORD *)(v0 + 664);
  if (v11 == 1)
  {
    sub_100004048(v12, (uint64_t *)&unk_101111440);
LABEL_8:
    v17 = (_QWORD *)(v0 + 216);
LABEL_9:
    v18 = *(_QWORD *)(v0 + 872);
    v19 = *(_QWORD *)(v0 + 480);
    *(_QWORD *)(v0 + 912) = v19;
    v20 = *(_QWORD *)(v18 + 16);
    v21 = (uint64_t)v17;
    v22 = (_QWORD *)(v0 + 16);
    sub_100030784(v21, (uint64_t)v135);
    if (v20)
    {
      v23 = *(_QWORD *)(v0 + 872);
      v24 = *(_QWORD *)(v0 + 600);
      v25 = *(_QWORD *)(v0 + 40);
      v26 = *(_QWORD *)(v0 + 48);
      sub_10001AA44(v135, v25);
      v27 = *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8);
      v28 = *(void (**)(uint64_t, uint64_t, __n128))(v27 + 32);
      swift_bridgeObjectRetain(v23);
      v29 = swift_bridgeObjectRetain(v19);
      v28(v25, v27, v29);
      v30 = v23 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      v31 = *(_QWORD *)(v24 + 72);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16);
      v33 = swift_bridgeObjectRetain(v23);
      while (1)
      {
        v34 = *(_QWORD *)(v0 + 600);
        v35 = *(_QWORD *)(v0 + 592);
        v36 = *(_QWORD *)(v0 + 552);
        v32(v36, v30, v35, v33);
        v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
        v37(v36, 0, 1, v35);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v36, 1, v35) == 1)
        {
          v44 = *(_QWORD *)(v0 + 600);
          swift_bridgeObjectRelease();
          v43 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
          goto LABEL_16;
        }
        v38 = *(_QWORD *)(v0 + 640);
        v39 = *(_QWORD *)(v0 + 632);
        v40 = *(_QWORD *)(v0 + 600);
        v41 = *(_QWORD *)(v0 + 592);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 32))(v39, *(_QWORD *)(v0 + 552), v41);
        v42 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v38) = dispatch thunk of static Equatable.== infix(_:_:)(v39, v38, v41, v42);
        v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v43(v39, v41);
        if ((v38 & 1) != 0)
          break;
        v30 += v31;
        if (!--v20)
        {
          v37(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 592));
          swift_bridgeObjectRelease();
LABEL_16:
          v17 = (_QWORD *)(v0 + 216);
          v5 = (uint64_t *)(v0 + 464);
          v1 = (_QWORD *)(v0 + 472);
          v6 = (uint64_t *)(v0 + 480);
          v43(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 592));
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v135);
          swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      v46 = *(_QWORD *)(v0 + 640);
      v47 = *(_QWORD *)(v0 + 592);
      swift_bridgeObjectRelease();
      v43(v46, v47);
      swift_bridgeObjectRelease();
      v22 = (_QWORD *)(v0 + 16);
    }
    else
    {
      swift_bridgeObjectRetain(v19);
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
    v48 = (_QWORD *)swift_task_alloc(dword_1011055FC);
    *(_QWORD *)(v0 + 920) = v48;
    *v48 = v0;
    v48[1] = sub_10071A83C;
    sub_10071BBAC(v0 + 216, *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 848));
    return;
  }
  v13 = *(_QWORD *)(v0 + 584);
  v14 = *(_QWORD *)(v0 + 576);
  v15 = *(_QWORD *)(v0 + 560);
  sub_1000126EC(v12, v13, type metadata accessor for MemberSharingCircle);
  LODWORD(v15) = *(unsigned __int8 *)(v13 + *(int *)(v15 + 40));
  sub_1000126EC(v13, v14, type metadata accessor for MemberSharingCircle);
  v16 = *(_QWORD *)(v0 + 576);
  if ((_DWORD)v15 == 1)
  {
    sub_1000126B0(v16, type metadata accessor for MemberSharingCircle);
    goto LABEL_8;
  }
  v45 = *(unsigned __int8 *)(v16 + *(int *)(*(_QWORD *)(v0 + 560) + 40));
  sub_1000126B0(v16, type metadata accessor for MemberSharingCircle);
  v17 = (_QWORD *)(v0 + 216);
  if (v45 == 4)
    goto LABEL_9;
LABEL_24:
  while (1)
  {
    v50 = *(_QWORD *)(v0 + 824);
    v51 = *(_QWORD *)(v0 + 880) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
    if (v51 == v50)
      break;
    v84 = *(_QWORD *)(v0 + 880) + 1;
LABEL_50:
    *(_QWORD *)(v0 + 880) = v84;
    v85 = *(_QWORD *)(v0 + 808);
    if (v84 >= *(_QWORD *)(v85 + 16))
      goto LABEL_73;
    sub_100030784(v85 + 40 * v84 + 32, (uint64_t)v17);
    v86 = *(_QWORD *)(v0 + 240);
    v87 = *(_QWORD *)(v0 + 248);
    sub_10001AA44(v17, v86);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v87 + 112))(v86, v87) & 1) == 0)
      goto LABEL_58;
    v88 = *(_QWORD *)(v0 + 696);
    v89 = *(_QWORD *)(v0 + 688);
    v90 = *(_QWORD *)(v0 + 680);
    sub_100030784((uint64_t)v17, v137);
    v91 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v92 = swift_dynamicCast(v90, v137, v91, v89, 6);
    v93 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v88 + 56);
    if (!v92)
    {
      v102 = *(_QWORD *)(v0 + 680);
      v93(v102, 1, 1, *(_QWORD *)(v0 + 688));
      sub_100004048(v102, (uint64_t *)&unk_1010EE180);
      goto LABEL_58;
    }
    v94 = *(unsigned int *)(v0 + 936);
    v95 = *(_QWORD *)(v0 + 712);
    v96 = *(_QWORD *)(v0 + 680);
    v93(v96, 0, 1, *(_QWORD *)(v0 + 688));
    sub_1000126EC(v96, v95, type metadata accessor for SharedBeaconRecord);
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v0 + 80) = My;
    *(_QWORD *)(v0 + 88) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v98 = sub_100018F08(v136);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v98, v94, My);
    LOBYTE(v94) = isFeatureEnabled(_:)(v136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v136);
    v49 = *(_QWORD *)(v0 + 712);
    if ((v94 & 1) != 0)
    {
      v99 = *(unsigned __int8 *)(v49 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
      sub_10005972C(v49, *(_QWORD *)(v0 + 704), type metadata accessor for SharedBeaconRecord);
      v100 = *(_QWORD *)(v0 + 704);
      if (v99 == 4)
      {
        sub_1000126B0(v100, type metadata accessor for SharedBeaconRecord);
LABEL_22:
        v49 = *(_QWORD *)(v0 + 712);
        goto LABEL_23;
      }
      v101 = *(unsigned __int8 *)(v100 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
      sub_1000126B0(v100, type metadata accessor for SharedBeaconRecord);
      if (v101 == 1)
        goto LABEL_22;
      sub_1000126B0(*(_QWORD *)(v0 + 712), type metadata accessor for SharedBeaconRecord);
LABEL_58:
      v103 = *(_QWORD *)(v0 + 240);
      v104 = *(_QWORD *)(v0 + 248);
      sub_10001AA44(v17, v103);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v104 + 160))(v103, v104) & 1) == 0)
      {
        v105 = *(_QWORD *)(v0 + 848);
        v106 = *(_QWORD *)(v0 + 240);
        v107 = *(_QWORD *)(v0 + 248);
        sub_10001AA44(v17, v106);
        if ((v105 & 0x200) != 0)
        {
          v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 88))(v106, v107);
          sub_100030784((uint64_t)v17, (uint64_t)v134);
          if ((v108 & 1) != 0)
          {
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
            v112 = (_QWORD *)(v0 + 256);
            sub_100030784((uint64_t)v17, (uint64_t)v133);
LABEL_70:
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v112);
            v116 = (_QWORD *)(v0 + 136);
            sub_100030784((uint64_t)v17, (uint64_t)v132);
LABEL_71:
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
            goto LABEL_9;
          }
          v109 = *(_QWORD *)(v0 + 320);
          v110 = *(_QWORD *)(v0 + 328);
          sub_10001AA44(v134, v109);
          v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 112))(v109, v110);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
          v112 = (_QWORD *)(v0 + 256);
          sub_100030784((uint64_t)v17, (uint64_t)v133);
          if ((v111 & 1) != 0)
            goto LABEL_70;
          v113 = *(_QWORD *)(v0 + 280);
          v114 = *(_QWORD *)(v0 + 288);
          sub_10001AA44(v133, v113);
          v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 96))(v113, v114);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v133);
          v116 = (_QWORD *)(v0 + 136);
          sub_100030784((uint64_t)v17, (uint64_t)v132);
          if ((v115 & 1) != 0)
            goto LABEL_71;
          v117 = *(_QWORD *)(v0 + 160);
          v118 = *(_QWORD *)(v0 + 168);
          sub_10001AA44(v132, v117);
          v119 = (*(uint64_t (**)(uint64_t, uint64_t))(v118 + 128))(v117, v118);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v132);
          if ((v119 & 1) != 0)
            goto LABEL_9;
        }
        else if (((*(uint64_t (**)(uint64_t, uint64_t))(v107 + 112))(v106, v107) & 1) != 0)
        {
          v129 = *(_QWORD *)(v0 + 528);
          v130 = *(_QWORD *)(v0 + 240);
          v131 = *(_QWORD *)(v0 + 248);
          sub_10001AA44(v17, v130);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v131 + 8) + 8) + 32))(v130);
          swift_task_switch(sub_1007199E0, v129, 0);
          return;
        }
      }
    }
    else
    {
LABEL_23:
      sub_1000126B0(v49, type metadata accessor for SharedBeaconRecord);
    }
  }
  swift_bridgeObjectRelease();
  v52 = *(_QWORD *)(v0 + 872);
  v53 = *(_QWORD *)(v0 + 864);
  v54 = *(_QWORD *)(v0 + 840);
  while (1)
  {
    swift_retain_n(v54, 2);
    swift_bridgeObjectRetain_n(v53, 2);
    v55 = swift_bridgeObjectRetain_n(v52, 2);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      *v5 = v59;
      *(_DWORD *)v58 = 134218242;
      swift_beginAccess(v6, v0 + 360, 0, 0);
      v60 = *v6;
      if ((unint64_t)*v6 >> 62)
      {
        if (v60 < 0)
          v83 = *v6;
        else
          v83 = v60 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v6);
        v61 = _CocoaArrayWrapper.endIndex.getter(v83);
        swift_bridgeObjectRelease();
      }
      else
      {
        v61 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v62 = *(_QWORD *)(v0 + 872);
      v63 = *(_QWORD *)(v0 + 864);
      v64 = *(_QWORD *)(v0 + 856);
      v65 = *(_QWORD *)(v0 + 840);
      *(_QWORD *)(v58 + 4) = v61;
      *(_WORD *)(v58 + 12) = 2082;
      if (v63)
        v66 = v64;
      else
        v66 = 0x6E776F6E6B6E75;
      if (v63)
        v67 = v63;
      else
        v67 = 0xE700000000000000;
      swift_bridgeObjectRetain(v63);
      v68 = v66;
      v5 = (uint64_t *)(v0 + 464);
      *(_QWORD *)(v58 + 14) = sub_100016940(v68, v67, (uint64_t *)(v0 + 464));
      swift_bridgeObjectRelease_n(v62, 2);
      swift_bridgeObjectRelease_n(v63, 2);
      swift_release_n(v65, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "receivedSimpleBeaconUpdates - updating beacons (count) %ld to bundle: %{public}s.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      v1 = (_QWORD *)(v0 + 472);
      v6 = (uint64_t *)(v0 + 480);
    }
    else
    {
      v69 = *(_QWORD *)(v0 + 872);
      v70 = *(_QWORD *)(v0 + 864);
      v71 = *(_QWORD *)(v0 + 840);

      swift_bridgeObjectRelease_n(v69, 2);
      swift_release_n(v71, 2);
      swift_bridgeObjectRelease_n(v70, 2);
    }
    v72 = *(_QWORD *)(v0 + 840);
    swift_retain();
    XPCSession.proxy.getter(v1);
    swift_release(v72);
    v73 = *(void **)(v0 + 472);
    v74 = *(_QWORD *)(v0 + 840);
    if (v73)
    {
      swift_beginAccess(v6, v0 + 336, 0, 0);
      v75 = *v6;
      sub_10000F4A0(0, (unint64_t *)&unk_101105900, SPInternalSimpleBeacon_ptr);
      swift_bridgeObjectRetain(v75);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v73, "receivedSimpleBeaconUpdates:", isa);

      swift_unknownObjectRelease(v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v74);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release(v74);
      swift_bridgeObjectRelease();
    }
    v77 = *(_QWORD *)(v0 + 816);
    v78 = *(_QWORD *)(v0 + 832) + 1;
    swift_bridgeObjectRelease();
    if (v78 == v77)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v120 = *(_QWORD *)(v0 + 704);
      v121 = *(_QWORD *)(v0 + 680);
      v122 = *(_QWORD *)(v0 + 672);
      v123 = *(_QWORD *)(v0 + 664);
      v124 = *(_QWORD *)(v0 + 656);
      v125 = *(_QWORD *)(v0 + 648);
      v126 = *(_QWORD *)(v0 + 640);
      v127 = *(_QWORD *)(v0 + 632);
      v128 = *(_QWORD *)(v0 + 624);
      v138 = *(_QWORD *)(v0 + 616);
      v139 = *(_QWORD *)(v0 + 584);
      v140 = *(_QWORD *)(v0 + 576);
      v141 = *(_QWORD *)(v0 + 552);
      v142 = *(_QWORD *)(v0 + 544);
      swift_task_dealloc(*(_QWORD *)(v0 + 712));
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v79 = *(_QWORD *)(v0 + 832) + 1;
    *(_QWORD *)(v0 + 832) = v79;
    v80 = *(_QWORD *)(v0 + 760);
    if (v79 >= *(_QWORD *)(v80 + 16))
      break;
    v81 = *(_QWORD *)(v0 + 824);
    v82 = (_QWORD *)(v80 + 48 * v79);
    v54 = v82[4];
    *(_QWORD *)(v0 + 840) = v54;
    *(_QWORD *)(v0 + 848) = v82[5];
    *(_QWORD *)(v0 + 856) = v82[6];
    v53 = v82[7];
    *(_QWORD *)(v0 + 864) = v53;
    v52 = v82[9];
    *(_QWORD *)(v0 + 872) = v52;
    *(_QWORD *)(v0 + 480) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v52);
    if (v81)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 808));
      swift_retain();
      swift_beginAccess(v6, v0 + 384, 0, 0);
      v84 = 0;
      v17 = (_QWORD *)(v0 + 216);
      goto LABEL_50;
    }
    swift_retain();
  }
  __break(1u);
LABEL_73:
  __break(1u);
}

uint64_t sub_10071A83C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 920);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 928) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10071A89C, v3, 0);
}

uint64_t sub_10071A89C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  _BOOL4 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t My;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  void (*v124)(uint64_t, Class, uint64_t, __n128);
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t, __n128);
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;

  v143 = (_QWORD *)(v0 + 16);
  v146 = (_QWORD *)(v0 + 56);
  v149 = v0 + 96;
  v1 = v0 + 136;
  v2 = (_QWORD *)(v0 + 216);
  v3 = (_QWORD *)(v0 + 256);
  v151 = (_QWORD *)(v0 + 296);
  isa = *(Class *)(v0 + 912);
  v5 = objc_msgSend(*(id *)(v0 + 928), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = *(_QWORD *)(v0 + 912);
  if ((unint64_t)isa >> 62)
  {
LABEL_87:
    if (v6 < 0)
      v139 = v6;
    else
      v139 = (unint64_t)isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v7 = _CocoaArrayWrapper.endIndex.getter(v139);
  }
  else
  {
    v7 = *(_QWORD *)(((unint64_t)isa & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v6);
  }
  v144 = (_QWORD *)v1;
  v145 = v3;
  v150 = (uint64_t)v2;
  v160 = (uint64_t *)(v0 + 464);
  if (v7)
  {
    v8 = 0;
    v141 = v0 + 456;
    v142 = (_QWORD *)(v0 + 176);
    v152 = (unint64_t)isa & 0xC000000000000001;
    v147 = *(_QWORD *)(v0 + 912) + 32;
    while (1)
    {
      if (v152)
        v9 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *(_QWORD *)(v0 + 912));
      else
        v9 = *(id *)(v147 + 8 * v8);
      v10 = v9;
      if (__OFADD__(v8, 1))
      {
LABEL_84:
        __break(1u);
LABEL_85:
        swift_bridgeObjectRetain(v7);
        goto LABEL_82;
      }
      v155 = v8 + 1;
      v11 = *(_QWORD *)(v0 + 656);
      v12 = *(_QWORD *)(v0 + 600);
      v13 = *(_QWORD *)(v0 + 592);
      v14 = *(_QWORD *)(v0 + 544);
      v15 = objc_msgSend(v9, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

      v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
      v16(v14, v11, v13);

      v3 = *(_QWORD **)(v12 + 56);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v3)(v14, 0, 1, v13);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13) == 1)
        break;
      v17 = *(_QWORD *)(v0 + 624);
      v18 = *(_QWORD *)(v0 + 616);
      v19 = *(_QWORD *)(v0 + 600);
      v20 = *(_QWORD *)(v0 + 592);
      v16(v18, *(_QWORD *)(v0 + 544), v20);
      v21 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)(v18, v17, v20, v21);
      v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v22(v18, v20);
      if ((v17 & 1) != 0)
      {
        v30 = *(_QWORD *)(v0 + 624);
        isa = *(Class *)(v0 + 592);
        swift_bridgeObjectRelease();
        v22(v30, (uint64_t)isa);
        v3 = (_QWORD *)v150;
        v2 = (_QWORD *)(v0 + 176);
        v31 = sub_100030784(v150, (uint64_t)v142);
        v1 = Logger.logObject.getter(v31);
        v32 = static os_log_type_t.error.getter(v1);
        v33 = os_log_type_enabled((os_log_t)v1, v32);
        v34 = *(void **)(v0 + 928);
        if (v33)
        {
          v35 = *(_QWORD *)(v0 + 656);
          v140 = *(_QWORD **)(v0 + 592);
          isa = (Class)swift_slowAlloc(22, -1);
          v148 = swift_slowAlloc(32, -1);
          v162 = v148;
          *(_DWORD *)isa = 141558275;
          *(_QWORD *)(v0 + 448) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v141, (char *)isa + 4, (char *)isa + 12);
          *((_WORD *)isa + 6) = 2081;
          v153 = v34;
          v37 = *(_QWORD *)(v0 + 200);
          v36 = *(_QWORD *)(v0 + 208);
          sub_10001AA44(v142, v37);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v37);
          v38 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v2 = v140;
          v39 = dispatch thunk of CustomStringConvertible.description.getter(v140, v38);
          v41 = v40;
          v42 = v35;
          v3 = (_QWORD *)v150;
          v22(v42, (uint64_t)v140);
          *(_QWORD *)(v0 + 456) = sub_100016940(v39, v41, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v141, v160, (char *)isa + 14, (char *)isa + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1, v32, "Beacon to insert already exists: %{private,mask.hash}s.", (uint8_t *)isa, 0x16u);
          swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v148, -1, -1);
          swift_slowDealloc(isa, -1, -1);

          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
        }
        v27 = (uint64_t *)(v0 + 480);
        goto LABEL_26;
      }
      ++v8;
      if (v155 == v7)
        goto LABEL_14;
    }
  }
  else
  {
    v3 = *(_QWORD **)(*(_QWORD *)(v0 + 600) + 56);
LABEL_14:
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v3)(*(_QWORD *)(v0 + 544), 1, 1, *(_QWORD *)(v0 + 592));
  }
  isa = (Class)(v0 + 408);
  v23 = *(void **)(v0 + 928);
  v24 = *(_QWORD *)(v0 + 624);
  v25 = *(_QWORD *)(v0 + 600);
  v26 = *(_QWORD *)(v0 + 592);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
  v27 = (uint64_t *)(v0 + 480);
  swift_beginAccess(v0 + 480, v0 + 408, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
  v2 = *(_QWORD **)((*(_QWORD *)(v0 + 480) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v28 = *(_QWORD *)((*(_QWORD *)(v0 + 480) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if ((unint64_t)v2 >= v28 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, (char *)v2 + 1, 1);
  v1 = *(_QWORD *)(v0 + 928);
  v29 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v2, v1);
  specialized Array._endMutation()(v29);
  swift_endAccess(v0 + 408);

  v3 = (_QWORD *)v150;
LABEL_18:
  swift_bridgeObjectRelease();
  while (1)
  {
    while (1)
    {
      do
      {
        while (1)
        {
LABEL_26:
          v44 = *(_QWORD *)(v0 + 824);
          v45 = *(_QWORD *)(v0 + 880) + 1;
          v6 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
          if (v45 == v44)
          {
            swift_bridgeObjectRelease();
            v46 = *(_QWORD *)(v0 + 872);
            v2 = *(_QWORD **)(v0 + 864);
            v47 = *(_QWORD *)(v0 + 840);
            v1 = 48;
            while (1)
            {
              swift_retain_n(v47, 2);
              swift_bridgeObjectRetain_n(v2, 2);
              v48 = swift_bridgeObjectRetain_n(v46, 2);
              v49 = Logger.logObject.getter(v48);
              v50 = static os_log_type_t.default.getter(v49);
              if (os_log_type_enabled(v49, v50))
              {
                v51 = swift_slowAlloc(22, -1);
                v52 = swift_slowAlloc(32, -1);
                *v160 = v52;
                *(_DWORD *)v51 = 134218242;
                swift_beginAccess(v27, v0 + 360, 0, 0);
                v53 = *v27;
                if ((unint64_t)*v27 >> 62)
                {
                  if (v53 < 0)
                    v70 = *v27;
                  else
                    v70 = v53 & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain(*v27);
                  v54 = _CocoaArrayWrapper.endIndex.getter(v70);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v54 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
                }
                v55 = *(_QWORD *)(v0 + 872);
                v56 = *(_QWORD *)(v0 + 864);
                v57 = *(_QWORD *)(v0 + 856);
                isa = *(Class *)(v0 + 840);
                *(_QWORD *)(v51 + 4) = v54;
                *(_WORD *)(v51 + 12) = 2082;
                if (v56)
                  v58 = v57;
                else
                  v58 = 0x6E776F6E6B6E75;
                if (v56)
                  v59 = v56;
                else
                  v59 = 0xE700000000000000;
                swift_bridgeObjectRetain(v56);
                *(_QWORD *)(v51 + 14) = sub_100016940(v58, v59, v160);
                swift_bridgeObjectRelease_n(v55, 2);
                swift_bridgeObjectRelease_n(v56, 2);
                swift_release_n(isa, 2);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "receivedSimpleBeaconUpdates - updating beacons (count) %ld to bundle: %{public}s.", (uint8_t *)v51, 0x16u);
                swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v52, -1, -1);
                swift_slowDealloc(v51, -1, -1);

                v27 = (uint64_t *)(v0 + 480);
                v1 = 48;
              }
              else
              {
                v60 = *(_QWORD *)(v0 + 872);
                isa = *(Class *)(v0 + 864);
                v61 = *(_QWORD *)(v0 + 840);

                swift_bridgeObjectRelease_n(v60, 2);
                swift_release_n(v61, 2);
                swift_bridgeObjectRelease_n(isa, 2);
              }
              v62 = *(_QWORD *)(v0 + 840);
              swift_retain();
              XPCSession.proxy.getter((_QWORD *)(v0 + 472));
              swift_release(v62);
              v63 = *(void **)(v0 + 472);
              v3 = *(_QWORD **)(v0 + 872);
              v64 = *(_QWORD *)(v0 + 840);
              if (v63)
              {
                swift_beginAccess(v27, v0 + 336, 0, 0);
                v65 = *v27;
                sub_10000F4A0(0, (unint64_t *)&unk_101105900, SPInternalSimpleBeacon_ptr);
                swift_bridgeObjectRetain(v65);
                isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease();
                objc_msgSend(v63, "receivedSimpleBeaconUpdates:", isa);

                swift_unknownObjectRelease(v63);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release(v64);
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_release(v64);
                swift_bridgeObjectRelease();
              }
              v10 = *(_QWORD **)(v0 + 816);
              v7 = *(_QWORD *)(v0 + 832) + 1;
              swift_bridgeObjectRelease();
              if ((_QWORD *)v7 == v10)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v103 = *(_QWORD *)(v0 + 704);
                v104 = *(_QWORD *)(v0 + 680);
                v105 = *(_QWORD *)(v0 + 672);
                v106 = *(_QWORD *)(v0 + 664);
                v107 = *(_QWORD *)(v0 + 656);
                v108 = *(_QWORD *)(v0 + 648);
                v109 = *(_QWORD *)(v0 + 640);
                v110 = *(_QWORD *)(v0 + 632);
                v111 = *(_QWORD *)(v0 + 624);
                v154 = *(_QWORD *)(v0 + 616);
                v156 = *(_QWORD *)(v0 + 584);
                v158 = *(_QWORD *)(v0 + 576);
                v159 = *(_QWORD *)(v0 + 552);
                v161 = *(_QWORD *)(v0 + 544);
                swift_task_dealloc(*(_QWORD *)(v0 + 712));
                swift_task_dealloc(v103);
                swift_task_dealloc(v104);
                swift_task_dealloc(v105);
                swift_task_dealloc(v106);
                swift_task_dealloc(v107);
                swift_task_dealloc(v108);
                swift_task_dealloc(v109);
                swift_task_dealloc(v110);
                swift_task_dealloc(v111);
                swift_task_dealloc(v154);
                swift_task_dealloc(v156);
                swift_task_dealloc(v158);
                swift_task_dealloc(v159);
                swift_task_dealloc(v161);
                return (*(uint64_t (**)(void))(v0 + 8))();
              }
              v66 = *(_QWORD *)(v0 + 832) + 1;
              *(_QWORD *)(v0 + 832) = v66;
              v67 = *(_QWORD *)(v0 + 760);
              if (v66 >= *(_QWORD *)(v67 + 16))
                break;
              v68 = *(_QWORD *)(v0 + 824);
              v69 = (_QWORD *)(v67 + 48 * v66);
              v47 = v69[4];
              *(_QWORD *)(v0 + 840) = v47;
              *(_QWORD *)(v0 + 848) = v69[5];
              *(_QWORD *)(v0 + 856) = v69[6];
              v2 = (_QWORD *)v69[7];
              *(_QWORD *)(v0 + 864) = v2;
              v46 = v69[9];
              *(_QWORD *)(v0 + 872) = v46;
              *(_QWORD *)(v0 + 480) = _swiftEmptyArrayStorage;
              swift_bridgeObjectRetain(v2);
              swift_bridgeObjectRetain(v46);
              if (v68)
              {
                swift_bridgeObjectRetain(*(_QWORD *)(v0 + 808));
                swift_retain();
                swift_beginAccess(v27, v0 + 384, 0, 0);
                v71 = 0;
                v3 = (_QWORD *)v150;
                goto LABEL_52;
              }
              swift_retain();
            }
            __break(1u);
            goto LABEL_84;
          }
          v71 = *(_QWORD *)(v0 + 880) + 1;
LABEL_52:
          *(_QWORD *)(v0 + 880) = v71;
          v72 = *(_QWORD *)(v0 + 808);
          if (v71 >= *(_QWORD *)(v72 + 16))
          {
            __break(1u);
            goto LABEL_87;
          }
          sub_100030784(v72 + 40 * v71 + 32, (uint64_t)v3);
          v73 = *(_QWORD *)(v0 + 240);
          v74 = *(_QWORD *)(v0 + 248);
          sub_10001AA44(v3, v73);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v74 + 112))(v73, v74) & 1) == 0)
            break;
          v75 = *(_QWORD *)(v0 + 696);
          v76 = *(_QWORD *)(v0 + 688);
          v77 = *(_QWORD *)(v0 + 680);
          v2 = (_QWORD *)(v0 + 96);
          sub_100030784((uint64_t)v3, v149);
          v78 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
          v79 = swift_dynamicCast(v77, v149, v78, v76, 6);
          v80 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v75 + 56);
          if (!v79)
          {
            v89 = *(_QWORD *)(v0 + 680);
            v80(v89, 1, 1, *(_QWORD *)(v0 + 688));
            sub_100004048(v89, (uint64_t *)&unk_1010EE180);
            break;
          }
          v81 = *(unsigned int *)(v0 + 936);
          v82 = *(_QWORD *)(v0 + 712);
          v83 = *(_QWORD *)(v0 + 680);
          v80(v83, 0, 1, *(_QWORD *)(v0 + 688));
          sub_1000126EC(v83, v82, type metadata accessor for SharedBeaconRecord);
          My = type metadata accessor for Feature.FindMy(0);
          *(_QWORD *)(v0 + 80) = My;
          *(_QWORD *)(v0 + 88) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
          isa = (Class)(v0 + 56);
          v85 = sub_100018F08(v146);
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v85, v81, My);
          LOBYTE(v81) = isFeatureEnabled(_:)(v146);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v146);
          v43 = *(_QWORD *)(v0 + 712);
          if ((v81 & 1) != 0)
          {
            v86 = *(unsigned __int8 *)(v43 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
            sub_10005972C(v43, *(_QWORD *)(v0 + 704), type metadata accessor for SharedBeaconRecord);
            v87 = *(_QWORD *)(v0 + 704);
            if (v86 == 4)
            {
              sub_1000126B0(v87, type metadata accessor for SharedBeaconRecord);
            }
            else
            {
              v88 = *(unsigned __int8 *)(v87 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
              sub_1000126B0(v87, type metadata accessor for SharedBeaconRecord);
              if (v88 != 1)
              {
                sub_1000126B0(*(_QWORD *)(v0 + 712), type metadata accessor for SharedBeaconRecord);
                break;
              }
            }
            v43 = *(_QWORD *)(v0 + 712);
          }
          sub_1000126B0(v43, type metadata accessor for SharedBeaconRecord);
        }
        v90 = *(_QWORD *)(v0 + 240);
        isa = *(Class *)(v0 + 248);
        sub_10001AA44(v3, v90);
      }
      while (((*((uint64_t (**)(uint64_t, Class))isa + 20))(v90, isa) & 1) != 0);
      v91 = *(_QWORD *)(v0 + 848);
      v92 = *(_QWORD *)(v0 + 240);
      isa = *(Class *)(v0 + 248);
      sub_10001AA44(v3, v92);
      if ((v91 & 0x200) != 0)
        break;
      if (((*((uint64_t (**)(uint64_t, Class))isa + 14))(v92, isa) & 1) != 0)
      {
        v112 = *(_QWORD *)(v0 + 528);
        v113 = *(_QWORD *)(v0 + 240);
        v114 = *(_QWORD *)(v0 + 248);
        sub_10001AA44(v3, v113);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 8) + 32))(v113);
        return swift_task_switch(sub_1007199E0, v112, 0);
      }
    }
    v93 = (*((uint64_t (**)(uint64_t, Class))isa + 11))(v92, isa);
    sub_100030784((uint64_t)v3, (uint64_t)v151);
    if ((v93 & 1) != 0)
      break;
    v94 = *(_QWORD *)(v0 + 320);
    v95 = *(_QWORD *)(v0 + 328);
    sub_10001AA44(v151, v94);
    v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 112))(v94, v95);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v151);
    v97 = v145;
    sub_100030784((uint64_t)v3, (uint64_t)v145);
    if ((v96 & 1) != 0)
      goto LABEL_71;
    v98 = *(_QWORD *)(v0 + 280);
    v99 = *(_QWORD *)(v0 + 288);
    sub_10001AA44(v145, v98);
    v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 96))(v98, v99);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);
    v2 = v144;
    sub_100030784((uint64_t)v3, (uint64_t)v144);
    if ((v100 & 1) != 0)
      goto LABEL_72;
    v101 = *(_QWORD *)(v0 + 160);
    isa = *(Class *)(v0 + 168);
    sub_10001AA44(v144, v101);
    v102 = (*((uint64_t (**)(uint64_t, Class))isa + 16))(v101, isa);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    if ((v102 & 1) != 0)
      goto LABEL_73;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v151);
  v97 = v145;
  sub_100030784((uint64_t)v3, (uint64_t)v145);
LABEL_71:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v97);
  v2 = v144;
  sub_100030784((uint64_t)v3, (uint64_t)v144);
LABEL_72:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
LABEL_73:
  v116 = *(_QWORD *)(v0 + 872);
  v7 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 912) = v7;
  v117 = *(_QWORD *)(v116 + 16);
  v10 = (_QWORD *)(v0 + 16);
  sub_100030784((uint64_t)v3, (uint64_t)v143);
  if (!v117)
    goto LABEL_85;
  v118 = *(_QWORD *)(v0 + 872);
  v119 = *(_QWORD *)(v0 + 600);
  v120 = *(_QWORD *)(v0 + 40);
  v121 = *(_QWORD *)(v0 + 48);
  sub_10001AA44(v143, v120);
  v122 = *(_QWORD *)(*(_QWORD *)(v121 + 8) + 8);
  v157 = *(void (**)(uint64_t, uint64_t, __n128))(v122 + 32);
  swift_bridgeObjectRetain(v118);
  v123 = swift_bridgeObjectRetain(v7);
  v157(v120, v122, v123);
  isa = (Class)(v118 + ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80)));
  v1 = *(_QWORD *)(v119 + 72);
  v124 = *(void (**)(uint64_t, Class, uint64_t, __n128))(v119 + 16);
  v125 = swift_bridgeObjectRetain(v118);
  while (1)
  {
    v126 = *(_QWORD *)(v0 + 600);
    v127 = *(_QWORD *)(v0 + 592);
    v128 = *(_QWORD *)(v0 + 552);
    v124(v128, isa, v127, v125);
    v2 = *(_QWORD **)(v126 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v2)(v128, 0, 1, v127);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v128, 1, v127) == 1)
    {
      v135 = *(_QWORD *)(v0 + 600);
      swift_bridgeObjectRelease();
      v134 = *(void (**)(uint64_t, uint64_t))(v135 + 8);
      goto LABEL_80;
    }
    v129 = *(_QWORD *)(v0 + 640);
    v130 = *(_QWORD *)(v0 + 632);
    v131 = *(_QWORD *)(v0 + 600);
    v132 = *(_QWORD *)(v0 + 592);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v131 + 32))(v130, *(_QWORD *)(v0 + 552), v132);
    v133 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LOBYTE(v129) = dispatch thunk of static Equatable.== infix(_:_:)(v130, v129, v132, v133);
    v134 = *(void (**)(uint64_t, uint64_t))(v131 + 8);
    v134(v130, v132);
    if ((v129 & 1) != 0)
      break;
    isa = (Class)((char *)isa + v1);
    --v117;
    v27 = (uint64_t *)(v0 + 480);
    if (!v117)
    {
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))v2)(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 592));
      swift_bridgeObjectRelease();
LABEL_80:
      v134(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 592));
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
      v3 = (_QWORD *)v150;
      goto LABEL_18;
    }
  }
  v136 = *(_QWORD *)(v0 + 640);
  v137 = *(_QWORD *)(v0 + 592);
  swift_bridgeObjectRelease();
  v134(v136, v137);
  swift_bridgeObjectRelease();
  v3 = (_QWORD *)v150;
  v10 = (_QWORD *)(v0 + 16);
LABEL_82:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  v138 = (_QWORD *)swift_task_alloc(dword_1011055FC);
  *(_QWORD *)(v0 + 920) = v138;
  *v138 = v0;
  v138[1] = sub_10071A83C;
  return sub_10071BBAC((uint64_t)v3, *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 848));
}

uint64_t sub_10071B8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[7] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[8] = swift_task_alloc(v8);
  v3[9] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v3[10] = v9;
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10071B994, a3, 0);
}

uint64_t sub_10071B994()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[9];
  v3 = v0[6];
  v2 = v0[7];
  v5 = v0[4];
  v4 = v0[5];
  v6 = v0[3];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v7;
  v7(v1, v6, v4);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108CBE0, v9 + v2, v8 | 7);
  v0[13] = v10;
  *(_QWORD *)(v10 + 16) = v5;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[14] = v11;
  v11(v10 + v9, v1, v4);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[15] = v13;
  *v13 = v0;
  v13[1] = sub_10071BA74;
  return unsafeBlocking<A>(_:)(v0[11], sub_100727F80, v10, v0[10]);
}

uint64_t sub_10071BA74()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_10071BAD4, 0, 0);
}

uint64_t sub_10071BAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 96))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 24), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  if (v4 == 1)
  {
    v5(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
    sub_100004048(v6, &qword_1010ED860);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 40);
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 64), v7);
    v5(v8, v6, v7);
  }
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10071BBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4[126] = v3;
  v4[125] = a3;
  v4[124] = a2;
  v4[123] = a1;
  v5 = type metadata accessor for BeaconProductInfoRecord(0);
  v4[127] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[128] = v6;
  v4[129] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  v4[130] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.Encoding(0);
  v4[131] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[132] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[133] = swift_task_alloc(v10);
  v4[134] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010F2CA8);
  v4[135] = v11;
  v4[136] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F7AE0);
  v4[137] = v12;
  v4[138] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for KeySyncRecord(0);
  v4[139] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[140] = v14;
  v4[141] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_10110EEB0);
  v4[142] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[143] = swift_task_alloc(v16);
  v4[144] = swift_task_alloc(v16);
  v4[145] = swift_task_alloc(v16);
  v4[146] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[147] = swift_task_alloc(v17);
  v4[148] = swift_task_alloc(v17);
  v18 = type metadata accessor for SharedBeaconRecord(0);
  v4[149] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[150] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[151] = swift_task_alloc(v20);
  v4[152] = swift_task_alloc(v20);
  v4[153] = swift_task_alloc(v20);
  v4[154] = swift_task_alloc(v20);
  v4[155] = swift_task_alloc(v20);
  v4[156] = swift_task_alloc(v20);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v4[157] = v21;
  v4[158] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v4[159] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[160] = swift_task_alloc(v23);
  v4[161] = swift_task_alloc(v23);
  v4[162] = swift_task_alloc(v23);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v4[163] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for OwnedBeaconRecord(0);
  v4[164] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v4[165] = v26;
  v27 = *(_QWORD *)(v26 + 64);
  v4[166] = v27;
  v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[167] = swift_task_alloc(v28);
  v4[168] = swift_task_alloc(v28);
  v4[169] = swift_task_alloc(v28);
  v4[170] = swift_task_alloc(v28);
  v29 = sub_10001A9A8(&qword_1010F46C0);
  v4[171] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v29 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Date(0);
  v4[172] = v30;
  v31 = *(_QWORD *)(v30 - 8);
  v4[173] = v31;
  v4[174] = swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v4[175] = v32;
  v33 = (*(_QWORD *)(*(_QWORD *)(v32 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[176] = swift_task_alloc(v33);
  v4[177] = swift_task_alloc(v33);
  v4[178] = swift_task_alloc(v33);
  v34 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[179] = swift_task_alloc(v34);
  v4[180] = swift_task_alloc(v34);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  v4[181] = v35;
  v4[182] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for UUID(0);
  v4[183] = v36;
  v37 = *(_QWORD *)(v36 - 8);
  v4[184] = v37;
  v38 = *(_QWORD *)(v37 + 64);
  v4[185] = v38;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[186] = swift_task_alloc(v39);
  v4[187] = swift_task_alloc(v39);
  v4[188] = swift_task_alloc(v39);
  v4[189] = swift_task_alloc(v39);
  v4[190] = swift_task_alloc(v39);
  v4[191] = swift_task_alloc(v39);
  v4[192] = swift_task_alloc(v39);
  v4[193] = swift_task_alloc(v39);
  v4[194] = swift_task_alloc(v39);
  v4[195] = swift_task_alloc(v39);
  v40 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v4[196] = v40;
  v4[197] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for BeaconNamingRecord(0);
  v4[198] = v41;
  v42 = *(_QWORD *)(v41 - 8);
  v4[199] = v42;
  v4[200] = swift_task_alloc((*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10071C0D0, v3, 0);
}

uint64_t sub_10071C0D0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 808, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 384, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 408))
  {
    sub_10000F9FC((__int128 *)(v0 + 384), v0 + 304);
    sub_10001AA44((_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 1608) = v2;
    *v2 = v0;
    v2[1] = sub_10071C1BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10071C1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1608);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1616) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10071C21C, v3, 0);
}

uint64_t sub_10071C21C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 1000);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 304));
  if ((v1 & 0x280) != 0)
  {
    v2 = *(_QWORD *)(v0 + 992);
    v3 = *(_QWORD **)(v0 + 984);
    v4 = v3[3];
    v5 = v3[4];
    sub_10001AA44(v3, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v4);
    v6 = sub_10071C5C8;
    goto LABEL_5;
  }
  *(_BYTE *)(v0 + 2414) = 0;
  *(_WORD *)(v0 + 2412) = 0;
  *(_OWORD *)(v0 + 1816) = 0u;
  *(_OWORD *)(v0 + 1832) = 0u;
  *(_OWORD *)(v0 + 1848) = 0u;
  *(_OWORD *)(v0 + 1864) = 0u;
  if ((*(_WORD *)(v0 + 1000) & 0x203) != 0)
  {
    v2 = *(_QWORD *)(v0 + 992);
    v7 = *(_QWORD **)(v0 + 984);
    v8 = v7[3];
    v9 = v7[4];
    sub_10001AA44(v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 32))(v8);
    v6 = sub_10071EE54;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
  *(_OWORD *)(v0 + 1920) = 0u;
  v12 = *(_QWORD *)(v0 + 1000);
  if ((v12 & 2) != 0
    && (v13 = *(_QWORD *)(v0 + 1168),
        v14 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v13, 1, v14)))
  {
    v36 = (uint64_t *)(v13 + *(int *)(v14 + 32));
    v15 = *v36;
    swift_bridgeObjectRetain(v36[1]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v16;
  *(_QWORD *)(v0 + 1936) = v15;
  if ((v12 & 0x204) != 0)
  {
    v17 = *(_QWORD **)(v0 + 984);
    v18 = v17[3];
    v19 = v17[4];
    sub_10001AA44(v17, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
    v21 = (v12 & 0x208) == 0;
    v12 = *(_QWORD *)(v0 + 1000);
    if (!v21)
      goto LABEL_15;
    v22 = 0;
  }
  else
  {
    v20 = 0;
    v22 = 0;
    if ((v12 & 8) != 0)
    {
LABEL_15:
      *(_QWORD *)(v0 + 1952) = v20;
      v23 = *(_QWORD **)(v0 + 984);
      v24 = v23[3];
      v25 = v23[4];
      sub_10001AA44(v23, v24);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
      *(_QWORD *)(v0 + 1960) = v26;
      if ((v12 & 0x200) != 0)
      {
        v10 = *(_QWORD *)(v0 + 992);
        v6 = sub_10071F764;
        return swift_task_switch(v6, v10, 0);
      }
      v22 = v26;
      v12 = *(_QWORD *)(v0 + 1000);
    }
  }
  v27 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v12 & 0x20) != 0)
  {
    v32 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v20;
    *(_QWORD *)(v0 + 2056) = v22;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v27;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v32;
    v33 = *(_QWORD **)(v0 + 984);
    v34 = v33[3];
    v35 = v33[4];
    sub_10001AA44(v33, v34);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 32))(v34);
    v6 = sub_10071FEA4;
    v10 = v32;
    return swift_task_switch(v6, v10, 0);
  }
  v28 = *(_QWORD *)(v0 + 1000);
  if ((v28 & 0x100) != 0)
  {
    v37 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v20;
    *(_QWORD *)(v0 + 2120) = v22;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v27;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v38 = *(_QWORD **)(v0 + 984);
    v39 = v38[3];
    v40 = v38[4];
    sub_10001AA44(v38, v39);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 8) + 32))(v39);
    v6 = sub_100720208;
    v10 = v37;
    return swift_task_switch(v6, v10, 0);
  }
  *(_QWORD *)(v0 + 2192) = v20;
  *(_QWORD *)(v0 + 2184) = v22;
  *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 2168) = v27;
  *(_BYTE *)(v0 + 2417) = 0;
  *(_OWORD *)(v0 + 2152) = 0u;
  v2 = *(_QWORD *)(v0 + 992);
  if ((v28 & 0x240) != 0)
  {
    v29 = *(_QWORD **)(v0 + 984);
    v30 = v29[3];
    v31 = v29[4];
    sub_10001AA44(v29, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v30);
    v6 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v2;
    v41 = *(_QWORD **)(v0 + 984);
    v42 = v41[3];
    v43 = v41[4];
    sub_10001AA44(v41, v42);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 8) + 8) + 32))(v42);
    v6 = sub_1007207D8;
  }
LABEL_5:
  v10 = v2;
  return swift_task_switch(v6, v10, 0);
}

uint64_t sub_10071C5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 1560);
  v2 = *(_QWORD *)(v0 + 1552);
  v3 = *(_QWORD *)(v0 + 1480);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1464);
  v6 = *(_QWORD *)(v0 + 992);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 1624) = v7;
  v7(v2, v1, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 2392) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108CAA0, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 1632) = v10;
  *(_QWORD *)(v10 + 16) = v6;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 1640) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1648) = v13;
  *v13 = v0;
  v13[1] = sub_10071C6BC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1576), sub_10007CBEC, v10, *(_QWORD *)(v0 + 1568));
}

uint64_t sub_10071C6BC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 1632);
  v3 = *(_QWORD *)(*v0 + 1560);
  v4 = *(_QWORD *)(*v0 + 1472);
  v5 = *(_QWORD *)(*v0 + 1464);
  v6 = *(_QWORD *)(*v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*v0 + 1648));
  swift_release(v2);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 1656) = v7;
  v7(v3, v5);
  return swift_task_switch(sub_10071C74C, v6, 0);
}

uint64_t sub_10071C74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  NSString v18;
  NSString v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 1584);
  v2 = *(_QWORD *)(v0 + 1576);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1592) + 48))(v2, 1, v1) != 1)
  {
    v6 = *(_QWORD *)(v0 + 1600);
    v7 = *(_QWORD **)(v0 + 984);
    sub_1000126EC(v2, v6, type metadata accessor for BeaconNamingRecord);
    v8 = v7[3];
    v9 = v7[4];
    sub_10001AA44(v7, v8);
    v10 = *(_QWORD *)(v6 + *(int *)(v1 + 28));
    v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 200))(v10, v8, v9);
    v12 = v11;
    v13 = *(_QWORD *)(v0 + 1600);
    v14 = *(_QWORD *)(v0 + 1584);
    if (v10 == SPBeaconRoleIdOther)
    {
      v15 = v13 + *(int *)(v14 + 36);
      if (*(_QWORD *)(v15 + 8))
      {
        if (v11)
        {
          v16 = objc_msgSend(v11, "role", swift_bridgeObjectRetain(*(_QWORD *)(v15 + 8)).n128_f64[0]);
          static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

          v17 = objc_allocWithZone((Class)SPBeaconRole);
          v18 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v20 = objc_msgSend(v17, "initWithRoleId:role:roleEmoji:", v10, v18, v19);

          v13 = *(_QWORD *)(v0 + 1600);
          v14 = *(_QWORD *)(v0 + 1584);
          v12 = v20;
        }
      }
    }
    v21 = (uint64_t *)(v13 + *(int *)(v14 + 32));
    v23 = *v21;
    v22 = v21[1];
    swift_bridgeObjectRetain(v22);
    sub_1000126B0(v13, type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)(v0 + 1720) = v22;
    *(_QWORD *)(v0 + 1712) = v23;
    *(_QWORD *)(v0 + 1704) = v12;
    *(_QWORD *)(v0 + 1696) = 0;
    v24 = *(_QWORD *)(v0 + 1000);
    if ((v24 & 0x200) != 0)
    {
      v25 = *(_QWORD *)(v0 + 992);
      v29 = *(_QWORD **)(v0 + 984);
      v30 = v29[3];
      v31 = v29[4];
      sub_10001AA44(v29, v30);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v30);
      v4 = sub_10071D860;
      goto LABEL_11;
    }
    *(_QWORD *)(v0 + 1872) = v22;
    *(_QWORD *)(v0 + 1864) = v23;
    *(_QWORD *)(v0 + 1856) = v12;
    *(_BYTE *)(v0 + 2414) = 0;
    *(_WORD *)(v0 + 2412) = 0;
    *(_QWORD *)(v0 + 1848) = 0;
    *(_OWORD *)(v0 + 1816) = 0u;
    *(_OWORD *)(v0 + 1832) = 0u;
    if ((v24 & 0x203) != 0)
    {
      v25 = *(_QWORD *)(v0 + 992);
      v26 = *(_QWORD **)(v0 + 984);
      v27 = v26[3];
      v28 = v26[4];
      sub_10001AA44(v26, v27);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
      v4 = sub_10071EE54;
LABEL_11:
      v5 = v25;
      return swift_task_switch(v4, v5, 0);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
    *(_OWORD *)(v0 + 1920) = 0u;
    v33 = *(_QWORD *)(v0 + 1000);
    if ((v33 & 2) != 0
      && (v34 = *(_QWORD *)(v0 + 1168),
          v35 = *(_QWORD *)(v0 + 1016),
          !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v34, 1, v35)))
    {
      v57 = (uint64_t *)(v34 + *(int *)(v35 + 32));
      v36 = *v57;
      swift_bridgeObjectRetain(v57[1]);
    }
    else
    {
      v36 = 0;
      v37 = 0;
    }
    *(_QWORD *)(v0 + 1944) = v37;
    *(_QWORD *)(v0 + 1936) = v36;
    if ((v33 & 0x204) != 0)
    {
      v38 = *(_QWORD **)(v0 + 984);
      v39 = v38[3];
      v40 = v38[4];
      sub_10001AA44(v38, v39);
      v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 48))(v39, v40);
      v42 = (v33 & 0x208) == 0;
      v33 = *(_QWORD *)(v0 + 1000);
      if (!v42)
        goto LABEL_21;
      v43 = 0;
    }
    else
    {
      v41 = 0;
      v43 = 0;
      if ((v33 & 8) != 0)
      {
LABEL_21:
        *(_QWORD *)(v0 + 1952) = v41;
        v44 = *(_QWORD **)(v0 + 984);
        v45 = v44[3];
        v46 = v44[4];
        sub_10001AA44(v44, v45);
        v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 56))(v45, v46);
        *(_QWORD *)(v0 + 1960) = v47;
        if ((v33 & 0x200) != 0)
        {
          v5 = *(_QWORD *)(v0 + 992);
          v4 = sub_10071F764;
          return swift_task_switch(v4, v5, 0);
        }
        v43 = v47;
        v33 = *(_QWORD *)(v0 + 1000);
      }
    }
    v48 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
    if ((v33 & 0x20) != 0)
    {
      v53 = *(_QWORD *)(v0 + 992);
      *(_QWORD *)(v0 + 2064) = v41;
      *(_QWORD *)(v0 + 2056) = v43;
      *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v0 + 2040) = v48;
      *(_BYTE *)(v0 + 2415) = 0;
      *(_QWORD *)(v0 + 2032) = v53;
      v54 = *(_QWORD **)(v0 + 984);
      v55 = v54[3];
      v56 = v54[4];
      sub_10001AA44(v54, v55);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 8) + 32))(v55);
      v4 = sub_10071FEA4;
      v5 = v53;
      return swift_task_switch(v4, v5, 0);
    }
    v49 = *(_QWORD *)(v0 + 1000);
    if ((v49 & 0x100) != 0)
    {
      v58 = *(_QWORD *)(v0 + 992);
      *(_QWORD *)(v0 + 2128) = v41;
      *(_QWORD *)(v0 + 2120) = v43;
      *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v0 + 2104) = v48;
      *(_BYTE *)(v0 + 2416) = 0;
      *(_QWORD *)(v0 + 2096) = 0;
      v59 = *(_QWORD **)(v0 + 984);
      v60 = v59[3];
      v61 = v59[4];
      sub_10001AA44(v59, v60);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + 32))(v60);
      v4 = sub_100720208;
      v5 = v58;
      return swift_task_switch(v4, v5, 0);
    }
    *(_QWORD *)(v0 + 2192) = v41;
    *(_QWORD *)(v0 + 2184) = v43;
    *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2168) = v48;
    *(_BYTE *)(v0 + 2417) = 0;
    *(_OWORD *)(v0 + 2152) = 0u;
    v25 = *(_QWORD *)(v0 + 992);
    if ((v49 & 0x240) != 0)
    {
      v50 = *(_QWORD **)(v0 + 984);
      v51 = v50[3];
      v52 = v50[4];
      sub_10001AA44(v50, v51);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v52 + 8) + 8) + 32))(v51);
      v4 = sub_100720574;
    }
    else
    {
      *(_QWORD *)(v0 + 2224) = 0;
      *(_QWORD *)(v0 + 2216) = v25;
      v62 = *(_QWORD **)(v0 + 984);
      v63 = v62[3];
      v64 = v62[4];
      sub_10001AA44(v62, v63);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 8) + 32))(v63);
      v4 = sub_1007207D8;
    }
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v0 + 992);
  sub_100004048(v2, (uint64_t *)&unk_101105880);
  v4 = sub_10071CCAC;
  v5 = v3;
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10071CCAC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1664) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_10071CD24;
  return unsafeBlocking<A>(_:)(v0 + 960, sub_10007C6FC, *(_QWORD *)(v0 + 992), v3);
}

uint64_t sub_10071CD24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 992);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1664));
  swift_release(v1);
  return swift_task_switch(sub_10071CD84, v1, 0);
}

uint64_t sub_10071CD84()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[126];
  v0[209] = v0[120];
  return swift_task_switch(sub_10071CDA0, v1, 0);
}

uint64_t sub_10071CDA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uid_t v4;

  v1 = *(_QWORD **)(v0 + 984);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32))(v2);
  v4 = getuid();
  sub_100A06500(v4);
  return swift_task_switch(sub_10071CE1C, 0, 0);
}

uint64_t sub_10071CE1C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1010FCEDC);
  v0[210] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10071CE88;
  return sub_100478B94((uint64_t)(v0 + 29), v0[193], v0[192]);
}

uint64_t sub_10071CE88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1680);
  *(_QWORD *)(*(_QWORD *)v1 + 1688) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10071D43C;
    v5 = 0;
  }
  else
  {
    v6 = v2[209];
    v7 = (void (*)(uint64_t, uint64_t))v2[207];
    v8 = v2[193];
    v9 = v2[192];
    v10 = v2[183];
    v11 = v2[126];
    swift_release(v6);
    v7(v9, v10);
    v7(v8, v10);
    v4 = sub_10071CF34;
    v5 = v11;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10071CF34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  BOOL v10;
  id v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  sub_100005CF0(v0 + 232, v0 + 16, (uint64_t *)&unk_1010F4830);
  v1 = *(_QWORD *)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 984);
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = v2[3];
    v7 = v2[4];
    sub_10001AA44(v2, v6);
    v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 200))(v4, v6, v7);
    v9 = v8;
    v10 = v4 != SPBeaconRoleIdOther || v5 == 0;
    if (!v10 && v8 != 0)
    {
      v12 = objc_msgSend(v8, "role", swift_bridgeObjectRetain(v5).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

      v13 = objc_allocWithZone((Class)SPBeaconRole);
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v15 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v16 = objc_msgSend(v13, "initWithRoleId:role:roleEmoji:", v4, v14, v15);

      v9 = v16;
    }
    swift_bridgeObjectRetain(v1);
    sub_10007CB54((uint64_t *)(v0 + 232));
  }
  else
  {
    v9 = 0;
    v3 = 0;
  }
  v17 = *(_QWORD *)(v0 + 1688);
  *(_QWORD *)(v0 + 1720) = v1;
  *(_QWORD *)(v0 + 1712) = v3;
  *(_QWORD *)(v0 + 1704) = v9;
  *(_QWORD *)(v0 + 1696) = v17;
  v18 = *(_QWORD *)(v0 + 1000);
  if ((v18 & 0x200) != 0)
  {
    v19 = *(_QWORD *)(v0 + 992);
    v24 = *(_QWORD **)(v0 + 984);
    v25 = v24[3];
    v26 = v24[4];
    sub_10001AA44(v24, v25);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 8) + 32))(v25);
    v23 = sub_10071D860;
    goto LABEL_16;
  }
  *(_QWORD *)(v0 + 1872) = v1;
  *(_QWORD *)(v0 + 1864) = v3;
  *(_QWORD *)(v0 + 1856) = v9;
  *(_BYTE *)(v0 + 2414) = 0;
  *(_WORD *)(v0 + 2412) = 0;
  *(_OWORD *)(v0 + 1824) = 0u;
  *(_OWORD *)(v0 + 1840) = 0u;
  *(_QWORD *)(v0 + 1816) = v17;
  if ((v18 & 0x203) != 0)
  {
    v19 = *(_QWORD *)(v0 + 992);
    v20 = *(_QWORD **)(v0 + 984);
    v21 = v20[3];
    v22 = v20[4];
    sub_10001AA44(v20, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v21);
    v23 = sub_10071EE54;
    goto LABEL_16;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
  *(_OWORD *)(v0 + 1920) = 0u;
  v29 = *(_QWORD *)(v0 + 1000);
  if ((v29 & 2) != 0
    && (v30 = *(_QWORD *)(v0 + 1168),
        v31 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v30, 1, v31)))
  {
    v52 = (uint64_t *)(v30 + *(int *)(v31 + 32));
    v32 = *v52;
    swift_bridgeObjectRetain(v52[1]);
  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v33;
  *(_QWORD *)(v0 + 1936) = v32;
  if ((v29 & 0x204) != 0)
  {
    v34 = *(_QWORD **)(v0 + 984);
    v35 = v34[3];
    v36 = v34[4];
    sub_10001AA44(v34, v35);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 48))(v35, v36);
    v10 = (v29 & 0x208) == 0;
    v29 = *(_QWORD *)(v0 + 1000);
    if (!v10)
      goto LABEL_26;
    v38 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    if ((v29 & 8) != 0)
    {
LABEL_26:
      *(_QWORD *)(v0 + 1952) = v37;
      v39 = *(_QWORD **)(v0 + 984);
      v40 = v39[3];
      v41 = v39[4];
      sub_10001AA44(v39, v40);
      v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 56))(v40, v41);
      *(_QWORD *)(v0 + 1960) = v42;
      if ((v29 & 0x200) != 0)
      {
        v27 = *(_QWORD *)(v0 + 992);
        v23 = sub_10071F764;
        return swift_task_switch(v23, v27, 0);
      }
      v38 = v42;
      v29 = *(_QWORD *)(v0 + 1000);
    }
  }
  v43 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v29 & 0x20) != 0)
  {
    v48 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v37;
    *(_QWORD *)(v0 + 2056) = v38;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v43;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v48;
    v49 = *(_QWORD **)(v0 + 984);
    v50 = v49[3];
    v51 = v49[4];
    sub_10001AA44(v49, v50);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v51 + 8) + 8) + 32))(v50);
    v23 = sub_10071FEA4;
    v27 = v48;
    return swift_task_switch(v23, v27, 0);
  }
  v44 = *(_QWORD *)(v0 + 1000);
  if ((v44 & 0x100) != 0)
  {
    v53 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v37;
    *(_QWORD *)(v0 + 2120) = v38;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v43;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v54 = *(_QWORD **)(v0 + 984);
    v55 = v54[3];
    v56 = v54[4];
    sub_10001AA44(v54, v55);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 8) + 32))(v55);
    v23 = sub_100720208;
    v27 = v53;
    return swift_task_switch(v23, v27, 0);
  }
  *(_QWORD *)(v0 + 2192) = v37;
  *(_QWORD *)(v0 + 2184) = v38;
  *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 2168) = v43;
  *(_BYTE *)(v0 + 2417) = 0;
  *(_OWORD *)(v0 + 2152) = 0u;
  v19 = *(_QWORD *)(v0 + 992);
  if ((v44 & 0x240) != 0)
  {
    v45 = *(_QWORD **)(v0 + 984);
    v46 = v45[3];
    v47 = v45[4];
    sub_10001AA44(v45, v46);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 8) + 8) + 32))(v46);
    v23 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v19;
    v57 = *(_QWORD **)(v0 + 984);
    v58 = v57[3];
    v59 = v57[4];
    sub_10001AA44(v57, v58);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v59 + 8) + 8) + 32))(v58);
    v23 = sub_1007207D8;
  }
LABEL_16:
  v27 = v19;
  return swift_task_switch(v23, v27, 0);
}

uint64_t sub_10071D43C()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[211];
  v2 = (void (*)(uint64_t, uint64_t))v0[207];
  v3 = v0[193];
  v4 = v0[192];
  v5 = v0[183];
  v6 = v0[126];
  swift_release(v0[209]);
  swift_errorRelease(v1);
  v2(v4, v5);
  v2(v3, v5);
  return swift_task_switch(sub_10071D4C0, v6, 0);
}

uint64_t sub_10071D4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  *(_OWORD *)(v0 + 1712) = 0u;
  *(_OWORD *)(v0 + 1696) = 0u;
  v1 = *(_QWORD *)(v0 + 1000);
  if ((v1 & 0x200) != 0)
  {
    v2 = *(_QWORD *)(v0 + 992);
    v7 = *(_QWORD **)(v0 + 984);
    v8 = v7[3];
    v9 = v7[4];
    sub_10001AA44(v7, v8);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 32))(v8);
    v6 = sub_10071D860;
    goto LABEL_5;
  }
  *(_BYTE *)(v0 + 2414) = 0;
  *(_WORD *)(v0 + 2412) = 0;
  *(_OWORD *)(v0 + 1816) = 0uLL;
  *(_OWORD *)(v0 + 1832) = 0uLL;
  *(_OWORD *)(v0 + 1848) = 0uLL;
  *(_OWORD *)(v0 + 1864) = 0uLL;
  if ((v1 & 0x203) != 0)
  {
    v2 = *(_QWORD *)(v0 + 992);
    v3 = *(_QWORD **)(v0 + 984);
    v4 = v3[3];
    v5 = v3[4];
    sub_10001AA44(v3, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v4);
    v6 = sub_10071EE54;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
  *(_OWORD *)(v0 + 1920) = 0u;
  v12 = *(_QWORD *)(v0 + 1000);
  if ((v12 & 2) != 0
    && (v13 = *(_QWORD *)(v0 + 1168),
        v14 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v13, 1, v14)))
  {
    v36 = (uint64_t *)(v13 + *(int *)(v14 + 32));
    v15 = *v36;
    swift_bridgeObjectRetain(v36[1]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v16;
  *(_QWORD *)(v0 + 1936) = v15;
  if ((v12 & 0x204) != 0)
  {
    v17 = *(_QWORD **)(v0 + 984);
    v18 = v17[3];
    v19 = v17[4];
    sub_10001AA44(v17, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
    v21 = (v12 & 0x208) == 0;
    v12 = *(_QWORD *)(v0 + 1000);
    if (!v21)
      goto LABEL_15;
    v22 = 0;
  }
  else
  {
    v20 = 0;
    v22 = 0;
    if ((v12 & 8) != 0)
    {
LABEL_15:
      *(_QWORD *)(v0 + 1952) = v20;
      v23 = *(_QWORD **)(v0 + 984);
      v24 = v23[3];
      v25 = v23[4];
      sub_10001AA44(v23, v24);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
      *(_QWORD *)(v0 + 1960) = v26;
      if ((v12 & 0x200) != 0)
      {
        v10 = *(_QWORD *)(v0 + 992);
        v6 = sub_10071F764;
        return swift_task_switch(v6, v10, 0);
      }
      v22 = v26;
      v12 = *(_QWORD *)(v0 + 1000);
    }
  }
  v27 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v12 & 0x20) != 0)
  {
    v32 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v20;
    *(_QWORD *)(v0 + 2056) = v22;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v27;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v32;
    v33 = *(_QWORD **)(v0 + 984);
    v34 = v33[3];
    v35 = v33[4];
    sub_10001AA44(v33, v34);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 32))(v34);
    v6 = sub_10071FEA4;
    v10 = v32;
    return swift_task_switch(v6, v10, 0);
  }
  v28 = *(_QWORD *)(v0 + 1000);
  if ((v28 & 0x100) != 0)
  {
    v37 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v20;
    *(_QWORD *)(v0 + 2120) = v22;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v27;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v38 = *(_QWORD **)(v0 + 984);
    v39 = v38[3];
    v40 = v38[4];
    sub_10001AA44(v38, v39);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 8) + 32))(v39);
    v6 = sub_100720208;
    v10 = v37;
    return swift_task_switch(v6, v10, 0);
  }
  *(_QWORD *)(v0 + 2192) = v20;
  *(_QWORD *)(v0 + 2184) = v22;
  *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 2168) = v27;
  *(_BYTE *)(v0 + 2417) = 0;
  *(_OWORD *)(v0 + 2152) = 0u;
  v2 = *(_QWORD *)(v0 + 992);
  if ((v28 & 0x240) != 0)
  {
    v29 = *(_QWORD **)(v0 + 984);
    v30 = v29[3];
    v31 = v29[4];
    sub_10001AA44(v29, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v30);
    v6 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v2;
    v41 = *(_QWORD **)(v0 + 984);
    v42 = v41[3];
    v43 = v41[4];
    sub_10001AA44(v41, v42);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v43 + 8) + 8) + 32))(v42);
    v6 = sub_1007207D8;
  }
LABEL_5:
  v10 = v2;
  return swift_task_switch(v6, v10, 0);
}

uint64_t sub_10071D860()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1640);
  v2 = *(unsigned __int8 *)(v0 + 2392);
  v3 = *(_QWORD *)(v0 + 1552);
  v4 = *(_QWORD *)(v0 + 1464);
  v5 = *(_QWORD *)(v0 + 992);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 1480);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1624))(v3, *(_QWORD *)(v0 + 1560), v4);
  v9 = swift_allocObject(&unk_10108CAC8, v7, v8);
  *(_QWORD *)(v0 + 1728) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v6, v3, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1736) = v11;
  *v11 = v0;
  v11[1] = sub_10071D950;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1456), sub_100727B44, v9, *(_QWORD *)(v0 + 1448));
}

uint64_t sub_10071D950()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1728);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 1656);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1736));
  swift_release(v1);
  v2(v3, v4);
  return swift_task_switch(sub_10071D9DC, v5, 0);
}

void sub_10071D9DC()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 1456);
  v2 = (int *)type metadata accessor for LostModeRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v2 - 1) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47F0);
    v3 = 0;
    v4 = *(_QWORD *)(v0 + 1696);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 1696);
    v6 = (uint64_t *)(v1 + v2[9]);
    v7 = v6[1];
    v22 = *v6;
    v8 = v2[8];
    v9 = (uint64_t *)(v1 + v2[7]);
    v11 = *v9;
    v10 = v9[1];
    v13 = *(_QWORD *)(v1 + v8);
    v12 = *(_QWORD *)(v1 + v8 + 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    v14 = objc_autoreleasePoolPush();
    sub_10084EE10(v1);
    objc_autoreleasePoolPop(v14);
    if (v5)
      return;
    v15 = *(_QWORD *)(v0 + 1456);
    v16 = *(_QWORD *)(v0 + 1440);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1384) + 56))(v16, 0, 1, *(_QWORD *)(v0 + 1376));
    v17 = objc_allocWithZone((Class)SPLostModeInfo);
    v3 = sub_10084F34C(v22, v7, v11, v10, v13, v12, v16);
    sub_1000126B0(v15, type metadata accessor for LostModeRecord);
    v4 = 0;
  }
  *(_QWORD *)(v0 + 1752) = v3;
  *(_QWORD *)(v0 + 1744) = v4;
  v18 = *(_QWORD *)(v0 + 992);
  v19 = *(_QWORD **)(v0 + 984);
  *(_DWORD *)(v0 + 2396) = *(_DWORD *)(*(_QWORD *)(v0 + 1400) + 48);
  v20 = v19[3];
  v21 = v19[4];
  sub_10001AA44(v19, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v20);
  swift_task_switch(sub_10071DBB8, v18, 0);
}

uint64_t sub_10071DBB8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1640);
  v2 = *(unsigned __int8 *)(v0 + 2392);
  v3 = *(_QWORD *)(v0 + 1552);
  v4 = *(_QWORD *)(v0 + 1464);
  v5 = *(_QWORD *)(v0 + 992);
  v6 = v2 | 7;
  v7 = (v2 + 24) & ~v2;
  v8 = v7 + *(_QWORD *)(v0 + 1480);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1624))(v3, *(_QWORD *)(v0 + 1560), v4);
  v9 = swift_allocObject(&unk_10108CAF0, v8 + 1, v6);
  *(_QWORD *)(v0 + 1760) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v7, v3, v4);
  *(_BYTE *)(v9 + v8) = 1;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1768) = v11;
  *v11 = v0;
  v11[1] = sub_10071DCB0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1416), sub_1005CC898, v9, *(_QWORD *)(v0 + 1400));
}

uint64_t sub_10071DCB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1760);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 992);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1768));
  swift_release(v1);
  return swift_task_switch(sub_10071DD14, v2, 0);
}

uint64_t sub_10071DD14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1656);
  v2 = *(_QWORD *)(v0 + 1560);
  v3 = *(_QWORD *)(v0 + 1464);
  v4 = *(_BYTE **)(v0 + 1416);
  v5 = *(_QWORD *)(v0 + 1400);
  v6 = *(_QWORD *)(v0 + 1008);
  v7 = *(_QWORD *)(v0 + 1424) + *(int *)(v0 + 2396);
  *(_BYTE *)(v0 + 2409) = *v4;
  sub_100005CF0((uint64_t)&v4[*(int *)(v5 + 48)], v7, (uint64_t *)&unk_1010EA690);
  v1(v2, v3);
  return swift_task_switch(sub_10071DD9C, v6, 0);
}

uint64_t sub_10071DD9C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void (*v52)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)();
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  __int128 *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;

  v131 = v0 + 464;
  v1 = *(_BYTE *)(v0 + 2409);
  v2 = *(_QWORD *)(v0 + 1432);
  v3 = *(_BYTE **)(v0 + 1424);
  v4 = *(_BYTE **)(v0 + 1416);
  v5 = *(_BYTE **)(v0 + 1408);
  v6 = *(_QWORD *)(v0 + 1400);
  v7 = *(_QWORD *)(v0 + 1384);
  v8 = *(_QWORD *)(v0 + 1376);
  v9 = (uint64_t)&v3[*(int *)(v0 + 2396)];
  *v3 = v1;
  v10 = (uint64_t)&v4[*(int *)(v6 + 48)];
  *v4 = v1;
  sub_10000F9B8(v9, v10, (uint64_t *)&unk_1010EA690);
  sub_100004048(v10, (uint64_t *)&unk_1010EA690);
  v11 = (uint64_t)&v5[*(int *)(v6 + 48)];
  *v5 = v1;
  sub_10000F9B8(v9, v11, (uint64_t *)&unk_1010EA690);
  sub_100005CF0(v11, v2, (uint64_t *)&unk_1010EA690);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v2, 1, v8);
  v13 = *(_QWORD *)(v0 + 1432);
  if (v12 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 1432), (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 1392);
    v15 = *(_QWORD *)(v0 + 1384);
    v16 = *(_QWORD *)(v0 + 1376);
    static Date.trustedNow.getter(v14);
    v17 = Date.timeIntervalSince(_:)(v14);
    v18 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v18(v14, v16);
    v18(v13, v16);
    if (v17 > 0.0)
    {
      v19 = *(_QWORD *)(v0 + 1008);
      v20 = *(_QWORD **)(v0 + 984);
      v22 = v20[3];
      v21 = v20[4];
      sub_10001AA44(v20, v22);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v22);
      v23 = (_QWORD *)(v19 + 200);
      v24 = swift_beginAccess(v19 + 200, v0 + 832, 0, 0);
      v25 = *(_QWORD *)(v19 + 200);
      v129 = (__int128 *)(v0 + 344);
      if (*(_QWORD *)(v25 + 16))
      {
        v26 = *(_QWORD *)(v0 + 1528);
        swift_bridgeObjectRetain(v25);
        v27 = sub_100003FB0(v26);
        v28 = *(void (**)(uint64_t, uint64_t))(v0 + 1656);
        v29 = *(_QWORD *)(v0 + 1528);
        v30 = *(_QWORD *)(v0 + 1464);
        if ((v31 & 1) != 0)
        {
          v32 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27);
          swift_retain();
          swift_bridgeObjectRelease();
          v28(v29, v30);
          sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          Task.cancel()();
          swift_release(v32);
        }
        else
        {
          swift_bridgeObjectRelease();
          v28(v29, v30);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, __n128))(v0 + 1656))(*(_QWORD *)(v0 + 1528), *(_QWORD *)(v0 + 1464), v24);
      }
      v33 = *(_QWORD *)(v0 + 1560);
      v127 = *(_QWORD *)(v0 + 1464);
      v128 = *(void (**)(uint64_t, uint64_t))(v0 + 1656);
      v34 = *(_QWORD *)(v0 + 1368);
      v35 = *(_QWORD *)(v0 + 1008);
      v36 = *(_QWORD *)(v0 + 992);
      v37 = *(_QWORD **)(v0 + 984);
      v39 = v37[3];
      v38 = v37[4];
      sub_10001AA44(v37, v39);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 8) + 32))(v39);
      v40 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v34, 1, 1, v40);
      v41 = swift_allocObject(&unk_10108CB40, 24, 7);
      swift_weakInit(v41 + 16, v35);
      sub_100030784((uint64_t)v37, (uint64_t)v129);
      v42 = swift_allocObject(&unk_10108CB68, 96, 7);
      *(_QWORD *)(v42 + 16) = 0;
      *(_QWORD *)(v42 + 24) = 0;
      *(double *)(v42 + 32) = v17;
      *(_QWORD *)(v42 + 40) = v41;
      sub_10000F9FC(v129, v42 + 48);
      *(_QWORD *)(v42 + 88) = v36;
      swift_retain();
      v43 = sub_100626BC4(v34, (uint64_t)&unk_1011058C8, v42);
      swift_beginAccess(v23, v0 + 784, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
      v132 = *v23;
      *v23 = 0x8000000000000000;
      sub_10010D4BC(v43, v33, isUniquelyReferenced_nonNull_native);
      *v23 = v132;
      swift_bridgeObjectRelease();
      v128(v33, v127);
      swift_endAccess(v0 + 784);
    }
  }
  v45 = v0 + 1704;
  v46 = *(_QWORD *)(v0 + 1320);
  v47 = *(_QWORD *)(v0 + 1312);
  v48 = *(_QWORD *)(v0 + 1304);
  v49 = *(_QWORD *)(v0 + 984);
  sub_100004048(*(_QWORD *)(v0 + 1424), (uint64_t *)&unk_1011002E0);
  sub_100030784(v49, v131);
  v50 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v51 = swift_dynamicCast(v48, v131, v50, v47, 6);
  v52 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v46 + 56);
  if (v51)
  {
    v53 = *(_QWORD *)(v0 + 1360);
    v54 = *(_QWORD *)(v0 + 1304);
    v52(v54, 0, 1, *(_QWORD *)(v0 + 1312));
    sub_1000126EC(v54, v53, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010EA0E0 != -1)
      swift_once(&qword_1010EA0E0, sub_1009A316C);
    v55 = *(_QWORD *)(v0 + 1472);
    v56 = *(_QWORD *)(v0 + 1464);
    v57 = *(_QWORD *)(v0 + 1360);
    v58 = *(int **)(v0 + 1312);
    v59 = *(_QWORD *)(v0 + 1296);
    v60 = (void *)qword_1011B7AC0;
    *(_QWORD *)(v0 + 1776) = qword_1011B7AC0;
    v61 = *(_BYTE *)(v57 + v58[20]);
    *(_BYTE *)(v0 + 2410) = v61;
    v62 = *(_QWORD *)(v57 + v58[16]);
    v63 = *(_QWORD *)(v57 + v58[17]);
    v130 = v60;
    v64 = sub_100A2D38C(v62, v63);
    *(_BYTE *)(v0 + 2411) = v64;
    sub_10000F9B8(v57 + v58[7], v59, &qword_1010ED860);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v59, 1, v56) == 1)
    {
      v65 = *(_QWORD *)(v0 + 1296);
      sub_1000126B0(*(_QWORD *)(v0 + 1360), type metadata accessor for OwnedBeaconRecord);
      sub_100004048(v65, &qword_1010ED860);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1640))(*(_QWORD *)(v0 + 1520), *(_QWORD *)(v0 + 1296), *(_QWORD *)(v0 + 1464));
      sub_1009A2594();
      *(_QWORD *)(v0 + 1784) = v81;
      *(_QWORD *)(v0 + 1792) = v82;
      if (v82 >> 60 != 15)
      {
        v93 = *(_QWORD *)(v0 + 992);
        v92 = sub_10071E7EC;
        return swift_task_switch(v92, v93, 0);
      }
      v83 = *(_QWORD *)(v0 + 1360);
      (*(void (**)(_QWORD, _QWORD))(v0 + 1656))(*(_QWORD *)(v0 + 1520), *(_QWORD *)(v0 + 1464));
      sub_1000126B0(v83, type metadata accessor for OwnedBeaconRecord);
    }
    v80 = v130;
    v45 = v0 + 1704;
  }
  else
  {
    v66 = *(_QWORD *)(v0 + 1304);
    v67 = *(_QWORD *)(v0 + 1200);
    v68 = *(_QWORD *)(v0 + 1192);
    v69 = *(_QWORD *)(v0 + 1184);
    v70 = *(_QWORD *)(v0 + 984);
    v52(v66, 1, 1, *(_QWORD *)(v0 + 1312));
    sub_100004048(v66, (uint64_t *)&unk_1010F47C0);
    sub_100030784(v70, v0 + 424);
    v71 = swift_dynamicCast(v69, v0 + 424, v50, v68, 6);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v67 + 56);
    if (v71)
    {
      v73 = *(_QWORD *)(v0 + 1248);
      v74 = *(int **)(v0 + 1192);
      v75 = *(_QWORD *)(v0 + 1184);
      v72(v75, 0, 1, v74);
      sub_1000126EC(v75, v73, type metadata accessor for SharedBeaconRecord);
      v76 = v73 + v74[7];
      v77 = *(_QWORD *)(v76 + 8);
      v78 = *(void **)(v76 + 16);
      v79 = *(_BYTE *)v76;
      swift_bridgeObjectRetain(v78);
      v80 = (id)sub_100ACD7B4(v79, v77, v78);
      swift_bridgeObjectRelease();
      v64 = sub_100A2D38C(*(_QWORD *)(v73 + v74[11]), *(_QWORD *)(v73 + v74[12]));
      sub_1000126B0(v73, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v84 = *(_QWORD *)(v0 + 1184);
      v72(v84, 1, 1, *(int **)(v0 + 1192));
      sub_100004048(v84, (uint64_t *)&unk_1010EE180);
      if (qword_1010EA0E0 != -1)
        swift_once(&qword_1010EA0E0, sub_1009A316C);
      v80 = (id)qword_1011B7AC0;
      v64 = 0;
    }
    v61 = 0;
  }
  v85 = *(_QWORD *)(v0 + 1752);
  v86 = *(_BYTE *)(v0 + 2409);
  v87 = *(_QWORD *)(v0 + 1744);
  *(_QWORD *)(v0 + 1872) = *(_QWORD *)(v0 + 1720);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)v45;
  *(_QWORD *)(v0 + 1848) = v85;
  *(_BYTE *)(v45 + 710) = v86;
  *(_QWORD *)(v0 + 1840) = v80;
  *(_BYTE *)(v45 + 709) = v61;
  *(_BYTE *)(v45 + 708) = v64;
  *(_OWORD *)(v0 + 1824) = 0u;
  *(_QWORD *)(v0 + 1816) = v87;
  if ((*(_WORD *)(v0 + 1000) & 0x203) == 0)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
    *(_OWORD *)(v0 + 1920) = 0u;
    v95 = *(_QWORD *)(v0 + 1000);
    if ((v95 & 2) != 0
      && (v96 = *(_QWORD *)(v0 + 1168),
          v97 = *(_QWORD *)(v0 + 1016),
          !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v96, 1, v97)))
    {
      v119 = (uint64_t *)(v96 + *(int *)(v97 + 32));
      v98 = *v119;
      swift_bridgeObjectRetain(v119[1]);
    }
    else
    {
      v98 = 0;
      v99 = 0;
    }
    *(_QWORD *)(v0 + 1944) = v99;
    *(_QWORD *)(v0 + 1936) = v98;
    if ((v95 & 0x204) != 0)
    {
      v100 = *(_QWORD **)(v0 + 984);
      v101 = v100[3];
      v102 = v100[4];
      sub_10001AA44(v100, v101);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 48))(v101, v102);
      v104 = (v95 & 0x208) == 0;
      v95 = *(_QWORD *)(v0 + 1000);
      if (!v104)
        goto LABEL_37;
      v105 = 0;
    }
    else
    {
      v103 = 0;
      v105 = 0;
      if ((v95 & 8) != 0)
      {
LABEL_37:
        *(_QWORD *)(v0 + 1952) = v103;
        v106 = *(_QWORD **)(v0 + 984);
        v107 = v106[3];
        v108 = v106[4];
        sub_10001AA44(v106, v107);
        v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 56))(v107, v108);
        *(_QWORD *)(v0 + 1960) = v109;
        if ((v95 & 0x200) != 0)
        {
          v93 = *(_QWORD *)(v0 + 992);
          v92 = sub_10071F764;
          return swift_task_switch(v92, v93, 0);
        }
        v105 = v109;
        v95 = *(_QWORD *)(v0 + 1000);
      }
    }
    v110 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
    if ((v95 & 0x20) != 0)
    {
      v115 = *(_QWORD *)(v0 + 992);
      *(_QWORD *)(v0 + 2064) = v103;
      *(_QWORD *)(v0 + 2056) = v105;
      *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v0 + 2040) = v110;
      *(_BYTE *)(v45 + 711) = 0;
      *(_QWORD *)(v0 + 2032) = v115;
      v116 = *(_QWORD **)(v0 + 984);
      v117 = v116[3];
      v118 = v116[4];
      sub_10001AA44(v116, v117);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v118 + 8) + 8) + 32))(v117);
      v92 = sub_10071FEA4;
      v93 = v115;
      return swift_task_switch(v92, v93, 0);
    }
    v111 = *(_QWORD *)(v0 + 1000);
    if ((v111 & 0x100) != 0)
    {
      v120 = *(_QWORD *)(v0 + 992);
      *(_QWORD *)(v0 + 2128) = v103;
      *(_QWORD *)(v0 + 2120) = v105;
      *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v0 + 2104) = v110;
      *(_BYTE *)(v45 + 712) = 0;
      *(_QWORD *)(v0 + 2096) = 0;
      v121 = *(_QWORD **)(v0 + 984);
      v122 = v121[3];
      v123 = v121[4];
      sub_10001AA44(v121, v122);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v123 + 8) + 8) + 32))(v122);
      v92 = sub_100720208;
      v93 = v120;
      return swift_task_switch(v92, v93, 0);
    }
    *(_QWORD *)(v0 + 2192) = v103;
    *(_QWORD *)(v0 + 2184) = v105;
    *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2168) = v110;
    *(_BYTE *)(v45 + 713) = 0;
    *(_OWORD *)(v0 + 2152) = 0u;
    v88 = *(_QWORD *)(v0 + 992);
    if ((v111 & 0x240) != 0)
    {
      v112 = *(_QWORD **)(v0 + 984);
      v113 = v112[3];
      v114 = v112[4];
      sub_10001AA44(v112, v113);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v114 + 8) + 8) + 32))(v113);
      v92 = sub_100720574;
    }
    else
    {
      *(_QWORD *)(v0 + 2224) = 0;
      *(_QWORD *)(v0 + 2216) = v88;
      v124 = *(_QWORD **)(v0 + 984);
      v125 = v124[3];
      v126 = v124[4];
      sub_10001AA44(v124, v125);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v126 + 8) + 8) + 32))(v125);
      v92 = sub_1007207D8;
    }
    goto LABEL_26;
  }
  v88 = *(_QWORD *)(v0 + 992);
  v89 = *(_QWORD **)(v0 + 984);
  v90 = v89[3];
  v91 = v89[4];
  sub_10001AA44(v89, v90);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 8) + 8) + 32))(v90);
  v92 = sub_10071EE54;
LABEL_26:
  v93 = v88;
  return swift_task_switch(v92, v93, 0);
}

uint64_t sub_10071E7EC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1640);
  v2 = *(unsigned __int8 *)(v0 + 2392);
  v3 = *(_QWORD *)(v0 + 1560);
  v4 = *(_QWORD *)(v0 + 1464);
  v5 = *(_QWORD *)(v0 + 992);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 1480);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1624))(v3, *(_QWORD *)(v0 + 1520), v4);
  v9 = swift_allocObject(&unk_10108CB18, v7, v8);
  *(_QWORD *)(v0 + 1800) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v6, v3, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1808) = v11;
  *v11 = v0;
  v11[1] = sub_10071E8DC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1264), sub_100727DFC, v9, *(_QWORD *)(v0 + 1256));
}

uint64_t sub_10071E8DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1800);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1808));
  swift_release(v1);
  return swift_task_switch(sub_10071E940, v2, 0);
}

uint64_t sub_10071E940()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 1264);
  v2 = type metadata accessor for OwnedBeaconGroup(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 1792);
  v5 = *(_QWORD *)(v0 + 1784);
  if (v3 == 1)
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 1656);
    v7 = *(_QWORD *)(v0 + 1520);
    v8 = *(_QWORD *)(v0 + 1464);
    v9 = *(_QWORD *)(v0 + 1360);
    sub_10001EF3C(v5, v4);
    v6(v7, v8);
    sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
    v10 = (uint64_t *)&unk_1010FF7F0;
    v11 = v1;
LABEL_5:
    sub_100004048(v11, v10);
    v22 = 0;
    v23 = 0;
    goto LABEL_7;
  }
  v12 = *(_QWORD *)(v0 + 1272);
  sub_10036B124(v5, v4, v12);
  sub_1000126B0(v1, type metadata accessor for OwnedBeaconGroup);
  v13 = type metadata accessor for MACAddress(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v16 = *(_QWORD *)(v0 + 1792);
  v17 = *(_QWORD *)(v0 + 1784);
  v72 = *(void (**)(uint64_t, uint64_t))(v0 + 1656);
  v18 = *(_QWORD *)(v0 + 1520);
  v19 = *(_QWORD *)(v0 + 1464);
  v20 = *(_QWORD *)(v0 + 1360);
  v21 = *(_QWORD *)(v0 + 1272);
  if (v15 == 1)
  {
    sub_10001EF3C(v17, v16);
    v72(v18, v19);
    sub_1000126B0(v20, type metadata accessor for OwnedBeaconRecord);
    v10 = (uint64_t *)&unk_1010F9890;
    v11 = v21;
    goto LABEL_5;
  }
  v71 = v14;
  v22 = MACAddress.bluetoothAddress.getter();
  v70 = v20;
  v23 = v24;
  sub_10001EF3C(v17, v16);
  v72(v18, v19);
  sub_1000126B0(v70, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v21, v13);
LABEL_7:
  v25 = *(_QWORD *)(v0 + 1752);
  v26 = *(_BYTE *)(v0 + 2409);
  v27 = *(_QWORD *)(v0 + 1776);
  v28 = *(_BYTE *)(v0 + 2410);
  v29 = *(_BYTE *)(v0 + 2411);
  v30 = *(_QWORD *)(v0 + 1744);
  *(_QWORD *)(v0 + 1872) = *(_QWORD *)(v0 + 1720);
  *(_OWORD *)(v0 + 1856) = *(_OWORD *)(v0 + 1704);
  *(_QWORD *)(v0 + 1848) = v25;
  *(_BYTE *)(v0 + 2414) = v26;
  *(_QWORD *)(v0 + 1840) = v27;
  *(_BYTE *)(v0 + 2413) = v28;
  *(_BYTE *)(v0 + 2412) = v29;
  *(_QWORD *)(v0 + 1832) = v23;
  *(_QWORD *)(v0 + 1824) = v22;
  *(_QWORD *)(v0 + 1816) = v30;
  if ((*(_WORD *)(v0 + 1000) & 0x203) != 0)
  {
    v31 = *(_QWORD *)(v0 + 992);
    v32 = *(_QWORD **)(v0 + 984);
    v33 = v32[3];
    v34 = v32[4];
    sub_10001AA44(v32, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v34 + 8) + 8) + 32))(v33);
    v35 = sub_10071EE54;
    goto LABEL_9;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1024) + 56))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1016));
  *(_OWORD *)(v0 + 1920) = 0u;
  v38 = *(_QWORD *)(v0 + 1000);
  if ((v38 & 2) != 0
    && (v39 = *(_QWORD *)(v0 + 1168),
        v40 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v39, 1, v40)))
  {
    v62 = (uint64_t *)(v39 + *(int *)(v40 + 32));
    v41 = *v62;
    swift_bridgeObjectRetain(v62[1]);
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v42;
  *(_QWORD *)(v0 + 1936) = v41;
  if ((v38 & 0x204) != 0)
  {
    v43 = *(_QWORD **)(v0 + 984);
    v44 = v43[3];
    v45 = v43[4];
    sub_10001AA44(v43, v44);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 48))(v44, v45);
    v47 = (v38 & 0x208) == 0;
    v38 = *(_QWORD *)(v0 + 1000);
    if (!v47)
      goto LABEL_19;
    v48 = 0;
  }
  else
  {
    v46 = 0;
    v48 = 0;
    if ((v38 & 8) != 0)
    {
LABEL_19:
      *(_QWORD *)(v0 + 1952) = v46;
      v49 = *(_QWORD **)(v0 + 984);
      v50 = v49[3];
      v51 = v49[4];
      sub_10001AA44(v49, v50);
      v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 56))(v50, v51);
      *(_QWORD *)(v0 + 1960) = v52;
      if ((v38 & 0x200) != 0)
      {
        v36 = *(_QWORD *)(v0 + 992);
        v35 = sub_10071F764;
        return swift_task_switch(v35, v36, 0);
      }
      v48 = v52;
      v38 = *(_QWORD *)(v0 + 1000);
    }
  }
  v53 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v38 & 0x20) != 0)
  {
    v58 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v46;
    *(_QWORD *)(v0 + 2056) = v48;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v53;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v58;
    v59 = *(_QWORD **)(v0 + 984);
    v60 = v59[3];
    v61 = v59[4];
    sub_10001AA44(v59, v60);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + 32))(v60);
    v35 = sub_10071FEA4;
    v36 = v58;
    return swift_task_switch(v35, v36, 0);
  }
  v54 = *(_QWORD *)(v0 + 1000);
  if ((v54 & 0x100) != 0)
  {
    v63 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v46;
    *(_QWORD *)(v0 + 2120) = v48;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v53;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v64 = *(_QWORD **)(v0 + 984);
    v65 = v64[3];
    v66 = v64[4];
    sub_10001AA44(v64, v65);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v66 + 8) + 8) + 32))(v65);
    v35 = sub_100720208;
    v36 = v63;
    return swift_task_switch(v35, v36, 0);
  }
  *(_QWORD *)(v0 + 2192) = v46;
  *(_QWORD *)(v0 + 2184) = v48;
  *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 2168) = v53;
  *(_BYTE *)(v0 + 2417) = 0;
  *(_OWORD *)(v0 + 2152) = 0u;
  v31 = *(_QWORD *)(v0 + 992);
  if ((v54 & 0x240) != 0)
  {
    v55 = *(_QWORD **)(v0 + 984);
    v56 = v55[3];
    v57 = v55[4];
    sub_10001AA44(v55, v56);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 32))(v56);
    v35 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v31;
    v67 = *(_QWORD **)(v0 + 984);
    v68 = v67[3];
    v69 = v67[4];
    sub_10001AA44(v67, v68);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v69 + 8) + 8) + 32))(v68);
    v35 = sub_1007207D8;
  }
LABEL_9:
  v36 = v31;
  return swift_task_switch(v35, v36, 0);
}

uint64_t sub_10071EE54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[194];
  v2 = v0[185];
  v3 = v0[184];
  v4 = v0[183];
  v5 = v0[124];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[195], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108CA50, v7 + v2, v6 | 7);
  v0[235] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[236] = v10;
  *v10 = v0;
  v10[1] = sub_10071EF38;
  return unsafeBlocking<A>(_:)(v0[145], sub_1007276AC, v8, v0[142]);
}

uint64_t sub_10071EF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1880);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1472);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1888));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10071EFC8, v5, 0);
}

uint64_t sub_10071EFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1152);
  v3 = *(_QWORD *)(v0 + 1024);
  v4 = *(_QWORD *)(v0 + 1016);
  sub_100005CF0(*(_QWORD *)(v0 + 1160), v1, &qword_10110EEB0);
  sub_10000F9B8(v1, v2, &qword_10110EEB0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(_QWORD *)(v0 + 1896) = v5;
  LODWORD(v1) = v5(v2, 1, v4);
  sub_100004048(v2, &qword_10110EEB0);
  if ((_DWORD)v1 == 1)
  {
    v6 = *(_QWORD *)(v0 + 1616);
    sub_100030784(*(_QWORD *)(v0 + 984), v0 + 624);
    v7 = swift_allocObject(&unk_10108CA78, 64, 7);
    *(_QWORD *)(v0 + 1904) = v7;
    *(_QWORD *)(v7 + 16) = v6;
    sub_10000F9FC((__int128 *)(v0 + 624), v7 + 24);
    v8 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 1912) = v9;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    *v9 = v0;
    v9[1] = sub_10071F3F0;
    return unsafeBlocking<A>(_:)(v0 + 2407, sub_100727B30, v7, v10);
  }
  v12 = *(_QWORD *)(v0 + 1000);
  if ((v12 & 1) != 0
    && (v13 = *(_QWORD *)(v0 + 1168),
        v14 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1896))(v13, 1, v14)))
  {
    v43 = (uint64_t *)(v13 + *(int *)(v14 + 36));
    v15 = *v43;
    swift_bridgeObjectRetain(v43[1]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  *(_QWORD *)(v0 + 1928) = v16;
  *(_QWORD *)(v0 + 1920) = v15;
  if ((v12 & 2) != 0
    && (v17 = *(_QWORD *)(v0 + 1168),
        v18 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v17, 1, v18)))
  {
    v44 = (uint64_t *)(v17 + *(int *)(v18 + 32));
    v19 = *v44;
    swift_bridgeObjectRetain(v44[1]);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v20;
  *(_QWORD *)(v0 + 1936) = v19;
  if ((v12 & 0x204) != 0)
  {
    v21 = *(_QWORD **)(v0 + 984);
    v22 = v21[3];
    v23 = v21[4];
    sub_10001AA44(v21, v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 48))(v22, v23);
    v25 = (v12 & 0x208) == 0;
    v12 = *(_QWORD *)(v0 + 1000);
    if (v25)
    {
      v26 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v24 = 0;
    v26 = 0;
    if ((v12 & 8) == 0)
      goto LABEL_16;
  }
  *(_QWORD *)(v0 + 1952) = v24;
  v27 = *(_QWORD **)(v0 + 984);
  v28 = v27[3];
  v29 = v27[4];
  sub_10001AA44(v27, v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
  *(_QWORD *)(v0 + 1960) = v30;
  if ((v12 & 0x200) != 0)
  {
    v38 = *(_QWORD *)(v0 + 992);
    v37 = sub_10071F764;
    return swift_task_switch(v37, v38, 0);
  }
  v26 = v30;
  v12 = *(_QWORD *)(v0 + 1000);
LABEL_16:
  v31 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v12 & 0x20) != 0)
  {
    v39 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v24;
    *(_QWORD *)(v0 + 2056) = v26;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v31;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v39;
    v40 = *(_QWORD **)(v0 + 984);
    v41 = v40[3];
    v42 = v40[4];
    sub_10001AA44(v40, v41);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 8) + 32))(v41);
    v37 = sub_10071FEA4;
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 1000);
    if ((v32 & 0x100) == 0)
    {
      *(_QWORD *)(v0 + 2192) = v24;
      *(_QWORD *)(v0 + 2184) = v26;
      *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v0 + 2168) = v31;
      *(_BYTE *)(v0 + 2417) = 0;
      *(_OWORD *)(v0 + 2152) = 0u;
      v33 = *(_QWORD *)(v0 + 992);
      if ((v32 & 0x240) != 0)
      {
        v34 = *(_QWORD **)(v0 + 984);
        v35 = v34[3];
        v36 = v34[4];
        sub_10001AA44(v34, v35);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
        v37 = sub_100720574;
      }
      else
      {
        *(_QWORD *)(v0 + 2224) = 0;
        *(_QWORD *)(v0 + 2216) = v33;
        v48 = *(_QWORD **)(v0 + 984);
        v49 = v48[3];
        v50 = v48[4];
        sub_10001AA44(v48, v49);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v50 + 8) + 8) + 32))(v49);
        v37 = sub_1007207D8;
      }
      v38 = v33;
      return swift_task_switch(v37, v38, 0);
    }
    v39 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v24;
    *(_QWORD *)(v0 + 2120) = v26;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v31;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v45 = *(_QWORD **)(v0 + 984);
    v46 = v45[3];
    v47 = v45[4];
    sub_10001AA44(v45, v46);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v47 + 8) + 8) + 32))(v46);
    v37 = sub_100720208;
  }
  v38 = v39;
  return swift_task_switch(v37, v38, 0);
}

uint64_t sub_10071F3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1904);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1912));
  swift_release(v1);
  return swift_task_switch(sub_10071F454, v2, 0);
}

uint64_t sub_10071F454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 1000);
  if ((v1 & 1) != 0
    && (v2 = *(_QWORD *)(v0 + 1168),
        v3 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1896))(v2, 1, v3)))
  {
    v32 = (uint64_t *)(v2 + *(int *)(v3 + 36));
    v4 = *v32;
    swift_bridgeObjectRetain(v32[1]);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  *(_QWORD *)(v0 + 1928) = v5;
  *(_QWORD *)(v0 + 1920) = v4;
  if ((v1 & 2) != 0
    && (v6 = *(_QWORD *)(v0 + 1168),
        v7 = *(_QWORD *)(v0 + 1016),
        !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48))(v6, 1, v7)))
  {
    v33 = (uint64_t *)(v6 + *(int *)(v7 + 32));
    v8 = *v33;
    swift_bridgeObjectRetain(v33[1]);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *(_QWORD *)(v0 + 1944) = v9;
  *(_QWORD *)(v0 + 1936) = v8;
  if ((v1 & 0x204) != 0)
  {
    v10 = *(_QWORD **)(v0 + 984);
    v11 = v10[3];
    v12 = v10[4];
    sub_10001AA44(v10, v11);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
    v14 = (v1 & 0x208) == 0;
    v1 = *(_QWORD *)(v0 + 1000);
    if (v14)
    {
      v15 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v13 = 0;
    v15 = 0;
    if ((v1 & 8) == 0)
      goto LABEL_14;
  }
  *(_QWORD *)(v0 + 1952) = v13;
  v16 = *(_QWORD **)(v0 + 984);
  v17 = v16[3];
  v18 = v16[4];
  sub_10001AA44(v16, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 56))(v17, v18);
  *(_QWORD *)(v0 + 1960) = v19;
  if ((v1 & 0x200) != 0)
  {
    v27 = *(_QWORD *)(v0 + 992);
    v26 = sub_10071F764;
    return swift_task_switch(v26, v27, 0);
  }
  v15 = v19;
  v1 = *(_QWORD *)(v0 + 1000);
LABEL_14:
  v20 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
  if ((v1 & 0x20) != 0)
  {
    v28 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2064) = v13;
    *(_QWORD *)(v0 + 2056) = v15;
    *(_QWORD *)(v0 + 2048) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2040) = v20;
    *(_BYTE *)(v0 + 2415) = 0;
    *(_QWORD *)(v0 + 2032) = v28;
    v29 = *(_QWORD **)(v0 + 984);
    v30 = v29[3];
    v31 = v29[4];
    sub_10001AA44(v29, v30);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v31 + 8) + 8) + 32))(v30);
    v26 = sub_10071FEA4;
LABEL_24:
    v27 = v28;
    return swift_task_switch(v26, v27, 0);
  }
  v21 = *(_QWORD *)(v0 + 1000);
  if ((v21 & 0x100) != 0)
  {
    v28 = *(_QWORD *)(v0 + 992);
    *(_QWORD *)(v0 + 2128) = v13;
    *(_QWORD *)(v0 + 2120) = v15;
    *(_QWORD *)(v0 + 2112) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v0 + 2104) = v20;
    *(_BYTE *)(v0 + 2416) = 0;
    *(_QWORD *)(v0 + 2096) = 0;
    v34 = *(_QWORD **)(v0 + 984);
    v35 = v34[3];
    v36 = v34[4];
    sub_10001AA44(v34, v35);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
    v26 = sub_100720208;
    goto LABEL_24;
  }
  *(_QWORD *)(v0 + 2192) = v13;
  *(_QWORD *)(v0 + 2184) = v15;
  *(_QWORD *)(v0 + 2176) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v0 + 2168) = v20;
  *(_BYTE *)(v0 + 2417) = 0;
  *(_OWORD *)(v0 + 2152) = 0u;
  v22 = *(_QWORD *)(v0 + 992);
  if ((v21 & 0x240) != 0)
  {
    v23 = *(_QWORD **)(v0 + 984);
    v24 = v23[3];
    v25 = v23[4];
    sub_10001AA44(v23, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 32))(v24);
    v26 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v22;
    v38 = *(_QWORD **)(v0 + 984);
    v39 = v38[3];
    v40 = v38[4];
    sub_10001AA44(v38, v39);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 8) + 32))(v39);
    v26 = sub_1007207D8;
  }
  v27 = v22;
  return swift_task_switch(v26, v27, 0);
}

uint64_t sub_10071F764()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1968) = v2;
  v3 = sub_10001A9A8(&qword_1011058A8);
  *v2 = v0;
  v2[1] = sub_10071F7E0;
  return unsafeBlocking<A>(_:)(v0 + 904, sub_100727A5C, *(_QWORD *)(v0 + 992), v3);
}

uint64_t sub_10071F7E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 992);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1968));
  swift_release(v1);
  return swift_task_switch(sub_10071F840, v1, 0);
}

uint64_t sub_10071F840()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[126];
  v0[247] = v0[113];
  return swift_task_switch(sub_10071F85C, v1, 0);
}

uint64_t sub_10071F85C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)();
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1976);
  v2 = *(_QWORD *)(v0 + 1616);
  v3 = *(_QWORD *)(v0 + 984);
  v4 = (unint64_t *)swift_task_alloc(32);
  v4[2] = v3;
  v5 = sub_10001CEFC((uint64_t (*)(char *))sub_100727A64, v4, v1);
  swift_task_dealloc(v4);
  v6 = sub_10047CE18(v5);
  swift_bridgeObjectRelease();
  v7 = sub_10001D404((uint64_t)v6);
  *(_QWORD *)(v0 + 1984) = v7;
  swift_bridgeObjectRelease();
  if (v2)
  {
    v8 = *(_QWORD *)(v0 + 1616);
    sub_100030784(*(_QWORD *)(v0 + 984), v0 + 744);
    v9 = swift_allocObject(&unk_10108CA00, 64, 7);
    *(_QWORD *)(v0 + 1992) = v9;
    *(_QWORD *)(v9 + 16) = v8;
    sub_10000F9FC((__int128 *)(v0 + 744), v9 + 24);
    v10 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v8, 2);
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 2000) = v11;
    v12 = sub_10001A9A8((uint64_t *)&unk_1011058B0);
    *v11 = v0;
    v11[1] = sub_10071FB48;
    return unsafeBlocking<A>(_:)(v0 + 912, sub_100727A84, v9, v12);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 1000);
    v15 = sub_1006B9EEC((uint64_t)_swiftEmptyArrayStorage);
    if ((v14 & 0x20) != 0)
    {
      v19 = *(_QWORD *)(v0 + 992);
      *(int8x16_t *)(v0 + 2056) = vextq_s8(*(int8x16_t *)(v0 + 1952), *(int8x16_t *)(v0 + 1952), 8uLL);
      *(_QWORD *)(v0 + 2048) = v7;
      *(_QWORD *)(v0 + 2040) = v15;
      *(_BYTE *)(v0 + 2415) = 0;
      *(_QWORD *)(v0 + 2032) = v19;
      v24 = *(_QWORD **)(v0 + 984);
      v25 = v24[3];
      v26 = v24[4];
      sub_10001AA44(v24, v25);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 8) + 32))(v25);
      v23 = sub_10071FEA4;
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 1000);
      v17 = *(_QWORD *)(v0 + 1960);
      v18 = *(_QWORD *)(v0 + 1952);
      if ((v16 & 0x100) != 0)
      {
        v19 = *(_QWORD *)(v0 + 992);
        *(_QWORD *)(v0 + 2128) = v18;
        *(_QWORD *)(v0 + 2120) = v17;
        *(_QWORD *)(v0 + 2112) = v7;
        *(_QWORD *)(v0 + 2104) = v15;
        *(_BYTE *)(v0 + 2416) = 0;
        *(_QWORD *)(v0 + 2096) = 0;
        v27 = *(_QWORD **)(v0 + 984);
        v28 = v27[3];
        v29 = v27[4];
        sub_10001AA44(v27, v28);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v29 + 8) + 8) + 32))(v28);
        v23 = sub_100720208;
      }
      else
      {
        *(_QWORD *)(v0 + 2192) = v18;
        *(_QWORD *)(v0 + 2184) = v17;
        *(_QWORD *)(v0 + 2176) = v7;
        *(_QWORD *)(v0 + 2168) = v15;
        *(_BYTE *)(v0 + 2417) = 0;
        *(_OWORD *)(v0 + 2152) = 0u;
        v19 = *(_QWORD *)(v0 + 992);
        if ((v16 & 0x240) != 0)
        {
          v20 = *(_QWORD **)(v0 + 984);
          v21 = v20[3];
          v22 = v20[4];
          sub_10001AA44(v20, v21);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v21);
          v23 = sub_100720574;
        }
        else
        {
          *(_QWORD *)(v0 + 2224) = 0;
          *(_QWORD *)(v0 + 2216) = v19;
          v30 = *(_QWORD **)(v0 + 984);
          v31 = v30[3];
          v32 = v30[4];
          sub_10001AA44(v30, v31);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8) + 32))(v31);
          v23 = sub_1007207D8;
        }
      }
    }
    return swift_task_switch(v23, v19, 0);
  }
}

uint64_t sub_10071FB48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1992);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2000));
  swift_release(v1);
  return swift_task_switch(sub_10071FBAC, v2, 0);
}

uint64_t sub_10071FBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 1616);
  v2 = *(_QWORD *)(v0 + 984);
  *(_QWORD *)(v0 + 2008) = *(_QWORD *)(v0 + 912);
  sub_100030784(v2, v0 + 664);
  v3 = swift_allocObject(&unk_10108CA28, 64, 7);
  *(_QWORD *)(v0 + 2016) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 664), v3 + 24);
  v4 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  *(_QWORD *)(v0 + 2024) = v5;
  *v5 = v0;
  v5[1] = sub_10071FC70;
  return unsafeBlocking<A>(_:)(v0 + 2408, sub_100727AD8, v3, &type metadata for Bool);
}

uint64_t sub_10071FC70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2016);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2024));
  swift_release(v1);
  return swift_task_switch(sub_10071FCD4, v2, 0);
}

uint64_t sub_10071FCD4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 1000);
  swift_release(*(_QWORD *)(v0 + 1616));
  v2 = *(_BYTE *)(v0 + 2408);
  if ((v1 & 0x20) != 0)
  {
    v13 = *(_QWORD *)(v0 + 2008);
    v14 = *(_QWORD *)(v0 + 1984);
    v8 = *(_QWORD *)(v0 + 992);
    *(int8x16_t *)(v0 + 2056) = vextq_s8(*(int8x16_t *)(v0 + 1952), *(int8x16_t *)(v0 + 1952), 8uLL);
    *(_QWORD *)(v0 + 2048) = v14;
    *(_QWORD *)(v0 + 2040) = v13;
    *(_BYTE *)(v0 + 2415) = v2;
    *(_QWORD *)(v0 + 2032) = v8;
    v15 = *(_QWORD **)(v0 + 984);
    v16 = v15[3];
    v17 = v15[4];
    sub_10001AA44(v15, v16);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v16);
    v12 = sub_10071FEA4;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 1000);
    v4 = *(_QWORD *)(v0 + 2008);
    v5 = *(_QWORD *)(v0 + 1984);
    v6 = *(_QWORD *)(v0 + 1960);
    v7 = *(_QWORD *)(v0 + 1952);
    if ((v3 & 0x100) != 0)
    {
      v8 = *(_QWORD *)(v0 + 992);
      *(_QWORD *)(v0 + 2128) = v7;
      *(_QWORD *)(v0 + 2120) = v6;
      *(_QWORD *)(v0 + 2112) = v5;
      *(_QWORD *)(v0 + 2104) = v4;
      *(_BYTE *)(v0 + 2416) = v2;
      *(_QWORD *)(v0 + 2096) = 0;
      v18 = *(_QWORD **)(v0 + 984);
      v19 = v18[3];
      v20 = v18[4];
      sub_10001AA44(v18, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v19);
      v12 = sub_100720208;
    }
    else
    {
      *(_QWORD *)(v0 + 2192) = v7;
      *(_QWORD *)(v0 + 2184) = v6;
      *(_QWORD *)(v0 + 2176) = v5;
      *(_QWORD *)(v0 + 2168) = v4;
      *(_BYTE *)(v0 + 2417) = v2;
      *(_OWORD *)(v0 + 2152) = 0u;
      v8 = *(_QWORD *)(v0 + 992);
      if ((v3 & 0x240) != 0)
      {
        v9 = *(_QWORD **)(v0 + 984);
        v10 = v9[3];
        v11 = v9[4];
        sub_10001AA44(v9, v10);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
        v12 = sub_100720574;
      }
      else
      {
        *(_QWORD *)(v0 + 2224) = 0;
        *(_QWORD *)(v0 + 2216) = v8;
        v21 = *(_QWORD **)(v0 + 984);
        v22 = v21[3];
        v23 = v21[4];
        sub_10001AA44(v21, v22);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
        v12 = sub_1007207D8;
      }
    }
  }
  return swift_task_switch(v12, v8, 0);
}

uint64_t sub_10071FEA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[194];
  v2 = v0[185];
  v3 = v0[184];
  v4 = v0[183];
  v5 = v0[124];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[195], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108C9D8, v7 + v2, v6 | 7);
  v0[259] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[260] = v10;
  *v10 = v0;
  v10[1] = sub_10071FF98;
  return unsafeBlocking<A>(_:)(v0 + 122, sub_100727A1C, v8, &type metadata for Int);
}

uint64_t sub_10071FF98()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 2072);
  swift_task_dealloc(*(_QWORD *)(*v0 + 2080));
  swift_release(v2);
  return swift_task_switch(sub_10071FFF4, *(_QWORD *)(v1 + 2032), 0);
}

uint64_t sub_10071FFF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[195];
  v2 = v0[184];
  v3 = v0[183];
  v4 = v0[126];
  v0[261] = v0[122];
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100720048, v4, 0);
}

void sub_100720048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 1008);
  if ((*(_BYTE *)(v1 + 192) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 1616);
    v3 = *(_QWORD *)(v0 + 2088);
    if (!v2)
      goto LABEL_7;
    swift_retain();
    CurrentValueSubject.value.getter((_QWORD *)(v0 + 968));
    swift_release(v2);
    v1 = *(_QWORD *)(v0 + 968);
    v4 = __OFADD__(v1, v3);
    v3 += v1;
    if (!v4)
      goto LABEL_7;
    __break(1u);
  }
  v5 = *(_QWORD *)(v0 + 2088);
  v6 = *(_QWORD *)(v1 + 184);
  v3 = v6 + v5;
  if (__OFADD__(v6, v5))
  {
    __break(1u);
    return;
  }
LABEL_7:
  v7 = *(_QWORD *)(v0 + 1000);
  v8 = *(_QWORD *)(v0 + 2064);
  v9 = *(_QWORD *)(v0 + 2056);
  v10 = *(_QWORD *)(v0 + 2048);
  v11 = *(_QWORD *)(v0 + 2040);
  v12 = *(_BYTE *)(v0 + 2415);
  if ((v7 & 0x100) != 0)
  {
    v13 = *(_QWORD *)(v0 + 2032);
    *(_QWORD *)(v0 + 2128) = v8;
    *(_QWORD *)(v0 + 2120) = v9;
    *(_QWORD *)(v0 + 2112) = v10;
    *(_QWORD *)(v0 + 2104) = v11;
    *(_BYTE *)(v0 + 2416) = v12;
    *(_QWORD *)(v0 + 2096) = v3;
    v18 = *(_QWORD **)(v0 + 984);
    v19 = v18[3];
    v20 = v18[4];
    sub_10001AA44(v18, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v19);
    v17 = sub_100720208;
  }
  else
  {
    *(_QWORD *)(v0 + 2192) = v8;
    *(_QWORD *)(v0 + 2184) = v9;
    *(_QWORD *)(v0 + 2176) = v10;
    *(_QWORD *)(v0 + 2168) = v11;
    *(_BYTE *)(v0 + 2417) = v12;
    *(_QWORD *)(v0 + 2160) = v3;
    *(_QWORD *)(v0 + 2152) = 0;
    v13 = *(_QWORD *)(v0 + 992);
    if ((v7 & 0x240) != 0)
    {
      v14 = *(_QWORD **)(v0 + 984);
      v15 = v14[3];
      v16 = v14[4];
      sub_10001AA44(v14, v15);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v15);
      v17 = sub_100720574;
    }
    else
    {
      *(_QWORD *)(v0 + 2224) = 0;
      *(_QWORD *)(v0 + 2216) = v13;
      v21 = *(_QWORD **)(v0 + 984);
      v22 = v21[3];
      v23 = v21[4];
      sub_10001AA44(v21, v22);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
      v17 = sub_1007207D8;
    }
  }
  swift_task_switch(v17, v13, 0);
}

uint64_t sub_100720208()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[194];
  v2 = v0[185];
  v3 = v0[184];
  v4 = v0[183];
  v5 = v0[124];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[195], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108C9B0, v7 + v2, v6 | 7);
  v0[267] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[268] = v10;
  *v10 = v0;
  v10[1] = sub_1007202EC;
  return unsafeBlocking<A>(_:)(v0[138], sub_10007CAF0, v8, v0[137]);
}

uint64_t sub_1007202EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2136);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1472);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2144));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_10072037C, v5, 0);
}

uint64_t sub_10072037C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  Class v9;
  __int128 v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 1104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1120) + 48))(v1, 1, *(_QWORD *)(v0 + 1112)) == 1)
  {
    sub_100004048(v1, &qword_1010F7AE0);
    v2 = 0;
  }
  else
  {
    sub_1000126EC(v1, *(_QWORD *)(v0 + 1128), type metadata accessor for KeySyncRecord);
    v3 = objc_msgSend(objc_allocWithZone((Class)SPKeySyncRecord), "init");
    v2 = v3;
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + 1128);
      v5 = *(_QWORD *)(v0 + 1112);
      v6 = v3;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v6, "setIdentifier:", isa);

      objc_msgSend(v6, "setLastIndexObserved:", *(_QWORD *)(v4 + *(int *)(v5 + 20)));
      v8 = v6;
      v9 = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v8, "setLastIndexObservationDate:", v9);

    }
    sub_1000126B0(*(_QWORD *)(v0 + 1128), type metadata accessor for KeySyncRecord);
  }
  v10 = *(_OWORD *)(v0 + 2112);
  v11 = *(_BYTE *)(v0 + 2416);
  v12 = *(_OWORD *)(v0 + 2096);
  *(_QWORD *)(v0 + 2192) = *(_QWORD *)(v0 + 2128);
  *(_OWORD *)(v0 + 2176) = v10;
  *(_BYTE *)(v0 + 2417) = v11;
  *(_OWORD *)(v0 + 2160) = v12;
  *(_QWORD *)(v0 + 2152) = v2;
  v13 = *(_QWORD *)(v0 + 992);
  if ((*(_WORD *)(v0 + 1000) & 0x240) != 0)
  {
    v14 = *(_QWORD **)(v0 + 984);
    v15 = v14[3];
    v16 = v14[4];
    sub_10001AA44(v14, v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v15);
    v17 = sub_100720574;
  }
  else
  {
    *(_QWORD *)(v0 + 2224) = 0;
    *(_QWORD *)(v0 + 2216) = v13;
    v18 = *(_QWORD **)(v0 + 984);
    v19 = v18[3];
    v20 = v18[4];
    sub_10001AA44(v18, v19);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v19);
    v17 = sub_1007207D8;
  }
  return swift_task_switch(v17, v13, 0);
}

uint64_t sub_100720574()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[194];
  v2 = v0[185];
  v3 = v0[184];
  v4 = v0[183];
  v5 = v0[124];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, v0[195], v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108C988, v7 + v2, v6 | 7);
  v0[275] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[276] = v10;
  *v10 = v0;
  v10[1] = sub_100720658;
  return unsafeBlocking<A>(_:)(v0[136], sub_100727A08, v8, v0[135]);
}

uint64_t sub_100720658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2200);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1472);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2208));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1007206E8, v5, 0);
}

uint64_t sub_1007206E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[136];
  v2 = type metadata accessor for BeaconStatus(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010F2CA8);
    v3 = 0;
  }
  else
  {
    v4 = *(_BYTE *)(v1 + *(int *)(v2 + 20));
    sub_1000126B0(v1, type metadata accessor for BeaconStatus);
    v3 = qword_100E4BDC8[(char)sub_1000AEDBC(v4)];
  }
  v5 = v0[124];
  v0[278] = v3;
  v0[277] = v5;
  v6 = (_QWORD *)v0[123];
  v7 = v6[3];
  v8 = v6[4];
  sub_10001AA44(v6, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v7);
  return swift_task_switch(sub_1007207D8, v5, 0);
}

uint64_t sub_1007207D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 1560);
  v2 = *(_QWORD *)(v0 + 1552);
  v3 = *(_QWORD *)(v0 + 1480);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1464);
  v6 = *(_QWORD *)(v0 + 992);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 2232) = v7;
  v7(v2, v1, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 2400) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108C8E8, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 2240) = v10;
  *(_QWORD *)(v10 + 16) = v6;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 2248) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 2256) = v13;
  *v13 = v0;
  v13[1] = sub_1007208CC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1144), sub_1007276AC, v10, *(_QWORD *)(v0 + 1136));
}

uint64_t sub_1007208CC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 2240);
  v3 = *(_QWORD *)(*v0 + 1560);
  v4 = *(_QWORD *)(*v0 + 1472);
  v5 = *(_QWORD *)(*v0 + 1464);
  v6 = *(_QWORD *)(*v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*v0 + 2256));
  swift_release(v2);
  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v1 + 2264) = v7;
  v7(v3, v5);
  return swift_task_switch(sub_10072095C, v6, 0);
}

id sub_10072095C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  id result;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  id v89;
  Class isa;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  Class v96;
  void (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  Class v105;
  NSString v106;
  uint64_t v107;
  NSString v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSString v118;
  uint64_t v119;
  NSString v120;
  NSString v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  Class v128;
  Class v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t, uint64_t);
  void (*v199)(uint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;

  v1 = *(_QWORD *)(v0 + 1144);
  v2 = *(_QWORD *)(v0 + 1016);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1024) + 48);
  *(_QWORD *)(v0 + 2272) = v3;
  if (v3(v1, 1, v2) == 1)
  {
    v4 = sub_100004048(v1, &qword_10110EEB0);
    v5 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v1 + *(int *)(v2 + 60));
    v4 = sub_1000126B0(v1, type metadata accessor for BeaconProductInfoRecord);
  }
  *(_QWORD *)(v0 + 2280) = v5;
  result = (id)MobileGestalt_get_current_device(v4);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v7 = result;
  v8 = (id)MobileGestalt_copy_productType_obj();

  if (v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

  }
  v9 = *(_QWORD *)(v0 + 1352);
  v10 = *(_QWORD *)(v0 + 1312);
  v11 = *(_QWORD *)(v0 + 984);
  v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 888) = v12;
  sub_1003CDF34();
  sub_1000330C8();
  static PartialMatchCase<>.first(containing:)(v0 + 888);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 2418) = *(_BYTE *)(v0 + 2406);
  sub_100030784(v11, v0 + 504);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  *(_QWORD *)(v0 + 2288) = v13;
  if (swift_dynamicCast(v9, v0 + 504, v13, v10, 0))
  {
    v14 = *(_QWORD **)(v0 + 984);
    sub_1000126EC(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1344), type metadata accessor for OwnedBeaconRecord);
    sub_1009A2B44();
    *(_WORD *)(v0 + 2404) = v15;
    v17 = v14[3];
    v16 = v14[4];
    sub_10001AA44(v14, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v17);
    v18 = *(_QWORD *)(v0 + 2216);
    v19 = sub_100721D2C;
    return (id)swift_task_switch(v19, v18, 0);
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 1072), v0 + 504, v13, *(_QWORD *)(v0 + 1056), 0))
  {
    v20 = *(_QWORD **)(v0 + 984);
    sub_1000126EC(*(_QWORD *)(v0 + 1072), *(_QWORD *)(v0 + 1064), type metadata accessor for LocalFindableAccessoryRecord);
    v21 = v20[3];
    v22 = v20[4];
    sub_10001AA44(v20, v21);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v21);
    v18 = *(_QWORD *)(v0 + 2216);
    v19 = sub_1007238B0;
    return (id)swift_task_switch(v19, v18, 0);
  }
  if (swift_dynamicCast(*(_QWORD *)(v0 + 1240), v0 + 504, v13, *(_QWORD *)(v0 + 1192), 0))
  {
    v23 = *(_QWORD *)(v0 + 1232);
    v24 = *(_QWORD *)(v0 + 1192);
    sub_1000126EC(*(_QWORD *)(v0 + 1240), v23, type metadata accessor for SharedBeaconRecord);
    v25 = sub_1001EE37C(*(_QWORD *)(v23 + *(int *)(v24 + 44)), *(_QWORD *)(v23 + *(int *)(v24 + 48)));
    if (v26 >> 60 == 15)
    {
      if (qword_1010E9ED8 != -1)
        swift_once(&qword_1010E9ED8, sub_1007116BC);
      v27 = *(_QWORD *)(v0 + 984);
      v28 = type metadata accessor for Logger(0);
      sub_10001A9E8(v28, (uint64_t)qword_1011B7598);
      v29 = sub_100030784(v27, v0 + 704);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v198 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
        v32 = *(_QWORD *)(v0 + 1560);
        v33 = *(_QWORD *)(v0 + 1464);
        v34 = swift_slowAlloc(22, -1);
        v35 = swift_slowAlloc(32, -1);
        v203 = v35;
        *(_DWORD *)v34 = 141558275;
        *(_QWORD *)(v0 + 944) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v34 + 4, v34 + 12);
        *(_WORD *)(v34 + 12) = 2081;
        v36 = *(_QWORD *)(v0 + 728);
        v37 = *(_QWORD *)(v0 + 736);
        sub_10001AA44((_QWORD *)(v0 + 704), v36);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v37 + 8) + 8) + 32))(v36);
        v38 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v39 = dispatch thunk of CustomStringConvertible.description.getter(v33, v38);
        v41 = v40;
        v198(v32, v33);
        *(_QWORD *)(v0 + 928) = sub_100016940(v39, v41, &v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v34 + 14, v34 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 704));
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Could not compute productUUID from shared beacon %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 704));
      }

      UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    else
    {
      v57 = v25;
      v58 = v26;
      if (qword_1010E9A18 != -1)
        swift_once(&qword_1010E9A18, sub_1001EE150);
      v203 = qword_1010F2B08;
      v204 = qword_1010F2B10;
      sub_10001BBBC(qword_1010F2B08, qword_1010F2B10);
      Data.append(_:)(v57, v58);
      v59 = v203;
      v60 = v204;
      *(_QWORD *)(v0 + 856) = v203;
      *(_QWORD *)(v0 + 864) = v60;
      v61 = sub_100035530();
      DataProtocol.stableUUID.getter(&type metadata for Data, v61);
      sub_10001BC14(v59, v60);
      sub_10001EF3C(v57, v58);
    }
    v18 = *(_QWORD *)(v0 + 2216);
    v19 = sub_1007246B8;
    return (id)swift_task_switch(v19, v18, 0);
  }
  v42 = v0 + 584;
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v43 = *(_QWORD *)(v0 + 984);
  v44 = type metadata accessor for Logger(0);
  sub_10001A9E8(v44, (uint64_t)qword_1011B7598);
  v45 = sub_100030784(v43, v0 + 544);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v199 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v48 = *(_QWORD *)(v0 + 1560);
    v194 = *(_QWORD *)(v0 + 1464);
    v49 = swift_slowAlloc(22, -1);
    v203 = swift_slowAlloc(32, -1);
    v196 = v203;
    *(_DWORD *)v49 = 141558275;
    *(_QWORD *)(v0 + 952) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 952, v0 + 960, v49 + 4, v49 + 12);
    *(_WORD *)(v49 + 12) = 2081;
    v50 = *(_QWORD *)(v0 + 568);
    v51 = *(_QWORD *)(v0 + 576);
    sub_10001AA44((_QWORD *)(v0 + 544), v50);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v51 + 8) + 8) + 32))(v50);
    v52 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v194, v52);
    v55 = v54;
    v199(v48, v194);
    *(_QWORD *)(v0 + 936) = sub_100016940(v53, v55, &v203);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 544));
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Beacon record type is not handled for beacon %{private,mask.hash}s.", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy(v196, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v196, -1, -1);
    v56 = v49;
    v42 = v0 + 584;
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 544));
  }

  v62 = *(_QWORD **)(v0 + 984);
  UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  v63 = v62[3];
  v64 = v62[4];
  sub_10001AA44(v62, v63);
  (*(void (**)(uint64_t, uint64_t))(v64 + 24))(v63, v64);
  v65 = *(_QWORD *)(v0 + 2288);
  v66 = *(_QWORD *)(v0 + 1200);
  v67 = *(_QWORD *)(v0 + 1192);
  v68 = *(_QWORD *)(v0 + 1176);
  v69 = *(_QWORD *)(v0 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 504));
  sub_100030784(v69, v42);
  v70 = swift_dynamicCast(v68, v42, v65, v67, 6);
  v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56);
  if ((v70 & 1) != 0)
  {
    v72 = *(_QWORD *)(v0 + 1224);
    v73 = *(_QWORD *)(v0 + 1216);
    v74 = *(_QWORD *)(v0 + 1192);
    v75 = *(_QWORD *)(v0 + 1176);
    v71(v75, 0, 1, v74);
    sub_1000126EC(v75, v72, type metadata accessor for SharedBeaconRecord);
    v76 = *(_QWORD *)(v72 + *(int *)(v74 + 44));
    sub_10005972C(v72, v73, type metadata accessor for SharedBeaconRecord);
    v77 = *(_QWORD *)(v0 + 1216);
    if (v76 != -1)
    {
      sub_1000126B0(v77, type metadata accessor for SharedBeaconRecord);
LABEL_35:
      sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
      goto LABEL_36;
    }
    v81 = *(_QWORD *)(v77 + *(int *)(*(_QWORD *)(v0 + 1192) + 48));
    sub_1000126B0(v77, type metadata accessor for SharedBeaconRecord);
    if (v81 != -1)
      goto LABEL_35;
    v130 = *(_QWORD *)(v0 + 1224);
    v131 = *(_QWORD *)(v0 + 1192);
    v132 = *(unsigned __int8 *)(v130 + *(int *)(v131 + 64));
    sub_10005972C(v130, *(_QWORD *)(v0 + 1208), type metadata accessor for SharedBeaconRecord);
    v133 = *(_QWORD *)(v0 + 1208);
    if (v132 == 4)
    {
      sub_1000126B0(v133, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v134 = *(unsigned __int8 *)(v133 + *(int *)(v131 + 64));
      sub_1000126B0(v133, type metadata accessor for SharedBeaconRecord);
      if (v134 != 1)
        goto LABEL_35;
    }
    v135 = *(_QWORD *)(v0 + 1040);
    sub_10000F9B8(*(_QWORD *)(v0 + 1224) + *(int *)(*(_QWORD *)(v0 + 1192) + 80), v135, (uint64_t *)&unk_1010F47B0);
    v136 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 48))(v135, 1, v136) == 1)
    {
      v137 = *(_QWORD *)(v0 + 1472);
      v138 = *(_QWORD *)(v0 + 1464);
      v139 = *(_QWORD *)(v0 + 1288);
      sub_100004048(*(_QWORD *)(v0 + 1040), (uint64_t *)&unk_1010F47B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v137 + 56))(v139, 1, 1, v138);
    }
    else
    {
      v140 = *(_QWORD *)(v0 + 1040);
      sub_10000F9B8(v140 + *(int *)(v136 + 20), *(_QWORD *)(v0 + 1288), &qword_1010ED860);
      sub_1000126B0(v140, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    }
    v141 = *(_QWORD *)(v0 + 1472);
    v142 = *(_QWORD *)(v0 + 1464);
    v143 = *(_QWORD *)(v0 + 1288);
    sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v143, 1, v142) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2248))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1464));
      goto LABEL_37;
    }
    v80 = *(_QWORD *)(v0 + 1288);
    v79 = &qword_1010ED860;
  }
  else
  {
    v78 = *(_QWORD *)(v0 + 1176);
    v71(v78, 1, 1, *(_QWORD *)(v0 + 1192));
    v79 = (uint64_t *)&unk_1010EE180;
    v80 = v78;
  }
  sub_100004048(v80, v79);
LABEL_36:
  v82 = *(_QWORD **)(v0 + 984);
  v83 = v82[3];
  v84 = v82[4];
  sub_10001AA44(v82, v83);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v84 + 8) + 8) + 32))(v83);
LABEL_37:
  v85 = *(_QWORD *)(v0 + 1472);
  v86 = *(_QWORD *)(v0 + 1464);
  v87 = *(_QWORD *)(v0 + 1280);
  v88 = *(_QWORD **)(v0 + 984);
  v89 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v89, "setIdentifier:", isa);

  v91 = v88[3];
  v92 = v88[4];
  sub_10001AA44(v88, v91);
  v93 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v92 + 176))(v91, v92);
  objc_msgSend(v89, "setType:", v93);

  v94 = v88[3];
  v95 = v88[4];
  sub_10001AA44(v88, v94);
  (*(void (**)(uint64_t, uint64_t))(v95 + 192))(v94, v95);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v87, 1, v86) == 1)
  {
    v96 = 0;
  }
  else
  {
    v97 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v98 = *(_QWORD *)(v0 + 1464);
    v99 = *(_QWORD *)(v0 + 1280);
    v96 = UUID._bridgeToObjectiveC()().super.isa;
    v97(v99, v98);
  }
  v100 = *(double *)(v0 + 2280);
  v101 = *(_QWORD *)(v0 + 2192);
  v102 = *(_QWORD *)(v0 + 2184);
  v103 = *(_QWORD *)(v0 + 1944);
  v104 = *(unsigned __int8 *)(v0 + 2418) != 5;
  objc_msgSend(v89, "setGroupIdentifier:", v96);

  objc_msgSend(v89, "setPartIdentifier:", 255);
  objc_msgSend(v89, "setConnectionAllowed:", v104);
  objc_msgSend(v89, "setTxPower:", v100);
  v105 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v89, "setProductUUID:", v105);

  objc_msgSend(v89, "setVendorId:", v101);
  objc_msgSend(v89, "setProductId:", v102);
  if (v103)
  {
    v106 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v106 = 0;
  }
  v107 = *(_QWORD *)(v0 + 1928);
  objc_msgSend(v89, "setModelName:", v106);

  if (v107)
  {
    v108 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v108 = 0;
  }
  objc_msgSend(v89, "setManufacturerName:", v108);

  v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2272);
  v110 = *(_QWORD *)(v0 + 1840);
  v111 = *(_QWORD *)(v0 + 1168);
  v112 = *(_QWORD *)(v0 + 1016);
  objc_msgSend(v89, "setSerialNumber:", 0);
  objc_msgSend(v89, "setOwner:", v110);
  v113 = 0;
  if (!v109(v111, 1, v112))
  {
    v114 = *(_QWORD *)(v0 + 1032);
    sub_10005972C(*(_QWORD *)(v0 + 1168), v114, type metadata accessor for BeaconProductInfoRecord);
    v113 = sub_100603CFC();
    sub_1000126B0(v114, type metadata accessor for BeaconProductInfoRecord);
  }
  v115 = *(unsigned __int8 *)(v0 + 2413);
  v116 = *(unsigned __int8 *)(v0 + 2412);
  v117 = *(_QWORD *)(v0 + 1832);
  objc_msgSend(v89, "setAccessoryProductInfo:", v113);

  objc_msgSend(v89, "setIsZeus:", v115);
  objc_msgSend(v89, "setIsAppleAudioAccessory:", v116);
  if (v117)
  {
    v118 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v118 = 0;
  }
  v119 = *(_QWORD *)(v0 + 1872);
  objc_msgSend(v89, "setDiscoveryId:", v118);

  v120 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v89, "setSystemVersion:", v120);

  if (v119)
  {
    v121 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v121 = 0;
  }
  v122 = *(_QWORD *)(v0 + 2224);
  v123 = *(_QWORD *)(v0 + 2160);
  v124 = *(void **)(v0 + 2152);
  v125 = *(void **)(v0 + 1856);
  v126 = *(void **)(v0 + 1848);
  v144 = *(unsigned __int8 *)(v0 + 2414);
  v145 = *(unsigned __int8 *)(v0 + 2417);
  v147 = *(void **)(v0 + 1840);
  v150 = *(_QWORD *)(v0 + 1616);
  v151 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
  v152 = *(_QWORD *)(v0 + 1600);
  v153 = *(_QWORD *)(v0 + 1576);
  v154 = *(_QWORD *)(v0 + 1560);
  v155 = *(_QWORD *)(v0 + 1552);
  v156 = *(_QWORD *)(v0 + 1544);
  v157 = *(_QWORD *)(v0 + 1536);
  v159 = *(_QWORD *)(v0 + 1528);
  v161 = *(_QWORD *)(v0 + 1520);
  v164 = *(_QWORD *)(v0 + 1504);
  v166 = *(_QWORD *)(v0 + 1496);
  v148 = *(_QWORD *)(v0 + 1488);
  v149 = *(_QWORD *)(v0 + 1512);
  v127 = *(_QWORD *)(v0 + 1464);
  v168 = *(_QWORD *)(v0 + 1456);
  v170 = *(_QWORD *)(v0 + 1440);
  v172 = *(_QWORD *)(v0 + 1432);
  v174 = *(_QWORD *)(v0 + 1424);
  v176 = *(_QWORD *)(v0 + 1416);
  v158 = *(_QWORD *)(v0 + 1408);
  v160 = *(_QWORD *)(v0 + 1392);
  v162 = *(_QWORD *)(v0 + 1368);
  v163 = *(_QWORD *)(v0 + 1360);
  v165 = *(_QWORD *)(v0 + 1352);
  v167 = *(_QWORD *)(v0 + 1344);
  v169 = *(_QWORD *)(v0 + 1336);
  v171 = *(_QWORD *)(v0 + 1304);
  v173 = *(_QWORD *)(v0 + 1296);
  v175 = *(_QWORD *)(v0 + 1288);
  v177 = *(_QWORD *)(v0 + 1280);
  v178 = *(_QWORD *)(v0 + 1272);
  v179 = *(_QWORD *)(v0 + 1264);
  v180 = *(_QWORD *)(v0 + 1248);
  v181 = *(_QWORD *)(v0 + 1240);
  v182 = *(_QWORD *)(v0 + 1232);
  v183 = *(_QWORD *)(v0 + 1224);
  v184 = *(_QWORD *)(v0 + 1216);
  v185 = *(_QWORD *)(v0 + 1208);
  v186 = *(_QWORD *)(v0 + 1184);
  v187 = *(_QWORD *)(v0 + 1176);
  v146 = *(_QWORD *)(v0 + 1168);
  v189 = *(_QWORD *)(v0 + 1160);
  v190 = *(_QWORD *)(v0 + 1152);
  v191 = *(_QWORD *)(v0 + 1144);
  v192 = *(_QWORD *)(v0 + 1128);
  v193 = *(_QWORD *)(v0 + 1104);
  v195 = *(_QWORD *)(v0 + 1088);
  v197 = *(_QWORD *)(v0 + 1072);
  v200 = *(_QWORD *)(v0 + 1064);
  v201 = *(_QWORD *)(v0 + 1048);
  v202 = *(_QWORD *)(v0 + 1040);
  v188 = *(_QWORD *)(v0 + 1032);
  objc_msgSend(v89, "setName:", v121);

  objc_msgSend(v89, "setBatteryLevel:", v122);
  objc_msgSend(v89, "setConnectableDeviceCount:", v123);
  objc_msgSend(v89, "setKeySyncRecord:", v124);
  objc_msgSend(v89, "setLostModeInfo:", v126);
  objc_msgSend(v89, "setRole:", v125);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v128 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v89, "setSafeLocations:", v128);

  objc_msgSend(v89, "setConnected:", v144);
  objc_msgSend(v89, "setCanBeLeashedByHost:", v145);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v129 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v89, "setTaskInformation:", v129);

  swift_release(v150);
  v151(v148, v127);
  v151(v149, v127);

  sub_100004048(v146, &qword_10110EEB0);
  swift_task_dealloc(v152);
  swift_task_dealloc(v153);
  swift_task_dealloc(v154);
  swift_task_dealloc(v155);
  swift_task_dealloc(v156);
  swift_task_dealloc(v157);
  swift_task_dealloc(v159);
  swift_task_dealloc(v161);
  swift_task_dealloc(v149);
  swift_task_dealloc(v164);
  swift_task_dealloc(v166);
  swift_task_dealloc(v148);
  swift_task_dealloc(v168);
  swift_task_dealloc(v170);
  swift_task_dealloc(v172);
  swift_task_dealloc(v174);
  swift_task_dealloc(v176);
  swift_task_dealloc(v158);
  swift_task_dealloc(v160);
  swift_task_dealloc(v162);
  swift_task_dealloc(v163);
  swift_task_dealloc(v165);
  swift_task_dealloc(v167);
  swift_task_dealloc(v169);
  swift_task_dealloc(v171);
  swift_task_dealloc(v173);
  swift_task_dealloc(v175);
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  swift_task_dealloc(v183);
  swift_task_dealloc(v184);
  swift_task_dealloc(v185);
  swift_task_dealloc(v186);
  swift_task_dealloc(v187);
  swift_task_dealloc(v146);
  swift_task_dealloc(v189);
  swift_task_dealloc(v190);
  swift_task_dealloc(v191);
  swift_task_dealloc(v192);
  swift_task_dealloc(v193);
  swift_task_dealloc(v195);
  swift_task_dealloc(v197);
  swift_task_dealloc(v200);
  swift_task_dealloc(v201);
  swift_task_dealloc(v202);
  swift_task_dealloc(v188);
  return (id)(*(uint64_t (**)(id))(v0 + 8))(v89);
}

uint64_t sub_100721D2C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2248);
  v2 = *(unsigned __int8 *)(v0 + 2400);
  v3 = *(_QWORD *)(v0 + 1552);
  v4 = *(_QWORD *)(v0 + 1464);
  v5 = *(_QWORD *)(v0 + 992);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 1480);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 2232))(v3, *(_QWORD *)(v0 + 1560), v4);
  v9 = swift_allocObject(&unk_10108C938, v7, v8);
  *(_QWORD *)(v0 + 2296) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v6, v3, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 2304) = v11;
  *v11 = v0;
  v11[1] = sub_100721E1C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1512), sub_100727714, v9, *(_QWORD *)(v0 + 1464));
}

uint64_t sub_100721E1C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2296);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 2264);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2304));
  swift_release(v1);
  v2(v3, v4);
  return swift_task_switch(sub_100721EA8, v5, 0);
}

uint64_t sub_100721EA8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  Class v44;
  NSString v45;
  uint64_t v46;
  NSString v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  uint64_t v58;
  NSString v59;
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  Class v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;

  if ((*(_WORD *)(v0 + 1000) & 0x210) != 0)
    return swift_task_switch(sub_100722AF4, *(_QWORD *)(v0 + 2216), 0);
  v2 = *(_QWORD *)(v0 + 1344);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + *(int *)(*(_QWORD *)(v0 + 1312) + 60) + 8));
  sub_1000126B0(v2, type metadata accessor for OwnedBeaconRecord);
  v138 = *(_WORD *)(v0 + 2404);
  v3 = *(_QWORD *)(v0 + 2288);
  v4 = *(_QWORD *)(v0 + 1200);
  v5 = *(_QWORD *)(v0 + 1192);
  v6 = *(_QWORD *)(v0 + 1176);
  v7 = *(_QWORD *)(v0 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 504));
  sub_100030784(v7, v0 + 584);
  v8 = swift_dynamicCast(v6, v0 + 584, v3, v5, 6);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  if ((v8 & 1) != 0)
  {
    v10 = *(_QWORD *)(v0 + 1224);
    v11 = *(_QWORD *)(v0 + 1216);
    v12 = *(_QWORD *)(v0 + 1192);
    v13 = *(_QWORD *)(v0 + 1176);
    v9(v13, 0, 1, v12);
    sub_1000126EC(v13, v10, type metadata accessor for SharedBeaconRecord);
    v14 = *(_QWORD *)(v10 + *(int *)(v12 + 44));
    sub_10005972C(v10, v11, type metadata accessor for SharedBeaconRecord);
    v15 = *(_QWORD *)(v0 + 1216);
    if (v14 != -1)
    {
      sub_1000126B0(v15, type metadata accessor for SharedBeaconRecord);
LABEL_9:
      sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
      goto LABEL_10;
    }
    v19 = *(_QWORD *)(v15 + *(int *)(*(_QWORD *)(v0 + 1192) + 48));
    sub_1000126B0(v15, type metadata accessor for SharedBeaconRecord);
    if (v19 != -1)
      goto LABEL_9;
    v69 = *(_QWORD *)(v0 + 1224);
    v70 = *(_QWORD *)(v0 + 1192);
    v71 = *(unsigned __int8 *)(v69 + *(int *)(v70 + 64));
    sub_10005972C(v69, *(_QWORD *)(v0 + 1208), type metadata accessor for SharedBeaconRecord);
    v72 = *(_QWORD *)(v0 + 1208);
    if (v71 == 4)
    {
      sub_1000126B0(v72, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v73 = *(unsigned __int8 *)(v72 + *(int *)(v70 + 64));
      sub_1000126B0(v72, type metadata accessor for SharedBeaconRecord);
      if (v73 != 1)
        goto LABEL_9;
    }
    v74 = *(_QWORD *)(v0 + 1040);
    sub_10000F9B8(*(_QWORD *)(v0 + 1224) + *(int *)(*(_QWORD *)(v0 + 1192) + 80), v74, (uint64_t *)&unk_1010F47B0);
    v75 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v74, 1, v75) == 1)
    {
      v76 = *(_QWORD *)(v0 + 1472);
      v77 = *(_QWORD *)(v0 + 1464);
      v78 = *(_QWORD *)(v0 + 1288);
      sub_100004048(*(_QWORD *)(v0 + 1040), (uint64_t *)&unk_1010F47B0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v78, 1, 1, v77);
    }
    else
    {
      v79 = *(_QWORD *)(v0 + 1040);
      sub_10000F9B8(v79 + *(int *)(v75 + 20), *(_QWORD *)(v0 + 1288), &qword_1010ED860);
      sub_1000126B0(v79, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    }
    v80 = *(_QWORD *)(v0 + 1472);
    v81 = *(_QWORD *)(v0 + 1464);
    v82 = *(_QWORD *)(v0 + 1288);
    sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48))(v82, 1, v81) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2248))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1464));
      goto LABEL_11;
    }
    v18 = *(_QWORD *)(v0 + 1288);
    v17 = &qword_1010ED860;
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 1176);
    v9(v16, 1, 1, *(_QWORD *)(v0 + 1192));
    v17 = (uint64_t *)&unk_1010EE180;
    v18 = v16;
  }
  sub_100004048(v18, v17);
LABEL_10:
  v20 = *(_QWORD **)(v0 + 984);
  v21 = v20[3];
  v22 = v20[4];
  sub_10001AA44(v20, v21);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v21);
LABEL_11:
  v23 = *(_QWORD *)(v0 + 1472);
  v24 = *(_QWORD *)(v0 + 1464);
  v25 = *(_QWORD *)(v0 + 1280);
  v26 = *(_QWORD **)(v0 + 984);
  v27 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setIdentifier:", isa);

  v29 = v26[3];
  v30 = v26[4];
  sub_10001AA44(v26, v29);
  v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 176))(v29, v30);
  objc_msgSend(v27, "setType:", v31);

  v32 = v26[3];
  v33 = v26[4];
  sub_10001AA44(v26, v32);
  (*(void (**)(uint64_t, uint64_t))(v33 + 192))(v32, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    v34 = 0;
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v36 = *(_QWORD *)(v0 + 1464);
    v37 = *(_QWORD *)(v0 + 1280);
    v34 = UUID._bridgeToObjectiveC()().super.isa;
    v35(v37, v36);
  }
  v38 = *(double *)(v0 + 2280);
  v39 = *(_QWORD *)(v0 + 2192);
  v40 = *(_QWORD *)(v0 + 2184);
  v41 = *(_QWORD *)(v0 + 1944);
  v42 = *(unsigned __int8 *)(v0 + 2418) != 5;
  objc_msgSend(v27, "setGroupIdentifier:", v34);

  if ((v138 & 0x100) != 0)
    v43 = 255;
  else
    v43 = v138;
  objc_msgSend(v27, "setPartIdentifier:", v43);
  objc_msgSend(v27, "setConnectionAllowed:", v42);
  objc_msgSend(v27, "setTxPower:", v38);
  v44 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v27, "setProductUUID:", v44);

  objc_msgSend(v27, "setVendorId:", v39);
  objc_msgSend(v27, "setProductId:", v40);
  if (v41)
  {
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = 0;
  }
  v46 = *(_QWORD *)(v0 + 1928);
  objc_msgSend(v27, "setModelName:", v45);

  if (v46)
  {
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = 0;
  }
  objc_msgSend(v27, "setManufacturerName:", v47);

  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2272);
  v49 = *(_QWORD *)(v0 + 1840);
  v50 = *(_QWORD *)(v0 + 1168);
  v51 = *(_QWORD *)(v0 + 1016);
  objc_msgSend(v27, "setSerialNumber:", 0);
  objc_msgSend(v27, "setOwner:", v49);
  v52 = 0;
  if (!v48(v50, 1, v51))
  {
    v53 = *(_QWORD *)(v0 + 1032);
    sub_10005972C(*(_QWORD *)(v0 + 1168), v53, type metadata accessor for BeaconProductInfoRecord);
    v52 = sub_100603CFC();
    sub_1000126B0(v53, type metadata accessor for BeaconProductInfoRecord);
  }
  v54 = *(unsigned __int8 *)(v0 + 2413);
  v55 = *(unsigned __int8 *)(v0 + 2412);
  v56 = *(_QWORD *)(v0 + 1832);
  objc_msgSend(v27, "setAccessoryProductInfo:", v52);

  objc_msgSend(v27, "setIsZeus:", v54);
  objc_msgSend(v27, "setIsAppleAudioAccessory:", v55);
  if (v56)
  {
    v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = 0;
  }
  v58 = *(_QWORD *)(v0 + 1872);
  objc_msgSend(v27, "setDiscoveryId:", v57);

  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v27, "setSystemVersion:", v59);

  if (v58)
  {
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = 0;
  }
  v61 = *(_QWORD *)(v0 + 2224);
  v62 = *(_QWORD *)(v0 + 2160);
  v63 = *(void **)(v0 + 2152);
  v64 = *(void **)(v0 + 1856);
  v65 = *(void **)(v0 + 1848);
  LODWORD(v83) = *(unsigned __int8 *)(v0 + 2414);
  HIDWORD(v83) = *(unsigned __int8 *)(v0 + 2417);
  v87 = *(void **)(v0 + 1840);
  v90 = *(_QWORD *)(v0 + 1616);
  v91 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
  v92 = *(_QWORD *)(v0 + 1600);
  v93 = *(_QWORD *)(v0 + 1576);
  v94 = *(_QWORD *)(v0 + 1560);
  v95 = *(_QWORD *)(v0 + 1552);
  v96 = *(_QWORD *)(v0 + 1544);
  v97 = *(_QWORD *)(v0 + 1536);
  v99 = *(_QWORD *)(v0 + 1528);
  v101 = *(_QWORD *)(v0 + 1520);
  v104 = *(_QWORD *)(v0 + 1504);
  v106 = *(_QWORD *)(v0 + 1496);
  v88 = *(_QWORD *)(v0 + 1488);
  v89 = *(_QWORD *)(v0 + 1512);
  v66 = *(_QWORD *)(v0 + 1464);
  v108 = *(_QWORD *)(v0 + 1456);
  v110 = *(_QWORD *)(v0 + 1440);
  v112 = *(_QWORD *)(v0 + 1432);
  v114 = *(_QWORD *)(v0 + 1424);
  v116 = *(_QWORD *)(v0 + 1416);
  v98 = *(_QWORD *)(v0 + 1408);
  v100 = *(_QWORD *)(v0 + 1392);
  v102 = *(_QWORD *)(v0 + 1368);
  v103 = *(_QWORD *)(v0 + 1360);
  v105 = *(_QWORD *)(v0 + 1352);
  v107 = *(_QWORD *)(v0 + 1344);
  v109 = *(_QWORD *)(v0 + 1336);
  v111 = *(_QWORD *)(v0 + 1304);
  v113 = *(_QWORD *)(v0 + 1296);
  v115 = *(_QWORD *)(v0 + 1288);
  v117 = *(_QWORD *)(v0 + 1280);
  v118 = *(_QWORD *)(v0 + 1272);
  v119 = *(_QWORD *)(v0 + 1264);
  v120 = *(_QWORD *)(v0 + 1248);
  v121 = *(_QWORD *)(v0 + 1240);
  v122 = *(_QWORD *)(v0 + 1232);
  v123 = *(_QWORD *)(v0 + 1224);
  v124 = *(_QWORD *)(v0 + 1216);
  v125 = *(_QWORD *)(v0 + 1208);
  v126 = *(_QWORD *)(v0 + 1184);
  v127 = *(_QWORD *)(v0 + 1176);
  v86 = *(_QWORD *)(v0 + 1168);
  v129 = *(_QWORD *)(v0 + 1160);
  v130 = *(_QWORD *)(v0 + 1152);
  v131 = *(_QWORD *)(v0 + 1144);
  v132 = *(_QWORD *)(v0 + 1128);
  v133 = *(_QWORD *)(v0 + 1104);
  v134 = *(_QWORD *)(v0 + 1088);
  v135 = *(_QWORD *)(v0 + 1072);
  v136 = *(_QWORD *)(v0 + 1064);
  v137 = *(_QWORD *)(v0 + 1048);
  v139 = *(_QWORD *)(v0 + 1040);
  v128 = *(_QWORD *)(v0 + 1032);
  objc_msgSend(v27, "setName:", v60, v83);

  objc_msgSend(v27, "setBatteryLevel:", v61);
  objc_msgSend(v27, "setConnectableDeviceCount:", v62);
  objc_msgSend(v27, "setKeySyncRecord:", v63);
  objc_msgSend(v27, "setLostModeInfo:", v65);
  objc_msgSend(v27, "setRole:", v64);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v67 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, "setSafeLocations:", v67);

  objc_msgSend(v27, "setConnected:", v84);
  objc_msgSend(v27, "setCanBeLeashedByHost:", v85);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v68 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v27, "setTaskInformation:", v68);

  swift_release(v90);
  v91(v88, v66);
  v91(v89, v66);

  sub_100004048(v86, &qword_10110EEB0);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v89);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v88);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v86);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v139);
  swift_task_dealloc(v128);
  return (*(uint64_t (**)(id))(v0 + 8))(v27);
}

uint64_t sub_100722AF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = v0[167];
  v2 = v0[166];
  v3 = v0[165];
  v4 = v0[124];
  sub_10005972C(v0[168], v1, type metadata accessor for OwnedBeaconRecord);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = swift_allocObject(&unk_10108C960, v6 + v2, v5 | 7);
  v0[289] = v7;
  *(_QWORD *)(v7 + 16) = v4;
  sub_1000126EC(v1, v7 + v6, type metadata accessor for OwnedBeaconRecord);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[290] = v9;
  v10 = sub_10001A9A8(&qword_1010F6350);
  *v9 = v0;
  v9[1] = sub_100722BE4;
  return unsafeBlocking<A>(_:)(v0 + 109, sub_1007279C4, v7, v10);
}

uint64_t sub_100722BE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 2312);
  swift_task_dealloc(*(_QWORD *)(*v0 + 2320));
  swift_release(v2);
  return swift_task_switch(sub_100722C40, *(_QWORD *)(v1 + 2216), 0);
}

uint64_t sub_100722C40()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[126];
  v0[291] = v0[109];
  v0[292] = v0[110];
  return swift_task_switch(sub_100722C64, v1, 0);
}

uint64_t sub_100722C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  Class v43;
  NSString v44;
  uint64_t v45;
  NSString v46;
  NSString v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSString v57;
  uint64_t v58;
  NSString v59;
  NSString v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  Class v67;
  Class v68;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;

  v137 = *(_QWORD *)(v0 + 2336);
  v1 = *(_QWORD *)(v0 + 1344);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 1312) + 60) + 8));
  sub_1000126B0(v1, type metadata accessor for OwnedBeaconRecord);
  v140 = *(_WORD *)(v0 + 2404);
  v2 = *(_QWORD *)(v0 + 2288);
  v3 = *(_QWORD *)(v0 + 1200);
  v4 = *(_QWORD *)(v0 + 1192);
  v5 = *(_QWORD *)(v0 + 1176);
  v6 = *(_QWORD *)(v0 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 504));
  sub_100030784(v6, v0 + 584);
  v7 = swift_dynamicCast(v5, v0 + 584, v2, v4, 6);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  if ((v7 & 1) == 0)
  {
    v15 = *(_QWORD *)(v0 + 1176);
    v8(v15, 1, 1, *(_QWORD *)(v0 + 1192));
    v16 = (uint64_t *)&unk_1010EE180;
    v17 = v15;
LABEL_5:
    sub_100004048(v17, v16);
LABEL_8:
    v19 = *(_QWORD **)(v0 + 984);
    v20 = v19[3];
    v21 = v19[4];
    sub_10001AA44(v19, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v20);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(v0 + 1224);
  v10 = *(_QWORD *)(v0 + 1216);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1176);
  v8(v12, 0, 1, v11);
  sub_1000126EC(v12, v9, type metadata accessor for SharedBeaconRecord);
  v13 = *(_QWORD *)(v9 + *(int *)(v11 + 44));
  sub_10005972C(v9, v10, type metadata accessor for SharedBeaconRecord);
  v14 = *(_QWORD *)(v0 + 1216);
  if (v13 != -1)
  {
    sub_1000126B0(v14, type metadata accessor for SharedBeaconRecord);
LABEL_7:
    sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(v14 + *(int *)(*(_QWORD *)(v0 + 1192) + 48));
  sub_1000126B0(v14, type metadata accessor for SharedBeaconRecord);
  if (v18 != -1)
    goto LABEL_7;
  v70 = *(_QWORD *)(v0 + 1224);
  v71 = *(_QWORD *)(v0 + 1192);
  v72 = *(unsigned __int8 *)(v70 + *(int *)(v71 + 64));
  sub_10005972C(v70, *(_QWORD *)(v0 + 1208), type metadata accessor for SharedBeaconRecord);
  v73 = *(_QWORD *)(v0 + 1208);
  if (v72 == 4)
  {
    sub_1000126B0(v73, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    v74 = *(unsigned __int8 *)(v73 + *(int *)(v71 + 64));
    sub_1000126B0(v73, type metadata accessor for SharedBeaconRecord);
    if (v74 != 1)
      goto LABEL_7;
  }
  v75 = *(_QWORD *)(v0 + 1040);
  sub_10000F9B8(*(_QWORD *)(v0 + 1224) + *(int *)(*(_QWORD *)(v0 + 1192) + 80), v75, (uint64_t *)&unk_1010F47B0);
  v76 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v75, 1, v76) == 1)
  {
    v77 = *(_QWORD *)(v0 + 1472);
    v78 = *(_QWORD *)(v0 + 1464);
    v79 = *(_QWORD *)(v0 + 1288);
    sub_100004048(*(_QWORD *)(v0 + 1040), (uint64_t *)&unk_1010F47B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v79, 1, 1, v78);
  }
  else
  {
    v80 = *(_QWORD *)(v0 + 1040);
    sub_10000F9B8(v80 + *(int *)(v76 + 20), *(_QWORD *)(v0 + 1288), &qword_1010ED860);
    sub_1000126B0(v80, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  }
  v81 = *(_QWORD *)(v0 + 1472);
  v82 = *(_QWORD *)(v0 + 1464);
  v83 = *(_QWORD *)(v0 + 1288);
  sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v83, 1, v82) == 1)
  {
    v17 = *(_QWORD *)(v0 + 1288);
    v16 = &qword_1010ED860;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2248))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1464));
LABEL_9:
  v22 = *(_QWORD *)(v0 + 1472);
  v23 = *(_QWORD *)(v0 + 1464);
  v24 = *(_QWORD *)(v0 + 1280);
  v25 = *(_QWORD **)(v0 + 984);
  v26 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setIdentifier:", isa);

  v28 = v25[3];
  v29 = v25[4];
  sub_10001AA44(v25, v28);
  v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 176))(v28, v29);
  objc_msgSend(v26, "setType:", v30);

  v31 = v25[3];
  v32 = v25[4];
  sub_10001AA44(v25, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 192))(v31, v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
  {
    v33 = 0;
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v35 = *(_QWORD *)(v0 + 1464);
    v36 = *(_QWORD *)(v0 + 1280);
    v33 = UUID._bridgeToObjectiveC()().super.isa;
    v34(v36, v35);
  }
  v37 = *(double *)(v0 + 2280);
  v38 = *(_QWORD *)(v0 + 2192);
  v39 = *(_QWORD *)(v0 + 2184);
  v40 = *(_QWORD *)(v0 + 1944);
  v41 = *(unsigned __int8 *)(v0 + 2418) != 5;
  objc_msgSend(v26, "setGroupIdentifier:", v33);

  if ((v140 & 0x100) != 0)
    v42 = 255;
  else
    v42 = v140;
  objc_msgSend(v26, "setPartIdentifier:", v42);
  objc_msgSend(v26, "setConnectionAllowed:", v41);
  objc_msgSend(v26, "setTxPower:", v37);
  v43 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setProductUUID:", v43);

  objc_msgSend(v26, "setVendorId:", v38);
  objc_msgSend(v26, "setProductId:", v39);
  if (v40)
  {
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = 0;
  }
  v45 = *(_QWORD *)(v0 + 1928);
  objc_msgSend(v26, "setModelName:", v44);

  if (v45)
  {
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = 0;
  }
  objc_msgSend(v26, "setManufacturerName:", v46);

  if (v137)
  {
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v47 = 0;
  }
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2272);
  v49 = *(_QWORD *)(v0 + 1840);
  v50 = *(_QWORD *)(v0 + 1168);
  v51 = *(_QWORD *)(v0 + 1016);
  objc_msgSend(v26, "setSerialNumber:", v47);

  objc_msgSend(v26, "setOwner:", v49);
  if (v48(v50, 1, v51))
  {
    v52 = 0;
  }
  else
  {
    v53 = *(_QWORD *)(v0 + 1032);
    sub_10005972C(*(_QWORD *)(v0 + 1168), v53, type metadata accessor for BeaconProductInfoRecord);
    v52 = sub_100603CFC();
    sub_1000126B0(v53, type metadata accessor for BeaconProductInfoRecord);
  }
  v54 = *(unsigned __int8 *)(v0 + 2413);
  v55 = *(unsigned __int8 *)(v0 + 2412);
  v56 = *(_QWORD *)(v0 + 1832);
  objc_msgSend(v26, "setAccessoryProductInfo:", v52);

  objc_msgSend(v26, "setIsZeus:", v54);
  objc_msgSend(v26, "setIsAppleAudioAccessory:", v55);
  if (v56)
  {
    v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = 0;
  }
  v58 = *(_QWORD *)(v0 + 1872);
  objc_msgSend(v26, "setDiscoveryId:", v57);

  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setSystemVersion:", v59);

  if (v58)
  {
    v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = 0;
  }
  v61 = *(_QWORD *)(v0 + 2224);
  v62 = *(_QWORD *)(v0 + 2160);
  v63 = *(void **)(v0 + 2152);
  v64 = *(void **)(v0 + 1856);
  v65 = *(void **)(v0 + 1848);
  LODWORD(v84) = *(unsigned __int8 *)(v0 + 2414);
  HIDWORD(v84) = *(unsigned __int8 *)(v0 + 2417);
  v88 = *(void **)(v0 + 1840);
  v91 = *(_QWORD *)(v0 + 1616);
  v92 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
  v93 = *(_QWORD *)(v0 + 1600);
  v94 = *(_QWORD *)(v0 + 1576);
  v95 = *(_QWORD *)(v0 + 1560);
  v96 = *(_QWORD *)(v0 + 1552);
  v97 = *(_QWORD *)(v0 + 1544);
  v98 = *(_QWORD *)(v0 + 1536);
  v100 = *(_QWORD *)(v0 + 1528);
  v102 = *(_QWORD *)(v0 + 1520);
  v105 = *(_QWORD *)(v0 + 1504);
  v107 = *(_QWORD *)(v0 + 1496);
  v89 = *(_QWORD *)(v0 + 1488);
  v90 = *(_QWORD *)(v0 + 1512);
  v66 = *(_QWORD *)(v0 + 1464);
  v109 = *(_QWORD *)(v0 + 1456);
  v111 = *(_QWORD *)(v0 + 1440);
  v113 = *(_QWORD *)(v0 + 1432);
  v115 = *(_QWORD *)(v0 + 1424);
  v117 = *(_QWORD *)(v0 + 1416);
  v99 = *(_QWORD *)(v0 + 1408);
  v101 = *(_QWORD *)(v0 + 1392);
  v103 = *(_QWORD *)(v0 + 1368);
  v104 = *(_QWORD *)(v0 + 1360);
  v106 = *(_QWORD *)(v0 + 1352);
  v108 = *(_QWORD *)(v0 + 1344);
  v110 = *(_QWORD *)(v0 + 1336);
  v112 = *(_QWORD *)(v0 + 1304);
  v114 = *(_QWORD *)(v0 + 1296);
  v116 = *(_QWORD *)(v0 + 1288);
  v118 = *(_QWORD *)(v0 + 1280);
  v119 = *(_QWORD *)(v0 + 1272);
  v120 = *(_QWORD *)(v0 + 1264);
  v121 = *(_QWORD *)(v0 + 1248);
  v122 = *(_QWORD *)(v0 + 1240);
  v123 = *(_QWORD *)(v0 + 1232);
  v124 = *(_QWORD *)(v0 + 1224);
  v125 = *(_QWORD *)(v0 + 1216);
  v126 = *(_QWORD *)(v0 + 1208);
  v127 = *(_QWORD *)(v0 + 1184);
  v128 = *(_QWORD *)(v0 + 1176);
  v87 = *(_QWORD *)(v0 + 1168);
  v130 = *(_QWORD *)(v0 + 1160);
  v131 = *(_QWORD *)(v0 + 1152);
  v132 = *(_QWORD *)(v0 + 1144);
  v133 = *(_QWORD *)(v0 + 1128);
  v134 = *(_QWORD *)(v0 + 1104);
  v135 = *(_QWORD *)(v0 + 1088);
  v136 = *(_QWORD *)(v0 + 1072);
  v138 = *(_QWORD *)(v0 + 1064);
  v139 = *(_QWORD *)(v0 + 1048);
  v141 = *(_QWORD *)(v0 + 1040);
  v129 = *(_QWORD *)(v0 + 1032);
  objc_msgSend(v26, "setName:", v60, v84);

  objc_msgSend(v26, "setBatteryLevel:", v61);
  objc_msgSend(v26, "setConnectableDeviceCount:", v62);
  objc_msgSend(v26, "setKeySyncRecord:", v63);
  objc_msgSend(v26, "setLostModeInfo:", v65);
  objc_msgSend(v26, "setRole:", v64);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v67 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setSafeLocations:", v67);

  objc_msgSend(v26, "setConnected:", v85);
  objc_msgSend(v26, "setCanBeLeashedByHost:", v86);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v68 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setTaskInformation:", v68);

  swift_release(v91);
  v92(v89, v66);
  v92(v90, v66);

  sub_100004048(v87, &qword_10110EEB0);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v90);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v89);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v87);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v141);
  swift_task_dealloc(v129);
  return (*(uint64_t (**)(id))(v0 + 8))(v26);
}

uint64_t sub_1007238B0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2248);
  v2 = *(unsigned __int8 *)(v0 + 2400);
  v3 = *(_QWORD *)(v0 + 1552);
  v4 = *(_QWORD *)(v0 + 1464);
  v5 = *(_QWORD *)(v0 + 992);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 1480);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 2232))(v3, *(_QWORD *)(v0 + 1560), v4);
  v9 = swift_allocObject(&unk_10108C910, v7, v8);
  *(_QWORD *)(v0 + 2344) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  v1(v9 + v6, v3, v4);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 2352) = v11;
  *v11 = v0;
  v11[1] = sub_1007239A0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1512), sub_100727714, v9, *(_QWORD *)(v0 + 1464));
}

uint64_t sub_1007239A0()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2344);
  v2 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 2264);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 1560);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 1464);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 1008);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2352));
  swift_release(v1);
  v2(v3, v4);
  return swift_task_switch(sub_100723A2C, v5, 0);
}

uint64_t sub_100723A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  Class isa;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  Class v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  Class v49;
  NSString v50;
  uint64_t v51;
  NSString v52;
  NSString v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  uint64_t v64;
  NSString v65;
  NSString v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  uint64_t v72;
  Class v73;
  Class v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  if ((*(_WORD *)(v1 + 1000) & 0x210) != 0)
  {
    v2 = *(_QWORD *)(v1 + 1048);
    v3 = (uint64_t *)(*(_QWORD *)(v1 + 1064) + *(int *)(*(_QWORD *)(v1 + 1056) + 28));
    v4 = *v3;
    v5 = v3[1];
    static String.Encoding.utf8.getter(a1);
    String.init(data:encoding:)(v4, v5, v2);
    if (!v6)
      Data.hexString.getter(v4, v5);
    v7 = v6;
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_QWORD *)(v1 + 1064);
  swift_bridgeObjectRetain(*(_QWORD *)(v8 + *(int *)(*(_QWORD *)(v1 + 1056) + 24) + 8));
  sub_1000126B0(v8, type metadata accessor for LocalFindableAccessoryRecord);
  v9 = *(_QWORD *)(v1 + 2288);
  v10 = *(_QWORD *)(v1 + 1200);
  v11 = *(_QWORD *)(v1 + 1192);
  v12 = *(_QWORD *)(v1 + 1176);
  v13 = *(_QWORD *)(v1 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 504));
  sub_100030784(v13, v1 + 584);
  v14 = swift_dynamicCast(v12, v1 + 584, v9, v11, 6);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if ((v14 & 1) == 0)
  {
    v22 = *(_QWORD *)(v1 + 1176);
    v15(v22, 1, 1, *(_QWORD *)(v1 + 1192));
    v23 = (uint64_t *)&unk_1010EE180;
    v24 = v22;
LABEL_10:
    sub_100004048(v24, v23);
LABEL_13:
    v26 = *(_QWORD **)(v1 + 984);
    v27 = v26[3];
    v28 = v26[4];
    sub_10001AA44(v26, v27);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(v1 + 1224);
  v17 = *(_QWORD *)(v1 + 1216);
  v18 = *(_QWORD *)(v1 + 1192);
  v19 = *(_QWORD *)(v1 + 1176);
  v15(v19, 0, 1, v18);
  sub_1000126EC(v19, v16, type metadata accessor for SharedBeaconRecord);
  v20 = *(_QWORD *)(v16 + *(int *)(v18 + 44));
  sub_10005972C(v16, v17, type metadata accessor for SharedBeaconRecord);
  v21 = *(_QWORD *)(v1 + 1216);
  if (v20 != -1)
  {
    sub_1000126B0(v21, type metadata accessor for SharedBeaconRecord);
LABEL_12:
    sub_1000126B0(*(_QWORD *)(v1 + 1224), type metadata accessor for SharedBeaconRecord);
    goto LABEL_13;
  }
  v25 = *(_QWORD *)(v21 + *(int *)(*(_QWORD *)(v1 + 1192) + 48));
  sub_1000126B0(v21, type metadata accessor for SharedBeaconRecord);
  if (v25 != -1)
    goto LABEL_12;
  v76 = *(_QWORD *)(v1 + 1224);
  v77 = *(_QWORD *)(v1 + 1192);
  v78 = *(unsigned __int8 *)(v76 + *(int *)(v77 + 64));
  sub_10005972C(v76, *(_QWORD *)(v1 + 1208), type metadata accessor for SharedBeaconRecord);
  v79 = *(_QWORD *)(v1 + 1208);
  if (v78 == 4)
  {
    sub_1000126B0(v79, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    v80 = *(unsigned __int8 *)(v79 + *(int *)(v77 + 64));
    sub_1000126B0(v79, type metadata accessor for SharedBeaconRecord);
    if (v80 != 1)
      goto LABEL_12;
  }
  v81 = *(_QWORD *)(v1 + 1040);
  sub_10000F9B8(*(_QWORD *)(v1 + 1224) + *(int *)(*(_QWORD *)(v1 + 1192) + 80), v81, (uint64_t *)&unk_1010F47B0);
  v82 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 48))(v81, 1, v82) == 1)
  {
    v83 = *(_QWORD *)(v1 + 1472);
    v84 = *(_QWORD *)(v1 + 1464);
    v85 = *(_QWORD *)(v1 + 1288);
    sub_100004048(*(_QWORD *)(v1 + 1040), (uint64_t *)&unk_1010F47B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v85, 1, 1, v84);
  }
  else
  {
    v86 = *(_QWORD *)(v1 + 1040);
    sub_10000F9B8(v86 + *(int *)(v82 + 20), *(_QWORD *)(v1 + 1288), &qword_1010ED860);
    sub_1000126B0(v86, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  }
  v87 = *(_QWORD *)(v1 + 1472);
  v88 = *(_QWORD *)(v1 + 1464);
  v89 = *(_QWORD *)(v1 + 1288);
  sub_1000126B0(*(_QWORD *)(v1 + 1224), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v89, 1, v88) == 1)
  {
    v24 = *(_QWORD *)(v1 + 1288);
    v23 = &qword_1010ED860;
    goto LABEL_10;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 2248))(*(_QWORD *)(v1 + 1488), *(_QWORD *)(v1 + 1288), *(_QWORD *)(v1 + 1464));
LABEL_14:
  v29 = *(_QWORD *)(v1 + 1472);
  v30 = *(_QWORD *)(v1 + 1464);
  v31 = *(_QWORD *)(v1 + 1280);
  v32 = *(_QWORD **)(v1 + 984);
  v33 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v33, "setIdentifier:", isa);

  v35 = v32[3];
  v36 = v32[4];
  sub_10001AA44(v32, v35);
  v37 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 176))(v35, v36);
  objc_msgSend(v33, "setType:", v37);

  v38 = v32[3];
  v39 = v32[4];
  sub_10001AA44(v32, v38);
  (*(void (**)(uint64_t, uint64_t))(v39 + 192))(v38, v39);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v31, 1, v30) == 1)
  {
    v40 = 0;
  }
  else
  {
    v41 = *(void (**)(uint64_t, uint64_t))(v1 + 2264);
    v42 = *(_QWORD *)(v1 + 1464);
    v43 = *(_QWORD *)(v1 + 1280);
    v40 = UUID._bridgeToObjectiveC()().super.isa;
    v41(v43, v42);
  }
  v44 = *(double *)(v1 + 2280);
  v45 = *(_QWORD *)(v1 + 2192);
  v46 = *(_QWORD *)(v1 + 2184);
  v47 = *(_QWORD *)(v1 + 1944);
  v48 = *(unsigned __int8 *)(v1 + 2418) != 5;
  objc_msgSend(v33, "setGroupIdentifier:", v40);

  objc_msgSend(v33, "setPartIdentifier:", 255);
  objc_msgSend(v33, "setConnectionAllowed:", v48);
  objc_msgSend(v33, "setTxPower:", v44);
  v49 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v33, "setProductUUID:", v49);

  objc_msgSend(v33, "setVendorId:", v45);
  objc_msgSend(v33, "setProductId:", v46);
  if (v47)
  {
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v50 = 0;
  }
  v51 = *(_QWORD *)(v1 + 1928);
  objc_msgSend(v33, "setModelName:", v50);

  if (v51)
  {
    v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v52 = 0;
  }
  objc_msgSend(v33, "setManufacturerName:", v52);

  if (v7)
  {
    v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v53 = 0;
  }
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 2272);
  v55 = *(_QWORD *)(v1 + 1840);
  v56 = *(_QWORD *)(v1 + 1168);
  v57 = *(_QWORD *)(v1 + 1016);
  objc_msgSend(v33, "setSerialNumber:", v53);

  objc_msgSend(v33, "setOwner:", v55);
  if (v54(v56, 1, v57))
  {
    v58 = 0;
  }
  else
  {
    v59 = *(_QWORD *)(v1 + 1032);
    sub_10005972C(*(_QWORD *)(v1 + 1168), v59, type metadata accessor for BeaconProductInfoRecord);
    v58 = sub_100603CFC();
    sub_1000126B0(v59, type metadata accessor for BeaconProductInfoRecord);
  }
  v60 = *(unsigned __int8 *)(v1 + 2413);
  v61 = *(unsigned __int8 *)(v1 + 2412);
  v62 = *(_QWORD *)(v1 + 1832);
  objc_msgSend(v33, "setAccessoryProductInfo:", v58);

  objc_msgSend(v33, "setIsZeus:", v60);
  objc_msgSend(v33, "setIsAppleAudioAccessory:", v61);
  if (v62)
  {
    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v63 = 0;
  }
  v64 = *(_QWORD *)(v1 + 1872);
  objc_msgSend(v33, "setDiscoveryId:", v63);

  v65 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v33, "setSystemVersion:", v65);

  if (v64)
  {
    v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v66 = 0;
  }
  v67 = *(_QWORD *)(v1 + 2224);
  v68 = *(_QWORD *)(v1 + 2160);
  v69 = *(void **)(v1 + 2152);
  v70 = *(void **)(v1 + 1856);
  v71 = *(void **)(v1 + 1848);
  LODWORD(v90) = *(unsigned __int8 *)(v1 + 2414);
  HIDWORD(v90) = *(unsigned __int8 *)(v1 + 2417);
  v94 = *(void **)(v1 + 1840);
  v97 = *(_QWORD *)(v1 + 1616);
  v98 = *(void (**)(uint64_t, uint64_t))(v1 + 2264);
  v99 = *(_QWORD *)(v1 + 1600);
  v100 = *(_QWORD *)(v1 + 1576);
  v101 = *(_QWORD *)(v1 + 1560);
  v102 = *(_QWORD *)(v1 + 1552);
  v103 = *(_QWORD *)(v1 + 1544);
  v104 = *(_QWORD *)(v1 + 1536);
  v106 = *(_QWORD *)(v1 + 1528);
  v108 = *(_QWORD *)(v1 + 1520);
  v111 = *(_QWORD *)(v1 + 1504);
  v113 = *(_QWORD *)(v1 + 1496);
  v95 = *(_QWORD *)(v1 + 1488);
  v96 = *(_QWORD *)(v1 + 1512);
  v72 = *(_QWORD *)(v1 + 1464);
  v115 = *(_QWORD *)(v1 + 1456);
  v117 = *(_QWORD *)(v1 + 1440);
  v119 = *(_QWORD *)(v1 + 1432);
  v121 = *(_QWORD *)(v1 + 1424);
  v123 = *(_QWORD *)(v1 + 1416);
  v105 = *(_QWORD *)(v1 + 1408);
  v107 = *(_QWORD *)(v1 + 1392);
  v109 = *(_QWORD *)(v1 + 1368);
  v110 = *(_QWORD *)(v1 + 1360);
  v112 = *(_QWORD *)(v1 + 1352);
  v114 = *(_QWORD *)(v1 + 1344);
  v116 = *(_QWORD *)(v1 + 1336);
  v118 = *(_QWORD *)(v1 + 1304);
  v120 = *(_QWORD *)(v1 + 1296);
  v122 = *(_QWORD *)(v1 + 1288);
  v124 = *(_QWORD *)(v1 + 1280);
  v125 = *(_QWORD *)(v1 + 1272);
  v126 = *(_QWORD *)(v1 + 1264);
  v127 = *(_QWORD *)(v1 + 1248);
  v128 = *(_QWORD *)(v1 + 1240);
  v129 = *(_QWORD *)(v1 + 1232);
  v130 = *(_QWORD *)(v1 + 1224);
  v131 = *(_QWORD *)(v1 + 1216);
  v132 = *(_QWORD *)(v1 + 1208);
  v133 = *(_QWORD *)(v1 + 1184);
  v134 = *(_QWORD *)(v1 + 1176);
  v93 = *(_QWORD *)(v1 + 1168);
  v136 = *(_QWORD *)(v1 + 1160);
  v137 = *(_QWORD *)(v1 + 1152);
  v138 = *(_QWORD *)(v1 + 1144);
  v139 = *(_QWORD *)(v1 + 1128);
  v140 = *(_QWORD *)(v1 + 1104);
  v141 = *(_QWORD *)(v1 + 1088);
  v142 = *(_QWORD *)(v1 + 1072);
  v143 = *(_QWORD *)(v1 + 1064);
  v144 = *(_QWORD *)(v1 + 1048);
  v145 = *(_QWORD *)(v1 + 1040);
  v135 = *(_QWORD *)(v1 + 1032);
  objc_msgSend(v33, "setName:", v66, v90);

  objc_msgSend(v33, "setBatteryLevel:", v67);
  objc_msgSend(v33, "setConnectableDeviceCount:", v68);
  objc_msgSend(v33, "setKeySyncRecord:", v69);
  objc_msgSend(v33, "setLostModeInfo:", v71);
  objc_msgSend(v33, "setRole:", v70);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v73 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v33, "setSafeLocations:", v73);

  objc_msgSend(v33, "setConnected:", v91);
  objc_msgSend(v33, "setCanBeLeashedByHost:", v92);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v74 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v33, "setTaskInformation:", v74);

  swift_release(v97);
  v98(v95, v72);
  v98(v96, v72);

  sub_100004048(v93, &qword_10110EEB0);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v96);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v95);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v119);
  swift_task_dealloc(v121);
  swift_task_dealloc(v123);
  swift_task_dealloc(v105);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v93);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v140);
  swift_task_dealloc(v141);
  swift_task_dealloc(v142);
  swift_task_dealloc(v143);
  swift_task_dealloc(v144);
  swift_task_dealloc(v145);
  swift_task_dealloc(v135);
  return (*(uint64_t (**)(id))(v1 + 8))(v33);
}

uint64_t sub_1007246B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 2360) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100724730;
  return unsafeBlocking<A>(_:)(v0 + 920, sub_10007C6FC, *(_QWORD *)(v0 + 992), v3);
}

uint64_t sub_100724730()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 992);
  swift_task_dealloc(*(_QWORD *)(*v0 + 2360));
  swift_release(v2);
  return swift_task_switch(sub_10072478C, *(_QWORD *)(v1 + 2216), 0);
}

uint64_t sub_10072478C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[126];
  v0[296] = v0[115];
  return swift_task_switch(sub_1007247A8, v1, 0);
}

uint64_t sub_1007247A8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uid_t v4;

  v1 = *(_QWORD **)(v0 + 984);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32))(v2);
  v4 = getuid();
  sub_100A06500(v4);
  return swift_task_switch(sub_100724824, 0, 0);
}

uint64_t sub_100724824()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1010FCEDC);
  v0[297] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100724890;
  return sub_100478B94((uint64_t)(v0 + 20), v0[188], v0[187]);
}

uint64_t sub_100724890()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2376);
  *(_QWORD *)(*(_QWORD *)v1 + 2384) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1007255D8;
    v5 = 0;
  }
  else
  {
    v6 = v2[296];
    v7 = (void (*)(uint64_t, uint64_t))v2[283];
    v8 = v2[188];
    v9 = v2[187];
    v10 = v2[183];
    v11 = v2[126];
    swift_release(v6);
    v7(v9, v10);
    v7(v8, v10);
    v4 = sub_10072493C;
    v5 = v11;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_10072493C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  Class v45;
  NSString v46;
  uint64_t v47;
  NSString v48;
  NSString v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSString v59;
  uint64_t v60;
  NSString v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  Class v69;
  Class v70;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  sub_100005CF0(v0 + 160, v0 + 88, (uint64_t *)&unk_1010F4830);
  v1 = *(_QWORD *)(v0 + 1232);
  if (*(_QWORD *)(v0 + 96))
  {
    v2 = *(_QWORD *)(v0 + 1000);
    v3 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 152);
    sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
    if ((v2 & 0x210) != 0)
      swift_bridgeObjectRetain(v4);
    else
      v4 = 0;
    swift_bridgeObjectRetain(v3);
    sub_10007CB54((uint64_t *)(v0 + 160));
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 1192) + 40) + 8));
    sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
    v4 = 0;
  }
  v5 = *(_QWORD *)(v0 + 2288);
  v6 = *(_QWORD *)(v0 + 1200);
  v7 = *(_QWORD *)(v0 + 1192);
  v8 = *(_QWORD *)(v0 + 1176);
  v9 = *(_QWORD *)(v0 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 504));
  sub_100030784(v9, v0 + 584);
  v10 = swift_dynamicCast(v8, v0 + 584, v5, v7, 6);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  if ((v10 & 1) == 0)
  {
    v18 = *(_QWORD *)(v0 + 1176);
    v11(v18, 1, 1, *(_QWORD *)(v0 + 1192));
    v19 = (uint64_t *)&unk_1010EE180;
    v20 = v18;
LABEL_11:
    sub_100004048(v20, v19);
LABEL_14:
    v22 = *(_QWORD **)(v0 + 984);
    v23 = v22[3];
    v24 = v22[4];
    sub_10001AA44(v22, v23);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8) + 32))(v23);
    goto LABEL_15;
  }
  v12 = *(_QWORD *)(v0 + 1224);
  v13 = *(_QWORD *)(v0 + 1216);
  v14 = *(_QWORD *)(v0 + 1192);
  v15 = *(_QWORD *)(v0 + 1176);
  v11(v15, 0, 1, v14);
  sub_1000126EC(v15, v12, type metadata accessor for SharedBeaconRecord);
  v16 = *(_QWORD *)(v12 + *(int *)(v14 + 44));
  sub_10005972C(v12, v13, type metadata accessor for SharedBeaconRecord);
  v17 = *(_QWORD *)(v0 + 1216);
  if (v16 != -1)
  {
    sub_1000126B0(v17, type metadata accessor for SharedBeaconRecord);
LABEL_13:
    sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
    goto LABEL_14;
  }
  v21 = *(_QWORD *)(v17 + *(int *)(*(_QWORD *)(v0 + 1192) + 48));
  sub_1000126B0(v17, type metadata accessor for SharedBeaconRecord);
  if (v21 != -1)
    goto LABEL_13;
  v72 = *(_QWORD *)(v0 + 1224);
  v73 = *(_QWORD *)(v0 + 1192);
  v74 = *(unsigned __int8 *)(v72 + *(int *)(v73 + 64));
  sub_10005972C(v72, *(_QWORD *)(v0 + 1208), type metadata accessor for SharedBeaconRecord);
  v75 = *(_QWORD *)(v0 + 1208);
  if (v74 == 4)
  {
    sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    v76 = *(unsigned __int8 *)(v75 + *(int *)(v73 + 64));
    sub_1000126B0(v75, type metadata accessor for SharedBeaconRecord);
    if (v76 != 1)
      goto LABEL_13;
  }
  v77 = *(_QWORD *)(v0 + 1040);
  sub_10000F9B8(*(_QWORD *)(v0 + 1224) + *(int *)(*(_QWORD *)(v0 + 1192) + 80), v77, (uint64_t *)&unk_1010F47B0);
  v78 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v77, 1, v78) == 1)
  {
    v79 = *(_QWORD *)(v0 + 1472);
    v80 = *(_QWORD *)(v0 + 1464);
    v81 = *(_QWORD *)(v0 + 1288);
    sub_100004048(*(_QWORD *)(v0 + 1040), (uint64_t *)&unk_1010F47B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v81, 1, 1, v80);
  }
  else
  {
    v82 = *(_QWORD *)(v0 + 1040);
    sub_10000F9B8(v82 + *(int *)(v78 + 20), *(_QWORD *)(v0 + 1288), &qword_1010ED860);
    sub_1000126B0(v82, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  }
  v83 = *(_QWORD *)(v0 + 1472);
  v84 = *(_QWORD *)(v0 + 1464);
  v85 = *(_QWORD *)(v0 + 1288);
  sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v85, 1, v84) == 1)
  {
    v20 = *(_QWORD *)(v0 + 1288);
    v19 = &qword_1010ED860;
    goto LABEL_11;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2248))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1464));
LABEL_15:
  v25 = *(_QWORD *)(v0 + 1472);
  v26 = *(_QWORD *)(v0 + 1464);
  v27 = *(_QWORD *)(v0 + 1280);
  v28 = *(_QWORD **)(v0 + 984);
  v29 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, "setIdentifier:", isa);

  v31 = v28[3];
  v32 = v28[4];
  sub_10001AA44(v28, v31);
  v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 176))(v31, v32);
  objc_msgSend(v29, "setType:", v33);

  v34 = v28[3];
  v35 = v28[4];
  sub_10001AA44(v28, v34);
  (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
  {
    v36 = 0;
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v38 = *(_QWORD *)(v0 + 1464);
    v39 = *(_QWORD *)(v0 + 1280);
    v36 = UUID._bridgeToObjectiveC()().super.isa;
    v37(v39, v38);
  }
  v40 = *(double *)(v0 + 2280);
  v41 = *(_QWORD *)(v0 + 2192);
  v42 = *(_QWORD *)(v0 + 2184);
  v43 = *(_QWORD *)(v0 + 1944);
  v44 = *(unsigned __int8 *)(v0 + 2418) != 5;
  objc_msgSend(v29, "setGroupIdentifier:", v36);

  objc_msgSend(v29, "setPartIdentifier:", 255);
  objc_msgSend(v29, "setConnectionAllowed:", v44);
  objc_msgSend(v29, "setTxPower:", v40);
  v45 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v29, "setProductUUID:", v45);

  objc_msgSend(v29, "setVendorId:", v41);
  objc_msgSend(v29, "setProductId:", v42);
  if (v43)
  {
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v46 = 0;
  }
  v47 = *(_QWORD *)(v0 + 1928);
  objc_msgSend(v29, "setModelName:", v46);

  if (v47)
  {
    v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0;
  }
  objc_msgSend(v29, "setManufacturerName:", v48);

  if (v4)
  {
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v49 = 0;
  }
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2272);
  v51 = *(_QWORD *)(v0 + 1840);
  v52 = *(_QWORD *)(v0 + 1168);
  v53 = *(_QWORD *)(v0 + 1016);
  objc_msgSend(v29, "setSerialNumber:", v49);

  objc_msgSend(v29, "setOwner:", v51);
  if (v50(v52, 1, v53))
  {
    v54 = 0;
  }
  else
  {
    v55 = *(_QWORD *)(v0 + 1032);
    sub_10005972C(*(_QWORD *)(v0 + 1168), v55, type metadata accessor for BeaconProductInfoRecord);
    v54 = sub_100603CFC();
    sub_1000126B0(v55, type metadata accessor for BeaconProductInfoRecord);
  }
  v56 = *(unsigned __int8 *)(v0 + 2413);
  v57 = *(unsigned __int8 *)(v0 + 2412);
  v58 = *(_QWORD *)(v0 + 1832);
  objc_msgSend(v29, "setAccessoryProductInfo:", v54);

  objc_msgSend(v29, "setIsZeus:", v56);
  objc_msgSend(v29, "setIsAppleAudioAccessory:", v57);
  if (v58)
  {
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = 0;
  }
  v60 = *(_QWORD *)(v0 + 1872);
  objc_msgSend(v29, "setDiscoveryId:", v59);

  v61 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v29, "setSystemVersion:", v61);

  if (v60)
  {
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v62 = 0;
  }
  v63 = *(_QWORD *)(v0 + 2224);
  v64 = *(_QWORD *)(v0 + 2160);
  v65 = *(void **)(v0 + 2152);
  v66 = *(void **)(v0 + 1856);
  v67 = *(void **)(v0 + 1848);
  LODWORD(v86) = *(unsigned __int8 *)(v0 + 2414);
  HIDWORD(v86) = *(unsigned __int8 *)(v0 + 2417);
  v90 = *(void **)(v0 + 1840);
  v93 = *(_QWORD *)(v0 + 1616);
  v94 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
  v95 = *(_QWORD *)(v0 + 1600);
  v96 = *(_QWORD *)(v0 + 1576);
  v97 = *(_QWORD *)(v0 + 1560);
  v98 = *(_QWORD *)(v0 + 1552);
  v99 = *(_QWORD *)(v0 + 1544);
  v100 = *(_QWORD *)(v0 + 1536);
  v102 = *(_QWORD *)(v0 + 1528);
  v104 = *(_QWORD *)(v0 + 1520);
  v107 = *(_QWORD *)(v0 + 1504);
  v109 = *(_QWORD *)(v0 + 1496);
  v91 = *(_QWORD *)(v0 + 1488);
  v92 = *(_QWORD *)(v0 + 1512);
  v68 = *(_QWORD *)(v0 + 1464);
  v111 = *(_QWORD *)(v0 + 1456);
  v113 = *(_QWORD *)(v0 + 1440);
  v115 = *(_QWORD *)(v0 + 1432);
  v117 = *(_QWORD *)(v0 + 1424);
  v119 = *(_QWORD *)(v0 + 1416);
  v101 = *(_QWORD *)(v0 + 1408);
  v103 = *(_QWORD *)(v0 + 1392);
  v105 = *(_QWORD *)(v0 + 1368);
  v106 = *(_QWORD *)(v0 + 1360);
  v108 = *(_QWORD *)(v0 + 1352);
  v110 = *(_QWORD *)(v0 + 1344);
  v112 = *(_QWORD *)(v0 + 1336);
  v114 = *(_QWORD *)(v0 + 1304);
  v116 = *(_QWORD *)(v0 + 1296);
  v118 = *(_QWORD *)(v0 + 1288);
  v120 = *(_QWORD *)(v0 + 1280);
  v121 = *(_QWORD *)(v0 + 1272);
  v122 = *(_QWORD *)(v0 + 1264);
  v123 = *(_QWORD *)(v0 + 1248);
  v124 = *(_QWORD *)(v0 + 1240);
  v125 = *(_QWORD *)(v0 + 1232);
  v126 = *(_QWORD *)(v0 + 1224);
  v127 = *(_QWORD *)(v0 + 1216);
  v128 = *(_QWORD *)(v0 + 1208);
  v129 = *(_QWORD *)(v0 + 1184);
  v130 = *(_QWORD *)(v0 + 1176);
  v89 = *(_QWORD *)(v0 + 1168);
  v132 = *(_QWORD *)(v0 + 1160);
  v133 = *(_QWORD *)(v0 + 1152);
  v134 = *(_QWORD *)(v0 + 1144);
  v135 = *(_QWORD *)(v0 + 1128);
  v136 = *(_QWORD *)(v0 + 1104);
  v137 = *(_QWORD *)(v0 + 1088);
  v138 = *(_QWORD *)(v0 + 1072);
  v139 = *(_QWORD *)(v0 + 1064);
  v140 = *(_QWORD *)(v0 + 1048);
  v141 = *(_QWORD *)(v0 + 1040);
  v131 = *(_QWORD *)(v0 + 1032);
  objc_msgSend(v29, "setName:", v62, v86);

  objc_msgSend(v29, "setBatteryLevel:", v63);
  objc_msgSend(v29, "setConnectableDeviceCount:", v64);
  objc_msgSend(v29, "setKeySyncRecord:", v65);
  objc_msgSend(v29, "setLostModeInfo:", v67);
  objc_msgSend(v29, "setRole:", v66);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v69 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, "setSafeLocations:", v69);

  objc_msgSend(v29, "setConnected:", v87);
  objc_msgSend(v29, "setCanBeLeashedByHost:", v88);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v70 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, "setTaskInformation:", v70);

  swift_release(v93);
  v94(v91, v68);
  v94(v92, v68);

  sub_100004048(v89, &qword_10110EEB0);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v92);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v91);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v117);
  swift_task_dealloc(v119);
  swift_task_dealloc(v101);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v89);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v139);
  swift_task_dealloc(v140);
  swift_task_dealloc(v141);
  swift_task_dealloc(v131);
  return (*(uint64_t (**)(id))(v0 + 8))(v29);
}

uint64_t sub_1007255D8()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[298];
  v2 = (void (*)(uint64_t, uint64_t))v0[283];
  v3 = v0[188];
  v4 = v0[187];
  v5 = v0[183];
  v6 = v0[126];
  swift_release(v0[296]);
  swift_errorRelease(v1);
  v2(v4, v5);
  v2(v3, v5);
  return swift_task_switch(sub_10072565C, v6, 0);
}

uint64_t sub_10072565C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  Class isa;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  Class v42;
  NSString v43;
  uint64_t v44;
  NSString v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSString v55;
  uint64_t v56;
  NSString v57;
  NSString v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  Class v65;
  Class v66;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v1 = *(_QWORD *)(v0 + 1232);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(*(_QWORD *)(v0 + 1192) + 40) + 8));
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  v2 = *(_QWORD *)(v0 + 2288);
  v3 = *(_QWORD *)(v0 + 1200);
  v4 = *(_QWORD *)(v0 + 1192);
  v5 = *(_QWORD *)(v0 + 1176);
  v6 = *(_QWORD *)(v0 + 984);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 504));
  sub_100030784(v6, v0 + 584);
  v7 = swift_dynamicCast(v5, v0 + 584, v2, v4, 6);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  if ((v7 & 1) == 0)
  {
    v15 = *(_QWORD *)(v0 + 1176);
    v8(v15, 1, 1, *(_QWORD *)(v0 + 1192));
    v16 = (uint64_t *)&unk_1010EE180;
    v17 = v15;
LABEL_5:
    sub_100004048(v17, v16);
LABEL_8:
    v19 = *(_QWORD **)(v0 + 984);
    v20 = v19[3];
    v21 = v19[4];
    sub_10001AA44(v19, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8) + 32))(v20);
    goto LABEL_9;
  }
  v9 = *(_QWORD *)(v0 + 1224);
  v10 = *(_QWORD *)(v0 + 1216);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1176);
  v8(v12, 0, 1, v11);
  sub_1000126EC(v12, v9, type metadata accessor for SharedBeaconRecord);
  v13 = *(_QWORD *)(v9 + *(int *)(v11 + 44));
  sub_10005972C(v9, v10, type metadata accessor for SharedBeaconRecord);
  v14 = *(_QWORD *)(v0 + 1216);
  if (v13 != -1)
  {
    sub_1000126B0(v14, type metadata accessor for SharedBeaconRecord);
LABEL_7:
    sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
    goto LABEL_8;
  }
  v18 = *(_QWORD *)(v14 + *(int *)(*(_QWORD *)(v0 + 1192) + 48));
  sub_1000126B0(v14, type metadata accessor for SharedBeaconRecord);
  if (v18 != -1)
    goto LABEL_7;
  v68 = *(_QWORD *)(v0 + 1224);
  v69 = *(_QWORD *)(v0 + 1192);
  v70 = *(unsigned __int8 *)(v68 + *(int *)(v69 + 64));
  sub_10005972C(v68, *(_QWORD *)(v0 + 1208), type metadata accessor for SharedBeaconRecord);
  v71 = *(_QWORD *)(v0 + 1208);
  if (v70 == 4)
  {
    sub_1000126B0(v71, type metadata accessor for SharedBeaconRecord);
  }
  else
  {
    v72 = *(unsigned __int8 *)(v71 + *(int *)(v69 + 64));
    sub_1000126B0(v71, type metadata accessor for SharedBeaconRecord);
    if (v72 != 1)
      goto LABEL_7;
  }
  v73 = *(_QWORD *)(v0 + 1040);
  sub_10000F9B8(*(_QWORD *)(v0 + 1224) + *(int *)(*(_QWORD *)(v0 + 1192) + 80), v73, (uint64_t *)&unk_1010F47B0);
  v74 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48))(v73, 1, v74) == 1)
  {
    v75 = *(_QWORD *)(v0 + 1472);
    v76 = *(_QWORD *)(v0 + 1464);
    v77 = *(_QWORD *)(v0 + 1288);
    sub_100004048(*(_QWORD *)(v0 + 1040), (uint64_t *)&unk_1010F47B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v77, 1, 1, v76);
  }
  else
  {
    v78 = *(_QWORD *)(v0 + 1040);
    sub_10000F9B8(v78 + *(int *)(v74 + 20), *(_QWORD *)(v0 + 1288), &qword_1010ED860);
    sub_1000126B0(v78, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  }
  v79 = *(_QWORD *)(v0 + 1472);
  v80 = *(_QWORD *)(v0 + 1464);
  v81 = *(_QWORD *)(v0 + 1288);
  sub_1000126B0(*(_QWORD *)(v0 + 1224), type metadata accessor for SharedBeaconRecord);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v81, 1, v80) == 1)
  {
    v17 = *(_QWORD *)(v0 + 1288);
    v16 = &qword_1010ED860;
    goto LABEL_5;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2248))(*(_QWORD *)(v0 + 1488), *(_QWORD *)(v0 + 1288), *(_QWORD *)(v0 + 1464));
LABEL_9:
  v22 = *(_QWORD *)(v0 + 1472);
  v23 = *(_QWORD *)(v0 + 1464);
  v24 = *(_QWORD *)(v0 + 1280);
  v25 = *(_QWORD **)(v0 + 984);
  v26 = objc_msgSend(objc_allocWithZone((Class)SPInternalSimpleBeacon), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setIdentifier:", isa);

  v28 = v25[3];
  v29 = v25[4];
  sub_10001AA44(v25, v28);
  v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 176))(v28, v29);
  objc_msgSend(v26, "setType:", v30);

  v31 = v25[3];
  v32 = v25[4];
  sub_10001AA44(v25, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 192))(v31, v32);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v24, 1, v23) == 1)
  {
    v33 = 0;
  }
  else
  {
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
    v35 = *(_QWORD *)(v0 + 1464);
    v36 = *(_QWORD *)(v0 + 1280);
    v33 = UUID._bridgeToObjectiveC()().super.isa;
    v34(v36, v35);
  }
  v37 = *(double *)(v0 + 2280);
  v38 = *(_QWORD *)(v0 + 2192);
  v39 = *(_QWORD *)(v0 + 2184);
  v40 = *(_QWORD *)(v0 + 1944);
  v41 = *(unsigned __int8 *)(v0 + 2418) != 5;
  objc_msgSend(v26, "setGroupIdentifier:", v33);

  objc_msgSend(v26, "setPartIdentifier:", 255);
  objc_msgSend(v26, "setConnectionAllowed:", v41);
  objc_msgSend(v26, "setTxPower:", v37);
  v42 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v26, "setProductUUID:", v42);

  objc_msgSend(v26, "setVendorId:", v38);
  objc_msgSend(v26, "setProductId:", v39);
  if (v40)
  {
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v43 = 0;
  }
  v44 = *(_QWORD *)(v0 + 1928);
  objc_msgSend(v26, "setModelName:", v43);

  if (v44)
  {
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = 0;
  }
  objc_msgSend(v26, "setManufacturerName:", v45);

  v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 2272);
  v47 = *(_QWORD *)(v0 + 1840);
  v48 = *(_QWORD *)(v0 + 1168);
  v49 = *(_QWORD *)(v0 + 1016);
  objc_msgSend(v26, "setSerialNumber:", 0);
  objc_msgSend(v26, "setOwner:", v47);
  v50 = 0;
  if (!v46(v48, 1, v49))
  {
    v51 = *(_QWORD *)(v0 + 1032);
    sub_10005972C(*(_QWORD *)(v0 + 1168), v51, type metadata accessor for BeaconProductInfoRecord);
    v50 = sub_100603CFC();
    sub_1000126B0(v51, type metadata accessor for BeaconProductInfoRecord);
  }
  v52 = *(unsigned __int8 *)(v0 + 2413);
  v53 = *(unsigned __int8 *)(v0 + 2412);
  v54 = *(_QWORD *)(v0 + 1832);
  objc_msgSend(v26, "setAccessoryProductInfo:", v50);

  objc_msgSend(v26, "setIsZeus:", v52);
  objc_msgSend(v26, "setIsAppleAudioAccessory:", v53);
  if (v54)
  {
    v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = 0;
  }
  v56 = *(_QWORD *)(v0 + 1872);
  objc_msgSend(v26, "setDiscoveryId:", v55);

  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setSystemVersion:", v57);

  if (v56)
  {
    v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = 0;
  }
  v59 = *(_QWORD *)(v0 + 2224);
  v60 = *(_QWORD *)(v0 + 2160);
  v61 = *(void **)(v0 + 2152);
  v62 = *(void **)(v0 + 1856);
  v63 = *(void **)(v0 + 1848);
  LODWORD(v82) = *(unsigned __int8 *)(v0 + 2414);
  HIDWORD(v82) = *(unsigned __int8 *)(v0 + 2417);
  v86 = *(void **)(v0 + 1840);
  v89 = *(_QWORD *)(v0 + 1616);
  v90 = *(void (**)(uint64_t, uint64_t))(v0 + 2264);
  v91 = *(_QWORD *)(v0 + 1600);
  v92 = *(_QWORD *)(v0 + 1576);
  v93 = *(_QWORD *)(v0 + 1560);
  v94 = *(_QWORD *)(v0 + 1552);
  v95 = *(_QWORD *)(v0 + 1544);
  v96 = *(_QWORD *)(v0 + 1536);
  v98 = *(_QWORD *)(v0 + 1528);
  v100 = *(_QWORD *)(v0 + 1520);
  v103 = *(_QWORD *)(v0 + 1504);
  v105 = *(_QWORD *)(v0 + 1496);
  v87 = *(_QWORD *)(v0 + 1488);
  v88 = *(_QWORD *)(v0 + 1512);
  v64 = *(_QWORD *)(v0 + 1464);
  v107 = *(_QWORD *)(v0 + 1456);
  v109 = *(_QWORD *)(v0 + 1440);
  v111 = *(_QWORD *)(v0 + 1432);
  v113 = *(_QWORD *)(v0 + 1424);
  v115 = *(_QWORD *)(v0 + 1416);
  v97 = *(_QWORD *)(v0 + 1408);
  v99 = *(_QWORD *)(v0 + 1392);
  v101 = *(_QWORD *)(v0 + 1368);
  v102 = *(_QWORD *)(v0 + 1360);
  v104 = *(_QWORD *)(v0 + 1352);
  v106 = *(_QWORD *)(v0 + 1344);
  v108 = *(_QWORD *)(v0 + 1336);
  v110 = *(_QWORD *)(v0 + 1304);
  v112 = *(_QWORD *)(v0 + 1296);
  v114 = *(_QWORD *)(v0 + 1288);
  v116 = *(_QWORD *)(v0 + 1280);
  v117 = *(_QWORD *)(v0 + 1272);
  v118 = *(_QWORD *)(v0 + 1264);
  v119 = *(_QWORD *)(v0 + 1248);
  v120 = *(_QWORD *)(v0 + 1240);
  v121 = *(_QWORD *)(v0 + 1232);
  v122 = *(_QWORD *)(v0 + 1224);
  v123 = *(_QWORD *)(v0 + 1216);
  v124 = *(_QWORD *)(v0 + 1208);
  v125 = *(_QWORD *)(v0 + 1184);
  v126 = *(_QWORD *)(v0 + 1176);
  v85 = *(_QWORD *)(v0 + 1168);
  v128 = *(_QWORD *)(v0 + 1160);
  v129 = *(_QWORD *)(v0 + 1152);
  v130 = *(_QWORD *)(v0 + 1144);
  v131 = *(_QWORD *)(v0 + 1128);
  v132 = *(_QWORD *)(v0 + 1104);
  v133 = *(_QWORD *)(v0 + 1088);
  v134 = *(_QWORD *)(v0 + 1072);
  v135 = *(_QWORD *)(v0 + 1064);
  v136 = *(_QWORD *)(v0 + 1048);
  v137 = *(_QWORD *)(v0 + 1040);
  v127 = *(_QWORD *)(v0 + 1032);
  objc_msgSend(v26, "setName:", v58, v82);

  objc_msgSend(v26, "setBatteryLevel:", v59);
  objc_msgSend(v26, "setConnectableDeviceCount:", v60);
  objc_msgSend(v26, "setKeySyncRecord:", v61);
  objc_msgSend(v26, "setLostModeInfo:", v63);
  objc_msgSend(v26, "setRole:", v62);
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1007276B8();
  v65 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setSafeLocations:", v65);

  objc_msgSend(v26, "setConnected:", v83);
  objc_msgSend(v26, "setCanBeLeashedByHost:", v84);
  type metadata accessor for SPBeaconTaskName(0);
  sub_10000F4A0(0, (unint64_t *)&unk_1010F7960, SPBeaconTaskInformation_ptr);
  sub_100006C64(&qword_1010EB5D0, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v66 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v26, "setTaskInformation:", v66);

  swift_release(v89);
  v90(v87, v64);
  v90(v88, v64);

  sub_100004048(v85, &qword_10110EEB0);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  swift_task_dealloc(v100);
  swift_task_dealloc(v88);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  swift_task_dealloc(v87);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v85);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v127);
  return (*(uint64_t (**)(id))(v0 + 8))(v26);
}

uint64_t sub_100726254(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 64) = a7;
  *(_QWORD *)(v7 + 48) = a5;
  *(double *)(v7 + 40) = a1;
  v8 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v7 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 80) = v9;
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007262BC, 0, 0);
}

uint64_t sub_1007262BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.seconds(_:)(*(double *)(v0 + 40));
  v3 = v2;
  ContinuousClock.init()(v1);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_101117148 + dword_101117148);
  v4 = (_QWORD *)swift_task_alloc(unk_10111714C);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_100726350;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_100726350()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[10] + 8))(v2[11], v2[9]);
  if (v0)
    v4 = sub_1005BC390;
  else
    v4 = sub_1007263C4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1007263C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 112) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1011055EC);
    *(_QWORD *)(v0 + 120) = v3;
    *v3 = v0;
    v3[1] = sub_1005BC338;
    return sub_100718458(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10072645C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = result;
  if (result)
  {
    v5 = a2[3];
    v6 = a2[4];
    v7 = sub_10001AA44(a2, v5);
    result = sub_1004A6490((uint64_t)v7, v3, v5, v6);
  }
  *a3 = v3 == 0;
  return result;
}

BOOL sub_1007264B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, __n128);
  __n128 v13;
  BOOL v14;
  _BYTE v16[16];
  _BYTE *v17;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SafeLocation(0) + 52));
  v9 = a2[3];
  v10 = a2[4];
  sub_10001AA44(a2, v9);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
  v12 = *(void (**)(uint64_t, uint64_t, __n128))(v11 + 32);
  v13 = swift_bridgeObjectRetain(v8);
  v12(v9, v11, v13);
  v17 = v7;
  v14 = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, (_BOOL8)v16, v8);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_1007265BC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_release(v0[18]);
  swift_release(v0[19]);
  swift_release(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_bridgeObjectRelease(v0[25]);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100726620()
{
  uint64_t v0;

  sub_1007265BC();
  return swift_defaultActor_deallocate(v0);
}

uint64_t initializeWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for SimpleBeaconUpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimpleBeaconUpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimpleBeaconUpdateContext()
{
  return &type metadata for SimpleBeaconUpdateContext;
}

uint64_t sub_1007267EC()
{
  uint64_t v0;

  return swift_task_switch(sub_100726800, v0, 0);
}

uint64_t sub_100726800()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)SPSimpleBeaconUpdateInterfaceReconnectNotification;
  v2 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v1, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100726884(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1011057E8, a2, (uint64_t (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService, (uint64_t)&unk_100E4BD98);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1007268C0(uint64_t a1, uint64_t a2)
{
  return sub_1007268F8(a1, a2, &qword_101105AC8, (uint64_t)&unk_10108D1F8, (uint64_t)&unk_101105AD8);
}

uint64_t sub_1007268DC(uint64_t a1, uint64_t a2)
{
  return sub_1007268F8(a1, a2, &qword_101105868, (uint64_t)&unk_10108C820, (uint64_t)&unk_101105878);
}

uint64_t sub_1007268F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v9 = sub_10001A9A8(a3);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (char *)swift_allocObject(a4, v17 + v11, v16 | 7);
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  swift_retain();
  v19 = sub_100691AC0((uint64_t)v14, a5, (uint64_t)v18);
  return swift_release(v19);
}

uint64_t sub_100726A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = sub_10001A9A8(&qword_101105AC8);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = v8;
  v5[8] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100726AB0, 0, 0);
}

uint64_t sub_100726AB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[4], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108D220, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  *v10 = v0;
  v10[1] = sub_10072881C;
  return unsafeBlocking<A>(_:)(v0[2], sub_10072877C, v8, &type metadata for () + 1);
}

uint64_t sub_100726B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = sub_10001A9A8((uint64_t *)&unk_101105840);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = v8;
  v5[8] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100726BFC, 0, 0);
}

uint64_t sub_100726BFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[4], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108C730, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  *v10 = v0;
  v10[1] = sub_10072881C;
  return unsafeBlocking<A>(_:)(v0[2], sub_1007274B8, v8, &type metadata for () + 1);
}

uint64_t sub_100726CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = sub_10001A9A8(&qword_101105868);
  v5[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[6] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[7] = v8;
  v5[8] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100726D48, 0, 0);
}

uint64_t sub_100726D48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[4], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108C848, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  *v10 = v0;
  v10[1] = sub_100726E28;
  return unsafeBlocking<A>(_:)(v0[2], sub_1007275E0, v8, &type metadata for () + 1);
}

uint64_t sub_100726E28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 64);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100726E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_101105AC8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108D248, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v11 = swift_allocObject(&unk_10108D270, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10072879C;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10108D288;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v12);
  _Block_release(v12);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v11, "", 110, 27, 55, 1);
  swift_release();
  result = swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100727028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8((uint64_t *)&unk_101105840);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108C758, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v11 = swift_allocObject(&unk_10108C780, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1007274D8;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10108C798;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v12);
  _Block_release(v12);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v11, "", 110, 27, 55, 1);
  swift_release();
  result = swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1007271CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_101105868);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = *(NSObject **)(a1 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10108C870, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v11 = swift_allocObject(&unk_10108C898, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10072764C;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_10108C8B0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v12);
  _Block_release(v12);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v11, "", 110, 27, 55, 1);
  swift_release();
  result = swift_release();
  if ((a1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100727370(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  swift_beginAccess(a1 + 32, v8, 0, 0);
  v7 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(v7);
  v5 = sub_10001A9A8(a3);
  return CheckedContinuation.resume(returning:)(&v7, v5);
}

uint64_t sub_1007273D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007268F8(a1, v1, (uint64_t *)&unk_101105840, (uint64_t)&unk_10108C708, (uint64_t)&unk_101105858);
}

uint64_t sub_100727408()
{
  return sub_100007A20((uint64_t *)&unk_101105840);
}

uint64_t sub_100727414(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101105840) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_101105854);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100726B90(a1, v5, v6, v7, v8);
}

uint64_t sub_1007274AC()
{
  return sub_1000314D4((uint64_t *)&unk_101105840);
}

uint64_t sub_1007274B8()
{
  return sub_1007275F4((uint64_t *)&unk_101105840, sub_100727028);
}

uint64_t sub_1007274CC()
{
  return sub_1000314D4((uint64_t *)&unk_101105840);
}

uint64_t sub_1007274D8()
{
  return sub_100727658((uint64_t *)&unk_101105840);
}

uint64_t sub_1007274E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007274F4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100727530()
{
  return sub_100007A20(&qword_101105868);
}

uint64_t sub_10072753C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101105868) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_101105874);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100726CDC(a1, v5, v6, v7, v8);
}

uint64_t sub_1007275D4()
{
  return sub_1000314D4(&qword_101105868);
}

uint64_t sub_1007275E0()
{
  return sub_1007275F4(&qword_101105868, sub_1007271CC);
}

uint64_t sub_1007275F4(uint64_t *a1, uint64_t (*a2)(_QWORD, uint64_t))
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a1) - 8) + 80);
  return a2(*(_QWORD *)(v2 + 16), v2 + ((v3 + 24) & ~v3));
}

uint64_t sub_100727640()
{
  return sub_1000314D4(&qword_101105868);
}

uint64_t sub_10072764C()
{
  return sub_100727658(&qword_101105868);
}

uint64_t sub_100727658(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a1) - 8) + 80);
  return sub_100727370(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100727698()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007276AC()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A83944);
}

unint64_t sub_1007276B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101107020;
  if (!qword_101107020)
  {
    v1 = sub_10000F4A0(255, &qword_1011058A0, SPSafeLocation_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_101107020);
  }
  return result;
}

uint64_t sub_100727714()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A83B2C);
}

uint64_t sub_100727724()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1007279C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100A839C0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100727A08()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82B00);
}

uint64_t sub_100727A1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A83994(v1 + ((v3 + 24) & ~v3), a1);
}

_QWORD *sub_100727A5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A83968(a1);
}

BOOL sub_100727A64(uint64_t a1)
{
  uint64_t v1;

  return sub_1007264B4(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100727A84@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = (char *)v1[2];
  v4 = v1 + 3;
  v6 = v1[6];
  v5 = (_QWORD *)v1[7];
  v7 = sub_10001AA44(v4, v6);
  result = sub_1004B3AE4((uint64_t)v7, 0, v3, v6, v5);
  *a1 = result;
  return result;
}

id sub_100727AD8@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id result;

  v3 = v1[2];
  v4 = v1 + 3;
  v6 = v1[6];
  v5 = v1[7];
  v7 = sub_10001AA44(v4, v6);
  result = sub_10077744C((uint64_t)v7, v3, v6, v5);
  *a1 = result & 1;
  return result;
}

uint64_t sub_100727B30@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10072645C(*(_QWORD *)(v1 + 16), (_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100727B44()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A83628);
}

uint64_t sub_100727B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_100727BC8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = a1;
  v6 = a2 + 64;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 64);
  v21 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v10 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(a2 + 56) + 48 * i;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 24);
    v19 = *(_BYTE *)(v16 + 32);
    v20 = *(_QWORD *)(v16 + 40);
    v22 = *(_QWORD *)v16;
    v23 = *(_OWORD *)(v16 + 8);
    v24 = v18;
    v25 = v19;
    v26 = v20;
    swift_retain();
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    sub_1007120F4(&v27, &v22, a3);
    if (v3)
    {
      swift_release(a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v17);
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release(v17);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v21)
      goto LABEL_26;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_17:
    v9 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v21)
    goto LABEL_26;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 4;
  if (v10 + 4 >= v21)
  {
LABEL_26:
    swift_release(a2);
    return;
  }
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v21)
      goto LABEL_26;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100727DFC()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A837B0);
}

uint64_t sub_100727E08()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100727E2C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 48));
  swift_release();
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100727E68(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[4];
  v7 = *((_QWORD *)v1 + 5);
  v8 = (uint64_t)(v1 + 6);
  v9 = *((_QWORD *)v1 + 11);
  v10 = (_QWORD *)swift_task_alloc(dword_1011058C4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_100726254(v6, a1, v4, v5, v7, v8, v9);
}

uint64_t sub_100727EFC(uint64_t a1)
{
  uint64_t v1;

  return sub_100711DD8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100727F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1011058DC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_10071B8F0(a1, a2, v2);
}

uint64_t sub_100727F68()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

uint64_t sub_100727F80()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A835B0);
}

uint64_t sub_100727F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8((uint64_t *)&unk_101105910);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10072800C()
{
  return sub_100728240((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_100712050);
}

uint64_t sub_10072801C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = (_QWORD *)swift_task_alloc(dword_101105924);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v6 = (_QWORD *)swift_task_alloc(dword_1011055F4);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_100030654;
  return sub_1000134A0(v2, v4, v3);
}

uint64_t sub_1007280A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_10110593C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100718100(a1, a2, v2);
}

uint64_t sub_100728110()
{
  return sub_100067FB4(sub_100A83538);
}

uint64_t sub_10072811C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101105954);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100067F58;
  return sub_100717D64(v0);
}

uint64_t sub_100728164()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101105964);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[3] = v0;
  return swift_task_switch(sub_100717E70, 0, 0);
}

uint64_t sub_1007281C0(uint64_t a1)
{
  uint64_t v1;

  return sub_10000C16C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1007281C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8((uint64_t *)&unk_101105910);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100728240(uint64_t (*a1)(_QWORD, _QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101105910) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_100728284(uint64_t a1)
{
  uint64_t v1;

  return sub_10000C7C0(a1, v1);
}

uint64_t sub_10072828C()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10072829C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100713D18(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1007282A8()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1007282B8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100716588(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1007282C4()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100728300(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_101105994);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10071556C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100728380()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007283A4()
{
  return sub_10072859C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1007283B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1011059DC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_100718848(v2, v3, v4);
}

uint64_t sub_100728414()
{
  return sub_10072859C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100728420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_1011059FC);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 48) = v4;
  return swift_task_switch(sub_1007190E4, 0, 0);
}

uint64_t sub_100728490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_101105A24);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_100719620(v2, v3, v5, v4);
}

uint64_t sub_1007284F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_101105A24);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004C28;
  return sub_100719620(v2, v3, v5, v4);
}

uint64_t sub_100728568()
{
  return sub_10072859C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100728590()
{
  return sub_10072859C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10072859C(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_bridgeObjectRelease(v1[2]);
  swift_release(v1[3]);
  a1(v1[4]);
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1007285E0()
{
  return sub_1000314D4(&qword_101105AA0);
}

uint64_t sub_1007285F0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100728630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_101105AB4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_1011055DC);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004C28;
  v4[4] = v2;
  return swift_task_switch(sub_100717B6C, v2, 0);
}

uint64_t sub_1007286B4()
{
  return sub_1004263E4((void (*)(_QWORD))&_swift_release, 32);
}

void sub_1007286C4()
{
  uint64_t v0;

  sub_100711A38(*(_QWORD *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1007286CC()
{
  return sub_100007A20(&qword_101105AC8);
}

uint64_t sub_1007286D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101105AC8) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_101105AD4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100726A44(a1, v5, v6, v7, v8);
}

uint64_t sub_100728770()
{
  return sub_1000314D4(&qword_101105AC8);
}

uint64_t sub_10072877C()
{
  return sub_1007275F4(&qword_101105AC8, sub_100726E84);
}

uint64_t sub_100728790()
{
  return sub_1000314D4(&qword_101105AC8);
}

uint64_t sub_10072879C()
{
  return sub_100727658(&qword_101105AC8);
}

uint64_t sub_1007287A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007287B8()
{
  uint64_t v0;

  return sub_100712DC0(v0);
}

uint64_t sub_1007287C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101105AF4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_100712E60, v0, 0);
}

void sub_100728868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10072ABD8(v0, (uint64_t)v4);
  v5 = (char *)sub_100728938 + 4 * byte_100E4BDF0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100728938()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;

  v2._countAndFlagsBits = *v0;
  v3 = (void *)v0[1];
  *(_QWORD *)(v1 - 80) = 0x4449656C7070612ELL;
  *(_QWORD *)(v1 - 72) = 0xE900000000000028;
  v2._object = v3;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v1 - 80);
}

void sub_100728C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10072ABD8(v0, (uint64_t)v4);
  v5 = (char *)sub_100728CDC + 4 * byte_100E4BDF7[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_100728CDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  Hasher._combine(_:)(1uLL);
  String.hash(into:)(v0, v2, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100728EAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100728ED8 + 4 * byte_100E4BDFE[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_100728ED8()
{
  return 0x4449656C707061;
}

uint64_t sub_100728EF0()
{
  return 0x706F724472656570;
}

unint64_t sub_100728F08()
{
  return 0xD000000000000013;
}

unint64_t sub_100728F24()
{
  return 0xD000000000000014;
}

uint64_t sub_100728F44()
{
  return 7562345;
}

uint64_t sub_100728F54()
{
  return 0x4449796C696D6166;
}

void sub_100728F70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  _QWORD v20[7];
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v34 = sub_10001A9A8(&qword_101105BC0);
  v20[0] = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8(&qword_101105BC8);
  v20[4] = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v31 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_101105BD0);
  v20[3] = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v28 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8(&qword_101105BD8);
  v20[2] = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_101105BE0);
  v20[1] = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v24 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v22 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101105BE8);
  v20[6] = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v20[5] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101105BF0);
  __chkstk_darwin(v9);
  v10 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101105BF8);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v16);
  v18 = sub_10072BB8C();
  v38 = v15;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PeerCommunicationIdentifier.CodingKeys, &type metadata for PeerCommunicationIdentifier.CodingKeys, v18, v16, v17);
  sub_10072ABD8(v37, (uint64_t)v12);
  v19 = (char *)sub_1007292B0 + 4 * word_100E4BE06[swift_getEnumCaseMultiPayload(v12, v10)];
  __asm { BR              X10 }
}

uint64_t sub_1007292B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v0;
  v3 = v0[1];
  *(_BYTE *)(v1 - 112) = 1;
  v4 = sub_10072BD24();
  v5 = *(_QWORD *)(v1 - 280);
  v6 = *(_QWORD *)(v1 - 144);
  v7 = *(_QWORD *)(v1 - 120);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys, v1 - 112, v6, &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys, v4);
  v8 = v2;
  v9 = *(_QWORD *)(v1 - 264);
  KeyedEncodingContainer.encode(_:forKey:)(v8, v3, v10, v9);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 272) + 8))(v5, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 152) + 8))(v7, v6);
}

uint64_t sub_1007298FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v43[12];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  char *v65;

  v51 = a2;
  v60 = sub_10001A9A8(&qword_101105C48);
  v50 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v57 = (char *)v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10001A9A8(&qword_101105C50);
  v43[10] = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v56 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_10001A9A8(&qword_101105C58);
  v43[8] = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v55 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10001A9A8(&qword_101105C60);
  v43[9] = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v59 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10001A9A8(&qword_101105C68);
  v43[7] = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v54 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10001A9A8(&qword_101105C70);
  v43[6] = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v53 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_10001A9A8(&qword_101105C78);
  v43[11] = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v52 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10001A9A8(&qword_101105C80);
  v58 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for PeerCommunicationIdentifier(0);
  v12 = __chkstk_darwin(v61);
  v43[4] = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v43[5] = (char *)v43 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v43 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)v43 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)v43 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)v43 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)v43 - v28;
  v31 = a1[3];
  v30 = a1[4];
  v64 = a1;
  sub_10001AA44(a1, v31);
  v32 = sub_10072BB8C();
  v63 = v11;
  v33 = v65;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PeerCommunicationIdentifier.CodingKeys, &type metadata for PeerCommunicationIdentifier.CodingKeys, v32, v31, v30);
  if (!v33)
  {
    v43[1] = v27;
    v43[3] = v24;
    v43[2] = v18;
    v43[0] = v21;
    v65 = v29;
    v35 = v62;
    v34 = v63;
    v36 = KeyedDecodingContainer.allKeys.getter(v62);
    if (*(_QWORD *)(v36 + 16) == 1)
      __asm { BR              X10 }
    v37 = type metadata accessor for DecodingError(0);
    swift_allocError(v37, &protocol witness table for DecodingError, 0, 0);
    v39 = v38;
    sub_10001A9A8(&qword_1010F1CA0);
    *v39 = v61;
    v40 = KeyedDecodingContainer.codingPath.getter(v35);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v40, 0xD00000000000002BLL, 0x8000000100ECA650, 0);
    v41 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, enum case for DecodingError.typeMismatch(_:), v37);
    swift_willThrow(v41);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v35);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v64);
}

uint64_t sub_10072A648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10072BDAC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10072A6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10072BDAC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10072A6F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BD24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072A718(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BD24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072A740()
{
  unsigned __int8 *v0;

  return sub_100728EAC(*v0);
}

uint64_t sub_10072A748@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072C7AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072A76C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BB8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072A794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BB8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072A7BC()
{
  _BYTE *v0;

  if (*v0)
    return 0x696669746E656469;
  else
    return 0x6E69616D6F64;
}

uint64_t sub_10072A7F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072CA70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072A81C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072A844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072A86C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x74616E6974736564;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 0x44495344746C61;
}

uint64_t sub_10072A8D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072CB64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072A8F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BBD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072A920(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BBD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072A948()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x74616E6974736564;
}

uint64_t sub_10072A990@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072CCCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072A9B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC14();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072A9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC14();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072AA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072AA2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BC58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072AA54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BD68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072AA7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BD68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072AAA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BCE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072AACC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072BCE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072AAF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1007298FC(a1, a2);
}

void sub_10072AB08(_QWORD *a1)
{
  sub_100728F70(a1);
}

Swift::Int sub_10072AB1C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100728C18();
  return Hasher._finalize()();
}

Swift::Int sub_10072AB5C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100728C18();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for PeerCommunicationIdentifier(uint64_t a1)
{
  uint64_t result;

  result = qword_101105B78;
  if (!qword_101105B78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PeerCommunicationIdentifier);
  return result;
}

uint64_t sub_10072ABD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCommunicationIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10072AC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD v19[4];

  v4 = type metadata accessor for UUID(0);
  v19[2] = *(_QWORD *)(v4 - 8);
  v19[3] = v4;
  __chkstk_darwin(v4);
  v19[1] = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PeerCommunicationIdentifier(0);
  v7 = __chkstk_darwin(v6);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v10 = __chkstk_darwin(v9);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v12 = sub_10001A9A8(&qword_101105B00);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)v19 + *(int *)(v13 + 48) - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v17 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10072ABD8(v16, (uint64_t)v17);
  sub_10072ABD8(a2, (uint64_t)v15);
  v18 = (char *)sub_10072ADC8 + 4 * byte_100E4BE22[swift_getEnumCaseMultiPayload(v17, v6)];
  __asm { BR              X10 }
}

uint64_t sub_10072ADC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  char v10;

  sub_10072ABD8(v3, (uint64_t)v2);
  v5 = *v2;
  v4 = v2[1];
  if (swift_getEnumCaseMultiPayload(v0, v1))
  {
    swift_bridgeObjectRelease();
    sub_10072B2FC(v3);
  }
  else
  {
    v6 = *v0;
    v7 = v0[1];
    if (v5 == v6 && v4 == v7)
    {
      swift_bridgeObjectRelease_n(v4, 2);
LABEL_12:
      sub_10072B33C(v3);
      v10 = 1;
      return v10 & 1;
    }
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v6, v7, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      goto LABEL_12;
    sub_10072B33C(v3);
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_10072B2FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_101105B00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10072B33C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PeerCommunicationIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for PeerTrustType()
{
  return &type metadata for PeerTrustType;
}

_QWORD *sub_10072B38C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v12 = a2[2];
        a1[2] = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v13 = a2[2];
        a1[1] = a2[1];
        a1[2] = v13;
        swift_bridgeObjectRetain(v13);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v14 = a2[2];
        a1[1] = a2[1];
        a1[2] = v14;
        v15 = a2[3];
        v16 = a2[4];
        a1[3] = v15;
        a1[4] = v16;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        v18 = a2[4];
        a1[3] = a2[3];
        a1[4] = v18;
        v19 = a2[5];
        v20 = a2[6];
        a1[5] = v19;
        a1[6] = v20;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10072B54C(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 1:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2:
    case 3:
      result = swift_bridgeObjectRelease(a1[2]);
      break;
    case 4:
      swift_bridgeObjectRelease(a1[2]);
      result = swift_bridgeObjectRelease(a1[4]);
      break;
    case 5:
      swift_bridgeObjectRelease(a1[1]);
      swift_bridgeObjectRelease(a1[4]);
      result = swift_bridgeObjectRelease(a1[6]);
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_10072B5F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_9;
    case 1u:
      v10 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_9;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v11 = a2[2];
      a1[2] = v11;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_9;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v12 = a2[2];
      a1[1] = a2[1];
      a1[2] = v12;
      swift_bridgeObjectRetain(v12);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_9;
    case 4u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v13 = a2[2];
      a1[1] = a2[1];
      a1[2] = v13;
      v14 = a2[3];
      v15 = a2[4];
      a1[3] = v14;
      a1[4] = v15;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_9;
    case 5u:
      v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      v17 = a2[4];
      a1[3] = a2[3];
      a1[4] = v17;
      v18 = a2[5];
      v19 = a2[6];
      a1[5] = v18;
      a1[6] = v19;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      v7 = a1;
      v8 = a3;
      v9 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *sub_10072B778(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10072B33C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        v6 = a2[1];
        a1[1] = v6;
        swift_bridgeObjectRetain(v6);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v7 = type metadata accessor for UUID(0);
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        v8 = a2[2];
        a1[2] = v8;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        v9 = a2[2];
        a1[2] = v9;
        swift_bridgeObjectRetain(v9);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        v10 = a2[2];
        a1[2] = v10;
        a1[3] = a2[3];
        v11 = a2[4];
        a1[4] = v11;
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        *a1 = *a2;
        v12 = a2[1];
        a1[1] = v12;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        a1[3] = a2[3];
        v13 = a2[4];
        a1[4] = v13;
        a1[5] = a2[5];
        v14 = a2[6];
        a1[6] = v14;
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_10072B960(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10072B9EC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_10072B33C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10072BA88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E4BED0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E4BEE8;
    v4[3] = &unk_100E4BEE8;
    v4[4] = &unk_100E4BF00;
    v4[5] = &unk_100E4BF18;
    swift_initEnumMetadataMultiPayload(a1, 256, 6, v4);
    return 0;
  }
  return result;
}

uint64_t sub_10072BB18()
{
  return sub_100006204(&qword_101105BB0, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4BF30);
}

unint64_t sub_10072BB48()
{
  unint64_t result;

  result = qword_101105BB8;
  if (!qword_101105BB8)
  {
    result = swift_getWitnessTable(byte_100E4C010, &type metadata for PeerTrustType);
    atomic_store(result, (unint64_t *)&qword_101105BB8);
  }
  return result;
}

unint64_t sub_10072BB8C()
{
  unint64_t result;

  result = qword_101105C00;
  if (!qword_101105C00)
  {
    result = swift_getWitnessTable(byte_100E4C92C, &type metadata for PeerCommunicationIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C00);
  }
  return result;
}

unint64_t sub_10072BBD0()
{
  unint64_t result;

  result = qword_101105C08;
  if (!qword_101105C08)
  {
    result = swift_getWitnessTable(aU_22, &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C08);
  }
  return result;
}

unint64_t sub_10072BC14()
{
  unint64_t result;

  result = qword_101105C10;
  if (!qword_101105C10)
  {
    result = swift_getWitnessTable(byte_100E4C88C, &type metadata for PeerCommunicationIdentifier.IdsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C10);
  }
  return result;
}

unint64_t sub_10072BC58()
{
  unint64_t result;

  result = qword_101105C18;
  if (!qword_101105C18)
  {
    result = swift_getWitnessTable(byte_100E4C83C, &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C18);
  }
  return result;
}

unint64_t sub_10072BC9C()
{
  unint64_t result;

  result = qword_101105C20;
  if (!qword_101105C20)
  {
    result = swift_getWitnessTable(aE_36, &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C20);
  }
  return result;
}

unint64_t sub_10072BCE0()
{
  unint64_t result;

  result = qword_101105C28;
  if (!qword_101105C28)
  {
    result = swift_getWitnessTable(byte_100E4C79C, &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C28);
  }
  return result;
}

unint64_t sub_10072BD24()
{
  unint64_t result;

  result = qword_101105C30;
  if (!qword_101105C30)
  {
    result = swift_getWitnessTable(byte_100E4C74C, &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C30);
  }
  return result;
}

unint64_t sub_10072BD68()
{
  unint64_t result;

  result = qword_101105C38;
  if (!qword_101105C38)
  {
    result = swift_getWitnessTable(a5_10, &type metadata for PeerCommunicationIdentifier.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C38);
  }
  return result;
}

unint64_t sub_10072BDAC()
{
  unint64_t result;

  result = qword_101105C40;
  if (!qword_101105C40)
  {
    result = swift_getWitnessTable(aI_29, &type metadata for PeerTrustType);
    atomic_store(result, (unint64_t *)&qword_101105C40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PeerCommunicationIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10072BE3C + 4 * byte_100E4BE46[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10072BE70 + 4 * byte_100E4BE41[v4]))();
}

uint64_t sub_10072BE70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072BE78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10072BE80);
  return result;
}

uint64_t sub_10072BE8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10072BE94);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10072BE98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072BEA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.CodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.CodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.NoneCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.AppleIDCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.PeerDropCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys;
}

uint64_t _s12searchpartyd27PeerCommunicationIdentifierO17AppleIDCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10072BF40 + 4 * byte_100E4BE4B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10072BF60 + 4 * byte_100E4BE50[v4]))();
}

_BYTE *sub_10072BF40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10072BF60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10072BF68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10072BF70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10072BF78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10072BF80(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.MessagingDestinationCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys;
}

uint64_t _s12searchpartyd13PeerTrustTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10072BFE8 + 4 * byte_100E4BE5A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10072C01C + 4 * byte_100E4BE55[v4]))();
}

uint64_t sub_10072C01C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072C024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10072C02CLL);
  return result;
}

uint64_t sub_10072C038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10072C040);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10072C044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072C04C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.IdsCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.IdsCodingKeys;
}

uint64_t storeEnumTagSinglePayload for PeerCommunicationIdentifier.FamilyIDSCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10072C0B4 + 4 * byte_100E4BE64[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10072C0E8 + 4 * byte_100E4BE5F[v4]))();
}

uint64_t sub_10072C0E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072C0F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10072C0F8);
  return result;
}

uint64_t sub_10072C104(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10072C10CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10072C110(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072C118(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerCommunicationIdentifier.FamilyIDSCodingKeys()
{
  return &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys;
}

unint64_t sub_10072C138()
{
  unint64_t result;

  result = qword_101105C88;
  if (!qword_101105C88)
  {
    result = swift_getWitnessTable(aU_23, &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C88);
  }
  return result;
}

unint64_t sub_10072C180()
{
  unint64_t result;

  result = qword_101105C90;
  if (!qword_101105C90)
  {
    result = swift_getWitnessTable(byte_100E4C2EC, &type metadata for PeerCommunicationIdentifier.IdsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C90);
  }
  return result;
}

unint64_t sub_10072C1C8()
{
  unint64_t result;

  result = qword_101105C98;
  if (!qword_101105C98)
  {
    result = swift_getWitnessTable(byte_100E4C3A4, &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105C98);
  }
  return result;
}

unint64_t sub_10072C210()
{
  unint64_t result;

  result = qword_101105CA0;
  if (!qword_101105CA0)
  {
    result = swift_getWitnessTable(aM_29, &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CA0);
  }
  return result;
}

unint64_t sub_10072C258()
{
  unint64_t result;

  result = qword_101105CA8;
  if (!qword_101105CA8)
  {
    result = swift_getWitnessTable(byte_100E4C514, &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CA8);
  }
  return result;
}

unint64_t sub_10072C2A0()
{
  unint64_t result;

  result = qword_101105CB0;
  if (!qword_101105CB0)
  {
    result = swift_getWitnessTable(byte_100E4C5CC, &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CB0);
  }
  return result;
}

unint64_t sub_10072C2E8()
{
  unint64_t result;

  result = qword_101105CB8;
  if (!qword_101105CB8)
  {
    result = swift_getWitnessTable(byte_100E4C6D4, &type metadata for PeerCommunicationIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CB8);
  }
  return result;
}

unint64_t sub_10072C330()
{
  unint64_t result;

  result = qword_101105CC0;
  if (!qword_101105CC0)
  {
    result = swift_getWitnessTable(asc_100E4C5F4, &type metadata for PeerCommunicationIdentifier.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CC0);
  }
  return result;
}

unint64_t sub_10072C378()
{
  unint64_t result;

  result = qword_101105CC8;
  if (!qword_101105CC8)
  {
    result = swift_getWitnessTable(asc_100E4C61C, &type metadata for PeerCommunicationIdentifier.NoneCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CC8);
  }
  return result;
}

unint64_t sub_10072C3C0()
{
  unint64_t result;

  result = qword_101105CD0;
  if (!qword_101105CD0)
  {
    result = swift_getWitnessTable(byte_100E4C53C, &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CD0);
  }
  return result;
}

unint64_t sub_10072C408()
{
  unint64_t result;

  result = qword_101105CD8;
  if (!qword_101105CD8)
  {
    result = swift_getWitnessTable(a5_11, &type metadata for PeerCommunicationIdentifier.AppleIDCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CD8);
  }
  return result;
}

unint64_t sub_10072C450()
{
  unint64_t result;

  result = qword_101105CE0;
  if (!qword_101105CE0)
  {
    result = swift_getWitnessTable(byte_100E4C484, &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CE0);
  }
  return result;
}

unint64_t sub_10072C498()
{
  unint64_t result;

  result = qword_101105CE8;
  if (!qword_101105CE8)
  {
    result = swift_getWitnessTable(byte_100E4C4AC, &type metadata for PeerCommunicationIdentifier.PeerDropCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CE8);
  }
  return result;
}

unint64_t sub_10072C4E0()
{
  unint64_t result;

  result = qword_101105CF0;
  if (!qword_101105CF0)
  {
    result = swift_getWitnessTable(aU_24, &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CF0);
  }
  return result;
}

unint64_t sub_10072C528()
{
  unint64_t result;

  result = qword_101105CF8;
  if (!qword_101105CF8)
  {
    result = swift_getWitnessTable(byte_100E4C3F4, &type metadata for PeerCommunicationIdentifier.ExampleOtherChannelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105CF8);
  }
  return result;
}

unint64_t sub_10072C570()
{
  unint64_t result;

  result = qword_101105D00;
  if (!qword_101105D00)
  {
    result = swift_getWitnessTable(asc_100E4C314, &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D00);
  }
  return result;
}

unint64_t sub_10072C5B8()
{
  unint64_t result;

  result = qword_101105D08;
  if (!qword_101105D08)
  {
    result = swift_getWitnessTable(asc_100E4C33C, &type metadata for PeerCommunicationIdentifier.MessagingDestinationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D08);
  }
  return result;
}

unint64_t sub_10072C600()
{
  unint64_t result;

  result = qword_101105D10;
  if (!qword_101105D10)
  {
    result = swift_getWitnessTable(byte_100E4C25C, &type metadata for PeerCommunicationIdentifier.IdsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D10);
  }
  return result;
}

unint64_t sub_10072C648()
{
  unint64_t result;

  result = qword_101105D18;
  if (!qword_101105D18)
  {
    result = swift_getWitnessTable(byte_100E4C284, &type metadata for PeerCommunicationIdentifier.IdsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D18);
  }
  return result;
}

unint64_t sub_10072C690()
{
  unint64_t result;

  result = qword_101105D20;
  if (!qword_101105D20)
  {
    result = swift_getWitnessTable(asc_100E4C1A4, &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D20);
  }
  return result;
}

unint64_t sub_10072C6D8()
{
  unint64_t result;

  result = qword_101105D28;
  if (!qword_101105D28)
  {
    result = swift_getWitnessTable(byte_100E4C1CC, &type metadata for PeerCommunicationIdentifier.FamilyIDSCodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D28);
  }
  return result;
}

unint64_t sub_10072C720()
{
  unint64_t result;

  result = qword_101105D30;
  if (!qword_101105D30)
  {
    result = swift_getWitnessTable(byte_100E4C644, &type metadata for PeerCommunicationIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D30);
  }
  return result;
}

unint64_t sub_10072C768()
{
  unint64_t result;

  result = qword_101105D38;
  if (!qword_101105D38)
  {
    result = swift_getWitnessTable(asc_100E4C66C, &type metadata for PeerCommunicationIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D38);
  }
  return result;
}

uint64_t sub_10072C7AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701736302, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4449656C707061 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C707061, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x706F724472656570 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706F724472656570, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000013)
  {
    v9 = 0x8000000100EE26A0;
    if (a2 == 0x8000000100EE26A0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EE26A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100EE26C0)
  {
    v10 = 0x8000000100EE26C0;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE26C0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    v11 = 0xE300000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x4449796C696D6166 && a2 == 0xE900000000000053)
  {
    swift_bridgeObjectRelease(0xE900000000000053);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449796C696D6166, 0xE900000000000053, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10072CA70(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6E69616D6F64 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69616D6F64, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    swift_bridgeObjectRelease(0xEA00000000007265);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10072CB64(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x44495344746C61 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x44495344746C61, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    v7 = 0xEB000000006E6F69;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC2AE0)
  {
    swift_bridgeObjectRelease(0x8000000100EC2AE0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10072CCCC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x74616E6974736564 && a2 == 0xEB000000006E6F69)
  {
    v5 = 0xEB000000006E6F69;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC2AE0)
  {
    swift_bridgeObjectRelease(0x8000000100EC2AE0);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC2AE0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for VersionNumber()
{
  return &type metadata for VersionNumber;
}

uint64_t sub_10072CDE0()
{
  Swift::String v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  uint64_t v7;

  v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v5 = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t sub_10072CEBC(uint64_t a1)
{
  Data._Representation.subscript.setter(a1 >> 8, 3);
  Data._Representation.subscript.setter(a1, 2);
  Data._Representation.subscript.setter(WORD1(a1), 1);
  Data._Representation.subscript.setter(BYTE3(a1), 0);
  return 0;
}

uint64_t sub_10072CF40(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v5 = sub_10001A9A8(&qword_101105D68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10072DDCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for VersionNumber.CodingKeys, &type metadata for VersionNumber.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v16, v5);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v15, v5);
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE3(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10072D07C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x726F6E696DLL;
  if (*v0 != 1)
    v1 = 0x6E6F697369766572;
  if (*v0)
    return v1;
  else
    return 0x726F6A616DLL;
}

uint64_t sub_10072D0D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10072DB0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10072D0F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072DDCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072D11C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10072DDCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10072D144@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10072DC50(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

uint64_t sub_10072D17C(_QWORD *a1)
{
  unsigned int *v1;

  return sub_10072CF40(a1, *v1);
}

uint64_t sub_10072D194(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;
  unsigned int v9;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 1;
  v5 = *((unsigned __int8 *)a1 + 2);
  v6 = *((unsigned __int8 *)a2 + 2);
  v8 = v6 >= v5 && *((unsigned __int8 *)a1 + 3) < *((unsigned __int8 *)a2 + 3);
  v9 = v5 < v6 || v8;
  if (v3 < v2)
    return 0;
  else
    return v9;
}

uint64_t sub_10072D1E0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  if (v3 < v2)
    return 0;
  if (v2 < v3)
    return 1;
  v5 = *((unsigned __int8 *)a1 + 2);
  v6 = *((unsigned __int8 *)a2 + 2);
  v8 = v5 < v6 || *((unsigned __int8 *)a2 + 3) >= *((unsigned __int8 *)a1 + 3);
  return v6 >= v5 && v8;
}

uint64_t sub_10072D230(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  if (v2 < v3)
    return 0;
  if (v3 < v2)
    return 1;
  v5 = *((unsigned __int8 *)a1 + 2);
  v6 = *((unsigned __int8 *)a2 + 2);
  v8 = v6 < v5 || *((unsigned __int8 *)a1 + 3) >= *((unsigned __int8 *)a2 + 3);
  return v5 >= v6 && v8;
}

uint64_t sub_10072D280(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;
  unsigned int v9;

  v2 = *a1;
  v3 = *a2;
  if (v3 < v2)
    return 1;
  v5 = *((unsigned __int8 *)a1 + 2);
  v6 = *((unsigned __int8 *)a2 + 2);
  v8 = v5 >= v6 && *((unsigned __int8 *)a2 + 3) < *((unsigned __int8 *)a1 + 3);
  v9 = v6 < v5 || v8;
  if (v2 < v3)
    return 0;
  else
    return v9;
}

uint64_t sub_10072D2CC()
{
  return sub_10072CDE0();
}

Swift::Int sub_10072D2D8()
{
  uint64_t v0;
  Swift::UInt16 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *(_WORD *)v0;
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10072D344()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = *(_BYTE *)(v0 + 2);
  v2 = *(_BYTE *)(v0 + 3);
  Hasher._combine(_:)(*(_WORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_10072D38C()
{
  uint64_t v0;
  Swift::UInt16 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *(_WORD *)v0;
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_10072D3F4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && *((unsigned __int8 *)a1 + 2) == *((unsigned __int8 *)a2 + 2)
      && *((unsigned __int8 *)a1 + 3) == *((unsigned __int8 *)a2 + 3);
}

unint64_t sub_10072D42C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_10072D700(*a1, a1[1]);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
  }
  return result;
}

unint64_t sub_10072D474()
{
  unint64_t result;

  result = qword_101105D40;
  if (!qword_101105D40)
  {
    result = swift_getWitnessTable(byte_100E4C9AC, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_101105D40);
  }
  return result;
}

unint64_t sub_10072D4BC()
{
  unint64_t result;

  result = qword_101105D48;
  if (!qword_101105D48)
  {
    result = swift_getWitnessTable(byte_100E4CA24, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_101105D48);
  }
  return result;
}

unint64_t sub_10072D504()
{
  unint64_t result;

  result = qword_101105D50;
  if (!qword_101105D50)
  {
    result = swift_getWitnessTable(byte_100E4C9E4, &type metadata for VersionNumber);
    atomic_store(result, (unint64_t *)&qword_101105D50);
  }
  return result;
}

void sub_10072D548(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_10072D58C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 v17;

  if (BYTE6(v0) == 4)
  {
    v2 = Data.subdata(in:)(0, 1, v1, v0);
    v4 = v3;
    v5 = Data.subdata(in:)(1, 2, v1, v0);
    v7 = v6;
    v8 = Data.subdata(in:)(2, 4, v1, v0);
    v10 = v9;
    v11 = Data.subscript.getter(1);
    v12 = Data.subscript.getter(0) | ((unint64_t)v11 << 8);
    v17 = Data.subscript.getter(0);
    v13 = Data.subscript.getter(0);
    sub_10001BC14(v1, v0);
    sub_10001BC14(v8, v10);
    sub_10001BC14(v5, v7);
    sub_10001BC14(v2, v4);
    v14 = 0;
    v15 = v12 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)v17 << 16) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)v13 << 24);
  }
  else
  {
    sub_10001BC14(v1, v0);
    v15 = 0;
    v14 = 1;
  }
  return v15 | ((unint64_t)v14 << 32);
}

unint64_t sub_10072D700(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 v23;
  int v24;
  unsigned __int8 v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v36 = a2;
  v34[0] = 46;
  v34[1] = 0xE100000000000000;
  v2 = sub_1000330C8();
  v3 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v34, &type metadata for String, &type metadata for String, v2, v2);
  swift_bridgeObjectRelease();
  v4 = v3[2];
  if ((v4 & 0x7FFFFFFFFFFFFFFELL) != 2)
    goto LABEL_64;
  v5 = v3[4];
  v6 = v3[5];
  v7 = HIBYTE(v6) & 0xF;
  v8 = v5 & 0xFFFFFFFFFFFFLL;
  if (!((v6 & 0x2000000000000000) != 0 ? HIBYTE(v6) & 0xF : v5 & 0xFFFFFFFFFFFFLL))
    goto LABEL_64;
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v3[5]);
    v12 = sub_100C71718(v5, v6, 10);
    swift_bridgeObjectRelease();
    if ((v12 & 0x10000) != 0)
      goto LABEL_64;
  }
  else if ((v6 & 0x2000000000000000) != 0)
  {
    v35 = v3[4];
    v36 = v6 & 0xFFFFFFFFFFFFFFLL;
    if (v5 == 43)
    {
      if (!v7)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_64;
      }
      if (v7 == 1)
        goto LABEL_64;
      v12 = (BYTE1(v5) - 48);
      if (v12 > 9)
        goto LABEL_64;
      if (v7 != 2)
      {
        if ((BYTE2(v5) - 48) > 9u)
          goto LABEL_64;
        LOWORD(v12) = 10 * v12 + (BYTE2(v5) - 48);
        v14 = v7 - 3;
        if (v14)
        {
          v15 = (unsigned __int8 *)&v35 + 3;
          while (1)
          {
            v16 = *v15 - 48;
            if (v16 > 9)
              goto LABEL_64;
            if (((10 * (unsigned __int16)v12) & 0xF0000) != 0)
              goto LABEL_64;
            v12 = (unsigned __int16)(10 * v12) + v16;
            if ((v12 & 0x10000) != 0)
              goto LABEL_64;
            v13 = 0;
            ++v15;
            if (!--v14)
              goto LABEL_11;
          }
        }
      }
    }
    else if (v5 == 45)
    {
      if (!v7)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      if (v7 == 1 || (BYTE1(v5) - 48) > 9u || (-(BYTE1(v5) - 48) & 0xFFFF0000) != 0)
        goto LABEL_64;
      if (v7 == 2)
      {
        LOWORD(v12) = -(BYTE1(v5) - 48);
      }
      else
      {
        if ((BYTE2(v5) - 48) > 9u)
          goto LABEL_64;
        if (((10 * (unsigned __int16)-(BYTE1(v5) - 48)) & 0xF0000) != 0)
          goto LABEL_64;
        v12 = (unsigned __int16)(-10 * (BYTE1(v5) - 48)) - (BYTE2(v5) - 48);
        if ((v12 & 0xFFFF0000) != 0)
          goto LABEL_64;
        v30 = v7 - 3;
        if (v30)
        {
          v31 = (unsigned __int8 *)&v35 + 3;
          while (1)
          {
            v32 = *v31 - 48;
            if (v32 > 9)
              goto LABEL_64;
            if (((10 * (unsigned __int16)v12) & 0xF0000) != 0)
              goto LABEL_64;
            v12 = (unsigned __int16)(10 * v12) - v32;
            if ((v12 & 0xFFFF0000) != 0)
              goto LABEL_64;
            v13 = 0;
            ++v31;
            if (!--v30)
              goto LABEL_11;
          }
        }
      }
    }
    else
    {
      if (!v7)
        goto LABEL_64;
      v12 = (v5 - 48);
      if (v12 > 9)
        goto LABEL_64;
      if (v7 != 1)
      {
        if ((BYTE1(v5) - 48) > 9u)
          goto LABEL_64;
        LOWORD(v12) = 10 * v12 + (BYTE1(v5) - 48);
        v27 = v7 - 2;
        if (v27)
        {
          v28 = (unsigned __int8 *)&v35 + 2;
          while (1)
          {
            v29 = *v28 - 48;
            if (v29 > 9)
              goto LABEL_64;
            if (((10 * (unsigned __int16)v12) & 0xF0000) != 0)
              goto LABEL_64;
            v12 = (unsigned __int16)(10 * v12) + v29;
            if ((v12 & 0x10000) != 0)
              goto LABEL_64;
            v13 = 0;
            ++v28;
            if (!--v27)
              goto LABEL_11;
          }
        }
      }
    }
  }
  else
  {
    if ((v5 & 0x1000000000000000) != 0)
      v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v3[4], v3[5]);
    v11 = sub_100C715E8(v10, v8, 10);
    LOWORD(v12) = v11;
    v13 = HIWORD(v11) & 1;
LABEL_11:
    if (v13)
      goto LABEL_64;
  }
  if (v3[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_69;
  }
  v17 = v3[6];
  v18 = v3[7];
  swift_bridgeObjectRetain(v18);
  v19 = sub_100C6F4E4(v17, v18);
  if ((v19 & 0x100) != 0)
  {
LABEL_64:
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }
  v20 = v19;
  if (v4 != 3)
  {
    swift_bridgeObjectRelease();
    v24 = 0;
    goto LABEL_44;
  }
  if (v3[2] < 3uLL)
    goto LABEL_71;
  v21 = v3[8];
  v22 = v3[9];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = sub_100C6F4E4(v21, v22);
  if ((v23 & 0x100) != 0)
  {
LABEL_65:
    v26 = 0;
    v25 = 1;
    goto LABEL_66;
  }
  v24 = v23;
LABEL_44:
  v25 = 0;
  v26 = (v24 << 24) | (unsigned __int16)v12 | ((unint64_t)v20 << 16);
LABEL_66:
  LOBYTE(v35) = v25;
  return v26 | ((unint64_t)v25 << 32);
}

uint64_t sub_10072DB0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x726F6A616DLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6A616DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726F6E696DLL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F6E696DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10072DC50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v3 = sub_10001A9A8(&qword_101105D58);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_10072DDCC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for VersionNumber.CodingKeys, &type metadata for VersionNumber.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v17 = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  v16 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  v15 = 2;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v11 << 16) | (v12 << 24) | v10;
}

unint64_t sub_10072DDCC()
{
  unint64_t result;

  result = qword_101105D60;
  if (!qword_101105D60)
  {
    result = swift_getWitnessTable(aI_30, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D60);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VersionNumber.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10072DE5C + 4 * byte_100E4C995[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10072DE90 + 4 * byte_100E4C990[v4]))();
}

uint64_t sub_10072DE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072DE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10072DEA0);
  return result;
}

uint64_t sub_10072DEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10072DEB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10072DEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072DEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VersionNumber.CodingKeys()
{
  return &type metadata for VersionNumber.CodingKeys;
}

unint64_t sub_10072DEE0()
{
  unint64_t result;

  result = qword_101105D70;
  if (!qword_101105D70)
  {
    result = swift_getWitnessTable(byte_100E4CC28, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D70);
  }
  return result;
}

unint64_t sub_10072DF28()
{
  unint64_t result;

  result = qword_101105D78;
  if (!qword_101105D78)
  {
    result = swift_getWitnessTable(byte_100E4CB98, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D78);
  }
  return result;
}

unint64_t sub_10072DF70()
{
  unint64_t result;

  result = qword_101105D80;
  if (!qword_101105D80)
  {
    result = swift_getWitnessTable(aI_31, &type metadata for VersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101105D80);
  }
  return result;
}

uint64_t sub_10072DFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101105D88);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101105D88);
  if (qword_1010E9EE8 != -1)
    swift_once(&qword_1010E9EE8, sub_10072F1BC);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B75B0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10072E044()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchQoS(0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[23];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 40);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v7, v8, &type metadata for () + 1, &type metadata for () + 1);
  }
  else
  {
    static DispatchQoS.background.getter(v4);
    v10 = swift_allocObject(&unk_10108DBE0, 24, 7);
    *(_QWORD *)(v10 + 16) = v2;
    v11 = swift_allocObject(&unk_10108DC08, 32, 7);
    *(_QWORD *)(v11 + 16) = v1;
    *(_QWORD *)(v11 + 24) = v2;
    v12 = type metadata accessor for XPCActivity();
    swift_allocObject(v12, 112, 7);
    swift_retain();
    v13 = sub_100734F68(0xD000000000000026, (void *)0x8000000100EE2740, (uint64_t)v6, (uint64_t)sub_10072F250, v10, (uint64_t)sub_10072F2AC, v11);
    swift_release();
    swift_release();
    v1[23] = v13;
  }
  return swift_release();
}

uint64_t sub_10072E1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t, __n128);
  __n128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  uint64_t v24;

  v6 = sub_10001A9A8(&qword_101105F10);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101109470);
  v22 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 192, v23, 0, 0);
  result = *(_QWORD *)(a2 + 192);
  v14 = *(_QWORD *)(result + 16);
  if (v14)
  {
    v20[2] = v3;
    v21 = v7;
    v15 = v6;
    v16 = result + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v17 = *(_QWORD *)(v22 + 72);
    v18 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
    v20[1] = result;
    v19 = swift_bridgeObjectRetain(result);
    do
    {
      v18(v12, v16, v10, v19);
      v24 = a3;
      swift_bridgeObjectRetain(a3);
      AsyncStream.Continuation.yield(_:)(&v24, v10);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v15);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v10);
      v16 += v17;
      --v14;
    }
    while (v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10072E348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_101109470);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = *(unsigned __int8 *)(v5 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_10108DC58, v12 + v6, v11 | 7);
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v13[v12], (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_101105F28, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_10072E490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;

  v5[5] = a4;
  v5[6] = a5;
  v7 = sub_10001A9A8(&qword_101109470);
  v5[7] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[8] = v8;
  v5[9] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10072E4F8, a4, 0);
}

uint64_t sub_10072E4F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 40);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 16))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v2 = (unint64_t *)(v1 + 192);
  swift_beginAccess(v1 + 192, v0 + 16, 33, 0);
  v3 = *(_QWORD *)(v1 + 192);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  *(_QWORD *)(v1 + 192) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v3 = sub_1007CA3C8(0, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v2 = v3;
  }
  v6 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  if (v6 >= v5 >> 1)
  {
    v3 = sub_1007CA3C8(v5 > 1, v6 + 1, 1, v3);
    *v2 = v3;
  }
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v6 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v6, v8, v9);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10072E60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_10072E624, a4, 0);
}

uint64_t sub_10072E624()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10072F96C();
  static NSFileManager.removeDirectory(url:)(v1 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory);
  v2 = (_QWORD *)swift_task_alloc(dword_101101F84);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_10072E6B8;
  return sub_100627790();
}

uint64_t sub_10072E6B8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10072E704()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10072FADC(v0 + 144);
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconKeyService()
{
  return objc_opt_self(_TtC12searchpartyd16BeaconKeyService);
}

uint64_t *assignWithCopy for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *assignWithTake for BeaconKeyService.KeyStreamChange(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyService.KeyStreamChange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyService.KeyStreamChange()
{
  return &type metadata for BeaconKeyService.KeyStreamChange;
}

uint64_t sub_10072E86C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10072E884, v0, 0);
}

void sub_10072E884()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 136))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_101101C04);
    *(_QWORD *)(v0 + 24) = v1;
    *v1 = v0;
    v1[1] = sub_10072E8D8;
    sub_1006274B8();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10072E8D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return swift_task_switch(sub_10072E92C, v1, 0);
}

uint64_t sub_10072E92C()
{
  uint64_t v0;

  sub_10072E044();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10072E95C(uint64_t a1)
{
  unint64_t result;

  result = sub_10072E980();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10072E980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101105EE8;
  if (!qword_101105EE8)
  {
    v1 = type metadata accessor for BeaconKeyService();
    result = swift_getWitnessTable(byte_100E4CD78, v1);
    atomic_store(result, &qword_101105EE8);
  }
  return result;
}

uint64_t sub_10072E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v6);
  v3[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_10072EA38, v2, 0);
}

void sub_10072EA38()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uid_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  unint64_t v32;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = (int *)v0[5];
    v3 = v0[6];
    sub_10009AAF4(0, v2, 0);
    v32 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v5 = v1 + v32;
    v6 = *(_QWORD *)(v3 + 72);
    do
    {
      v7 = v0[7];
      v8 = v0[8];
      sub_10072F9A8(v5, v7);
      v9 = getuid();
      sub_100A06500(v9);
      v10 = *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
      v11 = v7 + v10;
      v12 = v8 + v10;
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v11, v13);
      v14 = v4[5];
      v15 = v7 + v14;
      v16 = v8 + v14;
      v17 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, v15, v17);
      v18 = v4[6];
      v19 = *(_QWORD *)(v7 + v18);
      v20 = *(_QWORD *)(v7 + v18 + 8);
      v21 = *(_QWORD *)(v7 + v18 + 16);
      v22 = *(_QWORD *)(v7 + v18 + 24);
      v23 = *(_QWORD *)(v7 + v18 + 32);
      v24 = *(_QWORD *)(v7 + v18 + 40);
      v25 = *(_BYTE *)(v7 + v4[7]);
      v26 = (uint64_t *)(v8 + v18);
      *v26 = v19;
      v26[1] = v20;
      v26[2] = v21;
      v26[3] = v22;
      v26[4] = v23;
      v26[5] = v24;
      *(_BYTE *)(v8 + v4[7]) = v25;
      sub_10072F9EC(v19, v20, v21, v22, v23, v24);
      sub_10072FA44(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009AAF4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v28 = _swiftEmptyArrayStorage[2];
      v27 = _swiftEmptyArrayStorage[3];
      if (v28 >= v27 >> 1)
        sub_10009AAF4(v27 > 1, v28 + 1, 1);
      v29 = v0[8];
      _swiftEmptyArrayStorage[2] = v28 + 1;
      sub_10072FA80(v29, (uint64_t)_swiftEmptyArrayStorage + v32 + v28 * v6);
      v5 += v6;
      --v2;
    }
    while (v2);
  }
  v30 = *(_QWORD *)(v0[4] + 128);
  if (v30)
  {
    sub_100754748(v0[2], (uint64_t)_swiftEmptyArrayStorage, v30);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v0[4] + 136))
    {
      v31 = (uint64_t **)swift_task_alloc(dword_101101F64);
      v0[9] = (uint64_t)v31;
      *v31 = v0;
      v31[1] = (uint64_t *)sub_10072EC94;
      sub_100628748();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10072EC94()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10072ED10, *(_QWORD *)(v3 + 32), 0);
  v4 = *(_QWORD *)(v3 + 56);
  swift_task_dealloc(*(_QWORD *)(v3 + 64));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10072ED10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int8x16_t *v3;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  type metadata accessor for Transaction(0);
  v3 = (int8x16_t *)swift_task_alloc(32);
  v3[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  static Transaction.named<A>(_:with:)("BeaconKeyService.KeyStreamChange", 32, 2, sub_10072FAC4, v3, &type metadata for () + 1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10072EDBC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  Transaction.capture()();
  if (a3 == 6)
  {
    *(_QWORD *)(a4 + 184) = 0;
    swift_release();
  }
  else if (a3 == 2)
  {
    if (qword_1010E9EE0 != -1)
      swift_once(&qword_1010E9EE0, sub_10072DFB4);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_101105D88);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "reevaluateXPCActivity: XPC activity fired for BeaconKeyService", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    type metadata accessor for Transaction(0);
    v13 = swift_allocObject(&unk_10108DC30, 32, 7);
    *(_QWORD *)(v13 + 16) = a4;
    *(_QWORD *)(v13 + 24) = a5;
    swift_retain();
    static Transaction.asyncTask(name:block:)("reevaluateXPCActivity", 21, 2, &unk_101105EF8, v13);
    swift_release();
    sub_100732A0C();
  }
}

uint64_t sub_10072EF38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_task_switch(sub_10072EF50, 0, 0);
}

void sub_10072EF50()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 136))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_101101F64);
    *(_QWORD *)(v0 + 32) = v1;
    *v1 = v0;
    v1[1] = sub_10072EFA4;
    sub_100628748();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10072EFA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10072F010, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10072F010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9EE0 != -1)
    swift_once(&qword_1010E9EE0, sub_10072DFB4);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_101105D88);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "validateKeys error: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10072F1BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B75B0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B75B0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100E4CCE0);
}

uint64_t sub_10072F240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10072F250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[5];

  sub_10072F4E8(a1, v4);
  return sub_1004E54BC((uint64_t)v4, a2);
}

uint64_t sub_10072F288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10072F2AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_10072EDBC(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_10072F2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101105EF4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004C28;
  v3[3] = v2;
  return swift_task_switch(sub_10072EF50, 0, 0);
}

uint64_t sub_10072F314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = v2;
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 112) = 0xD000000000000010;
  *(_QWORD *)(v2 + 120) = 0x8000000100E4CCE0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 192) = _swiftEmptyArrayStorage;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)&v17 = 0x7365547265646E75;
  *((_QWORD *)&v17 + 1) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v14, &v17, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  v7 = (_OWORD *)(v2 + 144);
  if (LOBYTE(v14[0]) == 1)
  {
    result = sub_10072FB1C(a1, (uint64_t)v7);
  }
  else
  {
    *(_QWORD *)(v2 + 176) = 0;
    *v7 = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
  }
  *(_QWORD *)(v2 + 128) = a2;
  if (a2)
  {
    sub_10072FB1C(a1, (uint64_t)v14);
    v8 = v15;
    if (v15)
    {
      v9 = v16;
      v10 = sub_10001AA44(v14, v15);
      *((_QWORD *)&v18 + 1) = v8;
      v19 = *(_QWORD *)(v9 + 8);
      v11 = sub_100018F08(&v17);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v11, v10, v8);
      swift_retain_n(a2, 2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    }
    else
    {
      swift_retain_n(a2, 2);
      sub_10072FADC((uint64_t)v14);
      v17 = 0u;
      v18 = 0u;
      v19 = 0;
    }
    v12 = type metadata accessor for BeaconKeyServiceBuilder(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v13 = sub_1006272F4(a2, (uint64_t)&v17);
    sub_10072FADC(a1);
    *(_QWORD *)(v3 + 136) = v13;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10072F4E8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  uint64_t v38[5];

  sub_1004E54BC(a1, (uint64_t)v37);
  v4 = v37[0];
  v34 = v37[2];
  v5 = v37[4];
  v32 = v37[1];
  v33 = v37[3];
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v6 = (uint64_t)qword_1011B7000;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v7 = (void *)sub_100C1B0B8(v38[0]);
  swift_bridgeObjectRelease();
  v8 = SPServiceStateEnabled;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  if (v9 == v12 && v11 == v13)
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      if (qword_1010E9EE0 != -1)
        swift_once(&qword_1010E9EE0, sub_10072DFB4);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10001A9E8(v16, (uint64_t)qword_101105D88);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (!os_log_type_enabled(v18, v19))
      {
        v21 = 0;
        v22 = 0;
        v6 = 0;
        v5 = 0;
        v4 = 2;
        goto LABEL_27;
      }
      v4 = 2;
      v20 = swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "BeaconKeyService unregistering XPC Activity: service is disabled.", (uint8_t *)v20, 2u);
      v21 = 0;
      v22 = 0;
      v6 = 0;
      v5 = 0;
      goto LABEL_23;
    }
  }
  sub_1004E54BC(a1, (uint64_t)v38);
  if (LOBYTE(v38[0]) == 2)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v23 = sub_100C1B77C(v35);
    v22 = 60 * v23;
    if ((unsigned __int128)(v23 * (__int128)60) >> 64 == (60 * v23) >> 63)
    {
      v24 = sub_100C1B790(v35);
      swift_bridgeObjectRelease();
      v6 = 60 * v24;
      if ((unsigned __int128)(v24 * (__int128)60) >> 64 == (60 * v24) >> 63)
      {
        if (qword_1010E9EE0 == -1)
        {
LABEL_17:
          v25 = type metadata accessor for Logger(0);
          v26 = sub_10001A9E8(v25, (uint64_t)qword_101105D88);
          v18 = Logger.logObject.getter(v26);
          v27 = static os_log_type_t.default.getter(v18);
          if (!os_log_type_enabled(v18, v27))
          {
            v5 = 7232;
            v21 = 3600;
            v4 = 257;
            goto LABEL_27;
          }
          v20 = swift_slowAlloc(32, -1);
          *(_DWORD *)v20 = 134218496;
          v35 = 3600;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 4, v20 + 12);
          *(_WORD *)(v20 + 12) = 2048;
          v35 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 14, v20 + 22);
          *(_WORD *)(v20 + 22) = 2048;
          v35 = v6;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v20 + 24, v20 + 32);
          v28 = v27;
          v21 = 3600;
          _os_log_impl((void *)&_mh_execute_header, v18, v28, "BeaconKeyService XPC criteria: delay %lld, gracePeriod %lld, interval %lld", (uint8_t *)v20, 0x20u);
          v5 = 7232;
          v4 = 257;
          goto LABEL_23;
        }
LABEL_30:
        swift_once(&qword_1010E9EE0, sub_10072DFB4);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  if (qword_1010E9EE0 != -1)
    swift_once(&qword_1010E9EE0, sub_10072DFB4);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10001A9E8(v29, (uint64_t)qword_101105D88);
  v18 = Logger.logObject.getter(v30);
  v31 = static os_log_type_t.default.getter(v18);
  v6 = v33;
  v22 = v34;
  if (!os_log_type_enabled(v18, v31))
  {
    v21 = v32;
    goto LABEL_27;
  }
  v20 = swift_slowAlloc(2, -1);
  *(_WORD *)v20 = 0;
  _os_log_impl((void *)&_mh_execute_header, v18, v31, "BeaconKeyService retaining existing XPCActivity criteria", (uint8_t *)v20, 2u);
  v21 = v32;
LABEL_23:
  swift_slowDealloc(v20, -1, -1);
LABEL_27:

  *a2 = v4;
  a2[1] = v21;
  a2[2] = v22;
  a2[3] = v6;
  a2[4] = v5;
}

unint64_t sub_10072F96C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F4AC0;
  if (!qword_1010F4AC0)
  {
    v1 = objc_opt_self(NSFileManager);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010F4AC0);
  }
  return result;
}

uint64_t sub_10072F9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10072F9EC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BBBC(result, a2);
    sub_10001BBBC(a3, a4);
    return sub_10005CB9C(a5, a6);
  }
  return result;
}

uint64_t sub_10072FA44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10072FA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10072FAC4(uint64_t a1)
{
  uint64_t v1;

  return sub_10072E1C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10072FADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_101105F18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10072FB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101105F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10072FB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101109470);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10072FBE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101109470) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_101105F24);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10072E490(a1, v5, v6, v7, v8);
}

uint64_t storeEnumTagSinglePayload for BeaconKeyService.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10072FCC8 + 4 * byte_100E4CCA5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10072FCFC + 4 * byte_100E4CCA0[v4]))();
}

uint64_t sub_10072FCFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072FD04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10072FD0CLL);
  return result;
}

uint64_t sub_10072FD18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10072FD20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10072FD24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10072FD2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyService.Error()
{
  return &type metadata for BeaconKeyService.Error;
}

unint64_t sub_10072FD4C()
{
  unint64_t result;

  result = qword_101105F30;
  if (!qword_101105F30)
  {
    result = swift_getWitnessTable(aQ_31, &type metadata for BeaconKeyService.Error);
    atomic_store(result, (unint64_t *)&qword_101105F30);
  }
  return result;
}

uint64_t sub_10072FD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10072FDA0);
}

uint64_t sub_10072FDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10072FDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10072FDE8);
}

uint64_t sub_10072FDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PeerTrustAckEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_101105F90, (uint64_t)&nominal type descriptor for PeerTrustAckEnvelopeV1);
}

uint64_t *sub_10072FE3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (char *)a2 + v9;
    v15 = *(uint64_t *)((char *)a2 + v9);
    v16 = *((_QWORD *)v14 + 1);
    swift_bridgeObjectRetain(v12);
    sub_10001BBBC(v15, v16);
    *v13 = v15;
    v13[1] = v16;
  }
  return a1;
}

uint64_t sub_10072FEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_10072FF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (uint64_t *)(a1 + v8);
  v13 = *(_QWORD *)(a2 + v8);
  v14 = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain(v11);
  sub_10001BBBC(v13, v14);
  *v12 = v13;
  v12[1] = v14;
  return a1;
}

uint64_t sub_10072FFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_10001BC14(v16, v17);
  return a1;
}

uint64_t sub_10073006C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10001BC14(v13, v14);
  return a1;
}

uint64_t sub_1007300F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007300FC);
}

uint64_t sub_1007300FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10073017C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100730188);
}

uint64_t sub_100730188(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for PeerTrustEnvelopeV1(uint64_t a1)
{
  return sub_10001B630(a1, qword_101106020, (uint64_t)&nominal type descriptor for PeerTrustEnvelopeV1);
}

uint64_t sub_100730218(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E4CEA8;
    v4[2] = &unk_100E4CEC0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100730294(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  __int128 v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101106088);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100730C68();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PeerTrustEnvelopeV1.CodingKeys, &type metadata for PeerTrustEnvelopeV1.CodingKeys, v11, v9, v10);
  LOBYTE(v22) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    v14 = type metadata accessor for PeerTrustEnvelopeV1(0);
    v15 = (uint64_t *)(v3 + *(int *)(v14 + 20));
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    v22 = *(_OWORD *)(v3 + *(int *)(v14 + 24));
    v21 = 2;
    v18 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for SharedSecretKey, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100730428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;

  v25 = a2;
  v3 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v28 = (uint64_t *)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_10001A9A8(&qword_101106078);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PeerTrustEnvelopeV1(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100730C68();
  v27 = v7;
  v14 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PeerTrustEnvelopeV1.CodingKeys, &type metadata for PeerTrustEnvelopeV1.CodingKeys, v13, v11, v12);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v30 = v5;
  v15 = (uint64_t)v10;
  v16 = v26;
  LOBYTE(v31) = 0;
  v17 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v29;
  v19 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v3, &v31, v29, v3, v17);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v16 + 32))(v15, v28, v3);
  LOBYTE(v31) = 1;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v18);
  v21 = (uint64_t *)(v15 + *(int *)(v8 + 20));
  *v21 = v20;
  v21[1] = v22;
  v32 = 2;
  v23 = sub_1001EC3A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for SharedSecretKey, &v32, v29, &type metadata for SharedSecretKey, v23);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v29);
  *(_OWORD *)(v15 + *(int *)(v8 + 24)) = v31;
  sub_100730CAC(v15, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_100730CF0(v15);
}

uint64_t sub_1007306F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_101106060);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100730BE0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PeerTrustAckEnvelopeV1.CodingKeys, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_100730C24((uint64_t)v11, v20);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1007308B0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0x6553646572616873;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_10073091C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100731044(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100730940(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100730C68();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100730968(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100730C68();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100730990@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100730428(a1, a2);
}

uint64_t sub_1007309A4(_QWORD *a1)
{
  return sub_100730294(a1);
}

uint64_t sub_1007309B8()
{
  return 0x696669746E656469;
}

uint64_t sub_1007309D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease(0xEA00000000007265);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100730A74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100730BE0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100730A9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100730BE0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100730AC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1007306F4(a1, a2);
}

uint64_t sub_100730AD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101106070);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100730BE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PeerTrustAckEnvelopeV1.CodingKeys, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100730BE0()
{
  unint64_t result;

  result = qword_101106068;
  if (!qword_101106068)
  {
    result = swift_getWitnessTable(byte_100E4D144, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106068);
  }
  return result;
}

uint64_t sub_100730C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerTrustAckEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100730C68()
{
  unint64_t result;

  result = qword_101106080;
  if (!qword_101106080)
  {
    result = swift_getWitnessTable(a5_12, &type metadata for PeerTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106080);
  }
  return result;
}

uint64_t sub_100730CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100730CF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PeerTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PeerTrustEnvelopeV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100730D78 + 4 * byte_100E4CE55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100730DAC + 4 * byte_100E4CE50[v4]))();
}

uint64_t sub_100730DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100730DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100730DBCLL);
  return result;
}

uint64_t sub_100730DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100730DD0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100730DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100730DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustEnvelopeV1.CodingKeys()
{
  return &type metadata for PeerTrustEnvelopeV1.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PeerTrustAckEnvelopeV1.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100730E38 + 4 * byte_100E4CE5A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100730E58 + 4 * byte_100E4CE5F[v4]))();
}

_BYTE *sub_100730E38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100730E58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100730E60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100730E68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100730E70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100730E78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustAckEnvelopeV1.CodingKeys()
{
  return &type metadata for PeerTrustAckEnvelopeV1.CodingKeys;
}

unint64_t sub_100730E98()
{
  unint64_t result;

  result = qword_101106090;
  if (!qword_101106090)
  {
    result = swift_getWitnessTable(byte_100E4D014, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106090);
  }
  return result;
}

unint64_t sub_100730EE0()
{
  unint64_t result;

  result = qword_101106098;
  if (!qword_101106098)
  {
    result = swift_getWitnessTable(aM_30, &type metadata for PeerTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106098);
  }
  return result;
}

unint64_t sub_100730F28()
{
  unint64_t result;

  result = qword_1011060A0;
  if (!qword_1011060A0)
  {
    result = swift_getWitnessTable(byte_100E4D03C, &type metadata for PeerTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011060A0);
  }
  return result;
}

unint64_t sub_100730F70()
{
  unint64_t result;

  result = qword_1011060A8;
  if (!qword_1011060A8)
  {
    result = swift_getWitnessTable(asc_100E4D064, &type metadata for PeerTrustEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011060A8);
  }
  return result;
}

unint64_t sub_100730FB8()
{
  unint64_t result;

  result = qword_1011060B0;
  if (!qword_1011060B0)
  {
    result = swift_getWitnessTable(aM_31, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011060B0);
  }
  return result;
}

unint64_t sub_100731000()
{
  unint64_t result;

  result = qword_1011060B8;
  if (!qword_1011060B8)
  {
    result = swift_getWitnessTable(a5_13, &type metadata for PeerTrustAckEnvelopeV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011060B8);
  }
  return result;
}

uint64_t sub_100731044(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100ECB8D0;
    if (a2 == 0x8000000100ECB8D0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECB8D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease(0xEC00000074657263);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

__n128 sub_1007311B4@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1007315B0(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

void sub_1007311FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100731258()
{
  uint64_t v0;

  if (BYTE6(v0) == 32)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1007314D0);
}

ValueMetadata *type metadata accessor for AirPodsLEInitiatePairingCommandPayload()
{
  return &type metadata for AirPodsLEInitiatePairingCommandPayload;
}

unint64_t sub_100731540(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10073156C();
  result = sub_10024D594();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10073156C()
{
  unint64_t result;

  result = qword_1011060C0;
  if (!qword_1011060C0)
  {
    result = swift_getWitnessTable(aA_39, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1011060C0);
  }
  return result;
}

uint64_t sub_1007315B0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v25, v5, v6);
  v7 = v26;
  v8 = v27;
  sub_10009F5D0((uint64_t)v25, v26);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v26;
    v14 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113, v13, v14);
    v33 = v15;
    v17 = v26;
    v16 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v17, v16);
    v18 = v26;
    v19 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(96, v18, v19);
    v20 = v26;
    v21 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v20, v21);
    sub_1007311FC(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v23 = v31;
    a2[2] = v30;
    a2[3] = v23;
    a2[4] = v32;
    v24 = v29;
    *a2 = v28;
    a2[1] = v24;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse()
{
  return &type metadata for FetchDevicesResponse;
}

uint64_t sub_1007317C8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1011060F0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100731D78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchDevicesResponse.CodingKeys, &type metadata for FetchDevicesResponse.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1011060D8);
  v12 = sub_100731E00(&qword_1011060F8, (uint64_t (*)(void))sub_100731E68, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1007318E4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v17 = a4;
  v18 = a5;
  v9 = sub_10001A9A8(&qword_101106130);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_1007322B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchDevicesResponse.Device.CodingKeys, &type metadata for FetchDevicesResponse.Device.CodingKeys, v15, v14, v13);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v20, v9);
  if (!v5)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v19, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100731A0C()
{
  return 0x73656369766564;
}

uint64_t sub_100731A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100731AB8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100731AE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100731D78();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100731B08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100731C34(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100731B30(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1007317C8(a1, *v1);
}

uint64_t sub_100731B48()
{
  _BYTE *v0;

  if (*v0)
    return 1684628597;
  else
    return 0x444955556162;
}

uint64_t sub_100731B78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100732030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100731B9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007322B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100731BC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007322B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100731BEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100732108(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100731C18(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1007318E4(a1, *v1, v1[1], v1[2], v1[3]);
}

_QWORD *sub_100731C34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_1011060C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_100731D78();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchDevicesResponse.CodingKeys, &type metadata for FetchDevicesResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1011060D8);
    v12 = sub_100731E00(&qword_1011060E0, (uint64_t (*)(void))sub_100731DBC, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100731D78()
{
  unint64_t result;

  result = qword_1011060D0;
  if (!qword_1011060D0)
  {
    result = swift_getWitnessTable(byte_100E4D3E4, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011060D0);
  }
  return result;
}

unint64_t sub_100731DBC()
{
  unint64_t result;

  result = qword_1011060E8;
  if (!qword_1011060E8)
  {
    result = swift_getWitnessTable(aM_32, &type metadata for FetchDevicesResponse.Device);
    atomic_store(result, (unint64_t *)&qword_1011060E8);
  }
  return result;
}

uint64_t sub_100731E00(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1011060D8);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100731E68()
{
  unint64_t result;

  result = qword_101106100;
  if (!qword_101106100)
  {
    result = swift_getWitnessTable(byte_100E4D394, &type metadata for FetchDevicesResponse.Device);
    atomic_store(result, (unint64_t *)&qword_101106100);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100731EEC + 4 * byte_100E4D240[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100731F0C + 4 * byte_100E4D245[v4]))();
}

_BYTE *sub_100731EEC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100731F0C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100731F14(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100731F1C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100731F24(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100731F2C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device()
{
  return &type metadata for FetchDevicesResponse.Device;
}

unint64_t sub_100731F5C()
{
  unint64_t result;

  result = qword_101106108;
  if (!qword_101106108)
  {
    result = swift_getWitnessTable(byte_100E4D36C, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106108);
  }
  return result;
}

unint64_t sub_100731FA4()
{
  unint64_t result;

  result = qword_101106110;
  if (!qword_101106110)
  {
    result = swift_getWitnessTable(asc_100E4D2DC, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106110);
  }
  return result;
}

unint64_t sub_100731FEC()
{
  unint64_t result;

  result = qword_101106118;
  if (!qword_101106118)
  {
    result = swift_getWitnessTable(aE_37, &type metadata for FetchDevicesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106118);
  }
  return result;
}

uint64_t sub_100732030(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x444955556162 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444955556162, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1684628597, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100732108(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v3 = sub_10001A9A8(&qword_101106120);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1007322B4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchDevicesResponse.Device.CodingKeys, &type metadata for FetchDevicesResponse.Device.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v16 = 0;
    v8 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    v15 = 1;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v13);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1007322B4()
{
  unint64_t result;

  result = qword_101106128;
  if (!qword_101106128)
  {
    result = swift_getWitnessTable(byte_100E4D4EC, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106128);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesResponse.Device.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100732344 + 4 * byte_100E4D24F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100732378 + 4 * byte_100E4D24A[v4]))();
}

uint64_t sub_100732378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100732380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100732388);
  return result;
}

uint64_t sub_100732394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10073239CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007323A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007323A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesResponse.Device.CodingKeys()
{
  return &type metadata for FetchDevicesResponse.Device.CodingKeys;
}

unint64_t sub_1007323C8()
{
  unint64_t result;

  result = qword_101106138;
  if (!qword_101106138)
  {
    result = swift_getWitnessTable(byte_100E4D4C4, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106138);
  }
  return result;
}

unint64_t sub_100732410()
{
  unint64_t result;

  result = qword_101106140;
  if (!qword_101106140)
  {
    result = swift_getWitnessTable(byte_100E4D434, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106140);
  }
  return result;
}

unint64_t sub_100732458()
{
  unint64_t result;

  result = qword_101106148;
  if (!qword_101106148)
  {
    result = swift_getWitnessTable(byte_100E4D45C, &type metadata for FetchDevicesResponse.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106148);
  }
  return result;
}

ValueMetadata *type metadata accessor for PowerStateMonitoriOS()
{
  return &type metadata for PowerStateMonitoriOS;
}

uint64_t sub_1007324AC()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x7669746341435058, 0xEB00000000797469);
  qword_1011B75C8 = result;
  return result;
}

uint64_t sub_100732520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;

  v1 = type metadata accessor for XPCActivity();
  v3 = sub_100006C64(&qword_101106360, v2, (uint64_t (*)(uint64_t))type metadata accessor for XPCActivity, (uint64_t)&unk_100E4D768);
  v4._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter(v1, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter(v1, v3);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 23328;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v9 = *(_QWORD *)(v0 + 24);
  v8 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain(v8);
  v10._countAndFlagsBits = v9;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 15965;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  return 60;
}

uint64_t sub_10073262C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;

  v2 = String.utf8CString.getter(a1[3], a1[4]);
  xpc_activity_unregister((const char *)(v2 + 32));
  swift_release(v2);
  v3 = a1[12];
  v4 = a1[13];
  a1[12] = 0;
  a1[13] = 0;
  sub_10001D8A8(v3, v4);
  v5 = swift_unknownObjectWeakAssign(a1 + 10, 0);
  v6 = static os_log_type_t.default.getter(v5);
  if (qword_1010E9EF0 != -1)
    swift_once(&qword_1010E9EF0, sub_1007324AC);
  v7 = qword_1011B75C8;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v15 = a1;
  v10 = type metadata accessor for XPCActivity();
  swift_retain(a1);
  v11 = String.init<A>(describing:)(&v15, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "%{public}@: Unregistered criteria", 33, 2, v9);
  return swift_bridgeObjectRelease(v9);
}

uint64_t sub_100732768(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _xpc_activity_s *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _xpc_activity_s *v24;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010E9EF0 != -1)
    swift_once(&qword_1010E9EF0, sub_1007324AC);
  v3 = qword_1011B75C8;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v24 = (_xpc_activity_s *)a1;
  v6 = type metadata accessor for XPCActivity();
  swift_retain();
  v7 = String.init<A>(describing:)(&v24, v6);
  v9 = v8;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v10 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "%{public}@: updateCriteria called on XPCActivity", 48, 2, v5);
  swift_bridgeObjectRelease();
  v11 = sub_10001A9A8((uint64_t *)&unk_101106300);
  v12 = OS_dispatch_queue.sync<A>(execute:)(sub_100735214, a1, v11);
  v13 = v24;
  if (v24)
  {
    sub_1007330EC(v24);
    return swift_unknownObjectRelease(v13);
  }
  else
  {
    v15 = *(unsigned __int8 *)(a1 + 88);
    v16 = static os_log_type_t.default.getter(v12);
    v17 = qword_1011B75C8;
    v18 = swift_allocObject(v4, 112, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
    v24 = (_xpc_activity_s *)a1;
    swift_retain();
    v19 = String.init<A>(describing:)(&v24, v6);
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = v10;
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v20;
    v22 = *(_QWORD *)(a1 + 24);
    v21 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(v18 + 96) = &type metadata for String;
    *(_QWORD *)(v18 + 104) = v10;
    *(_QWORD *)(v18 + 72) = v22;
    *(_QWORD *)(v18 + 80) = v21;
    *(_QWORD *)&v23 = swift_bridgeObjectRetain(v21).n128_u64[0];
    if (v15 == 1)
    {
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "%{public}@: No current activity -- re-registering: %{public}@", 61, 2, v18, v23);
      swift_bridgeObjectRelease();
      return sub_100732B94();
    }
    else
    {
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "%{public}@: No current activity -- hasn't checked in yet: %{public}@", 68, 2, v18, v23);
      return swift_bridgeObjectRelease();
    }
  }
}

BOOL sub_1007329F0()
{
  return sub_100732A28((uint64_t)sub_1007362D8, 3, "%{public}@: defer called on invalidated XPCActivity", 51);
}

BOOL sub_100732A0C()
{
  return sub_100732A28((uint64_t)sub_1007362D8, 5, "%{public}@: done called on invalidated XPCActivity", 50);
}

BOOL sub_100732A28(uint64_t a1, xpc_activity_state_t a2, const char *a3, uint64_t a4)
{
  _xpc_activity_s *v4;
  _xpc_activity_s *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  xpc_activity_t activity;

  v9 = v4;
  v10 = sub_10001A9A8((uint64_t *)&unk_101106300);
  v11 = OS_dispatch_queue.sync<A>(execute:)(a1, v4, v10);
  if (activity)
  {
    v12 = xpc_activity_set_state(activity, a2);
    swift_unknownObjectRelease(activity);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(v11);
    if (qword_1010E9EF0 != -1)
      swift_once(&qword_1010E9EF0, sub_1007324AC);
    v14 = qword_1011B75C8;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    activity = v9;
    v17 = type metadata accessor for XPCActivity();
    swift_retain(v9);
    v18 = String.init<A>(describing:)(&activity, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10001AA00();
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, a3, a4, 2, v16);
    swift_bridgeObjectRelease(v16);
    return 0;
  }
  return v12;
}

uint64_t sub_100732B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t aBlock;
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  aBlock = 0x7365547265646E75;
  v8 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v13, &aBlock, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease(v8);
  if ((v13 & 1) == 0)
  {
    v3 = *(NSObject **)(v0 + 16);
    v4 = swift_allocObject(&unk_10108E4E8, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_100735DFC;
    *(_QWORD *)(v4 + 24) = v1;
    v11 = sub_10005CBA4;
    v12 = v4;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v8 = 1107296256;
    v9 = sub_10001D8B8;
    v10 = &unk_10108E500;
    v5 = _Block_copy(&aBlock);
    v6 = v12;
    swift_retain(v1);
    swift_retain(v4);
    swift_release(v6);
    dispatch_sync(v3, v5);
    _Block_release(v5);
    LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 90, 147, 20, 1);
    swift_release(v1);
    result = swift_release(v4);
    if ((v3 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_100732D1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  uint64_t v12;

  v2 = swift_allocObject(&unk_10108E538, 24, 7);
  swift_weakInit(v2 + 16, a1);
  v3 = a1[12];
  v4 = a1[13];
  a1[12] = sub_100735E38;
  a1[13] = v2;
  swift_retain(v2);
  sub_10001D8A8(v3, v4);
  v6 = a1[3];
  v5 = a1[4];
  v11[4] = sub_100735E38;
  v12 = v2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100BFAAA0;
  v11[3] = &unk_10108E550;
  v7 = _Block_copy(v11);
  v8 = v12;
  swift_retain(v2);
  swift_release(v8);
  v9 = String.utf8CString.getter(v6, v5);
  xpc_activity_register((const char *)(v9 + 32), XPC_ACTIVITY_CHECK_IN, v7);
  swift_release(v9);
  _Block_release(v7);
  return swift_release(v2);
}

uint64_t sub_100732E30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v6);
    v7[2] = a1;
    v7[3] = v5;
    static Transaction.named<A>(_:with:)("XPCActivity", 11, 2, sub_100735E40, v7, (char *)&type metadata for () + 8);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100732EF0(uint64_t a1, xpc_activity_t activity, _xpc_activity_s *a3)
{
  xpc_activity_state_t state;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  unsigned int v24;
  uint64_t v25;
  xpc_activity_t v26;

  v25 = a1;
  state = xpc_activity_get_state(activity);
  v6 = sub_1007356EC(state);
  v24 = static os_log_type_t.default.getter(v6);
  if (qword_1010E9EF0 != -1)
    swift_once(&qword_1010E9EF0, sub_1007324AC);
  v7 = qword_1011B75C8;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 152, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E221E0;
  v26 = a3;
  v10 = type metadata accessor for XPCActivity();
  swift_retain(a3);
  v11 = String.init<A>(describing:)(&v26, v10);
  v13 = v12;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v9 + 64) = v14;
  *(_QWORD *)(v9 + 32) = v11;
  *(_QWORD *)(v9 + 40) = v13;
  v26 = activity;
  swift_unknownObjectRetain(activity);
  v15 = sub_10001A9A8(&qword_101106358);
  v16 = String.init<A>(describing:)(&v26, v15);
  *(_QWORD *)(v9 + 96) = &type metadata for String;
  *(_QWORD *)(v9 + 104) = v14;
  *(_QWORD *)(v9 + 72) = v16;
  *(_QWORD *)(v9 + 80) = v17;
  LOBYTE(v26) = v6;
  v18 = String.init<A>(describing:)(&v26, &type metadata for XPCActivity.State);
  *(_QWORD *)(v9 + 136) = &type metadata for String;
  *(_QWORD *)(v9 + 144) = v14;
  *(_QWORD *)(v9 + 112) = v18;
  *(_QWORD *)(v9 + 120) = v19;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v7, "%{public}@: activityHandler() for %{public}@ -- state: %{public}@", 65, 2, v9);
  v20 = swift_bridgeObjectRelease(v9);
  if (!(_BYTE)v6)
  {
    __chkstk_darwin(v20);
    v23[2] = a3;
    v23[3] = activity;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100735E58, v23, v21, (char *)&type metadata for () + 8, &type metadata for XPCActivity.State);
    v6 = v26;
  }
  return (*((uint64_t (**)(_xpc_activity_s *, uint64_t, unint64_t))a3 + 8))(a3, v25, v6);
}

unint64_t sub_1007330EC(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _xpc_activity_s *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  void *v7;
  void (*v8)(_QWORD *__return_ptr, _OWORD *);
  uint64_t v9;
  NSObject *v10;
  void *v11;
  _xpc_activity_s *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  xpc_object_t v26;
  xpc_activity_state_t state;
  NSObject *v29;
  void *v30;
  _xpc_activity_s *v31;
  _BOOL8 v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  uint64_t v64;
  unsigned int v65;
  __int128 v66;
  __int128 v67;
  uint64_t (*v68)();
  __int128 aBlock;
  __int128 v70;
  uint64_t (*v71)();
  _xpc_activity_s *v72;
  uint64_t v73[5];
  _QWORD v74[5];
  __int128 v75;
  __int128 v76;
  uint64_t (*v77)();
  _OWORD v78[2];
  uint64_t v79;
  _OWORD v80[4];

  v3 = v1;
  v4 = a1;
  v5 = xpc_activity_copy_criteria(a1);
  if (!v5)
    goto LABEL_4;
  v6 = v5;
  v7 = (void *)swift_unknownObjectRetain(v5);
  sub_10073557C(v7, v73);
  sub_1004E54BC((uint64_t)v73, (uint64_t)v78);
  if (LOBYTE(v78[0]) != 2)
  {
    v80[0] = v78[0];
    v80[1] = v78[1];
    *(_QWORD *)&v80[2] = v79;
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))(v1 + 48))(v74, v73);
    sub_1004E54BC((uint64_t)v74, (uint64_t)&v75);
    if (v75 == 2)
    {
      v29 = *(NSObject **)(v1 + 16);
      v4 = (_xpc_activity_s *)swift_allocObject(&unk_10108E498, 32, 7);
      *((_QWORD *)v4 + 2) = sub_1003D8448;
      *((_QWORD *)v4 + 3) = v3;
      v71 = sub_10005CBA4;
      v72 = v4;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v70 = sub_10001D8B8;
      *((_QWORD *)&v70 + 1) = &unk_10108E4B0;
      v30 = _Block_copy(&aBlock);
      v31 = v72;
      swift_retain(v3);
      swift_retain(v4);
      swift_release(v31);
      dispatch_sync(v29, v30);
      _Block_release(v30);
      LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v4, "", 90, 53, 20, 1);
      swift_unknownObjectRelease(v6);
      swift_release(v3);
      swift_release(v4);
      if ((v29 & 1) == 0)
        return 6;
      __break(1u);
    }
    else
    {
      aBlock = v75;
      v70 = v76;
      v71 = v77;
      v32 = sub_100734E48((uint64_t)&aBlock, (uint64_t)v80);
      v33 = v32;
      v34 = static os_log_type_t.default.getter(v32);
      v2 = v34;
      if (!v33)
      {
        v65 = v34;
        if (qword_1010E9EF0 != -1)
          swift_once(&qword_1010E9EF0, sub_1007324AC);
        v64 = qword_1011B75C8;
        v45 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v46 = swift_allocObject(v45, 112, 7);
        *(_OWORD *)(v46 + 16) = xmmword_100E22B10;
        *(_QWORD *)&v66 = v1;
        v47 = type metadata accessor for XPCActivity();
        swift_retain(v1);
        v48 = String.init<A>(describing:)(&v66, v47);
        v50 = v49;
        *(_QWORD *)(v46 + 56) = &type metadata for String;
        v51 = sub_10001AA00();
        *(_QWORD *)(v46 + 64) = v51;
        *(_QWORD *)(v46 + 32) = v48;
        *(_QWORD *)(v46 + 40) = v50;
        v66 = v80[0];
        v67 = v80[1];
        v68 = *(uint64_t (**)())&v80[2];
        v52 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
        *(_QWORD *)(v46 + 96) = &type metadata for String;
        *(_QWORD *)(v46 + 104) = v51;
        *(_QWORD *)(v46 + 72) = v52;
        *(_QWORD *)(v46 + 80) = v53;
        os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v64, "%{public}@: Existing criteria: %{public}@", 41, 2, v46);
        v54 = swift_bridgeObjectRelease(v46);
        v55 = static os_log_type_t.default.getter(v54);
        v56 = qword_1011B75C8;
        v57 = swift_allocObject(v45, 112, 7);
        *(_OWORD *)(v57 + 16) = xmmword_100E22B10;
        *(_QWORD *)&v66 = v3;
        swift_retain(v3);
        v58 = String.init<A>(describing:)(&v66, v47);
        *(_QWORD *)(v57 + 56) = &type metadata for String;
        *(_QWORD *)(v57 + 64) = v51;
        *(_QWORD *)(v57 + 32) = v58;
        *(_QWORD *)(v57 + 40) = v59;
        v66 = aBlock;
        v67 = v70;
        v68 = v71;
        v60 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
        *(_QWORD *)(v57 + 96) = &type metadata for String;
        *(_QWORD *)(v57 + 104) = v51;
        *(_QWORD *)(v57 + 72) = v60;
        *(_QWORD *)(v57 + 80) = v61;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "%{public}@: Registering updated criteria: %{public}@", 52, 2, v57);
        swift_bridgeObjectRelease(v57);
        sub_1007337D0();
        v63 = v62;
        xpc_activity_set_criteria(v4, v62);
        swift_unknownObjectRelease(v63);
        v26 = v6;
        goto LABEL_10;
      }
      if (qword_1010E9EF0 == -1)
        goto LABEL_16;
    }
    swift_once(&qword_1010E9EF0, sub_1007324AC);
LABEL_16:
    v35 = qword_1011B75C8;
    v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v37 = swift_allocObject(v36, 112, 7);
    *(_OWORD *)(v37 + 16) = xmmword_100E22B10;
    *(_QWORD *)&v66 = v3;
    v38 = type metadata accessor for XPCActivity();
    swift_retain(v3);
    v39 = String.init<A>(describing:)(&v66, v38);
    v41 = v40;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    v42 = sub_10001AA00();
    *(_QWORD *)(v37 + 64) = v42;
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    v66 = v80[0];
    v67 = v80[1];
    v68 = *(uint64_t (**)())&v80[2];
    v43 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
    *(_QWORD *)(v37 + 96) = &type metadata for String;
    *(_QWORD *)(v37 + 104) = v42;
    *(_QWORD *)(v37 + 72) = v43;
    *(_QWORD *)(v37 + 80) = v44;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v35, "%{public}@: Keeping existing criteria for: %{public}@", 53, 2, v37);
    swift_bridgeObjectRelease(v37);
    v26 = v6;
LABEL_10:
    swift_unknownObjectRelease(v26);
    state = xpc_activity_get_state(v4);
    return sub_1007356EC(state);
  }
  swift_unknownObjectRelease(v6);
LABEL_4:
  v8 = *(void (**)(_QWORD *__return_ptr, _OWORD *))(v1 + 48);
  *(_QWORD *)&v80[0] = 2;
  memset((char *)v80 + 8, 0, 32);
  v8(v74, v80);
  v9 = sub_1004E54BC((uint64_t)v74, (uint64_t)&v75);
  if (v75 != 2)
  {
LABEL_7:
    aBlock = v75;
    v70 = v76;
    v71 = v77;
    v13 = static os_log_type_t.default.getter(v9);
    if (qword_1010E9EF0 != -1)
      swift_once(&qword_1010E9EF0, sub_1007324AC);
    v14 = qword_1011B75C8;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 112, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
    *(_QWORD *)&v66 = v3;
    v17 = type metadata accessor for XPCActivity();
    swift_retain(v3);
    v18 = String.init<A>(describing:)(&v66, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    v21 = sub_10001AA00();
    *(_QWORD *)(v16 + 64) = v21;
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    v66 = aBlock;
    v67 = v70;
    v68 = v71;
    v22 = String.init<A>(describing:)(&v66, &type metadata for XPCActivity.Criteria);
    *(_QWORD *)(v16 + 96) = &type metadata for String;
    *(_QWORD *)(v16 + 104) = v21;
    *(_QWORD *)(v16 + 72) = v22;
    *(_QWORD *)(v16 + 80) = v23;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: Registering new criteria: %@", 40, 2, v16);
    swift_bridgeObjectRelease(v16);
    sub_1007337D0();
    v25 = v24;
    xpc_activity_set_criteria(v4, v24);
    v26 = v25;
    goto LABEL_10;
  }
  v10 = *(NSObject **)(v1 + 16);
  v4 = (_xpc_activity_s *)swift_allocObject(&unk_10108E448, 32, 7);
  *((_QWORD *)v4 + 2) = sub_1003D8448;
  *((_QWORD *)v4 + 3) = v3;
  v71 = sub_10001D850;
  v72 = v4;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v70 = sub_10001D8B8;
  *((_QWORD *)&v70 + 1) = &unk_10108E460;
  v11 = _Block_copy(&aBlock);
  v12 = v72;
  swift_retain(v3);
  swift_retain(v4);
  swift_release(v12);
  dispatch_sync(v10, v11);
  _Block_release(v11);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v4, "", 90, 53, 20, 1);
  swift_release(v3);
  v9 = swift_release(v4);
  if ((v10 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  return 6;
}

void sub_1007337D0()
{
  uint64_t v0;
  xpc_object_t v1;
  void *v2;
  const char **v3;
  int v4;
  uint64_t v5;
  xpc_object_t v6;

  v1 = xpc_dictionary_create(0, 0, 0);
  v2 = v1;
  v3 = (const char **)&XPC_ACTIVITY_PRIORITY_MAINTENANCE;
  if (!*(_BYTE *)v0)
    v3 = (const char **)&XPC_ACTIVITY_PRIORITY_UTILITY;
  xpc_dictionary_set_string(v1, XPC_ACTIVITY_PRIORITY, *v3);
  v4 = *(unsigned __int8 *)(v0 + 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, *(_BYTE *)(v0 + 1));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(_QWORD *)(v0 + 8));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(_QWORD *)(v0 + 16));
  if (v4 == 1)
    xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(_QWORD *)(v0 + 24));
  v5 = *(_QWORD *)(v0 + 32);
  if ((v5 & 1) != 0)
  {
    if (!XPC_ACTIVITY_POWER_NAP)
    {
      __break(1u);
      goto LABEL_51;
    }
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_POWER_NAP, 1);
  }
  if ((v5 & 4) == 0)
    goto LABEL_11;
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY, 1);
LABEL_11:
  if ((v5 & 2) == 0)
    goto LABEL_14;
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_SHOULD_WAKE_DEVICE, 1);
LABEL_14:
  if ((v5 & 8) == 0)
    goto LABEL_17;
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING, 1);
LABEL_17:
  if ((v5 & 0x10) == 0)
    goto LABEL_20;
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_A, 1);
LABEL_20:
  if ((v5 & 0x20) == 0)
    goto LABEL_23;
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
LABEL_23:
  if ((v5 & 0x40) == 0)
    goto LABEL_26;
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
LABEL_26:
  if ((v5 & 0x80) == 0)
    goto LABEL_29;
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
LABEL_29:
  if ((v5 & 0x100) == 0)
    goto LABEL_32;
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
LABEL_32:
  if ((v5 & 0x2000) == 0)
    goto LABEL_35;
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_string(v6, "DataBudgetName", "com.apple.dasd.baCellular");
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  xpc_dictionary_set_value(v2, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA, v6);
  swift_unknownObjectRelease(v6);
LABEL_35:
  if ((v5 & 0x200) != 0)
    xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if ((v5 & 0x400) != 0)
  {
    if (XPC_ACTIVITY_MEMORY_INTENSIVE)
    {
      xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_MEMORY_INTENSIVE, 1);
      goto LABEL_40;
    }
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
LABEL_40:
  if ((v5 & 0x800) == 0)
    goto LABEL_43;
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_CPU_INTENSIVE, 1);
LABEL_43:
  if ((v5 & 0x1000) == 0)
    goto LABEL_46;
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_DISK_INTENSIVE, 1);
LABEL_46:
  if ((v5 & 0x4000) == 0)
    return;
  if (!XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
  {
LABEL_63:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE, 1);
}

uint64_t sub_100733AEC()
{
  uint64_t result;
  uint64_t v1;

  result = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  qword_101106150 = result;
  *(_QWORD *)algn_101106158 = v1;
  return result;
}

uint64_t sub_100733B18(char *a1, char *a2)
{
  return sub_100514CF4(*a1, *a2);
}

Swift::Int sub_100733B24()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100733BAC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100733C10()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x616E65746E69616DLL;
  else
    v2 = 0x7974696C697475;
  if (v1)
    v3 = 0xEB0000000065636ELL;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100733C94@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104B0F8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100733CF0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7974696C697475;
  if (*v1)
    v2 = 0x616E65746E69616DLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEB0000000065636ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100733D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100736294();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100733D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100736294();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100733DE0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E65746E69616D2ELL;
  else
    return 0x7974696C6974752ELL;
}

uint64_t sub_100733E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100735244();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100733E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100735244();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100733ECC(__int16 a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1007C7438(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0x614E7265776F702ELL;
  v5[5] = 0xE900000000000070;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x766544656B61772ELL;
    v8[5] = 0xEB00000000656369;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001ALL;
    v11[5] = 0x8000000100EE2C60;
  }
  if ((a1 & 8) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0xD000000000000017;
    v14[5] = 0x8000000100EE2C40;
  }
  if ((a1 & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v16 = v2[2];
    v15 = v2[3];
    if (v16 >= v15 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
    v2[2] = v16 + 1;
    v17 = &v2[2 * v16];
    v17[4] = 0x657269757165722ELL;
    v17[5] = 0xEF417373616C4373;
    if ((a1 & 0x20) == 0)
    {
LABEL_26:
      if ((a1 & 0x40) == 0)
        goto LABEL_27;
      goto LABEL_46;
    }
  }
  else if ((a1 & 0x20) == 0)
  {
    goto LABEL_26;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 0x657269757165722ELL;
  v20[5] = 0xEF427373616C4373;
  if ((a1 & 0x40) == 0)
  {
LABEL_27:
    if ((a1 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0x657269757165722ELL;
  v23[5] = 0xEF437373616C4373;
  if ((a1 & 0x80) == 0)
  {
LABEL_28:
    if ((a1 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000010;
  v26[5] = 0x8000000100EE2C20;
  if ((a1 & 0x100) == 0)
  {
LABEL_29:
    if ((a1 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_61;
  }
LABEL_56:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 0xD00000000000001BLL;
  v29[5] = 0x8000000100EE2C00;
  if ((a1 & 0x200) == 0)
  {
LABEL_30:
    if ((a1 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_66;
  }
LABEL_61:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v31 = v2[2];
  v30 = v2[3];
  if (v31 >= v30 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
  v2[2] = v31 + 1;
  v32 = (char *)&v2[2 * v31];
  strcpy(v32 + 32, ".allowBattery");
  *((_WORD *)v32 + 23) = -4864;
  if ((a1 & 0x400) == 0)
  {
LABEL_31:
    if ((a1 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_71;
  }
LABEL_66:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v34 = v2[2];
  v33 = v2[3];
  if (v34 >= v33 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
  v2[2] = v34 + 1;
  v35 = &v2[2 * v34];
  v35[4] = 0xD000000000000010;
  v35[5] = 0x8000000100EE2BE0;
  if ((a1 & 0x800) == 0)
  {
LABEL_32:
    if ((a1 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_76;
  }
LABEL_71:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v37 = v2[2];
  v36 = v2[3];
  if (v37 >= v36 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v36 > 1), v37 + 1, 1, v2);
  v2[2] = v37 + 1;
  v38 = (char *)&v2[2 * v37];
  strcpy(v38 + 32, ".cpuIntensive");
  *((_WORD *)v38 + 23) = -4864;
  if ((a1 & 0x1000) == 0)
  {
LABEL_33:
    if ((a1 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_76:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v40 = v2[2];
  v39 = v2[3];
  if (v40 >= v39 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v39 > 1), v40 + 1, 1, v2);
  v2[2] = v40 + 1;
  v41 = (char *)&v2[2 * v40];
  strcpy(v41 + 32, ".diskIntensive");
  v41[47] = -18;
  if ((a1 & 0x2000) == 0)
  {
LABEL_34:
    if ((a1 & 0x4000) == 0)
      goto LABEL_91;
    goto LABEL_86;
  }
LABEL_81:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v43 = v2[2];
  v42 = v2[3];
  if (v43 >= v42 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v42 > 1), v43 + 1, 1, v2);
  v2[2] = v43 + 1;
  v44 = &v2[2 * v43];
  v44[4] = 0xD000000000000019;
  v44[5] = 0x8000000100EE2BC0;
  if ((a1 & 0x4000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v46 = v2[2];
    v45 = v2[3];
    if (v46 >= v45 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v45 > 1), v46 + 1, 1, v2);
    v2[2] = v46 + 1;
    v47 = &v2[2 * v46];
    v47[4] = 0xD000000000000012;
    v47[5] = 0x8000000100EE2BA0;
  }
LABEL_91:
  v48 = sub_10001A9A8(&qword_1011063B0);
  v49 = sub_1000193A4((unint64_t *)&qword_1010F1AD8, &qword_1011063B0, (const char *)&protocol conformance descriptor for [A]);
  v50 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v48, v49);
  v52 = v51;
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = v50;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 93;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  return 91;
}

uint64_t sub_100734770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100736130();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1007347CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100736130();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100734818()
{
  _QWORD *v0;

  return sub_100733ECC(*v0);
}

uint64_t sub_100734820(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101106338);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100735C88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for XPCActivity.Criteria.CodingKeys, &type metadata for XPCActivity.Criteria.CodingKeys, v11, v9, v10);
  v27 = *v3;
  v26 = 0;
  v12 = sub_100735D54();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v5, &type metadata for XPCActivity.Priority, v12);
  if (!v2)
  {
    v13 = v3[1];
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v25, v5);
    v14 = *((_QWORD *)v3 + 1);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v24, v5);
    v15 = *((_QWORD *)v3 + 2);
    v23 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v23, v5);
    v16 = *((_QWORD *)v3 + 3);
    v22 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v22, v5);
    v21 = *((_QWORD *)v3 + 4);
    v20 = 5;
    v17 = sub_100735D98();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for XPCActivity.Criteria.Options, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100734A04@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100023464(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100734A40()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100734A70 + 4 * byte_100E4D568[*v0]))(0x797469726F697270, 0xE800000000000000);
}

uint64_t sub_100734A70()
{
  return 0x6E69746165706572;
}

uint64_t sub_100734A8C()
{
  return 0x79616C6564;
}

uint64_t sub_100734AA0()
{
  return 0x7265506563617267;
}

uint64_t sub_100734AC0()
{
  return 0x6C61767265746E69;
}

uint64_t sub_100734AD4()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_100734AEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007357AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100734B10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735C88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100734B38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100735C88();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100734B60@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100735A48(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100734BA4(_QWORD *a1)
{
  return sub_100734820(a1);
}

BOOL sub_100734BB8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_100734E48((uint64_t)v5, (uint64_t)v7);
}

uint64_t sub_100734C00()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  sub_1002EB2D8(v0 + 80);
  sub_10001D8A8(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for XPCActivity()
{
  return objc_opt_self(_TtC12searchpartyd11XPCActivity);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100734CC0 + 4 * byte_100E4D573[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100734CF4 + 4 * byte_100E4D56E[v4]))();
}

uint64_t sub_100734CF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100734CFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100734D04);
  return result;
}

uint64_t sub_100734D10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100734D18);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100734D1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100734D24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.State()
{
  return &type metadata for XPCActivity.State;
}

uint64_t getEnumTagSinglePayload for XPCActivity.Criteria(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[40])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria()
{
  return &type metadata for XPCActivity.Criteria;
}

unint64_t sub_100734DE4()
{
  unint64_t result;

  result = qword_1011062F0;
  if (!qword_1011062F0)
  {
    result = swift_getWitnessTable(byte_100E4D740, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_1011062F0);
  }
  return result;
}

uint64_t sub_100734E28()
{
  return sub_100732520();
}

BOOL sub_100734E48(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  _BOOL8 result;

  v4 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v5 = 0x616E65746E69616DLL;
  else
    v5 = 0x7974696C697475;
  if (v4)
    v6 = 0xE700000000000000;
  else
    v6 = 0xEB0000000065636ELL;
  if (*(_BYTE *)a2)
    v7 = 0x616E65746E69616DLL;
  else
    v7 = 0x7974696C697475;
  if (*(_BYTE *)a2)
    v8 = 0xEB0000000065636ELL;
  else
    v8 = 0xE700000000000000;
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  return ((*(unsigned __int8 *)(a1 + 1) ^ *(unsigned __int8 *)(a2 + 1)) & 1) == 0
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

uint64_t sub_100734F68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];

  v8 = v7;
  v44 = a6;
  v45 = a7;
  v42 = a4;
  v43 = a5;
  v39 = a3;
  v35 = a1;
  v36 = a2;
  v41 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v41);
  v40 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v17 = *(_QWORD *)(v16 - 8);
  v38 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010FAAF0);
  v21 = swift_allocObject(v20, 20, 7);
  *(_DWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v7 + 40) = v21;
  swift_unknownObjectWeakInit(v7 + 80, 0);
  *(_BYTE *)(v7 + 88) = 0;
  v37 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 104) = 0;
  strcpy((char *)v46, "XPCActivity-");
  BYTE5(v46[1]) = 0;
  HIWORD(v46[1]) = -5120;
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  v23 = v46[1];
  v34 = v46[0];
  v24 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v39, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  v46[0] = &_swiftEmptyArrayStorage;
  v25 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v28 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)(v46, v26, v27, v41, v25);
  v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v34, v23, v19, v28, v15, 0);
  v30 = v35;
  *(_QWORD *)(v7 + 16) = v29;
  *(_QWORD *)(v7 + 24) = v30;
  *(_QWORD *)(v7 + 32) = v36;
  v31 = v43;
  *(_QWORD *)(v7 + 48) = v42;
  *(_QWORD *)(v7 + 56) = v31;
  v32 = v45;
  *(_QWORD *)(v8 + 64) = v44;
  *(_QWORD *)(v8 + 72) = v32;
  swift_retain(v31);
  swift_retain(v32);
  sub_100732B94();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v24, v38);
  return v8;
}

uint64_t sub_100735214@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_unknownObjectWeakLoadStrong(v1 + 80);
  *a1 = result;
  return result;
}

unint64_t sub_100735244()
{
  unint64_t result;

  result = qword_101106310;
  if (!qword_101106310)
  {
    result = swift_getWitnessTable(asc_100E4D6C8, &type metadata for XPCActivity.State);
    atomic_store(result, (unint64_t *)&qword_101106310);
  }
  return result;
}

uint64_t sub_100735288(uint64_t result)
{
  void *v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *string;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;

  if (!XPC_ACTIVITY_POWER_NAP)
  {
    __break(1u);
    goto LABEL_50;
  }
  v1 = (void *)result;
  result = xpc_dictionary_get_BOOL((xpc_object_t)result, XPC_ACTIVITY_POWER_NAP);
  if (!XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  v2 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_SIGNIFICANT_USER_INACTIVITY);
  if (!XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v3 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
  if (!XPC_ACTIVITY_USES_DUET_POWER_BUDGETING)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v4 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_USES_DUET_POWER_BUDGETING);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_A)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v5 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_A);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_B)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  v6 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_B);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v7 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRES_CLASS_C);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v8 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v9 = v2;
  if (v3)
    v9 = v2 | 4;
  if (v4)
    v9 |= 2uLL;
  if (v5)
    v9 |= 8uLL;
  if (v6)
    v9 |= 0x10uLL;
  if (v7)
    v9 |= 0x20uLL;
  if (v8)
    v9 |= 0x40uLL;
  if ((_DWORD)result)
    v10 = v9 | 0x80;
  else
    v10 = v9;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  if ((_DWORD)result)
    v11 = v10 | 0x100;
  else
    v11 = v10;
  if (!XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA)
    goto LABEL_58;
  v12 = xpc_dictionary_get_dictionary(v1, XPC_ACTIVITY_DUET_ACTIVITY_SCHEDULER_DATA);
  if (v12)
  {
    v13 = v12;
    string = xpc_dictionary_get_string(v12, "DataBudgetName");
    swift_unknownObjectRelease(v13);
    if (string)
      v11 |= 0x2000uLL;
  }
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_ALLOW_BATTERY);
  if (!XPC_ACTIVITY_MEMORY_INTENSIVE)
    goto LABEL_59;
  v15 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_MEMORY_INTENSIVE);
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  v16 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_CPU_INTENSIVE);
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v17 = result;
  result = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_DISK_INTENSIVE);
  if (!XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE)
  {
LABEL_62:
    __break(1u);
    return result;
  }
  if ((v15 & ((v11 & 0x200) == 0)) != 0)
    v18 = v11 | 0x200;
  else
    v18 = v11;
  if ((v16 & ((v18 & 0x400) == 0)) != 0)
    v18 |= 0x400uLL;
  if ((v17 & ((v18 & 0x800) == 0)) != 0)
    v18 |= 0x800uLL;
  if ((result & ((v18 & 0x1000) == 0)) != 0)
    v19 = v18 | 0x1000;
  else
    v19 = v18;
  v20 = xpc_dictionary_get_BOOL(v1, XPC_ACTIVITY_COMMUNICATES_WITH_PAIRED_DEVICE);
  swift_unknownObjectRelease(v1);
  if (v20)
    return v19 | 0x4000;
  else
    return v19;
}

uint64_t sub_10073557C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  const char *string;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int64_t int64;
  int64_t v12;
  int64_t v13;
  uint64_t result;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;

  string = xpc_dictionary_get_string(a1, XPC_ACTIVITY_PRIORITY);
  if (string)
  {
    v5 = String.init(cString:)(string);
    v7 = v6;
    if (qword_1010E9EF8 != -1)
      swift_once(&qword_1010E9EF8, sub_100733AEC);
    if (v5 == qword_101106150 && v7 == *(_QWORD *)algn_101106158)
    {
      swift_bridgeObjectRelease(v7);
      v10 = 0;
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, qword_101106150, *(_QWORD *)algn_101106158, 0);
      swift_bridgeObjectRelease(v7);
      v10 = ~v9 & 1;
    }
    v16 = xpc_dictionary_get_BOOL(a1, XPC_ACTIVITY_REPEATING);
    int64 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_DELAY);
    v12 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_GRACE_PERIOD);
    v13 = xpc_dictionary_get_int64(a1, XPC_ACTIVITY_INTERVAL);
    result = sub_100735288((uint64_t)a1);
    v17 = 256;
    if (!v16)
      v17 = 0;
    v15 = v17 | v10;
  }
  else
  {
    swift_unknownObjectRelease(a1);
    int64 = 0;
    v12 = 0;
    v13 = 0;
    result = 0;
    v15 = 2;
  }
  *a2 = v15;
  a2[1] = int64;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = result;
  return result;
}

unint64_t sub_1007356EC(unint64_t result)
{
  Swift::String v1;
  void *object;

  if (result >= 6)
  {
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(0xE000000000000000);
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v1._object;
    String.append(_:)(v1);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, 0x8000000100EE2A60, "searchpartyd/XPCActivity.swift", 30, 2, 258, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_1007357AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469726F697270, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067)
  {
    v7 = 0xE900000000000067;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E69746165706572, 0xE900000000000067, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x79616C6564 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79616C6564, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x7265506563617267 && a2 == 0xEB00000000646F69)
  {
    v9 = 0xEB00000000646F69;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265506563617267, 0xEB00000000646F69, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736E6F6974706FLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100735A48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;

  v5 = sub_10001A9A8(&qword_101106318);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100735C88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for XPCActivity.Criteria.CodingKeys, &type metadata for XPCActivity.Criteria.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v28 = 0;
  v12 = sub_100735CCC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for XPCActivity.Priority, &v28, v5, &type metadata for XPCActivity.Priority, v12);
  v13 = v29;
  v27 = 1;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 2;
  v21 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 3;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v24 = 4;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  v23 = 5;
  v15 = sub_100735D10();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for XPCActivity.Criteria.Options, &v23, v5, &type metadata for XPCActivity.Criteria.Options, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v22;
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *(_BYTE *)a2 = v13;
  *(_BYTE *)(a2 + 1) = v14 & 1;
  v18 = v20;
  *(_QWORD *)(a2 + 8) = v21;
  *(_QWORD *)(a2 + 16) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v16;
  return result;
}

unint64_t sub_100735C88()
{
  unint64_t result;

  result = qword_101106320;
  if (!qword_101106320)
  {
    result = swift_getWitnessTable(byte_100E4DB84, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106320);
  }
  return result;
}

unint64_t sub_100735CCC()
{
  unint64_t result;

  result = qword_101106328;
  if (!qword_101106328)
  {
    result = swift_getWitnessTable(byte_100E4DB5C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_101106328);
  }
  return result;
}

unint64_t sub_100735D10()
{
  unint64_t result;

  result = qword_101106330;
  if (!qword_101106330)
  {
    result = swift_getWitnessTable(byte_100E4DB34, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106330);
  }
  return result;
}

unint64_t sub_100735D54()
{
  unint64_t result;

  result = qword_101106340;
  if (!qword_101106340)
  {
    result = swift_getWitnessTable(byte_100E4DB0C, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_101106340);
  }
  return result;
}

unint64_t sub_100735D98()
{
  unint64_t result;

  result = qword_101106348;
  if (!qword_101106348)
  {
    result = swift_getWitnessTable(byte_100E4DAE4, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106348);
  }
  return result;
}

uint64_t sub_100735DDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100735DEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100735DFC()
{
  _QWORD *v0;

  return sub_100732D1C(v0);
}

uint64_t sub_100735E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100735E14()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100735E38(uint64_t a1)
{
  uint64_t v1;

  return sub_100732E30(a1, v1);
}

uint64_t sub_100735E40(uint64_t a1)
{
  uint64_t v1;

  return sub_100732EF0(a1, *(xpc_activity_t *)(v1 + 16), *(_xpc_activity_s **)(v1 + 24));
}

unint64_t sub_100735E58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _xpc_activity_s *v3;
  uint64_t v4;
  unint64_t result;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_xpc_activity_s **)(v1 + 24);
  swift_unknownObjectWeakAssign(v4 + 80, v3);
  *(_BYTE *)(v4 + 88) = 1;
  result = sub_1007330EC(v3);
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Criteria.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100735EF8 + 4 * byte_100E4D57D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100735F2C + 4 * byte_100E4D578[v4]))();
}

uint64_t sub_100735F2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735F34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100735F3CLL);
  return result;
}

uint64_t sub_100735F48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100735F50);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100735F54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100735F5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.CodingKeys()
{
  return &type metadata for XPCActivity.Criteria.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCActivity.Criteria.Options()
{
  return &type metadata for XPCActivity.Criteria.Options;
}

uint64_t storeEnumTagSinglePayload for XPCActivity.Priority(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100735FD4 + 4 * byte_100E4D587[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100736008 + 4 * byte_100E4D582[v4]))();
}

uint64_t sub_100736008(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100736010(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100736018);
  return result;
}

uint64_t sub_100736024(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10073602CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100736030(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100736038(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCActivity.Priority()
{
  return &type metadata for XPCActivity.Priority;
}

unint64_t sub_100736058()
{
  unint64_t result;

  result = qword_101106368;
  if (!qword_101106368)
  {
    result = swift_getWitnessTable(aU_25, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_101106368);
  }
  return result;
}

unint64_t sub_1007360A0()
{
  unint64_t result;

  result = qword_101106370;
  if (!qword_101106370)
  {
    result = swift_getWitnessTable(byte_100E4D8A4, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106370);
  }
  return result;
}

unint64_t sub_1007360E8()
{
  unint64_t result;

  result = qword_101106378;
  if (!qword_101106378)
  {
    result = swift_getWitnessTable(byte_100E4D874, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106378);
  }
  return result;
}

unint64_t sub_100736130()
{
  unint64_t result;

  result = qword_101106380;
  if (!qword_101106380)
  {
    result = swift_getWitnessTable(asc_100E4D8CC, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106380);
  }
  return result;
}

unint64_t sub_100736178()
{
  unint64_t result;

  result = qword_101106388;
  if (!qword_101106388)
  {
    result = swift_getWitnessTable(aM_33, &type metadata for XPCActivity.Criteria.Options);
    atomic_store(result, (unint64_t *)&qword_101106388);
  }
  return result;
}

unint64_t sub_1007361C0()
{
  unint64_t result;

  result = qword_101106390;
  if (!qword_101106390)
  {
    result = swift_getWitnessTable(byte_100E4DABC, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106390);
  }
  return result;
}

unint64_t sub_100736208()
{
  unint64_t result;

  result = qword_101106398;
  if (!qword_101106398)
  {
    result = swift_getWitnessTable("\r\r$", &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106398);
  }
  return result;
}

unint64_t sub_100736250()
{
  unint64_t result;

  result = qword_1011063A0;
  if (!qword_1011063A0)
  {
    result = swift_getWitnessTable(byte_100E4DA54, &type metadata for XPCActivity.Criteria.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011063A0);
  }
  return result;
}

unint64_t sub_100736294()
{
  unint64_t result;

  result = qword_1011063A8;
  if (!qword_1011063A8)
  {
    result = swift_getWitnessTable(byte_100E4D7D4, &type metadata for XPCActivity.Priority);
    atomic_store(result, (unint64_t *)&qword_1011063A8);
  }
  return result;
}

uint64_t sub_1007362D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100735214(a1);
}

_QWORD *sub_100736304(_OWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_10001A9A8(&qword_1011063B8);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      v14 = type metadata accessor for Date(0);
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v8, v9, v14);
      *(_QWORD *)&v8[*(int *)(v10 + 20)] = *(_QWORD *)&v9[*(int *)(v10 + 20)];
      v15(&v8[*(int *)(v10 + 24)], &v9[*(int *)(v10 + 24)], v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_100736440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
    v6(v2, v5);
    return ((uint64_t (*)(uint64_t, uint64_t))v6)(v2 + *(int *)(v3 + 24), v5);
  }
  return result;
}

_OWORD *sub_1007364E4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8(&qword_1011063B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v7, v8, v12);
    *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
    v13(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_1007365F4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v18 = type metadata accessor for Date(0);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 24);
      v19(v7, v8, v18);
      *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
      v19(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v18);
      goto LABEL_7;
    }
    sub_100736778((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v16 = sub_10001A9A8(&qword_1011063B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v7, v8, v14);
  *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
  v15(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100736778(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_1007367B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8(&qword_1011063B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v7, v8, v12);
    *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
    v13(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *sub_1007368C4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      v18 = type metadata accessor for Date(0);
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 40);
      v19(v7, v8, v18);
      *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
      v19(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v18);
      goto LABEL_7;
    }
    sub_100736778((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v16 = sub_10001A9A8(&qword_1011063B8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v14 = type metadata accessor for Date(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v7, v8, v14);
  *(_QWORD *)&v7[*(int *)(v9 + 20)] = *(_QWORD *)&v8[*(int *)(v9 + 20)];
  v15(&v7[*(int *)(v9 + 24)], &v8[*(int *)(v9 + 24)], v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100736A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100736A4C);
}

uint64_t sub_100736A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_10001A9A8(&qword_1011063B8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xE)
    return v9 - 13;
  else
    return 0;
}

uint64_t sub_100736ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100736AD8);
}

uint64_t sub_100736AD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_1011063B8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 13;
  return result;
}

uint64_t type metadata accessor for BookmarkMetaData(uint64_t a1)
{
  uint64_t result;

  result = qword_101106418;
  if (!qword_101106418)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookmarkMetaData);
  return result;
}

void sub_100736B94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100E4DBF8;
  sub_100736C10(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100E4DC10;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_100736C10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101106428)
  {
    v2 = type metadata accessor for KeyDropInterface.KeyAlignment(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101106428);
  }
}

uint64_t sub_100736C64@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  if (*a2 == -1)
  {
    __break(1u);
  }
  else
  {
    v6 = (uint64_t *)result;
    ++*a2;
    v23 = *(_OWORD *)(result + 32);
    v7 = *a3;
    v8 = a3[1];
    *(_OWORD *)a3 = v23;
    sub_100059DE8((uint64_t)&v23);
    sub_10001BC14(v7, v8);
    v9 = String.utf8Data.getter(0x64656D7265746E69, 0xEC00000065746169);
    v11 = v10;
    v12 = v23;
    sub_100059DE8((uint64_t)&v23);
    sub_1007E6A88(v12, *((uint64_t *)&v12 + 1), v9, v11, 32);
    if (v4)
    {
      sub_10001BC14(v9, v11);
      return sub_1000ADA04((uint64_t)&v23);
    }
    else
    {
      v15 = v13;
      v16 = v14;
      sub_1000ADA04((uint64_t)&v23);
      sub_1002F702C(v15, v16);
      sub_10001BC14(v9, v11);
      v17 = v6[2];
      v18 = v6[3];
      v20 = *v6;
      v19 = v6[1];
      sub_10001BBBC(v17, v18);
      result = sub_10001BD08(v20, v19);
      *a4 = v21;
      a4[1] = v22;
      a4[2] = v17;
      a4[3] = v18;
      a4[4] = v20;
      a4[5] = v19;
    }
  }
  return result;
}

uint64_t sub_100736DBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unint64_t a10, unint64_t a11)
{
  unint64_t v17;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v53;
  uint64_t v54;

  v17 = a11;
  if (!a11)
  {
    v24 = sub_10073740C();
    v25 = a1;
    v26 = swift_allocError(&type metadata for TokenSequenceError, v24, 0, 0);
    swift_willThrow(v26);
    sub_1002B1C34(a7, a8, a10);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a3, a4);
    return sub_10001EF3C(v25, a2);
  }
  if (a10 >> 60 == 15)
  {
    sub_10001BBBC(a5, a6);
    sub_10001BBBC(a5, a6);
    sub_10001BD08(a1, a2);
    sub_10001BBBC(a3, a4);
    v20 = a5;
    v21 = a6;
    v22 = a7;
  }
  else
  {
    v22 = a7;
    v17 = a11 - a7;
    if (a11 >= a7)
    {
      sub_1002B1C18(a7, a8, a10);
      sub_10001BBBC(a5, a6);
      sub_10001BD08(a1, a2);
      v22 = a7;
      sub_10001BBBC(a3, a4);
      sub_1002B1C18(a7, a8, a10);
      if (qword_1010EA230 != -1)
        swift_once(&qword_1010EA230, sub_100B5D824);
      v35 = type metadata accessor for Logger(0);
      sub_10001A9E8(v35, (uint64_t)qword_1011B7D00);
      v36 = sub_10001BBBC(a8, a10);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc(22, -1);
        *(_DWORD *)v39 = 134218240;
        v53 = a7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 4, v39 + 12);
        result = sub_1002B1C34(a7, a8, a10);
        *(_WORD *)(v39 + 12) = 2048;
        if (a11 < v17)
        {
          __break(1u);
          return result;
        }
        v53 = a11 - v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v39 + 14, v39 + 22);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "KeyGenerationHint hint.index:%llu saved %llu ratchet iterations", (uint8_t *)v39, 0x16u);
        swift_slowDealloc(v39, -1, -1);

        sub_1002B1C34(a7, a8, a10);
      }
      else
      {
        sub_1002B1C34(a7, a8, a10);
        sub_1002B1C34(a7, a8, a10);

      }
      v20 = a8;
      v21 = a10;
    }
    else
    {
      sub_10001BBBC(a5, a6);
      sub_10001BD08(a1, a2);
      sub_10001BBBC(a3, a4);
      sub_1002B1C18(v22, a8, a10);
      if (qword_1010EA230 != -1)
        swift_once(&qword_1010EA230, sub_100B5D824);
      v28 = type metadata accessor for Logger(0);
      sub_10001A9E8(v28, (uint64_t)qword_1011B7D00);
      v29 = sub_10001BBBC(a8, a10);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        *(_DWORD *)v32 = 134218240;
        v53 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 4, v32 + 12);
        sub_1002B1C34(v22, a8, a10);
        *(_WORD *)(v32 + 12) = 2048;
        v33 = a11;
        v53 = a11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 14, v32 + 22);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring KeyGenerationHint: hint.index (%llu) > initialRatchetsToSkip(%llu)", (uint8_t *)v32, 0x16u);
        swift_slowDealloc(v32, -1, -1);

        sub_1002B1C34(v22, a8, a10);
      }
      else
      {
        sub_1002B1C34(v22, a8, a10);
        sub_1002B1C34(v22, a8, a10);

        v33 = a11;
      }
      v17 = v33 - 1;
      v20 = a5;
      sub_10001BBBC(a5, a6);
      v21 = a6;
    }
  }
  sub_10001BBBC(v20, v21);
  v40 = sub_1007E0410(v20, v21, v17);
  if (v45)
  {
    sub_1002B1C34(v22, a8, a10);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a3, a4);
    sub_10001EF3C(v46, a2);
    sub_10001BC14(v20, v21);
    sub_10001EF3C(v46, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    return sub_10001BC14(v20, v21);
  }
  else
  {
    v42 = v40;
    v43 = v41;
    sub_1002B1C34(v22, a8, a10);
    sub_10001BC14(v20, v21);
    sub_10001BBBC(v42, v43);
    sub_10001BC14(v20, v21);
    sub_10001BD08(v46, a2);
    sub_10001BBBC(a3, a4);
    sub_10001BBBC(a5, a6);
    sub_10001BBBC(v42, v43);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a3, a4);
    sub_10001EF3C(v46, a2);
    sub_10001BC14(v42, v43);
    sub_10001EF3C(v46, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    result = sub_10001BC14(v42, v43);
    *a9 = v46;
    a9[1] = a2;
    a9[2] = a3;
    a9[3] = a4;
    a9[4] = a5;
    a9[5] = a6;
    a9[6] = a11;
    a9[7] = v42;
    a9[8] = v43;
  }
  return result;
}

unint64_t sub_10073740C()
{
  unint64_t result;

  result = qword_101106460;
  if (!qword_101106460)
  {
    result = swift_getWitnessTable(byte_100E51A1C, &type metadata for TokenSequenceError);
    atomic_store(result, (unint64_t *)&qword_101106460);
  }
  return result;
}

ValueMetadata *type metadata accessor for UnpairCommandPayload()
{
  return &type metadata for UnpairCommandPayload;
}

unint64_t sub_100737460(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10073748C();
  result = sub_10015CC54();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10073748C()
{
  unint64_t result;

  result = qword_101106468;
  if (!qword_101106468)
  {
    result = swift_getWitnessTable(byte_100E4DC48, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101106468);
  }
  return result;
}

uint64_t initializeWithCopy for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

_QWORD *assignWithCopy for ManagedCBPeripheralManager(_QWORD *a1, _QWORD *a2)
{
  sub_1001BA974(a1, a2);
  return a1;
}

uint64_t assignWithTake for ManagedCBPeripheralManager(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager()
{
  return &type metadata for ManagedCBPeripheralManager;
}

_QWORD *sub_100737608(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD v30[6];
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD v40[7];

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v31 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v39 = _swiftEmptyArrayStorage;
  v11 = a1[2];
  if (v11)
  {
    v30[2] = v2;
    swift_bridgeObjectRetain(a1);
    v30[1] = a1;
    v12 = a1 + 9;
    v30[4] = v7;
    v30[5] = v6;
    v30[3] = v8;
    v35 = v11;
    v13 = a1[6];
    v14 = *(v12 - 2);
    v15 = *(v12 - 1);
    v16 = *v12;
    sub_10001BBBC(*(v12 - 3), v14);
    v38 = v15;
    sub_10001BBBC(v15, v16);
    v17 = Data.init(stringLiteral:)(12592, 0xE200000000000000);
    v19 = v18;
    sub_10001BBBC(v13, v14);
    v33 = v14;
    v34 = v13;
    v20 = v14;
    v21 = v7;
    v22 = v8;
    MACAddress.init(addressToSanitize:type:)(v13, v20, 1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v21) != 1)
    {
      v23 = v31;
      v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v31, v6, v21);
      v25 = MACAddress.data.getter(v24);
      v26 = v21;
      v28 = v27;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v26);
      v40[5] = v17;
      v40[6] = v19;
      v40[3] = &type metadata for Data;
      v40[4] = &protocol witness table for Data;
      v36 = v28;
      v37 = v25;
      v40[0] = v25;
      v40[1] = v28;
      v29 = (char *)&loc_100737814 + dword_100737CBC[sub_10001AA44(v40, (uint64_t)&type metadata for Data)[1] >> 62];
      v32 = v12 + 6;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x100737C0CLL);
  }
  return result;
}

uint64_t sub_100737CDC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0);
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v2[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[19] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  return swift_task_switch(sub_100737D90, 0, 0);
}

uint64_t sub_100737D90()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  void *v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = v0 + 16;
  v2 = (_QWORD *)(v0 + 232);
  v3 = (_QWORD *)(v0 + 64);
  v4 = *(void **)(v0 + 88);
  v5 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 176) = sub_10001A9E8(v5, (uint64_t)qword_1011B7660);
  v6 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(void **)(v0 + 88);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    *(_QWORD *)(v0 + 56) = v9;
    v12 = v9;
    v3 = (_QWORD *)(v0 + 64);
    v2 = (_QWORD *)(v0 + 232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v10 + 4, v10 + 12);
    *v11 = v9;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "bluetoothConnectionKeys for request: %{public}@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    v14 = v10;
    v1 = v0 + 16;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {

  }
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 16) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 24) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v2, v1, sub_10001F628, 0, &type metadata for Bool);
  v15 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 232) & 1) != 0)
    goto LABEL_12;
  type metadata accessor for Transaction(0);
  v16 = static Transaction.currentNSXPCConnection.getter();
  if (!v16)
  {
    v43 = Logger.logObject.getter(0);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to get current NSXPCConnection!", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    type metadata accessor for SPCBPeripheralError(0);
    v47 = v46;
    *(_QWORD *)(v0 + 48) = 1;
    v48 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v49 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
    v50 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 40), v0 + 48, v48, v47, v49);
    swift_willThrow(v50);
    goto LABEL_21;
  }
  v17 = (void *)v16;
  v18 = sub_1007401AC();
  if ((NSXPCConnection.hasEntitlement<A>(_:)(v18, &type metadata for ManagedCBPeripheralManagerEntitlement, v18) & 1) == 0)
  {
    type metadata accessor for SPCBPeripheralError(0);
    v52 = v51;
    *v3 = 1;
    v53 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v54 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
    v55 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 32), v3, v53, v52, v54);
    swift_willThrow(v55);

LABEL_21:
    v56 = *(_QWORD *)(v0 + 160);
    v58 = *(_QWORD *)(v0 + 128);
    v57 = *(_QWORD *)(v0 + 136);
    v59 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

LABEL_12:
  v20 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 168);
  v22 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 152);
  static SystemInfo.lockState.getter(v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v20, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v22);
  v23 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v20, v22, v23);
  v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v25(v20, v22);
  v26 = ((uint64_t (*)(uint64_t, uint64_t))v25)(v19, v22);
  if ((v24 & 1) != 0)
  {
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "bluetoothConnectionKeys called while in .beforeFirstUnlock state", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = objc_allocWithZone((Class)SPCBPeripheralKeyResponse);
    sub_10000F4A0(0, &qword_101106508, SPPeripheral_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(v30, "initWithPeripherals:", isa);

    v33 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 136);
    v36 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(id))(v0 + 8))(v32);
  }
  else
  {
    v38 = sub_10001AA44(*(_QWORD **)(v0 + 96), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 24));
    v40 = *v38;
    v39 = v38[1];
    v41 = v38[2];
    v42 = (_QWORD *)swift_task_alloc(dword_101115CE4);
    *(_QWORD *)(v0 + 184) = v42;
    *v42 = v0;
    v42[1] = sub_100738390;
    return sub_100B37228(v40, v39, v41);
  }
}

uint64_t sub_100738390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007383EC, 0, 0);
}

uint64_t sub_1007383EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = objc_msgSend(*(id *)(v0 + 88), "requestParameters");
  v4 = sub_10000F4A0(0, &qword_1011064D8, SPCBPeripheralKeyRequestParameters_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  *(_QWORD *)(v0 + 72) = v5;
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 200) = v6;
  *(_QWORD *)(v6 + 16) = v2;
  *(_QWORD *)(v6 + 24) = v1;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 208) = v7;
  v8 = sub_10001A9A8(&qword_1011064F0);
  v9 = sub_10001A9A8(&qword_1011064F8);
  v10 = sub_1000193A4(&qword_101106500, &qword_1011064F0, (const char *)&protocol conformance descriptor for [A]);
  *v7 = v0;
  v7[1] = sub_100738504;
  return Sequence.asyncMap<A>(_:)(&unk_1011064E8, v6, v8, v9, v10);
}

uint64_t sub_100738504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  v3[27] = a1;
  v3[28] = v1;
  swift_task_dealloc(v4);
  v5 = v3[25];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  if (v1)
    v6 = sub_100738C9C;
  else
    v6 = sub_100738594;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100738594()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  Class v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  id v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  Class isa;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  Class v34;
  BOOL v35;
  objc_class *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  NSObject *v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  NSObject **v51;
  uint64_t v52;
  NSObject **v53;
  uint64_t v54;
  id v55;
  Class v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  NSObject *v72;

  v5 = *(_QWORD *)(v1 + 216);
  v64 = *(_QWORD *)(v5 + 16);
  if (v64)
  {
    v6 = 0;
    v68 = *(_QWORD *)(v1 + 112);
    v65 = v5 + 32;
    v7 = _swiftEmptyDictionarySingleton;
    v63 = *(_QWORD *)(v1 + 216);
    do
    {
      if (v6 >= *(_QWORD *)(v5 + 16))
        goto LABEL_56;
      v3 = *(_QWORD *)(v65 + 16 * v6 + 8);
      if ((unint64_t)v3 >> 62)
      {
        if (v3 < 0)
          v0 = *(NSObject **)(v65 + 16 * v6 + 8);
        else
          v0 = (v3 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain_n(*(_QWORD *)(v65 + 16 * v6 + 8), 2);
        v8 = _CocoaArrayWrapper.endIndex.getter(v0);
        swift_bridgeObjectRelease();
        v66 = v6;
        if (v8)
        {
LABEL_7:
          v9 = 0;
          v70 = v3 & 0xC000000000000001;
          v69 = v3;
          while (1)
          {
            v12 = v70
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v3)
                : *(id *)(v3 + 8 * v9 + 32);
            v13 = v12;
            v2 = (uint8_t *)(v9 + 1);
            if (__OFADD__(v9, 1))
              break;
            v14 = objc_msgSend(v12, "userIdentifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

            v15 = objc_msgSend(v13, "beaconIdentifier");
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v15);

            if (v7[2].isa && (v16 = sub_100519924(*(_QWORD *)(v1 + 136)), (v17 & 1) != 0))
            {
              v18 = *(_QWORD *)(v1 + 128);
              v19 = (void *)*((_QWORD *)v7[7].isa + v16);
              sub_10005972C(*(_QWORD *)(v1 + 136), v18, type metadata accessor for ManagedCBPeripheralManager.KeyType);
              v4 = v19;
              v20 = sub_10073D054((void *)v4, v13);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
              v72 = v7;
              v1 = v67;
              sub_10010D814((uint64_t)v20, v18, isUniquelyReferenced_nonNull_native);
              v7 = v72;
              swift_bridgeObjectRelease();
              sub_1000126B0(v18, type metadata accessor for ManagedCBPeripheralManager.KeyType);

            }
            else
            {
              v22 = *(_QWORD *)(v1 + 120);
              sub_10005972C(*(_QWORD *)(v1 + 136), v22, type metadata accessor for ManagedCBPeripheralManager.KeyType);
              v4 = v13;
              v3 = swift_isUniquelyReferenced_nonNull_native(v7);
              v72 = v7;
              v23 = v22;
              v0 = v7;
              v25 = sub_100519924(v23);
              isa = v7[2].isa;
              v27 = (v24 & 1) == 0;
              v28 = (uint64_t)isa + v27;
              if (__OFADD__(isa, v27))
                goto LABEL_54;
              v29 = v24;
              if ((uint64_t)v7[3].isa >= v28)
              {
                if ((v3 & 1) == 0)
                {
                  v0 = &v72;
                  sub_100A9FE40();
                  v7 = v72;
                }
              }
              else
              {
                v30 = *(_QWORD *)(v1 + 120);
                sub_100A91718(v28, v3);
                v7 = v72;
                v0 = v72;
                v31 = sub_100519924(v30);
                if ((v29 & 1) != (v32 & 1))
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v1 + 104));
                v25 = v31;
              }
              v3 = (uint64_t)type metadata accessor for ManagedCBPeripheralManager.KeyType;
              if ((v29 & 1) != 0)
              {
                v10 = v7[7].isa;

                *((_QWORD *)v10 + v25) = v4;
              }
              else
              {
                v33 = *(_QWORD *)(v1 + 120);
                v7[(v25 >> 6) + 8].isa = (Class)((uint64_t)v7[(v25 >> 6) + 8].isa | (1 << v25));
                sub_10005972C(v33, (uint64_t)v7[6].isa + *(_QWORD *)(v68 + 72) * v25, type metadata accessor for ManagedCBPeripheralManager.KeyType);
                *((_QWORD *)v7[7].isa + v25) = v4;
                v34 = v7[2].isa;
                v35 = __OFADD__(v34, 1);
                v36 = (Class)((char *)v34 + 1);
                if (v35)
                  goto LABEL_55;
                v7[2].isa = v36;
              }
              v11 = *(_QWORD *)(v1 + 120);
              swift_bridgeObjectRelease();
              sub_1000126B0(v11, type metadata accessor for ManagedCBPeripheralManager.KeyType);
            }
            v0 = *(NSObject **)(v1 + 136);

            sub_1000126B0((uint64_t)v0, type metadata accessor for ManagedCBPeripheralManager.KeyType);
            ++v9;
            v3 = v69;
            if (v2 == (uint8_t *)v8)
              goto LABEL_3;
          }
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
      }
      else
      {
        v8 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v65 + 16 * v6 + 8));
        v66 = v6;
        if (v8)
          goto LABEL_7;
      }
LABEL_3:
      v6 = v66 + 1;
      swift_bridgeObjectRelease();
      v5 = v63;
    }
    while (v66 + 1 != v64);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain(v7);
  v4 = (unint64_t)sub_100509854(v38);
  swift_bridgeObjectRelease();
  v39 = swift_retain_n(v4, 2);
  v0 = Logger.logObject.getter(v39);
  LOBYTE(v40) = static os_log_type_t.default.getter(v0);
  if (!os_log_type_enabled(v0, (os_log_type_t)v40))
  {
    swift_release_n(v4, 2);
    goto LABEL_40;
  }
  v3 = v1 + 80;
  v2 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v2 = 134217984;
  if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
    goto LABEL_60;
  v41 = *(_QWORD *)(v4 + 16);
  while (1)
  {
    swift_release();
    *(_QWORD *)(v1 + 80) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v1 + 88, v2 + 4, v2 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)v40, "Peripheral count: %ld", v2, 0xCu);
    swift_slowDealloc(v2, -1, -1);
LABEL_40:

    if ((v4 & 0x8000000000000000) != 0 || (v4 & 0x4000000000000000) != 0)
    {
LABEL_57:
      v54 = swift_retain();
      v40 = _CocoaArrayWrapper.endIndex.getter(v54);
      if (!v40)
        goto LABEL_58;
    }
    else
    {
      v40 = *(_QWORD *)(v4 + 16);
      swift_retain();
      if (!v40)
        goto LABEL_58;
    }
    if (v40 >= 1)
      break;
    __break(1u);
LABEL_60:
    swift_bridgeObjectRetain(v4);
    v41 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_release();
  }
  v42 = 0;
  v43 = v4 & 0xC000000000000001;
  v71 = v4 & 0xC000000000000001;
  do
  {
    if (v43)
      v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v4);
    else
      v45 = *(id *)(v4 + 8 * v42 + 32);
    v46 = v45;
    v44 = Logger.logObject.getter(v46);
    v47 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v47))
    {
      v48 = swift_slowAlloc(12, -1);
      v49 = v40;
      v50 = (_QWORD *)v4;
      v51 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 138412290;
      *(_QWORD *)(v48 + 4) = v46;
      *v51 = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, v47, "Peripheral: %@", (uint8_t *)v48, 0xCu);
      v52 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v51, 1, v52);
      v53 = v51;
      v4 = (unint64_t)v50;
      v40 = v49;
      v43 = v71;
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {

      v44 = v46;
    }
    ++v42;

  }
  while (v40 != v42);
LABEL_58:
  swift_release();
  v55 = objc_allocWithZone((Class)SPCBPeripheralKeyResponse);
  sub_10000F4A0(0, &qword_101106508, SPPeripheral_ptr);
  v56 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  v57 = objc_msgSend(v55, "initWithPeripherals:", v56);

  swift_bridgeObjectRelease();
  v58 = *(_QWORD *)(v1 + 160);
  v60 = *(_QWORD *)(v1 + 128);
  v59 = *(_QWORD *)(v1 + 136);
  v61 = *(_QWORD *)(v1 + 120);
  swift_task_dealloc(*(_QWORD *)(v1 + 168));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(id))(v1 + 8))(v57);
}

uint64_t sub_100738C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100738D08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  v6 = type metadata accessor for UUID(0);
  v4[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[6] = v7;
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v4[7] = v8;
  v4[8] = v9;
  return swift_task_switch(sub_100738D74, 0, 0);
}

uint64_t sub_100738D74()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;

  v1 = objc_msgSend(*(id *)(v0 + 64), "vendorIdentifierList");
  v2 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v29 = (_QWORD *)v0;
    if (v4)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v13 = v29[7];
    v14 = (void *)v29[8];
    v15 = v29[6];
    v16 = v29[4];
    v17 = objc_msgSend(v14, "sessionKey", v29[5]);
    v18 = objc_msgSend(v17, "userIdentifier");

    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v19 = objc_msgSend(v14, "sessionKey");
    v20 = objc_msgSend(v19, "bundleId");

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = sub_100CA8DE4((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    v25 = sub_100739238(v13, v16, v21, v23, v24);
    v29[9] = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v28);
    v26 = dword_101106524;
    swift_bridgeObjectRetain(v25);
    v27 = (_QWORD *)swift_task_alloc(v26);
    v29[10] = v27;
    *v27 = v29;
    v27[1] = sub_10073904C;
    return sub_100739B3C((uint64_t)v25);
  }
  if (v3 < 0)
    v12 = v3;
  else
    v12 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v12);
  swift_bridgeObjectRelease();
  v29 = (_QWORD *)v0;
  if (!v4)
    goto LABEL_16;
LABEL_3:
  result = sub_10009B408(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "unsignedIntValue");

      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_10009B408(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *((_DWORD *)&_swiftEmptyArrayStorage[4] + v11) = v9;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10073904C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  v6 = *v2;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v7 = *(_QWORD *)(v4 + 56);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 88) = a1;
    return swift_task_switch(sub_1007390E4, 0, 0);
  }
}

uint64_t sub_1007390E4()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;

  v1 = objc_msgSend(*(id *)(v0 + 64), "sessionKey");
  *(_QWORD *)(v0 + 96) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_10110652C);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_100739158;
  return sub_10073A33C((uint64_t)v1, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100739158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = *(void **)(*(_QWORD *)v1 + 96);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_task_switch(sub_1007391D8, 0, 0);
}

uint64_t sub_1007391D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD **)(v0 + 16);
  *v3 = objc_msgSend(*(id *)(v0 + 64), "sessionKey");
  v3[1] = v1;
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_100739238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  NSObject *v60;
  os_log_type_t v61;
  const char *v62;
  BOOL v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  os_log_type_t v86;
  _QWORD *result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  char *v93;
  __int128 v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int *v108;
  uint64_t v109[2];

  v90 = a5;
  v89 = a2;
  v97 = a1;
  v108 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v7 = *((_QWORD *)v108 - 1);
  v8 = __chkstk_darwin(v108);
  v106 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v91 = (uint64_t)&v88 - v11;
  v12 = __chkstk_darwin(v10);
  v107 = (uint64_t)&v88 - v13;
  v14 = __chkstk_darwin(v12);
  v100 = (char *)&v88 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v88 - v16;
  v96 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v20 = (uint64_t *)((char *)&v88 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21._countAndFlagsBits = 0x6C7070612E6D6F63;
  v21._object = (void *)0xEA00000000002E65;
  LOBYTE(v22) = String.hasPrefix(_:)(v21);
  if ((a3 != 0xD000000000000014 || a4 != 0x8000000100EE2C80)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, 0xD000000000000014, 0x8000000100EE2C80, 0) & 1) == 0)
  {
    v24 = v96;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16))(v20, v97, v96);
LABEL_9:
    (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v24);
    v26 = 0;
    v92 = 0;
    v27 = v89;
    v18 = v107;
    if ((v22 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v23 = *(_QWORD *)(v90 + 16);
  v24 = v96;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v18 + 16))(v20, v97, v96);
  if (v23)
    goto LABEL_9;
  if (qword_1010E9F00 != -1)
LABEL_46:
    swift_once(&qword_1010E9F00, sub_10073FB14);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_101106470);
  v26 = static UUID.== infix(_:_:)(v20, v25);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v24);
  if ((v22 & 1) == 0)
  {
    v92 = 0;
    v27 = v89;
    v18 = v107;
    v24 = *(_QWORD *)(v89 + 16);
    if (v24)
      goto LABEL_12;
    return _swiftEmptyDictionarySingleton;
  }
  v27 = v89;
  v18 = v107;
LABEL_10:
  v92 = *(_QWORD *)(v90 + 16) == 0;
LABEL_11:
  v24 = *(_QWORD *)(v27 + 16);
  if (!v24)
    return _swiftEmptyDictionarySingleton;
LABEL_12:
  v28 = v27 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v102 = *(_QWORD *)(v7 + 72);
  swift_bridgeObjectRetain(v27);
  v103 = _swiftEmptyDictionarySingleton;
  *((_QWORD *)&v29 + 1) = 2;
  v99 = xmmword_100E22B00;
  *(_QWORD *)&v29 = 141559043;
  v94 = v29;
  v93 = (char *)&type metadata for Any + 8;
  v30 = (uint64_t)v100;
  v95 = v17;
  while (1)
  {
    v105 = v28;
    sub_10005972C(v28, (uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = v99;
    v35 = *(_DWORD *)&v17[v108[9]];
    *(_QWORD *)(v34 + 56) = &type metadata for UInt32;
    *(_QWORD *)(v34 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v34 + 32) = v35;
    v104 = String.init(format:_:)(2016948261, 0xE400000000000000, v34);
    v37 = v36;
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B7660);
    sub_10005972C((uint64_t)v17, v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_10005972C((uint64_t)v17, v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRetain(v37);
    v101 = v39;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.info.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(52, -1);
      v98 = swift_slowAlloc(96, -1);
      v109[0] = v98;
      *(_DWORD *)v43 = v94;
      *(_QWORD *)(v43 + 4) = 1752392040;
      *(_WORD *)(v43 + 12) = 2081;
      v44 = v26;
      v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = v24;
      v47 = v96;
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v96, v45);
      *(_QWORD *)(v43 + 14) = sub_100016940(v48, v49, v109);
      swift_bridgeObjectRelease();
      sub_1000126B0(v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v43 + 22) = 2160;
      *(_QWORD *)(v43 + 24) = 1752392040;
      *(_WORD *)(v43 + 32) = 2081;
      v50 = v47;
      v24 = v46;
      v51 = v45;
      v17 = v95;
      v26 = v44;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
      *(_QWORD *)(v43 + 34) = sub_100016940(v52, v53, v109);
      swift_bridgeObjectRelease();
      sub_1000126B0(v107, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      *(_WORD *)(v43 + 42) = 2082;
      swift_bridgeObjectRetain(v37);
      *(_QWORD *)(v43 + 44) = sub_100016940(v104, v37, v109);
      swift_bridgeObjectRelease_n(v37, 3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Process user: %{private,mask.hash}s beacon: %{private,mask.hash}s (vid: %{public}s)", (uint8_t *)v43, 0x34u);
      v54 = v98;
      swift_arrayDestroy(v98, 3, v93);
      v18 = v107;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      if ((v26 & 1) != 0)
        goto LABEL_30;
    }
    else
    {
      sub_1000126B0(v30, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      sub_1000126B0(v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);

      swift_bridgeObjectRelease_n(v37, 2);
      if ((v26 & 1) != 0)
        goto LABEL_30;
    }
    v55 = static UUID.== infix(_:_:)(v97, v17);
    if ((v55 & 1) == 0)
    {
      v57 = Logger.logObject.getter(v55);
      v58 = static os_log_type_t.info.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        v60 = v57;
        v61 = v58;
        v62 = "Skipping beacon not belonging to allowed user session";
        goto LABEL_27;
      }
LABEL_28:

      goto LABEL_15;
    }
    v56 = v91;
    sub_10005972C((uint64_t)v17, v91, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v92)
    {
      sub_1000126B0(v56, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      goto LABEL_30;
    }
    v63 = sub_100A085DC(*(_DWORD *)(v56 + v108[9]), v90);
    v64 = v56;
    v65 = v63;
    v66 = sub_1000126B0(v64, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (!v65)
    {
      v57 = Logger.logObject.getter(v66);
      v86 = static os_log_type_t.info.getter(v57);
      if (os_log_type_enabled(v57, v86))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        v60 = v57;
        v61 = v86;
        v62 = "Skipping non-allowed vendorId";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v60, v61, v62, v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }
      goto LABEL_28;
    }
LABEL_30:
    v67 = v106;
    sub_10005972C((uint64_t)v17, v106, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v68 = &v17[v108[10]];
    v69 = *(_QWORD *)v68;
    v22 = *((_QWORD *)v68 + 1);
    v70 = v17[v108[12]];
    swift_bridgeObjectRetain(v22);
    v71 = (uint64_t)v103;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v103);
    v109[0] = v71;
    v73 = v67;
    v20 = (_QWORD *)v71;
    v74 = sub_1005199F8(v73);
    v76 = v71;
    v7 = v74;
    v77 = *(_QWORD *)(v76 + 16);
    v78 = (v75 & 1) == 0;
    v79 = v77 + v78;
    if (__OFADD__(v77, v78))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v18 = v75;
    if (*(_QWORD *)(v76 + 24) >= v79)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100AA0074();
      goto LABEL_36;
    }
    sub_100A91B00(v79, isUniquelyReferenced_nonNull_native);
    v80 = sub_1005199F8(v106);
    if ((v18 & 1) != (v81 & 1))
      break;
    v7 = v80;
LABEL_36:
    v20 = (_QWORD *)v109[0];
    v103 = (_QWORD *)v109[0];
    if ((v18 & 1) != 0)
    {
      v31 = *(_QWORD *)(v109[0] + 56) + 24 * v7;
      swift_bridgeObjectRelease();
      *(_QWORD *)v31 = v69;
      *(_QWORD *)(v31 + 8) = v22;
      *(_BYTE *)(v31 + 16) = v70;
    }
    else
    {
      *(_QWORD *)(v109[0] + 8 * (v7 >> 6) + 64) |= 1 << v7;
      sub_10005972C(v106, v20[6] + v7 * v102, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v82 = v20[7] + 24 * v7;
      *(_QWORD *)v82 = v69;
      *(_QWORD *)(v82 + 8) = v22;
      *(_BYTE *)(v82 + 16) = v70;
      v83 = v20[2];
      v84 = __OFADD__(v83, 1);
      v85 = v83 + 1;
      if (v84)
        goto LABEL_45;
      v20[2] = v85;
    }
    swift_bridgeObjectRelease();
    sub_1000126B0(v106, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v18 = v107;
LABEL_15:
    v30 = (uint64_t)v100;
    v32 = v105;
    sub_1000126B0((uint64_t)v17, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v28 = v32 + v102;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      return v103;
    }
  }
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v108);
  __break(1u);
  return result;
}

uint64_t sub_100739B3C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for BeaconIdentifier(0);
  v2[5] = v3;
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[8] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  v2[11] = swift_task_alloc(v6);
  return swift_task_switch(sub_100739BDC, 0, 0);
}

uint64_t sub_100739BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_BYTE *)(v5 + 32);
  *(_BYTE *)(v0 + 152) = v6;
  v7 = -1;
  v8 = -1 << v6;
  if (-(-1 << v6) < 64)
    v7 = ~(-1 << -(char)(-1 << v6));
  v9 = v7 & *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v0 + 96) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v5);
  if (v9)
  {
    v11 = 0;
    v12 = __clz(__rbit64(v9));
    v13 = (v9 - 1) & v9;
LABEL_5:
    *(_QWORD *)(v0 + 104) = v11;
    *(_QWORD *)(v0 + 112) = v13;
    v15 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 48);
    v17 = v10[6];
    v18 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v0 + 120) = v18;
    sub_10005972C(v17 + v18 * v12, v14, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1000126EC(v14, v15, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v19 = sub_10001AA44(v3, v3[3]);
    v20 = type metadata accessor for UUID(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    v21(v16, v15, v20);
    v21(v16 + *(int *)(v4 + 20), v15 + *(int *)(v2 + 20), v20);
    v22 = *v19;
    v23 = v19[1];
    v24 = v19[2];
    v25 = (_QWORD *)swift_task_alloc(dword_101115CA4);
    *(_QWORD *)(v0 + 128) = v25;
    *v25 = v0;
    v25[1] = sub_100739E64;
    return sub_100B3AAB0(*(_QWORD *)(v0 + 48), v22, v23, v24);
  }
  v27 = 63 - v8;
  if ((unint64_t)(63 - v8) > 0x7F)
  {
    v28 = v10[9];
    if (v28)
    {
      v11 = 1;
LABEL_9:
      v13 = (v28 - 1) & v28;
      v12 = __clz(__rbit64(v28)) + (v11 << 6);
      goto LABEL_5;
    }
    if (v27 >= 0xC0)
    {
      v28 = v10[10];
      if (v28)
      {
        v11 = 2;
        goto LABEL_9;
      }
      if (v27 >= 0x100)
      {
        v28 = v10[11];
        if (v28)
        {
          v11 = 3;
          goto LABEL_9;
        }
        if (v27 >= 0x140)
        {
          v28 = v10[12];
          if (v28)
          {
            v11 = 4;
            goto LABEL_9;
          }
          if (v27 >= 0x180)
          {
            v28 = v10[13];
            if (v28)
            {
              v11 = 5;
              goto LABEL_9;
            }
            v29 = 0;
            v30 = v27 >> 6;
            if (v30 <= 6)
              v30 = 6;
            v31 = v30 - 6;
            while (v31 != v29)
            {
              v28 = v10[v29++ + 14];
              if (v28)
              {
                v11 = v29 + 5;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }
  v32 = *(_QWORD *)(v0 + 80);
  v33 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_100739E64(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = (*v2)[16];
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc(v4);
  sub_1000126B0(v3[6], type metadata accessor for BeaconIdentifier);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = sub_10073A2B8;
  }
  else
  {
    v5 = sub_100739EFC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100739EFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int64_t v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 72);
  sub_10005972C(*(_QWORD *)(v0 + 80), v2, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v0 + 16) = v1;
  v5 = sub_1005199F8(v2);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = (v4 & 1) == 0;
  result = v6 + v7;
  if (__OFADD__(v6, v7))
  {
    __break(1u);
    goto LABEL_33;
  }
  v9 = v4;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 96) + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_100AA02F4();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 72);
    sub_100A92088(result, isUniquelyReferenced_nonNull_native);
    v11 = sub_1005199F8(v10);
    if ((v9 & 1) != (v12 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 56));
    v5 = v11;
  }
  v13 = *(_QWORD **)(v0 + 16);
  v14 = *(_QWORD *)(v0 + 136);
  if ((v9 & 1) != 0)
  {
    v15 = v13[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v15 + 8 * v5) = v14;
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 72);
  v13[(v5 >> 6) + 8] |= 1 << v5;
  result = sub_10005972C(v17, v13[6] + v16 * v5, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  *(_QWORD *)(v13[7] + 8 * v5) = v14;
  v18 = v13[2];
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v13[2] = v20;
LABEL_12:
  v22 = *(_QWORD *)(v0 + 72);
  v21 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease();
  sub_1000126B0(v22, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  result = sub_1000126B0(v21, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  v23 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 96) = v13;
  if (v24)
  {
    v25 = (v24 - 1) & v24;
    v26 = __clz(__rbit64(v24)) | (v23 << 6);
    result = *(_QWORD *)(v0 + 24);
LABEL_14:
    *(_QWORD *)(v0 + 104) = v23;
    *(_QWORD *)(v0 + 112) = v25;
    v27 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 88);
    v29 = *(_QWORD *)(v0 + 56);
    v31 = *(_QWORD *)(v0 + 40);
    v30 = *(_QWORD *)(v0 + 48);
    v32 = *(_QWORD **)(v0 + 32);
    v33 = *(_QWORD *)(result + 48);
    v34 = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 72);
    *(_QWORD *)(v0 + 120) = v34;
    sub_10005972C(v33 + v34 * v26, v28, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    sub_1000126EC(v28, v27, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v35 = sub_10001AA44(v32, v32[3]);
    v36 = type metadata accessor for UUID(0);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    v37(v30, v27, v36);
    v37(v30 + *(int *)(v31 + 20), v27 + *(int *)(v29 + 20), v36);
    v38 = *v35;
    v39 = v35[1];
    v40 = v35[2];
    v41 = (_QWORD *)swift_task_alloc(dword_101115CA4);
    *(_QWORD *)(v0 + 128) = v41;
    *v41 = v0;
    v41[1] = sub_100739E64;
    return sub_100B3AAB0(*(_QWORD *)(v0 + 48), v38, v39, v40);
  }
  v42 = v23 + 1;
  if (__OFADD__(v23, 1))
    goto LABEL_34;
  v43 = (unint64_t)((1 << *(_BYTE *)(v0 + 152)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 24);
  if (v42 >= v43)
    goto LABEL_31;
  v44 = result + 64;
  v45 = *(_QWORD *)(result + 64 + 8 * v42);
  ++v23;
  if (v45)
  {
LABEL_18:
    v25 = (v45 - 1) & v45;
    v26 = __clz(__rbit64(v45)) + (v23 << 6);
    goto LABEL_14;
  }
  v23 = v42 + 1;
  if (v42 + 1 >= v43)
    goto LABEL_31;
  v45 = *(_QWORD *)(v44 + 8 * v23);
  if (v45)
    goto LABEL_18;
  v23 = v42 + 2;
  if (v42 + 2 >= v43)
    goto LABEL_31;
  v45 = *(_QWORD *)(v44 + 8 * v23);
  if (v45)
    goto LABEL_18;
  v23 = v42 + 3;
  if (v42 + 3 >= v43)
    goto LABEL_31;
  v45 = *(_QWORD *)(v44 + 8 * v23);
  if (v45)
    goto LABEL_18;
  v46 = v42 + 4;
  if (v46 >= v43)
  {
LABEL_31:
    v48 = *(_QWORD *)(v0 + 80);
    v47 = *(_QWORD *)(v0 + 88);
    v49 = *(_QWORD *)(v0 + 72);
    v50 = *(_QWORD *)(v0 + 48);
    swift_release();
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
  }
  v45 = *(_QWORD *)(v44 + 8 * v46);
  if (v45)
  {
    v23 = v46;
    goto LABEL_18;
  }
  while (1)
  {
    v23 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v23 >= v43)
      goto LABEL_31;
    v45 = *(_QWORD *)(v44 + 8 * v23);
    ++v46;
    if (v45)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10073A2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v1, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073A33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4[21] = a3;
  v4[22] = v3;
  v4[19] = a1;
  v4[20] = a2;
  v5 = sub_10001A9A8(&qword_1010ED860);
  v4[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v4[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[25] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[26] = swift_task_alloc(v8);
  v4[27] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v4[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MACAddress(0);
  v4[29] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[30] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[31] = swift_task_alloc(v12);
  v4[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for BeaconIdentifier(0);
  v4[33] = v13;
  v4[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F7AE0);
  v4[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for KeySyncRecord(0);
  v4[36] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[37] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[38] = swift_task_alloc(v17);
  v4[39] = swift_task_alloc(v17);
  v4[40] = swift_task_alloc(v17);
  v18 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v4[41] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[42] = v19;
  v4[43] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_101106530) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[44] = swift_task_alloc(v20);
  v4[45] = swift_task_alloc(v20);
  return swift_task_switch(sub_10073A518, 0, 0);
}

void sub_10073A518()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSNumber v81;
  _QWORD *v82;
  uint64_t v83;

  *(_QWORD *)(v0 + 128) = _swiftEmptyArrayStorage;
  v82 = (_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 468) = v2;
  v3 = 1 << v2;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v6 << 6);
      v9 = *(_QWORD *)(v0 + 160);
LABEL_8:
      v10 = *(_QWORD *)(v0 + 352);
      sub_10005972C(*(_QWORD *)(v9 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 336) + 72) * v8, v10, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v11 = *(_QWORD *)(v9 + 56);
      v12 = sub_10001A9A8(&qword_101106538);
      v13 = *(_QWORD *)(v11 + 8 * v8);
      *(_QWORD *)(v10 + *(int *)(v12 + 48)) = v13;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 0, 1, v12);
      swift_bridgeObjectRetain(v13);
      goto LABEL_15;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return;
    }
    v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 468)) + 63) >> 6;
    if (v14 >= v15)
    {
      v18 = v6;
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 160);
      v16 = v9 + 64;
      v17 = *(_QWORD *)(v9 + 64 + 8 * v14);
      if (v17)
        goto LABEL_12;
      v18 = v6 + 1;
      if (v6 + 2 < v15)
      {
        v17 = *(_QWORD *)(v16 + 8 * (v6 + 2));
        if (v17)
        {
          v14 = v6 + 2;
LABEL_12:
          v5 = (v17 - 1) & v17;
          v8 = __clz(__rbit64(v17)) + (v14 << 6);
          v6 = v14;
          goto LABEL_8;
        }
        v18 = v6 + 2;
        if (v6 + 3 < v15)
        {
          v17 = *(_QWORD *)(v16 + 8 * (v6 + 3));
          if (v17)
          {
            v14 = v6 + 3;
            goto LABEL_12;
          }
          v14 = v6 + 4;
          v18 = v6 + 3;
          if (v6 + 4 < v15)
          {
            v17 = *(_QWORD *)(v16 + 8 * v14);
            if (v17)
              goto LABEL_12;
            v18 = v15 - 1;
            v28 = v15 - 5;
            while (v28 != v6)
            {
              v17 = *(_QWORD *)(v9 + 104 + 8 * v6++);
              if (v17)
              {
                v14 = v6 + 4;
                goto LABEL_12;
              }
            }
          }
        }
      }
    }
    v19 = *(_QWORD *)(v0 + 352);
    v20 = sub_10001A9A8(&qword_101106538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
    v5 = 0;
    v6 = v18;
LABEL_15:
    *(_QWORD *)(v0 + 368) = v6;
    *(_QWORD *)(v0 + 376) = v5;
    v21 = *(_QWORD *)(v0 + 360);
    sub_100005CF0(*(_QWORD *)(v0 + 352), v21, &qword_101106530);
    v22 = sub_10001A9A8(&qword_101106538);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22) == 1)
    {
      v30 = *(_QWORD *)(v0 + 352);
      v29 = *(_QWORD *)(v0 + 360);
      v31 = *(_QWORD *)(v0 + 344);
      v33 = *(_QWORD *)(v0 + 312);
      v32 = *(_QWORD *)(v0 + 320);
      v34 = *(_QWORD *)(v0 + 304);
      v35 = *(_QWORD *)(v0 + 272);
      v36 = *(_QWORD *)(v0 + 280);
      v37 = *(_QWORD *)(v0 + 256);
      v72 = *(_QWORD *)(v0 + 248);
      v74 = *(_QWORD *)(v0 + 224);
      v76 = *(_QWORD *)(v0 + 216);
      v78 = *(_QWORD *)(v0 + 208);
      v83 = *(_QWORD *)(v0 + 184);
      swift_release();
      v80 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v36);
      swift_task_dealloc(v35);
      swift_task_dealloc(v37);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v76);
      swift_task_dealloc(v78);
      swift_task_dealloc(v83);
      (*(void (**)(uint64_t))(v0 + 8))(v80);
      return;
    }
    v23 = *(_QWORD *)(v0 + 360);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD **)(v23 + *(int *)(v22 + 48));
    sub_1000126EC(v23, *(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (*(_QWORD *)(v24 + 16))
    {
      v26 = sub_1005199F8(*(_QWORD *)(v0 + 344));
      if ((v27 & 1) != 0)
        break;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  v38 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 56) + 24 * v26);
  *(_QWORD *)(v0 + 384) = *v38;
  v39 = v38[1];
  *(_QWORD *)(v0 + 392) = v39;
  v40 = v25[2];
  if (v40)
  {
    v70 = v25[5];
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v25);
    v71 = v25;
    v41 = v25 + 9;
    v42 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v79 = v40;
      v45 = *(v41 - 1);
      v46 = *v41;
      v73 = *(v41 - 3);
      v75 = *(v41 - 2);
      sub_10001BBBC(v73, v75);
      sub_10001BBBC(v45, v46);
      swift_bridgeObjectRetain(v42);
      sub_10001BBBC(v45, v46);
      v47 = Data.subdata(in:)(0, 16, v45, v46);
      v49 = v48;
      v77 = v45;
      sub_10001BC14(v45, v46);
      v81.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
      *v82 = v42;
      v52 = sub_100519764(v47, v49);
      v53 = v42[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        goto LABEL_50;
      v56 = v51;
      if (v42[3] >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100AA0538();
      }
      else
      {
        sub_100A925CC(v55, isUniquelyReferenced_nonNull_native);
        v57 = sub_100519764(v47, v49);
        if ((v56 & 1) != (v58 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
          return;
        }
        v52 = v57;
      }
      v59 = (_QWORD *)*v82;
      if ((v56 & 1) != 0)
      {
        v43 = v59[7];
        v44 = 8 * v52;

        *(NSNumber *)(v43 + v44) = v81;
      }
      else
      {
        v59[(v52 >> 6) + 8] |= 1 << v52;
        v60 = (uint64_t *)(v59[6] + 16 * v52);
        *v60 = v47;
        v60[1] = v49;
        *(NSNumber *)(v59[7] + 8 * v52) = v81;
        v61 = v59[2];
        v62 = __OFADD__(v61, 1);
        v63 = v61 + 1;
        if (v62)
          goto LABEL_51;
        v59[2] = v63;
        sub_10001BBBC(v47, v49);
      }
      v41 += 6;
      swift_bridgeObjectRelease();
      sub_10001BC14(v47, v49);
      sub_10001BC14(v73, v75);
      sub_10001BC14(v77, v46);
      swift_bridgeObjectRelease();
      v42 = v59;
      v40 = v79 - 1;
      if (v79 == 1)
      {
        v25 = v71;
        swift_bridgeObjectRelease();
        v64 = v70;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRetain(v39);
  v59 = _swiftEmptyDictionarySingleton;
  v64 = 1;
LABEL_47:
  *(_QWORD *)(v0 + 400) = v59;
  *(_QWORD *)(v0 + 408) = v64;
  v65 = *(_QWORD *)(v0 + 344);
  v66 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 416) = sub_100737608(v25);
  swift_bridgeObjectRelease();
  v67 = *(int *)(v66 + 20);
  *(_DWORD *)(v0 + 464) = v67;
  v68 = v65 + v67;
  v69 = (_QWORD *)swift_task_alloc(dword_1011064BC);
  *(_QWORD *)(v0 + 424) = v69;
  *v69 = v0;
  v69[1] = sub_10073AB70;
  sub_10073EBD4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 344), v68);
}

uint64_t sub_10073AB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_errorRelease(v0);
    v3 = sub_10073C858;
  }
  else
  {
    v3 = sub_10073ABDC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10073ABDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v80;
  unint64_t v81;
  _BOOL8 v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSNumber v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 280);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 296) + 48))(v2, 1, v1) != 1)
  {
    v45 = *(_QWORD *)(v0 + 344);
    v46 = *(_QWORD *)(v0 + 320);
    v47 = *(_QWORD *)(v0 + 272);
    v112 = *(_QWORD *)(v0 + 264);
    v49 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD **)(v0 + 176);
    v51 = v45 + *(int *)(v0 + 464);
    sub_1000126EC(v2, v46, type metadata accessor for KeySyncRecord);
    v52 = sub_10001AA44(v50, v50[3]);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16);
    *(_QWORD *)(v0 + 440) = v53;
    v53(v47, v45, v49);
    v53(v47 + *(int *)(v112 + 20), v51, v49);
    v54 = *(_QWORD *)(v46 + *(int *)(v1 + 20));
    v55 = *v52;
    v56 = v52[1];
    v57 = v52[2];
    v58 = (_QWORD *)swift_task_alloc(dword_101115C8C);
    *(_QWORD *)(v0 + 448) = v58;
    *v58 = v0;
    v58[1] = sub_10073B4D0;
    return sub_100B3B1A8(v0 + 64, *(_QWORD *)(v0 + 272), 0, v54, v55, v56, v57);
  }
  v3 = *(_QWORD *)(v0 + 200);
  sub_100004048(v2, &qword_1010F7AE0);
  v4 = *(void (**)(void))(v3 + 16);
  v106 = *(_QWORD *)(v0 + 408);
  v103 = *(_QWORD *)(v0 + 400);
  v115 = *(_QWORD *)(v0 + 392);
  v109 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(int **)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 208);
  v99 = *(_QWORD *)(v0 + 216);
  v9 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v10 = v5 + *(int *)(v0 + 464);
  v11 = *(void **)(v0 + 152);
  v4();
  ((void (*)(uint64_t, uint64_t, uint64_t))v4)(v7, v10, v8);
  sub_10000F9B8(v5 + v6[6], v9, &qword_1010ED860);
  v12 = (uint64_t *)(v5 + v6[8]);
  v13 = v12[1];
  v97 = *v12;
  LOBYTE(v4) = *(_BYTE *)(v5 + v6[11]);
  LOBYTE(v8) = *(_BYTE *)(v5 + v6[12]);
  v14 = sub_10001A9A8(&qword_10111BE20);
  v15 = swift_allocObject(v14, 40, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v15 + 32) = v11;
  specialized Array._endMutation()(v15);
  v16 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain(v13);
  sub_10001BD08(0, 0xF000000000000000);
  v17 = v11;
  v18 = sub_10073FE80(v99, v7, v9, v97, v13, v8, v109, v115, (char)v4, v106, v103, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
  v20 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v19 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v20 >= v19 >> 1)
LABEL_52:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
  v116 = (_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v18);
  specialized Array._endMutation()(v22);

  sub_10001EF3C(0, 0xF000000000000000);
  sub_1000126B0(v21, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  v23 = *(_QWORD *)(v0 + 368);
  v24 = *(_QWORD *)(v0 + 376);
  v20 = 1;
  while (1)
  {
    if (v24)
    {
      v25 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v26 = v25 | (v23 << 6);
      v27 = *(_QWORD *)(v0 + 160);
LABEL_7:
      v28 = *(_QWORD *)(v0 + 352);
      sub_10005972C(*(_QWORD *)(v27 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 336) + 72) * v26, v28, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v29 = *(_QWORD *)(v27 + 56);
      v30 = sub_10001A9A8(&qword_101106538);
      v31 = *(_QWORD *)(v29 + 8 * v26);
      *(_QWORD *)(v28 + *(int *)(v30 + 48)) = v31;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v28, 0, 1, v30);
      swift_bridgeObjectRetain(v31);
      goto LABEL_14;
    }
    v19 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v32 = (unint64_t)((1 << *(_BYTE *)(v0 + 468)) + 63) >> 6;
    if ((uint64_t)v19 >= v32)
    {
      v35 = v23;
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 160);
      v33 = v27 + 64;
      v34 = *(_QWORD *)(v27 + 64 + 8 * v19);
      if (v34)
        goto LABEL_11;
      v35 = v23 + 1;
      if ((uint64_t)(v23 + 2) < v32)
      {
        v34 = *(_QWORD *)(v33 + 8 * (v23 + 2));
        if (v34)
        {
          v19 = v23 + 2;
LABEL_11:
          v24 = (v34 - 1) & v34;
          v26 = __clz(__rbit64(v34)) + (v19 << 6);
          v23 = v19;
          goto LABEL_7;
        }
        v35 = v23 + 2;
        if ((uint64_t)(v23 + 3) < v32)
        {
          v34 = *(_QWORD *)(v33 + 8 * (v23 + 3));
          if (v34)
          {
            v19 = v23 + 3;
            goto LABEL_11;
          }
          v19 = v23 + 4;
          v35 = v23 + 3;
          if ((uint64_t)(v23 + 4) < v32)
          {
            v34 = *(_QWORD *)(v33 + 8 * v19);
            if (v34)
              goto LABEL_11;
            v35 = v32 - 1;
            v44 = v32 - 5;
            while (v44 != v23)
            {
              v34 = *(_QWORD *)(v27 + 104 + 8 * v23++);
              if (v34)
              {
                v19 = v23 + 4;
                goto LABEL_11;
              }
            }
          }
        }
      }
    }
    v36 = *(_QWORD *)(v0 + 352);
    v37 = sub_10001A9A8(&qword_101106538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v36, 1, 1, v37);
    v24 = 0;
    v23 = v35;
LABEL_14:
    *(_QWORD *)(v0 + 368) = v23;
    *(_QWORD *)(v0 + 376) = v24;
    v38 = *(_QWORD *)(v0 + 360);
    sub_100005CF0(*(_QWORD *)(v0 + 352), v38, &qword_101106530);
    v39 = sub_10001A9A8(&qword_101106538);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39) == 1)
    {
      v61 = *(_QWORD *)(v0 + 352);
      v60 = *(_QWORD *)(v0 + 360);
      v62 = *(_QWORD *)(v0 + 344);
      v64 = *(_QWORD *)(v0 + 312);
      v63 = *(_QWORD *)(v0 + 320);
      v65 = *(_QWORD *)(v0 + 304);
      v66 = *(_QWORD *)(v0 + 272);
      v67 = *(_QWORD *)(v0 + 280);
      v68 = *(_QWORD *)(v0 + 256);
      v101 = *(_QWORD *)(v0 + 248);
      v104 = *(_QWORD *)(v0 + 224);
      v107 = *(_QWORD *)(v0 + 216);
      v110 = *(_QWORD *)(v0 + 208);
      v117 = *(_QWORD *)(v0 + 184);
      swift_release();
      v113 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v101);
      swift_task_dealloc(v104);
      swift_task_dealloc(v107);
      swift_task_dealloc(v110);
      swift_task_dealloc(v117);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v113);
    }
    v40 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD **)(v0 + 168);
    v41 = *(_QWORD **)(v40 + *(int *)(v39 + 48));
    sub_1000126EC(v40, *(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v18[2])
    {
      v42 = sub_1005199F8(*(_QWORD *)(v0 + 344));
      if ((v43 & 1) != 0)
        break;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  v69 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 56) + 24 * v42);
  *(_QWORD *)(v0 + 384) = *v69;
  v70 = v69[1];
  *(_QWORD *)(v0 + 392) = v70;
  v71 = v41[2];
  if (v71)
  {
    v98 = v41[5];
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v41);
    v100 = v41;
    v72 = v41 + 9;
    v73 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v111 = v71;
      v76 = *(v72 - 1);
      v77 = *v72;
      v102 = *(v72 - 3);
      v105 = *(v72 - 2);
      sub_10001BBBC(v102, v105);
      sub_10001BBBC(v76, v77);
      swift_bridgeObjectRetain(v73);
      sub_10001BBBC(v76, v77);
      v18 = (_QWORD *)Data.subdata(in:)(0, 16, v76, v77);
      v20 = v78;
      v108 = v76;
      sub_10001BC14(v76, v77);
      v114.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v73);
      *v116 = v73;
      v81 = sub_100519764((uint64_t)v18, v20);
      v19 = v73[2];
      v82 = (v80 & 1) == 0;
      v83 = v19 + v82;
      if (__OFADD__(v19, v82))
        goto LABEL_50;
      v84 = v80;
      if (v73[3] >= v83)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100AA0538();
      }
      else
      {
        sub_100A925CC(v83, isUniquelyReferenced_nonNull_native);
        v85 = sub_100519764((uint64_t)v18, v20);
        if ((v84 & 1) != (v86 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        v81 = v85;
      }
      v87 = (_QWORD *)*v116;
      if ((v84 & 1) != 0)
      {
        v74 = v87[7];
        v75 = 8 * v81;

        *(NSNumber *)(v74 + v75) = v114;
      }
      else
      {
        v87[(v81 >> 6) + 8] |= 1 << v81;
        v88 = (_QWORD *)(v87[6] + 16 * v81);
        *v88 = v18;
        v88[1] = v20;
        *(NSNumber *)(v87[7] + 8 * v81) = v114;
        v89 = v87[2];
        v90 = __OFADD__(v89, 1);
        v19 = v89 + 1;
        if (v90)
          goto LABEL_51;
        v87[2] = v19;
        sub_10001BBBC((uint64_t)v18, v20);
      }
      v72 += 6;
      swift_bridgeObjectRelease();
      sub_10001BC14((uint64_t)v18, v20);
      sub_10001BC14(v102, v105);
      sub_10001BC14(v108, v77);
      swift_bridgeObjectRelease();
      v73 = v87;
      v71 = v111 - 1;
      if (v111 == 1)
      {
        v41 = v100;
        swift_bridgeObjectRelease();
        v91 = v98;
        goto LABEL_47;
      }
    }
  }
  swift_bridgeObjectRetain(v70);
  v87 = _swiftEmptyDictionarySingleton;
  v91 = 1;
LABEL_47:
  *(_QWORD *)(v0 + 400) = v87;
  *(_QWORD *)(v0 + 408) = v91;
  v92 = *(_QWORD *)(v0 + 344);
  v93 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 416) = sub_100737608(v41);
  swift_bridgeObjectRelease();
  v94 = *(int *)(v93 + 20);
  *(_DWORD *)(v0 + 464) = v94;
  v95 = v92 + v94;
  v96 = (_QWORD *)swift_task_alloc(dword_1011064BC);
  *(_QWORD *)(v0 + 424) = v96;
  *v96 = v0;
  v96[1] = sub_10073AB70;
  return sub_10073EBD4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 344), v95);
}

uint64_t sub_10073B4D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 272);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_1000126B0(v4, type metadata accessor for BeaconIdentifier);
    v5 = sub_10073C078;
  }
  else
  {
    sub_1000126B0(v4, type metadata accessor for BeaconIdentifier);
    v5 = sub_10073B560;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10073B560()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(void);
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v94;
  unint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t (*v101)(uint64_t);
  _QWORD *v102;
  uint64_t v103;
  BOOL v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unsigned __int8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSNumber v129;
  uint64_t v130;
  uint64_t (**v131)(uint64_t);
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  sub_100005CF0(v0 + 64, v0 + 16, &qword_101106540);
  if (*(_BYTE *)(v0 + 16) == 3
    || (v2 = *(_QWORD *)(v0 + 32),
        v1 = *(_QWORD *)(v0 + 40),
        sub_10001BBBC(v2, v1),
        sub_1007402A0(v0 + 64),
        v1 >> 60 == 15))
  {
    sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for KeySyncRecord);
    v3 = 0;
    v133 = 0xF000000000000000;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 232);
    v4 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 224);
    sub_10001BBBC(v2, v1);
    MACAddress.init(addressToSanitize:type:)(v2, v1, 1);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v134 = v2;
    v9 = *(_QWORD *)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v10 = *(_QWORD *)(v0 + 232);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 32);
    v11(v9, *(_QWORD *)(v0 + 224), v10);
    v11(v8, v9, v10);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v13 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 320);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7660);
    v15 = sub_10005972C(v12, v13, type metadata accessor for KeySyncRecord);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 312);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 304);
      v120 = *(_QWORD *)(v0 + 288);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v136 = v22;
      *(_DWORD *)v21 = 136315138;
      sub_10005972C(v19, v20, type metadata accessor for KeySyncRecord);
      v23 = String.init<A>(describing:)(v20, v120);
      *(_QWORD *)(v0 + 144) = sub_100016940(v23, v24, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v19, type metadata accessor for KeySyncRecord);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "lastConnectedLEMAC based on %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for KeySyncRecord);
    }

    v127 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 256);
    v27 = *(_QWORD *)(v0 + 232);
    v26 = *(_QWORD *)(v0 + 240);
    v28 = Data.init(stringLiteral:)(12592, 0xE200000000000000);
    v30 = v29;
    v31 = MACAddress.data.getter(v28);
    v33 = v32;
    *(_QWORD *)(v0 + 112) = v28;
    *(_QWORD *)(v0 + 120) = v30;
    sub_10001BBBC(v28, v30);
    sub_10078E27C(v31, v33);
    sub_10001EF3C(v134, v1);
    sub_10001BC14(v31, v33);
    sub_10001BC14(v28, v30);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    sub_1000126B0(v127, type metadata accessor for KeySyncRecord);
    v3 = *(uint64_t (**)(uint64_t))(v0 + 112);
    v133 = *(_QWORD *)(v0 + 120);
  }
  v34 = *(void (**)(void))(v0 + 440);
  v121 = *(_QWORD *)(v0 + 408);
  v117 = *(_QWORD *)(v0 + 400);
  v130 = *(_QWORD *)(v0 + 392);
  v124 = *(_QWORD *)(v0 + 384);
  v35 = *(_QWORD *)(v0 + 344);
  v36 = *(int **)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 208);
  v114 = *(_QWORD *)(v0 + 216);
  v39 = *(_QWORD *)(v0 + 184);
  v38 = *(_QWORD *)(v0 + 192);
  v40 = v35 + *(int *)(v0 + 464);
  v41 = *(void **)(v0 + 152);
  v34();
  ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v37, v40, v38);
  sub_10000F9B8(v35 + v36[6], v39, &qword_1010ED860);
  v42 = (uint64_t *)(v35 + v36[8]);
  v43 = v42[1];
  v113 = *v42;
  v44 = v36[12];
  LOBYTE(v36) = *(_BYTE *)(v35 + v36[11]);
  v112 = *(_BYTE *)(v35 + v44);
  v45 = sub_10001A9A8(&qword_10111BE20);
  v46 = swift_allocObject(v45, 40, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v46 + 32) = v41;
  v136 = v46;
  specialized Array._endMutation()(v46);
  v47 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain(v43);
  sub_10001BD08((uint64_t)v3, v133);
  v48 = v41;
  v49 = sub_10073FE80(v114, v37, v39, v113, v43, v112, v124, v130, (char)v36, v121, v117, (uint64_t)v3, v133);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
  v51 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v50 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v51 >= v50 >> 1)
LABEL_60:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
  v131 = (uint64_t (**)(uint64_t))(v0 + 136);
  v52 = *(_QWORD *)(v0 + 344);
  v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
  specialized Array._endMutation()(v53);

  sub_10001EF3C((uint64_t)v3, v133);
  v3 = type metadata accessor for ManagedCBPeripheralBeaconInfo;
  sub_1000126B0(v52, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  v54 = *(_QWORD *)(v0 + 368);
  v55 = *(_QWORD *)(v0 + 376);
  while (1)
  {
    if (v55)
    {
      v56 = __clz(__rbit64(v55));
      v55 &= v55 - 1;
      v57 = v56 | (v54 << 6);
      v58 = *(_QWORD *)(v0 + 160);
LABEL_16:
      v59 = *(_QWORD *)(v0 + 352);
      sub_10005972C(*(_QWORD *)(v58 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 336) + 72) * v57, v59, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v60 = *(_QWORD *)(v58 + 56);
      v61 = sub_10001A9A8(&qword_101106538);
      v62 = *(_QWORD *)(v60 + 8 * v57);
      *(_QWORD *)(v59 + *(int *)(v61 + 48)) = v62;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v59, 0, 1, v61);
      swift_bridgeObjectRetain(v62);
      goto LABEL_23;
    }
    v50 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    v63 = (unint64_t)((1 << *(_BYTE *)(v0 + 468)) + 63) >> 6;
    if ((uint64_t)v50 >= v63)
    {
      v66 = v54;
    }
    else
    {
      v58 = *(_QWORD *)(v0 + 160);
      v64 = v58 + 64;
      v65 = *(_QWORD *)(v58 + 64 + 8 * v50);
      if (v65)
        goto LABEL_20;
      v66 = v54 + 1;
      if ((uint64_t)(v54 + 2) < v63)
      {
        v65 = *(_QWORD *)(v64 + 8 * (v54 + 2));
        if (v65)
        {
          v50 = v54 + 2;
LABEL_20:
          v55 = (v65 - 1) & v65;
          v57 = __clz(__rbit64(v65)) + (v50 << 6);
          v54 = v50;
          goto LABEL_16;
        }
        v66 = v54 + 2;
        if ((uint64_t)(v54 + 3) < v63)
        {
          v65 = *(_QWORD *)(v64 + 8 * (v54 + 3));
          if (v65)
          {
            v50 = v54 + 3;
            goto LABEL_20;
          }
          v50 = v54 + 4;
          v66 = v54 + 3;
          if ((uint64_t)(v54 + 4) < v63)
          {
            v65 = *(_QWORD *)(v64 + 8 * v50);
            if (v65)
              goto LABEL_20;
            v66 = v63 - 1;
            v75 = v63 - 5;
            while (v75 != v54)
            {
              v65 = *(_QWORD *)(v58 + 104 + 8 * v54++);
              if (v65)
              {
                v50 = v54 + 4;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
    v67 = *(_QWORD *)(v0 + 352);
    v68 = sub_10001A9A8(&qword_101106538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
    v55 = 0;
    v54 = v66;
LABEL_23:
    *(_QWORD *)(v0 + 368) = v54;
    *(_QWORD *)(v0 + 376) = v55;
    v69 = *(_QWORD *)(v0 + 360);
    sub_100005CF0(*(_QWORD *)(v0 + 352), v69, &qword_101106530);
    v70 = sub_10001A9A8(&qword_101106538);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70);
    v51 = *(_QWORD *)(v0 + 360);
    if (v71 == 1)
    {
      v77 = *(_QWORD *)(v0 + 344);
      v76 = *(_QWORD *)(v0 + 352);
      v79 = *(_QWORD *)(v0 + 312);
      v78 = *(_QWORD *)(v0 + 320);
      v80 = *(_QWORD *)(v0 + 304);
      v81 = *(_QWORD *)(v0 + 272);
      v82 = *(_QWORD *)(v0 + 280);
      v83 = *(_QWORD *)(v0 + 256);
      v118 = *(_QWORD *)(v0 + 248);
      v122 = *(_QWORD *)(v0 + 224);
      v125 = *(_QWORD *)(v0 + 216);
      v128 = *(_QWORD *)(v0 + 208);
      v135 = *(_QWORD *)(v0 + 184);
      swift_release();
      v132 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(v51);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v82);
      swift_task_dealloc(v81);
      swift_task_dealloc(v83);
      swift_task_dealloc(v118);
      swift_task_dealloc(v122);
      swift_task_dealloc(v125);
      swift_task_dealloc(v128);
      swift_task_dealloc(v135);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v132);
    }
    v49 = *(_QWORD **)(v0 + 168);
    v72 = *(_QWORD **)(v51 + *(int *)(v70 + 48));
    sub_1000126EC(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v49[2])
    {
      v133 = (unint64_t)v72;
      v73 = sub_1005199F8(*(_QWORD *)(v0 + 344));
      if ((v74 & 1) != 0)
        break;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  v84 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 56) + 24 * v73);
  *(_QWORD *)(v0 + 384) = *v84;
  v85 = v84[1];
  *(_QWORD *)(v0 + 392) = v85;
  v86 = v72[2];
  if (v86)
  {
    v115 = v72[5];
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(v72);
    v87 = v72 + 9;
    v3 = (uint64_t (*)(uint64_t))_swiftEmptyDictionarySingleton;
    while (1)
    {
      v126 = v86;
      v90 = *(v87 - 1);
      v91 = *v87;
      v116 = *(v87 - 3);
      v119 = *(v87 - 2);
      sub_10001BBBC(v116, v119);
      sub_10001BBBC(v90, v91);
      swift_bridgeObjectRetain(v3);
      sub_10001BBBC(v90, v91);
      v49 = (_QWORD *)Data.subdata(in:)(0, 16, v90, v91);
      v51 = v92;
      v123 = v90;
      sub_10001BC14(v90, v91);
      v129.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      *v131 = v3;
      v95 = sub_100519764((uint64_t)v49, v51);
      v50 = *((_QWORD *)v3 + 2);
      v96 = (v94 & 1) == 0;
      v97 = v50 + v96;
      if (__OFADD__(v50, v96))
        goto LABEL_58;
      v98 = v94;
      if (*((_QWORD *)v3 + 3) >= v97)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100AA0538();
      }
      else
      {
        sub_100A925CC(v97, isUniquelyReferenced_nonNull_native);
        v99 = sub_100519764((uint64_t)v49, v51);
        if ((v98 & 1) != (v100 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        v95 = v99;
      }
      v101 = *v131;
      if ((v98 & 1) != 0)
      {
        v88 = *((_QWORD *)v101 + 7);
        v89 = 8 * v95;

        *(NSNumber *)(v88 + v89) = v129;
      }
      else
      {
        *((_QWORD *)v101 + (v95 >> 6) + 8) |= 1 << v95;
        v102 = (_QWORD *)(*((_QWORD *)v101 + 6) + 16 * v95);
        *v102 = v49;
        v102[1] = v51;
        *(NSNumber *)(*((_QWORD *)v101 + 7) + 8 * v95) = v129;
        v103 = *((_QWORD *)v101 + 2);
        v104 = __OFADD__(v103, 1);
        v50 = v103 + 1;
        if (v104)
          goto LABEL_59;
        *((_QWORD *)v101 + 2) = v50;
        sub_10001BBBC((uint64_t)v49, v51);
      }
      v87 += 6;
      swift_bridgeObjectRelease();
      sub_10001BC14((uint64_t)v49, v51);
      sub_10001BC14(v116, v119);
      sub_10001BC14(v123, v91);
      swift_bridgeObjectRelease();
      v3 = v101;
      v86 = v126 - 1;
      if (v126 == 1)
      {
        v105 = (_QWORD *)v133;
        swift_bridgeObjectRelease();
        v106 = v115;
        goto LABEL_55;
      }
    }
  }
  swift_bridgeObjectRetain(v85);
  v105 = v72;
  v101 = (uint64_t (*)(uint64_t))_swiftEmptyDictionarySingleton;
  v106 = 1;
LABEL_55:
  *(_QWORD *)(v0 + 400) = v101;
  *(_QWORD *)(v0 + 408) = v106;
  v107 = *(_QWORD *)(v0 + 344);
  v108 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 416) = sub_100737608(v105);
  swift_bridgeObjectRelease();
  v109 = *(int *)(v108 + 20);
  *(_DWORD *)(v0 + 464) = v109;
  v110 = v107 + v109;
  v111 = (_QWORD *)swift_task_alloc(dword_1011064BC);
  *(_QWORD *)(v0 + 424) = v111;
  *v111 = v0;
  v111[1] = sub_10073AB70;
  return sub_10073EBD4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 344), v110);
}

uint64_t sub_10073C078()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  unint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  NSNumber v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;

  sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for KeySyncRecord);
  v1 = *(void (**)(void))(v0 + 440);
  v89 = *(_QWORD *)(v0 + 408);
  v86 = *(_QWORD *)(v0 + 400);
  v97 = *(_QWORD *)(v0 + 392);
  v92 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(int **)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 208);
  v82 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = v2 + *(int *)(v0 + 464);
  v8 = *(void **)(v0 + 152);
  v1();
  ((void (*)(uint64_t, uint64_t, uint64_t))v1)(v4, v7, v5);
  sub_10000F9B8(v2 + v3[6], v6, &qword_1010ED860);
  v9 = (uint64_t *)(v2 + v3[8]);
  v10 = v9[1];
  v80 = *v9;
  LOBYTE(v1) = *(_BYTE *)(v2 + v3[11]);
  LOBYTE(v5) = *(_BYTE *)(v2 + v3[12]);
  v11 = sub_10001A9A8(&qword_10111BE20);
  v12 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v12 + 32) = v8;
  specialized Array._endMutation()(v12);
  v13 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain(v10);
  sub_10001BD08(0, 0xF000000000000000);
  v14 = v8;
  v15 = sub_10073FE80(v82, v4, v6, v80, v10, v5, v92, v97, (char)v1, v89, v86, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  isUniquelyReferenced_nonNull_native = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v16 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (isUniquelyReferenced_nonNull_native >= v16 >> 1)
LABEL_50:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, isUniquelyReferenced_nonNull_native + 1, 1);
  v98 = (_QWORD *)(v0 + 136);
  v18 = *(_QWORD *)(v0 + 344);
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v15);
  specialized Array._endMutation()(v19);

  sub_10001EF3C(0, 0xF000000000000000);
  sub_1000126B0(v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  v20 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  isUniquelyReferenced_nonNull_native = 1;
  while (1)
  {
    if (v21)
    {
      v22 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v23 = v22 | (v20 << 6);
      v24 = *(_QWORD *)(v0 + 160);
LABEL_6:
      v25 = *(_QWORD *)(v0 + 352);
      sub_10005972C(*(_QWORD *)(v24 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 336) + 72) * v23, v25, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v26 = *(_QWORD *)(v24 + 56);
      v27 = sub_10001A9A8(&qword_101106538);
      v28 = *(_QWORD *)(v26 + 8 * v23);
      *(_QWORD *)(v25 + *(int *)(v27 + 48)) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v25, 0, 1, v27);
      swift_bridgeObjectRetain(v28);
      goto LABEL_13;
    }
    v16 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v29 = (unint64_t)((1 << *(_BYTE *)(v0 + 468)) + 63) >> 6;
    if ((uint64_t)v16 >= v29)
    {
      v32 = v20;
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 160);
      v30 = v24 + 64;
      v31 = *(_QWORD *)(v24 + 64 + 8 * v16);
      if (v31)
        goto LABEL_10;
      v32 = v20 + 1;
      if ((uint64_t)(v20 + 2) < v29)
      {
        v31 = *(_QWORD *)(v30 + 8 * (v20 + 2));
        if (v31)
        {
          v16 = v20 + 2;
LABEL_10:
          v21 = (v31 - 1) & v31;
          v23 = __clz(__rbit64(v31)) + (v16 << 6);
          v20 = v16;
          goto LABEL_6;
        }
        v32 = v20 + 2;
        if ((uint64_t)(v20 + 3) < v29)
        {
          v31 = *(_QWORD *)(v30 + 8 * (v20 + 3));
          if (v31)
          {
            v16 = v20 + 3;
            goto LABEL_10;
          }
          v16 = v20 + 4;
          v32 = v20 + 3;
          if ((uint64_t)(v20 + 4) < v29)
          {
            v31 = *(_QWORD *)(v30 + 8 * v16);
            if (v31)
              goto LABEL_10;
            v32 = v29 - 1;
            v41 = v29 - 5;
            while (v41 != v20)
            {
              v31 = *(_QWORD *)(v24 + 104 + 8 * v20++);
              if (v31)
              {
                v16 = v20 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    v33 = *(_QWORD *)(v0 + 352);
    v34 = sub_10001A9A8(&qword_101106538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
    v21 = 0;
    v20 = v32;
LABEL_13:
    *(_QWORD *)(v0 + 368) = v20;
    *(_QWORD *)(v0 + 376) = v21;
    v35 = *(_QWORD *)(v0 + 360);
    sub_100005CF0(*(_QWORD *)(v0 + 352), v35, &qword_101106530);
    v36 = sub_10001A9A8(&qword_101106538);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36) == 1)
    {
      v43 = *(_QWORD *)(v0 + 352);
      v42 = *(_QWORD *)(v0 + 360);
      v44 = *(_QWORD *)(v0 + 344);
      v46 = *(_QWORD *)(v0 + 312);
      v45 = *(_QWORD *)(v0 + 320);
      v47 = *(_QWORD *)(v0 + 304);
      v48 = *(_QWORD *)(v0 + 272);
      v49 = *(_QWORD *)(v0 + 280);
      v50 = *(_QWORD *)(v0 + 256);
      v84 = *(_QWORD *)(v0 + 248);
      v87 = *(_QWORD *)(v0 + 224);
      v90 = *(_QWORD *)(v0 + 216);
      v93 = *(_QWORD *)(v0 + 208);
      v99 = *(_QWORD *)(v0 + 184);
      swift_release();
      v95 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v84);
      swift_task_dealloc(v87);
      swift_task_dealloc(v90);
      swift_task_dealloc(v93);
      swift_task_dealloc(v99);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v95);
    }
    v37 = *(_QWORD *)(v0 + 360);
    v15 = *(_QWORD **)(v0 + 168);
    v38 = *(_QWORD **)(v37 + *(int *)(v36 + 48));
    sub_1000126EC(v37, *(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v15[2])
    {
      v39 = sub_1005199F8(*(_QWORD *)(v0 + 344));
      if ((v40 & 1) != 0)
        break;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  v52 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 56) + 24 * v39);
  *(_QWORD *)(v0 + 384) = *v52;
  v53 = v52[1];
  *(_QWORD *)(v0 + 392) = v53;
  v54 = v38[2];
  if (v54)
  {
    v81 = v38[5];
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v38);
    v83 = v38;
    v55 = v38 + 9;
    v56 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v94 = v54;
      v59 = *(v55 - 1);
      v60 = *v55;
      v85 = *(v55 - 3);
      v88 = *(v55 - 2);
      sub_10001BBBC(v85, v88);
      sub_10001BBBC(v59, v60);
      swift_bridgeObjectRetain(v56);
      sub_10001BBBC(v59, v60);
      v61 = Data.subdata(in:)(0, 16, v59, v60);
      v15 = v62;
      v91 = v59;
      sub_10001BC14(v59, v60);
      v96.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
      *v98 = v56;
      v64 = sub_100519764(v61, (uint64_t)v15);
      v16 = v56[2];
      v65 = (v63 & 1) == 0;
      v66 = v16 + v65;
      if (__OFADD__(v16, v65))
        goto LABEL_48;
      v67 = v63;
      if (v56[3] >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100AA0538();
      }
      else
      {
        sub_100A925CC(v66, isUniquelyReferenced_nonNull_native);
        v68 = sub_100519764(v61, (uint64_t)v15);
        if ((v67 & 1) != (v69 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        v64 = v68;
      }
      v70 = (_QWORD *)*v98;
      if ((v67 & 1) != 0)
      {
        v57 = v70[7];
        v58 = 8 * v64;

        *(NSNumber *)(v57 + v58) = v96;
      }
      else
      {
        v70[(v64 >> 6) + 8] |= 1 << v64;
        v71 = (uint64_t *)(v70[6] + 16 * v64);
        *v71 = v61;
        v71[1] = (uint64_t)v15;
        *(NSNumber *)(v70[7] + 8 * v64) = v96;
        v72 = v70[2];
        v73 = __OFADD__(v72, 1);
        v16 = v72 + 1;
        if (v73)
          goto LABEL_49;
        v70[2] = v16;
        sub_10001BBBC(v61, (unint64_t)v15);
      }
      v55 += 6;
      swift_bridgeObjectRelease();
      sub_10001BC14(v61, (unint64_t)v15);
      sub_10001BC14(v85, v88);
      sub_10001BC14(v91, v60);
      swift_bridgeObjectRelease();
      v56 = v70;
      v54 = v94 - 1;
      if (v94 == 1)
      {
        v38 = v83;
        swift_bridgeObjectRelease();
        v74 = v81;
        goto LABEL_45;
      }
    }
  }
  swift_bridgeObjectRetain(v53);
  v70 = _swiftEmptyDictionarySingleton;
  v74 = 1;
LABEL_45:
  *(_QWORD *)(v0 + 400) = v70;
  *(_QWORD *)(v0 + 408) = v74;
  v75 = *(_QWORD *)(v0 + 344);
  v76 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 416) = sub_100737608(v38);
  swift_bridgeObjectRelease();
  v77 = *(int *)(v76 + 20);
  *(_DWORD *)(v0 + 464) = v77;
  v78 = v75 + v77;
  v79 = (_QWORD *)swift_task_alloc(dword_1011064BC);
  *(_QWORD *)(v0 + 424) = v79;
  *v79 = v0;
  v79[1] = sub_10073AB70;
  return sub_10073EBD4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 344), v78);
}

uint64_t sub_10073C858()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char v64;
  unint64_t v65;
  _BOOL8 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSNumber v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 296) + 56))(*(_QWORD *)(v0 + 280), 1, 1, *(_QWORD *)(v0 + 288));
  v1 = *(_QWORD *)(v0 + 200);
  sub_100004048(*(_QWORD *)(v0 + 280), &qword_1010F7AE0);
  v2 = *(void (**)(void))(v1 + 16);
  v90 = *(_QWORD *)(v0 + 408);
  v87 = *(_QWORD *)(v0 + 400);
  v98 = *(_QWORD *)(v0 + 392);
  v93 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(int **)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 208);
  v83 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 192);
  v8 = v3 + *(int *)(v0 + 464);
  v9 = *(void **)(v0 + 152);
  v2();
  ((void (*)(uint64_t, uint64_t, uint64_t))v2)(v5, v8, v6);
  sub_10000F9B8(v3 + v4[6], v7, &qword_1010ED860);
  v10 = (uint64_t *)(v3 + v4[8]);
  v11 = v10[1];
  v81 = *v10;
  LOBYTE(v2) = *(_BYTE *)(v3 + v4[11]);
  LOBYTE(v6) = *(_BYTE *)(v3 + v4[12]);
  v12 = sub_10001A9A8(&qword_10111BE20);
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v13 + 32) = v9;
  specialized Array._endMutation()(v13);
  v14 = objc_allocWithZone((Class)SPPeripheral);
  swift_bridgeObjectRetain(v11);
  sub_10001BD08(0, 0xF000000000000000);
  v15 = v9;
  v16 = sub_10073FE80(v83, v5, v7, v81, v11, v6, v93, v98, (char)v2, v90, v87, 0, 0xF000000000000000);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
  isUniquelyReferenced_nonNull_native = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v17 = *(_QWORD *)((*(_QWORD *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (isUniquelyReferenced_nonNull_native >= v17 >> 1)
LABEL_50:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, isUniquelyReferenced_nonNull_native + 1, 1);
  v99 = (_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 344);
  v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(isUniquelyReferenced_nonNull_native, v16);
  specialized Array._endMutation()(v20);

  sub_10001EF3C(0, 0xF000000000000000);
  sub_1000126B0(v19, type metadata accessor for ManagedCBPeripheralBeaconInfo);
  v21 = *(_QWORD *)(v0 + 368);
  v22 = *(_QWORD *)(v0 + 376);
  isUniquelyReferenced_nonNull_native = 1;
  while (1)
  {
    if (v22)
    {
      v23 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v24 = v23 | (v21 << 6);
      v25 = *(_QWORD *)(v0 + 160);
LABEL_6:
      v26 = *(_QWORD *)(v0 + 352);
      sub_10005972C(*(_QWORD *)(v25 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 336) + 72) * v24, v26, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v27 = *(_QWORD *)(v25 + 56);
      v28 = sub_10001A9A8(&qword_101106538);
      v29 = *(_QWORD *)(v27 + 8 * v24);
      *(_QWORD *)(v26 + *(int *)(v28 + 48)) = v29;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v26, 0, 1, v28);
      swift_bridgeObjectRetain(v29);
      goto LABEL_13;
    }
    v17 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v30 = (unint64_t)((1 << *(_BYTE *)(v0 + 468)) + 63) >> 6;
    if ((uint64_t)v17 >= v30)
    {
      v33 = v21;
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 160);
      v31 = v25 + 64;
      v32 = *(_QWORD *)(v25 + 64 + 8 * v17);
      if (v32)
        goto LABEL_10;
      v33 = v21 + 1;
      if ((uint64_t)(v21 + 2) < v30)
      {
        v32 = *(_QWORD *)(v31 + 8 * (v21 + 2));
        if (v32)
        {
          v17 = v21 + 2;
LABEL_10:
          v22 = (v32 - 1) & v32;
          v24 = __clz(__rbit64(v32)) + (v17 << 6);
          v21 = v17;
          goto LABEL_6;
        }
        v33 = v21 + 2;
        if ((uint64_t)(v21 + 3) < v30)
        {
          v32 = *(_QWORD *)(v31 + 8 * (v21 + 3));
          if (v32)
          {
            v17 = v21 + 3;
            goto LABEL_10;
          }
          v17 = v21 + 4;
          v33 = v21 + 3;
          if ((uint64_t)(v21 + 4) < v30)
          {
            v32 = *(_QWORD *)(v31 + 8 * v17);
            if (v32)
              goto LABEL_10;
            v33 = v30 - 1;
            v42 = v30 - 5;
            while (v42 != v21)
            {
              v32 = *(_QWORD *)(v25 + 104 + 8 * v21++);
              if (v32)
              {
                v17 = v21 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }
    v34 = *(_QWORD *)(v0 + 352);
    v35 = sub_10001A9A8(&qword_101106538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
    v22 = 0;
    v21 = v33;
LABEL_13:
    *(_QWORD *)(v0 + 368) = v21;
    *(_QWORD *)(v0 + 376) = v22;
    v36 = *(_QWORD *)(v0 + 360);
    sub_100005CF0(*(_QWORD *)(v0 + 352), v36, &qword_101106530);
    v37 = sub_10001A9A8(&qword_101106538);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v36, 1, v37) == 1)
    {
      v44 = *(_QWORD *)(v0 + 352);
      v43 = *(_QWORD *)(v0 + 360);
      v45 = *(_QWORD *)(v0 + 344);
      v47 = *(_QWORD *)(v0 + 312);
      v46 = *(_QWORD *)(v0 + 320);
      v48 = *(_QWORD *)(v0 + 304);
      v49 = *(_QWORD *)(v0 + 272);
      v50 = *(_QWORD *)(v0 + 280);
      v51 = *(_QWORD *)(v0 + 256);
      v85 = *(_QWORD *)(v0 + 248);
      v88 = *(_QWORD *)(v0 + 224);
      v91 = *(_QWORD *)(v0 + 216);
      v94 = *(_QWORD *)(v0 + 208);
      v100 = *(_QWORD *)(v0 + 184);
      swift_release();
      v96 = *(_QWORD *)(v0 + 128);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v85);
      swift_task_dealloc(v88);
      swift_task_dealloc(v91);
      swift_task_dealloc(v94);
      swift_task_dealloc(v100);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v96);
    }
    v38 = *(_QWORD *)(v0 + 360);
    v16 = *(_QWORD **)(v0 + 168);
    v39 = *(_QWORD **)(v38 + *(int *)(v37 + 48));
    sub_1000126EC(v38, *(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    if (v16[2])
    {
      v40 = sub_1005199F8(*(_QWORD *)(v0 + 344));
      if ((v41 & 1) != 0)
        break;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 344), type metadata accessor for ManagedCBPeripheralBeaconInfo);
    swift_bridgeObjectRelease();
  }
  v53 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 168) + 56) + 24 * v40);
  *(_QWORD *)(v0 + 384) = *v53;
  v54 = v53[1];
  *(_QWORD *)(v0 + 392) = v54;
  v55 = v39[2];
  if (v55)
  {
    v82 = v39[5];
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v39);
    v84 = v39;
    v56 = v39 + 9;
    v57 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v95 = v55;
      v60 = *(v56 - 1);
      v61 = *v56;
      v86 = *(v56 - 3);
      v89 = *(v56 - 2);
      sub_10001BBBC(v86, v89);
      sub_10001BBBC(v60, v61);
      swift_bridgeObjectRetain(v57);
      sub_10001BBBC(v60, v61);
      v62 = Data.subdata(in:)(0, 16, v60, v61);
      v16 = v63;
      v92 = v60;
      sub_10001BC14(v60, v61);
      v97.super.super.isa = UInt64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
      *v99 = v57;
      v65 = sub_100519764(v62, (uint64_t)v16);
      v17 = v57[2];
      v66 = (v64 & 1) == 0;
      v67 = v17 + v66;
      if (__OFADD__(v17, v66))
        goto LABEL_48;
      v68 = v64;
      if (v57[3] >= v67)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100AA0538();
      }
      else
      {
        sub_100A925CC(v67, isUniquelyReferenced_nonNull_native);
        v69 = sub_100519764(v62, (uint64_t)v16);
        if ((v68 & 1) != (v70 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
        v65 = v69;
      }
      v71 = (_QWORD *)*v99;
      if ((v68 & 1) != 0)
      {
        v58 = v71[7];
        v59 = 8 * v65;

        *(NSNumber *)(v58 + v59) = v97;
      }
      else
      {
        v71[(v65 >> 6) + 8] |= 1 << v65;
        v72 = (uint64_t *)(v71[6] + 16 * v65);
        *v72 = v62;
        v72[1] = (uint64_t)v16;
        *(NSNumber *)(v71[7] + 8 * v65) = v97;
        v73 = v71[2];
        v74 = __OFADD__(v73, 1);
        v17 = v73 + 1;
        if (v74)
          goto LABEL_49;
        v71[2] = v17;
        sub_10001BBBC(v62, (unint64_t)v16);
      }
      v56 += 6;
      swift_bridgeObjectRelease();
      sub_10001BC14(v62, (unint64_t)v16);
      sub_10001BC14(v86, v89);
      sub_10001BC14(v92, v61);
      swift_bridgeObjectRelease();
      v57 = v71;
      v55 = v95 - 1;
      if (v95 == 1)
      {
        v39 = v84;
        swift_bridgeObjectRelease();
        v75 = v82;
        goto LABEL_45;
      }
    }
  }
  swift_bridgeObjectRetain(v54);
  v71 = _swiftEmptyDictionarySingleton;
  v75 = 1;
LABEL_45:
  *(_QWORD *)(v0 + 400) = v71;
  *(_QWORD *)(v0 + 408) = v75;
  v76 = *(_QWORD *)(v0 + 344);
  v77 = *(_QWORD *)(v0 + 328);
  *(_QWORD *)(v0 + 416) = sub_100737608(v39);
  swift_bridgeObjectRelease();
  v78 = *(int *)(v77 + 20);
  *(_DWORD *)(v0 + 464) = v78;
  v79 = v76 + v78;
  v80 = (_QWORD *)swift_task_alloc(dword_1011064BC);
  *(_QWORD *)(v0 + 424) = v80;
  *v80 = v0;
  v80[1] = sub_10073AB70;
  return sub_10073EBD4(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 344), v79);
}

id sub_10073D054(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  _BYTE v49[4];
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t **v53;
  _BYTE *v54;
  _BYTE *v55;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v52 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v52 - 8);
  v8 = __chkstk_darwin(v52);
  v10 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v49[-v11];
  v13 = objc_msgSend(a1, "allowedSessions");
  v14 = sub_10000F4A0(0, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  v16 = (void *)sub_100CA8DC0(v15);
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(a2, "allowedSessions");
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v14);

  v19 = sub_100CA8DC0(v18);
  swift_bridgeObjectRelease();
  sub_100BBD4B0(v19, v16);
  v53 = sub_100509718(v20);
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(a1, "userIdentifier");
  v54 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v22 = objc_msgSend(a1, "beaconIdentifier");
  v55 = v10;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = objc_msgSend(a1, "groupIdentifier");
  if (v23)
  {
    v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v25 = 0;
  }
  else
  {
    v25 = 1;
  }
  v26 = (uint64_t)v6;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v6, v25, 1, v52);
  v27 = objc_msgSend(a1, "name");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v51 = v29;
  v52 = v28;

  v50 = objc_msgSend(a1, "partIdentifier");
  v30 = objc_msgSend(a1, "serialNumber");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v34 = objc_msgSend(a1, "managedByFindMy");
  v35 = objc_msgSend(a1, "primaryIndex");
  v36 = objc_msgSend(a1, "ltkIndexMap");
  v37 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  v38 = sub_10074025C();
  v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for Data, v37, v38);

  v40 = objc_msgSend(a1, "lastConnectedLEMAC");
  if (v40)
  {
    v41 = v40;
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

  }
  else
  {
    v42 = 0;
    v44 = 0xF000000000000000;
  }
  v45 = objc_msgSend(a1, "keyAddressPairs");
  v46 = sub_10000F4A0(0, &qword_101106518, SPCBPeripheralKeyAddressPair_ptr);
  static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v46);

  v47 = objc_allocWithZone((Class)SPPeripheral);
  return sub_10073FE80((uint64_t)v54, (uint64_t)v55, v26, v52, v51, v50, v31, v33, v34, (uint64_t)v35, v39, v42, v44);
}

uint64_t sub_10073D44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v9[43] = a8;
  v9[44] = v8;
  v9[41] = a6;
  v9[42] = a7;
  v9[39] = a4;
  v9[40] = a5;
  v9[37] = a2;
  v9[38] = a3;
  v9[36] = a1;
  v10 = sub_10001A9A8(&qword_1010F7AE0);
  v9[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for KeySyncRecord(0);
  v9[46] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v9[47] = v12;
  v9[48] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v9[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v9[50] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v9[51] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[52] = swift_task_alloc(v16);
  v9[53] = swift_task_alloc(v16);
  v17 = type metadata accessor for UUID(0);
  v9[54] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v9[55] = v18;
  v19 = *(_QWORD *)(v18 + 64);
  v9[56] = v19;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[57] = swift_task_alloc(v20);
  v9[58] = swift_task_alloc(v20);
  v9[59] = swift_task_alloc(v20);
  v9[60] = swift_task_alloc(v20);
  v21 = type metadata accessor for Date(0);
  v9[61] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v9[62] = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9[63] = swift_task_alloc(v23);
  v9[64] = swift_task_alloc(v23);
  return swift_task_switch(sub_10073D5C8, 0, 0);
}

uint64_t sub_10073D5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t type;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  os_log_t log;
  uint64_t v68;
  uint64_t v69;

  static Date.trustedNow.getter(*(_QWORD *)(v0 + 512));
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 312);
  v6 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  v9 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 520) = sub_10001A9E8(v9, (uint64_t)qword_1011B7660);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 528) = v10;
  v10(v1, v8, v2);
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v5, v4);
  sub_10001BBBC(v7, v6);
  v11 = sub_10001BBBC(v5, v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 440);
  v19 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 320);
  if (v14)
  {
    v65 = *(_QWORD *)(v0 + 344);
    v62 = *(_QWORD *)(v0 + 304);
    v64 = *(_QWORD *)(v0 + 336);
    v22 = swift_slowAlloc(52, -1);
    v66 = swift_slowAlloc(96, -1);
    v69 = v66;
    *(_DWORD *)v22 = 141559043;
    *(_QWORD *)(v0 + 248) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v17, v23);
    type = v13;
    *(_QWORD *)(v0 + 256) = sub_100016940(v24, v25, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    v26 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v26(v15, v17);
    *(_WORD *)(v22 + 22) = 2048;
    *(_QWORD *)(v0 + 264) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v22 + 24, v22 + 32);
    *(_WORD *)(v22 + 32) = 2080;
    v27 = Data.hexString.getter(v20, v21);
    *(_QWORD *)(v0 + 272) = sub_100016940(v27, v28, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v22 + 34, v22 + 42);
    swift_bridgeObjectRelease();
    sub_10001BC14(v20, v21);
    sub_10001BC14(v20, v21);
    *(_WORD *)(v22 + 42) = 2080;
    v29 = Data.hexString.getter(v64, v65);
    *(_QWORD *)(v0 + 280) = sub_100016940(v29, v30, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v22 + 44, v22 + 52);
    swift_bridgeObjectRelease();
    sub_10001BC14(v64, v65);
    sub_10001BC14(v64, v65);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "successfulConnection beaconIdentifier: %{private,mask.hash}s primaryIndex: %llu leMAC: %s ltk: %s", (uint8_t *)v22, 0x34u);
    swift_arrayDestroy(v66, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v26(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 432));
    sub_10001BC14(v20, v21);
    sub_10001BC14(v20, v21);
    sub_10001BC14(v19, v18);
    sub_10001BC14(v19, v18);

  }
  *(_QWORD *)(v0 + 536) = v26;
  v31 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 408);
  v33 = *(_QWORD *)(v0 + 392);
  v35 = *(_QWORD *)(v0 + 312);
  v34 = *(_QWORD *)(v0 + 320);
  sub_10001BBBC(v35, v34);
  sub_100626E70(6, v35, v34);
  MACAddress.init(data:type:)(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) == 1)
  {
    v36 = *(_QWORD *)(v0 + 312);
    v37 = *(_QWORD *)(v0 + 320);
    sub_100004048(*(_QWORD *)(v0 + 392), (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v36, v37);
    v38 = sub_10001BBBC(v36, v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    v41 = os_log_type_enabled(v39, v40);
    v42 = *(_QWORD *)(v0 + 512);
    v43 = *(_QWORD *)(v0 + 488);
    v44 = *(_QWORD *)(v0 + 496);
    v46 = *(_QWORD *)(v0 + 312);
    v45 = *(_QWORD *)(v0 + 320);
    if (v41)
    {
      log = *(os_log_t *)(v0 + 512);
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v69 = v48;
      *(_DWORD *)v47 = 136446210;
      v49 = Data.hexString.getter(v46, v45);
      *(_QWORD *)(v0 + 160) = sub_100016940(v49, v50, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v46, v45);
      sub_10001BC14(v46, v45);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Invalid MAC address: %{public}s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      (*(void (**)(os_log_t, uint64_t))(v44 + 8))(log, v43);
    }
    else
    {

      sub_10001BC14(v46, v45);
      sub_10001BC14(v46, v45);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    }
    v53 = *(_QWORD *)(v0 + 504);
    v55 = *(_QWORD *)(v0 + 472);
    v54 = *(_QWORD *)(v0 + 480);
    v57 = *(_QWORD *)(v0 + 456);
    v56 = *(_QWORD *)(v0 + 464);
    v59 = *(_QWORD *)(v0 + 416);
    v58 = *(_QWORD *)(v0 + 424);
    v61 = *(_QWORD *)(v0 + 384);
    v60 = *(_QWORD *)(v0 + 392);
    v68 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v68);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 32))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400));
    v51 = (_QWORD *)swift_task_alloc(dword_1011064BC);
    *(_QWORD *)(v0 + 544) = v51;
    *v51 = v0;
    v51[1] = sub_10073DC3C;
    return sub_10073EBD4(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  }
}

uint64_t sub_10073DC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10073E9E8;
  else
    v3 = sub_10073DCA0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10073DCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 48))(v1, 1, *(_QWORD *)(v0 + 368)) == 1)
  {
    sub_100004048(v1, &qword_1010F7AE0);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v54 = (uint64_t (*)(void))((char *)&dword_1010EBC40 + dword_1010EBC40);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBC44);
      *(_QWORD *)(v0 + 592) = v3;
      *v3 = v0;
      v3[1] = sub_10073E428;
      return v54();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    v50 = *(_QWORD *)(v0 + 512);
    v5 = *(_QWORD *)(v0 + 496);
    v42 = *(_QWORD *)(v0 + 488);
    *(_QWORD *)type = *(_QWORD *)(v0 + 504);
    v6 = *(_QWORD *)(v0 + 472);
    v7 = *(_QWORD *)(v0 + 432);
    v52 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 408);
    v46 = *(_QWORD *)(v0 + 400);
    v48 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 344);
    v11 = *(_QWORD *)(v0 + 296);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 384), type metadata accessor for KeySyncRecord);
    v4(v6, v11, v7);
    (*(void (**)(os_log_type_t *, uint64_t, uint64_t))(v5 + 16))(*(os_log_type_t **)type, v50, v42);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v48, v52, v46);
    sub_10001BBBC(v10, v9);
    v12 = sub_10001BBBC(v10, v9);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v51 = *(_QWORD *)(v0 + 504);
    v17 = *(_QWORD *)(v0 + 488);
    v49 = *(_QWORD *)(v0 + 496);
    v18 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 432);
    v20 = *(_QWORD *)(v0 + 416);
    v53 = *(_QWORD *)(v0 + 408);
    v55 = *(_QWORD *)(v0 + 400);
    v22 = *(_QWORD *)(v0 + 336);
    v21 = *(_QWORD *)(v0 + 344);
    if (v15)
    {
      typea = v14;
      v47 = *(_QWORD *)(v0 + 328);
      v40 = *(_QWORD *)(v0 + 304);
      v41 = *(_QWORD *)(v0 + 344);
      v23 = swift_slowAlloc(82, -1);
      v43 = swift_slowAlloc(128, -1);
      v56 = v43;
      *(_DWORD *)v23 = 141559811;
      *(_QWORD *)(v0 + 184) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v19, v24);
      *(_QWORD *)(v0 + 192) = sub_100016940(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      v16(v18, v19);
      *(_WORD *)(v23 + 22) = 2048;
      *(_QWORD *)(v0 + 200) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v23 + 24, v23 + 32);
      *(_WORD *)(v23 + 32) = 2082;
      v27 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v17, v27);
      *(_QWORD *)(v0 + 208) = sub_100016940(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v23 + 34, v23 + 42);
      swift_bridgeObjectRelease();
      v30 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v30(v51, v17);
      *(_WORD *)(v23 + 42) = 2082;
      v31 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v55, v31);
      *(_QWORD *)(v0 + 216) = sub_100016940(v32, v33, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v23 + 44, v23 + 52);
      swift_bridgeObjectRelease();
      v34 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v34(v20, v55);
      *(_WORD *)(v23 + 52) = 2048;
      *(_QWORD *)(v0 + 224) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v23 + 54, v23 + 62);
      *(_WORD *)(v23 + 62) = 2080;
      v35 = Data.hexString.getter(v22, v41);
      *(_QWORD *)(v0 + 232) = sub_100016940(v35, v36, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v23 + 64, v23 + 72);
      swift_bridgeObjectRelease();
      sub_10001BC14(v22, v41);
      sub_10001BC14(v22, v41);
      *(_WORD *)(v23 + 72) = 2048;
      *(_QWORD *)(v0 + 240) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v23 + 74, v23 + 82);
      _os_log_impl((void *)&_mh_execute_header, v13, typea, "Updating KeySyncRecord for %{private,mask.hash}s to %llu/%{public}s due to successfulConnection to MAC address: %{public}s [%llu]  LTK: %s [%llu]", (uint8_t *)v23, 0x52u);
      swift_arrayDestroy(v43, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {
      v16(v18, v19);
      v30 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v30(v51, v17);
      v34 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v34(v20, v55);
      sub_10001BC14(v22, v21);
      sub_10001BC14(v22, v21);

    }
    *(_QWORD *)(v0 + 568) = v34;
    *(_QWORD *)(v0 + 560) = v30;
    v37 = (_QWORD *)swift_task_alloc(dword_1011064C4);
    *(_QWORD *)(v0 + 576) = v37;
    *v37 = v0;
    v37[1] = sub_10073E2C8;
    v38 = *(_QWORD *)(v0 + 384);
    v39 = *(_QWORD *)(v0 + 328);
    v37[18] = *(_QWORD *)(v0 + 512);
    v37[19] = v39;
    v37[17] = v38;
    return swift_task_switch(sub_10073F124, 0, 0);
  }
  return result;
}

uint64_t sub_10073E2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 576);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10073EAD4;
  else
    v3 = sub_10073E32C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10073E32C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
  v3 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for KeySyncRecord);
  v1(v5, v6);
  v2(v3, v4);
  v7 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v10 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 424);
  v15 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073E428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10073E484, 0, 0);
}

uint64_t sub_10073E484()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 600);
  if (v1)
  {
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    v3 = *(_QWORD *)(v0 + 464);
    v5 = *(_QWORD *)(v0 + 440);
    v4 = *(_QWORD *)(v0 + 448);
    v6 = *(_QWORD *)(v0 + 432);
    v7 = *(_QWORD *)(v0 + 296);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    v2(v3, v7, v6);
    v8 = *(unsigned __int8 *)(v5 + 80);
    v9 = (v8 + 24) & ~v8;
    v10 = swift_allocObject(&unk_10108E9B8, v9 + v4, v8 | 7);
    *(_QWORD *)(v0 + 608) = v10;
    *(_QWORD *)(v10 + 16) = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v3, v6);
    v11 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 616) = v12;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
    *v12 = v0;
    v12[1] = sub_10073E660;
    return unsafeBlocking<A>(_:)(v0 + 16, sub_100740124, v10, v13);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 512);
    v16 = *(_QWORD *)(v0 + 488);
    v17 = *(_QWORD *)(v0 + 496);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 400));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    v18 = *(_QWORD *)(v0 + 504);
    v20 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 480);
    v22 = *(_QWORD *)(v0 + 456);
    v21 = *(_QWORD *)(v0 + 464);
    v24 = *(_QWORD *)(v0 + 416);
    v23 = *(_QWORD *)(v0 + 424);
    v26 = *(_QWORD *)(v0 + 384);
    v25 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10073E660()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 616));
  swift_release();
  return swift_task_switch(sub_10073E6C0, 0, 0);
}

uint64_t sub_10073E6C0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    v2 = *(_QWORD *)(v0 + 456);
    v3 = *(_QWORD *)(v0 + 432);
    v4 = *(_QWORD *)(v0 + 296);
    sub_100004048(v0 + 16, (uint64_t *)&unk_1010EE310);
    v5 = v1(v2, v4, v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 512);
    v10 = *(_QWORD *)(v0 + 488);
    v11 = *(_QWORD *)(v0 + 496);
    v12 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 432);
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    v39 = *(_QWORD *)(v0 + 408);
    v40 = *(_QWORD *)(v0 + 400);
    if (v8)
    {
      v37 = *(_QWORD *)(v0 + 424);
      v15 = swift_slowAlloc(22, -1);
      v36 = v9;
      v16 = swift_slowAlloc(32, -1);
      v42 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 168) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
      *(_QWORD *)(v0 + 176) = sub_100016940(v18, v19, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      v38(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "successfulConnection missing keySyncRecord for: %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v40);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v36, v10);
    }
    else
    {

      v38(v12, v13);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v14, v40);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 512);
    v21 = *(_QWORD *)(v0 + 488);
    v22 = *(_QWORD *)(v0 + 496);
    v23 = *(_QWORD *)(v0 + 424);
    v24 = *(_QWORD *)(v0 + 400);
    v25 = *(_QWORD *)(v0 + 408);
    swift_release();
    sub_100004048(v0 + 16, (uint64_t *)&unk_1010EE310);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  }
  v26 = *(_QWORD *)(v0 + 504);
  v28 = *(_QWORD *)(v0 + 472);
  v27 = *(_QWORD *)(v0 + 480);
  v30 = *(_QWORD *)(v0 + 456);
  v29 = *(_QWORD *)(v0 + 464);
  v32 = *(_QWORD *)(v0 + 416);
  v31 = *(_QWORD *)(v0 + 424);
  v34 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 392);
  v41 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073E9E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 496);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 408) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 400));
  v2 = *(void (**)(uint64_t, _QWORD))(v1 + 8);
  v4 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 480);
  v7 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 456);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 360);
  v2(v3, *(_QWORD *)(v0 + 488));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073EAD4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 568);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 400);
  sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for KeySyncRecord);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 504);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 360);
  (*(void (**)(uint64_t, _QWORD))(v0 + 560))(v4, *(_QWORD *)(v0 + 488));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073EBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[17] = a1;
  v3[18] = a3;
  v4 = type metadata accessor for UUID(0);
  v3[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[20] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[21] = v6;
  v3[22] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10073EC38, 0, 0);
}

uint64_t sub_10073EC38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(void);

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 120) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 216), v0 + 120, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 216) == 1)
  {
    v1 = *(_QWORD *)(v0 + 136);
    v2 = type metadata accessor for KeySyncRecord(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v6 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 184) = v5;
    *v5 = v0;
    v5[1] = sub_10073EDE8;
    v3 = v6;
    return v3();
  }
  __break(1u);
  return result;
}

uint64_t sub_10073EDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10073EE44, 0, 0);
}

uint64_t sub_10073EE44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_10073EF88, *(_QWORD *)(v0 + 192), 0);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get BeaconStore", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 136);

  v9 = type metadata accessor for KeySyncRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073EF88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[24];
  v3 = v0[21];
  v2 = v0[22];
  v4 = v0[19];
  v5 = v0[20];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[18], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10108E9E0, v7 + v3, v6 | 7);
  v0[25] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[26] = v10;
  v11 = sub_10001A9A8(&qword_1010F7AE0);
  *v10 = v0;
  v10[1] = sub_10073F070;
  return unsafeBlocking<A>(_:)(v0[17], sub_1006ADBB0, v8, v11);
}

uint64_t sub_10073F070()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_10073F0CC, 0, 0);
}

uint64_t sub_10073F0CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073F108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[18] = a3;
  v4[19] = a4;
  v4[17] = a2;
  return swift_task_switch(sub_10073F124, 0, 0);
}

uint64_t sub_10073F124()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;
  _QWORD *v3;
  uint64_t (*v4)(void);

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 120) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 176), v0 + 120, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 176) & 1) != 0)
  {
    v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (*)(void))((char *)&dword_1010EBC40 + dword_1010EBC40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC44);
    *(_QWORD *)(v0 + 160) = v3;
    *v3 = v0;
    v3[1] = sub_10073F2A0;
    v1 = v4;
    return v1();
  }
  __break(1u);
  return result;
}

uint64_t sub_10073F2A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10073F2FC, 0, 0);
}

uint64_t sub_10073F2FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 168);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100857538(v5, v4, v3, (uint64_t)_swiftEmptyArrayStorage, v2);
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7660);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to get BeaconStore", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073F420(uint64_t a1, int a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_10073F43C, 0, 0);
}

uint64_t sub_10073F43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  uint64_t v15;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7660);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v14 = *(_DWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 24);
    v7 = swift_slowAlloc(18, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 136315394;
    swift_bridgeObjectRetain(v6);
    v10 = Dictionary.description.getter(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v12 = v11;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_100016940(v10, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v6, 2);
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v0 + 16) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 20, v7 + 14, v7 + 18);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "TRACE: leechScannerDiscovered: %s rssi: %d", (uint8_t *)v7, 0x12u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073F64C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = a1;
  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10073F6B0, 0, 0);
}

uint64_t sub_10073F6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7660);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 32);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v13 = 136315138;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 16) = sub_100016940(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "TRACE: pairPencil: %s", v13, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073F8B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[3] = a1;
  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10073F914, 0, 0);
}

uint64_t sub_10073F914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7660);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 40);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 32);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v13 = 136315138;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 16) = sub_100016940(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "TRACE: unpairPencil: %s", v13, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10073FB14()
{
  uint64_t v0;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_101106470);
  sub_10001A9E8(v0, (uint64_t)qword_101106470);
  return sub_100A06500(0);
}

uint64_t sub_10073FB60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1011064CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000AA8AC;
  return sub_100737CDC(a1);
}

uint64_t sub_10073FBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc(dword_1011064B4);
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_100004C28;
  return sub_10073D44C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10073FC50(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_task_alloc(dword_10110655C);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100004C28;
  *(_DWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 24) = a1;
  return swift_task_switch(sub_10073F43C, 0, 0);
}

uint64_t sub_10073FCB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_101106554);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100030654;
  return sub_10073F64C(a1);
}

uint64_t sub_10073FD04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_10110654C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1002613B8;
  return sub_10073F8B0(a1);
}

Swift::Int sub_10073FD50()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000027, 0x8000000100EC5460);
  return Hasher._finalize()();
}

uint64_t sub_10073FDA4(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000027, 0x8000000100EC5460);
}

Swift::Int sub_10073FDC0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000027, 0x8000000100EC5460);
  return Hasher._finalize()();
}

uint64_t sub_10073FE10@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D888, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10073FE60(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000027;
  a1[1] = 0x8000000100EC5460;
}

id sub_10073FE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t v15;
  Class isa;
  NSString v17;
  NSString v18;
  NSDictionary v19;
  Class v20;
  Class v21;
  Class v22;
  id v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  Class v28;
  NSUUID v29;
  NSUUID v30;
  id v32;
  uint64_t v33;
  uint64_t v35;

  v30.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v33 = a2;
  v29.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v15 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v15 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(a3, 1, v15) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(a3, v15);
  }
  v27 = v15;
  v28 = isa;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  sub_10074025C();
  v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v20 = 0;
  if (a13 >> 60 != 15)
  {
    v20 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(a12, a13);
  }
  sub_10000F4A0(0, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr);
  v21 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_101106518, SPCBPeripheralKeyAddressPair_ptr);
  v22 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v26) = a9 & 1;
  v23 = objc_msgSend(v32, "initWithUserIdentifier:beaconIdentifier:groupIdentifier:name:partIdentifier:serialNumber:managedByFindMy:primaryIndex:ltkIndexMap:lastConnectedLEMAC:allowedSessions:keyAddressPairs:", v30.super.isa, v29.super.isa, v28, v17, a6, v18, v26, a10, v19.super.isa, v20, v21, v22);

  v24 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v24(v33, v27);
  v24(a1, v27);
  return v23;
}

uint64_t sub_100740124@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10080B648(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t type metadata accessor for ManagedCBPeripheralManager.KeyType(uint64_t a1)
{
  uint64_t result;

  result = qword_1011065B8;
  if (!qword_1011065B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ManagedCBPeripheralManager.KeyType);
  return result;
}

unint64_t sub_1007401AC()
{
  unint64_t result;

  result = qword_1011064D0;
  if (!qword_1011064D0)
  {
    result = swift_getWitnessTable(byte_100E4DE58, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011064D0);
  }
  return result;
}

uint64_t sub_1007401F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1011064E4);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004C28;
  return sub_100738D08(a1, a2, v7, v6);
}

unint64_t sub_10074025C()
{
  unint64_t result;

  result = qword_101106510;
  if (!qword_101106510)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_101106510);
  }
  return result;
}

uint64_t sub_1007402A0(uint64_t a1)
{
  sub_1007402D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1007402D4(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result != 3)
  {
    sub_10001BC14(a3, a4);
    return sub_10001BC14(a5, a6);
  }
  return result;
}

uint64_t sub_10074031C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s34DisplayIdentifierAndMembershipTypeVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManager.StableIdentifierInfo()
{
  return &type metadata for ManagedCBPeripheralManager.StableIdentifierInfo;
}

uint64_t storeEnumTagSinglePayload for ManagedCBPeripheralManagerEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1007404B8 + 4 * byte_100E4DCC0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1007404D8 + 4 * byte_100E4DCC5[v4]))();
}

_BYTE *sub_1007404B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1007404D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007404E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007404E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007404F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007404F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManagedCBPeripheralManagerEntitlement()
{
  return &type metadata for ManagedCBPeripheralManagerEntitlement;
}

uint64_t sub_100740514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100740520);
}

uint64_t sub_100740520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10074055C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100740568);
}

uint64_t sub_100740568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1007405A8()
{
  return sub_100006204(&qword_1011065F0, type metadata accessor for ManagedCBPeripheralManager.KeyType, (uint64_t)&unk_100E4DD50);
}

unint64_t sub_1007405D8()
{
  unint64_t result;

  result = qword_1011065F8;
  if (!qword_1011065F8)
  {
    result = swift_getWitnessTable(byte_100E4DE30, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011065F8);
  }
  return result;
}

unint64_t sub_100740620()
{
  unint64_t result;

  result = qword_101106600;
  if (!qword_101106600)
  {
    result = swift_getWitnessTable(byte_100E4DDB8, &type metadata for ManagedCBPeripheralManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_101106600);
  }
  return result;
}

uint64_t sub_100740664()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10074066C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 160));
}

uint64_t sub_100740678(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 164));
}

uint64_t sub_10074068C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 168));
}

uint64_t sub_1007406A0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 172));
}

uint64_t sub_1007406B4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t sub_1007406C0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t sub_1007406CC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t sub_1007406D8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 136);
}

uint64_t sub_1007406E4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 152);
}

uint64_t sub_1007406F0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t sub_1007406FC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 184);
}

uint64_t sub_100740708()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 200);
}

uint64_t sub_100740714()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t sub_100740720()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 232);
}

uint64_t sub_10074072C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 241);
}

uint64_t sub_100740734()
{
  uint64_t v0;

  v0 = sub_10001A9A8(&qword_101106608);
  return CustomCodableKeyDictionary.wrappedValue.getter(v0);
}

uint64_t sub_100740764(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 104));
}

uint64_t sub_100740778(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 108));
}

uint64_t sub_10074078C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 112));
}

uint64_t sub_1007407A0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 116));
}

uint64_t sub_1007407B4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 120));
}

uint64_t sub_1007407C8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 124));
}

uint64_t sub_1007407DC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 128));
}

uint64_t sub_1007407F0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 132));
}

uint64_t sub_100740804(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 136));
}

uint64_t sub_100740818(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 140));
}

uint64_t sub_10074082C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 144));
}

uint64_t sub_100740838(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 148));
}

uint64_t sub_10074084C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 152));
}

uint64_t sub_100740860(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 156));
}

uint64_t sub_100740874(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 176));
}

uint64_t sub_100740888(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 180));
}

uint64_t sub_10074089C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 184));
}

uint64_t sub_1007408B0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 188));
}

uint64_t sub_1007408C4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 192));
}

uint64_t sub_1007408D8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 196));
}

uint64_t sub_1007408EC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 200));
}

uint64_t sub_100740900(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 204));
}

uint64_t sub_100740914(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 208));
}

uint64_t sub_100740928(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 212));
}

uint64_t sub_10074093C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 216));
}

uint64_t sub_100740950(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 220));
}

uint64_t sub_10074095C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 224));
}

uint64_t sub_100740970(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 228));
}

uint64_t sub_100740984(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 232));
}

uint64_t sub_100740998(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 236));
}

uint64_t sub_1007409AC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 240));
}

uint64_t sub_1007409C0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 244));
}

uint64_t sub_1007409D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100740C94(v2 + *(int *)(a1 + 256), a2);
}

uint64_t sub_1007409E4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 248));
}

uint64_t sub_1007409F0(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 252));
}

uint64_t sub_1007409FC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 280));
}

uint64_t sub_100740A10(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 284));
}

uint64_t sub_100740A24(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 336));
}

uint64_t sub_100740A30(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 340));
}

uint64_t sub_100740A3C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 344));
}

uint64_t sub_100740A48(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 288));
}

uint64_t sub_100740A5C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 292));
}

uint64_t sub_100740A70(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 100));
}

uint64_t sub_100740A84(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 324));
}

uint64_t sub_100740A98(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 328));
}

uint64_t sub_100740AAC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 352));
}

uint64_t sub_100740AC0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 360));
}

uint64_t sub_100740AD4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 368));
}

uint64_t sub_100740AE8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 372));
}

uint64_t sub_100740AFC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 376));
}

uint64_t sub_100740B10(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 380));
}

uint64_t sub_100740B24(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 384));
}

uint64_t sub_100740B30(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 400));
}

uint64_t sub_100740B3C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 404));
}

uint64_t sub_100740B48(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 408));
}

uint64_t sub_100740B54(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 428));
}

uint64_t sub_100740B60(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 436)));
}

uint64_t sub_100740B6C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 444));
}

uint64_t sub_100740B78(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 448)));
}

uint64_t sub_100740B84(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 460));
}

uint64_t sub_100740B90(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 464));
}

uint64_t sub_100740B9C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 472));
}

uint64_t sub_100740BB0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 488));
}

uint64_t sub_100740BC4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 492));
}

uint64_t sub_100740BD8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 496));
}

uint64_t sub_100740BEC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 532));
}

uint64_t sub_100740C00(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 536));
}

uint64_t sub_100740C0C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 540));
}

uint64_t sub_100740C18(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 548));
}

uint64_t sub_100740C2C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 552));
}

unint64_t sub_100740C38(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 556)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 556) + 4) << 32);
}

uint64_t sub_100740C60(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 568));
}

uint64_t sub_100740C74(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 572));
}

uint64_t sub_100740C88(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 588));
}

uint64_t sub_100740C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011041E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_BYTE *sub_100740CDC(_BYTE *a1, uint64_t *a2, int *a3)
{
  _BYTE *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _BYTE *v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  _BYTE *v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE *v203;
  uint64_t v204;
  uint64_t v205;
  _BYTE *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE *v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE *v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE *v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v228;
  uint64_t v229;
  uint64_t v230;
  char v231;
  uint64_t v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE *v242;
  uint64_t v243;
  uint64_t v244;
  _BYTE *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  uint64_t v269;
  _BYTE *v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  _BYTE *v283;
  uint64_t v284;
  uint64_t v285;
  _BYTE *v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289;
  uint64_t v290;
  uint64_t v291;
  _BYTE *v292;
  uint64_t v293;
  uint64_t v294;
  _BYTE *v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298;
  uint64_t v299;
  uint64_t v300;
  _BYTE *v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v310;
  uint64_t v311;
  uint64_t v312;
  char v313;
  uint64_t v314;
  _BYTE *v315;
  uint64_t v316;
  uint64_t v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  uint64_t v328;
  _BYTE *v329;
  uint64_t v330;
  uint64_t v331;
  _BYTE *v332;
  uint64_t v333;
  uint64_t v334;
  _BYTE *v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  _BYTE *v339;
  uint64_t v340;
  uint64_t v341;
  _BYTE *v342;
  uint64_t v343;
  uint64_t v344;
  _BYTE *v345;
  uint64_t v346;
  uint64_t v347;
  _BYTE *v348;
  uint64_t v349;
  uint64_t v350;
  _BYTE *v351;
  uint64_t v352;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v132 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_BYTE *)(v132 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *((_QWORD *)v4 + 1) = a2[1];
    *((_QWORD *)v4 + 2) = v7;
    v8 = a2[3];
    v9 = a2[4];
    swift_bridgeObjectRetain(v7);
    sub_10001BBBC(v8, v9);
    *((_QWORD *)v4 + 3) = v8;
    *((_QWORD *)v4 + 4) = v9;
    v10 = *(_OWORD *)(a2 + 5);
    v11 = a2[8];
    *((_QWORD *)v4 + 7) = a2[7];
    *((_QWORD *)v4 + 8) = v11;
    v4[72] = *((_BYTE *)a2 + 72);
    *((_QWORD *)v4 + 10) = a2[10];
    v4[88] = *((_BYTE *)a2 + 88);
    v4[112] = *((_BYTE *)a2 + 112);
    v12 = a2[12];
    v13 = a2[13];
    *((_QWORD *)v4 + 12) = v12;
    *((_QWORD *)v4 + 13) = v13;
    *((_QWORD *)v4 + 15) = a2[15];
    v4[128] = *((_BYTE *)a2 + 128);
    *((_QWORD *)v4 + 17) = a2[17];
    v4[144] = *((_BYTE *)a2 + 144);
    *((_QWORD *)v4 + 19) = a2[19];
    v4[160] = *((_BYTE *)a2 + 160);
    v4[176] = *((_BYTE *)a2 + 176);
    *((_QWORD *)v4 + 21) = a2[21];
    v14 = a2[23];
    v4[192] = *((_BYTE *)a2 + 192);
    *((_QWORD *)v4 + 23) = v14;
    v4[208] = *((_BYTE *)a2 + 208);
    *((_QWORD *)v4 + 25) = a2[25];
    v4[224] = *((_BYTE *)a2 + 224);
    *((_QWORD *)v4 + 27) = a2[27];
    *((_QWORD *)v4 + 29) = a2[29];
    *((_WORD *)v4 + 120) = *((_WORD *)a2 + 120);
    v15 = a3[24];
    v16 = &v4[v15];
    v17 = (uint64_t)a2 + v15;
    *(_OWORD *)(v4 + 40) = v10;
    swift_bridgeObjectRetain(v12);
    v18 = sub_10001A9A8(&qword_101106608);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[25];
    v20 = a3[26];
    v21 = &v4[v19];
    v22 = (uint64_t)a2 + v19;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = *(_BYTE *)(v22 + 8);
    v23 = &v4[v20];
    v24 = (uint64_t)a2 + v20;
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = *(_BYTE *)(v24 + 8);
    v25 = a3[27];
    v26 = a3[28];
    v27 = &v4[v25];
    v28 = (uint64_t)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    v29 = &v4[v26];
    v30 = (uint64_t)a2 + v26;
    v29[8] = *(_BYTE *)(v30 + 8);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v31 = a3[29];
    v32 = a3[30];
    v33 = &v4[v31];
    v34 = (uint64_t)a2 + v31;
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v33[8] = *(_BYTE *)(v34 + 8);
    v35 = &v4[v32];
    v36 = (uint64_t)a2 + v32;
    *(_QWORD *)v35 = *(_QWORD *)v36;
    v35[8] = *(_BYTE *)(v36 + 8);
    v37 = a3[31];
    v38 = a3[32];
    v39 = &v4[v37];
    v40 = (uint64_t)a2 + v37;
    *(_QWORD *)v39 = *(_QWORD *)v40;
    v39[8] = *(_BYTE *)(v40 + 8);
    v41 = &v4[v38];
    v42 = (uint64_t)a2 + v38;
    *(_QWORD *)v41 = *(_QWORD *)v42;
    v41[8] = *(_BYTE *)(v42 + 8);
    v43 = a3[33];
    v44 = a3[34];
    v45 = &v4[v43];
    v46 = (uint64_t)a2 + v43;
    *(_QWORD *)v45 = *(_QWORD *)v46;
    v45[8] = *(_BYTE *)(v46 + 8);
    v47 = &v4[v44];
    v48 = (uint64_t)a2 + v44;
    *(_QWORD *)v47 = *(_QWORD *)v48;
    v47[8] = *(_BYTE *)(v48 + 8);
    v49 = a3[35];
    v50 = a3[36];
    v51 = &v4[v49];
    v52 = (uint64_t)a2 + v49;
    *(_QWORD *)v51 = *(_QWORD *)v52;
    v51[8] = *(_BYTE *)(v52 + 8);
    v4[v50] = *((_BYTE *)a2 + v50);
    v53 = a3[37];
    v54 = a3[38];
    v55 = &v4[v53];
    v56 = (uint64_t)a2 + v53;
    *(_QWORD *)v55 = *(_QWORD *)v56;
    v55[8] = *(_BYTE *)(v56 + 8);
    v57 = &v4[v54];
    v58 = (uint64_t)a2 + v54;
    *(_QWORD *)v57 = *(_QWORD *)v58;
    v57[8] = *(_BYTE *)(v58 + 8);
    v59 = a3[39];
    v60 = a3[40];
    v61 = &v4[v59];
    v62 = (uint64_t)a2 + v59;
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = *(_BYTE *)(v62 + 8);
    v4[v60] = *((_BYTE *)a2 + v60);
    v63 = a3[41];
    v64 = a3[42];
    v65 = &v4[v63];
    v66 = (uint64_t)a2 + v63;
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v65[8] = *(_BYTE *)(v66 + 8);
    v67 = &v4[v64];
    v68 = (uint64_t)a2 + v64;
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[8] = *(_BYTE *)(v68 + 8);
    v69 = a3[43];
    v70 = a3[44];
    v71 = &v4[v69];
    v72 = (uint64_t)a2 + v69;
    *(_QWORD *)v71 = *(_QWORD *)v72;
    v71[8] = *(_BYTE *)(v72 + 8);
    v73 = &v4[v70];
    v74 = (uint64_t)a2 + v70;
    *(_QWORD *)v73 = *(_QWORD *)v74;
    v73[8] = *(_BYTE *)(v74 + 8);
    v75 = a3[45];
    v76 = a3[46];
    v77 = &v4[v75];
    v78 = (uint64_t *)((char *)a2 + v75);
    v79 = *v78;
    v77[8] = *((_BYTE *)v78 + 8);
    *(_QWORD *)v77 = v79;
    v80 = &v4[v76];
    v81 = (uint64_t)a2 + v76;
    *(_QWORD *)v80 = *(_QWORD *)v81;
    v80[8] = *(_BYTE *)(v81 + 8);
    v82 = a3[47];
    v83 = a3[48];
    v84 = &v4[v82];
    v85 = (uint64_t)a2 + v82;
    *(_QWORD *)v84 = *(_QWORD *)v85;
    v84[8] = *(_BYTE *)(v85 + 8);
    v86 = &v4[v83];
    v87 = (uint64_t)a2 + v83;
    *(_QWORD *)v86 = *(_QWORD *)v87;
    v86[8] = *(_BYTE *)(v87 + 8);
    v88 = a3[49];
    v89 = a3[50];
    v90 = &v4[v88];
    v91 = (uint64_t)a2 + v88;
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[8] = *(_BYTE *)(v91 + 8);
    v92 = &v4[v89];
    v93 = (uint64_t)a2 + v89;
    *(_QWORD *)v92 = *(_QWORD *)v93;
    v92[8] = *(_BYTE *)(v93 + 8);
    v94 = a3[51];
    v95 = a3[52];
    v96 = &v4[v94];
    v97 = (uint64_t)a2 + v94;
    *(_QWORD *)v96 = *(_QWORD *)v97;
    v96[8] = *(_BYTE *)(v97 + 8);
    v98 = &v4[v95];
    v99 = (uint64_t)a2 + v95;
    *(_QWORD *)v98 = *(_QWORD *)v99;
    v98[8] = *(_BYTE *)(v99 + 8);
    v100 = a3[53];
    v101 = a3[54];
    v102 = &v4[v100];
    v103 = (uint64_t)a2 + v100;
    *(_QWORD *)v102 = *(_QWORD *)v103;
    v102[8] = *(_BYTE *)(v103 + 8);
    v104 = &v4[v101];
    v105 = (uint64_t)a2 + v101;
    *(_QWORD *)v104 = *(_QWORD *)v105;
    v104[8] = *(_BYTE *)(v105 + 8);
    v106 = a3[56];
    v4[a3[55]] = *((_BYTE *)a2 + a3[55]);
    v107 = &v4[v106];
    v108 = (uint64_t)a2 + v106;
    *(_QWORD *)v107 = *(_QWORD *)v108;
    v107[8] = *(_BYTE *)(v108 + 8);
    v109 = a3[57];
    v110 = a3[58];
    v111 = &v4[v109];
    v112 = (uint64_t)a2 + v109;
    *(_QWORD *)v111 = *(_QWORD *)v112;
    v111[8] = *(_BYTE *)(v112 + 8);
    v113 = &v4[v110];
    v114 = (uint64_t)a2 + v110;
    *(_QWORD *)v113 = *(_QWORD *)v114;
    v113[8] = *(_BYTE *)(v114 + 8);
    v115 = a3[59];
    v116 = a3[60];
    v117 = &v4[v115];
    v118 = (uint64_t)a2 + v115;
    *(_QWORD *)v117 = *(_QWORD *)v118;
    v117[8] = *(_BYTE *)(v118 + 8);
    v119 = &v4[v116];
    v120 = (uint64_t *)((char *)a2 + v116);
    v121 = *v120;
    v119[8] = *((_BYTE *)v120 + 8);
    *(_QWORD *)v119 = v121;
    v122 = a3[61];
    v123 = a3[62];
    v124 = &v4[v122];
    v125 = (uint64_t)a2 + v122;
    *(_QWORD *)v124 = *(_QWORD *)v125;
    v124[8] = *(_BYTE *)(v125 + 8);
    v4[v123] = *((_BYTE *)a2 + v123);
    v126 = a3[64];
    v4[a3[63]] = *((_BYTE *)a2 + a3[63]);
    v127 = &v4[v126];
    v128 = (uint64_t)a2 + v126;
    v129 = *(_QWORD *)(v128 + 48);
    if (v129)
    {
      v130 = *(_OWORD *)(v128 + 16);
      *(_OWORD *)v127 = *(_OWORD *)v128;
      *((_OWORD *)v127 + 1) = v130;
      *((_OWORD *)v127 + 2) = *(_OWORD *)(v128 + 32);
      *((_QWORD *)v127 + 6) = v129;
      *(_OWORD *)(v127 + 56) = *(_OWORD *)(v128 + 56);
      *(_OWORD *)(v127 + 72) = *(_OWORD *)(v128 + 72);
      *(_OWORD *)(v127 + 88) = *(_OWORD *)(v128 + 88);
      v131 = *(_QWORD *)(v128 + 104);
      *((_QWORD *)v127 + 13) = v131;
      swift_bridgeObjectRetain(v129);
      swift_bridgeObjectRetain(v131);
    }
    else
    {
      v133 = *(_OWORD *)(v128 + 80);
      *((_OWORD *)v127 + 4) = *(_OWORD *)(v128 + 64);
      *((_OWORD *)v127 + 5) = v133;
      *((_OWORD *)v127 + 6) = *(_OWORD *)(v128 + 96);
      v134 = *(_OWORD *)(v128 + 16);
      *(_OWORD *)v127 = *(_OWORD *)v128;
      *((_OWORD *)v127 + 1) = v134;
      v135 = *(_OWORD *)(v128 + 48);
      *((_OWORD *)v127 + 2) = *(_OWORD *)(v128 + 32);
      *((_OWORD *)v127 + 3) = v135;
    }
    v136 = a3[65];
    v137 = &v4[v136];
    v138 = (uint64_t)a2 + v136;
    *(_QWORD *)v137 = *(_QWORD *)v138;
    v137[8] = *(_BYTE *)(v138 + 8);
    v139 = a3[66];
    v140 = &v4[v139];
    v141 = (uint64_t)a2 + v139;
    *(_QWORD *)v140 = *(_QWORD *)v141;
    v140[8] = *(_BYTE *)(v141 + 8);
    v142 = a3[67];
    v143 = &v4[v142];
    v144 = (uint64_t)a2 + v142;
    *(_QWORD *)v143 = *(_QWORD *)v144;
    v143[8] = *(_BYTE *)(v144 + 8);
    v145 = a3[68];
    v146 = &v4[v145];
    v147 = (uint64_t)a2 + v145;
    v146[8] = *(_BYTE *)(v147 + 8);
    *(_QWORD *)v146 = *(_QWORD *)v147;
    v148 = a3[69];
    v149 = &v4[v148];
    v150 = (uint64_t)a2 + v148;
    *(_QWORD *)v149 = *(_QWORD *)v150;
    v149[8] = *(_BYTE *)(v150 + 8);
    v151 = a3[70];
    v152 = &v4[v151];
    v153 = (uint64_t)a2 + v151;
    *(_QWORD *)v152 = *(_QWORD *)v153;
    v152[8] = *(_BYTE *)(v153 + 8);
    v154 = a3[71];
    v155 = &v4[v154];
    v156 = (uint64_t)a2 + v154;
    *(_QWORD *)v155 = *(_QWORD *)v156;
    v155[8] = *(_BYTE *)(v156 + 8);
    v157 = a3[72];
    v158 = &v4[v157];
    v159 = (uint64_t)a2 + v157;
    *(_QWORD *)v158 = *(_QWORD *)v159;
    v158[8] = *(_BYTE *)(v159 + 8);
    v160 = a3[73];
    v161 = &v4[v160];
    v162 = (uint64_t)a2 + v160;
    *(_QWORD *)v161 = *(_QWORD *)v162;
    v161[8] = *(_BYTE *)(v162 + 8);
    v163 = a3[74];
    v164 = &v4[v163];
    v165 = (uint64_t)a2 + v163;
    *(_QWORD *)v164 = *(_QWORD *)v165;
    v164[8] = *(_BYTE *)(v165 + 8);
    v166 = a3[75];
    v167 = &v4[v166];
    v168 = (uint64_t)a2 + v166;
    *(_QWORD *)v167 = *(_QWORD *)v168;
    v167[8] = *(_BYTE *)(v168 + 8);
    v169 = a3[76];
    v170 = &v4[v169];
    v171 = (uint64_t)a2 + v169;
    *(_QWORD *)v170 = *(_QWORD *)v171;
    v170[8] = *(_BYTE *)(v171 + 8);
    v172 = a3[77];
    v173 = &v4[v172];
    v174 = (uint64_t)a2 + v172;
    *(_QWORD *)v173 = *(_QWORD *)v174;
    v173[8] = *(_BYTE *)(v174 + 8);
    v175 = a3[78];
    v176 = &v4[v175];
    v177 = (uint64_t)a2 + v175;
    *(_QWORD *)v176 = *(_QWORD *)v177;
    v176[8] = *(_BYTE *)(v177 + 8);
    v178 = a3[79];
    v179 = &v4[v178];
    v180 = (uint64_t)a2 + v178;
    *(_QWORD *)v179 = *(_QWORD *)v180;
    v179[8] = *(_BYTE *)(v180 + 8);
    v181 = a3[80];
    v182 = &v4[v181];
    v183 = (uint64_t)a2 + v181;
    *(_QWORD *)v182 = *(_QWORD *)v183;
    v182[8] = *(_BYTE *)(v183 + 8);
    v184 = a3[81];
    v185 = &v4[v184];
    v186 = (uint64_t)a2 + v184;
    *(_QWORD *)v185 = *(_QWORD *)v186;
    v185[8] = *(_BYTE *)(v186 + 8);
    v187 = a3[82];
    v188 = &v4[v187];
    v189 = (uint64_t)a2 + v187;
    *(_QWORD *)v188 = *(_QWORD *)v189;
    v188[8] = *(_BYTE *)(v189 + 8);
    v190 = a3[83];
    v191 = &v4[v190];
    v192 = (uint64_t)a2 + v190;
    *(_QWORD *)v191 = *(_QWORD *)v192;
    v191[8] = *(_BYTE *)(v192 + 8);
    v4[a3[84]] = *((_BYTE *)a2 + a3[84]);
    v4[a3[85]] = *((_BYTE *)a2 + a3[85]);
    v4[a3[86]] = *((_BYTE *)a2 + a3[86]);
    v193 = a3[87];
    v194 = &v4[v193];
    v195 = (uint64_t)a2 + v193;
    *(_QWORD *)v194 = *(_QWORD *)v195;
    v194[8] = *(_BYTE *)(v195 + 8);
    v196 = a3[88];
    v197 = &v4[v196];
    v198 = (uint64_t)a2 + v196;
    *(_QWORD *)v197 = *(_QWORD *)v198;
    v197[8] = *(_BYTE *)(v198 + 8);
    v199 = a3[89];
    v200 = &v4[v199];
    v201 = (uint64_t)a2 + v199;
    *(_QWORD *)v200 = *(_QWORD *)v201;
    v200[8] = *(_BYTE *)(v201 + 8);
    v202 = a3[90];
    v203 = &v4[v202];
    v204 = (uint64_t)a2 + v202;
    *(_QWORD *)v203 = *(_QWORD *)v204;
    v203[8] = *(_BYTE *)(v204 + 8);
    v205 = a3[91];
    v206 = &v4[v205];
    v207 = (uint64_t *)((char *)a2 + v205);
    v208 = *v207;
    v206[8] = *((_BYTE *)v207 + 8);
    *(_QWORD *)v206 = v208;
    v209 = a3[92];
    v210 = &v4[v209];
    v211 = (uint64_t)a2 + v209;
    *(_QWORD *)v210 = *(_QWORD *)v211;
    v210[8] = *(_BYTE *)(v211 + 8);
    v212 = a3[93];
    v213 = &v4[v212];
    v214 = (uint64_t)a2 + v212;
    *(_QWORD *)v213 = *(_QWORD *)v214;
    v213[8] = *(_BYTE *)(v214 + 8);
    v215 = a3[94];
    v216 = &v4[v215];
    v217 = (uint64_t)a2 + v215;
    *(_QWORD *)v216 = *(_QWORD *)v217;
    v216[8] = *(_BYTE *)(v217 + 8);
    v218 = a3[95];
    v219 = &v4[v218];
    v220 = (uint64_t)a2 + v218;
    *(_QWORD *)v219 = *(_QWORD *)v220;
    v219[8] = *(_BYTE *)(v220 + 8);
    v4[a3[96]] = *((_BYTE *)a2 + a3[96]);
    v221 = a3[97];
    v222 = &v4[v221];
    v223 = (uint64_t)a2 + v221;
    *(_QWORD *)v222 = *(_QWORD *)v223;
    v222[8] = *(_BYTE *)(v223 + 8);
    v224 = a3[98];
    v225 = &v4[v224];
    v226 = (uint64_t)a2 + v224;
    *(_QWORD *)v225 = *(_QWORD *)v226;
    v225[8] = *(_BYTE *)(v226 + 8);
    v227 = a3[99];
    v228 = &v4[v227];
    v229 = (uint64_t)a2 + v227;
    *(_QWORD *)v228 = *(_QWORD *)v229;
    v230 = a3[100];
    v231 = *((_BYTE *)a2 + v230);
    v228[8] = *(_BYTE *)(v229 + 8);
    v4[v230] = v231;
    v4[a3[101]] = *((_BYTE *)a2 + a3[101]);
    v4[a3[102]] = *((_BYTE *)a2 + a3[102]);
    v232 = a3[103];
    v233 = &v4[v232];
    v234 = (uint64_t)a2 + v232;
    *(_QWORD *)v233 = *(_QWORD *)v234;
    v233[8] = *(_BYTE *)(v234 + 8);
    v235 = a3[104];
    v236 = &v4[v235];
    v237 = (uint64_t)a2 + v235;
    *(_QWORD *)v236 = *(_QWORD *)v237;
    v236[8] = *(_BYTE *)(v237 + 8);
    v238 = a3[105];
    v239 = &v4[v238];
    v240 = (uint64_t)a2 + v238;
    *(_QWORD *)v239 = *(_QWORD *)v240;
    v239[8] = *(_BYTE *)(v240 + 8);
    v241 = a3[106];
    v242 = &v4[v241];
    v243 = (uint64_t)a2 + v241;
    *(_QWORD *)v242 = *(_QWORD *)v243;
    v242[8] = *(_BYTE *)(v243 + 8);
    v4[a3[107]] = *((_BYTE *)a2 + a3[107]);
    v244 = a3[108];
    v245 = &v4[v244];
    v246 = (uint64_t)a2 + v244;
    *(_QWORD *)v245 = *(_QWORD *)v246;
    v245[8] = *(_BYTE *)(v246 + 8);
    v247 = a3[109];
    v248 = *(uint64_t *)((char *)a2 + v247);
    *(_QWORD *)&v4[v247] = v248;
    v249 = a3[110];
    v250 = &v4[v249];
    v251 = (uint64_t)a2 + v249;
    *(_QWORD *)v250 = *(_QWORD *)v251;
    v250[8] = *(_BYTE *)(v251 + 8);
    v4[a3[111]] = *((_BYTE *)a2 + a3[111]);
    v252 = a3[112];
    v253 = *(uint64_t *)((char *)a2 + v252);
    *(_QWORD *)&v4[v252] = v253;
    v254 = a3[113];
    v255 = &v4[v254];
    v256 = (uint64_t)a2 + v254;
    *(_QWORD *)v255 = *(_QWORD *)v256;
    v255[8] = *(_BYTE *)(v256 + 8);
    v257 = a3[114];
    v258 = &v4[v257];
    v259 = (uint64_t)a2 + v257;
    *(_QWORD *)v258 = *(_QWORD *)v259;
    v258[8] = *(_BYTE *)(v259 + 8);
    v4[a3[115]] = *((_BYTE *)a2 + a3[115]);
    v4[a3[116]] = *((_BYTE *)a2 + a3[116]);
    v260 = a3[117];
    v261 = &v4[v260];
    v262 = (uint64_t)a2 + v260;
    *(_QWORD *)v261 = *(_QWORD *)v262;
    v261[8] = *(_BYTE *)(v262 + 8);
    v263 = a3[118];
    v264 = &v4[v263];
    v265 = (uint64_t)a2 + v263;
    *(_QWORD *)v264 = *(_QWORD *)v265;
    v264[8] = *(_BYTE *)(v265 + 8);
    v266 = a3[119];
    v267 = &v4[v266];
    v268 = (uint64_t)a2 + v266;
    *(_QWORD *)v267 = *(_QWORD *)v268;
    v267[8] = *(_BYTE *)(v268 + 8);
    v269 = a3[120];
    v270 = &v4[v269];
    v271 = (uint64_t)a2 + v269;
    *(_QWORD *)v270 = *(_QWORD *)v271;
    v270[8] = *(_BYTE *)(v271 + 8);
    v272 = a3[121];
    v273 = &v4[v272];
    v274 = (uint64_t *)((char *)a2 + v272);
    v275 = *v274;
    v273[8] = *((_BYTE *)v274 + 8);
    *(_QWORD *)v273 = v275;
    v276 = a3[122];
    v277 = &v4[v276];
    v278 = (uint64_t)a2 + v276;
    *(_QWORD *)v277 = *(_QWORD *)v278;
    v277[8] = *(_BYTE *)(v278 + 8);
    v279 = a3[123];
    v280 = &v4[v279];
    v281 = (uint64_t)a2 + v279;
    *(_QWORD *)v280 = *(_QWORD *)v281;
    v280[8] = *(_BYTE *)(v281 + 8);
    v282 = a3[124];
    v283 = &v4[v282];
    v284 = (uint64_t)a2 + v282;
    *(_QWORD *)v283 = *(_QWORD *)v284;
    v283[8] = *(_BYTE *)(v284 + 8);
    v285 = a3[125];
    v286 = &v4[v285];
    v287 = (uint64_t)a2 + v285;
    *(_QWORD *)v286 = *(_QWORD *)v287;
    v286[8] = *(_BYTE *)(v287 + 8);
    v288 = a3[126];
    v289 = &v4[v288];
    v290 = (uint64_t)a2 + v288;
    *(_QWORD *)v289 = *(_QWORD *)v290;
    v289[8] = *(_BYTE *)(v290 + 8);
    v291 = a3[127];
    v292 = &v4[v291];
    v293 = (uint64_t)a2 + v291;
    *(_QWORD *)v292 = *(_QWORD *)v293;
    v292[8] = *(_BYTE *)(v293 + 8);
    v294 = a3[128];
    v295 = &v4[v294];
    v296 = (uint64_t)a2 + v294;
    *(_QWORD *)v295 = *(_QWORD *)v296;
    v295[8] = *(_BYTE *)(v296 + 8);
    v297 = a3[129];
    v298 = &v4[v297];
    v299 = (uint64_t)a2 + v297;
    *(_QWORD *)v298 = *(_QWORD *)v299;
    v298[8] = *(_BYTE *)(v299 + 8);
    v300 = a3[130];
    v301 = &v4[v300];
    v302 = (uint64_t)a2 + v300;
    *(_QWORD *)v301 = *(_QWORD *)v302;
    v301[8] = *(_BYTE *)(v302 + 8);
    v303 = a3[131];
    v304 = &v4[v303];
    v305 = (uint64_t)a2 + v303;
    *(_QWORD *)v304 = *(_QWORD *)v305;
    v304[8] = *(_BYTE *)(v305 + 8);
    v306 = a3[132];
    v307 = &v4[v306];
    v308 = (uint64_t)a2 + v306;
    *(_QWORD *)v307 = *(_QWORD *)v308;
    v307[8] = *(_BYTE *)(v308 + 8);
    v309 = a3[133];
    v310 = &v4[v309];
    v311 = (uint64_t)a2 + v309;
    *(_QWORD *)v310 = *(_QWORD *)v311;
    v312 = a3[134];
    v313 = *((_BYTE *)a2 + v312);
    v310[8] = *(_BYTE *)(v311 + 8);
    v4[v312] = v313;
    v4[a3[135]] = *((_BYTE *)a2 + a3[135]);
    v314 = a3[136];
    v315 = &v4[v314];
    v316 = (uint64_t)a2 + v314;
    *(_QWORD *)v315 = *(_QWORD *)v316;
    v315[8] = *(_BYTE *)(v316 + 8);
    v317 = a3[137];
    v318 = &v4[v317];
    v319 = (uint64_t)a2 + v317;
    *(_QWORD *)v318 = *(_QWORD *)v319;
    v320 = a3[138];
    v321 = *((_BYTE *)a2 + v320);
    v318[8] = *(_BYTE *)(v319 + 8);
    v4[v320] = v321;
    v322 = a3[139];
    v323 = &v4[v322];
    v324 = (uint64_t)a2 + v322;
    *(_DWORD *)v323 = *(_DWORD *)v324;
    v323[4] = *(_BYTE *)(v324 + 4);
    v325 = a3[140];
    v326 = &v4[v325];
    v327 = (uint64_t)a2 + v325;
    *(_QWORD *)v326 = *(_QWORD *)v327;
    v326[8] = *(_BYTE *)(v327 + 8);
    v328 = a3[141];
    v329 = &v4[v328];
    v330 = (uint64_t)a2 + v328;
    *(_QWORD *)v329 = *(_QWORD *)v330;
    v329[8] = *(_BYTE *)(v330 + 8);
    v331 = a3[142];
    v332 = &v4[v331];
    v333 = (uint64_t)a2 + v331;
    *(_QWORD *)v332 = *(_QWORD *)v333;
    v332[8] = *(_BYTE *)(v333 + 8);
    v334 = a3[143];
    v335 = &v4[v334];
    v336 = (uint64_t *)((char *)a2 + v334);
    v337 = *v336;
    v335[8] = *((_BYTE *)v336 + 8);
    *(_QWORD *)v335 = v337;
    v338 = a3[144];
    v339 = &v4[v338];
    v340 = (uint64_t)a2 + v338;
    *(_QWORD *)v339 = *(_QWORD *)v340;
    v339[8] = *(_BYTE *)(v340 + 8);
    v341 = a3[145];
    v342 = &v4[v341];
    v343 = (uint64_t)a2 + v341;
    *(_QWORD *)v342 = *(_QWORD *)v343;
    v342[8] = *(_BYTE *)(v343 + 8);
    v344 = a3[146];
    v345 = &v4[v344];
    v346 = (uint64_t)a2 + v344;
    *(_QWORD *)v345 = *(_QWORD *)v346;
    v345[8] = *(_BYTE *)(v346 + 8);
    v4[a3[147]] = *((_BYTE *)a2 + a3[147]);
    v347 = a3[148];
    v348 = &v4[v347];
    v349 = (uint64_t)a2 + v347;
    *(_QWORD *)v348 = *(_QWORD *)v349;
    v348[8] = *(_BYTE *)(v349 + 8);
    v350 = a3[149];
    v351 = &v4[v350];
    v352 = (uint64_t)a2 + v350;
    *(_QWORD *)v351 = *(_QWORD *)v352;
    v351[8] = *(_BYTE *)(v352 + 8);
    swift_bridgeObjectRetain(v248);
    swift_bridgeObjectRetain(v253);
  }
  return v4;
}

uint64_t sub_100741AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 96);
  v5 = sub_10001A9A8(&qword_101106608);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  if (*(_QWORD *)(a1 + *(int *)(a2 + 256) + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100741B50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v11 = *(_QWORD *)(a2 + 96);
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v13 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v13;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  v14 = a3[24];
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_OWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v11);
  v17 = sub_10001A9A8(&qword_101106608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  v18 = a3[25];
  v19 = a3[26];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a1 + v19;
  v23 = a2 + v19;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a3[27];
  v25 = a3[28];
  v26 = a1 + v24;
  v27 = a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  *(_BYTE *)(v26 + 8) = *(_BYTE *)(v27 + 8);
  v28 = a1 + v25;
  v29 = a2 + v25;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = a3[29];
  v31 = a3[30];
  v32 = a1 + v30;
  v33 = a2 + v30;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = *(_BYTE *)(v33 + 8);
  v34 = a1 + v31;
  v35 = a2 + v31;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  v36 = a3[31];
  v37 = a3[32];
  v38 = a1 + v36;
  v39 = a2 + v36;
  *(_QWORD *)v38 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  v40 = a1 + v37;
  v41 = a2 + v37;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  v42 = a3[33];
  v43 = a3[34];
  v44 = a1 + v42;
  v45 = a2 + v42;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  v46 = a1 + v43;
  v47 = a2 + v43;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  v48 = a3[35];
  v49 = a3[36];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  *(_BYTE *)(a1 + v49) = *(_BYTE *)(a2 + v49);
  v52 = a3[37];
  v53 = a3[38];
  v54 = a1 + v52;
  v55 = a2 + v52;
  *(_QWORD *)v54 = *(_QWORD *)v55;
  *(_BYTE *)(v54 + 8) = *(_BYTE *)(v55 + 8);
  v56 = a1 + v53;
  v57 = a2 + v53;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  v58 = a3[39];
  v59 = a3[40];
  v60 = a1 + v58;
  v61 = a2 + v58;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  *(_BYTE *)(a1 + v59) = *(_BYTE *)(a2 + v59);
  v62 = a3[41];
  v63 = a3[42];
  v64 = a1 + v62;
  v65 = a2 + v62;
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  v66 = a1 + v63;
  v67 = a2 + v63;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  v68 = a3[43];
  v69 = a3[44];
  v70 = a1 + v68;
  v71 = a2 + v68;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
  v72 = a1 + v69;
  v73 = a2 + v69;
  *(_QWORD *)v72 = *(_QWORD *)v73;
  *(_BYTE *)(v72 + 8) = *(_BYTE *)(v73 + 8);
  v74 = a3[45];
  v75 = a3[46];
  v76 = a1 + v74;
  v77 = (uint64_t *)(a2 + v74);
  v78 = *v77;
  *(_BYTE *)(v76 + 8) = *((_BYTE *)v77 + 8);
  *(_QWORD *)v76 = v78;
  v79 = a1 + v75;
  v80 = a2 + v75;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  v81 = a3[47];
  v82 = a3[48];
  v83 = a1 + v81;
  v84 = a2 + v81;
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  v85 = a1 + v82;
  v86 = a2 + v82;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  v87 = a3[49];
  v88 = a3[50];
  v89 = a1 + v87;
  v90 = a2 + v87;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  v91 = a1 + v88;
  v92 = a2 + v88;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  v93 = a3[51];
  v94 = a3[52];
  v95 = a1 + v93;
  v96 = a2 + v93;
  *(_QWORD *)v95 = *(_QWORD *)v96;
  *(_BYTE *)(v95 + 8) = *(_BYTE *)(v96 + 8);
  v97 = a1 + v94;
  v98 = a2 + v94;
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  v99 = a3[53];
  v100 = a3[54];
  v101 = a1 + v99;
  v102 = a2 + v99;
  *(_QWORD *)v101 = *(_QWORD *)v102;
  *(_BYTE *)(v101 + 8) = *(_BYTE *)(v102 + 8);
  v103 = a1 + v100;
  v104 = a2 + v100;
  *(_QWORD *)v103 = *(_QWORD *)v104;
  *(_BYTE *)(v103 + 8) = *(_BYTE *)(v104 + 8);
  v105 = a3[56];
  *(_BYTE *)(a1 + a3[55]) = *(_BYTE *)(a2 + a3[55]);
  v106 = a1 + v105;
  v107 = a2 + v105;
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  v108 = a3[57];
  v109 = a3[58];
  v110 = a1 + v108;
  v111 = a2 + v108;
  *(_QWORD *)v110 = *(_QWORD *)v111;
  *(_BYTE *)(v110 + 8) = *(_BYTE *)(v111 + 8);
  v112 = a1 + v109;
  v113 = a2 + v109;
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  v114 = a3[59];
  v115 = a3[60];
  v116 = a1 + v114;
  v117 = a2 + v114;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  *(_BYTE *)(v116 + 8) = *(_BYTE *)(v117 + 8);
  v118 = a1 + v115;
  v119 = (uint64_t *)(a2 + v115);
  v120 = *v119;
  *(_BYTE *)(v118 + 8) = *((_BYTE *)v119 + 8);
  *(_QWORD *)v118 = v120;
  v121 = a3[61];
  v122 = a3[62];
  v123 = a1 + v121;
  v124 = a2 + v121;
  *(_QWORD *)v123 = *(_QWORD *)v124;
  *(_BYTE *)(v123 + 8) = *(_BYTE *)(v124 + 8);
  *(_BYTE *)(a1 + v122) = *(_BYTE *)(a2 + v122);
  v125 = a3[64];
  *(_BYTE *)(a1 + a3[63]) = *(_BYTE *)(a2 + a3[63]);
  v126 = a1 + v125;
  v127 = a2 + v125;
  v128 = *(_QWORD *)(v127 + 48);
  if (v128)
  {
    v129 = *(_OWORD *)(v127 + 16);
    *(_OWORD *)v126 = *(_OWORD *)v127;
    *(_OWORD *)(v126 + 16) = v129;
    *(_OWORD *)(v126 + 32) = *(_OWORD *)(v127 + 32);
    *(_QWORD *)(v126 + 48) = v128;
    *(_OWORD *)(v126 + 56) = *(_OWORD *)(v127 + 56);
    *(_OWORD *)(v126 + 72) = *(_OWORD *)(v127 + 72);
    *(_OWORD *)(v126 + 88) = *(_OWORD *)(v127 + 88);
    v130 = *(_QWORD *)(v127 + 104);
    *(_QWORD *)(v126 + 104) = v130;
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v130);
  }
  else
  {
    v131 = *(_OWORD *)(v127 + 80);
    *(_OWORD *)(v126 + 64) = *(_OWORD *)(v127 + 64);
    *(_OWORD *)(v126 + 80) = v131;
    *(_OWORD *)(v126 + 96) = *(_OWORD *)(v127 + 96);
    v132 = *(_OWORD *)(v127 + 16);
    *(_OWORD *)v126 = *(_OWORD *)v127;
    *(_OWORD *)(v126 + 16) = v132;
    v133 = *(_OWORD *)(v127 + 48);
    *(_OWORD *)(v126 + 32) = *(_OWORD *)(v127 + 32);
    *(_OWORD *)(v126 + 48) = v133;
  }
  v134 = a3[65];
  v135 = a1 + v134;
  v136 = a2 + v134;
  *(_QWORD *)v135 = *(_QWORD *)v136;
  *(_BYTE *)(v135 + 8) = *(_BYTE *)(v136 + 8);
  v137 = a3[66];
  v138 = a1 + v137;
  v139 = a2 + v137;
  *(_QWORD *)v138 = *(_QWORD *)v139;
  *(_BYTE *)(v138 + 8) = *(_BYTE *)(v139 + 8);
  v140 = a3[67];
  v141 = a1 + v140;
  v142 = a2 + v140;
  *(_QWORD *)v141 = *(_QWORD *)v142;
  *(_BYTE *)(v141 + 8) = *(_BYTE *)(v142 + 8);
  v143 = a3[68];
  v144 = a1 + v143;
  v145 = a2 + v143;
  *(_BYTE *)(v144 + 8) = *(_BYTE *)(v145 + 8);
  *(_QWORD *)v144 = *(_QWORD *)v145;
  v146 = a3[69];
  v147 = a1 + v146;
  v148 = a2 + v146;
  *(_QWORD *)v147 = *(_QWORD *)v148;
  *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
  v149 = a3[70];
  v150 = a1 + v149;
  v151 = a2 + v149;
  *(_QWORD *)v150 = *(_QWORD *)v151;
  *(_BYTE *)(v150 + 8) = *(_BYTE *)(v151 + 8);
  v152 = a3[71];
  v153 = a1 + v152;
  v154 = a2 + v152;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *(_BYTE *)(v153 + 8) = *(_BYTE *)(v154 + 8);
  v155 = a3[72];
  v156 = a1 + v155;
  v157 = a2 + v155;
  *(_QWORD *)v156 = *(_QWORD *)v157;
  *(_BYTE *)(v156 + 8) = *(_BYTE *)(v157 + 8);
  v158 = a3[73];
  v159 = a1 + v158;
  v160 = a2 + v158;
  *(_QWORD *)v159 = *(_QWORD *)v160;
  *(_BYTE *)(v159 + 8) = *(_BYTE *)(v160 + 8);
  v161 = a3[74];
  v162 = a1 + v161;
  v163 = a2 + v161;
  *(_QWORD *)v162 = *(_QWORD *)v163;
  *(_BYTE *)(v162 + 8) = *(_BYTE *)(v163 + 8);
  v164 = a3[75];
  v165 = a1 + v164;
  v166 = a2 + v164;
  *(_QWORD *)v165 = *(_QWORD *)v166;
  *(_BYTE *)(v165 + 8) = *(_BYTE *)(v166 + 8);
  v167 = a3[76];
  v168 = a1 + v167;
  v169 = a2 + v167;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  v170 = a3[77];
  v171 = a1 + v170;
  v172 = a2 + v170;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
  v173 = a3[78];
  v174 = a1 + v173;
  v175 = a2 + v173;
  *(_QWORD *)v174 = *(_QWORD *)v175;
  *(_BYTE *)(v174 + 8) = *(_BYTE *)(v175 + 8);
  v176 = a3[79];
  v177 = a1 + v176;
  v178 = a2 + v176;
  *(_QWORD *)v177 = *(_QWORD *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  v179 = a3[80];
  v180 = a1 + v179;
  v181 = a2 + v179;
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_BYTE *)(v180 + 8) = *(_BYTE *)(v181 + 8);
  v182 = a3[81];
  v183 = a1 + v182;
  v184 = a2 + v182;
  *(_QWORD *)v183 = *(_QWORD *)v184;
  *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
  v185 = a3[82];
  v186 = a1 + v185;
  v187 = a2 + v185;
  *(_QWORD *)v186 = *(_QWORD *)v187;
  *(_BYTE *)(v186 + 8) = *(_BYTE *)(v187 + 8);
  v188 = a3[83];
  v189 = a1 + v188;
  v190 = a2 + v188;
  *(_QWORD *)v189 = *(_QWORD *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  *(_BYTE *)(a1 + a3[84]) = *(_BYTE *)(a2 + a3[84]);
  *(_BYTE *)(a1 + a3[85]) = *(_BYTE *)(a2 + a3[85]);
  *(_BYTE *)(a1 + a3[86]) = *(_BYTE *)(a2 + a3[86]);
  v191 = a3[87];
  v192 = a1 + v191;
  v193 = a2 + v191;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  v194 = a3[88];
  v195 = a1 + v194;
  v196 = a2 + v194;
  *(_QWORD *)v195 = *(_QWORD *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  v197 = a3[89];
  v198 = a1 + v197;
  v199 = a2 + v197;
  *(_QWORD *)v198 = *(_QWORD *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  v200 = a3[90];
  v201 = a1 + v200;
  v202 = a2 + v200;
  *(_QWORD *)v201 = *(_QWORD *)v202;
  *(_BYTE *)(v201 + 8) = *(_BYTE *)(v202 + 8);
  v203 = a3[91];
  v204 = a1 + v203;
  v205 = (uint64_t *)(a2 + v203);
  v206 = *v205;
  *(_BYTE *)(v204 + 8) = *((_BYTE *)v205 + 8);
  *(_QWORD *)v204 = v206;
  v207 = a3[92];
  v208 = a1 + v207;
  v209 = a2 + v207;
  *(_QWORD *)v208 = *(_QWORD *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  v210 = a3[93];
  v211 = a1 + v210;
  v212 = a2 + v210;
  *(_QWORD *)v211 = *(_QWORD *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  v213 = a3[94];
  v214 = a1 + v213;
  v215 = a2 + v213;
  *(_QWORD *)v214 = *(_QWORD *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  v216 = a3[95];
  v217 = a1 + v216;
  v218 = a2 + v216;
  *(_QWORD *)v217 = *(_QWORD *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  *(_BYTE *)(a1 + a3[96]) = *(_BYTE *)(a2 + a3[96]);
  v219 = a3[97];
  v220 = a1 + v219;
  v221 = a2 + v219;
  *(_QWORD *)v220 = *(_QWORD *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  v222 = a3[98];
  v223 = a1 + v222;
  v224 = a2 + v222;
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  v225 = a3[99];
  v226 = a1 + v225;
  v227 = a2 + v225;
  *(_QWORD *)v226 = *(_QWORD *)v227;
  v228 = a3[100];
  v229 = *(_BYTE *)(a2 + v228);
  *(_BYTE *)(v226 + 8) = *(_BYTE *)(v227 + 8);
  *(_BYTE *)(a1 + v228) = v229;
  *(_BYTE *)(a1 + a3[101]) = *(_BYTE *)(a2 + a3[101]);
  *(_BYTE *)(a1 + a3[102]) = *(_BYTE *)(a2 + a3[102]);
  v230 = a3[103];
  v231 = a1 + v230;
  v232 = a2 + v230;
  *(_QWORD *)v231 = *(_QWORD *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  v233 = a3[104];
  v234 = a1 + v233;
  v235 = a2 + v233;
  *(_QWORD *)v234 = *(_QWORD *)v235;
  *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
  v236 = a3[105];
  v237 = a1 + v236;
  v238 = a2 + v236;
  *(_QWORD *)v237 = *(_QWORD *)v238;
  *(_BYTE *)(v237 + 8) = *(_BYTE *)(v238 + 8);
  v239 = a3[106];
  v240 = a1 + v239;
  v241 = a2 + v239;
  *(_QWORD *)v240 = *(_QWORD *)v241;
  *(_BYTE *)(v240 + 8) = *(_BYTE *)(v241 + 8);
  *(_BYTE *)(a1 + a3[107]) = *(_BYTE *)(a2 + a3[107]);
  v242 = a3[108];
  v243 = a1 + v242;
  v244 = a2 + v242;
  *(_QWORD *)v243 = *(_QWORD *)v244;
  *(_BYTE *)(v243 + 8) = *(_BYTE *)(v244 + 8);
  v245 = a3[109];
  v246 = *(_QWORD *)(a2 + v245);
  *(_QWORD *)(a1 + v245) = v246;
  v247 = a3[110];
  v248 = a1 + v247;
  v249 = a2 + v247;
  *(_QWORD *)v248 = *(_QWORD *)v249;
  *(_BYTE *)(v248 + 8) = *(_BYTE *)(v249 + 8);
  *(_BYTE *)(a1 + a3[111]) = *(_BYTE *)(a2 + a3[111]);
  v250 = a3[112];
  v251 = *(_QWORD *)(a2 + v250);
  *(_QWORD *)(a1 + v250) = v251;
  v252 = a3[113];
  v253 = a1 + v252;
  v254 = a2 + v252;
  *(_QWORD *)v253 = *(_QWORD *)v254;
  *(_BYTE *)(v253 + 8) = *(_BYTE *)(v254 + 8);
  v255 = a3[114];
  v256 = a1 + v255;
  v257 = a2 + v255;
  *(_QWORD *)v256 = *(_QWORD *)v257;
  *(_BYTE *)(v256 + 8) = *(_BYTE *)(v257 + 8);
  *(_BYTE *)(a1 + a3[115]) = *(_BYTE *)(a2 + a3[115]);
  *(_BYTE *)(a1 + a3[116]) = *(_BYTE *)(a2 + a3[116]);
  v258 = a3[117];
  v259 = a1 + v258;
  v260 = a2 + v258;
  *(_QWORD *)v259 = *(_QWORD *)v260;
  *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
  v261 = a3[118];
  v262 = a1 + v261;
  v263 = a2 + v261;
  *(_QWORD *)v262 = *(_QWORD *)v263;
  *(_BYTE *)(v262 + 8) = *(_BYTE *)(v263 + 8);
  v264 = a3[119];
  v265 = a1 + v264;
  v266 = a2 + v264;
  *(_QWORD *)v265 = *(_QWORD *)v266;
  *(_BYTE *)(v265 + 8) = *(_BYTE *)(v266 + 8);
  v267 = a3[120];
  v268 = a1 + v267;
  v269 = a2 + v267;
  *(_QWORD *)v268 = *(_QWORD *)v269;
  *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
  v270 = a3[121];
  v271 = a1 + v270;
  v272 = (uint64_t *)(a2 + v270);
  v273 = *v272;
  *(_BYTE *)(v271 + 8) = *((_BYTE *)v272 + 8);
  *(_QWORD *)v271 = v273;
  v274 = a3[122];
  v275 = a1 + v274;
  v276 = a2 + v274;
  *(_QWORD *)v275 = *(_QWORD *)v276;
  *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
  v277 = a3[123];
  v278 = a1 + v277;
  v279 = a2 + v277;
  *(_QWORD *)v278 = *(_QWORD *)v279;
  *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
  v280 = a3[124];
  v281 = a1 + v280;
  v282 = a2 + v280;
  *(_QWORD *)v281 = *(_QWORD *)v282;
  *(_BYTE *)(v281 + 8) = *(_BYTE *)(v282 + 8);
  v283 = a3[125];
  v284 = a1 + v283;
  v285 = a2 + v283;
  *(_QWORD *)v284 = *(_QWORD *)v285;
  *(_BYTE *)(v284 + 8) = *(_BYTE *)(v285 + 8);
  v286 = a3[126];
  v287 = a1 + v286;
  v288 = a2 + v286;
  *(_QWORD *)v287 = *(_QWORD *)v288;
  *(_BYTE *)(v287 + 8) = *(_BYTE *)(v288 + 8);
  v289 = a3[127];
  v290 = a1 + v289;
  v291 = a2 + v289;
  *(_QWORD *)v290 = *(_QWORD *)v291;
  *(_BYTE *)(v290 + 8) = *(_BYTE *)(v291 + 8);
  v292 = a3[128];
  v293 = a1 + v292;
  v294 = a2 + v292;
  *(_QWORD *)v293 = *(_QWORD *)v294;
  *(_BYTE *)(v293 + 8) = *(_BYTE *)(v294 + 8);
  v295 = a3[129];
  v296 = a1 + v295;
  v297 = a2 + v295;
  *(_QWORD *)v296 = *(_QWORD *)v297;
  *(_BYTE *)(v296 + 8) = *(_BYTE *)(v297 + 8);
  v298 = a3[130];
  v299 = a1 + v298;
  v300 = a2 + v298;
  *(_QWORD *)v299 = *(_QWORD *)v300;
  *(_BYTE *)(v299 + 8) = *(_BYTE *)(v300 + 8);
  v301 = a3[131];
  v302 = a1 + v301;
  v303 = a2 + v301;
  *(_QWORD *)v302 = *(_QWORD *)v303;
  *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
  v304 = a3[132];
  v305 = a1 + v304;
  v306 = a2 + v304;
  *(_QWORD *)v305 = *(_QWORD *)v306;
  *(_BYTE *)(v305 + 8) = *(_BYTE *)(v306 + 8);
  v307 = a3[133];
  v308 = a1 + v307;
  v309 = a2 + v307;
  *(_QWORD *)v308 = *(_QWORD *)v309;
  v310 = a3[134];
  v311 = *(_BYTE *)(a2 + v310);
  *(_BYTE *)(v308 + 8) = *(_BYTE *)(v309 + 8);
  *(_BYTE *)(a1 + v310) = v311;
  *(_BYTE *)(a1 + a3[135]) = *(_BYTE *)(a2 + a3[135]);
  v312 = a3[136];
  v313 = a1 + v312;
  v314 = a2 + v312;
  *(_QWORD *)v313 = *(_QWORD *)v314;
  *(_BYTE *)(v313 + 8) = *(_BYTE *)(v314 + 8);
  v315 = a3[137];
  v316 = a1 + v315;
  v317 = a2 + v315;
  *(_QWORD *)v316 = *(_QWORD *)v317;
  v318 = a3[138];
  v319 = *(_BYTE *)(a2 + v318);
  *(_BYTE *)(v316 + 8) = *(_BYTE *)(v317 + 8);
  *(_BYTE *)(a1 + v318) = v319;
  v320 = a3[139];
  v321 = a1 + v320;
  v322 = a2 + v320;
  *(_DWORD *)v321 = *(_DWORD *)v322;
  *(_BYTE *)(v321 + 4) = *(_BYTE *)(v322 + 4);
  v323 = a3[140];
  v324 = a1 + v323;
  v325 = a2 + v323;
  *(_QWORD *)v324 = *(_QWORD *)v325;
  *(_BYTE *)(v324 + 8) = *(_BYTE *)(v325 + 8);
  v326 = a3[141];
  v327 = a1 + v326;
  v328 = a2 + v326;
  *(_QWORD *)v327 = *(_QWORD *)v328;
  *(_BYTE *)(v327 + 8) = *(_BYTE *)(v328 + 8);
  v329 = a3[142];
  v330 = a1 + v329;
  v331 = a2 + v329;
  *(_QWORD *)v330 = *(_QWORD *)v331;
  *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
  v332 = a3[143];
  v333 = a1 + v332;
  v334 = (uint64_t *)(a2 + v332);
  v335 = *v334;
  *(_BYTE *)(v333 + 8) = *((_BYTE *)v334 + 8);
  *(_QWORD *)v333 = v335;
  v336 = a3[144];
  v337 = a1 + v336;
  v338 = a2 + v336;
  *(_QWORD *)v337 = *(_QWORD *)v338;
  *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
  v339 = a3[145];
  v340 = a1 + v339;
  v341 = a2 + v339;
  *(_QWORD *)v340 = *(_QWORD *)v341;
  *(_BYTE *)(v340 + 8) = *(_BYTE *)(v341 + 8);
  v342 = a3[146];
  v343 = a1 + v342;
  v344 = a2 + v342;
  *(_QWORD *)v343 = *(_QWORD *)v344;
  *(_BYTE *)(v343 + 8) = *(_BYTE *)(v344 + 8);
  *(_BYTE *)(a1 + a3[147]) = *(_BYTE *)(a2 + a3[147]);
  v345 = a3[148];
  v346 = a1 + v345;
  v347 = a2 + v345;
  *(_QWORD *)v346 = *(_QWORD *)v347;
  *(_BYTE *)(v346 + 8) = *(_BYTE *)(v347 + 8);
  v348 = a3[149];
  v349 = a1 + v348;
  v350 = a2 + v348;
  *(_QWORD *)v349 = *(_QWORD *)v350;
  *(_BYTE *)(v349 + 8) = *(_BYTE *)(v350 + 8);
  swift_bridgeObjectRetain(v246);
  swift_bridgeObjectRetain(v251);
  return a1;
}

uint64_t sub_100742900(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  sub_10001BBBC(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  sub_10001BC14(v9, v10);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v13;
  v14 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v14;
  v15 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v15;
  v16 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v16;
  v17 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v17;
  v18 = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = v18;
  v19 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v19;
  v20 = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = v20;
  v21 = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v21;
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  v22 = a3[24];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_10001A9A8(&qword_101106608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v26 = a3[25];
  v27 = a1 + v26;
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  *(_BYTE *)(v27 + 8) = *((_BYTE *)v28 + 8);
  *(_QWORD *)v27 = v29;
  v30 = a3[26];
  v31 = a1 + v30;
  v32 = a2 + v30;
  LOBYTE(v29) = *(_BYTE *)(v32 + 8);
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *(_BYTE *)(v31 + 8) = v29;
  v33 = a3[27];
  v34 = a1 + v33;
  v35 = a2 + v33;
  LOBYTE(v29) = *(_BYTE *)(v35 + 8);
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = v29;
  v36 = a3[28];
  v37 = a1 + v36;
  v38 = a2 + v36;
  LOBYTE(v29) = *(_BYTE *)(v38 + 8);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *(_BYTE *)(v37 + 8) = v29;
  v39 = a3[29];
  v40 = a1 + v39;
  v41 = a2 + v39;
  LOBYTE(v29) = *(_BYTE *)(v41 + 8);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = v29;
  v42 = a3[30];
  v43 = a1 + v42;
  v44 = a2 + v42;
  LOBYTE(v29) = *(_BYTE *)(v44 + 8);
  *(_QWORD *)v43 = *(_QWORD *)v44;
  *(_BYTE *)(v43 + 8) = v29;
  v45 = a3[31];
  v46 = a1 + v45;
  v47 = a2 + v45;
  LOBYTE(v29) = *(_BYTE *)(v47 + 8);
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = v29;
  v48 = a3[32];
  v49 = a1 + v48;
  v50 = a2 + v48;
  LOBYTE(v29) = *(_BYTE *)(v50 + 8);
  *(_QWORD *)v49 = *(_QWORD *)v50;
  *(_BYTE *)(v49 + 8) = v29;
  v51 = a3[33];
  v52 = a1 + v51;
  v53 = a2 + v51;
  LOBYTE(v29) = *(_BYTE *)(v53 + 8);
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = v29;
  v54 = a3[34];
  v55 = a1 + v54;
  v56 = a2 + v54;
  LOBYTE(v29) = *(_BYTE *)(v56 + 8);
  *(_QWORD *)v55 = *(_QWORD *)v56;
  *(_BYTE *)(v55 + 8) = v29;
  v57 = a3[35];
  v58 = a1 + v57;
  v59 = a2 + v57;
  LOBYTE(v29) = *(_BYTE *)(v59 + 8);
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *(_BYTE *)(v58 + 8) = v29;
  *(_BYTE *)(a1 + a3[36]) = *(_BYTE *)(a2 + a3[36]);
  v60 = a3[37];
  v61 = a1 + v60;
  v62 = (uint64_t *)(a2 + v60);
  v63 = *v62;
  *(_BYTE *)(v61 + 8) = *((_BYTE *)v62 + 8);
  *(_QWORD *)v61 = v63;
  v64 = a3[38];
  v65 = a1 + v64;
  v66 = a2 + v64;
  LOBYTE(v63) = *(_BYTE *)(v66 + 8);
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = v63;
  v67 = a3[39];
  v68 = a1 + v67;
  v69 = a2 + v67;
  LOBYTE(v63) = *(_BYTE *)(v69 + 8);
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = v63;
  *(_BYTE *)(a1 + a3[40]) = *(_BYTE *)(a2 + a3[40]);
  v70 = a3[41];
  v71 = a1 + v70;
  v72 = (uint64_t *)(a2 + v70);
  v73 = *v72;
  *(_BYTE *)(v71 + 8) = *((_BYTE *)v72 + 8);
  *(_QWORD *)v71 = v73;
  v74 = a3[42];
  v75 = a1 + v74;
  v76 = a2 + v74;
  LOBYTE(v73) = *(_BYTE *)(v76 + 8);
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = v73;
  v77 = a3[43];
  v78 = a1 + v77;
  v79 = a2 + v77;
  LOBYTE(v73) = *(_BYTE *)(v79 + 8);
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *(_BYTE *)(v78 + 8) = v73;
  v80 = a3[44];
  v81 = a1 + v80;
  v82 = a2 + v80;
  LOBYTE(v73) = *(_BYTE *)(v82 + 8);
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = v73;
  v83 = a3[45];
  v84 = a1 + v83;
  v85 = a2 + v83;
  LOBYTE(v73) = *(_BYTE *)(v85 + 8);
  *(_QWORD *)v84 = *(_QWORD *)v85;
  *(_BYTE *)(v84 + 8) = v73;
  v86 = a3[46];
  v87 = a1 + v86;
  v88 = a2 + v86;
  LOBYTE(v73) = *(_BYTE *)(v88 + 8);
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_BYTE *)(v87 + 8) = v73;
  v89 = a3[47];
  v90 = a1 + v89;
  v91 = a2 + v89;
  LOBYTE(v73) = *(_BYTE *)(v91 + 8);
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_BYTE *)(v90 + 8) = v73;
  v92 = a3[48];
  v93 = a1 + v92;
  v94 = a2 + v92;
  LOBYTE(v73) = *(_BYTE *)(v94 + 8);
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = v73;
  v95 = a3[49];
  v96 = a1 + v95;
  v97 = a2 + v95;
  LOBYTE(v73) = *(_BYTE *)(v97 + 8);
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = v73;
  v98 = a3[50];
  v99 = a1 + v98;
  v100 = a2 + v98;
  LOBYTE(v73) = *(_BYTE *)(v100 + 8);
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = v73;
  v101 = a3[51];
  v102 = a1 + v101;
  v103 = a2 + v101;
  LOBYTE(v73) = *(_BYTE *)(v103 + 8);
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = v73;
  v104 = a3[52];
  v105 = a1 + v104;
  v106 = a2 + v104;
  LOBYTE(v73) = *(_BYTE *)(v106 + 8);
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *(_BYTE *)(v105 + 8) = v73;
  v107 = a3[53];
  v108 = a1 + v107;
  v109 = a2 + v107;
  LOBYTE(v73) = *(_BYTE *)(v109 + 8);
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = v73;
  v110 = a3[54];
  v111 = a1 + v110;
  v112 = a2 + v110;
  LOBYTE(v73) = *(_BYTE *)(v112 + 8);
  *(_QWORD *)v111 = *(_QWORD *)v112;
  *(_BYTE *)(v111 + 8) = v73;
  *(_BYTE *)(a1 + a3[55]) = *(_BYTE *)(a2 + a3[55]);
  v113 = a3[56];
  v114 = a1 + v113;
  v115 = (uint64_t *)(a2 + v113);
  v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(_QWORD *)v114 = v116;
  v117 = a3[57];
  v118 = a1 + v117;
  v119 = a2 + v117;
  LOBYTE(v116) = *(_BYTE *)(v119 + 8);
  *(_QWORD *)v118 = *(_QWORD *)v119;
  *(_BYTE *)(v118 + 8) = v116;
  v120 = a3[58];
  v121 = a1 + v120;
  v122 = a2 + v120;
  LOBYTE(v116) = *(_BYTE *)(v122 + 8);
  *(_QWORD *)v121 = *(_QWORD *)v122;
  *(_BYTE *)(v121 + 8) = v116;
  v123 = a3[59];
  v124 = a1 + v123;
  v125 = a2 + v123;
  LOBYTE(v116) = *(_BYTE *)(v125 + 8);
  *(_QWORD *)v124 = *(_QWORD *)v125;
  *(_BYTE *)(v124 + 8) = v116;
  v126 = a3[60];
  v127 = a1 + v126;
  v128 = a2 + v126;
  LOBYTE(v116) = *(_BYTE *)(v128 + 8);
  *(_QWORD *)v127 = *(_QWORD *)v128;
  *(_BYTE *)(v127 + 8) = v116;
  v129 = a3[61];
  v130 = a1 + v129;
  v131 = a2 + v129;
  LOBYTE(v116) = *(_BYTE *)(v131 + 8);
  *(_QWORD *)v130 = *(_QWORD *)v131;
  *(_BYTE *)(v130 + 8) = v116;
  *(_BYTE *)(a1 + a3[62]) = *(_BYTE *)(a2 + a3[62]);
  *(_BYTE *)(a1 + a3[63]) = *(_BYTE *)(a2 + a3[63]);
  v132 = a3[64];
  v133 = (_QWORD *)(a1 + v132);
  v134 = (_QWORD *)(a2 + v132);
  v135 = *(_QWORD *)(a1 + v132 + 48);
  v136 = *(_QWORD *)(a2 + v132 + 48);
  if (v135)
  {
    if (v136)
    {
      *v133 = *v134;
      v133[1] = v134[1];
      v133[2] = v134[2];
      v133[3] = v134[3];
      v133[4] = v134[4];
      v133[5] = v134[5];
      v137 = v134[6];
      v133[6] = v137;
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRelease();
      v133[7] = v134[7];
      v133[8] = v134[8];
      v133[9] = v134[9];
      v133[10] = v134[10];
      v133[11] = v134[11];
      v133[12] = v134[12];
      v138 = v134[13];
      v133[13] = v138;
      swift_bridgeObjectRetain(v138);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1006CBC2C((uint64_t)v133);
      v142 = *((_OWORD *)v134 + 1);
      v141 = *((_OWORD *)v134 + 2);
      *(_OWORD *)v133 = *(_OWORD *)v134;
      *((_OWORD *)v133 + 1) = v142;
      *((_OWORD *)v133 + 2) = v141;
      v143 = *((_OWORD *)v134 + 6);
      v145 = *((_OWORD *)v134 + 3);
      v144 = *((_OWORD *)v134 + 4);
      *((_OWORD *)v133 + 5) = *((_OWORD *)v134 + 5);
      *((_OWORD *)v133 + 6) = v143;
      *((_OWORD *)v133 + 3) = v145;
      *((_OWORD *)v133 + 4) = v144;
    }
  }
  else if (v136)
  {
    *v133 = *v134;
    v133[1] = v134[1];
    v133[2] = v134[2];
    v133[3] = v134[3];
    v133[4] = v134[4];
    v133[5] = v134[5];
    v139 = v134[6];
    v133[6] = v139;
    v133[7] = v134[7];
    v133[8] = v134[8];
    v133[9] = v134[9];
    v133[10] = v134[10];
    v133[11] = v134[11];
    v133[12] = v134[12];
    v140 = v134[13];
    v133[13] = v140;
    swift_bridgeObjectRetain(v139);
    swift_bridgeObjectRetain(v140);
  }
  else
  {
    v146 = *(_OWORD *)v134;
    v147 = *((_OWORD *)v134 + 2);
    *((_OWORD *)v133 + 1) = *((_OWORD *)v134 + 1);
    *((_OWORD *)v133 + 2) = v147;
    *(_OWORD *)v133 = v146;
    v148 = *((_OWORD *)v134 + 3);
    v149 = *((_OWORD *)v134 + 4);
    v150 = *((_OWORD *)v134 + 6);
    *((_OWORD *)v133 + 5) = *((_OWORD *)v134 + 5);
    *((_OWORD *)v133 + 6) = v150;
    *((_OWORD *)v133 + 3) = v148;
    *((_OWORD *)v133 + 4) = v149;
  }
  v151 = a3[65];
  v152 = a1 + v151;
  v153 = (uint64_t *)(a2 + v151);
  v154 = *v153;
  *(_BYTE *)(v152 + 8) = *((_BYTE *)v153 + 8);
  *(_QWORD *)v152 = v154;
  v155 = a3[66];
  v156 = a1 + v155;
  v157 = (uint64_t *)(a2 + v155);
  v158 = *v157;
  *(_BYTE *)(v156 + 8) = *((_BYTE *)v157 + 8);
  *(_QWORD *)v156 = v158;
  v159 = a3[67];
  v160 = a1 + v159;
  v161 = (uint64_t *)(a2 + v159);
  v162 = *v161;
  *(_BYTE *)(v160 + 8) = *((_BYTE *)v161 + 8);
  *(_QWORD *)v160 = v162;
  v163 = a3[68];
  v164 = a1 + v163;
  v165 = (uint64_t *)(a2 + v163);
  v166 = *v165;
  *(_BYTE *)(v164 + 8) = *((_BYTE *)v165 + 8);
  *(_QWORD *)v164 = v166;
  v167 = a3[69];
  v168 = a1 + v167;
  v169 = (uint64_t *)(a2 + v167);
  v170 = *v169;
  *(_BYTE *)(v168 + 8) = *((_BYTE *)v169 + 8);
  *(_QWORD *)v168 = v170;
  v171 = a3[70];
  v172 = a1 + v171;
  v173 = (uint64_t *)(a2 + v171);
  v174 = *v173;
  *(_BYTE *)(v172 + 8) = *((_BYTE *)v173 + 8);
  *(_QWORD *)v172 = v174;
  v175 = a3[71];
  v176 = a1 + v175;
  v177 = (uint64_t *)(a2 + v175);
  v178 = *v177;
  *(_BYTE *)(v176 + 8) = *((_BYTE *)v177 + 8);
  *(_QWORD *)v176 = v178;
  v179 = a3[72];
  v180 = a1 + v179;
  v181 = (uint64_t *)(a2 + v179);
  v182 = *v181;
  *(_BYTE *)(v180 + 8) = *((_BYTE *)v181 + 8);
  *(_QWORD *)v180 = v182;
  v183 = a3[73];
  v184 = a1 + v183;
  v185 = (uint64_t *)(a2 + v183);
  v186 = *v185;
  *(_BYTE *)(v184 + 8) = *((_BYTE *)v185 + 8);
  *(_QWORD *)v184 = v186;
  v187 = a3[74];
  v188 = a1 + v187;
  v189 = (uint64_t *)(a2 + v187);
  v190 = *v189;
  *(_BYTE *)(v188 + 8) = *((_BYTE *)v189 + 8);
  *(_QWORD *)v188 = v190;
  v191 = a3[75];
  v192 = a1 + v191;
  v193 = (uint64_t *)(a2 + v191);
  v194 = *v193;
  *(_BYTE *)(v192 + 8) = *((_BYTE *)v193 + 8);
  *(_QWORD *)v192 = v194;
  v195 = a3[76];
  v196 = a1 + v195;
  v197 = (uint64_t *)(a2 + v195);
  v198 = *v197;
  *(_BYTE *)(v196 + 8) = *((_BYTE *)v197 + 8);
  *(_QWORD *)v196 = v198;
  v199 = a3[77];
  v200 = a1 + v199;
  v201 = (uint64_t *)(a2 + v199);
  v202 = *v201;
  *(_BYTE *)(v200 + 8) = *((_BYTE *)v201 + 8);
  *(_QWORD *)v200 = v202;
  v203 = a3[78];
  v204 = a1 + v203;
  v205 = (uint64_t *)(a2 + v203);
  v206 = *v205;
  *(_BYTE *)(v204 + 8) = *((_BYTE *)v205 + 8);
  *(_QWORD *)v204 = v206;
  v207 = a3[79];
  v208 = a1 + v207;
  v209 = (uint64_t *)(a2 + v207);
  v210 = *v209;
  *(_BYTE *)(v208 + 8) = *((_BYTE *)v209 + 8);
  *(_QWORD *)v208 = v210;
  v211 = a3[80];
  v212 = a1 + v211;
  v213 = (uint64_t *)(a2 + v211);
  v214 = *v213;
  *(_BYTE *)(v212 + 8) = *((_BYTE *)v213 + 8);
  *(_QWORD *)v212 = v214;
  v215 = a3[81];
  v216 = a1 + v215;
  v217 = (uint64_t *)(a2 + v215);
  v218 = *v217;
  *(_BYTE *)(v216 + 8) = *((_BYTE *)v217 + 8);
  *(_QWORD *)v216 = v218;
  v219 = a3[82];
  v220 = a1 + v219;
  v221 = (uint64_t *)(a2 + v219);
  v222 = *v221;
  *(_BYTE *)(v220 + 8) = *((_BYTE *)v221 + 8);
  *(_QWORD *)v220 = v222;
  v223 = a3[83];
  v224 = a1 + v223;
  v225 = (uint64_t *)(a2 + v223);
  v226 = *v225;
  *(_BYTE *)(v224 + 8) = *((_BYTE *)v225 + 8);
  *(_QWORD *)v224 = v226;
  *(_BYTE *)(a1 + a3[84]) = *(_BYTE *)(a2 + a3[84]);
  *(_BYTE *)(a1 + a3[85]) = *(_BYTE *)(a2 + a3[85]);
  *(_BYTE *)(a1 + a3[86]) = *(_BYTE *)(a2 + a3[86]);
  v227 = a3[87];
  v228 = a1 + v227;
  v229 = (uint64_t *)(a2 + v227);
  v230 = *v229;
  *(_BYTE *)(v228 + 8) = *((_BYTE *)v229 + 8);
  *(_QWORD *)v228 = v230;
  v231 = a3[88];
  v232 = a1 + v231;
  v233 = (uint64_t *)(a2 + v231);
  v234 = *v233;
  *(_BYTE *)(v232 + 8) = *((_BYTE *)v233 + 8);
  *(_QWORD *)v232 = v234;
  v235 = a3[89];
  v236 = a1 + v235;
  v237 = (uint64_t *)(a2 + v235);
  v238 = *v237;
  *(_BYTE *)(v236 + 8) = *((_BYTE *)v237 + 8);
  *(_QWORD *)v236 = v238;
  v239 = a3[90];
  v240 = a1 + v239;
  v241 = (uint64_t *)(a2 + v239);
  v242 = *v241;
  *(_BYTE *)(v240 + 8) = *((_BYTE *)v241 + 8);
  *(_QWORD *)v240 = v242;
  v243 = a3[91];
  v244 = a1 + v243;
  v245 = (uint64_t *)(a2 + v243);
  v246 = *v245;
  *(_BYTE *)(v244 + 8) = *((_BYTE *)v245 + 8);
  *(_QWORD *)v244 = v246;
  v247 = a3[92];
  v248 = a1 + v247;
  v249 = (uint64_t *)(a2 + v247);
  v250 = *v249;
  *(_BYTE *)(v248 + 8) = *((_BYTE *)v249 + 8);
  *(_QWORD *)v248 = v250;
  v251 = a3[93];
  v252 = a1 + v251;
  v253 = (uint64_t *)(a2 + v251);
  v254 = *v253;
  *(_BYTE *)(v252 + 8) = *((_BYTE *)v253 + 8);
  *(_QWORD *)v252 = v254;
  v255 = a3[94];
  v256 = a1 + v255;
  v257 = (uint64_t *)(a2 + v255);
  v258 = *v257;
  *(_BYTE *)(v256 + 8) = *((_BYTE *)v257 + 8);
  *(_QWORD *)v256 = v258;
  v259 = a3[95];
  v260 = a1 + v259;
  v261 = (uint64_t *)(a2 + v259);
  v262 = *v261;
  *(_BYTE *)(v260 + 8) = *((_BYTE *)v261 + 8);
  *(_QWORD *)v260 = v262;
  *(_BYTE *)(a1 + a3[96]) = *(_BYTE *)(a2 + a3[96]);
  v263 = a3[97];
  v264 = a1 + v263;
  v265 = (uint64_t *)(a2 + v263);
  v266 = *v265;
  *(_BYTE *)(v264 + 8) = *((_BYTE *)v265 + 8);
  *(_QWORD *)v264 = v266;
  v267 = a3[98];
  v268 = a1 + v267;
  v269 = (uint64_t *)(a2 + v267);
  v270 = *v269;
  *(_BYTE *)(v268 + 8) = *((_BYTE *)v269 + 8);
  *(_QWORD *)v268 = v270;
  v271 = a3[99];
  v272 = a1 + v271;
  v273 = (uint64_t *)(a2 + v271);
  v274 = *v273;
  *(_BYTE *)(v272 + 8) = *((_BYTE *)v273 + 8);
  *(_QWORD *)v272 = v274;
  *(_BYTE *)(a1 + a3[100]) = *(_BYTE *)(a2 + a3[100]);
  *(_BYTE *)(a1 + a3[101]) = *(_BYTE *)(a2 + a3[101]);
  *(_BYTE *)(a1 + a3[102]) = *(_BYTE *)(a2 + a3[102]);
  v275 = a3[103];
  v276 = a1 + v275;
  v277 = (uint64_t *)(a2 + v275);
  v278 = *v277;
  *(_BYTE *)(v276 + 8) = *((_BYTE *)v277 + 8);
  *(_QWORD *)v276 = v278;
  v279 = a3[104];
  v280 = a1 + v279;
  v281 = (uint64_t *)(a2 + v279);
  v282 = *v281;
  *(_BYTE *)(v280 + 8) = *((_BYTE *)v281 + 8);
  *(_QWORD *)v280 = v282;
  v283 = a3[105];
  v284 = a1 + v283;
  v285 = (uint64_t *)(a2 + v283);
  v286 = *v285;
  *(_BYTE *)(v284 + 8) = *((_BYTE *)v285 + 8);
  *(_QWORD *)v284 = v286;
  v287 = a3[106];
  v288 = a1 + v287;
  v289 = (uint64_t *)(a2 + v287);
  v290 = *v289;
  *(_BYTE *)(v288 + 8) = *((_BYTE *)v289 + 8);
  *(_QWORD *)v288 = v290;
  *(_BYTE *)(a1 + a3[107]) = *(_BYTE *)(a2 + a3[107]);
  v291 = a3[108];
  v292 = a1 + v291;
  v293 = (uint64_t *)(a2 + v291);
  v294 = *v293;
  *(_BYTE *)(v292 + 8) = *((_BYTE *)v293 + 8);
  *(_QWORD *)v292 = v294;
  v295 = a3[109];
  v296 = *(_QWORD *)(a2 + v295);
  *(_QWORD *)(a1 + v295) = v296;
  swift_bridgeObjectRetain(v296);
  swift_bridgeObjectRelease();
  v297 = a3[110];
  v298 = a1 + v297;
  v299 = (uint64_t *)(a2 + v297);
  v300 = *v299;
  *(_BYTE *)(v298 + 8) = *((_BYTE *)v299 + 8);
  *(_QWORD *)v298 = v300;
  *(_BYTE *)(a1 + a3[111]) = *(_BYTE *)(a2 + a3[111]);
  v301 = a3[112];
  v302 = *(_QWORD *)(a2 + v301);
  *(_QWORD *)(a1 + v301) = v302;
  swift_bridgeObjectRetain(v302);
  swift_bridgeObjectRelease();
  v303 = a3[113];
  v304 = a1 + v303;
  v305 = (uint64_t *)(a2 + v303);
  v306 = *v305;
  *(_BYTE *)(v304 + 8) = *((_BYTE *)v305 + 8);
  *(_QWORD *)v304 = v306;
  v307 = a3[114];
  v308 = a1 + v307;
  v309 = (uint64_t *)(a2 + v307);
  v310 = *v309;
  *(_BYTE *)(v308 + 8) = *((_BYTE *)v309 + 8);
  *(_QWORD *)v308 = v310;
  *(_BYTE *)(a1 + a3[115]) = *(_BYTE *)(a2 + a3[115]);
  *(_BYTE *)(a1 + a3[116]) = *(_BYTE *)(a2 + a3[116]);
  v311 = a3[117];
  v312 = a1 + v311;
  v313 = (uint64_t *)(a2 + v311);
  v314 = *v313;
  *(_BYTE *)(v312 + 8) = *((_BYTE *)v313 + 8);
  *(_QWORD *)v312 = v314;
  v315 = a3[118];
  v316 = a1 + v315;
  v317 = (uint64_t *)(a2 + v315);
  v318 = *v317;
  *(_BYTE *)(v316 + 8) = *((_BYTE *)v317 + 8);
  *(_QWORD *)v316 = v318;
  v319 = a3[119];
  v320 = a1 + v319;
  v321 = (uint64_t *)(a2 + v319);
  v322 = *v321;
  *(_BYTE *)(v320 + 8) = *((_BYTE *)v321 + 8);
  *(_QWORD *)v320 = v322;
  v323 = a3[120];
  v324 = a1 + v323;
  v325 = (uint64_t *)(a2 + v323);
  v326 = *v325;
  *(_BYTE *)(v324 + 8) = *((_BYTE *)v325 + 8);
  *(_QWORD *)v324 = v326;
  v327 = a3[121];
  v328 = a1 + v327;
  v329 = (uint64_t *)(a2 + v327);
  v330 = *v329;
  *(_BYTE *)(v328 + 8) = *((_BYTE *)v329 + 8);
  *(_QWORD *)v328 = v330;
  v331 = a3[122];
  v332 = a1 + v331;
  v333 = (uint64_t *)(a2 + v331);
  v334 = *v333;
  *(_BYTE *)(v332 + 8) = *((_BYTE *)v333 + 8);
  *(_QWORD *)v332 = v334;
  v335 = a3[123];
  v336 = a1 + v335;
  v337 = (uint64_t *)(a2 + v335);
  v338 = *v337;
  *(_BYTE *)(v336 + 8) = *((_BYTE *)v337 + 8);
  *(_QWORD *)v336 = v338;
  v339 = a3[124];
  v340 = a1 + v339;
  v341 = (uint64_t *)(a2 + v339);
  v342 = *v341;
  *(_BYTE *)(v340 + 8) = *((_BYTE *)v341 + 8);
  *(_QWORD *)v340 = v342;
  v343 = a3[125];
  v344 = a1 + v343;
  v345 = (uint64_t *)(a2 + v343);
  v346 = *v345;
  *(_BYTE *)(v344 + 8) = *((_BYTE *)v345 + 8);
  *(_QWORD *)v344 = v346;
  v347 = a3[126];
  v348 = a1 + v347;
  v349 = (uint64_t *)(a2 + v347);
  v350 = *v349;
  *(_BYTE *)(v348 + 8) = *((_BYTE *)v349 + 8);
  *(_QWORD *)v348 = v350;
  v351 = a3[127];
  v352 = a1 + v351;
  v353 = (uint64_t *)(a2 + v351);
  v354 = *v353;
  *(_BYTE *)(v352 + 8) = *((_BYTE *)v353 + 8);
  *(_QWORD *)v352 = v354;
  v355 = a3[128];
  v356 = a1 + v355;
  v357 = (uint64_t *)(a2 + v355);
  v358 = *v357;
  *(_BYTE *)(v356 + 8) = *((_BYTE *)v357 + 8);
  *(_QWORD *)v356 = v358;
  v359 = a3[129];
  v360 = a1 + v359;
  v361 = (uint64_t *)(a2 + v359);
  v362 = *v361;
  *(_BYTE *)(v360 + 8) = *((_BYTE *)v361 + 8);
  *(_QWORD *)v360 = v362;
  v363 = a3[130];
  v364 = a1 + v363;
  v365 = (uint64_t *)(a2 + v363);
  v366 = *v365;
  *(_BYTE *)(v364 + 8) = *((_BYTE *)v365 + 8);
  *(_QWORD *)v364 = v366;
  v367 = a3[131];
  v368 = a1 + v367;
  v369 = (uint64_t *)(a2 + v367);
  v370 = *v369;
  *(_BYTE *)(v368 + 8) = *((_BYTE *)v369 + 8);
  *(_QWORD *)v368 = v370;
  v371 = a3[132];
  v372 = a1 + v371;
  v373 = (uint64_t *)(a2 + v371);
  v374 = *v373;
  *(_BYTE *)(v372 + 8) = *((_BYTE *)v373 + 8);
  *(_QWORD *)v372 = v374;
  v375 = a3[133];
  v376 = a1 + v375;
  v377 = (uint64_t *)(a2 + v375);
  v378 = *v377;
  *(_BYTE *)(v376 + 8) = *((_BYTE *)v377 + 8);
  *(_QWORD *)v376 = v378;
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  *(_BYTE *)(a1 + a3[135]) = *(_BYTE *)(a2 + a3[135]);
  v379 = a3[136];
  v380 = a1 + v379;
  v381 = (uint64_t *)(a2 + v379);
  v382 = *v381;
  *(_BYTE *)(v380 + 8) = *((_BYTE *)v381 + 8);
  *(_QWORD *)v380 = v382;
  v383 = a3[137];
  v384 = a1 + v383;
  v385 = (uint64_t *)(a2 + v383);
  v386 = *v385;
  *(_BYTE *)(v384 + 8) = *((_BYTE *)v385 + 8);
  *(_QWORD *)v384 = v386;
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  v387 = a3[139];
  v388 = a1 + v387;
  v389 = a2 + v387;
  LODWORD(v386) = *(_DWORD *)v389;
  *(_BYTE *)(v388 + 4) = *(_BYTE *)(v389 + 4);
  *(_DWORD *)v388 = v386;
  v390 = a3[140];
  v391 = a1 + v390;
  v392 = (uint64_t *)(a2 + v390);
  v393 = *v392;
  *(_BYTE *)(v391 + 8) = *((_BYTE *)v392 + 8);
  *(_QWORD *)v391 = v393;
  v394 = a3[141];
  v395 = a1 + v394;
  v396 = (uint64_t *)(a2 + v394);
  v397 = *v396;
  *(_BYTE *)(v395 + 8) = *((_BYTE *)v396 + 8);
  *(_QWORD *)v395 = v397;
  v398 = a3[142];
  v399 = a1 + v398;
  v400 = (uint64_t *)(a2 + v398);
  v401 = *v400;
  *(_BYTE *)(v399 + 8) = *((_BYTE *)v400 + 8);
  *(_QWORD *)v399 = v401;
  v402 = a3[143];
  v403 = a1 + v402;
  v404 = (uint64_t *)(a2 + v402);
  v405 = *v404;
  *(_BYTE *)(v403 + 8) = *((_BYTE *)v404 + 8);
  *(_QWORD *)v403 = v405;
  v406 = a3[144];
  v407 = a1 + v406;
  v408 = (uint64_t *)(a2 + v406);
  v409 = *v408;
  *(_BYTE *)(v407 + 8) = *((_BYTE *)v408 + 8);
  *(_QWORD *)v407 = v409;
  v410 = a3[145];
  v411 = a1 + v410;
  v412 = (uint64_t *)(a2 + v410);
  v413 = *v412;
  *(_BYTE *)(v411 + 8) = *((_BYTE *)v412 + 8);
  *(_QWORD *)v411 = v413;
  v414 = a3[146];
  v415 = a1 + v414;
  v416 = (uint64_t *)(a2 + v414);
  v417 = *v416;
  *(_BYTE *)(v415 + 8) = *((_BYTE *)v416 + 8);
  *(_QWORD *)v415 = v417;
  *(_BYTE *)(a1 + a3[147]) = *(_BYTE *)(a2 + a3[147]);
  v418 = a3[148];
  v419 = a1 + v418;
  v420 = (uint64_t *)(a2 + v418);
  v421 = *v420;
  *(_BYTE *)(v419 + 8) = *((_BYTE *)v420 + 8);
  *(_QWORD *)v419 = v421;
  v422 = a3[149];
  v423 = a1 + v422;
  v424 = (uint64_t *)(a2 + v422);
  v425 = *v424;
  *(_BYTE *)(v423 + 8) = *((_BYTE *)v424 + 8);
  *(_QWORD *)v423 = v425;
  return a1;
}

uint64_t sub_100743860(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  _OWORD *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v8 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v9;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  v10 = a3[24];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 40) = v6;
  v13 = sub_10001A9A8(&qword_101106608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[25];
  v15 = a3[26];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[27];
  v21 = a3[28];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[29];
  v27 = a3[30];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[31];
  v33 = a3[32];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  v36 = a1 + v33;
  v37 = a2 + v33;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  v38 = a3[33];
  v39 = a3[34];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  v42 = a1 + v39;
  v43 = a2 + v39;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = a3[35];
  v45 = a3[36];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  v48 = a3[37];
  v49 = a3[38];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  v52 = a1 + v49;
  v53 = a2 + v49;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = a3[39];
  v55 = a3[40];
  v56 = a1 + v54;
  v57 = a2 + v54;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(a2 + v55);
  v58 = a3[41];
  v59 = a3[42];
  v60 = a1 + v58;
  v61 = a2 + v58;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  v62 = a1 + v59;
  v63 = a2 + v59;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  v64 = a3[43];
  v65 = a3[44];
  v66 = a1 + v64;
  v67 = a2 + v64;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  v68 = a1 + v65;
  v69 = a2 + v65;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  v70 = a3[45];
  v71 = a3[46];
  v72 = a1 + v70;
  v73 = (uint64_t *)(a2 + v70);
  v74 = *v73;
  *(_BYTE *)(v72 + 8) = *((_BYTE *)v73 + 8);
  *(_QWORD *)v72 = v74;
  v75 = a1 + v71;
  v76 = a2 + v71;
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  v77 = a3[47];
  v78 = a3[48];
  v79 = a1 + v77;
  v80 = a2 + v77;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  v81 = a1 + v78;
  v82 = a2 + v78;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  v83 = a3[49];
  v84 = a3[50];
  v85 = a1 + v83;
  v86 = a2 + v83;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  v87 = a1 + v84;
  v88 = a2 + v84;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  v89 = a3[51];
  v90 = a3[52];
  v91 = a1 + v89;
  v92 = a2 + v89;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  v93 = a1 + v90;
  v94 = a2 + v90;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  v95 = a3[53];
  v96 = a3[54];
  v97 = a1 + v95;
  v98 = a2 + v95;
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  v99 = a1 + v96;
  v100 = a2 + v96;
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  v101 = a3[56];
  *(_BYTE *)(a1 + a3[55]) = *(_BYTE *)(a2 + a3[55]);
  v102 = a1 + v101;
  v103 = a2 + v101;
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  v104 = a3[57];
  v105 = a3[58];
  v106 = a1 + v104;
  v107 = a2 + v104;
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  v108 = a1 + v105;
  v109 = a2 + v105;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  v110 = a3[59];
  v111 = a3[60];
  v112 = a1 + v110;
  v113 = a2 + v110;
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  v114 = a1 + v111;
  v115 = (uint64_t *)(a2 + v111);
  v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(_QWORD *)v114 = v116;
  v117 = a3[61];
  v118 = a3[62];
  v119 = a1 + v117;
  v120 = a2 + v117;
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  *(_BYTE *)(a1 + v118) = *(_BYTE *)(a2 + v118);
  v121 = a3[64];
  *(_BYTE *)(a1 + a3[63]) = *(_BYTE *)(a2 + a3[63]);
  v122 = (_OWORD *)(a1 + v121);
  v123 = (_OWORD *)(a2 + v121);
  v124 = v123[1];
  *v122 = *v123;
  v122[1] = v124;
  v125 = v123[6];
  v126 = v123[4];
  v122[5] = v123[5];
  v122[6] = v125;
  v127 = v123[3];
  v122[2] = v123[2];
  v122[3] = v127;
  v122[4] = v126;
  v128 = a3[65];
  v129 = a1 + v128;
  v130 = a2 + v128;
  *(_QWORD *)v129 = *(_QWORD *)v130;
  *(_BYTE *)(v129 + 8) = *(_BYTE *)(v130 + 8);
  v131 = a3[66];
  v132 = a1 + v131;
  v133 = a2 + v131;
  *(_QWORD *)v132 = *(_QWORD *)v133;
  *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
  v134 = a3[67];
  v135 = a1 + v134;
  v136 = (uint64_t *)(a2 + v134);
  v137 = *v136;
  *(_BYTE *)(v135 + 8) = *((_BYTE *)v136 + 8);
  *(_QWORD *)v135 = v137;
  v138 = a3[68];
  v139 = a1 + v138;
  v140 = a2 + v138;
  *(_QWORD *)v139 = *(_QWORD *)v140;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  v141 = a3[69];
  v142 = a1 + v141;
  v143 = a2 + v141;
  *(_QWORD *)v142 = *(_QWORD *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  v144 = a3[70];
  v145 = a1 + v144;
  v146 = a2 + v144;
  *(_QWORD *)v145 = *(_QWORD *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  v147 = a3[71];
  v148 = a1 + v147;
  v149 = a2 + v147;
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  v150 = a3[72];
  v151 = a1 + v150;
  v152 = a2 + v150;
  *(_QWORD *)v151 = *(_QWORD *)v152;
  *(_BYTE *)(v151 + 8) = *(_BYTE *)(v152 + 8);
  v153 = a3[73];
  v154 = a1 + v153;
  v155 = a2 + v153;
  *(_QWORD *)v154 = *(_QWORD *)v155;
  *(_BYTE *)(v154 + 8) = *(_BYTE *)(v155 + 8);
  v156 = a3[74];
  v157 = a1 + v156;
  v158 = a2 + v156;
  *(_QWORD *)v157 = *(_QWORD *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  v159 = a3[75];
  v160 = a1 + v159;
  v161 = a2 + v159;
  *(_QWORD *)v160 = *(_QWORD *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  v162 = a3[76];
  v163 = a1 + v162;
  v164 = a2 + v162;
  *(_QWORD *)v163 = *(_QWORD *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  v165 = a3[77];
  v166 = a1 + v165;
  v167 = a2 + v165;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  v168 = a3[78];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = a3[79];
  v172 = a1 + v171;
  v173 = a2 + v171;
  *(_QWORD *)v172 = *(_QWORD *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  v174 = a3[80];
  v175 = a1 + v174;
  v176 = a2 + v174;
  *(_QWORD *)v175 = *(_QWORD *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  v177 = a3[81];
  v178 = a1 + v177;
  v179 = a2 + v177;
  *(_QWORD *)v178 = *(_QWORD *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  v180 = a3[82];
  v181 = a1 + v180;
  v182 = a2 + v180;
  *(_QWORD *)v181 = *(_QWORD *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  v183 = a3[83];
  v184 = a1 + v183;
  v185 = a2 + v183;
  *(_QWORD *)v184 = *(_QWORD *)v185;
  v186 = a3[84];
  LOBYTE(v74) = *(_BYTE *)(a2 + v186);
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_BYTE *)(a1 + v186) = v74;
  *(_BYTE *)(a1 + a3[85]) = *(_BYTE *)(a2 + a3[85]);
  *(_BYTE *)(a1 + a3[86]) = *(_BYTE *)(a2 + a3[86]);
  v187 = a3[87];
  v188 = a1 + v187;
  v189 = a2 + v187;
  *(_QWORD *)v188 = *(_QWORD *)v189;
  *(_BYTE *)(v188 + 8) = *(_BYTE *)(v189 + 8);
  v190 = a3[88];
  v191 = a1 + v190;
  v192 = a2 + v190;
  *(_QWORD *)v191 = *(_QWORD *)v192;
  *(_BYTE *)(v191 + 8) = *(_BYTE *)(v192 + 8);
  v193 = a3[89];
  v194 = a1 + v193;
  v195 = a2 + v193;
  *(_QWORD *)v194 = *(_QWORD *)v195;
  *(_BYTE *)(v194 + 8) = *(_BYTE *)(v195 + 8);
  v196 = a3[90];
  v197 = a1 + v196;
  v198 = a2 + v196;
  *(_QWORD *)v197 = *(_QWORD *)v198;
  *(_BYTE *)(v197 + 8) = *(_BYTE *)(v198 + 8);
  v199 = a3[91];
  v200 = a1 + v199;
  v201 = (uint64_t *)(a2 + v199);
  v202 = *v201;
  *(_BYTE *)(v200 + 8) = *((_BYTE *)v201 + 8);
  *(_QWORD *)v200 = v202;
  v203 = a3[92];
  v204 = a1 + v203;
  v205 = a2 + v203;
  *(_QWORD *)v204 = *(_QWORD *)v205;
  *(_BYTE *)(v204 + 8) = *(_BYTE *)(v205 + 8);
  v206 = a3[93];
  v207 = a1 + v206;
  v208 = a2 + v206;
  *(_QWORD *)v207 = *(_QWORD *)v208;
  *(_BYTE *)(v207 + 8) = *(_BYTE *)(v208 + 8);
  v209 = a3[94];
  v210 = a1 + v209;
  v211 = a2 + v209;
  *(_QWORD *)v210 = *(_QWORD *)v211;
  *(_BYTE *)(v210 + 8) = *(_BYTE *)(v211 + 8);
  v212 = a3[95];
  v213 = a1 + v212;
  v214 = a2 + v212;
  *(_QWORD *)v213 = *(_QWORD *)v214;
  *(_BYTE *)(v213 + 8) = *(_BYTE *)(v214 + 8);
  *(_BYTE *)(a1 + a3[96]) = *(_BYTE *)(a2 + a3[96]);
  v215 = a3[97];
  v216 = a1 + v215;
  v217 = a2 + v215;
  *(_QWORD *)v216 = *(_QWORD *)v217;
  *(_BYTE *)(v216 + 8) = *(_BYTE *)(v217 + 8);
  v218 = a3[98];
  v219 = a1 + v218;
  v220 = a2 + v218;
  *(_QWORD *)v219 = *(_QWORD *)v220;
  *(_BYTE *)(v219 + 8) = *(_BYTE *)(v220 + 8);
  v221 = a3[99];
  v222 = a1 + v221;
  v223 = a2 + v221;
  *(_QWORD *)v222 = *(_QWORD *)v223;
  *(_BYTE *)(v222 + 8) = *(_BYTE *)(v223 + 8);
  *(_BYTE *)(a1 + a3[100]) = *(_BYTE *)(a2 + a3[100]);
  *(_BYTE *)(a1 + a3[101]) = *(_BYTE *)(a2 + a3[101]);
  *(_BYTE *)(a1 + a3[102]) = *(_BYTE *)(a2 + a3[102]);
  v224 = a3[103];
  v225 = a1 + v224;
  v226 = a2 + v224;
  *(_QWORD *)v225 = *(_QWORD *)v226;
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  v227 = a3[104];
  v228 = a1 + v227;
  v229 = a2 + v227;
  *(_QWORD *)v228 = *(_QWORD *)v229;
  *(_BYTE *)(v228 + 8) = *(_BYTE *)(v229 + 8);
  v230 = a3[105];
  v231 = a1 + v230;
  v232 = a2 + v230;
  *(_QWORD *)v231 = *(_QWORD *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  v233 = a3[106];
  v234 = a1 + v233;
  v235 = a2 + v233;
  *(_QWORD *)v234 = *(_QWORD *)v235;
  v236 = a3[107];
  LOBYTE(v74) = *(_BYTE *)(a2 + v236);
  *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
  *(_BYTE *)(a1 + v236) = v74;
  v237 = a3[108];
  v238 = a1 + v237;
  v239 = a2 + v237;
  *(_QWORD *)v238 = *(_QWORD *)v239;
  v240 = a3[109];
  v241 = *(_QWORD *)(a2 + v240);
  *(_BYTE *)(v238 + 8) = *(_BYTE *)(v239 + 8);
  *(_QWORD *)(a1 + v240) = v241;
  v242 = a3[110];
  v243 = a1 + v242;
  v244 = a2 + v242;
  *(_QWORD *)v243 = *(_QWORD *)v244;
  v245 = a3[111];
  LOBYTE(v241) = *(_BYTE *)(a2 + v245);
  *(_BYTE *)(v243 + 8) = *(_BYTE *)(v244 + 8);
  *(_BYTE *)(a1 + v245) = v241;
  *(_QWORD *)(a1 + a3[112]) = *(_QWORD *)(a2 + a3[112]);
  v246 = a3[113];
  v247 = a1 + v246;
  v248 = a2 + v246;
  *(_QWORD *)v247 = *(_QWORD *)v248;
  *(_BYTE *)(v247 + 8) = *(_BYTE *)(v248 + 8);
  v249 = a3[114];
  v250 = a1 + v249;
  v251 = a2 + v249;
  *(_QWORD *)v250 = *(_QWORD *)v251;
  v252 = a3[115];
  LOBYTE(v241) = *(_BYTE *)(a2 + v252);
  *(_BYTE *)(v250 + 8) = *(_BYTE *)(v251 + 8);
  *(_BYTE *)(a1 + v252) = v241;
  *(_BYTE *)(a1 + a3[116]) = *(_BYTE *)(a2 + a3[116]);
  v253 = a3[117];
  v254 = a1 + v253;
  v255 = a2 + v253;
  *(_QWORD *)v254 = *(_QWORD *)v255;
  *(_BYTE *)(v254 + 8) = *(_BYTE *)(v255 + 8);
  v256 = a3[118];
  v257 = a1 + v256;
  v258 = a2 + v256;
  *(_QWORD *)v257 = *(_QWORD *)v258;
  *(_BYTE *)(v257 + 8) = *(_BYTE *)(v258 + 8);
  v259 = a3[119];
  v260 = a1 + v259;
  v261 = a2 + v259;
  *(_QWORD *)v260 = *(_QWORD *)v261;
  *(_BYTE *)(v260 + 8) = *(_BYTE *)(v261 + 8);
  v262 = a3[120];
  v263 = a1 + v262;
  v264 = a2 + v262;
  *(_QWORD *)v263 = *(_QWORD *)v264;
  *(_BYTE *)(v263 + 8) = *(_BYTE *)(v264 + 8);
  v265 = a3[121];
  v266 = a1 + v265;
  v267 = (uint64_t *)(a2 + v265);
  v268 = *v267;
  *(_BYTE *)(v266 + 8) = *((_BYTE *)v267 + 8);
  *(_QWORD *)v266 = v268;
  v269 = a3[122];
  v270 = a1 + v269;
  v271 = a2 + v269;
  *(_QWORD *)v270 = *(_QWORD *)v271;
  *(_BYTE *)(v270 + 8) = *(_BYTE *)(v271 + 8);
  v272 = a3[123];
  v273 = a1 + v272;
  v274 = a2 + v272;
  *(_QWORD *)v273 = *(_QWORD *)v274;
  *(_BYTE *)(v273 + 8) = *(_BYTE *)(v274 + 8);
  v275 = a3[124];
  v276 = a1 + v275;
  v277 = a2 + v275;
  *(_QWORD *)v276 = *(_QWORD *)v277;
  *(_BYTE *)(v276 + 8) = *(_BYTE *)(v277 + 8);
  v278 = a3[125];
  v279 = a1 + v278;
  v280 = a2 + v278;
  *(_QWORD *)v279 = *(_QWORD *)v280;
  *(_BYTE *)(v279 + 8) = *(_BYTE *)(v280 + 8);
  v281 = a3[126];
  v282 = a1 + v281;
  v283 = a2 + v281;
  *(_QWORD *)v282 = *(_QWORD *)v283;
  *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
  v284 = a3[127];
  v285 = a1 + v284;
  v286 = a2 + v284;
  *(_QWORD *)v285 = *(_QWORD *)v286;
  *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
  v287 = a3[128];
  v288 = a1 + v287;
  v289 = a2 + v287;
  *(_QWORD *)v288 = *(_QWORD *)v289;
  *(_BYTE *)(v288 + 8) = *(_BYTE *)(v289 + 8);
  v290 = a3[129];
  v291 = a1 + v290;
  v292 = a2 + v290;
  *(_QWORD *)v291 = *(_QWORD *)v292;
  *(_BYTE *)(v291 + 8) = *(_BYTE *)(v292 + 8);
  v293 = a3[130];
  v294 = a1 + v293;
  v295 = a2 + v293;
  *(_QWORD *)v294 = *(_QWORD *)v295;
  *(_BYTE *)(v294 + 8) = *(_BYTE *)(v295 + 8);
  v296 = a3[131];
  v297 = a1 + v296;
  v298 = a2 + v296;
  *(_QWORD *)v297 = *(_QWORD *)v298;
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  v299 = a3[132];
  v300 = a1 + v299;
  v301 = a2 + v299;
  *(_QWORD *)v300 = *(_QWORD *)v301;
  *(_BYTE *)(v300 + 8) = *(_BYTE *)(v301 + 8);
  v302 = a3[133];
  v303 = a1 + v302;
  v304 = a2 + v302;
  *(_QWORD *)v303 = *(_QWORD *)v304;
  *(_BYTE *)(v303 + 8) = *(_BYTE *)(v304 + 8);
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  *(_BYTE *)(a1 + a3[135]) = *(_BYTE *)(a2 + a3[135]);
  v305 = a3[136];
  v306 = a1 + v305;
  v307 = a2 + v305;
  *(_QWORD *)v306 = *(_QWORD *)v307;
  *(_BYTE *)(v306 + 8) = *(_BYTE *)(v307 + 8);
  v308 = a3[137];
  v309 = a1 + v308;
  v310 = a2 + v308;
  *(_QWORD *)v309 = *(_QWORD *)v310;
  *(_BYTE *)(v309 + 8) = *(_BYTE *)(v310 + 8);
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  v311 = a3[139];
  v312 = a1 + v311;
  v313 = a2 + v311;
  *(_DWORD *)v312 = *(_DWORD *)v313;
  *(_BYTE *)(v312 + 4) = *(_BYTE *)(v313 + 4);
  v314 = a3[140];
  v315 = a1 + v314;
  v316 = a2 + v314;
  *(_QWORD *)v315 = *(_QWORD *)v316;
  *(_BYTE *)(v315 + 8) = *(_BYTE *)(v316 + 8);
  v317 = a3[141];
  v318 = a1 + v317;
  v319 = a2 + v317;
  *(_QWORD *)v318 = *(_QWORD *)v319;
  *(_BYTE *)(v318 + 8) = *(_BYTE *)(v319 + 8);
  v320 = a3[142];
  v321 = a1 + v320;
  v322 = a2 + v320;
  *(_QWORD *)v321 = *(_QWORD *)v322;
  *(_BYTE *)(v321 + 8) = *(_BYTE *)(v322 + 8);
  v323 = a3[143];
  v324 = a1 + v323;
  v325 = (uint64_t *)(a2 + v323);
  v326 = *v325;
  *(_BYTE *)(v324 + 8) = *((_BYTE *)v325 + 8);
  *(_QWORD *)v324 = v326;
  v327 = a3[144];
  v328 = a1 + v327;
  v329 = a2 + v327;
  *(_QWORD *)v328 = *(_QWORD *)v329;
  *(_BYTE *)(v328 + 8) = *(_BYTE *)(v329 + 8);
  v330 = a3[145];
  v331 = a1 + v330;
  v332 = a2 + v330;
  *(_QWORD *)v331 = *(_QWORD *)v332;
  *(_BYTE *)(v331 + 8) = *(_BYTE *)(v332 + 8);
  v333 = a3[146];
  v334 = a1 + v333;
  v335 = a2 + v333;
  *(_QWORD *)v334 = *(_QWORD *)v335;
  v336 = a3[147];
  LOBYTE(v241) = *(_BYTE *)(a2 + v336);
  *(_BYTE *)(v334 + 8) = *(_BYTE *)(v335 + 8);
  *(_BYTE *)(a1 + v336) = v241;
  v337 = a3[148];
  v338 = a1 + v337;
  v339 = a2 + v337;
  *(_QWORD *)v338 = *(_QWORD *)v339;
  *(_BYTE *)(v338 + 8) = *(_BYTE *)(v339 + 8);
  v340 = a3[149];
  v341 = a1 + v340;
  v342 = a2 + v340;
  *(_QWORD *)v341 = *(_QWORD *)v342;
  *(_BYTE *)(v341 + 8) = *(_BYTE *)(v342 + 8);
  return a1;
}

uint64_t sub_1007445AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10001BC14(v7, v8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v9 = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_BYTE *)(a1 + 241) = *(_BYTE *)(a2 + 241);
  v10 = a3[24];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_10001A9A8(&qword_101106608);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[25];
  v15 = a3[26];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[27];
  v21 = a3[28];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  v24 = a1 + v21;
  v25 = a2 + v21;
  *(_BYTE *)(v24 + 8) = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v26 = a3[29];
  v27 = a3[30];
  v28 = a1 + v26;
  v29 = a2 + v26;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = *(_BYTE *)(v29 + 8);
  v30 = a1 + v27;
  v31 = a2 + v27;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = *(_BYTE *)(v31 + 8);
  v32 = a3[31];
  v33 = a3[32];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
  v36 = a1 + v33;
  v37 = a2 + v33;
  *(_QWORD *)v36 = *(_QWORD *)v37;
  *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
  v38 = a3[33];
  v39 = a3[34];
  v40 = a1 + v38;
  v41 = a2 + v38;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  v42 = a1 + v39;
  v43 = a2 + v39;
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  v44 = a3[35];
  v45 = a3[36];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_QWORD *)v46 = *(_QWORD *)v47;
  *(_BYTE *)(v46 + 8) = *(_BYTE *)(v47 + 8);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  v48 = a3[37];
  v49 = a3[38];
  v50 = a1 + v48;
  v51 = a2 + v48;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  v52 = a1 + v49;
  v53 = a2 + v49;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = a3[39];
  v55 = a3[40];
  v56 = a1 + v54;
  v57 = a2 + v54;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  *(_BYTE *)(a1 + v55) = *(_BYTE *)(a2 + v55);
  v58 = a3[41];
  v59 = a3[42];
  v60 = a1 + v58;
  v61 = a2 + v58;
  *(_QWORD *)v60 = *(_QWORD *)v61;
  *(_BYTE *)(v60 + 8) = *(_BYTE *)(v61 + 8);
  v62 = a1 + v59;
  v63 = a2 + v59;
  *(_QWORD *)v62 = *(_QWORD *)v63;
  *(_BYTE *)(v62 + 8) = *(_BYTE *)(v63 + 8);
  v64 = a3[43];
  v65 = a3[44];
  v66 = a1 + v64;
  v67 = a2 + v64;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  *(_BYTE *)(v66 + 8) = *(_BYTE *)(v67 + 8);
  v68 = a1 + v65;
  v69 = a2 + v65;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  v70 = a3[45];
  v71 = a3[46];
  v72 = a1 + v70;
  v73 = (uint64_t *)(a2 + v70);
  v74 = *v73;
  *(_BYTE *)(v72 + 8) = *((_BYTE *)v73 + 8);
  *(_QWORD *)v72 = v74;
  v75 = a1 + v71;
  v76 = a2 + v71;
  *(_QWORD *)v75 = *(_QWORD *)v76;
  *(_BYTE *)(v75 + 8) = *(_BYTE *)(v76 + 8);
  v77 = a3[47];
  v78 = a3[48];
  v79 = a1 + v77;
  v80 = a2 + v77;
  *(_QWORD *)v79 = *(_QWORD *)v80;
  *(_BYTE *)(v79 + 8) = *(_BYTE *)(v80 + 8);
  v81 = a1 + v78;
  v82 = a2 + v78;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  v83 = a3[49];
  v84 = a3[50];
  v85 = a1 + v83;
  v86 = a2 + v83;
  *(_QWORD *)v85 = *(_QWORD *)v86;
  *(_BYTE *)(v85 + 8) = *(_BYTE *)(v86 + 8);
  v87 = a1 + v84;
  v88 = a2 + v84;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  v89 = a3[51];
  v90 = a3[52];
  v91 = a1 + v89;
  v92 = a2 + v89;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_BYTE *)(v91 + 8) = *(_BYTE *)(v92 + 8);
  v93 = a1 + v90;
  v94 = a2 + v90;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  v95 = a3[53];
  v96 = a3[54];
  v97 = a1 + v95;
  v98 = a2 + v95;
  *(_QWORD *)v97 = *(_QWORD *)v98;
  *(_BYTE *)(v97 + 8) = *(_BYTE *)(v98 + 8);
  v99 = a1 + v96;
  v100 = a2 + v96;
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  v101 = a3[56];
  *(_BYTE *)(a1 + a3[55]) = *(_BYTE *)(a2 + a3[55]);
  v102 = a1 + v101;
  v103 = a2 + v101;
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  v104 = a3[57];
  v105 = a3[58];
  v106 = a1 + v104;
  v107 = a2 + v104;
  *(_QWORD *)v106 = *(_QWORD *)v107;
  *(_BYTE *)(v106 + 8) = *(_BYTE *)(v107 + 8);
  v108 = a1 + v105;
  v109 = a2 + v105;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  v110 = a3[59];
  v111 = a3[60];
  v112 = a1 + v110;
  v113 = a2 + v110;
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  v114 = a1 + v111;
  v115 = (uint64_t *)(a2 + v111);
  v116 = *v115;
  *(_BYTE *)(v114 + 8) = *((_BYTE *)v115 + 8);
  *(_QWORD *)v114 = v116;
  v117 = a3[61];
  v118 = a3[62];
  v119 = a1 + v117;
  v120 = a2 + v117;
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  *(_BYTE *)(a1 + v118) = *(_BYTE *)(a2 + v118);
  v121 = a3[64];
  *(_BYTE *)(a1 + a3[63]) = *(_BYTE *)(a2 + a3[63]);
  v122 = a1 + v121;
  v123 = a2 + v121;
  if (!*(_QWORD *)(a1 + v121 + 48))
    goto LABEL_5;
  v124 = *(_QWORD *)(v123 + 48);
  if (!v124)
  {
    sub_1006CBC2C(a1 + v121);
LABEL_5:
    v126 = *(_OWORD *)(v123 + 80);
    *(_OWORD *)(v122 + 64) = *(_OWORD *)(v123 + 64);
    *(_OWORD *)(v122 + 80) = v126;
    *(_OWORD *)(v122 + 96) = *(_OWORD *)(v123 + 96);
    v127 = *(_OWORD *)(v123 + 16);
    *(_OWORD *)v122 = *(_OWORD *)v123;
    *(_OWORD *)(v122 + 16) = v127;
    v128 = *(_OWORD *)(v123 + 48);
    *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
    *(_OWORD *)(v122 + 48) = v128;
    goto LABEL_6;
  }
  v125 = *(_OWORD *)(v123 + 16);
  *(_OWORD *)v122 = *(_OWORD *)v123;
  *(_OWORD *)(v122 + 16) = v125;
  *(_OWORD *)(v122 + 32) = *(_OWORD *)(v123 + 32);
  *(_QWORD *)(v122 + 48) = v124;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v122 + 56) = *(_OWORD *)(v123 + 56);
  *(_OWORD *)(v122 + 72) = *(_OWORD *)(v123 + 72);
  *(_OWORD *)(v122 + 88) = *(_OWORD *)(v123 + 88);
  *(_QWORD *)(v122 + 104) = *(_QWORD *)(v123 + 104);
  swift_bridgeObjectRelease();
LABEL_6:
  v129 = a3[65];
  v130 = a1 + v129;
  v131 = a2 + v129;
  *(_QWORD *)v130 = *(_QWORD *)v131;
  *(_BYTE *)(v130 + 8) = *(_BYTE *)(v131 + 8);
  v132 = a3[66];
  v133 = a1 + v132;
  v134 = a2 + v132;
  *(_QWORD *)v133 = *(_QWORD *)v134;
  *(_BYTE *)(v133 + 8) = *(_BYTE *)(v134 + 8);
  v135 = a3[67];
  v136 = a1 + v135;
  v137 = a2 + v135;
  *(_QWORD *)v136 = *(_QWORD *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  v138 = a3[68];
  v139 = a1 + v138;
  v140 = a2 + v138;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  *(_QWORD *)v139 = *(_QWORD *)v140;
  v141 = a3[69];
  v142 = a1 + v141;
  v143 = a2 + v141;
  *(_QWORD *)v142 = *(_QWORD *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  v144 = a3[70];
  v145 = a1 + v144;
  v146 = a2 + v144;
  *(_QWORD *)v145 = *(_QWORD *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  v147 = a3[71];
  v148 = a1 + v147;
  v149 = a2 + v147;
  *(_QWORD *)v148 = *(_QWORD *)v149;
  *(_BYTE *)(v148 + 8) = *(_BYTE *)(v149 + 8);
  v150 = a3[72];
  v151 = a1 + v150;
  v152 = a2 + v150;
  *(_QWORD *)v151 = *(_QWORD *)v152;
  *(_BYTE *)(v151 + 8) = *(_BYTE *)(v152 + 8);
  v153 = a3[73];
  v154 = a1 + v153;
  v155 = a2 + v153;
  *(_QWORD *)v154 = *(_QWORD *)v155;
  *(_BYTE *)(v154 + 8) = *(_BYTE *)(v155 + 8);
  v156 = a3[74];
  v157 = a1 + v156;
  v158 = a2 + v156;
  *(_QWORD *)v157 = *(_QWORD *)v158;
  *(_BYTE *)(v157 + 8) = *(_BYTE *)(v158 + 8);
  v159 = a3[75];
  v160 = a1 + v159;
  v161 = a2 + v159;
  *(_QWORD *)v160 = *(_QWORD *)v161;
  *(_BYTE *)(v160 + 8) = *(_BYTE *)(v161 + 8);
  v162 = a3[76];
  v163 = a1 + v162;
  v164 = a2 + v162;
  *(_QWORD *)v163 = *(_QWORD *)v164;
  *(_BYTE *)(v163 + 8) = *(_BYTE *)(v164 + 8);
  v165 = a3[77];
  v166 = a1 + v165;
  v167 = a2 + v165;
  *(_QWORD *)v166 = *(_QWORD *)v167;
  *(_BYTE *)(v166 + 8) = *(_BYTE *)(v167 + 8);
  v168 = a3[78];
  v169 = a1 + v168;
  v170 = a2 + v168;
  *(_QWORD *)v169 = *(_QWORD *)v170;
  *(_BYTE *)(v169 + 8) = *(_BYTE *)(v170 + 8);
  v171 = a3[79];
  v172 = a1 + v171;
  v173 = a2 + v171;
  *(_QWORD *)v172 = *(_QWORD *)v173;
  *(_BYTE *)(v172 + 8) = *(_BYTE *)(v173 + 8);
  v174 = a3[80];
  v175 = a1 + v174;
  v176 = a2 + v174;
  *(_QWORD *)v175 = *(_QWORD *)v176;
  *(_BYTE *)(v175 + 8) = *(_BYTE *)(v176 + 8);
  v177 = a3[81];
  v178 = a1 + v177;
  v179 = a2 + v177;
  *(_QWORD *)v178 = *(_QWORD *)v179;
  *(_BYTE *)(v178 + 8) = *(_BYTE *)(v179 + 8);
  v180 = a3[82];
  v181 = a1 + v180;
  v182 = a2 + v180;
  *(_QWORD *)v181 = *(_QWORD *)v182;
  *(_BYTE *)(v181 + 8) = *(_BYTE *)(v182 + 8);
  v183 = a3[83];
  v184 = a1 + v183;
  v185 = a2 + v183;
  *(_QWORD *)v184 = *(_QWORD *)v185;
  v186 = a3[84];
  v187 = *(_BYTE *)(a2 + v186);
  *(_BYTE *)(v184 + 8) = *(_BYTE *)(v185 + 8);
  *(_BYTE *)(a1 + v186) = v187;
  *(_BYTE *)(a1 + a3[85]) = *(_BYTE *)(a2 + a3[85]);
  *(_BYTE *)(a1 + a3[86]) = *(_BYTE *)(a2 + a3[86]);
  v188 = a3[87];
  v189 = a1 + v188;
  v190 = a2 + v188;
  *(_QWORD *)v189 = *(_QWORD *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  v191 = a3[88];
  v192 = a1 + v191;
  v193 = a2 + v191;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  v194 = a3[89];
  v195 = a1 + v194;
  v196 = a2 + v194;
  *(_QWORD *)v195 = *(_QWORD *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  v197 = a3[90];
  v198 = a1 + v197;
  v199 = a2 + v197;
  *(_QWORD *)v198 = *(_QWORD *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  v200 = a3[91];
  v201 = a1 + v200;
  v202 = (uint64_t *)(a2 + v200);
  v203 = *v202;
  *(_BYTE *)(v201 + 8) = *((_BYTE *)v202 + 8);
  *(_QWORD *)v201 = v203;
  v204 = a3[92];
  v205 = a1 + v204;
  v206 = a2 + v204;
  *(_QWORD *)v205 = *(_QWORD *)v206;
  *(_BYTE *)(v205 + 8) = *(_BYTE *)(v206 + 8);
  v207 = a3[93];
  v208 = a1 + v207;
  v209 = a2 + v207;
  *(_QWORD *)v208 = *(_QWORD *)v209;
  *(_BYTE *)(v208 + 8) = *(_BYTE *)(v209 + 8);
  v210 = a3[94];
  v211 = a1 + v210;
  v212 = a2 + v210;
  *(_QWORD *)v211 = *(_QWORD *)v212;
  *(_BYTE *)(v211 + 8) = *(_BYTE *)(v212 + 8);
  v213 = a3[95];
  v214 = a1 + v213;
  v215 = a2 + v213;
  *(_QWORD *)v214 = *(_QWORD *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  *(_BYTE *)(a1 + a3[96]) = *(_BYTE *)(a2 + a3[96]);
  v216 = a3[97];
  v217 = a1 + v216;
  v218 = a2 + v216;
  *(_QWORD *)v217 = *(_QWORD *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  v219 = a3[98];
  v220 = a1 + v219;
  v221 = a2 + v219;
  *(_QWORD *)v220 = *(_QWORD *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  v222 = a3[99];
  v223 = a1 + v222;
  v224 = a2 + v222;
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  *(_BYTE *)(a1 + a3[100]) = *(_BYTE *)(a2 + a3[100]);
  *(_BYTE *)(a1 + a3[101]) = *(_BYTE *)(a2 + a3[101]);
  *(_BYTE *)(a1 + a3[102]) = *(_BYTE *)(a2 + a3[102]);
  v225 = a3[103];
  v226 = a1 + v225;
  v227 = a2 + v225;
  *(_QWORD *)v226 = *(_QWORD *)v227;
  *(_BYTE *)(v226 + 8) = *(_BYTE *)(v227 + 8);
  v228 = a3[104];
  v229 = a1 + v228;
  v230 = a2 + v228;
  *(_QWORD *)v229 = *(_QWORD *)v230;
  *(_BYTE *)(v229 + 8) = *(_BYTE *)(v230 + 8);
  v231 = a3[105];
  v232 = a1 + v231;
  v233 = a2 + v231;
  *(_QWORD *)v232 = *(_QWORD *)v233;
  *(_BYTE *)(v232 + 8) = *(_BYTE *)(v233 + 8);
  v234 = a3[106];
  v235 = a1 + v234;
  v236 = a2 + v234;
  *(_QWORD *)v235 = *(_QWORD *)v236;
  *(_BYTE *)(v235 + 8) = *(_BYTE *)(v236 + 8);
  *(_BYTE *)(a1 + a3[107]) = *(_BYTE *)(a2 + a3[107]);
  v237 = a3[108];
  v238 = a1 + v237;
  v239 = a2 + v237;
  *(_QWORD *)v238 = *(_QWORD *)v239;
  *(_BYTE *)(v238 + 8) = *(_BYTE *)(v239 + 8);
  *(_QWORD *)(a1 + a3[109]) = *(_QWORD *)(a2 + a3[109]);
  swift_bridgeObjectRelease();
  v240 = a3[110];
  v241 = a1 + v240;
  v242 = a2 + v240;
  *(_QWORD *)v241 = *(_QWORD *)v242;
  *(_BYTE *)(v241 + 8) = *(_BYTE *)(v242 + 8);
  *(_BYTE *)(a1 + a3[111]) = *(_BYTE *)(a2 + a3[111]);
  *(_QWORD *)(a1 + a3[112]) = *(_QWORD *)(a2 + a3[112]);
  swift_bridgeObjectRelease();
  v243 = a3[113];
  v244 = a1 + v243;
  v245 = a2 + v243;
  *(_BYTE *)(v244 + 8) = *(_BYTE *)(v245 + 8);
  *(_QWORD *)v244 = *(_QWORD *)v245;
  v246 = a3[114];
  v247 = a1 + v246;
  v248 = a2 + v246;
  *(_BYTE *)(v247 + 8) = *(_BYTE *)(v248 + 8);
  v249 = a3[115];
  v250 = *(_BYTE *)(a2 + v249);
  *(_QWORD *)v247 = *(_QWORD *)v248;
  *(_BYTE *)(a1 + v249) = v250;
  *(_BYTE *)(a1 + a3[116]) = *(_BYTE *)(a2 + a3[116]);
  v251 = a3[117];
  v252 = a1 + v251;
  v253 = a2 + v251;
  *(_QWORD *)v252 = *(_QWORD *)v253;
  *(_BYTE *)(v252 + 8) = *(_BYTE *)(v253 + 8);
  v254 = a3[118];
  v255 = a1 + v254;
  v256 = a2 + v254;
  *(_QWORD *)v255 = *(_QWORD *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  v257 = a3[119];
  v258 = a1 + v257;
  v259 = a2 + v257;
  *(_QWORD *)v258 = *(_QWORD *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  v260 = a3[120];
  v261 = a1 + v260;
  v262 = a2 + v260;
  *(_QWORD *)v261 = *(_QWORD *)v262;
  *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
  v263 = a3[121];
  v264 = a1 + v263;
  v265 = (uint64_t *)(a2 + v263);
  v266 = *v265;
  *(_BYTE *)(v264 + 8) = *((_BYTE *)v265 + 8);
  *(_QWORD *)v264 = v266;
  v267 = a3[122];
  v268 = a1 + v267;
  v269 = a2 + v267;
  *(_QWORD *)v268 = *(_QWORD *)v269;
  *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
  v270 = a3[123];
  v271 = a1 + v270;
  v272 = a2 + v270;
  *(_QWORD *)v271 = *(_QWORD *)v272;
  *(_BYTE *)(v271 + 8) = *(_BYTE *)(v272 + 8);
  v273 = a3[124];
  v274 = a1 + v273;
  v275 = a2 + v273;
  *(_QWORD *)v274 = *(_QWORD *)v275;
  *(_BYTE *)(v274 + 8) = *(_BYTE *)(v275 + 8);
  v276 = a3[125];
  v277 = a1 + v276;
  v278 = a2 + v276;
  *(_QWORD *)v277 = *(_QWORD *)v278;
  *(_BYTE *)(v277 + 8) = *(_BYTE *)(v278 + 8);
  v279 = a3[126];
  v280 = a1 + v279;
  v281 = a2 + v279;
  *(_QWORD *)v280 = *(_QWORD *)v281;
  *(_BYTE *)(v280 + 8) = *(_BYTE *)(v281 + 8);
  v282 = a3[127];
  v283 = a1 + v282;
  v284 = a2 + v282;
  *(_QWORD *)v283 = *(_QWORD *)v284;
  *(_BYTE *)(v283 + 8) = *(_BYTE *)(v284 + 8);
  v285 = a3[128];
  v286 = a1 + v285;
  v287 = a2 + v285;
  *(_QWORD *)v286 = *(_QWORD *)v287;
  *(_BYTE *)(v286 + 8) = *(_BYTE *)(v287 + 8);
  v288 = a3[129];
  v289 = a1 + v288;
  v290 = a2 + v288;
  *(_QWORD *)v289 = *(_QWORD *)v290;
  *(_BYTE *)(v289 + 8) = *(_BYTE *)(v290 + 8);
  v291 = a3[130];
  v292 = a1 + v291;
  v293 = a2 + v291;
  *(_QWORD *)v292 = *(_QWORD *)v293;
  *(_BYTE *)(v292 + 8) = *(_BYTE *)(v293 + 8);
  v294 = a3[131];
  v295 = a1 + v294;
  v296 = a2 + v294;
  *(_QWORD *)v295 = *(_QWORD *)v296;
  *(_BYTE *)(v295 + 8) = *(_BYTE *)(v296 + 8);
  v297 = a3[132];
  v298 = a1 + v297;
  v299 = a2 + v297;
  *(_QWORD *)v298 = *(_QWORD *)v299;
  *(_BYTE *)(v298 + 8) = *(_BYTE *)(v299 + 8);
  v300 = a3[133];
  v301 = a1 + v300;
  v302 = a2 + v300;
  *(_QWORD *)v301 = *(_QWORD *)v302;
  *(_BYTE *)(v301 + 8) = *(_BYTE *)(v302 + 8);
  *(_BYTE *)(a1 + a3[134]) = *(_BYTE *)(a2 + a3[134]);
  *(_BYTE *)(a1 + a3[135]) = *(_BYTE *)(a2 + a3[135]);
  v303 = a3[136];
  v304 = a1 + v303;
  v305 = a2 + v303;
  *(_QWORD *)v304 = *(_QWORD *)v305;
  *(_BYTE *)(v304 + 8) = *(_BYTE *)(v305 + 8);
  v306 = a3[137];
  v307 = a1 + v306;
  v308 = a2 + v306;
  *(_QWORD *)v307 = *(_QWORD *)v308;
  *(_BYTE *)(v307 + 8) = *(_BYTE *)(v308 + 8);
  *(_BYTE *)(a1 + a3[138]) = *(_BYTE *)(a2 + a3[138]);
  v309 = a3[139];
  v310 = a1 + v309;
  v311 = a2 + v309;
  *(_DWORD *)v310 = *(_DWORD *)v311;
  *(_BYTE *)(v310 + 4) = *(_BYTE *)(v311 + 4);
  v312 = a3[140];
  v313 = a1 + v312;
  v314 = a2 + v312;
  *(_QWORD *)v313 = *(_QWORD *)v314;
  *(_BYTE *)(v313 + 8) = *(_BYTE *)(v314 + 8);
  v315 = a3[141];
  v316 = a1 + v315;
  v317 = a2 + v315;
  *(_QWORD *)v316 = *(_QWORD *)v317;
  *(_BYTE *)(v316 + 8) = *(_BYTE *)(v317 + 8);
  v318 = a3[142];
  v319 = a1 + v318;
  v320 = a2 + v318;
  *(_QWORD *)v319 = *(_QWORD *)v320;
  *(_BYTE *)(v319 + 8) = *(_BYTE *)(v320 + 8);
  v321 = a3[143];
  v322 = a1 + v321;
  v323 = (uint64_t *)(a2 + v321);
  v324 = *v323;
  *(_BYTE *)(v322 + 8) = *((_BYTE *)v323 + 8);
  *(_QWORD *)v322 = v324;
  v325 = a3[144];
  v326 = a1 + v325;
  v327 = a2 + v325;
  *(_QWORD *)v326 = *(_QWORD *)v327;
  *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
  v328 = a3[145];
  v329 = a1 + v328;
  v330 = a2 + v328;
  *(_QWORD *)v329 = *(_QWORD *)v330;
  *(_BYTE *)(v329 + 8) = *(_BYTE *)(v330 + 8);
  v331 = a3[146];
  v332 = a1 + v331;
  v333 = a2 + v331;
  *(_QWORD *)v332 = *(_QWORD *)v333;
  v334 = a3[147];
  v335 = *(_BYTE *)(a2 + v334);
  *(_BYTE *)(v332 + 8) = *(_BYTE *)(v333 + 8);
  *(_BYTE *)(a1 + v334) = v335;
  v336 = a3[148];
  v337 = a1 + v336;
  v338 = a2 + v336;
  *(_QWORD *)v337 = *(_QWORD *)v338;
  *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
  v339 = a3[149];
  v340 = a1 + v339;
  v341 = a2 + v339;
  *(_QWORD *)v340 = *(_QWORD *)v341;
  *(_BYTE *)(v340 + 8) = *(_BYTE *)(v341 + 8);
  return a1;
}

uint64_t sub_10074538C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100745398);
}

uint64_t sub_100745398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_101106608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 96), a2, v8);
  }
}

uint64_t sub_100745418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100745424);
}

uint64_t sub_100745424(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A9A8(&qword_101106608);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 96), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ConfigurationResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_101106668;
  if (!qword_101106668)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConfigurationResponse);
  return result;
}

void sub_1007454D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[146];

  v4[0] = &unk_100E4E0D8;
  v4[1] = &unk_100E4E0F0;
  v4[2] = &unk_100E4E108;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_100E4E120;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_100E4E0D8;
  v4[9] = &unk_100E4E138;
  v4[10] = &unk_100E4E120;
  v4[11] = &unk_100E4E120;
  v4[12] = &unk_100E4E120;
  v4[13] = &unk_100E4E120;
  v4[14] = &unk_100E4E120;
  v4[15] = &unk_100E4E120;
  v4[16] = &unk_100E4E120;
  v4[17] = &unk_100E4E120;
  v4[18] = &unk_100E4E120;
  v4[19] = &unk_100E4E150;
  sub_100745760(319);
  if (v3 <= 0x3F)
  {
    v4[20] = *(_QWORD *)(v2 - 8) + 64;
    v4[21] = &unk_100E4E120;
    v4[22] = &unk_100E4E120;
    v4[23] = &unk_100E4E120;
    v4[24] = &unk_100E4E120;
    v4[25] = &unk_100E4E120;
    v4[26] = &unk_100E4E120;
    v4[27] = &unk_100E4E120;
    v4[28] = &unk_100E4E120;
    v4[29] = &unk_100E4E120;
    v4[30] = &unk_100E4E120;
    v4[31] = &unk_100E4E120;
    v4[32] = &unk_100E4E150;
    v4[33] = &unk_100E4E120;
    v4[34] = &unk_100E4E120;
    v4[35] = &unk_100E4E120;
    v4[36] = &unk_100E4E150;
    v4[37] = &unk_100E4E120;
    v4[38] = &unk_100E4E120;
    v4[39] = &unk_100E4E120;
    v4[40] = &unk_100E4E120;
    v4[41] = &unk_100E4E120;
    v4[42] = &unk_100E4E120;
    v4[43] = &unk_100E4E120;
    v4[44] = &unk_100E4E120;
    v4[45] = &unk_100E4E120;
    v4[46] = &unk_100E4E120;
    v4[47] = &unk_100E4E120;
    v4[48] = &unk_100E4E120;
    v4[49] = &unk_100E4E120;
    v4[50] = &unk_100E4E120;
    v4[51] = &unk_100E4E150;
    v4[52] = &unk_100E4E120;
    v4[53] = &unk_100E4E120;
    v4[54] = &unk_100E4E120;
    v4[55] = &unk_100E4E120;
    v4[56] = &unk_100E4E120;
    v4[57] = &unk_100E4E120;
    v4[58] = &unk_100E4E150;
    v4[59] = &unk_100E4E150;
    v4[60] = &unk_100E4E168;
    v4[61] = &unk_100E4E120;
    v4[62] = &unk_100E4E120;
    v4[63] = &unk_100E4E120;
    v4[64] = &unk_100E4E120;
    v4[65] = &unk_100E4E120;
    v4[66] = &unk_100E4E120;
    v4[67] = &unk_100E4E120;
    v4[68] = &unk_100E4E120;
    v4[69] = &unk_100E4E120;
    v4[70] = &unk_100E4E120;
    v4[71] = &unk_100E4E120;
    v4[72] = &unk_100E4E120;
    v4[73] = &unk_100E4E120;
    v4[74] = &unk_100E4E120;
    v4[75] = &unk_100E4E120;
    v4[76] = &unk_100E4E120;
    v4[77] = &unk_100E4E120;
    v4[78] = &unk_100E4E120;
    v4[79] = &unk_100E4E120;
    v4[80] = &unk_100E4E150;
    v4[81] = &unk_100E4E150;
    v4[82] = &unk_100E4E150;
    v4[83] = &unk_100E4E120;
    v4[84] = &unk_100E4E120;
    v4[85] = &unk_100E4E120;
    v4[86] = &unk_100E4E120;
    v4[87] = &unk_100E4E120;
    v4[88] = &unk_100E4E120;
    v4[89] = &unk_100E4E120;
    v4[90] = &unk_100E4E120;
    v4[91] = &unk_100E4E120;
    v4[92] = &unk_100E4E150;
    v4[93] = &unk_100E4E120;
    v4[94] = &unk_100E4E120;
    v4[95] = &unk_100E4E120;
    v4[96] = &unk_100E4E150;
    v4[97] = &unk_100E4E150;
    v4[98] = &unk_100E4E150;
    v4[99] = &unk_100E4E120;
    v4[100] = &unk_100E4E120;
    v4[101] = &unk_100E4E120;
    v4[102] = &unk_100E4E120;
    v4[103] = &unk_100E4E150;
    v4[104] = &unk_100E4E120;
    v4[105] = &unk_100E4E138;
    v4[106] = &unk_100E4E120;
    v4[107] = &unk_100E4E150;
    v4[108] = &unk_100E4E138;
    v4[109] = &unk_100E4E120;
    v4[110] = &unk_100E4E120;
    v4[111] = &unk_100E4E150;
    v4[112] = &unk_100E4E150;
    v4[113] = &unk_100E4E120;
    v4[114] = &unk_100E4E120;
    v4[115] = &unk_100E4E120;
    v4[116] = &unk_100E4E120;
    v4[117] = &unk_100E4E120;
    v4[118] = &unk_100E4E120;
    v4[119] = &unk_100E4E120;
    v4[120] = &unk_100E4E120;
    v4[121] = &unk_100E4E120;
    v4[122] = &unk_100E4E120;
    v4[123] = &unk_100E4E120;
    v4[124] = &unk_100E4E120;
    v4[125] = &unk_100E4E120;
    v4[126] = &unk_100E4E120;
    v4[127] = &unk_100E4E120;
    v4[128] = &unk_100E4E120;
    v4[129] = &unk_100E4E120;
    v4[130] = &unk_100E4E150;
    v4[131] = &unk_100E4E150;
    v4[132] = &unk_100E4E120;
    v4[133] = &unk_100E4E120;
    v4[134] = &unk_100E4E150;
    v4[135] = &unk_100E4E180;
    v4[136] = &unk_100E4E120;
    v4[137] = &unk_100E4E120;
    v4[138] = &unk_100E4E120;
    v4[139] = &unk_100E4E120;
    v4[140] = &unk_100E4E120;
    v4[141] = &unk_100E4E120;
    v4[142] = &unk_100E4E120;
    v4[143] = &unk_100E4E150;
    v4[144] = &unk_100E4E120;
    v4[145] = &unk_100E4E120;
    swift_initStructMetadata(a1, 256, 146, v4, a1 + 16);
  }
}

void sub_100745760(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_101106678)
  {
    v4[0] = &type metadata for ServerConfigurableFeature;
    v4[1] = type metadata accessor for FeatureSupportMatrix(255);
    v4[2] = sub_100745820();
    v4[3] = sub_100745864();
    v4[4] = sub_1007458A8(&qword_101104650, byte_100E5B74C);
    v4[5] = sub_1007458A8(&qword_1011046A0, byte_100E5B724);
    v2 = type metadata accessor for CustomCodableKeyDictionary(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_101106678);
  }
}

unint64_t sub_100745820()
{
  unint64_t result;

  result = qword_101106680;
  if (!qword_101106680)
  {
    result = swift_getWitnessTable(aE_38, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_101106680);
  }
  return result;
}

unint64_t sub_100745864()
{
  unint64_t result;

  result = qword_101106688;
  if (!qword_101106688)
  {
    result = swift_getWitnessTable(byte_100E5B694, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_101106688);
  }
  return result;
}

uint64_t sub_1007458A8(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FeatureSupportMatrix(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1007458E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100745920 + 4 * word_100E4DE80[a1]))(0x6F43737574617473, 0xEA00000000006564);
}

uint64_t sub_100745920()
{
  return 0x7470697263736564;
}

unint64_t sub_100745940()
{
  return 0xD000000000000010;
}

unint64_t sub_10074663C()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100746664(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1007458E8(*a1);
  v5 = v4;
  v6 = sub_1007458E8(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1007466EC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1007458E8(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10074674C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1007458E8(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_10074678C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1007458E8(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1007467E8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100749AE8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100746814@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1007458E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10074683C()
{
  unsigned __int8 *v0;

  return sub_1007458E8(*v0);
}

uint64_t sub_100746844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100749AE8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100746868(_BYTE *a1@<X8>)
{
  *a1 = -110;
}

uint64_t sub_100746874(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007495E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10074689C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007495E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007468C4(char *a1, char *a2)
{
  return sub_1005135D0(*a1, *a2);
}

Swift::Int sub_1007468D0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 3158066;
  else
    v2 = 0x726F7272456F6ELL;
  if (v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100746948(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 3158066;
  else
    v2 = 0x726F7272456F6ELL;
  if (*v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10074699C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 3158066;
  else
    v2 = 0x726F7272456F6ELL;
  if (v1)
    v3 = 0xE300000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100746A10@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104CE48, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100746A6C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 3158066;
  if (!*v1)
    v2 = 0x726F7272456F6ELL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100746AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100749F5C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100746B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100749F5C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100746B4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  char *v53;
  char v54;
  uint64_t v55;
  char *v56;
  char v57;
  uint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  char *v62;
  char v63;
  uint64_t v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64_t v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char v88;
  uint64_t v89;
  char *v90;
  char v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  char *v96;
  char v97;
  uint64_t v98;
  char *v99;
  char v100;
  uint64_t v101;
  char *v102;
  char v103;
  char v104;
  uint64_t v105;
  char *v106;
  char v107;
  uint64_t v108;
  char *v109;
  char v110;
  uint64_t v111;
  char *v112;
  char v113;
  char v114;
  uint64_t v115;
  char *v116;
  char v117;
  uint64_t v118;
  char *v119;
  char v120;
  uint64_t v121;
  char *v122;
  char v123;
  uint64_t v124;
  char *v125;
  char v126;
  uint64_t v127;
  char *v128;
  char v129;
  uint64_t v130;
  char *v131;
  char v132;
  uint64_t v133;
  char *v134;
  char v135;
  uint64_t v136;
  char *v137;
  char v138;
  uint64_t v139;
  char *v140;
  char v141;
  uint64_t v142;
  char *v143;
  char v144;
  uint64_t v145;
  char *v146;
  char v147;
  uint64_t v148;
  char *v149;
  char v150;
  uint64_t v151;
  char *v152;
  char v153;
  uint64_t v154;
  char *v155;
  char v156;
  uint64_t v157;
  char *v158;
  char v159;
  char v160;
  uint64_t v161;
  char *v162;
  char v163;
  uint64_t v164;
  char *v165;
  char v166;
  uint64_t v167;
  char *v168;
  char v169;
  uint64_t v170;
  char *v171;
  char v172;
  uint64_t v173;
  char *v174;
  char v175;
  uint64_t v176;
  char *v177;
  char v178;
  char v179;
  char v180;
  unint64_t v181;
  uint64_t v182;
  char *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char v193;
  uint64_t v194;
  char *v195;
  char v196;
  uint64_t v197;
  char *v198;
  char v199;
  uint64_t v200;
  char *v201;
  char v202;
  uint64_t v203;
  char *v204;
  char v205;
  uint64_t v206;
  char *v207;
  char v208;
  uint64_t v209;
  char *v210;
  char v211;
  uint64_t v212;
  char *v213;
  char v214;
  uint64_t v215;
  char *v216;
  char v217;
  uint64_t v218;
  char *v219;
  char v220;
  uint64_t v221;
  char *v222;
  char v223;
  uint64_t v224;
  char *v225;
  char v226;
  uint64_t v227;
  char *v228;
  char v229;
  uint64_t v230;
  char *v231;
  char v232;
  uint64_t v233;
  char *v234;
  char v235;
  uint64_t v236;
  char *v237;
  char v238;
  uint64_t v239;
  char *v240;
  char v241;
  uint64_t v242;
  char *v243;
  char v244;
  char v245;
  char v246;
  char v247;
  uint64_t v248;
  char *v249;
  char v250;
  uint64_t v251;
  char *v252;
  char v253;
  uint64_t v254;
  char *v255;
  char v256;
  uint64_t v257;
  char *v258;
  char v259;
  uint64_t v260;
  char *v261;
  char v262;
  uint64_t v263;
  char *v264;
  char v265;
  uint64_t v266;
  char *v267;
  char v268;
  uint64_t v269;
  char *v270;
  char v271;
  uint64_t v272;
  char *v273;
  char v274;
  char v275;
  uint64_t v276;
  char *v277;
  char v278;
  uint64_t v279;
  char *v280;
  char v281;
  uint64_t v282;
  char *v283;
  char v284;
  char v285;
  char v286;
  char v287;
  uint64_t v288;
  char *v289;
  char v290;
  uint64_t v291;
  char *v292;
  char v293;
  uint64_t v294;
  char *v295;
  char v296;
  uint64_t v297;
  char *v298;
  char v299;
  char v300;
  uint64_t v301;
  char *v302;
  char v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char v309;
  char v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  char v316;
  uint64_t v317;
  char *v318;
  char v319;
  char v320;
  char v321;
  uint64_t v322;
  char *v323;
  char v324;
  uint64_t v325;
  char *v326;
  char v327;
  uint64_t v328;
  char *v329;
  char v330;
  uint64_t v331;
  char *v332;
  char v333;
  uint64_t v334;
  char *v335;
  char v336;
  uint64_t v337;
  char *v338;
  char v339;
  uint64_t v340;
  char *v341;
  char v342;
  uint64_t v343;
  char *v344;
  char v345;
  uint64_t v346;
  char *v347;
  char v348;
  uint64_t v349;
  char *v350;
  char v351;
  uint64_t v352;
  char *v353;
  char v354;
  uint64_t v355;
  char *v356;
  char v357;
  uint64_t v358;
  char *v359;
  char v360;
  uint64_t v361;
  char *v362;
  char v363;
  uint64_t v364;
  char *v365;
  char v366;
  uint64_t v367;
  char *v368;
  char v369;
  uint64_t v370;
  char *v371;
  char v372;
  char v373;
  char v374;
  uint64_t v375;
  char *v376;
  char v377;
  uint64_t v378;
  char *v379;
  char v380;
  char v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  char *v385;
  char v386;
  uint64_t v387;
  char *v388;
  char v389;
  uint64_t v390;
  char *v391;
  char v392;
  uint64_t v393;
  char *v394;
  char v395;
  uint64_t v396;
  char *v397;
  char v398;
  uint64_t v399;
  char *v400;
  char v401;
  uint64_t v402;
  char *v403;
  char v404;
  char v405;
  uint64_t v406;
  char *v407;
  char v408;
  uint64_t v409;
  uint64_t v410;
  char v411;
  char v412;
  uint64_t v413;
  char *v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char *v422;
  uint64_t v423;
  _QWORD *v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  int *v428;
  uint64_t v429;
  char *v430;
  _OWORD v431[8];
  char v432;

  v419 = a2;
  v3 = sub_10001A9A8(&qword_101106608);
  v426 = *(_QWORD *)(v3 - 8);
  v427 = v3;
  __chkstk_darwin(v3);
  v421 = (char *)&v415 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v423 = sub_10001A9A8(&qword_1011068F8);
  v420 = *(_QWORD *)(v423 - 8);
  __chkstk_darwin(v423);
  v6 = (char *)&v415 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ConfigurationResponse(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v415 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v428 = (int *)v8;
  v11 = *(int *)(v8 + 96);
  v430 = v10;
  v12 = &v10[v11];
  v13 = type metadata accessor for FeatureSupportMatrix(0);
  v14 = sub_100745820();
  v15 = sub_100745864();
  v16 = sub_1007458A8(&qword_101104650, byte_100E5B74C);
  v17 = sub_1007458A8(&qword_1011046A0, byte_100E5B724);
  v425 = v12;
  CustomCodableKeyDictionary.init(wrappedValue:)(0, &type metadata for ServerConfigurableFeature, v13, v14, v15, v16, v17);
  v18 = a1[3];
  v19 = a1[4];
  v424 = a1;
  sub_10001AA44(a1, v18);
  v20 = sub_1007495E0();
  v422 = v6;
  v21 = v429;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConfigurationResponse.CodingKeys, &type metadata for ConfigurationResponse.CodingKeys, v20, v18, v19);
  v429 = v21;
  if (v21)
    goto LABEL_5;
  v416 = v16;
  v417 = v15;
  v418 = v14;
  v22 = v13;
  v23 = v421;
  v24 = v420;
  v432 = 0;
  v25 = sub_100749624();
  v26 = v429;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v431, &type metadata for ConfigurationResponse.Status, &v432, v423, &type metadata for ConfigurationResponse.Status, v25);
  if (v26)
  {
    v429 = v26;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v422, v423);
LABEL_5:
    v28 = 0;
    v29 = 0x100000;
    goto LABEL_6;
  }
  v27 = v430;
  *v430 = v431[0];
  LOBYTE(v431[0]) = 1;
  *((_QWORD *)v27 + 1) = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  *((_QWORD *)v27 + 2) = v33;
  v432 = 2;
  v34 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v431, &type metadata for Data, &v432, v423, &type metadata for Data, v34);
  *(_OWORD *)(v27 + 24) = v431[0];
  LOBYTE(v431[0]) = 3;
  *((double *)v27 + 5) = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  LOBYTE(v431[0]) = 4;
  *((double *)v27 + 6) = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  LOBYTE(v431[0]) = 5;
  *((double *)v27 + 7) = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  LOBYTE(v431[0]) = 6;
  *((_QWORD *)v27 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
  v27[72] = v35 & 1;
  LOBYTE(v431[0]) = 7;
  v36 = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  v429 = 0;
  *((_QWORD *)v430 + 10) = v36;
  LOBYTE(v431[0]) = 8;
  v37 = KeyedDecodingContainer.decode(_:forKey:)(v431, v423);
  v429 = 0;
  v430[88] = v37 & 1;
  v38 = sub_10001A9A8(&qword_1011063B0);
  v432 = 9;
  v39 = sub_100749668((unint64_t *)&qword_1010F9668, &qword_1011063B0, (uint64_t)&protocol witness table for String);
  v40 = v429;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v38, &v432, v423, v38, v39);
  v429 = v40;
  if (v40)
  {
    v29 = 1048582;
    (*(void (**)(char *, uint64_t, __n128))(v24 + 8))(v422, v423, v41);
    v28 = 0;
  }
  else
  {
    v415 = 0;
    v29 = 1049094;
    *((_QWORD *)v430 + 12) = *(_QWORD *)&v431[0];
    LOBYTE(v431[0]) = 10;
    v42 = v429;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = v42;
    if (v42)
      goto LABEL_21;
    v45 = v430;
    *((_QWORD *)v430 + 13) = v43;
    v45[112] = v44 & 1;
    LOBYTE(v431[0]) = 11;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v47 = v430;
    *((_QWORD *)v430 + 15) = v46;
    v47[128] = v48 & 1;
    LOBYTE(v431[0]) = 12;
    v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v50 = v430;
    *((_QWORD *)v430 + 17) = v49;
    v50[144] = v51 & 1;
    LOBYTE(v431[0]) = 13;
    v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v53 = v430;
    *((_QWORD *)v430 + 19) = v52;
    v53[160] = v54 & 1;
    LOBYTE(v431[0]) = 14;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v56 = v430;
    *((_QWORD *)v430 + 21) = v55;
    v56[176] = v57 & 1;
    LOBYTE(v431[0]) = 15;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v59 = v430;
    *((_QWORD *)v430 + 23) = v58;
    v59[192] = v60 & 1;
    LOBYTE(v431[0]) = 16;
    v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v62 = v430;
    *((_QWORD *)v430 + 25) = v61;
    v62[208] = v63 & 1;
    LOBYTE(v431[0]) = 17;
    v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v65 = v430;
    *((_QWORD *)v430 + 27) = v64;
    v65[224] = v66 & 1;
    LOBYTE(v431[0]) = 18;
    v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v68 = v430;
    *((_QWORD *)v430 + 29) = v67;
    v68[240] = v69 & 1;
    LOBYTE(v431[0]) = 19;
    v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[241] = v70;
    LOBYTE(v431[0]) = 20;
    v71 = sub_1006CE2B4();
    v72 = v429;
    KeyedDecodingContainer.decode<A, B>(_:forKey:)(v431, v423, &type metadata for ServerConfigurableFeature, v22, v418, v71, v417, v416, v17);
    v429 = v72;
    if (v72)
      goto LABEL_21;
    (*(void (**)(char *, char *, uint64_t))(v426 + 40))(v425, v23, v427);
    LOBYTE(v431[0]) = 21;
    v73 = v429;
    v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = v73;
    if (v73)
      goto LABEL_21;
    v76 = &v430[v428[26]];
    *(_QWORD *)v76 = v74;
    v76[8] = v75 & 1;
    LOBYTE(v431[0]) = 22;
    v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v78 = &v430[v428[27]];
    *(_QWORD *)v78 = v77;
    v78[8] = v79 & 1;
    LOBYTE(v431[0]) = 23;
    v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v81 = &v430[v428[28]];
    *(_QWORD *)v81 = v80;
    v81[8] = v82 & 1;
    LOBYTE(v431[0]) = 24;
    v83 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v84 = &v430[v428[29]];
    *(_QWORD *)v84 = v83;
    v84[8] = v85 & 1;
    LOBYTE(v431[0]) = 25;
    v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v87 = &v430[v428[30]];
    *(_QWORD *)v87 = v86;
    v87[8] = v88 & 1;
    LOBYTE(v431[0]) = 26;
    v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v90 = &v430[v428[31]];
    *(_QWORD *)v90 = v89;
    v90[8] = v91 & 1;
    LOBYTE(v431[0]) = 27;
    v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v93 = &v430[v428[32]];
    *(_QWORD *)v93 = v92;
    v93[8] = v94 & 1;
    LOBYTE(v431[0]) = 28;
    v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v96 = &v430[v428[33]];
    *(_QWORD *)v96 = v95;
    v96[8] = v97 & 1;
    LOBYTE(v431[0]) = 29;
    v98 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v99 = &v430[v428[34]];
    *(_QWORD *)v99 = v98;
    v99[8] = v100 & 1;
    LOBYTE(v431[0]) = 30;
    v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v102 = &v430[v428[35]];
    *(_QWORD *)v102 = v101;
    v102[8] = v103 & 1;
    LOBYTE(v431[0]) = 31;
    v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[v428[36]] = v104;
    LOBYTE(v431[0]) = 32;
    v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v106 = &v430[v428[37]];
    *(_QWORD *)v106 = v105;
    v106[8] = v107 & 1;
    LOBYTE(v431[0]) = 33;
    v108 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v109 = &v430[v428[38]];
    *(_QWORD *)v109 = v108;
    v109[8] = v110 & 1;
    LOBYTE(v431[0]) = 34;
    v111 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v112 = &v430[v428[39]];
    *(_QWORD *)v112 = v111;
    v112[8] = v113 & 1;
    LOBYTE(v431[0]) = 35;
    v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[v428[40]] = v114;
    LOBYTE(v431[0]) = 36;
    v115 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v116 = &v430[v428[41]];
    *(_QWORD *)v116 = v115;
    v116[8] = v117 & 1;
    LOBYTE(v431[0]) = 37;
    v118 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v119 = &v430[v428[42]];
    *(_QWORD *)v119 = v118;
    v119[8] = v120 & 1;
    LOBYTE(v431[0]) = 38;
    v121 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v122 = &v430[v428[43]];
    *(_QWORD *)v122 = v121;
    v122[8] = v123 & 1;
    LOBYTE(v431[0]) = 39;
    v124 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v125 = &v430[v428[44]];
    *(_QWORD *)v125 = v124;
    v125[8] = v126 & 1;
    LOBYTE(v431[0]) = 40;
    v127 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v128 = &v430[v428[45]];
    *(_QWORD *)v128 = v127;
    v128[8] = v129 & 1;
    LOBYTE(v431[0]) = 41;
    v130 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v131 = &v430[v428[46]];
    *(_QWORD *)v131 = v130;
    v131[8] = v132 & 1;
    LOBYTE(v431[0]) = 42;
    v133 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v134 = &v430[v428[47]];
    *(_QWORD *)v134 = v133;
    v134[8] = v135 & 1;
    LOBYTE(v431[0]) = 43;
    v136 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v137 = &v430[v428[48]];
    *(_QWORD *)v137 = v136;
    v137[8] = v138 & 1;
    LOBYTE(v431[0]) = 44;
    v139 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v140 = &v430[v428[49]];
    *(_QWORD *)v140 = v139;
    v140[8] = v141 & 1;
    LOBYTE(v431[0]) = 45;
    v142 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v143 = &v430[v428[25]];
    *(_QWORD *)v143 = v142;
    v143[8] = v144 & 1;
    LOBYTE(v431[0]) = 46;
    v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v146 = &v430[v428[50]];
    *(_QWORD *)v146 = v145;
    v146[8] = v147 & 1;
    LOBYTE(v431[0]) = 47;
    v148 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v149 = &v430[v428[51]];
    *(_QWORD *)v149 = v148;
    v149[8] = v150 & 1;
    LOBYTE(v431[0]) = 48;
    v151 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v152 = &v430[v428[52]];
    *(_QWORD *)v152 = v151;
    v152[8] = v153 & 1;
    LOBYTE(v431[0]) = 49;
    v154 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v155 = &v430[v428[53]];
    *(_QWORD *)v155 = v154;
    v155[8] = v156 & 1;
    LOBYTE(v431[0]) = 50;
    v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v158 = &v430[v428[54]];
    *(_QWORD *)v158 = v157;
    v158[8] = v159 & 1;
    LOBYTE(v431[0]) = 51;
    v160 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[v428[55]] = v160;
    LOBYTE(v431[0]) = 52;
    v161 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v162 = &v430[v428[56]];
    *(_QWORD *)v162 = v161;
    v162[8] = v163 & 1;
    LOBYTE(v431[0]) = 53;
    v164 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v165 = &v430[v428[57]];
    *(_QWORD *)v165 = v164;
    v165[8] = v166 & 1;
    LOBYTE(v431[0]) = 54;
    v167 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v168 = &v430[v428[58]];
    *(_QWORD *)v168 = v167;
    v168[8] = v169 & 1;
    LOBYTE(v431[0]) = 55;
    v170 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v171 = &v430[v428[59]];
    *(_QWORD *)v171 = v170;
    v171[8] = v172 & 1;
    LOBYTE(v431[0]) = 56;
    v173 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v174 = &v430[v428[60]];
    *(_QWORD *)v174 = v173;
    v174[8] = v175 & 1;
    LOBYTE(v431[0]) = 57;
    v176 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v177 = &v430[v428[61]];
    *(_QWORD *)v177 = v176;
    v177[8] = v178 & 1;
    LOBYTE(v431[0]) = 58;
    v179 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[v428[62]] = v179;
    LOBYTE(v431[0]) = 59;
    v180 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
    v429 = 0;
    v430[v428[63]] = v180;
    v432 = 60;
    v181 = sub_1006CE37C();
    v182 = v429;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AllMacBeaconConfigs, &v432, v423, &type metadata for AllMacBeaconConfigs, v181);
    v429 = v182;
    if (v182)
    {
LABEL_21:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v422, v423);
      v28 = v415;
    }
    else
    {
      v29 = 0x1000000000100206;
      v183 = &v430[v428[64]];
      v184 = v431[1];
      *(_OWORD *)v183 = v431[0];
      *((_OWORD *)v183 + 1) = v184;
      v185 = v431[3];
      *((_OWORD *)v183 + 2) = v431[2];
      *((_OWORD *)v183 + 3) = v185;
      v186 = v431[5];
      *((_OWORD *)v183 + 4) = v431[4];
      *((_OWORD *)v183 + 5) = v186;
      *((_OWORD *)v183 + 6) = v431[6];
      LOBYTE(v431[0]) = 61;
      v187 = v429;
      v188 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = v187;
      if (v187)
        goto LABEL_24;
      v190 = &v430[v428[65]];
      *(_QWORD *)v190 = v188;
      v190[8] = v189 & 1;
      LOBYTE(v431[0]) = 62;
      v191 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v192 = &v430[v428[66]];
      *(_QWORD *)v192 = v191;
      v192[8] = v193 & 1;
      LOBYTE(v431[0]) = 63;
      v194 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v195 = &v430[v428[67]];
      *(_QWORD *)v195 = v194;
      v195[8] = v196 & 1;
      LOBYTE(v431[0]) = 64;
      v197 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v198 = &v430[v428[68]];
      *(_QWORD *)v198 = v197;
      v198[8] = v199 & 1;
      LOBYTE(v431[0]) = 65;
      v200 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v201 = &v430[v428[69]];
      *(_QWORD *)v201 = v200;
      v201[8] = v202 & 1;
      LOBYTE(v431[0]) = 66;
      v203 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v204 = &v430[v428[70]];
      *(_QWORD *)v204 = v203;
      v204[8] = v205 & 1;
      LOBYTE(v431[0]) = 67;
      v206 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v207 = &v430[v428[71]];
      *(_QWORD *)v207 = v206;
      v207[8] = v208 & 1;
      LOBYTE(v431[0]) = 68;
      v209 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v210 = &v430[v428[72]];
      *(_QWORD *)v210 = v209;
      v210[8] = v211 & 1;
      LOBYTE(v431[0]) = 69;
      v212 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v213 = &v430[v428[73]];
      *(_QWORD *)v213 = v212;
      v213[8] = v214 & 1;
      LOBYTE(v431[0]) = 70;
      v215 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v216 = &v430[v428[74]];
      *(_QWORD *)v216 = v215;
      v216[8] = v217 & 1;
      LOBYTE(v431[0]) = 71;
      v218 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v219 = &v430[v428[75]];
      *(_QWORD *)v219 = v218;
      v219[8] = v220 & 1;
      LOBYTE(v431[0]) = 72;
      v221 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v222 = &v430[v428[76]];
      *(_QWORD *)v222 = v221;
      v222[8] = v223 & 1;
      LOBYTE(v431[0]) = 73;
      v224 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v225 = &v430[v428[77]];
      *(_QWORD *)v225 = v224;
      v225[8] = v226 & 1;
      LOBYTE(v431[0]) = 74;
      v227 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v228 = &v430[v428[78]];
      *(_QWORD *)v228 = v227;
      v228[8] = v229 & 1;
      LOBYTE(v431[0]) = 75;
      v230 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v231 = &v430[v428[79]];
      *(_QWORD *)v231 = v230;
      v231[8] = v232 & 1;
      LOBYTE(v431[0]) = 76;
      v233 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v234 = &v430[v428[80]];
      *(_QWORD *)v234 = v233;
      v234[8] = v235 & 1;
      LOBYTE(v431[0]) = 77;
      v236 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v237 = &v430[v428[81]];
      *(_QWORD *)v237 = v236;
      v237[8] = v238 & 1;
      LOBYTE(v431[0]) = 78;
      v239 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v240 = &v430[v428[82]];
      *(_QWORD *)v240 = v239;
      v240[8] = v241 & 1;
      LOBYTE(v431[0]) = 79;
      v242 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v243 = &v430[v428[83]];
      *(_QWORD *)v243 = v242;
      v243[8] = v244 & 1;
      LOBYTE(v431[0]) = 80;
      v245 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[84]] = v245;
      LOBYTE(v431[0]) = 81;
      v246 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[85]] = v246;
      LOBYTE(v431[0]) = 82;
      v247 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[86]] = v247;
      LOBYTE(v431[0]) = 83;
      v248 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v249 = &v430[v428[87]];
      *(_QWORD *)v249 = v248;
      v249[8] = v250 & 1;
      LOBYTE(v431[0]) = 84;
      v251 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v252 = &v430[v428[88]];
      *(_QWORD *)v252 = v251;
      v252[8] = v253 & 1;
      LOBYTE(v431[0]) = 85;
      v254 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v255 = &v430[v428[89]];
      *(_QWORD *)v255 = v254;
      v255[8] = v256 & 1;
      LOBYTE(v431[0]) = 86;
      v257 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v258 = &v430[v428[90]];
      *(_QWORD *)v258 = v257;
      v258[8] = v259 & 1;
      LOBYTE(v431[0]) = 87;
      v260 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v261 = &v430[v428[91]];
      *(_QWORD *)v261 = v260;
      v261[8] = v262 & 1;
      LOBYTE(v431[0]) = 88;
      v263 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v264 = &v430[v428[92]];
      *(_QWORD *)v264 = v263;
      v264[8] = v265 & 1;
      LOBYTE(v431[0]) = 89;
      v266 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v267 = &v430[v428[93]];
      *(_QWORD *)v267 = v266;
      v267[8] = v268 & 1;
      LOBYTE(v431[0]) = 90;
      v269 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v270 = &v430[v428[94]];
      *(_QWORD *)v270 = v269;
      v270[8] = v271 & 1;
      LOBYTE(v431[0]) = 91;
      v272 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v273 = &v430[v428[95]];
      *(_QWORD *)v273 = v272;
      v273[8] = v274 & 1;
      LOBYTE(v431[0]) = 92;
      v275 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[96]] = v275;
      LOBYTE(v431[0]) = 93;
      v276 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v277 = &v430[v428[97]];
      *(_QWORD *)v277 = v276;
      v277[8] = v278 & 1;
      LOBYTE(v431[0]) = 94;
      v279 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v280 = &v430[v428[98]];
      *(_QWORD *)v280 = v279;
      v280[8] = v281 & 1;
      LOBYTE(v431[0]) = 95;
      v282 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v283 = &v430[v428[99]];
      *(_QWORD *)v283 = v282;
      v283[8] = v284 & 1;
      LOBYTE(v431[0]) = 96;
      v285 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[100]] = v285;
      LOBYTE(v431[0]) = 97;
      v286 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[101]] = v286;
      LOBYTE(v431[0]) = 98;
      v287 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[102]] = v287;
      LOBYTE(v431[0]) = 99;
      v288 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v289 = &v430[v428[103]];
      *(_QWORD *)v289 = v288;
      v289[8] = v290 & 1;
      LOBYTE(v431[0]) = 100;
      v291 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v292 = &v430[v428[104]];
      *(_QWORD *)v292 = v291;
      v292[8] = v293 & 1;
      LOBYTE(v431[0]) = 101;
      v294 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v295 = &v430[v428[105]];
      *(_QWORD *)v295 = v294;
      v295[8] = v296 & 1;
      LOBYTE(v431[0]) = 102;
      v297 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v298 = &v430[v428[106]];
      *(_QWORD *)v298 = v297;
      v298[8] = v299 & 1;
      LOBYTE(v431[0]) = 103;
      v300 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v430[v428[107]] = v300;
      LOBYTE(v431[0]) = 104;
      v301 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
      v429 = 0;
      v302 = &v430[v428[108]];
      *(_QWORD *)v302 = v301;
      v302[8] = v303 & 1;
      v304 = sub_10001A9A8(&qword_1010ED5A0);
      v432 = 105;
      v305 = sub_100749668(&qword_1010F3BA0, &qword_1010ED5A0, (uint64_t)&protocol witness table for Int);
      v306 = v429;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v304, &v432, v423, v304, v305);
      v429 = v306;
      if (v306)
      {
LABEL_24:
        (*(void (**)(char *, uint64_t))(v24 + 8))(v422, v423);
        v28 = 0;
      }
      else
      {
        *(_QWORD *)&v430[v428[109]] = *(_QWORD *)&v431[0];
        LOBYTE(v431[0]) = 106;
        v307 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
        v429 = 0;
        v308 = &v430[v428[110]];
        *(_QWORD *)v308 = v307;
        v308[8] = v309 & 1;
        LOBYTE(v431[0]) = 107;
        v310 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
        v429 = 0;
        v430[v428[111]] = v310;
        v311 = sub_10001A9A8(&qword_1010ED590);
        v432 = 108;
        v312 = sub_1007496BC();
        v313 = v429;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v311, &v432, v423, v311, v312);
        v429 = v313;
        if (!v313)
        {
          *(_QWORD *)&v430[v428[112]] = *(_QWORD *)&v431[0];
          LOBYTE(v431[0]) = 109;
          v314 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v315 = &v430[v428[113]];
          *(_QWORD *)v315 = v314;
          v315[8] = v316 & 1;
          LOBYTE(v431[0]) = 110;
          v317 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v318 = &v430[v428[114]];
          *(_QWORD *)v318 = v317;
          v318[8] = v319 & 1;
          LOBYTE(v431[0]) = 111;
          v320 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[115]] = v320;
          LOBYTE(v431[0]) = 112;
          v321 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[116]] = v321;
          LOBYTE(v431[0]) = 113;
          v322 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v323 = &v430[v428[117]];
          *(_QWORD *)v323 = v322;
          v323[8] = v324 & 1;
          LOBYTE(v431[0]) = 114;
          v325 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v326 = &v430[v428[118]];
          *(_QWORD *)v326 = v325;
          v326[8] = v327 & 1;
          LOBYTE(v431[0]) = 115;
          v328 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v329 = &v430[v428[119]];
          *(_QWORD *)v329 = v328;
          v329[8] = v330 & 1;
          LOBYTE(v431[0]) = 116;
          v331 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v332 = &v430[v428[120]];
          *(_QWORD *)v332 = v331;
          v332[8] = v333 & 1;
          LOBYTE(v431[0]) = 117;
          v334 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v335 = &v430[v428[121]];
          *(_QWORD *)v335 = v334;
          v335[8] = v336 & 1;
          LOBYTE(v431[0]) = 118;
          v337 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v338 = &v430[v428[122]];
          *(_QWORD *)v338 = v337;
          v338[8] = v339 & 1;
          LOBYTE(v431[0]) = 119;
          v340 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v341 = &v430[v428[123]];
          *(_QWORD *)v341 = v340;
          v341[8] = v342 & 1;
          LOBYTE(v431[0]) = 120;
          v343 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v344 = &v430[v428[124]];
          *(_QWORD *)v344 = v343;
          v344[8] = v345 & 1;
          LOBYTE(v431[0]) = 121;
          v346 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v347 = &v430[v428[125]];
          *(_QWORD *)v347 = v346;
          v347[8] = v348 & 1;
          LOBYTE(v431[0]) = 122;
          v349 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v350 = &v430[v428[126]];
          *(_QWORD *)v350 = v349;
          v350[8] = v351 & 1;
          LOBYTE(v431[0]) = 123;
          v352 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v353 = &v430[v428[127]];
          *(_QWORD *)v353 = v352;
          v353[8] = v354 & 1;
          LOBYTE(v431[0]) = 124;
          v355 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v356 = &v430[v428[128]];
          *(_QWORD *)v356 = v355;
          v356[8] = v357 & 1;
          LOBYTE(v431[0]) = 125;
          v358 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v359 = &v430[v428[129]];
          *(_QWORD *)v359 = v358;
          v359[8] = v360 & 1;
          LOBYTE(v431[0]) = 126;
          v361 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v362 = &v430[v428[130]];
          *(_QWORD *)v362 = v361;
          v362[8] = v363 & 1;
          LOBYTE(v431[0]) = 127;
          v364 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v365 = &v430[v428[131]];
          *(_QWORD *)v365 = v364;
          v365[8] = v366 & 1;
          LOBYTE(v431[0]) = 0x80;
          v367 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v368 = &v430[v428[132]];
          *(_QWORD *)v368 = v367;
          v368[8] = v369 & 1;
          LOBYTE(v431[0]) = -127;
          v370 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v371 = &v430[v428[133]];
          *(_QWORD *)v371 = v370;
          v371[8] = v372 & 1;
          LOBYTE(v431[0]) = -126;
          v373 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[134]] = v373;
          LOBYTE(v431[0]) = -125;
          v374 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[135]] = v374;
          LOBYTE(v431[0]) = -124;
          v375 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v376 = &v430[v428[136]];
          *(_QWORD *)v376 = v375;
          v376[8] = v377 & 1;
          LOBYTE(v431[0]) = -123;
          v378 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v379 = &v430[v428[137]];
          *(_QWORD *)v379 = v378;
          v379[8] = v380 & 1;
          LOBYTE(v431[0]) = -122;
          v381 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[138]] = v381;
          LOBYTE(v431[0]) = -121;
          v382 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v383 = &v430[v428[139]];
          *(_DWORD *)v383 = v382;
          v383[4] = BYTE4(v382) & 1;
          LOBYTE(v431[0]) = -120;
          v384 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v385 = &v430[v428[140]];
          *(_QWORD *)v385 = v384;
          v385[8] = v386 & 1;
          LOBYTE(v431[0]) = -119;
          v387 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v388 = &v430[v428[141]];
          *(_QWORD *)v388 = v387;
          v388[8] = v389 & 1;
          LOBYTE(v431[0]) = -118;
          v390 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v391 = &v430[v428[142]];
          *(_QWORD *)v391 = v390;
          v391[8] = v392 & 1;
          LOBYTE(v431[0]) = -117;
          v393 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v394 = &v430[v428[143]];
          *(_QWORD *)v394 = v393;
          v394[8] = v395 & 1;
          LOBYTE(v431[0]) = -116;
          v396 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v397 = &v430[v428[144]];
          *(_QWORD *)v397 = v396;
          v397[8] = v398 & 1;
          LOBYTE(v431[0]) = -115;
          v399 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v400 = &v430[v428[145]];
          *(_QWORD *)v400 = v399;
          v400[8] = v401 & 1;
          LOBYTE(v431[0]) = -114;
          v402 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v403 = &v430[v428[146]];
          *(_QWORD *)v403 = v402;
          v403[8] = v404 & 1;
          LOBYTE(v431[0]) = -113;
          v405 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v430[v428[147]] = v405;
          LOBYTE(v431[0]) = -112;
          v406 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v407 = &v430[v428[148]];
          *(_QWORD *)v407 = v406;
          v407[8] = v408 & 1;
          LOBYTE(v431[0]) = -111;
          v409 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v431, v423);
          v429 = 0;
          v410 = v409;
          v412 = v411;
          (*(void (**)(char *, uint64_t))(v24 + 8))(v422, v423);
          v413 = (uint64_t)v430;
          v414 = &v430[v428[149]];
          *(_QWORD *)v414 = v410;
          v414[8] = v412 & 1;
          sub_100749720(v413, v419);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v424);
          return sub_100749764(v413);
        }
        (*(void (**)(char *, uint64_t))(v24 + 8))(v422, v423);
        v28 = 0x20000000000;
      }
    }
  }
LABEL_6:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v424);
  v30 = (v28 >> 41) & 1;
  if ((v29 & 2) != 0)
    swift_bridgeObjectRelease();
  if ((v29 & 4) != 0)
  {
    sub_10001BC14(*((_QWORD *)v430 + 3), *((_QWORD *)v430 + 4));
    if ((v29 & 0x200) != 0)
      goto LABEL_28;
LABEL_12:
    result = (*(uint64_t (**)(char *, uint64_t))(v426 + 8))(v425, v427);
    if ((v29 & 0x1000000000000000) == 0)
      goto LABEL_29;
    goto LABEL_13;
  }
  if ((v29 & 0x200) == 0)
    goto LABEL_12;
LABEL_28:
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v426 + 8))(v425, v427);
  if ((v29 & 0x1000000000000000) == 0)
  {
LABEL_29:
    if ((_DWORD)v30)
      return swift_bridgeObjectRelease();
    return result;
  }
LABEL_13:
  v32 = (uint64_t *)&v430[v428[64]];
  result = sub_1006C9720(*v32, v32[1], v32[2], v32[3], v32[4], v32[5], v32[6], v32[7], v32[8], v32[9], v32[10], v32[11], v32[12], v32[13]);
  if ((v30 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1007495CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100746B4C(a1, a2);
}

unint64_t sub_1007495E0()
{
  unint64_t result;

  result = qword_101106900;
  if (!qword_101106900)
  {
    result = swift_getWitnessTable("}\t$", &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106900);
  }
  return result;
}

unint64_t sub_100749624()
{
  unint64_t result;

  result = qword_101106908;
  if (!qword_101106908)
  {
    result = swift_getWitnessTable("\r\t$", &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_101106908);
  }
  return result;
}

uint64_t sub_100749668(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = a3;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1007496BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101104678;
  if (!qword_101104678)
  {
    v1 = sub_10001F784(&qword_1010ED590);
    v2[0] = &protocol witness table for String;
    v2[1] = &protocol witness table for Double;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101104678);
  }
  return result;
}

uint64_t sub_100749720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConfigurationResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100749764(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConfigurationResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigurationResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x6F)
    goto LABEL_17;
  if (a2 + 145 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 145) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 145;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 145;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 145;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x92;
  v8 = v6 - 146;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigurationResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 145 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 145) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x6F)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x6E)
    return ((uint64_t (*)(void))((char *)&loc_10074987C + 4 * byte_100E4DFA9[v4]))();
  *a1 = a2 - 111;
  return ((uint64_t (*)(void))((char *)sub_1007498B0 + 4 * byte_100E4DFA4[v4]))();
}

uint64_t sub_1007498B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007498B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007498C0);
  return result;
}

uint64_t sub_1007498CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007498D4);
  *(_BYTE *)result = a2 - 111;
  return result;
}

uint64_t sub_1007498D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007498E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.CodingKeys()
{
  return &type metadata for ConfigurationResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ConfigurationResponse.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100749948 + 4 * byte_100E4DFB3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10074997C + 4 * byte_100E4DFAE[v4]))();
}

uint64_t sub_10074997C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100749984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10074998CLL);
  return result;
}

uint64_t sub_100749998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007499A0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007499A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007499AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConfigurationResponse.Status()
{
  return &type metadata for ConfigurationResponse.Status;
}

unint64_t sub_1007499CC()
{
  unint64_t result;

  result = qword_101106910;
  if (!qword_101106910)
  {
    result = swift_getWitnessTable(byte_100E4E274, &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_101106910);
  }
  return result;
}

unint64_t sub_100749A14()
{
  unint64_t result;

  result = qword_101106918;
  if (!qword_101106918)
  {
    result = swift_getWitnessTable(byte_100E4E364, &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106918);
  }
  return result;
}

unint64_t sub_100749A5C()
{
  unint64_t result;

  result = qword_101106920;
  if (!qword_101106920)
  {
    result = swift_getWitnessTable("u\n$", &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106920);
  }
  return result;
}

unint64_t sub_100749AA4()
{
  unint64_t result;

  result = qword_101106928;
  if (!qword_101106928)
  {
    result = swift_getWitnessTable("]\n$", &type metadata for ConfigurationResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106928);
  }
  return result;
}

uint64_t sub_100749AE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_10104C078, a1, a2, &unk_1010EA680);
  swift_bridgeObjectRelease(a2);
  v4 = 0;
  result = 38;
  switch(v3)
  {
    case 0:
      goto LABEL_42;
    case 1:
      v4 = 1;
      goto LABEL_42;
    case 2:
      v4 = 2;
      goto LABEL_42;
    case 3:
      v4 = 3;
      goto LABEL_42;
    case 4:
      v4 = 4;
      goto LABEL_42;
    case 5:
      v4 = 5;
      goto LABEL_42;
    case 6:
      v4 = 6;
      goto LABEL_42;
    case 7:
      v4 = 7;
      goto LABEL_42;
    case 8:
      v4 = 8;
      goto LABEL_42;
    case 9:
      v4 = 9;
      goto LABEL_42;
    case 10:
      v4 = 10;
      goto LABEL_42;
    case 11:
      v4 = 11;
      goto LABEL_42;
    case 12:
      v4 = 12;
      goto LABEL_42;
    case 13:
      v4 = 13;
      goto LABEL_42;
    case 14:
      v4 = 14;
      goto LABEL_42;
    case 15:
      v4 = 15;
      goto LABEL_42;
    case 16:
      v4 = 16;
      goto LABEL_42;
    case 17:
      v4 = 17;
      goto LABEL_42;
    case 18:
      v4 = 18;
      goto LABEL_42;
    case 19:
      v4 = 19;
      goto LABEL_42;
    case 20:
      v4 = 20;
      goto LABEL_42;
    case 21:
      v4 = 21;
      goto LABEL_42;
    case 22:
      v4 = 22;
      goto LABEL_42;
    case 23:
      v4 = 23;
      goto LABEL_42;
    case 24:
      v4 = 24;
      goto LABEL_42;
    case 25:
      v4 = 25;
      goto LABEL_42;
    case 26:
      v4 = 26;
      goto LABEL_42;
    case 27:
      v4 = 27;
      goto LABEL_42;
    case 28:
      v4 = 28;
      goto LABEL_42;
    case 29:
      v4 = 29;
      goto LABEL_42;
    case 30:
      v4 = 30;
      goto LABEL_42;
    case 31:
      v4 = 31;
      goto LABEL_42;
    case 32:
      v4 = 32;
      goto LABEL_42;
    case 33:
      v4 = 33;
      goto LABEL_42;
    case 34:
      v4 = 34;
      goto LABEL_42;
    case 35:
      v4 = 35;
      goto LABEL_42;
    case 36:
      v4 = 36;
      goto LABEL_42;
    case 37:
      v4 = 37;
LABEL_42:
      result = v4;
      break;
    case 38:
      return result;
    case 39:
      result = 39;
      break;
    case 40:
      result = 40;
      break;
    case 41:
      result = 41;
      break;
    case 42:
      result = 42;
      break;
    case 43:
      result = 43;
      break;
    case 44:
      result = 44;
      break;
    case 45:
      result = 45;
      break;
    case 46:
      result = 46;
      break;
    case 47:
      result = 47;
      break;
    case 48:
      result = 48;
      break;
    case 49:
      result = 49;
      break;
    case 50:
      result = 50;
      break;
    case 51:
      result = 51;
      break;
    case 52:
      result = 52;
      break;
    case 53:
      result = 53;
      break;
    case 54:
      result = 54;
      break;
    case 55:
      result = 55;
      break;
    case 56:
      result = 56;
      break;
    case 57:
      result = 57;
      break;
    case 58:
      result = 58;
      break;
    case 59:
      result = 59;
      break;
    case 60:
      result = 60;
      break;
    case 61:
      result = 61;
      break;
    case 62:
      result = 62;
      break;
    case 63:
      result = 63;
      break;
    case 64:
      result = 64;
      break;
    case 65:
      result = 65;
      break;
    case 66:
      result = 66;
      break;
    case 67:
      result = 67;
      break;
    case 68:
      result = 68;
      break;
    case 69:
      result = 69;
      break;
    case 70:
      result = 70;
      break;
    case 71:
      result = 71;
      break;
    case 72:
      result = 72;
      break;
    case 73:
      result = 73;
      break;
    case 74:
      result = 74;
      break;
    case 75:
      result = 75;
      break;
    case 76:
      result = 76;
      break;
    case 77:
      result = 77;
      break;
    case 78:
      result = 78;
      break;
    case 79:
      result = 79;
      break;
    case 80:
      result = 80;
      break;
    case 81:
      result = 81;
      break;
    case 82:
      result = 82;
      break;
    case 83:
      result = 83;
      break;
    case 84:
      result = 84;
      break;
    case 85:
      result = 85;
      break;
    case 86:
      result = 86;
      break;
    case 87:
      result = 87;
      break;
    case 88:
      result = 88;
      break;
    case 89:
      result = 89;
      break;
    case 90:
      result = 90;
      break;
    case 91:
      result = 91;
      break;
    case 92:
      result = 92;
      break;
    case 93:
      result = 93;
      break;
    case 94:
      result = 94;
      break;
    case 95:
      result = 95;
      break;
    case 96:
      result = 96;
      break;
    case 97:
      result = 97;
      break;
    case 98:
      result = 98;
      break;
    case 99:
      result = 99;
      break;
    case 100:
      result = 100;
      break;
    case 101:
      result = 101;
      break;
    case 102:
      result = 102;
      break;
    case 103:
      result = 103;
      break;
    case 104:
      result = 104;
      break;
    case 105:
      result = 105;
      break;
    case 106:
      result = 106;
      break;
    case 107:
      result = 107;
      break;
    case 108:
      result = 108;
      break;
    case 109:
      result = 109;
      break;
    case 110:
      result = 110;
      break;
    case 111:
      result = 111;
      break;
    case 112:
      result = 112;
      break;
    case 113:
      result = 113;
      break;
    case 114:
      result = 114;
      break;
    case 115:
      result = 115;
      break;
    case 116:
      result = 116;
      break;
    case 117:
      result = 117;
      break;
    case 118:
      result = 118;
      break;
    case 119:
      result = 119;
      break;
    case 120:
      result = 120;
      break;
    case 121:
      result = 121;
      break;
    case 122:
      result = 122;
      break;
    case 123:
      result = 123;
      break;
    case 124:
      result = 124;
      break;
    case 125:
      result = 125;
      break;
    case 126:
      result = 126;
      break;
    case 127:
      result = 127;
      break;
    default:
      if ((unint64_t)(v3 - 128) >= 0x12)
        result = 146;
      else
        result = v3 | 0xFFFFFF80;
      break;
  }
  return result;
}

unint64_t sub_100749F5C()
{
  unint64_t result;

  result = qword_101106930;
  if (!qword_101106930)
  {
    result = swift_getWitnessTable(byte_100E4E1FC, &type metadata for ConfigurationResponse.Status);
    atomic_store(result, (unint64_t *)&qword_101106930);
  }
  return result;
}

uint64_t sub_100749FA0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100749FCC + 4 * byte_100E4E410[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100749FCC()
{
  return 0x644970696863;
}

uint64_t sub_100749FE0()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10074A000()
{
  return 0x49746375646F7270;
}

uint64_t sub_10074A01C()
{
  return 0x6449726F646E6576;
}

uint64_t sub_10074A034()
{
  return 0x6F69737265567766;
}

uint64_t sub_10074A058()
{
  return 0x727574616E676973;
}

uint64_t sub_10074A078()
{
  return 0x4E6E6F6973736573;
}

uint64_t sub_10074A098()
{
  return 0x737574617473;
}

uint64_t sub_10074A0AC()
{
  return 0x7374726563;
}

uint64_t sub_10074A0C0()
{
  return 0x5364656573;
}

uint64_t sub_10074A0D4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101106940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10074B070();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PairingLockAckRequestContent.CodingKeys, &type metadata for PairingLockAckRequestContent.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v28) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v28, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v28, v5);
    v16 = v3[4];
    v17 = v3[5];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v28, v5);
    v18 = v3[6];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v28, v5);
    v19 = v3[7];
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v28, v5);
    v20 = v3[8];
    v21 = v3[9];
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v28, v5);
    v28 = *((_OWORD *)v3 + 5);
    v27 = 6;
    v22 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 6);
    v27 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 7);
    v27 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    v28 = *((_OWORD *)v3 + 8);
    v27 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v22);
    *(_QWORD *)&v28 = v3[18];
    v27 = 10;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v24 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10074A3CC()
{
  unsigned __int8 *v0;

  return sub_100749FA0(*v0);
}

uint64_t sub_10074A3D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10074B258(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10074A3F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10074B070();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10074A420(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10074B070();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10074A448(_QWORD *a1)
{
  return sub_10074A0D4(a1);
}

void sub_10074A4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, unint64_t a11, __int128 a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17)
{
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  unint64_t v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _OWORD v74[9];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  *((_QWORD *)&v70 + 1) = a2;
  v71 = a3;
  *(_QWORD *)&v70 = a1;
  v69 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
  *(_QWORD *)&v76 = v25;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v27 = v76;
  swift_bridgeObjectRelease();
  v28 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v28)
  {
    v29 = v28;
    v66 = a4;
    *(_QWORD *)&v67 = a5;
    *((_QWORD *)&v67 + 1) = a6;
    *(_QWORD *)&v68 = a7;
    *((_QWORD *)&v68 + 1) = a8;
    v30 = objc_msgSend(v28, "serverFriendlyDescription");

    if (v30)
    {
      v65 = a17;
      v72 = a16;
      v64 = a15;
      v63 = a14;
      v73 = a13;
      v62 = a11;
      v61 = a9;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v33 = v32;

      v34 = swift_isUniquelyReferenced_nonNull_native(v27);
      *(_QWORD *)&v76 = v27;
      sub_100109D28(v31, v33, 0xD000000000000011, 0x8000000100ECA2C0, v34);
      v35 = v76;
      v36 = swift_bridgeObjectRelease();
      v37 = Date.init()(v36);
      v38 = Date.epoch.getter(v37);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v69);
      *(_QWORD *)&v76 = v38;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v41 = v40;
      v42 = swift_isUniquelyReferenced_nonNull_native(v35);
      *(_QWORD *)&v76 = v35;
      sub_100109D28(v39, v41, 0xD000000000000015, 0x8000000100ECA2E0, v42);
      v43 = v76;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v76 = 1;
      v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v46 = v45;
      v47 = swift_isUniquelyReferenced_nonNull_native(v43);
      *(_QWORD *)&v76 = v43;
      sub_100109D28(v44, v46, 0xD000000000000013, 0x8000000100ECA300, v47);
      v48 = v76;
      swift_bridgeObjectRelease();
      v49 = sub_10069BB84();
      v51 = v50;
      v52 = swift_isUniquelyReferenced_nonNull_native(v48);
      *(_QWORD *)&v76 = v48;
      sub_100109D28((uint64_t)v49, v51, 0x6567412D72657355, 0xEA0000000000746ELL, v52);
      v69 = v76;
      swift_bridgeObjectRelease();
      v76 = v70;
      *(_QWORD *)&v77 = v71;
      *((_QWORD *)&v77 + 1) = v66;
      v78 = v67;
      v79 = v68;
      v53 = v62;
      v80 = v61;
      *(_QWORD *)&v81 = a10;
      *((_QWORD *)&v81 + 1) = v62;
      v82 = a12;
      v54 = v72;
      v55 = v73;
      v56 = v63;
      v57 = v64;
      *(_QWORD *)&v83 = v73;
      *((_QWORD *)&v83 + 1) = v63;
      *(_QWORD *)&v84 = v64;
      *((_QWORD *)&v84 + 1) = v72;
      v85 = v65;
      v58 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
      *((_QWORD *)&v70 + 1) = a10;
      sub_10001BBBC(a10, v53);
      v71 = a12;
      sub_10001BBBC(a12, *((unint64_t *)&a12 + 1));
      sub_10001BBBC(v55, v56);
      sub_10001BBBC(v57, v54);
      JSONEncoder.init()(v59);
      v74[6] = v82;
      v74[7] = v83;
      v74[8] = v84;
      v75 = v85;
      v74[2] = v78;
      v74[3] = v79;
      v74[4] = v80;
      v74[5] = v81;
      v74[0] = v76;
      v74[1] = v77;
      v60 = sub_10074AA98();
      dispatch thunk of JSONEncoder.encode<A>(_:)(v74, &type metadata for PairingLockAckRequestContent, v60);
      swift_release();
      sub_10001BC14(v57, v72);
      sub_10001BC14(v73, v56);
      sub_10001BC14(v71, *((unint64_t *)&a12 + 1));
      sub_10001BC14(*((uint64_t *)&v70 + 1), v53);
      sub_10074ABA0(&v76);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_10074AA98()
{
  unint64_t result;

  result = qword_101106938;
  if (!qword_101106938)
  {
    result = swift_getWitnessTable(byte_100E4E468, &type metadata for PairingLockAckRequestContent);
    atomic_store(result, (unint64_t *)&qword_101106938);
  }
  return result;
}

_QWORD *sub_10074AADC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[14];
  v10 = a1[15];
  v12 = a1[17];
  v13 = a1[16];
  v14 = a1[18];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  sub_10001BBBC(v5, v6);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  swift_bridgeObjectRetain(v14);
  return a1;
}

_QWORD *sub_10074ABA0(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;

  v2 = a1[10];
  v3 = a1[11];
  v4 = a1[12];
  v5 = a1[13];
  v6 = a1[14];
  v7 = a1[15];
  v9 = a1[17];
  v10 = a1[16];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for PairingLockAckRequestContent(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 104) = v11;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 120) = v13;
  v14 = *(_QWORD *)(a2 + 128);
  v15 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 136) = v15;
  v16 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v16;
  swift_bridgeObjectRetain(v16);
  return a1;
}

_QWORD *assignWithCopy for PairingLockAckRequestContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v7 = a2[9];
  a1[9] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = a2[10];
  v9 = a2[11];
  sub_10001BBBC(v8, v9);
  v10 = a1[10];
  v11 = a1[11];
  a1[10] = v8;
  a1[11] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[12];
  v13 = a2[13];
  sub_10001BBBC(v12, v13);
  v14 = a1[12];
  v15 = a1[13];
  a1[12] = v12;
  a1[13] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[14];
  v17 = a2[15];
  sub_10001BBBC(v16, v17);
  v18 = a1[14];
  v19 = a1[15];
  a1[14] = v16;
  a1[15] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[16];
  v21 = a2[17];
  sub_10001BBBC(v20, v21);
  v22 = a1[16];
  v23 = a1[17];
  a1[16] = v20;
  a1[17] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[18];
  a1[18] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v14, v15);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PairingLockAckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingLockAckRequestContent()
{
  return &type metadata for PairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for PairingLockAckRequest()
{
  return &type metadata for PairingLockAckRequest;
}

unint64_t sub_10074B070()
{
  unint64_t result;

  result = qword_101106948;
  if (!qword_101106948)
  {
    result = swift_getWitnessTable(byte_100E4E5AC, &type metadata for PairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106948);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PairingLockAckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10074B100 + 4 * byte_100E4E420[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10074B134 + 4 * byte_100E4E41B[v4]))();
}

uint64_t sub_10074B134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10074B13C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10074B144);
  return result;
}

uint64_t sub_10074B150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10074B158);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10074B15C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10074B164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for PairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_10074B184()
{
  unint64_t result;

  result = qword_101106950;
  if (!qword_101106950)
  {
    result = swift_getWitnessTable("5\n$", &type metadata for PairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106950);
  }
  return result;
}

unint64_t sub_10074B1CC()
{
  unint64_t result;

  result = qword_101106958;
  if (!qword_101106958)
  {
    result = swift_getWitnessTable("}\n$", &type metadata for PairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106958);
  }
  return result;
}

unint64_t sub_10074B214()
{
  unint64_t result;

  result = qword_101106960;
  if (!qword_101106960)
  {
    result = swift_getWitnessTable("e\n$", &type metadata for PairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106960);
  }
  return result;
}

uint64_t sub_10074B258(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v9 = 0xE900000000000064;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6F69737265567766 && a2 == 0xE90000000000006ELL)
  {
    v11 = 0xE90000000000006ELL;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69737265567766, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    v12 = 0xE900000000000065;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x727574616E676973, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v13 = 0xEC00000065636E6FLL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x5364656573 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5364656573, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v15 = 0xE600000000000000;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_62;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

Swift::Int sub_10074B6D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000034, 0x8000000100EC5330);
  return Hasher._finalize()();
}

uint64_t sub_10074B72C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000034, 0x8000000100EC5330);
}

Swift::Int sub_10074B748()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000034, 0x8000000100EC5330);
  return Hasher._finalize()();
}

uint64_t sub_10074B798@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D298, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_10074B800(char *a1, int a2, uint64_t a3, void *a4, void *aBlock, void (*a6)(uint64_t, id, uint64_t, void *))
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char *v14;

  v10 = _Block_copy(aBlock);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, &type metadata for String);
  v12 = *sub_10001AA44(&a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation], *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation + 24]);
  _Block_copy(v10);
  v13 = a4;
  v14 = a1;
  a6(v11, v13, v12, v10);
  _Block_release(v10);
  _Block_release(v10);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10074BCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  unint64_t v15;
  _BYTE v17[56];

  sub_10001AA44((_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation), *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation + 24));
  v11 = sub_10001A9A8(&qword_101106C20);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = a2;
  v13 = sub_10001A9A8(&qword_101106C28);
  inited = swift_initStackObject(v13, v17);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = a1;
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 48) = a3;
  swift_bridgeObjectRetain_n(a2, 2);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  v15 = sub_1006BB0D0(inited);
  sub_1008B601C(v12, v15, 1, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_10074C5A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureLocationsTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SecureLocationsTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd25SecureLocationsTrampoline);
}

id sub_10074C608()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  objc_super v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(id *)(v0 + 56);
  }
  else
  {
    v3 = type metadata accessor for SecureLocationsService();
    v17[3] = v3;
    v17[4] = &off_10108F000;
    v17[0] = v0;
    v4 = (objc_class *)type metadata accessor for SecureLocationsTrampoline();
    v5 = objc_allocWithZone(v4);
    v6 = sub_10009F5D0((uint64_t)v17, v3);
    __chkstk_darwin(v6);
    v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    v10 = *v8;
    v16[3] = v3;
    v16[4] = &off_10108F000;
    v16[0] = v10;
    sub_100030784((uint64_t)v16, (uint64_t)v5 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsTrampoline_implementation);
    v15.receiver = v5;
    v15.super_class = v4;
    swift_retain();
    v11 = objc_msgSendSuper2(&v15, "init");
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
    v12 = *(void **)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v11;
    v2 = v11;

    v1 = 0;
  }
  v13 = v1;
  return v2;
}

_QWORD *sub_10074C740(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _BYTE v50[4];
  unsigned int v51;
  uint64_t (*v52)(_BYTE *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v3 = v2;
  v54 = a1;
  v55 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = &v50[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  __chkstk_darwin(v10);
  v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v2[2] = 0xD00000000000002DLL;
  v2[3] = 0x8000000100EE2DF0;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v51 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v52 = *(uint64_t (**)(_BYTE *))(v11 + 104);
  v14 = v52(v13);
  static DispatchQoS.unspecified.getter(v14);
  v56 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v16, v17, v4, v15);
  v2[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100EE3000, v9, v6, v13, 0);
  v18 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v52)(v13, v51, v53);
  static DispatchQoS.unspecified.getter(v18);
  v56 = _swiftEmptyArrayStorage;
  v19 = v16;
  v20 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v19, v17, v4, v15);
  v21 = v13;
  v22 = v55;
  v2[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100EE3040, v9, v6, v21, 0);
  v23 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v2[6] = XPCSessionManager.init(name:)(0xD000000000000016, 0x8000000100E4E6A0);
  v2[7] = 0;
  v2[14] = objc_msgSend(objc_allocWithZone((Class)NSCountedSet), "init");
  v2[8] = v20;
  v2[9] = v22;
  v24 = type metadata accessor for SecureLocationsClientSessionPool(0);
  v25 = swift_allocObject(v24, 56, 7);
  *(_QWORD *)(v25 + 40) = 0x3A656977657473;
  *(_QWORD *)(v25 + 48) = 0xE700000000000000;
  v26 = qword_1010EA098;
  swift_retain();
  swift_retain();
  if (v26 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "SecureLocationsClientSessionPool.init()", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v3[13] = sub_100B1AC90(v32);
  v33 = type metadata accessor for SecureLocationsSubscriptionManager();
  swift_allocObject(v33, 48, 7);
  v3[15] = sub_1005D1014();
  v34 = v3[8];
  v35 = v3[9];
  v36 = type metadata accessor for SecureLocationsKeyManager(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  swift_retain();
  swift_retain();
  v37 = sub_1008ACE78(v34, v35);
  v3[10] = v37;
  v38 = v3[8];
  v39 = type metadata accessor for SecureLocationsPayloadManager();
  swift_allocObject(v39, 56, 7);
  swift_retain();
  swift_retain();
  v40 = sub_10043C9B8(v38, (uint64_t)v37);
  v3[11] = v40;
  v41 = v3[10];
  v42 = v3[13];
  v43 = v3[15];
  v44 = type metadata accessor for SecureLocationsCoordinator();
  swift_allocObject(v44, 352, 7);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v45 = sub_10052023C((uint64_t)v40, v41, v22, v42, v43);
  v3[12] = v45;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.debug.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "SecureLocationsService inited", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }
  swift_release();
  swift_release();

  return v3;
}

uint64_t sub_10074CCB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting SecureLocations Service", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = swift_allocObject(&unk_10108F0F0, 32, 7);
  *(_QWORD *)(v15 + 16) = v1;
  *(_QWORD *)(v15 + 24) = v2;
  aBlock[4] = sub_10074FEE0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108F108;
  v16 = _Block_copy(aBlock);
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

uint64_t sub_10074CF4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v19;

  v2 = type metadata accessor for MachServiceName(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCServiceDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MachServiceName.init(_:)(0xD00000000000002DLL, 0x8000000100EE2DF0);
  v9 = sub_10074C608();
  if (qword_1010E9F08 != -1)
    swift_once(&qword_1010E9F08, sub_10074D194);
  v10 = qword_1010EA098;
  v11 = (id)qword_101106970;
  if (v10 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "remoteObjectInterface called", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPSecureLocationsClientXPCProtocol);
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v4, 0, v9, v11, v17, sub_10001E18C, a1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id sub_10074D194()
{
  id result;

  result = sub_10074D1B0();
  qword_101106970 = (uint64_t)result;
  return result;
}

id sub_10074D1B0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPSecureLocationsXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B10;
  v3 = sub_10000F4A0(0, &qword_101106C08, SPSecureLocationsSubscriptionContext_ptr);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = sub_10000F4A0(0, &qword_101106C10, NSString_ptr);
  *(_QWORD *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "subscribeAndFetchLocationForIds:context:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v5 = sub_1007B6904();
  v6 = swift_allocObject(v5, ((*(unsigned int *)(v5 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v5 + 52) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v6 + 32) = sub_10000F4A0(0, &qword_101106C18, SPSecureLocationsSubscriptionResult_ptr);
  v7 = sub_10000F4A0(0, &qword_1010EE380, NSArray_ptr);
  *(_QWORD *)(v6 + 40) = v7;
  v8 = sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  *(_QWORD *)(v6 + 48) = v8;
  *(_QWORD *)(v6 + 56) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, "subscribeAndFetchLocationForIds:context:completion:", 0, 1);
  swift_bridgeObjectRelease();
  v9 = sub_1007B6904();
  v10 = swift_allocObject(v9, ((*(unsigned int *)(v9 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v9 + 52) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v10 + 32) = v3;
  *(_QWORD *)(v10 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v10, "unsubscribeForIds:context:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v11 = sub_1007B6904();
  v12 = swift_allocObject(v11, ((*(unsigned int *)(v11 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v11 + 52) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v12, "publishLocation:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v13 = sub_1007B6904();
  v14 = swift_allocObject(v13, ((*(unsigned int *)(v13 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v13 + 52) | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v14, "latestLocationFromCacheForId:completion:", 0, 1);
  swift_bridgeObjectRelease();
  v15 = sub_1007B6904();
  v16 = swift_allocObject(v15, ((*(unsigned int *)(v15 + 48) + 7) & 0x1FFFFFFF8) + 24, *(unsigned __int16 *)(v15 + 52) | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E221E0;
  *(_QWORD *)(v16 + 32) = v7;
  *(_QWORD *)(v16 + 40) = v8;
  *(_QWORD *)(v16 + 48) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v16, "updateLocationCacheWith:completion:", 0, 0);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10074D494()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));

  swift_release(*(_QWORD *)(v0 + 120));
  return v0;
}

uint64_t sub_10074D510()
{
  uint64_t v0;

  sub_10074D494();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for SecureLocationsService()
{
  return objc_opt_self(_TtC12searchpartyd22SecureLocationsService);
}

uint64_t sub_10074D550()
{
  return sub_10074CCB8();
}

void sub_10074D570(void *a1, void *a2, uint64_t a3, _QWORD *a4, void (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  char **v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  char **v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  id v57;
  Class isa;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD, _QWORD);
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  id v74;
  id v75;
  uint64_t v76;

  v70 = a5;
  v71 = a6;
  v72 = a3;
  v66 = type metadata accessor for DispatchPredicate(0);
  v68 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v67 = (void **)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v73 = a1;
  v12 = Logger.logObject.getter(v73);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = &selRef_connectedServicesChanged_;
  if (os_log_type_enabled(v12, v13))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v69 = v11;
    v17 = v16;
    v75 = (id)v16;
    *(_DWORD *)v15 = 136315138;
    v18 = v73;
    v74 = -[NSObject subscriptionMode](v73, "subscriptionMode");
    v19 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v74 = (id)sub_100016940(v19, v20, (uint64_t *)&v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v15 + 4, v15 + 12);

    v14 = &selRef_connectedServicesChanged_;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "subscribeAndFetch called with mode %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v11 = v69;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

    v12 = v73;
  }

  if (objc_msgSend(v73, v14[460]) && a2)
  {
    v21 = a2;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v65 = a2;
      v25 = (uint8_t *)v24;
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      v69 = v11;
      *(_DWORD *)v25 = 138412290;
      v75 = v21;
      v27 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v25 + 4, v25 + 12);
      *v26 = v65;

      v14 = &selRef_connectedServicesChanged_;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "subscribeAndFetch adding connection %@", v25, 0xCu);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {

      v22 = v21;
    }

    v29 = *(void **)(v72 + 32);
    v31 = v67;
    v30 = v68;
    *v67 = v29;
    v32 = v66;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v30 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v66);
    v33 = v29;
    LOBYTE(v29) = _dispatchPreconditionTest(_:)(v31);
    (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v31, v32);
    if ((v29 & 1) == 0)
    {
      __break(1u);
      goto LABEL_27;
    }
    objc_msgSend(*(id *)(v72 + 112), "addObject:", v21);
    swift_retain();
    sub_100308450(v21);

    swift_release();
    swift_release();
  }
  if (objc_msgSend(v73, v14[460]) != (id)2)
  {
    swift_retain();
    sub_100523494((uint64_t)a4, v73, 0, v70, v71);
LABEL_21:
    swift_release();
    return;
  }
  swift_bridgeObjectRetain(a4);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter(v35);
  if (!os_log_type_enabled(v35, v36))
  {

    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v37 = (uint8_t *)swift_slowAlloc(12, -1);
  v38 = swift_slowAlloc(32, -1);
  v75 = (id)v38;
  *(_DWORD *)v37 = 136315138;
  if (!a4[2])
  {
LABEL_27:
    __break(1u);
    return;
  }
  v39 = v38;
  v40 = v14;
  v41 = a4[4];
  v42 = a4[5];
  swift_bridgeObjectRetain(v42);
  v43 = v41;
  v14 = v40;
  v74 = (id)sub_100016940(v43, v42, (uint64_t *)&v75);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v37 + 4, v37 + 12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v35, v36, "subscribeAndFetch called with live mode %s, ", v37, 0xCu);
  swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v39, -1, -1);
  swift_slowDealloc(v37, -1, -1);

LABEL_19:
  v44 = a4[2];
  if (v44 == 1)
  {
    v45 = v72;
    v46 = *(void **)(v72 + 96);
    v48 = (void *)a4[4];
    v47 = (void *)a4[5];
    v49 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v49);
    *(&v65 - 6) = v46;
    *(&v65 - 5) = v48;
    v50 = v73;
    *(&v65 - 4) = v47;
    *(&v65 - 3) = v50;
    v51 = v71;
    *(&v65 - 2) = v70;
    *(&v65 - 1) = (void *)v51;
    swift_retain();
    swift_bridgeObjectRetain(v47);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.startLiveLocations", 64, 2, sub_10075114C, &v65 - 8, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    swift_release();
    v52 = *(_QWORD *)(v45 + 96);
    swift_retain();
    sub_100522C80((uint64_t)a4, v50, 0, v52);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain(a4);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v56 = 134217984;
    v75 = (id)v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "subscribeAndFetch called with live mode and %ld ids. Only 1 id is supported", v56, 0xCu);
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  objc_msgSend(v73, v14[460]);
  v57 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v59 = objc_msgSend(v57, "initWithExpiryTime:locations:", isa, 15.0);

  type metadata accessor for SecureLocationsError(0);
  v61 = v60;
  v74 = 0;
  v62 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v63 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  _BridgedStoredNSError.init(_:userInfo:)(&v75, &v74, v62, v61, v63);
  v64 = v75;
  v70(v59, v75);

}

void sub_10074DD64(void *a1, _QWORD *a2, void (*a3)(void *), uint64_t a4, uint64_t a5, void *a6)
{
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  if (objc_msgSend(a1, "subscriptionMode") == (id)2)
  {
    v12 = (void *)a2[2];
    if (v12 == (void *)1)
    {
      v14 = a2[4];
      v13 = (void *)a2[5];
      swift_retain();
      swift_bridgeObjectRetain(v13);
      sub_1005347D0(v14, v13, a1, (void (*)(_QWORD))a3, a4);
      swift_bridgeObjectRelease();
      swift_release();
      if (a6)
      {
        v28 = a6;
        sub_10074E040(v28);

      }
    }
    else
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v18 = type metadata accessor for Logger(0);
      sub_10001A9E8(v18, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain(a2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v22 = 134217984;
        v30 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "unsubscribe for live can be called with only 1 id. Id count %ld", v22, 0xCu);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      type metadata accessor for SecureLocationsError(0);
      v24 = v23;
      v29 = 4;
      v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v26 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(&v30, &v29, v25, v24, v26);
      v27 = v30;
      a3(v30);

    }
  }
  else
  {
    v15 = (_QWORD *)swift_allocObject(&unk_10108F5F0, 56, 7);
    v15[2] = a5;
    v15[3] = a1;
    v15[4] = a6;
    v15[5] = a3;
    v15[6] = a4;
    v16 = a6;
    swift_retain();
    swift_retain();
    v17 = a1;
    swift_retain();
    sub_1005304A0((uint64_t)a2, v17, (uint64_t)sub_100750F20, (uint64_t)v15);
    swift_release();
    swift_release();
  }
}

uint64_t sub_10074E040(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject **v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  char isEscapingClosureAtFileLocation;
  void **aBlock;
  _QWORD v27[5];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 32);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_4;
  }
  objc_msgSend(*(id *)(v2 + 112), "removeObject:", a1);
  result = (uint64_t)objc_msgSend(*(id *)(v2 + 112), "containsObject:", a1);
  if ((result & 1) != 0)
    return result;
  if (qword_1010EA098 != -1)
    goto LABEL_10;
LABEL_4:
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v12 = a1;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 138412290;
    aBlock = (void **)&v12->isa;
    v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v27, v15 + 4, v15 + 12);
    *v16 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "removing client connection %@", v15, 0xCu);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v16, 1, v18);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {

    v13 = v12;
  }

  v19 = *(_QWORD *)(v2 + 104);
  v20 = *(NSObject **)(v19 + 16);
  v21 = swift_allocObject(&unk_10108F348, 32, 7);
  *(_QWORD *)(v21 + 16) = v19;
  *(_QWORD *)(v21 + 24) = v12;
  v22 = swift_allocObject(&unk_10108F370, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100750D98;
  *(_QWORD *)(v22 + 24) = v21;
  v27[3] = sub_10001D850;
  v27[4] = v22;
  aBlock = _NSConcreteStackBlock;
  v27[0] = 1107296256;
  v27[1] = sub_10001D8B8;
  v27[2] = &unk_10108F388;
  v23 = _Block_copy(&aBlock);
  swift_retain_n(v19, 2);
  v24 = v12;
  swift_retain();
  swift_release();
  dispatch_sync(v20, v23);
  _Block_release(v23);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v22, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10074E390(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[6];

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a2 + 32);
  v18 = (_QWORD *)swift_allocObject(&unk_10108F618, 64, 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = a6;
  v18[7] = a1;
  aBlock[4] = sub_100750F74;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108F630;
  v19 = _Block_copy(aBlock);
  swift_retain();
  v20 = a3;
  v21 = a4;
  swift_retain();
  v22 = swift_errorRetain(a1);
  static DispatchQoS.unspecified.getter(v22);
  v30 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return swift_release();
}

uint64_t sub_10074E5AC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void **v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  _QWORD *v76;
  void **aBlock;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  uint64_t (*v81)();
  _QWORD *v82;

  v70 = a4;
  v71 = a5;
  v69 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v72 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a1;
  v15 = *(_QWORD *)(a1 + 120);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_100750F80, v15, &type metadata for Bool);
  swift_release();
  v16 = (char)aBlock;
  v17 = objc_msgSend(a2, "subscriptionMode");
  v74 = a3;
  v18 = v17 != (id)1 || a3 == 0;
  if (v18 || (v16 & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    v20 = swift_retain();
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(8, -1);
      v67 = v12;
      v68 = v10;
      *(_DWORD *)v23 = 67109120;
      v24 = a6;
      v25 = *(_QWORD *)(v75 + 104);
      swift_retain();
      OS_dispatch_queue.sync<A>(execute:)(sub_100750FD8, v25, &type metadata for Bool);
      a6 = v24;
      swift_release();
      LODWORD(aBlock) = aBlock;
      v12 = v67;
      v10 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v23 + 4, v23 + 8);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "unsubscribe shallow not removing client connection. isEmpty %{BOOL}d", v23, 8u);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_release();
    }
    v26 = (_QWORD *)swift_allocObject(&unk_10108F668, 48, 7);
    v27 = v74;
    v28 = v70;
    v29 = v71;
    v26[2] = v74;
    v26[3] = v28;
    v26[4] = v29;
    v26[5] = a6;
    v81 = sub_100750FCC;
    v82 = v26;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_100016FB8;
    v80 = &unk_10108F680;
    v30 = _Block_copy(&aBlock);
    v31 = v27;
    swift_retain();
    v32 = swift_errorRetain(a6);
    v33 = v72;
    static DispatchQoS.unspecified.getter(v32);
    v76 = _swiftEmptyArrayStorage;
    v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v36 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v37 = v35;
    v38 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v37, v36, v69, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v12, v30);
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v38);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v33, v13);
  }
  else
  {
    v39 = qword_1010EA098;
    v40 = v74;
    if (v39 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v66 = a6;
    v67 = (char *)v13;
    v41 = type metadata accessor for Logger(0);
    sub_10001A9E8(v41, (uint64_t)qword_1011B7A18);
    v42 = v40;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = os_log_type_enabled(v43, v44);
    v68 = v10;
    if (v45)
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = (_QWORD *)swift_slowAlloc(8, -1);
      v65 = (void **)swift_slowAlloc(32, -1);
      aBlock = v65;
      *(_DWORD *)v46 = 136315394;
      v76 = (_QWORD *)sub_100016940(0xD000000000000027, 0x8000000100EE2F30, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &aBlock, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2112;
      v76 = v42;
      v48 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &aBlock, v46 + 14, v46 + 22);
      *v47 = v74;

      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s unsubscribe shallow removing client connection %@", (uint8_t *)v46, 0x16u);
      v49 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v47, 1, v49);
      swift_slowDealloc(v47, -1, -1);
      v50 = v65;
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

    }
    v51 = v75;
    v52 = (_QWORD *)swift_allocObject(&unk_10108F6B8, 56, 7);
    v53 = v70;
    v54 = v71;
    v52[2] = v42;
    v52[3] = v53;
    v55 = v66;
    v52[4] = v54;
    v52[5] = v55;
    v52[6] = v51;
    v81 = sub_10075102C;
    v82 = v52;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_100016FB8;
    v80 = &unk_10108F6D0;
    v56 = _Block_copy(&aBlock);
    v57 = v42;
    swift_retain();
    swift_errorRetain(v55);
    v58 = swift_retain();
    v59 = v72;
    static DispatchQoS.unspecified.getter(v58);
    v76 = _swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v63 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v61, v62, v69, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v12, v56);
    _Block_release(v56);

    (*(void (**)(char *, uint64_t))(v68 + 8))(v12, v63);
    (*(void (**)(char *, char *))(v73 + 8))(v59, v67);
  }
  return swift_release();
}

uint64_t sub_10074ECC8(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27[2];

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(32, -1);
    v27[0] = v23;
    *(_DWORD *)v13 = 136315394;
    v24 = a5;
    v26 = sub_100016940(0xD000000000000027, 0x8000000100EE2F30, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2112;
    v26 = (uint64_t)v10;
    v14 = v10;
    v25 = v10;
    v15 = a4;
    v16 = v14;
    a5 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v13 + 14, v13 + 22);
    v17 = v22;
    *v22 = v25;

    a4 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - Will call completion on completionQueue %@", (uint8_t *)v13, 0x16u);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v17, 1, v18);
    swift_slowDealloc(v17, -1, -1);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v10 = v25;
  }
  else
  {

  }
  a2(a4);
  v19 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v19);
  v21[2] = a5;
  v21[3] = v10;
  return static Transaction.named<A>(_:with:)("com.apple.searchpartyd.SecureLocationsService.removeClientConnection", 68, 2, sub_10075103C, v21, &type metadata for () + 1);
}

uint64_t sub_10074EF7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD aBlock[6];
  _QWORD *v22;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(a2 + 32);
  v13 = (_QWORD *)swift_allocObject(&unk_10108F708, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_100751088;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108F720;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(a3);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v6, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10074F184(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v18 = v13;
    *(_DWORD *)v11 = 136315394;
    v17 = sub_100016940(0xD000000000000027, 0x8000000100EE2F30, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2112;
    if (a1)
    {
      v17 = (uint64_t)v8;
      v14 = v8;
    }
    else
    {
      v17 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 14, v11 + 22);
    *v12 = a1;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s - Will call completion on completionQueue %@", (uint8_t *)v11, 0x16u);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v12, 1, v15);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  return a2(a4);
}

void sub_10074F3EC(void **a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for SecureLocation(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  if (objc_msgSend(v9, "publishReason") == (id)100)
  {
    sub_100AA6EBC(v9, (uint64_t)v8);
    v10 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = sub_1007C9DB4(0, *(_QWORD *)(v10 + 16) + 1, 1, v10);
      *a2 = v10;
    }
    v13 = *(_QWORD *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 24);
    if (v13 >= v12 >> 1)
    {
      v10 = sub_1007C9DB4(v12 > 1, v13 + 1, 1, v10);
      *a2 = v10;
    }
    *(_QWORD *)(v10 + 16) = v13 + 1;
    sub_100750E30((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v13);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
    v15 = v9;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v29 = v19;
      v26 = v2;
      *(_DWORD *)v18 = 136315138;
      v25 = v18 + 4;
      v20 = objc_msgSend(v15, "debugDescription");
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;

      v27 = sub_100016940(v21, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25, v18 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not updating cache with location since publishReason is not legacyLocate. %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10074F6B4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v10 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "updateLocations in cache %ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  return a2(0);
}

uint64_t sub_10074F7FC(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  id v4;

  if (a1)
  {
    v4 = a1;
    sub_10074E040(v4);

  }
  return a3(0);
}

uint64_t sub_10074F848(uint64_t a1, void (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  swift_retain();
  sub_10052FB8C(a2, a3);
  return swift_release();
}

uint64_t sub_10074F890(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD aBlock[6];

  v43 = a1;
  v44 = a5;
  v41 = a3;
  v42 = a4;
  v8 = v6;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v40 = v16;
    v22 = v8;
    v23 = v13;
    v24 = v10;
    v25 = a2;
    v26 = v14;
    v27 = a6;
    v28 = v11;
    v29 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v41, v21, 2u);
    v30 = v29;
    v11 = v28;
    a6 = v27;
    v14 = v26;
    a2 = v25;
    v10 = v24;
    v13 = v23;
    v8 = v22;
    v16 = v40;
    swift_slowDealloc(v30, -1, -1);
  }

  v31 = (_QWORD *)swift_allocObject(v42, 40, 7);
  v32 = v43;
  v31[2] = v8;
  v31[3] = v32;
  v31[4] = a2;
  aBlock[4] = v44;
  aBlock[5] = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a6;
  v33 = _Block_copy(aBlock);
  swift_retain();
  v34 = swift_retain();
  static DispatchQoS.unspecified.getter(v34);
  v46 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v36, v37, v10, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v45);
  return swift_release();
}

void sub_10074FB64(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  id v7;

  v7 = *(id *)(*(_QWORD *)(a1 + 96) + 328);
  a4(a2, a3);

}

uint64_t sub_10074FBC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Daemon API: triggerStewieProactiveNotification", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  aBlock[4] = sub_10074FEE8;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108F130;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void sub_10074FE38(uint64_t a1)
{
  void *v1;
  id v2;
  _QWORD v3[3];
  char v4;

  v1 = *(void **)(*(_QWORD *)(a1 + 96) + 328);
  type metadata accessor for Transaction(0);
  v3[2] = v1;
  v4 = 1;
  v2 = v1;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.postReminderNotification", 70, 2, sub_10074FEF0, v3, &type metadata for () + 1);

}

uint64_t sub_10074FEBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10074FEE0()
{
  uint64_t v0;

  return sub_10074CF4C(*(_QWORD *)(v0 + 16));
}

void sub_10074FEE8()
{
  uint64_t v0;

  sub_10074FE38(v0);
}

uint64_t sub_10074FEF0(uint64_t a1)
{
  uint64_t v1;

  return sub_100C08538(a1, *(char **)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_10074FF10()
{
  uint64_t *v0;

  sub_10074FB64(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t))sub_100C05170);
}

void sub_10074FF38()
{
  uint64_t *v0;

  sub_10074FB64(v0[2], v0[3], v0[4], (void (*)(uint64_t, uint64_t))sub_100C049C8);
}

uint64_t sub_10074FF5C@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  result = swift_beginAccess(a1 + 32, v8, 0, 0);
  v5 = *(_QWORD *)(a1 + 32);
  if ((v5 & 0xC000000000000001) != 0)
  {
    if (v5 < 0)
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v7 = __CocoaSet.count.getter(v6);
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 16);
  }
  *a2 = v7 == 0;
  return result;
}

void sub_10074FFF0(uint64_t a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_10108F758, 24, 7);
  *(_QWORD *)(v15 + 16) = a4;
  if (*(_QWORD *)(a1 + 16))
  {
    v16 = objc_opt_self(NSXPCConnection);
    v43 = v9;
    v17 = v15;
    v18 = (void *)v16;
    _Block_copy(a4);
    v19 = objc_msgSend(v18, "currentConnection");
    v42 = *(_QWORD *)(a3 + 32);
    v20 = (_QWORD *)swift_allocObject(&unk_10108F780, 64, 7);
    v20[2] = a2;
    v20[3] = v19;
    v20[4] = a3;
    v20[5] = a1;
    v20[6] = sub_10059A5E4;
    v20[7] = v17;
    aBlock[4] = sub_10075112C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10108F798;
    v21 = _Block_copy(aBlock);
    v22 = a2;
    v23 = v19;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    v24 = swift_retain();
    static DispatchQoS.unspecified.getter(v24);
    v45 = _swiftEmptyArrayStorage;
    v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v27 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v26, v27, v8, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v44);
    swift_release();
    swift_release();
  }
  else
  {
    _Block_copy(a4);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "subscribeAndFetch called with empty array of IDs", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    objc_msgSend(a2, "subscriptionMode");
    v33 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v33, "initWithExpiryTime:locations:", isa, 15.0);

    type metadata accessor for SecureLocationsError(0);
    v37 = v36;
    v45 = 0;
    v38 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v45, v38, v37, v39);
    v40 = (void *)aBlock[0];
    v41 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, id, void *))a4)[2](a4, v35, v41);
    swift_release();

  }
}

void sub_100750430(uint64_t a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t aBlock[6];

  v57 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_10108F578, 24, 7);
  *(_QWORD *)(v14 + 16) = a4;
  v15 = *(_QWORD *)(a1 + 16);
  _Block_copy(a4);
  if (v15)
  {
    v54 = v11;
    v56 = v9;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v53 = v13;
    v55 = v10;
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a1, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      v21 = swift_slowAlloc(32, -1);
      v51 = v21;
      v52 = v14;
      *(_DWORD *)v20 = 141558275;
      v59 = 1752392040;
      aBlock[0] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, aBlock, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      swift_bridgeObjectRetain(a1);
      v23 = Array.description.getter(v22, &type metadata for String);
      v24 = v7;
      v26 = v25;
      swift_bridgeObjectRelease();
      v59 = sub_100016940(v23, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, aBlock, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease_n(a1, 2);
      v7 = v24;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "unsubscribe in daemon for %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
      v27 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      v14 = v52;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    v39 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
    v40 = (_QWORD *)swift_allocObject(&unk_10108F5A0, 64, 7);
    v41 = v57;
    v40[2] = v57;
    v40[3] = a1;
    v40[4] = sub_10001D1EC;
    v40[5] = v14;
    v40[6] = a3;
    v40[7] = v39;
    aBlock[4] = (uint64_t)sub_100750ED8;
    aBlock[5] = (uint64_t)v40;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10108F5B8;
    v42 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a1);
    v43 = v41;
    swift_retain();
    swift_retain();
    v44 = v39;
    v45 = v53;
    static DispatchQoS.unspecified.getter(v44);
    v59 = (uint64_t)_swiftEmptyArrayStorage;
    v46 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v48 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v49 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v47, v48, v7, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v42);
    _Block_release(v42);

    (*(void (**)(char *, uint64_t))(v58 + 8))(v49, v7);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v55);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B7A18);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "unsubscribe called with zero ids", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    type metadata accessor for SecureLocationsError(0);
    v34 = v33;
    v59 = 4;
    v35 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v36 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v59, v35, v34, v36);
    v37 = (void *)aBlock[0];
    v38 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, void *))a4)[2](a4, v38);
    swift_release();

  }
}

uint64_t sub_1007509B4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  _QWORD *v20;

  v5 = swift_allocObject(&unk_10108F4D8, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  v20 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    _Block_copy(a3);
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v13);
    if (v6)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v10 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_10:
      v11 = swift_allocObject(&unk_10108F500, 32, 7);
      *(_QWORD *)(v11 + 16) = sub_10001D1EC;
      *(_QWORD *)(v11 + 24) = v5;
      swift_retain();
      swift_bridgeObjectRetain(v10);
      swift_retain();
      sub_10044036C((uint64_t)v10, 1, (uint64_t)sub_100750E28, v11);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n(v10, 2);
      return swift_release();
    }
    goto LABEL_16;
  }
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  _Block_copy(a3);
  swift_bridgeObjectRetain(a1);
  if (!v6)
    goto LABEL_15;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_21;
  }
  v7 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, a1);
    else
      v8 = *(id *)(a1 + 8 * v7 + 32);
    v9 = v8;
    ++v7;
    v19 = v8;
    sub_10074F3EC(&v19, (unint64_t *)&v20);

  }
  while (v6 != v7);
  swift_bridgeObjectRelease();
  v10 = v20;
  if (v20[2])
    goto LABEL_10;
LABEL_16:
  if (qword_1010EA098 != -1)
LABEL_21:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No legacyLocate locations to update in cache", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  a3[2](a3, 0);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100750C64(char a1, uint64_t a2)
{
  Class v4;
  Class isa;
  NSString v6;

  v4 = (Class)objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  if ((a1 & 1) != 0)
  {
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v6 = String._bridgeToObjectiveC()();
    -[objc_class setValue:forKey:](v4, "setValue:forKey:", isa, v6);

    v4 = isa;
  }
  else
  {
    v6 = String._bridgeToObjectiveC()();
    -[objc_class removeObjectForKey:](v4, "removeObjectForKey:", v6);
  }

  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
}

uint64_t sub_100750D50()
{
  uint64_t v0;

  return sub_10074F848(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100750D60()
{
  uint64_t v0;

  return sub_10074F7FC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(_QWORD))(v0 + 32));
}

uint64_t sub_100750D6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100750D98()
{
  uint64_t v0;

  sub_10032A748(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100750DA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100750DB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100750DE8(uint64_t a1)
{
  uint64_t v1;

  return sub_1008B9D7C(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100750E04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100750E28(uint64_t a1)
{
  uint64_t v1;

  return sub_10074F6B4(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100750E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SecureLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100750E74(uint64_t a1)
{
  uint64_t *v1;

  return sub_10052BB8C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100750E94()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100750ED8()
{
  return sub_100751138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10074DD64);
}

uint64_t sub_100750EE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100750F20(uint64_t a1)
{
  uint64_t v1;

  return sub_10074E390(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100750F30()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_errorRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100750F74()
{
  return sub_100751138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10074E5AC);
}

void sub_100750F80(unsigned __int8 *a1@<X8>)
{
  uint64_t v1;

  sub_1005CF0B8(v1, a1);
}

uint64_t sub_100750F98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100750FCC()
{
  uint64_t v0;

  return sub_10074F184(*(void **)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100750FD8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_10074FF5C(v1, a1);
}

uint64_t sub_100750FF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_errorRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10075102C()
{
  uint64_t v0;

  return sub_10074ECC8(*(void **)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10075103C(uint64_t a1)
{
  uint64_t v1;

  return sub_10074EF7C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_100751054()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100751088()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);
  Transaction.capture()();
  return sub_10074E040(v1);
}

uint64_t sub_1007510C4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007510E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10075112C()
{
  return sub_100751138((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10074D570);
}

uint64_t sub_100751138(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_10075114C(uint64_t a1)
{
  uint64_t v1;

  return sub_100543010(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1007511AC + 4 * byte_100E4E600[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1007511CC + 4 * byte_100E4E605[v4]))();
}

_BYTE *sub_1007511AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1007511CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007511D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007511DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1007511E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1007511EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEntitlement()
{
  return &type metadata for SecureLocationsEntitlement;
}

unint64_t sub_10075120C()
{
  unint64_t result;

  result = qword_101106C30;
  if (!qword_101106C30)
  {
    result = swift_getWitnessTable(asc_100E4E794, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_101106C30);
  }
  return result;
}

unint64_t sub_100751254()
{
  unint64_t result;

  result = qword_101106C38;
  if (!qword_101106C38)
  {
    result = swift_getWitnessTable(asc_100E4E71C, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_101106C38);
  }
  return result;
}

_QWORD *sub_100751324(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = type metadata accessor for BeaconIdentifier(0);
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 20)), (_QWORD *)((char *)a2 + *(int *)(v9 + 20)), v7);
    v10 = a3[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *(_QWORD *)((char *)a2 + v14 + 8);
    if (v17 >> 60 == 15)
    {
      v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
    else
    {
      v20 = *(_QWORD *)v16;
      sub_10001BBBC(*(_QWORD *)v16, v17);
      *(_QWORD *)v15 = v20;
      *((_QWORD *)v15 + 1) = v17;
      v21 = *((_QWORD *)v16 + 2);
      v22 = *((_QWORD *)v16 + 3);
      sub_10001BBBC(v21, v22);
      *((_QWORD *)v15 + 2) = v21;
      *((_QWORD *)v15 + 3) = v22;
      v23 = (uint64_t *)(v16 + 32);
      v24 = *((_QWORD *)v16 + 5);
      if (v24 >> 60 == 15)
      {
        *((_OWORD *)v15 + 2) = *(_OWORD *)v23;
      }
      else
      {
        v25 = *v23;
        sub_10001BBBC(*v23, *((_QWORD *)v16 + 5));
        *((_QWORD *)v15 + 4) = v25;
        *((_QWORD *)v15 + 5) = v24;
      }
    }
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_100751498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = type metadata accessor for BeaconIdentifier(0);
  v5(a1 + *(int *)(v6 + 20), v4);
  v7 = a1 + *(int *)(a2 + 20);
  v8 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v10 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    sub_10001BC14(*v10, v11);
    result = sub_10001BC14(v10[2], v10[3]);
    v12 = v10[5];
    if (v12 >> 60 != 15)
      return sub_10001BC14(v10[4], v12);
  }
  return result;
}

uint64_t sub_100751568(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a2 + v13 + 8);
  if (v16 >> 60 == 15)
  {
    v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v17;
    *(_OWORD *)(v14 + 32) = *((_OWORD *)v15 + 2);
  }
  else
  {
    v18 = *v15;
    sub_10001BBBC(*v15, v16);
    *(_QWORD *)v14 = v18;
    *(_QWORD *)(v14 + 8) = v16;
    v19 = v15[2];
    v20 = v15[3];
    sub_10001BBBC(v19, v20);
    *(_QWORD *)(v14 + 16) = v19;
    *(_QWORD *)(v14 + 24) = v20;
    v21 = v15 + 4;
    v22 = v15[5];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_10001BBBC(*v21, v15[5]);
      *(_QWORD *)(v14 + 32) = v23;
      *(_QWORD *)(v14 + 40) = v22;
    }
  }
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1007516B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a2 + v13 + 8);
  if (*(_QWORD *)(a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 == 15)
    {
      sub_1007518D8((uint64_t *)v14);
      v20 = *((_OWORD *)v15 + 1);
      v19 = *((_OWORD *)v15 + 2);
      *(_OWORD *)v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v20;
      *(_OWORD *)(v14 + 32) = v19;
      goto LABEL_17;
    }
    v26 = *v15;
    sub_10001BBBC(*v15, v16);
    v27 = *(_QWORD *)v14;
    v28 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)v14 = v26;
    *(_QWORD *)(v14 + 8) = v16;
    sub_10001BC14(v27, v28);
    v29 = v15[2];
    v30 = v15[3];
    sub_10001BBBC(v29, v30);
    v31 = *(_QWORD *)(v14 + 16);
    v32 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 16) = v29;
    *(_QWORD *)(v14 + 24) = v30;
    sub_10001BC14(v31, v32);
    v33 = v15 + 4;
    v25 = v15[5];
    if (*(_QWORD *)(v14 + 40) >> 60 == 15)
    {
      if (v25 >> 60 != 15)
      {
        v34 = *v33;
        goto LABEL_12;
      }
    }
    else
    {
      if (v25 >> 60 != 15)
      {
        v35 = *v33;
        sub_10001BBBC(*v33, v15[5]);
        v36 = *(_QWORD *)(v14 + 32);
        v37 = *(_QWORD *)(v14 + 40);
        *(_QWORD *)(v14 + 32) = v35;
        *(_QWORD *)(v14 + 40) = v25;
        sub_10001BC14(v36, v37);
        goto LABEL_17;
      }
      sub_1001FD268(v14 + 32);
    }
    *(_OWORD *)(v14 + 32) = *(_OWORD *)v33;
    goto LABEL_17;
  }
  if (v16 >> 60 != 15)
  {
    v21 = *v15;
    sub_10001BBBC(*v15, v16);
    *(_QWORD *)v14 = v21;
    *(_QWORD *)(v14 + 8) = v16;
    v22 = v15[2];
    v23 = v15[3];
    sub_10001BBBC(v22, v23);
    *(_QWORD *)(v14 + 16) = v22;
    *(_QWORD *)(v14 + 24) = v23;
    v24 = v15 + 4;
    v25 = v15[5];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(v14 + 32) = *v24;
      goto LABEL_17;
    }
    v34 = *(_QWORD *)v24;
LABEL_12:
    sub_10001BBBC(v34, v25);
    *(_QWORD *)(v14 + 32) = v34;
    *(_QWORD *)(v14 + 40) = v25;
    goto LABEL_17;
  }
  v17 = *(_OWORD *)v15;
  v18 = *((_OWORD *)v15 + 2);
  *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
  *(_OWORD *)(v14 + 32) = v18;
  *(_OWORD *)v14 = v17;
LABEL_17:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t *sub_1007518D8(uint64_t *a1)
{
  destroy for KeyGenerationBeaconInfo.Keys(a1);
  return a1;
}

uint64_t sub_100751904(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_OWORD *)(a1 + v13);
  v16 = (_OWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  return a1;
}

uint64_t sub_1007519CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = a3[6];
  v14 = (uint64_t *)(a1 + v13);
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
    goto LABEL_4;
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_1007518D8(v14);
LABEL_4:
    v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v18;
    *((_OWORD *)v14 + 2) = *(_OWORD *)(v15 + 32);
    goto LABEL_10;
  }
  v19 = *v14;
  *v14 = *(_QWORD *)v15;
  v14[1] = v17;
  sub_10001BC14(v19, v16);
  v20 = v14[2];
  v21 = v14[3];
  *((_OWORD *)v14 + 1) = *(_OWORD *)(v15 + 16);
  sub_10001BC14(v20, v21);
  v22 = (uint64_t *)(v15 + 32);
  v23 = v14[5];
  if (v23 >> 60 != 15)
  {
    v24 = *(_QWORD *)(v15 + 40);
    if (v24 >> 60 != 15)
    {
      v25 = v14[4];
      v14[4] = *v22;
      v14[5] = v24;
      sub_10001BC14(v25, v23);
      goto LABEL_10;
    }
    sub_1001FD268((uint64_t)(v14 + 4));
  }
  *((_OWORD *)v14 + 2) = *(_OWORD *)v22;
LABEL_10:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100751B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100751B44);
}

uint64_t sub_100751B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for BeaconIdentifier(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 3)
    return v14 - 2;
  else
    return 0;
}

uint64_t sub_100751BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100751BF4);
}

uint64_t sub_100751BF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for BeaconIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for KeyGenerationBeaconInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_101106C98;
  if (!qword_101106C98)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyGenerationBeaconInfo);
  return result;
}

uint64_t sub_100751CD4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  result = type metadata accessor for BeaconIdentifier(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "0";
      v5[3] = &unk_100E4E840;
      swift_initStructMetadata(a1, 256, 4, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for KeyGenerationBeaconInfo.Keys(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  sub_10001BC14(*a1, a1[1]);
  result = sub_10001BC14(a1[2], a1[3]);
  v3 = a1[5];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[4], v3);
  return result;
}

uint64_t initializeWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, v9);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t *assignWithCopy for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2 + 4;
  v13 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_10001BBBC(*v12, v13);
      v16 = a1[4];
      v17 = a1[5];
      a1[4] = v15;
      a1[5] = v13;
      sub_10001BC14(v16, v17);
      return a1;
    }
    sub_1001FD268((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v12;
    return a1;
  }
  v14 = *v12;
  sub_10001BBBC(*v12, v13);
  a1[4] = v14;
  a1[5] = v13;
  return a1;
}

uint64_t *assignWithTake for KeyGenerationBeaconInfo.Keys(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = (uint64_t *)(a2 + 32);
  v9 = a1[5];
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 40);
    if (v10 >> 60 != 15)
    {
      v11 = a1[4];
      a1[4] = *v8;
      a1[5] = v10;
      sub_10001BC14(v11, v9);
      return a1;
    }
    sub_1001FD268((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v8;
  return a1;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys;
}

uint64_t sub_100751FD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  char v24;
  _OWORD v25[3];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101106D00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100752B28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyGenerationBeaconInfo.CodingKeys, &type metadata for KeyGenerationBeaconInfo.CodingKeys, v11, v9, v10);
  LOBYTE(v25[0]) = 0;
  v12 = type metadata accessor for BeaconIdentifier(0);
  v13 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v25, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
    v15 = v3 + v14[5];
    LOBYTE(v25[0]) = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v25, v5, v16, v17);
    v18 = (_OWORD *)(v3 + v14[6]);
    v19 = v18[1];
    v25[0] = *v18;
    v25[1] = v19;
    v25[2] = v18[2];
    v24 = 2;
    v20 = sub_100752C38();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v24, v5, &type metadata for KeyGenerationBeaconInfo.Keys, v20);
    LOBYTE(v25[0]) = *(_BYTE *)(v3 + v14[7]);
    v24 = 3;
    v21 = sub_100752C7C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for KeyGenerationBeaconInfo.BeaconType, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1007521F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _OWORD v39[3];
  char v40;

  v31 = a2;
  v3 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v34);
  v35 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_10001A9A8(&qword_101106CD8);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v13);
  v15 = sub_100752B28();
  v37 = v9;
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyGenerationBeaconInfo.CodingKeys, &type metadata for KeyGenerationBeaconInfo.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v38 = v7;
  v17 = (uint64_t)v12;
  v30 = a1;
  v18 = v32;
  v19 = v33;
  LOBYTE(v39[0]) = 0;
  v20 = sub_100006204(&qword_101106CE8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45D1C);
  v21 = v35;
  v22 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v35, v34, v39, v36, v34, v20);
  sub_100752B6C((uint64_t)v21, v17);
  LOBYTE(v39[0]) = 1;
  v23 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v5, v19, v39, v22, v19, v23);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32))(v17 + v10[5], v5, v19);
  v40 = 2;
  v24 = sub_100752BB0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for KeyGenerationBeaconInfo.Keys, &v40, v22, &type metadata for KeyGenerationBeaconInfo.Keys, v24);
  v25 = (_OWORD *)(v17 + v10[6]);
  v26 = v39[1];
  *v25 = v39[0];
  v25[1] = v26;
  v25[2] = v39[2];
  v40 = 3;
  v27 = sub_100752BF4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, &type metadata for KeyGenerationBeaconInfo.BeaconType, &v40, v36, &type metadata for KeyGenerationBeaconInfo.BeaconType, v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v36);
  *(_BYTE *)(v17 + v10[7]) = v39[0];
  sub_10072F9A8(v17, v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_1000126B0(v17, type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_1007525E0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  __int128 v17;
  _BYTE v18[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101106D28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100753298();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys, v11, v9, v10);
  v17 = *v3;
  v16 = 0;
  v12 = sub_100068134();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for PrivateKey, v12);
  if (!v2)
  {
    v17 = v3[1];
    v16 = 1;
    v13 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for SharedSecretKey, v13);
    sub_1007532DC((uint64_t)(v3 + 2), (uint64_t)v18);
    sub_1007532DC((uint64_t)v18, (uint64_t)&v17);
    v16 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v17, &v16, v5, &type metadata for SharedSecretKey, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100752774()
{
  unsigned __int8 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1007527B8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1007527E0()
{
  unsigned __int8 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100752820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1007536C8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10075287C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1007536C8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1007528C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1007528FC + 4 * byte_100E4E7F0[*v0]))(0xD000000000000010, 0x8000000100EC28D0);
}

uint64_t sub_1007528FC()
{
  return 0x6574614472696170;
}

uint64_t sub_100752914()
{
  return 1937335659;
}

uint64_t sub_100752924()
{
  return 1701869940;
}

uint64_t sub_100752934@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100752CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100752958(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100752B28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100752980(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100752B28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007529A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1007521F0(a1, a2);
}

uint64_t sub_1007529BC(_QWORD *a1)
{
  return sub_100751FD4(a1);
}

uint64_t sub_1007529D0()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6553646572616873;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 0x4B65746176697270;
}

uint64_t sub_100752A3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100752E54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100752A60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100753298();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100752A88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100753298();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100752AB0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100752FC8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100752AF0(_QWORD *a1)
{
  return sub_1007525E0(a1);
}

unint64_t sub_100752B28()
{
  unint64_t result;

  result = qword_101106CE0;
  if (!qword_101106CE0)
  {
    result = swift_getWitnessTable(byte_100E4EBC8, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106CE0);
  }
  return result;
}

uint64_t sub_100752B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100752BB0()
{
  unint64_t result;

  result = qword_101106CF0;
  if (!qword_101106CF0)
  {
    result = swift_getWitnessTable(byte_100E4E888, &type metadata for KeyGenerationBeaconInfo.Keys);
    atomic_store(result, (unint64_t *)&qword_101106CF0);
  }
  return result;
}

unint64_t sub_100752BF4()
{
  unint64_t result;

  result = qword_101106CF8;
  if (!qword_101106CF8)
  {
    result = swift_getWitnessTable(aI_32, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_101106CF8);
  }
  return result;
}

unint64_t sub_100752C38()
{
  unint64_t result;

  result = qword_101106D08;
  if (!qword_101106D08)
  {
    result = swift_getWitnessTable(byte_100E4E860, &type metadata for KeyGenerationBeaconInfo.Keys);
    atomic_store(result, (unint64_t *)&qword_101106D08);
  }
  return result;
}

unint64_t sub_100752C7C()
{
  unint64_t result;

  result = qword_101106D10;
  if (!qword_101106D10)
  {
    result = swift_getWitnessTable(byte_100E4EB78, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_101106D10);
  }
  return result;
}

uint64_t sub_100752CC0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6574614472696170 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574614472696170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1937335659 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1937335659, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100752E54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    v5 = 0xEA00000000007965;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    v7 = 0xEC00000074657263;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EC38F0)
  {
    swift_bridgeObjectRelease(0x8000000100EC38F0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC38F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100752FC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;

  v5 = sub_10001A9A8(&qword_101106D18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100753298();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v30 = 0;
  v12 = sub_10007CB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for PrivateKey, &v30, v5, &type metadata for PrivateKey, v12);
  v14 = v28;
  v13 = v29;
  v30 = 1;
  sub_10001BBBC(v28, v29);
  v27 = sub_1001EC3A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for SharedSecretKey, &v30, v5, &type metadata for SharedSecretKey, v27);
  v25 = v14;
  v26 = v13;
  v30 = 2;
  v15 = v28;
  v16 = v29;
  sub_10001BBBC(v28, v29);
  v17 = v27;
  v27 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for SharedSecretKey, &v30, v5, &type metadata for SharedSecretKey, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v29;
  v27 = v28;
  v19 = v25;
  v20 = v26;
  sub_10001BBBC(v25, v26);
  v21 = v16;
  sub_10001BBBC(v15, v16);
  v22 = v27;
  sub_10005CB9C(v27, v18);
  sub_10001BC14(v15, v21);
  sub_10001BC14(v19, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v19, v20);
  sub_10001BC14(v15, v21);
  result = sub_1000FC25C(v22, v18);
  *a2 = v19;
  a2[1] = v20;
  a2[2] = v15;
  a2[3] = v21;
  a2[4] = v22;
  a2[5] = v18;
  return result;
}

unint64_t sub_100753298()
{
  unint64_t result;

  result = qword_101106D20;
  if (!qword_101106D20)
  {
    result = swift_getWitnessTable(aI_33, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D20);
  }
  return result;
}

uint64_t sub_1007532DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ECB38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.Keys.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationBeaconInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100753384 + 4 * byte_100E4E7F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1007533B8 + 4 * byte_100E4E7F4[v4]))();
}

uint64_t sub_1007533B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007533C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007533C8);
  return result;
}

uint64_t sub_1007533D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007533DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1007533E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007533E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.CodingKeys()
{
  return &type metadata for KeyGenerationBeaconInfo.CodingKeys;
}

uint64_t _s12searchpartyd23KeyGenerationBeaconInfoV10BeaconTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100753450 + 4 * byte_100E4E803[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100753484 + 4 * byte_100E4E7FE[v4]))();
}

uint64_t sub_100753484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10075348C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100753494);
  return result;
}

uint64_t sub_1007534A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007534A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1007534AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007534B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationBeaconInfo.BeaconType()
{
  return &type metadata for KeyGenerationBeaconInfo.BeaconType;
}

unint64_t sub_1007534D4()
{
  unint64_t result;

  result = qword_101106D30;
  if (!qword_101106D30)
  {
    result = swift_getWitnessTable(byte_100E4E990, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_101106D30);
  }
  return result;
}

unint64_t sub_10075351C()
{
  unint64_t result;

  result = qword_101106D38;
  if (!qword_101106D38)
  {
    result = swift_getWitnessTable(byte_100E4EA48, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D38);
  }
  return result;
}

unint64_t sub_100753564()
{
  unint64_t result;

  result = qword_101106D40;
  if (!qword_101106D40)
  {
    result = swift_getWitnessTable(aA_40, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D40);
  }
  return result;
}

unint64_t sub_1007535AC()
{
  unint64_t result;

  result = qword_101106D48;
  if (!qword_101106D48)
  {
    result = swift_getWitnessTable(byte_100E4EA70, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D48);
  }
  return result;
}

unint64_t sub_1007535F4()
{
  unint64_t result;

  result = qword_101106D50;
  if (!qword_101106D50)
  {
    result = swift_getWitnessTable(byte_100E4EA98, &type metadata for KeyGenerationBeaconInfo.Keys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D50);
  }
  return result;
}

unint64_t sub_10075363C()
{
  unint64_t result;

  result = qword_101106D58;
  if (!qword_101106D58)
  {
    result = swift_getWitnessTable(byte_100E4E9B8, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D58);
  }
  return result;
}

unint64_t sub_100753684()
{
  unint64_t result;

  result = qword_101106D60;
  if (!qword_101106D60)
  {
    result = swift_getWitnessTable(byte_100E4E9E0, &type metadata for KeyGenerationBeaconInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101106D60);
  }
  return result;
}

unint64_t sub_1007536C8()
{
  unint64_t result;

  result = qword_101106D68;
  if (!qword_101106D68)
  {
    result = swift_getWitnessTable(byte_100E4E918, &type metadata for KeyGenerationBeaconInfo.BeaconType);
    atomic_store(result, (unint64_t *)&qword_101106D68);
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyStore()
{
  return &type metadata for BeaconKeyStore;
}

uint64_t sub_10075371C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v3 = type metadata accessor for Table(0);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = v3;
  v4 = __chkstk_darwin(v3);
  v59 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v55 = (char *)&v53 - v6;
  v7 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v61 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v56 = (char *)&v53 - v11;
  v12 = sub_10001A9A8(&qword_1010EF3A8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v64 = (char *)&v53 - v16;
  v17 = type metadata accessor for Row(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v58 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v54 = (char *)&v53 - v22;
  v23 = __chkstk_darwin(v21);
  v53 = (char *)&v53 - v24;
  v25 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v23);
  v67 = _swiftEmptyArrayStorage;
  sub_10009AAF4(0, v25 & ~(v25 >> 63), 0);
  v26 = swift_retain();
  v65 = dispatch thunk of _AnySequenceBox._makeIterator()(v26);
  result = swift_release();
  if (v25 < 0)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  v60 = a2;
  if (v25)
  {
    v57 = v10;
    do
    {
      dispatch thunk of _AnyIteratorBoxBase.next()(result);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17);
      if ((_DWORD)result == 1)
        goto LABEL_25;
      v28 = (uint64_t)v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v59, a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo, v63);
      v29 = (uint64_t)v58;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v58, v15, v17);
      v30 = v66;
      sub_100757CB8(v28, v29, (uint64_t)v10);
      if (v30)
      {
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
        return swift_release();
      }
      (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
      v31 = v67;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v67);
      v66 = 0;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AAF4(0, v31[2] + 1, 1);
        v31 = v67;
      }
      v34 = v31[2];
      v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        sub_10009AAF4(v33 > 1, v34 + 1, 1);
        v31 = v67;
      }
      v31[2] = v34 + 1;
      v35 = (uint64_t)v31
          + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
          + *(_QWORD *)(v61 + 72) * v34;
      v10 = v57;
      result = sub_10072FA80((uint64_t)v57, v35);
      --v25;
      a2 = v60;
    }
    while (v25);
  }
  dispatch thunk of _AnyIteratorBoxBase.next()(result);
  v36 = (uint64_t)v64;
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v37(v64, 1, v17) == 1)
  {
LABEL_12:
    swift_release();
    sub_100004048(v36, &qword_1010EF3A8);
    swift_release();
    return (uint64_t)v67;
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    v39 = (uint64_t)v56;
    v41 = v53;
    v40 = (uint64_t)v54;
    while (1)
    {
      v38(v41, v36, v17);
      v42 = (uint64_t)v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v55, a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo, v63);
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 16))(v40, v41, v17);
      v43 = v66;
      sub_100757CB8(v42, v40, v39);
      if (v43)
        break;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v41, v17);
      v44 = v67;
      v45 = swift_isUniquelyReferenced_nonNull_native(v67);
      v66 = 0;
      if ((v45 & 1) == 0)
      {
        sub_10009AAF4(0, v44[2] + 1, 1);
        v44 = v67;
      }
      v46 = (uint64_t)v56;
      v48 = v44[2];
      v47 = v44[3];
      if (v48 >= v47 >> 1)
      {
        sub_10009AAF4(v47 > 1, v48 + 1, 1);
        v46 = (uint64_t)v56;
        v44 = v67;
      }
      v44[2] = v48 + 1;
      v49 = (uint64_t)v44
          + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
          + *(_QWORD *)(v61 + 72) * v48;
      v39 = v46;
      v50 = sub_10072FA80(v46, v49);
      v51 = v64;
      dispatch thunk of _AnyIteratorBoxBase.next()(v50);
      v36 = (uint64_t)v51;
      v52 = v37(v51, 1, v17);
      a2 = v60;
      if (v52 == 1)
        goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v41, v17);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100753C90(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a4 + 32);
  v13 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a4, v12, &type metadata for () + 1, v13);
  if (v26)
  {
    v14 = *(_QWORD *)(v26 + 24);
    swift_retain();
    v15 = swift_release();
    v25[1] = v25;
    v16 = __chkstk_darwin(v15);
    v25[-6] = a3;
    v25[-5] = a4;
    v25[-4] = a1;
    LOBYTE(v25[-3]) = a2;
    v25[-2] = v14;
    v17 = UUID.init()(v16);
    v18 = UUID.uuidString.getter(v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    Connection.savepoint(_:block:)(v18, v20, sub_1002B1E78, &v25[-8]);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v22 = sub_10012C434();
    v23 = swift_allocError(&type metadata for DatabaseError, v22, 0, 0);
    *(_DWORD *)v24 = 2;
    *(_BYTE *)(v24 + 4) = 1;
    return swift_willThrow(v23);
  }
}

uint64_t sub_100753E54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(_QWORD *, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD v48[3];
  uint64_t v49;
  void *v50;
  uint64_t v51;

  v2 = type metadata accessor for Table(0);
  v46 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v45 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010EF3B8);
  v38 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v37 - v8;
  v42 = sub_10001A9A8(&qword_1010EF358);
  v40 = *(_QWORD *)(v42 - 8);
  v10 = __chkstk_darwin(v42);
  v39 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v47 = (char *)&v37 - v13;
  __chkstk_darwin(v12);
  v41 = (char *)&v37 - v14;
  v15 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  v43 = a1;
  v51 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v16 = sub_10001A9E8(v4, (uint64_t)qword_1011B81A0);
  v17 = type metadata accessor for UUID(0);
  QueryType.subscript.getter(v16, v2, v17, &protocol witness table for Table);
  QueryType.subscript.getter(v16, v2, v17, &protocol witness table for Table);
  == infix<A>(_:_:)(v9, v7, v17, &protocol witness table for UUID, &protocol witness table for String);
  v18 = v15;
  v19 = *(void (**)(char *, uint64_t))(v38 + 8);
  v19(v7, v4);
  v19(v9, v4);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v20 = sub_10001A9E8(v4, (uint64_t)qword_1011B8128);
  v37 = v18;
  QueryType.subscript.getter(v20, v2, v17, &protocol witness table for Table);
  v21 = v20;
  v22 = v51;
  QueryType.subscript.getter(v21, v2, v17, &protocol witness table for Table);
  v23 = v39;
  == infix<A>(_:_:)(v9, v7, v17, &protocol witness table for UUID, &protocol witness table for String);
  v19(v7, v4);
  v19(v9, v4);
  v24 = v41;
  v25 = v47;
  && infix(_:_:)(v47, v23);
  v26 = *(void (**)(char *, uint64_t))(v40 + 8);
  v27 = v42;
  v26(v23, v42);
  v26(v25, v27);
  v49 = v2;
  v50 = &protocol witness table for Table;
  v28 = sub_100018F08(v48);
  v29 = v46;
  v30 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v46 + 16);
  v30(v28, v22, v2);
  v31 = v45;
  v32 = v37;
  QueryType.join(_:on:)(v48, v24, v2, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  v49 = v2;
  v50 = &protocol witness table for Table;
  v33 = sub_100018F08(v48);
  v30(v33, (uint64_t)v31, v2);
  v34 = v44;
  sub_100756D20((uint64_t)v48, v43);
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v2);
    v26(v24, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  }
  else
  {
    v35 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    v32 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v35);
    swift_release();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v2);
    v26(v24, v27);
  }
  return v32;
}

uint64_t sub_10075428C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void (*v33)(_QWORD *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  void *v57;
  uint64_t v58;

  v2 = type metadata accessor for JoinType(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v45 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Table(0);
  v58 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v49 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF3B8);
  v42 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - v10;
  v54 = sub_10001A9A8(&qword_1010EF358);
  v44 = *(_QWORD *)(v54 - 8);
  v12 = __chkstk_darwin(v54);
  v43 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v51 = (char *)&v40 - v15;
  __chkstk_darwin(v14);
  v53 = (char *)&v40 - v16;
  v17 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  v48 = a1;
  v52 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v18 = sub_10001A9E8(v6, (uint64_t)qword_1011B81A0);
  v19 = type metadata accessor for UUID(0);
  QueryType.subscript.getter(v18, v4, v19, &protocol witness table for Table);
  QueryType.subscript.getter(v18, v4, v19, &protocol witness table for Table);
  == infix<A>(_:_:)(v11, v9, v19, &protocol witness table for UUID, &protocol witness table for String);
  v20 = v17;
  v21 = *(void (**)(char *, uint64_t))(v42 + 8);
  v21(v9, v6);
  v21(v11, v6);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v22 = sub_10001A9E8(v6, (uint64_t)qword_1011B8128);
  v41 = v20;
  QueryType.subscript.getter(v22, v4, v19, &protocol witness table for Table);
  v23 = v52;
  QueryType.subscript.getter(v22, v4, v19, &protocol witness table for Table);
  v24 = v43;
  == infix<A>(_:_:)(v11, v9, v19, &protocol witness table for UUID, &protocol witness table for String);
  v21(v9, v6);
  v21(v11, v6);
  v25 = v53;
  v26 = v51;
  && infix(_:_:)(v51, v24);
  v27 = *(void (**)(char *, uint64_t))(v44 + 8);
  v28 = v54;
  v27(v24, v54);
  v51 = (char *)v27;
  v27(v26, v28);
  v29 = v45;
  v30 = v46;
  v31 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, enum case for JoinType.leftOuter(_:), v47);
  v56 = v4;
  v57 = &protocol witness table for Table;
  v32 = sub_100018F08(v55);
  v33 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v58 + 16);
  v33(v32, v23, v4);
  v34 = v49;
  v35 = v41;
  QueryType.join(_:_:on:)(v29, v55, v25, v4, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  v56 = v4;
  v57 = &protocol witness table for Table;
  v36 = sub_100018F08(v55);
  v33(v36, (uint64_t)v34, v4);
  v37 = v50;
  sub_100756D20((uint64_t)v55, v48);
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v4);
    ((void (*)(char *, uint64_t))v51)(v53, v54);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  }
  else
  {
    v38 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    v35 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v4);
    ((void (*)(char *, uint64_t))v51)(v53, v54);
  }
  return v35;
}

uint64_t sub_100754748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 32);
  v11 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a3, v10, &type metadata for () + 1, v11);
  if (v24)
  {
    v12 = *(_QWORD *)(v24 + 24);
    swift_retain();
    v13 = swift_release();
    v23[1] = v23;
    v14 = __chkstk_darwin(v13);
    v23[-4] = a3;
    v23[-3] = a1;
    v23[-2] = v12;
    v23[-1] = a2;
    v15 = UUID.init()(v14);
    v16 = UUID.uuidString.getter(v15);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    Connection.savepoint(_:block:)(v16, v18, sub_100758D18, &v23[-6]);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v20 = sub_10012C434();
    v21 = swift_allocError(&type metadata for DatabaseError, v20, 0, 0);
    *(_DWORD *)v22 = 2;
    *(_BYTE *)(v22 + 4) = 1;
    return swift_willThrow(v21);
  }
}

uint64_t sub_1007548FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  void *v79;
  char *v80;

  v64 = a1;
  v55 = a3;
  v4 = type metadata accessor for JoinType(0);
  v62 = *(_QWORD *)(v4 - 8);
  v63 = v4;
  __chkstk_darwin(v4);
  v61 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for Table(0);
  v71 = *(_QWORD *)(v68 - 8);
  v6 = __chkstk_darwin(v68);
  v70 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v65 = (char *)&v55 - v8;
  v76 = sub_10001A9A8(&qword_1010EF3B8);
  v57 = *(_QWORD *)(v76 - 8);
  v9 = __chkstk_darwin(v76);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v55 - v12;
  v72 = sub_10001A9A8(&qword_1010EF358);
  v59 = *(_QWORD *)(v72 - 8);
  v14 = __chkstk_darwin(v72);
  v60 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v80 = (char *)&v55 - v17;
  v18 = __chkstk_darwin(v16);
  v75 = (char *)&v55 - v19;
  __chkstk_darwin(v18);
  v69 = (char *)&v55 - v20;
  v73 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  v66 = a2;
  v74 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v21 = v76;
  v22 = sub_10001A9E8(v76, (uint64_t)qword_1011B81A0);
  v23 = type metadata accessor for UUID(0);
  v24 = v68;
  QueryType.subscript.getter(v22, v68, v23, &protocol witness table for Table);
  v58 = v22;
  QueryType.subscript.getter(v22, v24, v23, &protocol witness table for Table);
  == infix<A>(_:_:)(v13, v11, v23, &protocol witness table for UUID, &protocol witness table for String);
  v25 = *(void (**)(char *, uint64_t))(v57 + 8);
  v25(v11, v21);
  v25(v13, v21);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v26 = v76;
  v27 = sub_10001A9E8(v76, (uint64_t)qword_1011B8128);
  v57 = v27;
  v28 = v68;
  QueryType.subscript.getter(v27, v68, v23, &protocol witness table for Table);
  QueryType.subscript.getter(v27, v28, v23, &protocol witness table for Table);
  v29 = v80;
  == infix<A>(_:_:)(v13, v11, v23, &protocol witness table for UUID, &protocol witness table for String);
  v25(v11, v26);
  v25(v13, v26);
  v30 = v69;
  v31 = v75;
  && infix(_:_:)(v75, v29);
  v56 = v25;
  v32 = *(void (**)(char *, uint64_t))(v59 + 8);
  v33 = v29;
  v34 = v72;
  v32(v33, v72);
  v32(v31, v34);
  v35 = v61;
  v36 = v62;
  v37 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v61, enum case for JoinType.leftOuter(_:), v63);
  v78 = v28;
  v79 = &protocol witness table for Table;
  v38 = sub_100018F08(v77);
  v59 = *(_QWORD *)(v71 + 16);
  ((void (*)(_QWORD *, uint64_t, uint64_t))v59)(v38, v74, v28);
  QueryType.join(_:_:on:)(v35, v77, v30, v28, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  QueryType.subscript.getter(v58, v28, v23, &protocol witness table for Table);
  v39 = v76;
  v40 = v64;
  == infix<A>(_:_:)(v13, v64, v23, &protocol witness table for UUID, &protocol witness table for String);
  v41 = v56;
  v56(v13, v39);
  QueryType.subscript.getter(v57, v28, v23, &protocol witness table for Table);
  v42 = type metadata accessor for BeaconIdentifier(0);
  v43 = v60;
  == infix<A>(_:_:)(v13, v40 + *(int *)(v42 + 20), v23, &protocol witness table for UUID, &protocol witness table for String);
  v41(v13, v39);
  v44 = v72;
  v45 = v75;
  v46 = v80;
  && infix(_:_:)(v80, v43);
  v32(v43, v44);
  v32(v46, v44);
  v47 = v65;
  v48 = v70;
  QueryType.filter(_:)(v45, v28, &protocol witness table for Table);
  v32(v45, v44);
  v49 = *(void (**)(char *, uint64_t))(v71 + 8);
  v49(v48, v28);
  v78 = v28;
  v79 = &protocol witness table for Table;
  v50 = sub_100018F08(v77);
  ((void (*)(_QWORD *, char *, uint64_t))v59)(v50, v47, v28);
  v51 = v67;
  sub_100756D20((uint64_t)v77, v66);
  if (v51)
  {
    v49(v47, v28);
    v32(v69, v44);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
  }
  else
  {
    v53 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v77);
    dispatch thunk of _AnySequenceBox._makeIterator()(v53);
    v54 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v54);
    swift_release();
    v49(v47, v28);
    return ((uint64_t (*)(char *, uint64_t))v32)(v69, v44);
  }
}

size_t sub_100754F94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void (*v35)(char *, uint64_t);
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  uint64_t v60;
  void *v61;
  uint64_t v62;

  v54 = a1;
  v3 = type metadata accessor for JoinType(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  __chkstk_darwin(v3);
  v48 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Table(0);
  v62 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v53 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v55 = (char *)&v41 - v8;
  v9 = sub_10001A9A8(&qword_1010EF3B8);
  v49 = *(char **)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v15 = sub_10001A9A8(&qword_1010EF358);
  v51 = *(_QWORD *)(v15 - 8);
  v52 = v15;
  v16 = __chkstk_darwin(v15);
  v50 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v41 - v18;
  v58 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  v56 = a2;
  v45 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v20 = sub_10001A9E8(v9, (uint64_t)qword_1011B8128);
  v21 = type metadata accessor for UUID(0);
  v43 = v20;
  QueryType.subscript.getter(v20, v5, v21, &protocol witness table for Table);
  v22 = v20;
  v23 = v45;
  QueryType.subscript.getter(v22, v5, v21, &protocol witness table for Table);
  == infix<A>(_:_:)(v14, v12, v21, &protocol witness table for UUID, &protocol witness table for String);
  v24 = (void (*)(char *, uint64_t))*((_QWORD *)v49 + 1);
  v41 = v24;
  v42 = v9;
  v24(v12, v9);
  v24(v14, v9);
  v25 = v46;
  v26 = v47;
  v27 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v48, enum case for JoinType.leftOuter(_:), v47);
  v60 = v5;
  v61 = &protocol witness table for Table;
  v28 = sub_100018F08(v59);
  v44 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v62 + 16);
  v44(v28, v23, v5);
  v29 = v53;
  v49 = v19;
  QueryType.join(_:_:on:)(v27, v59, v19, v5, &protocol witness table for Table);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
  QueryType.subscript.getter(v43, v5, v21, &protocol witness table for Table);
  v30 = v50;
  == infix<A>(_:_:)(v14, v54, v21, &protocol witness table for UUID, &protocol witness table for String);
  v41(v14, v42);
  v31 = v55;
  v32 = (size_t)v29;
  QueryType.filter(_:)(v30, v5, &protocol witness table for Table);
  v33 = v52;
  v34 = *(void (**)(char *, uint64_t))(v51 + 8);
  v34(v30, v52);
  v35 = *(void (**)(char *, uint64_t))(v62 + 8);
  v35(v29, v5);
  v60 = v5;
  v61 = &protocol witness table for Table;
  v36 = sub_100018F08(v59);
  v44(v36, (uint64_t)v31, v5);
  v37 = v57;
  sub_100756D20((uint64_t)v59, v56);
  if (v37)
  {
    v35(v31, v5);
    v34(v49, v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
  }
  else
  {
    v38 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
    v39 = dispatch thunk of _AnySequenceBox._makeIterator()(v38);
    swift_release();
    v32 = sub_10089013C(v39);
    swift_release();
    v35(v31, v5);
    v34(v49, v33);
  }
  return v32;
}

uint64_t sub_100755420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  unint64_t v97;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  void (*v137)(char *, uint64_t);
  uint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  void (*v167)(uint64_t, _QWORD *);
  unint64_t v168;
  void (*v169)(char *, unint64_t);
  uint64_t v170;
  uint64_t (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  _QWORD v174[3];
  void (*v175)(char *, unint64_t);
  _QWORD *v176;
  int64_t v177;
  __int128 v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  _QWORD *v185;
  __int128 v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, char *, uint64_t);
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t);
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t (*v209)(char *, uint64_t);
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(_QWORD, _QWORD, _QWORD);
  uint64_t v224;
  void *v225;
  uint64_t v226;

  v191 = a4;
  v220 = a3;
  v216 = a2;
  v190 = sub_10001A9A8(&qword_1010FE898);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v219 = type metadata accessor for OnConflict(0);
  v215 = *(_QWORD *)(v219 - 8);
  v6 = __chkstk_darwin(v219);
  v203 = (char *)v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v213 = (char *)v174 - v8;
  v206 = type metadata accessor for Insert(0);
  v205 = *(_QWORD *)(v206 - 8);
  v9 = __chkstk_darwin(v206);
  v187 = (char *)v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v214 = (char *)v174 - v11;
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v198 = (uint64_t)v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = (_QWORD *)type metadata accessor for Delete(0);
  *(_QWORD *)&v186 = *(v194 - 1);
  v14 = __chkstk_darwin(v194);
  v179 = (char *)v174 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v180 = (uint64_t)v174 - v17;
  __chkstk_darwin(v16);
  v181 = (char *)v174 - v18;
  v19 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v182 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v193 = (uint64_t)v174 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)v174 - v22;
  v226 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v226 - 8);
  v25 = __chkstk_darwin(v226);
  v200 = (char *)v174 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v28 = (char *)v174 - v27;
  v208 = sub_10001A9A8(&qword_1010EF358);
  v217 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208);
  v207 = (char *)v174 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Table(0);
  v210 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v202 = (char *)v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v184 = (char *)v174 - v34;
  v35 = __chkstk_darwin(v33);
  v197 = (unint64_t)v174 - v36;
  v37 = __chkstk_darwin(v35);
  v39 = (char *)v174 - v38;
  __chkstk_darwin(v37);
  v201 = (char *)v174 - v40;
  *(_QWORD *)&v178 = a1;
  v41 = a1 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconInfo;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v183 = v24;
  v204 = v19;
  v42 = sub_10001A9A8(&qword_1010EF3B8);
  v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B8128);
  v224 = v42;
  v225 = (void *)sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  v44 = sub_100018F08(&v222);
  v45 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
  v218 = v43;
  v45(v44, v43, v42);
  v211 = v41;
  SchemaType.select(_:_:)(&v222, _swiftEmptyArrayStorage, v30, &protocol witness table for Table);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v46 = sub_10001A9E8(v42, (uint64_t)qword_1011B81A0);
  v47 = v207;
  v212 = v46;
  == infix<A>(_:_:)(v46, v216, v226, &protocol witness table for UUID, &protocol witness table for String);
  v48 = v201;
  QueryType.filter(_:)(v47, v30, &protocol witness table for Table);
  v49 = *(void (**)(char *, uint64_t))(v217 + 8);
  v49(v47, v208);
  v50 = v210;
  v51 = *(void (**)(char *, uint64_t))(v210 + 8);
  v195 = (uint64_t)v39;
  v51(v39, v30);
  v224 = v30;
  v225 = &protocol witness table for Table;
  v52 = (char *)sub_100018F08(&v222);
  v53 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
  v53(v52, v48, v30);
  v54 = v221;
  v210 = Connection.prepare(_:)(&v222);
  if (v54)
  {
    v51(v48, v30);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  }
  v199 = v49;
  v192 = v53;
  v209 = (uint64_t (*)(char *, uint64_t))v51;
  v217 = v30;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
  v56 = v226;
  v57 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_100758774, 0, v226);
  v221 = 0;
  swift_release();
  v196 = sub_10001B664(v57);
  swift_bridgeObjectRelease();
  v58 = v191;
  v59 = *(_QWORD *)(v191 + 16);
  v60 = _swiftEmptyArrayStorage;
  v61 = v183;
  v210 = v59;
  if (v59)
  {
    v222 = (uint64_t)_swiftEmptyArrayStorage;
    sub_10009A578(0, v59, 0);
    v62 = v58 + ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
    v63 = *(_QWORD *)(v182 + 72);
    do
    {
      sub_10072F9A8(v62, (uint64_t)v23);
      v64 = type metadata accessor for BeaconIdentifier(0);
      (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v28, &v23[*(int *)(v64 + 20)], v56);
      sub_10072FA44((uint64_t)v23);
      v60 = (_QWORD *)v222;
      if ((swift_isUniquelyReferenced_nonNull_native(v222) & 1) == 0)
      {
        sub_10009A578(0, v60[2] + 1, 1);
        v60 = (_QWORD *)v222;
      }
      v66 = v60[2];
      v65 = v60[3];
      if (v66 >= v65 >> 1)
      {
        sub_10009A578(v65 > 1, v66 + 1, 1);
        v60 = (_QWORD *)v222;
      }
      v60[2] = v66 + 1;
      v67 = (unint64_t)v60
          + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
          + *(_QWORD *)(v61 + 72) * v66;
      v56 = v226;
      (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v67, v28, v226);
      v222 = (uint64_t)v60;
      v62 += v63;
      --v59;
    }
    while (v59);
    v58 = v191;
  }
  v68 = sub_10001B664((uint64_t)v60);
  swift_bridgeObjectRelease();
  v69 = v193;
  v70 = v218;
  v71 = v207;
  v72 = v199;
  if (*(_QWORD *)(v68 + 16) > *(_QWORD *)(v196 + 16) >> 3)
  {
    v73 = sub_10063D7D8(v68, v196);
    swift_bridgeObjectRelease();
  }
  else
  {
    v222 = v196;
    sub_10063AFB0(v68);
    swift_bridgeObjectRelease();
    v73 = (_QWORD *)v222;
  }
  v74 = v216;
  if (!v73[2])
  {
    swift_bridgeObjectRelease();
    v86 = v217;
    v87 = v69;
    if (v210)
      goto LABEL_53;
    return v209(v201, v86);
  }
  == infix<A>(_:_:)(v212, v216, v56, &protocol witness table for UUID, &protocol witness table for String);
  v75 = v217;
  QueryType.filter(_:)(v71, v217, &protocol witness table for Table);
  v76 = v208;
  v72(v71, v208);
  v185 = v73;
  v222 = (uint64_t)v73;
  v77 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
  v78 = sub_1000193A4(&qword_1010EF460, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
  Collection<>.contains(_:)(v70, v77, v78, &protocol witness table for UUID);
  v79 = v195;
  v80 = v197;
  QueryType.filter(_:)(v71, v75, &protocol witness table for Table);
  v81 = v71;
  v82 = v79;
  v72(v81, v76);
  v83 = (void (*)(uint64_t, uint64_t))v209;
  v209((char *)v80, v75);
  v84 = v181;
  QueryType.delete()(v75, &protocol witness table for Table);
  v83(v79, v75);
  v85 = v221;
  Connection.run(_:)(v84);
  if (v85)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD *))(v186 + 8))(v84, v194);
    return ((uint64_t (*)(char *, uint64_t))v83)(v201, v75);
  }
  v88 = 0;
  v89 = v185[7];
  v176 = v185 + 7;
  v90 = 1 << *((_BYTE *)v185 + 32);
  v91 = -1;
  if (v90 < 64)
    v91 = ~(-1 << v90);
  v92 = v91 & v89;
  v174[2] = v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_observedAdvertisementBeaconInfo;
  v174[1] = v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keySyncMetadata;
  v177 = (unint64_t)(v90 + 63) >> 6;
  v93 = v198;
  v94 = v200;
  v95 = v184;
  v96 = v207;
  while (1)
  {
    if (v92)
    {
      v197 = (v92 - 1) & v92;
      v97 = __clz(__rbit64(v92)) | (v88 << 6);
      goto LABEL_41;
    }
    if (__OFADD__(v88++, 1))
      break;
    if (v88 >= v177)
      goto LABEL_51;
    v99 = v176[v88];
    if (!v99)
    {
      v100 = v88 + 1;
      if (v88 + 1 >= v177)
        goto LABEL_51;
      v99 = v176[v100];
      if (!v99)
      {
        v100 = v88 + 2;
        if (v88 + 2 >= v177)
          goto LABEL_51;
        v99 = v176[v100];
        if (!v99)
        {
          v100 = v88 + 3;
          if (v88 + 3 >= v177)
          {
LABEL_51:
            v221 = 0;
            v87 = v193;
            v116 = (unint64_t)v194;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v93, 1, 1, v56);
            swift_release();
            v74 = v216;
            v58 = v191;
            v70 = v218;
LABEL_52:
            (*(void (**)(char *, unint64_t))(v186 + 8))(v181, v116);
            v86 = v217;
            if (v210)
            {
LABEL_53:
              v179 = (char *)(v178 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationBeaconKeys);
              v117 = v58
                   + ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80));
              LODWORD(v207) = enum case for OnConflict.replace(_:);
              v185 = *(_QWORD **)(v182 + 72);
              swift_bridgeObjectRetain(v58);
              v186 = xmmword_100E26E00;
              v178 = xmmword_100E27910;
              while (1)
              {
                v208 = v117;
                sub_10072F9A8(v117, v87);
                v199 = *(void (**)(char *, uint64_t))(v215 + 104);
                ((void (*)(char *, _QWORD, uint64_t))v199)(v213, v207, v219);
                v120 = sub_10001A9A8(&qword_1010EF388);
                v121 = *(_QWORD *)(type metadata accessor for Setter(0) - 8);
                v122 = *(_QWORD *)(v121 + 72);
                v123 = *(unsigned __int8 *)(v121 + 80);
                v124 = (v123 + 32) & ~v123;
                v200 = (char *)(4 * v122);
                v198 = v120;
                v194 = (_QWORD *)(v123 | 7);
                v125 = swift_allocObject(v120, v124 + 4 * v122, v123 | 7);
                *(_OWORD *)(v125 + 16) = v186;
                v197 = v124;
                <- infix<A>(_:_:)(v212, v74, v56, &protocol witness table for UUID);
                v196 = v87 + *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
                <- infix<A>(_:_:)(v70, v196, v56, &protocol witness table for UUID);
                if (qword_1010EA4F0 != -1)
                  swift_once(&qword_1010EA4F0, sub_100D295C0);
                v195 = 2 * v122;
                v126 = sub_10001A9A8(&qword_1010EF3B0);
                v127 = sub_10001A9E8(v126, (uint64_t)qword_1011B81B8);
                v128 = v204;
                v129 = v87 + *(int *)(v204 + 20);
                v130 = type metadata accessor for Date(0);
                <- infix<A>(_:_:)(v127, v129, v130, &protocol witness table for Date);
                if (qword_1010EA508 != -1)
                  swift_once(&qword_1010EA508, sub_100D29778);
                v131 = sub_10001A9A8(&qword_1010EF430);
                v132 = sub_10001A9E8(v131, (uint64_t)qword_1011B8200);
                v222 = *(unsigned __int8 *)(v87 + *(int *)(v128 + 28));
                v133 = sub_10012C5BC();
                <- infix<A>(_:_:)(v132, &v222, &type metadata for UInt64, v133);
                v134 = v87;
                v136 = v213;
                v135 = v214;
                v86 = v217;
                QueryType.insert(or:_:)(v213, v125, v217, &protocol witness table for Table);
                swift_bridgeObjectRelease();
                v137 = *(void (**)(char *, uint64_t))(v215 + 8);
                v137(v136, v219);
                v138 = v221;
                Connection.run(_:)(v135);
                v221 = v138;
                if (v138)
                {
                  (*(void (**)(char *, uint64_t))(v205 + 8))(v214, v206);
                  sub_10072FA44(v134);
                  swift_bridgeObjectRelease();
                  return v209(v201, v86);
                }
                v139 = (uint64_t *)(v134 + *(int *)(v128 + 24));
                v140 = v139[1];
                if (v140 >> 60 == 15)
                {
                  v87 = v134;
                  v118 = *(void (**)(char *, uint64_t))(v205 + 8);
                  v119 = v206;
                  v70 = v218;
                }
                else
                {
                  v180 = 3 * v122;
                  v181 = (char *)v137;
                  v141 = *v139;
                  v142 = v140;
                  v144 = v139[2];
                  v143 = v139[3];
                  v146 = (char *)v139[4];
                  v145 = v139[5];
                  v192(v202, v179, v86);
                  ((void (*)(char *, _QWORD, uint64_t))v199)(v203, v207, v219);
                  v147 = swift_allocObject(v198, v197 + 5 * v122, v194);
                  *(_OWORD *)(v147 + 16) = v178;
                  v182 = v147;
                  v197 = v141;
                  v194 = (_QWORD *)v142;
                  sub_10001BBBC(v141, v142);
                  v198 = v144;
                  v199 = (void (*)(char *, uint64_t))v143;
                  sub_10001BBBC(v144, v143);
                  v184 = v146;
                  v183 = v145;
                  sub_10005CB9C(v146, v145);
                  v148 = v226;
                  <- infix<A>(_:_:)(v212, v216, v226, &protocol witness table for UUID);
                  <- infix<A>(_:_:)(v218, v196, v148, &protocol witness table for UUID);
                  if (qword_1010EA4F8 != -1)
                    swift_once(&qword_1010EA4F8, sub_100D29650);
                  v149 = sub_10001A9A8(&qword_1010EF408);
                  v150 = sub_10001A9E8(v149, (uint64_t)qword_1011B81D0);
                  v222 = v197;
                  v223 = (void (*)(_QWORD, _QWORD, _QWORD))v194;
                  <- infix<A>(_:_:)(v150, &v222, &type metadata for Data, &protocol witness table for Data);
                  v151 = v181;
                  if (qword_1010EA4D8 != -1)
                    swift_once(&qword_1010EA4D8, sub_100D29400);
                  v152 = sub_10001A9E8(v149, (uint64_t)qword_1011B8170);
                  v222 = v198;
                  v223 = (void (*)(_QWORD, _QWORD, _QWORD))v199;
                  <- infix<A>(_:_:)(v152, &v222, &type metadata for Data, &protocol witness table for Data);
                  v153 = v183;
                  if (qword_1010EA500 != -1)
                    swift_once(&qword_1010EA500, sub_100D296E4);
                  v154 = v190;
                  v155 = sub_10001A9E8(v190, (uint64_t)qword_1011B81E8);
                  v156 = v189;
                  v157 = v188;
                  (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v188, v155, v154);
                  v158 = (uint64_t)v184;
                  if (v153 >> 60 == 15)
                    v159 = 0;
                  else
                    v159 = v184;
                  if (v153 >> 60 == 15)
                    v160 = 0xF000000000000000;
                  else
                    v160 = v153;
                  v222 = (uint64_t)v159;
                  v223 = (void (*)(_QWORD, _QWORD, _QWORD))v160;
                  <- infix<A>(_:_:)(v157, &v222, &type metadata for Data, &protocol witness table for Data);
                  (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v154);
                  v161 = v187;
                  v162 = v203;
                  v86 = v217;
                  v163 = v202;
                  QueryType.insert(or:_:)(v203, v182, v217, &protocol witness table for Table);
                  swift_bridgeObjectRelease();
                  ((void (*)(char *, uint64_t))v151)(v162, v219);
                  v209(v163, v86);
                  v164 = v221;
                  Connection.run(_:)(v161);
                  if (v164)
                  {
                    sub_100758808(v197, (unint64_t)v194, v198, (uint64_t)v199, v158, v153, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
                    v165 = *(void (**)(char *, uint64_t))(v205 + 8);
                    v166 = v206;
                    v165(v161, v206);
                    v165(v214, v166);
                    sub_10072FA44(v193);
                    swift_bridgeObjectRelease();
                    return v209(v201, v86);
                  }
                  v221 = 0;
                  sub_100758808(v197, (unint64_t)v194, v198, (uint64_t)v199, v158, v153, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
                  v118 = *(void (**)(char *, uint64_t))(v205 + 8);
                  v119 = v206;
                  v118(v161, v206);
                  v70 = v218;
                  v87 = v193;
                }
                v118(v214, v119);
                sub_10072FA44(v87);
                v117 = (uint64_t)v185 + v208;
                --v210;
                v74 = v216;
                v56 = v226;
                if (!v210)
                {
                  swift_bridgeObjectRelease();
                  return v209(v201, v86);
                }
              }
            }
            return v209(v201, v86);
          }
          v99 = v176[v100];
          if (!v99)
          {
            while (1)
            {
              v88 = v100 + 1;
              if (__OFADD__(v100, 1))
                goto LABEL_83;
              if (v88 >= v177)
                goto LABEL_51;
              v99 = v176[v88];
              ++v100;
              if (v99)
                goto LABEL_40;
            }
          }
        }
      }
      v88 = v100;
    }
LABEL_40:
    v197 = (v99 - 1) & v99;
    v97 = __clz(__rbit64(v99)) + (v88 << 6);
LABEL_41:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 16))(v93, v185[6] + *(_QWORD *)(v61 + 72) * v97, v56);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v93, 0, 1, v56);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v93, 1, v56) == 1)
    {
      v221 = 0;
      swift_release();
      v74 = v216;
      v87 = v193;
      v58 = v191;
      v70 = v218;
      v116 = (unint64_t)v194;
      goto LABEL_52;
    }
    v196 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v94, v93, v56);
    == infix<A>(_:_:)(v218, v94, v56, &protocol witness table for UUID, &protocol witness table for String);
    v101 = v217;
    QueryType.filter(_:)(v96, v217, &protocol witness table for Table);
    v199(v96, v208);
    QueryType.limit(_:)(1, 0, v101, &protocol witness table for Table);
    v209((char *)v82, v101);
    v224 = v101;
    v225 = &protocol witness table for Table;
    v102 = (char *)sub_100018F08(&v222);
    v192(v102, v95, v101);
    Connection.prepare(_:)(&v222);
    v103 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
    v104 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v103);
    swift_release();
    if (*(_QWORD *)(v104 + 16))
    {
      swift_release();
      v94 = v200;
      v209(v95, v217);
    }
    else
    {
      == infix<A>(_:_:)(v218, v200, v56, &protocol witness table for UUID, &protocol witness table for String);
      v221 = 0;
      v105 = v82;
      v106 = v217;
      QueryType.filter(_:)(v96, v217, &protocol witness table for Table);
      v107 = v208;
      v199(v96, v208);
      v108 = v180;
      QueryType.delete()(v106, &protocol witness table for Table);
      v109 = (void (*)(char *, uint64_t))v209;
      v209((char *)v105, v106);
      v110 = v221;
      Connection.run(_:)(v108);
      v221 = v110;
      if (v110)
      {
        swift_release();
        v167 = *(void (**)(uint64_t, _QWORD *))(v186 + 8);
        v168 = (unint64_t)v194;
        v167(v108, v194);
        v109(v184, v106);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v200, v226);
        swift_release();
        v167((uint64_t)v181, (_QWORD *)v168);
        return ((uint64_t (*)(char *, uint64_t))v109)(v201, v106);
      }
      v111 = v108;
      v112 = (unint64_t)v194;
      v175 = *(void (**)(char *, unint64_t))(v186 + 8);
      v175((char *)v111, (unint64_t)v194);
      swift_release();
      v94 = v200;
      == infix<A>(_:_:)(v218, v200, v226, &protocol witness table for UUID, &protocol witness table for String);
      QueryType.filter(_:)(v96, v106, &protocol witness table for Table);
      v199(v96, v107);
      v113 = (void (*)(uint64_t, uint64_t))v109;
      v114 = v179;
      QueryType.delete()(v106, &protocol witness table for Table);
      v113(v105, v106);
      v115 = v221;
      Connection.run(_:)(v114);
      if (v115)
      {
        v169 = v175;
        v175(v114, v112);
        v170 = v217;
        v171 = v209;
        v209(v184, v217);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v94, v226);
        swift_release();
        v169(v181, v112);
        return v171(v201, v170);
      }
      v175(v114, v112);
      v56 = v226;
      v95 = v184;
      v96 = v207;
      v82 = v195;
      v209(v184, v217);
    }
    (*(void (**)(char *, uint64_t))(v61 + 8))(v94, v56);
    v93 = v198;
    v88 = v196;
    v92 = v197;
  }
  __break(1u);
LABEL_83:
  __break(1u);
  v222 = 0;
  v172 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v173 = swift_dynamicCast(v172, &v222, v172, &type metadata for Never, 7);
  result = swift_willThrowTypedImpl(v173, &type metadata for Never, &protocol witness table for Never);
  __break(1u);
  return result;
}

uint64_t sub_100756D20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v5, (char *)&type metadata for () + 8, v6);
  if (v16)
  {
    swift_retain();
    swift_release();
    v7 = Connection.prepare(_:)(a1);
    if (v2)
    {
      return swift_release();
    }
    else
    {
      v12 = v7;
      swift_retain();
      v13 = swift_retain();
      v14 = sub_10075371C(v13, a2);
      swift_release();
      swift_release_n(v12, 2);
      v15 = sub_10001A9A8(&qword_101106D88);
      result = swift_allocObject(v15, 24, 7);
      *(_QWORD *)(result + 16) = v14;
    }
  }
  else
  {
    v9 = sub_10012C434();
    v10 = swift_allocError(&type metadata for DatabaseError, v9, 0, 0);
    *(_DWORD *)v11 = 2;
    *(_BYTE *)(v11 + 4) = 1;
    return swift_willThrow(v10);
  }
  return result;
}

uint64_t sub_100756E70(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  void (*v45)(char *, _QWORD, uint64_t);
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD v62[3];
  uint64_t v63;

  v6 = v5;
  v57 = a5;
  v56 = a4;
  v10 = type metadata accessor for OnConflict(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Insert(0);
  v53 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  result = __chkstk_darwin(v14);
  v55 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v18 = *(int *)(type metadata accessor for BeaconIdentifier(0) + 20);
    v52 = a3;
    v48 = a3 + v18;
    v47 = a2 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
    v46 = enum case for OnConflict.replace(_:);
    v45 = *(void (**)(char *, _QWORD, uint64_t))(v11 + 104);
    swift_bridgeObjectRetain(a1);
    v43[1] = a1;
    v19 = (unint64_t *)(a1 + 48);
    v44 = xmmword_100E27910;
    v50 = v11;
    v51 = v10;
    v49 = v13;
    while (1)
    {
      v63 = v6;
      v20 = *(v19 - 2);
      v58 = v17;
      v59 = v20;
      v21 = *(v19 - 1);
      v22 = *v19;
      v45(v13, v46, v10);
      v23 = sub_10001A9A8(&qword_1010EF388);
      v24 = type metadata accessor for Setter(0);
      v25 = swift_allocObject(v23, ((*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80))+ 5 * *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v24 - 8) + 80) | 7);
      *(_OWORD *)(v25 + 16) = v44;
      v60 = v21;
      v61 = v22;
      sub_10001BBBC(v21, v22);
      if (qword_1010EA4E8 != -1)
        swift_once(&qword_1010EA4E8, sub_100D29524);
      v26 = sub_10001A9A8(&qword_1010EF3B8);
      v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B81A0);
      v28 = type metadata accessor for UUID(0);
      <- infix<A>(_:_:)(v27, v52, v28, &protocol witness table for UUID);
      if (qword_1010EA4C0 != -1)
        swift_once(&qword_1010EA4C0, sub_100D29250);
      v29 = sub_10001A9E8(v26, (uint64_t)qword_1011B8128);
      <- infix<A>(_:_:)(v29, v48, v28, &protocol witness table for UUID);
      if (qword_1010EA4D0 != -1)
        swift_once(&qword_1010EA4D0, sub_100D29370);
      v30 = sub_10001A9A8(&qword_1010EF3E8);
      v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B8158);
      LOBYTE(v62[0]) = v56;
      v32 = sub_10012C49C();
      <- infix<A>(_:_:)(v31, v62, &type metadata for UInt8, v32);
      v13 = v49;
      v33 = v61;
      if (qword_1010EA4C8 != -1)
        swift_once(&qword_1010EA4C8, sub_100D292E4);
      v34 = sub_10001A9A8(&qword_1010EF430);
      v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B8140);
      v62[0] = v59;
      v36 = sub_10012C5BC();
      <- infix<A>(_:_:)(v35, v62, &type metadata for UInt64, v36);
      if (qword_1010EA4D8 != -1)
        swift_once(&qword_1010EA4D8, sub_100D29400);
      v37 = sub_10001A9A8(&qword_1010EF408);
      v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B8170);
      v39 = v60;
      v62[0] = v60;
      v62[1] = v33;
      <- infix<A>(_:_:)(v38, v62, &type metadata for Data, &protocol witness table for Data);
      v40 = type metadata accessor for Table(0);
      v41 = v55;
      QueryType.insert(or:_:)(v13, v25, v40, &protocol witness table for Table);
      swift_bridgeObjectRelease();
      v10 = v51;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v13, v51);
      v42 = v63;
      Connection.run(_:)(v41);
      v6 = v42;
      if (v42)
        break;
      v19 += 3;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
      sub_10001BC14(v39, v33);
      v17 = v58 - 1;
      if (v58 == 1)
        return swift_bridgeObjectRelease();
    }
    sub_10001BC14(v39, v33);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100757308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v59;

  v5 = sub_10001A9A8(&qword_1010EF3A8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v52 = (char *)v49 - v9;
  v10 = type metadata accessor for Row(0);
  v56 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v51 = (char *)v49 - v15;
  __chkstk_darwin(v14);
  v53 = (char *)v49 - v16;
  v17 = *(_QWORD *)(a2 + 32);
  v18 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, a2, v17, &type metadata for () + 1, v18);
  if (v57)
  {
    v19 = *(_QWORD *)(v57 + 16);
    swift_retain();
    swift_release();
    v20 = Connection.prepare(_:)(a1);
    if (v2)
    {
      return swift_release();
    }
    else
    {
      v25 = v20;
      v49[1] = 0;
      v49[2] = v19;
      v55 = v10;
      v26 = swift_retain();
      v27 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v26);
      v59 = _swiftEmptyArrayStorage;
      sub_10009ACF0(0, v27 & ~(v27 >> 63), 0);
      v28 = swift_retain();
      v54 = dispatch thunk of _AnySequenceBox._makeIterator()(v28);
      v50 = v25;
      v29 = swift_release();
      if (v27 < 0)
      {
        __break(1u);
        JUMPOUT(0x100757B84);
      }
      v30 = v56;
      if (v27)
      {
        dispatch thunk of _AnyIteratorBoxBase.next()(v29);
        v31 = v55;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v55) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v13, v8, v31);
          if (qword_1010EA4C8 != -1)
            swift_once(&qword_1010EA4C8, sub_100D292E4);
          v32 = sub_10001A9A8(&qword_1010EF430);
          v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B8140);
          v34 = sub_10012C5BC();
          Row.subscript.getter(&v57, v33, &type metadata for UInt64, v34);
          if (qword_1010EA4D8 != -1)
            swift_once(&qword_1010EA4D8, sub_100D29400);
          v35 = sub_10001A9A8(&qword_1010EF408);
          v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B8170);
          Row.subscript.getter(&v57, v36, &type metadata for Data, &protocol witness table for Data);
          __asm { BR              X9 }
        }
        __break(1u);
        JUMPOUT(0x100757B98);
      }
      v37 = (uint64_t)v52;
      dispatch thunk of _AnyIteratorBoxBase.next()(v29);
      v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      v39 = v55;
      if (v38(v37, 1, v55) != 1)
      {
        v42 = v37;
        v43 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v53, v42, v39);
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v51, v43, v39);
        if (qword_1010EA4C8 != -1)
          swift_once(&qword_1010EA4C8, sub_100D292E4);
        v44 = sub_10001A9A8(&qword_1010EF430);
        v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B8140);
        v46 = sub_10012C5BC();
        Row.subscript.getter(&v57, v45, &type metadata for UInt64, v46);
        if (qword_1010EA4D8 != -1)
          swift_once(&qword_1010EA4D8, sub_100D29400);
        v47 = sub_10001A9A8(&qword_1010EF408);
        v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B8170);
        Row.subscript.getter(&v57, v48, &type metadata for Data, &protocol witness table for Data);
        __asm { BR              X9 }
      }
      swift_release();
      sub_100004048(v37, &qword_1010EF3A8);
      swift_release();
      swift_release_n(v50, 2);
      v40 = v59;
      v41 = sub_10001A9A8(&qword_101106D90);
      result = swift_allocObject(v41, 24, 7);
      *(_QWORD *)(result + 16) = v40;
    }
  }
  else
  {
    v22 = sub_10012C434();
    v23 = swift_allocError(&type metadata for DatabaseError, v22, 0, 0);
    *(_DWORD *)v24 = 2;
    *(_BYTE *)(v24 + 4) = 1;
    return swift_willThrow(v23);
  }
  return result;
}

uint64_t sub_100757BB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  sub_100754748(a1, a2, *v2);
  return sub_100758CF8(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100757C08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_10075428C(*v0);
  return sub_100758D04(*(uint64_t (**)(uint64_t))(v1 + 8), v1, v2);
}

uint64_t sub_100757C5C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  sub_1007548FC(a2, *v2, a1);
  return sub_100758CF8(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_100757CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(_QWORD, _QWORD, _QWORD);
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD *, uint64_t);
  uint64_t result;
  char v61;
  void (*v62)(_QWORD *, uint64_t);
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  void (*v72)(char *, uint64_t);
  char *v73;
  uint64_t Error;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  void (*v76)(_QWORD, _QWORD, _QWORD);
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;

  v69 = a3;
  Error = type metadata accessor for QueryError(0);
  v79 = *(_QWORD *)(Error - 8);
  __chkstk_darwin(Error);
  v70 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Row(0);
  v77 = *(_QWORD *)(v91 - 8);
  v6 = __chkstk_darwin(v91);
  v78 = (unint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v68 - v8;
  v10 = sub_10001A9A8(&qword_1010EF3B8);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v73 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v68 - v14;
  v16 = sub_10001A9A8(&qword_1010ED860);
  v17 = __chkstk_darwin(v16);
  v81 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v68 - v19;
  v21 = type metadata accessor for UUID(0);
  v85 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v82 = (uint64_t *)((char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  v83 = (uint64_t *)((char *)&v68 - v24);
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v25 = sub_10001A9E8(v10, (uint64_t)qword_1011B81A0);
  v80 = type metadata accessor for Table(0);
  v84 = a1;
  QueryType.subscript.getter(v25, v80, v21, &protocol witness table for Table);
  v86 = a2;
  v26 = v76;
  Row.get<A>(_:)(v15, v21, &protocol witness table for UUID);
  if (v26)
  {
    swift_errorRelease(v26);
    v72 = *(void (**)(char *, uint64_t))(v11 + 8);
    v72(v15, v10);
    v27 = v85;
    v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
    v71(v20, 1, 1, v21);
  }
  else
  {
    v72 = *(void (**)(char *, uint64_t))(v11 + 8);
    v72(v15, v10);
    v27 = v85;
    v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56);
    v71(v20, 0, 1, v21);
  }
  v28 = v91;
  v29 = v77;
  v76 = *(void (**)(_QWORD, _QWORD, _QWORD))(v77 + 16);
  v76(v9, v86, v91);
  v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v75(v20, 1, v21) == 1)
  {
    Row.subscript.getter(v83, v25, v21, &protocol witness table for UUID);
    v30 = *(void (**)(char *, uint64_t))(v29 + 8);
    v30(v9, v28);
    sub_100004048((uint64_t)v20, &qword_1010ED860);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t))(v29 + 8);
    v30(v9, v28);
    (*(void (**)(_QWORD *, char *, uint64_t))(v27 + 32))(v83, v20, v21);
  }
  v31 = v73;
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v32 = sub_10001A9E8(v10, (uint64_t)qword_1011B8128);
  QueryType.subscript.getter(v32, v80, v21, &protocol witness table for Table);
  Row.get<A>(_:)(v31, v21, &protocol witness table for UUID);
  v33 = v71;
  v72(v31, v10);
  v34 = (uint64_t)v81;
  v33(v81, 0, 1, v21);
  v35 = v78;
  v36 = v91;
  v76(v78, v86, v91);
  if (v75((char *)v34, 1, v21) == 1)
  {
    Row.subscript.getter(v82, v32, v21, &protocol witness table for UUID);
    v30((char *)v35, v91);
    sub_100004048(v34, &qword_1010ED860);
  }
  else
  {
    v30((char *)v35, v36);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v85 + 32))(v82, v34, v21);
  }
  v81 = (char *)v30;
  if (qword_1010EA4F8 != -1)
    swift_once(&qword_1010EA4F8, sub_100D29650);
  v37 = sub_10001A9A8(&qword_1010EF408);
  v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B81D0);
  Row.get<A>(_:)(v38, &type metadata for Data, &protocol witness table for Data);
  v39 = sub_1002FB3AC(v89, v90);
  v76 = v40;
  if (qword_1010EA4D8 != -1)
    swift_once(&qword_1010EA4D8, sub_100D29400);
  v41 = sub_10001A9E8(v37, (uint64_t)qword_1011B8170);
  Row.get<A>(_:)(v41, &type metadata for Data, &protocol witness table for Data);
  sub_1002F702C(v87, v88);
  v63 = (unint64_t)v76;
  v77 = v89;
  v78 = v90;
  if (qword_1010EA500 != -1)
    swift_once(&qword_1010EA500, sub_100D296E4);
  v64 = sub_10001A9A8(&qword_1010FE898);
  v65 = sub_10001A9E8(v64, (uint64_t)qword_1011B81E8);
  Row.get<A>(_:)(v65, &type metadata for Data, &protocol witness table for Data);
  if (v90 >> 60 == 15)
  {
    v79 = 0;
    v66 = 0;
    v67 = 0xF000000000000000;
  }
  else
  {
    sub_1002F702C(v89, v90);
    v79 = 0;
    v66 = v89;
    v67 = v90;
  }
  v42 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v85 + 16);
  v43 = v69;
  v42(v69, v83, v21);
  v44 = type metadata accessor for BeaconIdentifier(0);
  v42(v43 + *(int *)(v44 + 20), v82, v21);
  if (qword_1010EA4F0 != -1)
    swift_once(&qword_1010EA4F0, sub_100D295C0);
  v45 = sub_10001A9A8(&qword_1010EF3B0);
  v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B81B8);
  v47 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  v48 = (_QWORD *)(v43 + v47[5]);
  v49 = type metadata accessor for Date(0);
  v50 = v46;
  v51 = v86;
  Row.subscript.getter(v48, v50, v49, &protocol witness table for Date);
  v52 = (uint64_t *)(v43 + v47[6]);
  *v52 = v39;
  v52[1] = v63;
  v53 = v77;
  v54 = v78;
  v52[2] = v77;
  v52[3] = v54;
  v52[4] = v66;
  v52[5] = v67;
  sub_100758808(v39, v63, v53, v54, v66, v67, (void (*)(void))sub_10001BBBC, sub_10005CB9C);
  if (qword_1010EA508 != -1)
    swift_once(&qword_1010EA508, sub_100D29778);
  v55 = sub_10001A9A8(&qword_1010EF430);
  v56 = sub_10001A9E8(v55, (uint64_t)qword_1011B8200);
  v57 = sub_10012C5BC();
  v58 = v79;
  Row.get<A>(_:)(v56, &type metadata for UInt64, v57);
  if (v58)
  {
    sub_100758808(v39, v63, v77, v78, v66, v67, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
    swift_errorRelease(v58);
    ((void (*)(uint64_t, uint64_t))v81)(v51, v91);
    (*(void (**)(uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v84);
    v59 = *(void (**)(_QWORD *, uint64_t))(v85 + 8);
    v59(v82, v21);
    result = ((uint64_t (*)(_QWORD *, uint64_t))v59)(v83, v21);
    v61 = 0;
  }
  else
  {
    sub_100758808(v39, v63, v77, v78, v66, v67, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
    ((void (*)(uint64_t, uint64_t))v81)(v51, v91);
    (*(void (**)(uint64_t))(*(_QWORD *)(v80 - 8) + 8))(v84);
    v62 = *(void (**)(_QWORD *, uint64_t))(v85 + 8);
    v62(v82, v21);
    result = ((uint64_t (*)(_QWORD *, uint64_t))v62)(v83, v21);
    if (v89 == 2)
      v61 = 2;
    else
      v61 = v89 == 1;
  }
  *(_BYTE *)(v69 + v47[7]) = v61;
  return result;
}

_QWORD *sub_100758774@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v2 = sub_10001A9A8(&qword_1010EF3B8);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B8128);
  v4 = type metadata accessor for UUID(0);
  return Row.subscript.getter(a1, v3, v4, &protocol witness table for UUID);
}

uint64_t sub_100758808(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t (*a8)(uint64_t, uint64_t))
{
  uint64_t result;

  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    return a8(a5, a6);
  }
  return result;
}

uint64_t sub_10075887C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[10];

  v46 = a2;
  v44 = a1;
  v4 = sub_10001A9A8(&qword_1010EF358);
  v45 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v43 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for Table(0);
  v48 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v47 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  v49 = (char *)&v43 - v19;
  v50 = a3;
  v43 = a3 + OBJC_IVAR____TtC12searchpartyd19ObservationDatabase_keyGenerationHint;
  if (qword_1010EA4E8 != -1)
    swift_once(&qword_1010EA4E8, sub_100D29524);
  v20 = sub_10001A9A8(&qword_1010EF3B8);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B81A0);
  v22 = type metadata accessor for UUID(0);
  v23 = v21;
  v24 = v44;
  == infix<A>(_:_:)(v23, v44, v22, &protocol witness table for UUID, &protocol witness table for String);
  if (qword_1010EA4C0 != -1)
    swift_once(&qword_1010EA4C0, sub_100D29250);
  v25 = sub_10001A9E8(v20, (uint64_t)qword_1011B8128);
  v26 = type metadata accessor for BeaconIdentifier(0);
  == infix<A>(_:_:)(v25, v24 + *(int *)(v26 + 20), v22, &protocol witness table for UUID, &protocol witness table for String);
  && infix(_:_:)(v10, v7);
  v27 = *(void (**)(char *, uint64_t))(v45 + 8);
  v27(v7, v4);
  v27(v10, v4);
  QueryType.filter(_:)(v12, v13, &protocol witness table for Table);
  v27(v12, v4);
  if (qword_1010EA4C8 != -1)
    swift_once(&qword_1010EA4C8, sub_100D292E4);
  v28 = sub_10001A9A8(&qword_1010EF430);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B8140);
  v51[0] = v46;
  v30 = sub_10012C5BC();
  <= infix<A>(_:_:)(v29, v51, &type metadata for UInt64, v30, &protocol witness table for Int64);
  v31 = v47;
  QueryType.filter(_:)(v12, v13, &protocol witness table for Table);
  v27(v12, v4);
  v32 = v48;
  v33 = *(void (**)(char *, uint64_t))(v48 + 8);
  v33(v16, v13);
  v34 = sub_10001A9A8(&qword_1010EF3C8);
  v35 = swift_allocObject(v34, 72, 7);
  *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
  v36 = sub_1000193A4(&qword_1010F2E18, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType.desc.getter(v28, v36);
  v37 = v49;
  QueryType.order(_:)(v35, v13, &protocol witness table for Table);
  swift_bridgeObjectRelease();
  v33(v31, v13);
  v51[3] = v13;
  v51[4] = &protocol witness table for Table;
  v38 = sub_100018F08(v51);
  (*(void (**)(_QWORD *, char *, uint64_t))(v32 + 16))(v38, v37, v13);
  v39 = v51[9];
  sub_100757308((uint64_t)v51, v50);
  if (v39)
  {
    v33(v37, v13);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  }
  else
  {
    v41 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
    dispatch thunk of _AnySequenceBox._makeIterator()(v41);
    v42 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v42);
    swift_release();
    v33(v37, v13);
    return v51[5];
  }
}

uint64_t sub_100758CF8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100758D04(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100758D18()
{
  uint64_t *v0;

  return sub_100755420(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100758D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100758D40);
}

uint64_t sub_100758D40(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100758DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100758DC8);
}

char *sub_100758DC8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LostModeEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101106DF0;
  if (!qword_101106DF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeEndPoint);
  return result;
}

uint64_t sub_100758E78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x646F4D74736F6C2FLL;
  v5._object = (void *)0xE900000000000065;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

void *sub_100758F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  int EnumCaseMultiPayload;
  uint64_t My;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  BOOL v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188[2];
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192[8];
  uint64_t v193;
  _QWORD v194[5];

  v185 = (char *)a2;
  v186 = a4;
  v187 = a1;
  v175 = type metadata accessor for MemberSharingCircle(0);
  v174 = *(_QWORD *)(v175 - 8);
  v5 = __chkstk_darwin(v175);
  v7 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v156 - v8;
  v10 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v10);
  v176 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = (char *)type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v167);
  v166 = (char *)&v156 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v171 = *(_QWORD *)(v177 - 8);
  v13 = __chkstk_darwin(v177);
  v168 = (char *)&v156 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v170 = (uint64_t)&v156 - v15;
  v16 = sub_10001A9A8(&qword_1010FB1F0);
  v17 = __chkstk_darwin(v16);
  v169 = (char *)&v156 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v172 = (uint64_t)&v156 - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v21 = __chkstk_darwin(v20);
  v173 = (uint64_t)&v156 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v165 = (uint64_t)&v156 - v23;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v24);
  v180 = (char *)&v156 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v162 = *(_QWORD *)(v163 - 8);
  v26 = __chkstk_darwin(v163);
  v160 = (char *)&v156 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v161 = (uint64_t)&v156 - v28;
  v181 = type metadata accessor for URL(0);
  v183 = *(_QWORD *)(v181 - 8);
  v29 = __chkstk_darwin(v181);
  v178 = (char *)&v156 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v179 = (char *)&v156 - v32;
  __chkstk_darwin(v31);
  v184 = (char *)&v156 - v33;
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v35 = __chkstk_darwin(v34);
  v158 = (char *)&v156 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v159 = (uint64_t)&v156 - v37;
  v182 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v182);
  v39 = (char *)&v156 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for SharedBeaconRecord(0);
  v41 = __chkstk_darwin(v40);
  v164 = (uint64_t)&v156 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v157 = (uint64_t)&v156 - v44;
  v45 = __chkstk_darwin(v43);
  v47 = (char *)&v156 - v46;
  __chkstk_darwin(v45);
  v49 = (char *)&v156 - v48;
  v50 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v51 = __chkstk_darwin(v50);
  v53 = (char *)&v156 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v55 = (char *)&v156 - v54;
  v194[3] = a3;
  v194[4] = v186;
  v56 = sub_100018F08(v194);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v56, v187, a3);
  sub_100030784((uint64_t)v194, (uint64_t)&v193);
  v57 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  if (swift_dynamicCast(v55, &v193, v57, v50, 0))
  {
    sub_1000126EC((uint64_t)v55, (uint64_t)v53, type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v187 = 0;
    swift_bridgeObjectRelease();
    v58 = &v53[v50[14]];
    v60 = *(_QWORD *)v58;
    v59 = *((_QWORD *)v58 + 1);
    v61 = v60 & 0xFFFFFFFFFFFFLL;
    if ((v59 & 0x2000000000000000) != 0)
      v62 = HIBYTE(v59) & 0xF;
    else
      v62 = v61;
    if (!v62)
    {
      v188[0] = 0;
      v188[1] = 0xE000000000000000;
      v191 = *(_QWORD *)&v53[v50[16]];
      v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v63);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 95;
      v64._object = (void *)0xE100000000000000;
      String.append(_:)(v64);
      v191 = *(_QWORD *)&v53[v50[17]];
      v65._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (qword_1010EA618 != -1)
      swift_once(&qword_1010EA618, sub_100DC6630);
    v66 = qword_1011B8518;
    swift_bridgeObjectRetain(qword_1011B8518);
    if ((sub_10000E13C() & 1) != 0)
    {
      v188[0] = v66;
      sub_100C81F30(2u);
      sub_100C81F30(1u);
      v66 = v188[0];
    }
    v191 = v66;
    if ((sub_1004A6658((uint64_t)v53, (uint64_t)v185) & 1) != 0 && (sub_10000E13C() & 1) == 0)
    {
      sub_100A0C6E0(v188, 8);
      sub_100A0C6E0(v188, 9);
    }
    else
    {
      sub_100C81F30(8u);
      sub_100C81F30(9u);
    }
    sub_10005972C((uint64_t)&v53[v50[6]], (uint64_t)v39, type metadata accessor for StableIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v39, v182);
    sub_1000126B0((uint64_t)v39, type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload != 1)
    {
      sub_100C81F30(0xCu);
      sub_100C81F30(0xDu);
    }
    if ((sub_1009A2EDC() & 1) == 0
      || (My = type metadata accessor for Feature.FindMy(0),
          v189 = My,
          v190 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v101 = sub_100018F08(v188), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v101, enum case for Feature.FindMy.btRSSIFinding(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(v188), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v188), (My & 1) == 0))
    {
      sub_100C81F30(0xAu);
      sub_100C81F30(0xBu);
    }
    if ((sub_100C6F9A8() & 1) != 0
      && (v102 = type metadata accessor for Feature.FindMy(0),
          v189 = v102,
          v190 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v103 = sub_100018F08(v188), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v102 - 8) + 104))(v103, enum case for Feature.FindMy.itemSharing(_:), v102), LOBYTE(v102) = isFeatureEnabled(_:)(v188), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v188), (v102 & 1) != 0))
    {
      sub_100A0C6E0(v188, 4);
      v182 = (uint64_t)&v53[v50[5]];
      v186 = sub_100CA8018((uint64_t)&off_101048678);
      v104 = *((_QWORD *)v185 + 20);
      if (qword_1010EA118 != -1)
        swift_once(&qword_1010EA118, sub_100A2ECA4);
      v105 = v181;
      v106 = sub_10001A9E8(v181, (uint64_t)qword_1011B7B10);
      v107 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 16);
      v108 = v184;
      v107(v184, v106, v105);
      v109 = v179;
      v107(v179, (uint64_t)v108, v105);
      v110 = v163;
      v111 = (uint64_t)v160;
      v185 = &v160[*(int *)(v163 + 40)];
      v112 = (uint64_t)v185;
      v113 = type metadata accessor for DirectorySequence(0);
      v114 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56);
      v114(v112, 1, 1, v113);
      v107((char *)v111, (uint64_t)v109, v105);
      *(_QWORD *)(v111 + *(int *)(v110 + 36)) = v104;
      v115 = v178;
      v107(v178, (uint64_t)v109, v105);
      swift_retain();
      v116 = (uint64_t)v180;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v115, 0, 0);
      v117 = *(void (**)(char *, uint64_t))(v183 + 8);
      v117(v109, v105);
      v114(v116, 0, 1, v113);
      sub_10000C778(v116, (uint64_t)v185);
      v118 = v161;
      sub_100005CF0(v111, v161, (uint64_t *)&unk_1011115B0);
      v119 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v162 + 56);
      v120 = (uint64_t)v158;
      v119(v158, 1, 1, v110);
      sub_100004048(v120, (uint64_t *)&unk_1010F77C0);
      sub_100005CF0(v118, v120, (uint64_t *)&unk_1011115B0);
      v119((char *)v120, 0, 1, v110);
      sub_100005CF0(v120, v159, (uint64_t *)&unk_1010F77B0);
      v121 = ((uint64_t (*)(char *, uint64_t))v117)(v184, v105);
      __chkstk_darwin(v121);
      v122 = v182;
      *(&v156 - 2) = v186;
      *(&v156 - 1) = v122;
      sub_100A79994(sub_100330A84, (uint64_t)(&v156 - 4));
      v124 = v123;
      swift_bridgeObjectRelease();
      v125 = *(_QWORD *)(v124 + 16);
      swift_bridgeObjectRelease();
      v126 = v191;
      swift_bridgeObjectRetain(v191);
      LOBYTE(v124) = sub_100A077E4(5u, v126);
      swift_bridgeObjectRelease();
      if ((v124 & 1) == 0 && v125)
      {
        sub_100A0C6E0(v188, 5);
LABEL_44:
        sub_1000126B0((uint64_t)v53, type metadata accessor for OwnedBeaconRecord);
        v98 = (void *)v191;
        goto LABEL_61;
      }
      swift_bridgeObjectRetain(v126);
      v130 = sub_100A077E4(5u, v126);
      swift_bridgeObjectRelease();
      if ((v130 & 1) == 0 || v125)
        goto LABEL_44;
    }
    else
    {
      v127 = v191;
      swift_bridgeObjectRetain(v191);
      v128 = sub_100A077E4(4u, v127);
      swift_bridgeObjectRelease();
      if ((v128 & 1) != 0)
      {
        sub_100C81F30(4u);
        v127 = v191;
      }
      swift_bridgeObjectRetain(v127);
      v129 = sub_100A077E4(5u, v127);
      swift_bridgeObjectRelease();
      if ((v129 & 1) == 0)
        goto LABEL_44;
    }
    sub_100C81F30(5u);
    goto LABEL_44;
  }
  if ((swift_dynamicCast(v49, &v193, v57, v40, 0) & 1) != 0)
  {
    v166 = v7;
    sub_1000126EC((uint64_t)v49, (uint64_t)v47, type metadata accessor for SharedBeaconRecord);
    v182 = v40;
    v67 = &v47[*(int *)(v40 + 20)];
    v186 = (uint64_t)v47;
    v187 = (uint64_t)v67;
    v68 = *((_QWORD *)v185 + 20);
    if (qword_1010E9A98 != -1)
      swift_once(&qword_1010E9A98, sub_1001FFA50);
    v69 = v181;
    v70 = sub_10001A9E8(v181, (uint64_t)qword_1011B6C00);
    v71 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 16);
    v72 = v184;
    v71(v184, v70, v69);
    v73 = v179;
    v71(v179, (uint64_t)v72, v69);
    v74 = v177;
    v75 = (uint64_t)v168;
    v167 = &v168[*(int *)(v177 + 40)];
    v76 = (uint64_t)v167;
    v77 = type metadata accessor for DirectorySequence(0);
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56);
    v78(v76, 1, 1, v77);
    v71((char *)v75, (uint64_t)v73, v69);
    *(_QWORD *)(v75 + *(int *)(v74 + 36)) = v68;
    v79 = v178;
    v71(v178, (uint64_t)v73, v69);
    swift_retain();
    v80 = (uint64_t)v180;
    DirectorySequence.init(at:includingPropertiesForKeys:options:)(v79, 0, 0);
    v81 = *(void (**)(char *, uint64_t))(v183 + 8);
    v81(v73, v69);
    v78(v80, 0, 1, v77);
    sub_10000C778(v80, (uint64_t)v167);
    v82 = v170;
    sub_100005CF0(v75, v170, (uint64_t *)&unk_1011057F0);
    v83 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v171 + 56);
    v84 = (uint64_t)v169;
    v83(v169, 1, 1, v74);
    sub_100004048(v84, &qword_101105800);
    sub_100005CF0(v82, v84, (uint64_t *)&unk_1011057F0);
    v83((char *)v84, 0, 1, v74);
    sub_100005CF0(v84, v172, &qword_1010FB1F0);
    v85 = ((uint64_t (*)(char *, uint64_t))v81)(v184, v69);
    __chkstk_darwin(v85);
    *(&v156 - 2) = v187;
    sub_100A7A30C(sub_100425B14, (uint64_t)(&v156 - 4));
    v87 = *(_QWORD *)(v86 + 16);
    if (v87)
    {
      v88 = v174;
      v89 = v86 + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
      v90 = *(_QWORD *)(v174 + 72);
      v91 = v175;
      v92 = (uint64_t)v166;
      while (1)
      {
        sub_10005972C(v89, (uint64_t)v9, type metadata accessor for MemberSharingCircle);
        v93 = v9[*(int *)(v91 + 40)];
        sub_10005972C((uint64_t)v9, v92, type metadata accessor for MemberSharingCircle);
        if (v93 == 1)
          break;
        v94 = *(unsigned __int8 *)(v92 + *(int *)(v91 + 40));
        sub_1000126B0(v92, type metadata accessor for MemberSharingCircle);
        if (v94 == 4)
          goto LABEL_50;
        sub_1000126B0((uint64_t)v9, type metadata accessor for MemberSharingCircle);
        v89 += v90;
        if (!--v87)
        {
          v95 = 1;
          v96 = v165;
          goto LABEL_51;
        }
      }
      sub_1000126B0(v92, type metadata accessor for MemberSharingCircle);
LABEL_50:
      v96 = v165;
      sub_1000126EC((uint64_t)v9, v165, type metadata accessor for MemberSharingCircle);
      v95 = 0;
    }
    else
    {
      v96 = v165;
      v91 = v175;
      v88 = v174;
      v95 = 1;
    }
LABEL_51:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v96, v95, 1, v91);
    swift_bridgeObjectRelease();
    v131 = v182;
    v132 = v186;
    v133 = *(unsigned __int8 *)(v186 + *(int *)(v182 + 52));
    v134 = v173;
    sub_10075A40C(v96, v173);
    v135 = v133 == 1;
    v136 = (uint64_t)v176;
    v137 = v187;
    if (!v135 || (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v134, 1, v91) == 1)
    {
      sub_100004048(v134, (uint64_t *)&unk_101111440);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v138 = type metadata accessor for Logger(0);
      sub_10001A9E8(v138, (uint64_t)qword_1011B77E8);
      v139 = v164;
      v140 = sub_10005972C(v132, v164, type metadata accessor for SharedBeaconRecord);
      v141 = Logger.logObject.getter(v140);
      v142 = static os_log_type_t.default.getter(v141);
      if (os_log_type_enabled(v141, v142))
      {
        v143 = swift_slowAlloc(22, -1);
        v144 = swift_slowAlloc(32, -1);
        v188[0] = v144;
        *(_DWORD *)v143 = 141558275;
        v191 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v143 + 4, v143 + 12);
        *(_WORD *)(v143 + 12) = 2081;
        v145 = type metadata accessor for UUID(0);
        v146 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v147 = dispatch thunk of CustomStringConvertible.description.getter(v145, v146);
        v191 = sub_100016940(v147, v148, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, v192, v143 + 14, v143 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v139, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v141, v142, "No accepted member circle for beacon %{private,mask.hash}s.", (uint8_t *)v143, 0x16u);
        swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
        v149 = v144;
        v132 = v186;
        swift_slowDealloc(v149, -1, -1);
        swift_slowDealloc(v143, -1, -1);
      }
      else
      {
        sub_1000126B0(v139, type metadata accessor for SharedBeaconRecord);
      }

      sub_100004048(v96, (uint64_t *)&unk_101111440);
      sub_1000126B0(v132, type metadata accessor for SharedBeaconRecord);
      goto LABEL_60;
    }
    sub_100004048(v134, (uint64_t *)&unk_101111440);
    v188[0] = (uint64_t)&_swiftEmptySetSingleton;
    sub_10081BB64(v137, v136);
    v151 = type metadata accessor for BeaconProductInfoRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 48))(v136, 1, v151) == 1)
    {
      sub_100004048(v136, &qword_10110EEB0);
      v152 = *(_QWORD *)(v132 + *(int *)(v131 + 44));
      v153 = v157;
      sub_10005972C(v132, v157, type metadata accessor for SharedBeaconRecord);
      if (v152 != 76)
      {
        sub_1000126B0(v153, type metadata accessor for SharedBeaconRecord);
        goto LABEL_74;
      }
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v154 = sub_100A07598(*(_QWORD *)(v153 + *(int *)(v131 + 48)), qword_1011B8460);
      sub_1000126B0(v153, type metadata accessor for SharedBeaconRecord);
      if (!v154)
        goto LABEL_74;
      sub_100A0C6E0(&v191, 6);
      sub_100A0C6E0(&v191, 7);
      sub_100A0C6E0(&v191, 12);
      sub_100A0C6E0(&v191, 13);
LABEL_72:
      sub_100A0C6E0(&v191, 17);
      sub_100A0C6E0(&v191, 3);
      sub_100A0C6E0(&v191, 16);
LABEL_74:
      sub_100A0C6E0(&v191, 5);
      sub_100004048(v96, (uint64_t *)&unk_101111440);
      sub_1000126B0(v132, type metadata accessor for SharedBeaconRecord);
      v98 = (void *)v188[0];
      goto LABEL_61;
    }
    v155 = *(_DWORD *)(v136 + *(int *)(v151 + 68));
    sub_1000126B0(v136, type metadata accessor for BeaconProductInfoRecord);
    if ((v155 & 1) != 0)
    {
      sub_100A0C6E0(&v191, 6);
      sub_100A0C6E0(&v191, 7);
      if ((v155 & 0x400) == 0)
      {
LABEL_70:
        if ((v155 & 0x100) == 0)
          goto LABEL_72;
LABEL_71:
        sub_100A0C6E0(&v191, 12);
        sub_100A0C6E0(&v191, 13);
        goto LABEL_72;
      }
    }
    else if ((v155 & 0x400) == 0)
    {
      goto LABEL_70;
    }
    sub_100A0C6E0(&v191, 10);
    sub_100A0C6E0(&v191, 11);
    if ((v155 & 0x100) == 0)
      goto LABEL_72;
    goto LABEL_71;
  }
  v97 = (uint64_t)v166;
  if ((swift_dynamicCast(v166, &v193, v57, v167, 0) & 1) == 0)
  {
LABEL_60:
    v98 = &_swiftEmptySetSingleton;
    goto LABEL_61;
  }
  sub_1000126B0(v97, type metadata accessor for LocalFindableAccessoryRecord);
  v98 = sub_1003B8EB8((uint64_t)&off_1010486A0);
LABEL_61:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v193);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v194);
  return v98;
}

uint64_t sub_10075A40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101111440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10075A454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for OwnedBeaconRecord(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_10075A5C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v2 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v2);
  v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for BeaconObservation(0);
  v57 = *(_QWORD *)(v55 - 8);
  v4 = __chkstk_darwin(v55);
  v58 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v51 - v7;
  __chkstk_darwin(v6);
  v53 = (uint64_t)&v51 - v9;
  v10 = (_QWORD *)type metadata accessor for UUID(0);
  v11 = *(v10 - 1);
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v14);
  v16 = (unint64_t)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10080D208();
  v18 = sub_10075A454((uint64_t)v17);
  swift_bridgeObjectRelease();
  v60 = a1;
  v19 = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, (_BOOL8)v59, (uint64_t)v18);
  swift_bridgeObjectRelease();
  if (v19)
    return 1;
  sub_10080B648(a1, (uint64_t)&v61);
  v21 = (_QWORD *)&unk_1011B7000;
  if (!v62)
  {
    sub_100004048((uint64_t)&v61, (uint64_t *)&unk_1010EE310);
    goto LABEL_9;
  }
  v56 = a1;
  sub_10000F9FC(&v61, (uint64_t)v63);
  v23 = v64;
  v22 = v65;
  sub_10001AA44(v63, v64);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v23);
  if (qword_1010E9CF0 != -1)
    goto LABEL_40;
  while (1)
  {
    v24 = qword_1011B7160;
    v25 = objc_autoreleasePoolPush();
    sub_10058DC14(v24, (uint64_t)v13, 0, 0, &v61);
    objc_autoreleasePoolPop(v25);
    v26 = sub_10082B1AC(v16, (uint64_t)v13, v61, 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD *))(v11 + 8))(v13, v10);
    sub_100004048(v16, (uint64_t *)&unk_1010EA690);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
    if ((v26 & 1) != 0)
      return 4;
    v21 = &unk_1011B7000;
    a1 = v56;
LABEL_9:
    v11 = v55;
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v27 = v21[44];
    v28 = objc_autoreleasePoolPush();
    v29 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v27, v29);
    v30 = v63[0];
    if (!*(_QWORD *)(v63[0] + 16) || (v31 = sub_100003FB0(a1), (v32 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v37 = _swiftEmptyArrayStorage;
      goto LABEL_31;
    }
    v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease();
    v34 = sub_100508D98(v33);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v34);
    v36 = v35;
    swift_release();
    v37 = _swiftEmptyArrayStorage;
    v63[0] = _swiftEmptyArrayStorage;
    v56 = *(_QWORD *)(v36 + 16);
    if (!v56)
      break;
    v52 = v28;
    v16 = 0;
    v38 = _swiftEmptyArrayStorage;
    v10 = qword_100E4EE90;
    v13 = (char *)&off_101048310;
    v39 = v57;
    while (v16 < *(_QWORD *)(v36 + 16))
    {
      v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v41 = *(_QWORD *)(v39 + 72);
      sub_10005972C(v36 + v40 + v41 * v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      v42 = qword_100E4EE90[v8[*(int *)(v11 + 24)]];
      if (v42 != 700)
      {
        v45 = &stru_100000020.cmd + 1;
        while (1)
        {
          v46 = v45 - 31;
          if (__OFADD__(v45 - 32, 1))
            break;
          if (qword_100E4EE90[*((char *)&off_101048310 + v45)] == v42)
            goto LABEL_18;
          ++v45;
          if (v46 == 2)
          {
            sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconObservation);
            goto LABEL_15;
          }
        }
        __break(1u);
        break;
      }
LABEL_18:
      sub_1000126EC((uint64_t)v8, v58, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        sub_10009AAC8(0, v38[2] + 1, 1);
      v38 = (_QWORD *)v63[0];
      v44 = *(_QWORD *)(v63[0] + 16);
      v43 = *(_QWORD *)(v63[0] + 24);
      if (v44 >= v43 >> 1)
      {
        sub_10009AAC8(v43 > 1, v44 + 1, 1);
        v38 = (_QWORD *)v63[0];
      }
      v38[2] = v44 + 1;
      sub_1000126EC(v58, (uint64_t)v38 + v40 + v44 * v41, type metadata accessor for BeaconObservation);
      v11 = v55;
      v39 = v57;
LABEL_15:
      if (++v16 == v56)
      {
        v37 = (_QWORD *)v63[0];
        v28 = v52;
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_40:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_30:
  swift_release();
LABEL_31:
  v47 = (uint64_t)v54;
  objc_autoreleasePoolPop(v28);
  sub_100A797E8((uint64_t)v37, v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v47, 1, v11) == 1)
  {
    sub_100004048(v47, &qword_1010EF660);
    return 0;
  }
  else
  {
    v48 = v53;
    sub_1000126EC(v47, v53, type metadata accessor for BeaconObservation);
    v49 = *(unsigned __int8 *)(v48 + *(int *)(v11 + 24));
    sub_1000126B0(v48, type metadata accessor for BeaconObservation);
    v50 = 3;
    if (v49 != 42)
      v50 = 0;
    if (v49 == 41)
      return 2;
    else
      return v50;
  }
}

Swift::Int sub_10075ABD4(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_101106F70) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F2CC(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1007749F4(v6);
  *a1 = v3;
  return result;
}

id sub_10075AC58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  NSUUID v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v19;
  Class v20;
  uint64_t v21;
  id v22;
  id v23;
  _QWORD v25[2];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for SafeLocation(0);
  v7.super.isa = UUID._bridgeToObjectiveC()().super.isa;
  v8 = v6[7];
  v25[0] = qword_100E4EFF0[*(char *)(a1 + v6[6])];
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  v11 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v11 = v9 & 0xFFFFFFFFFFFFLL;
  if (v11)
  {
    v9 = (unint64_t)String._bridgeToObjectiveC()();
    v12 = (void *)v9;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(double *)(a1 + v6[8]);
  v14 = *(double *)(a1 + v6[9]);
  v15 = *(double *)(a1 + v6[10]);
  Date.init()(v9);
  v16 = objc_allocWithZone((Class)CLLocation);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v18 = objc_msgSend(v16, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v13, v14, 0.0, v15, v15, -1.0, -1.0, -1.0, 0xBFF0000000000000);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v18, "setReferenceFrame:", *(unsigned __int8 *)(a1 + v6[11]));
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + v6[13]));
  sub_10001B664(v19);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID(0);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v20 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = *(unsigned __int8 *)(a1 + v6[12]);
  v22 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v25[1]));
  v23 = objc_msgSend(v22, "initWithIdentifier:type:name:location:associatedBeacons:approvalState:", v7.super.isa, v25[0], v12, v18, v20, v21);

  sub_1000126B0(a1, type metadata accessor for SafeLocation);
  return v23;
}

uint64_t sub_10075AEB4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B75D0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B75D0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EC5310);
}

void sub_10075AF38(void *a1, char a2, uint64_t a3, void (*a4)(_QWORD, void *), uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t Strong;
  void *v13;
  uint64_t v14;
  id v15;
  _BYTE v16[24];

  v11 = a3 + 16;
  swift_beginAccess(a3 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v11);
  if (Strong)
  {
    v13 = (void *)Strong;
    if ((a2 & 1) != 0)
    {
      v15 = a1;
      a4(0, a1);
      sub_100294B28(a1, 1);

    }
    else
    {
      v14 = swift_allocObject(&unk_101091168, 32, 7);
      *(_QWORD *)(v14 + 16) = a4;
      *(_QWORD *)(v14 + 24) = a5;
      swift_retain();
      swift_retain();
      sub_10075B034(a6, (uint64_t)sub_10077F9A8, v14);

      swift_release();
      swift_release();
    }
  }
}

uint64_t sub_10075B034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t i;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = v3;
  v45 = a3;
  v42 = a2;
  v38 = a1;
  v5 = sub_10001A9A8(&qword_101106EB8);
  v39 = *(_QWORD *)(v5 - 8);
  v40 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101106EC0);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  __chkstk_darwin(v8);
  v41 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100B02AFC();
  v11 = v10[2];
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v13 = (unsigned __int8 *)(v10 + 4);
    do
    {
      v16 = *v13++;
      if (v16 == 2)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
        v46 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10009B424(0, v12[2] + 1, 1);
          v12 = v46;
        }
        v15 = v12[2];
        v14 = v12[3];
        if (v15 >= v14 >> 1)
        {
          sub_10009B424(v14 > 1, v15 + 1, 1);
          v12 = v46;
        }
        v12[2] = v15 + 1;
        *((_BYTE *)v12 + v15 + 32) = 2;
      }
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  v46 = _swiftEmptyArrayStorage;
  v18 = v12[2];
  if (v18)
  {
    swift_retain();
    for (i = 0; i != v18; ++i)
    {
      v20 = (char *)v12 + i;
      v21 = sub_10076E11C(v20[32]);
      sub_100304A98(v21);
    }
    swift_release_n(v12, 2);
    v22 = v46;
  }
  else
  {
    swift_release();
    v22 = _swiftEmptyArrayStorage;
  }
  swift_retain();
  v23 = v38;
  swift_bridgeObjectRetain(v38);
  v24 = sub_100778B24((uint64_t)v22, v4, v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v46 = v24;
  v25 = sub_10001A9A8(&qword_101106EC8);
  v26 = sub_10001A9A8(&qword_101106ED0);
  v27 = sub_1000193A4(&qword_101106ED8, &qword_101106EC8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v28 = sub_1000193A4(&qword_101106EE0, &qword_101106ED0, (const char *)&protocol conformance descriptor for [A]);
  Publishers.MergeMany.init<A>(_:)(&v46, v25, v26, v27, v28);
  v29 = sub_1000193A4(&qword_101106EE8, &qword_101106EB8, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v30 = v40;
  v31 = v41;
  Publisher.collect()(v40, v29);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v30);
  v32 = swift_allocObject(&unk_1010908F8, 32, 7);
  v33 = v45;
  *(_QWORD *)(v32 + 16) = v42;
  *(_QWORD *)(v32 + 24) = v33;
  v34 = sub_1000193A4(&qword_101106EF0, &qword_101106EC0, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
  swift_retain();
  v35 = v44;
  Publisher.oneshot(_:)(sub_10077DBAC, v32, v44, v34);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v31, v35);
}

uint64_t sub_10075B3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10075B3D0(a1, a2, a3, (uint64_t)&unk_10108FDB8, (uint64_t)sub_10077CA6C, (uint64_t)&unk_10108FDD0);
}

uint64_t sub_10075B3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  _QWORD *v33;

  v10 = v6;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v17 - 8);
  v29 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(_QWORD *)(v10 + 88);
  v20 = (_QWORD *)swift_allocObject(a4, 48, 7);
  v20[2] = a1;
  v20[3] = v10;
  v20[4] = a2;
  v20[5] = a3;
  aBlock[4] = a5;
  v33 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a6;
  v21 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v31 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v14, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v29);
  return swift_release(v33);
}

uint64_t sub_10075B5E4(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v8 = _Block_copy(aBlock);
  v9 = type metadata accessor for UUID(0);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v9);
  _Block_copy(v8);
  v11 = a1;
  a5(v10, v11, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10075B66C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[6];

  v5 = v4;
  v31 = a3;
  v32 = a4;
  v30 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  __chkstk_darwin(v10);
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for SafeLocation(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = *(_QWORD *)(v5 + 88);
  sub_10005972C(a1, (uint64_t)v16, type metadata accessor for SafeLocation);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = v18 + v15;
  v20 = swift_allocObject(&unk_101090498, (v19 & 0xFFFFFFFFFFFFFFF8) + 24, v17 | 7);
  v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + v20;
  *(_QWORD *)(v20 + 16) = v5;
  sub_1000126EC((uint64_t)v16, v20 + v18, type metadata accessor for SafeLocation);
  *(_BYTE *)(v20 + v19) = v30;
  v22 = v32;
  *(_QWORD *)(v21 + 8) = v31;
  *(_QWORD *)(v21 + 16) = v22;
  aBlock[4] = sub_10077D33C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010904B0;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v37 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v9, v7);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v12, v35);
  return swift_release();
}

uint64_t sub_10075B904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v4 = v3;
  v29 = a2;
  v30 = a3;
  v32 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v8 - 8);
  v34 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)(v4 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101090150, v18 + 16, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19 + v16, v14, v11);
  *(_QWORD *)(v19 + v17) = v4;
  v20 = (_QWORD *)(v19 + v18);
  v21 = v30;
  *v20 = v29;
  v20[1] = v21;
  aBlock[4] = sub_10077CC18;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101090168;
  v22 = _Block_copy(aBlock);
  swift_retain();
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v36 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v27 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v25, v26, v32, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

uint64_t sub_10075BC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v4 = v3;
  v30 = a2;
  v31 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v9 - 8);
  v34 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SafeLocation(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(v3 + 88);
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for SafeLocation);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1010906F0, v19 + 8, v16 | 7);
  sub_1000126EC((uint64_t)v15, v20 + v17, type metadata accessor for SafeLocation);
  v21 = (_QWORD *)(v20 + v18);
  v22 = v31;
  *v21 = v30;
  v21[1] = v22;
  *(_QWORD *)(v20 + v19) = v4;
  aBlock[4] = sub_10077D708;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101090708;
  v23 = _Block_copy(aBlock);
  swift_retain();
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  return swift_release();
}

uint64_t sub_10075BF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v37 = a6;
  v38 = a7;
  v34 = a5;
  v35 = a3;
  v8 = v7;
  v36 = a4;
  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v39 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v12 - 8);
  v43 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v8 + 88);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v19 = *(unsigned __int8 *)(v16 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(v34, v22 + 16, v19 | 7);
  *(_QWORD *)(v23 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v23 + v20, v18, v15);
  *(_QWORD *)(v23 + v21) = v8;
  v24 = (_QWORD *)(v23 + v22);
  v25 = v36;
  *v24 = v35;
  v24[1] = v25;
  aBlock[4] = v37;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v38;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  v45 = _swiftEmptyArrayStorage;
  v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v31 = v39;
  v32 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v29, v30, v41, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v31, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v31, v32);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
  return swift_release();
}

uint64_t sub_10075C1BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, void (*a6)(char *, uint64_t, id, void *))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v19;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a4, v11);
  _Block_copy(v15);
  v17 = a1;
  a6(v14, v16, v17, v15);
  _Block_release(v15);
  _Block_release(v15);

  swift_bridgeObjectRelease(v16);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10075C2B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  id v16;
  BOOL v17;
  uint64_t v18;
  id v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  void *v36;
  uint64_t j;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v3 = type metadata accessor for SafeLocation(0);
  v52 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v43 - v7;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v51 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
  swift_retain();
  v12 = (uint64_t)sub_100778A58(a1, v11);
  v50 = 0;
  swift_release();
  v44 = v12;
  if ((unint64_t)v12 >> 62)
    goto LABEL_43;
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v12);
  while (v13)
  {
    v14 = 0;
    v46 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
    v47 = v44 & 0xC000000000000001;
    v43 = v44 + 32;
    v45 = v13;
    while (1)
    {
      v16 = v47 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v44) : *(id *)(v43 + 8 * v14);
      v12 = (uint64_t)v16;
      v17 = __OFADD__(v14, 1);
      v18 = v14 + 1;
      if (v17)
        break;
      v49 = v18;
      sub_10001AA44(v46, v46[3]);
      v48 = (_QWORD *)v12;
      v19 = objc_msgSend((id)v12, "identifier");
      v20 = v51;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v21 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
      v22 = sub_10001E350();
      v23 = v22[2];
      if (v23)
      {
        v24 = 0;
        v1 = _swiftEmptyArrayStorage;
        while (v24 < v22[2])
        {
          v25 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
          v26 = *(_QWORD *)(v52 + 72);
          sub_10005972C((uint64_t)v22 + v25 + v26 * v24, (uint64_t)v8, type metadata accessor for SafeLocation);
          sub_1000126EC((uint64_t)v8, (uint64_t)v6, type metadata accessor for SafeLocation);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
          v54 = (uint64_t)v1;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10009AC18(0, v1[2] + 1, 1);
            v1 = (_QWORD *)v54;
          }
          v29 = v1[2];
          v28 = v1[3];
          v12 = v29 + 1;
          if (v29 >= v28 >> 1)
          {
            sub_10009AC18(v28 > 1, v29 + 1, 1);
            v1 = (_QWORD *)v54;
          }
          ++v24;
          v1[2] = v12;
          sub_1000126EC((uint64_t)v6, (uint64_t)v1 + v25 + v29 * v26, type metadata accessor for SafeLocation);
          if (v23 == v24)
            goto LABEL_19;
        }
        __break(1u);
        break;
      }
      v1 = _swiftEmptyArrayStorage;
LABEL_19:
      v30 = swift_bridgeObjectRelease();
      __chkstk_darwin(v30);
      v31 = v50;
      v32 = (uint64_t)v51;
      *(&v43 - 2) = (uint64_t)v51;
      v33 = sub_10001CEFC((uint64_t (*)(char *))sub_1004CFFF4, (unint64_t *)&v43 - 4, (uint64_t)v1);
      v34 = (uint64_t)sub_10047CE18(v33);
      v50 = v31;
      swift_bridgeObjectRelease();
      sub_100004048(v32, &qword_1010ED860);
      if ((unint64_t)v34 >> 62)
      {
        if (v34 < 0)
          v39 = v34;
        else
          v39 = v34 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v34);
        v1 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v39);
        swift_bridgeObjectRelease();
      }
      else
      {
        v1 = *(_QWORD **)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
      sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
      v54 = Set.init(minimumCapacity:)(v1);
      if ((unint64_t)v34 >> 62)
      {
        if (v34 < 0)
          v1 = (_QWORD *)v34;
        else
          v1 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(v34);
        v12 = _CocoaArrayWrapper.endIndex.getter(v1);
        swift_bridgeObjectRelease();
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        v12 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v12)
          goto LABEL_4;
      }
      if (v12 < 1)
        goto LABEL_42;
      if ((v34 & 0xC000000000000001) != 0)
      {
        for (i = 0; i != v12; ++i)
        {
          v36 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v34);
          sub_100A0CDD4((Swift::Int *)&v53, v36);

        }
      }
      else
      {
        for (j = 0; j != v12; ++j)
        {
          v38 = *(void **)(v34 + 8 * j + 32);
          sub_100A0CDD4((Swift::Int *)&v53, v38);

        }
      }
LABEL_4:
      swift_bridgeObjectRelease();
      isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v1 = v48;
      objc_msgSend(v48, "setSafeLocations:", isa);

      v14 = v49;
      if (v49 == v45)
        goto LABEL_47;
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    if (v12 < 0)
      v40 = v12;
    else
      v40 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v40);
  }
LABEL_47:
  v41 = v44;
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_10075C910(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  uint64_t (*v17)(uint64_t, __int16);
  uint64_t v18;

  v3 = v2;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B75D0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Client forces LOI based safe location refresh.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(_QWORD *)(*sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24))+ 240);
  v12 = swift_allocObject(&unk_101090B78, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  v13 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v13);
  v15[2] = v11;
  v16 = 1;
  v17 = sub_10077E0EC;
  v18 = v12;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI", 86, 2, sub_10077F7E4, v15, &type metadata for () + 1);
  swift_release();
  return swift_release();
}

uint64_t sub_10075CAC4(uint64_t a1, __int16 a2, uint64_t (*a3)(BOOL))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B75D0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Update ALL LOI based safe location finished.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  return a3((a2 & 0x100) == 0);
}

void sub_10075CC30(void *a1, char a2, void (*a3)(_QWORD, _QWORD))
{
  void (*v3)(_QWORD, _QWORD);
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void (*v12)(_QWORD, _QWORD);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a3;
  if ((a2 & 1) != 0)
  {
    v5 = qword_1010E9F10;
    v6 = a1;
    if (v5 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B75D0);
    v8 = v6;
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v23 = v21;
      *(_DWORD *)v11 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      v12 = v3;
      v13 = v8;
      v15 = v14;
      v16 = sub_100006204(&qword_101106EA0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B50);
      v17 = v15;
      v8 = v13;
      v3 = v12;
      v18 = Error.localizedDescription.getter(v17, v16);
      v22 = sub_100016940(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPC call failed with error: %s", v11, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);
    }

    v20 = v8;
    v3(0, a1);
    sub_100294B28(a1, 1);
    sub_100294B28(a1, 1);
  }
  else
  {
    a3(1, 0);
  }
}

uint64_t sub_10075CE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 216);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)v2 + 168);
    v4 = swift_retain();
    v3(v4);
    swift_release();
  }
  v5 = *(_QWORD *)(v1 + 240);
  sub_100AD0374();
  swift_retain_n(v1, 2);
  v6 = sub_1007FDEC4();
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v15[0] = 0x7365547265646E75;
  v15[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v16, v15, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v16 == 1)
  {
    sub_10075D14C((uint64_t)sub_10077CF2C, (uint64_t)&unk_101090190);
    v7 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v7);
    v11 = v5;
    LOBYTE(v12) = 0;
    v13 = sub_10077CB6C;
    v14 = v1;
    swift_retain();
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI", 86, 2, sub_10077CB9C, v10, &type metadata for () + 1);
    swift_release();
    return swift_release_n(v1, 3);
  }
  else
  {
    v9 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v9);
    v11 = v6;
    v12 = sub_10077CB48;
    v13 = (uint64_t (*)())v1;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_10077CB50, v10, &type metadata for () + 1);
    swift_release_n(v1, 2);
    return swift_release();
  }
}

uint64_t sub_10075D0A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[3];
  char v5;
  uint64_t (*v6)();
  uint64_t v7;

  sub_10075D14C((uint64_t)sub_10077CF2C, (uint64_t)&unk_101090190);
  v2 = *(_QWORD *)(a1 + 240);
  type metadata accessor for Transaction(0);
  v4[2] = v2;
  v5 = 0;
  v6 = sub_10077F800;
  v7 = a1;
  swift_retain();
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI", 86, 2, sub_10077F7E4, v4, &type metadata for () + 1);
  return swift_release();
}

uint64_t sub_10075D14C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(v2 + 96);
  aBlock[4] = a1;
  v22 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

BOOL sub_10075D318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a2, (uint64_t)v6, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, &qword_1010ED860);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v12 = type metadata accessor for SafeLocation(0);
    v13 = *(_QWORD *)(a1 + *(int *)(v12 + 52));
    __chkstk_darwin(v12);
    *(&v15 - 2) = (uint64_t)v10;
    swift_bridgeObjectRetain(v13);
    v11 = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, (_BOOL8)(&v15 - 4), v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return v11;
}

uint64_t sub_10075D4A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  char *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  char *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v84 = a3;
  v88 = a4;
  v85 = type metadata accessor for UUID(0);
  v89 = *(_QWORD *)(v85 - 8);
  v7 = __chkstk_darwin(v85);
  v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v82 = (char *)&v79 - v10;
  v11 = __chkstk_darwin(v9);
  v81 = (char *)&v79 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v79 - v13;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v15);
  v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OwnedBeaconRecord(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10080B950(a1, (uint64_t)v17);
  v86 = v19;
  v87 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    v34 = type metadata accessor for LeashRecord(0);
    v35 = *(_QWORD *)(v84 + *(int *)(v34 + 24));
    __chkstk_darwin(v34);
    *(&v79 - 2) = a1;
    swift_bridgeObjectRetain(v35);
    v36 = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, (_BOOL8)(&v79 - 4), v35);
    swift_bridgeObjectRelease();
    v37 = (uint64_t)v21;
    if (v36)
    {
      v38 = sub_1004B5784((uint64_t)v21, a2);
      v39 = v89;
      if ((v38 & 1) != 0)
      {
        if ((sub_1004A7674((uint64_t)v21, a2) & 1) == 0)
        {
          v77 = v88;
          sub_1000126EC((uint64_t)v21, v88, type metadata accessor for OwnedBeaconRecord);
          v33 = 0;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v77, v33, 1, v87);
        }
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v40 = type metadata accessor for Logger(0);
        sub_10001A9E8(v40, (uint64_t)qword_1011B75D0);
        v41 = v81;
        v42 = v85;
        v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16))(v81, a1, v85);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.error.getter(v44);
        if (os_log_type_enabled(v44, v45))
        {
          v46 = v41;
          v47 = (uint8_t *)swift_slowAlloc(12, -1);
          v48 = swift_slowAlloc(32, -1);
          v84 = v4;
          v49 = v48;
          v92 = v48;
          *(_DWORD *)v47 = 136315138;
          v80 = (char *)v37;
          v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v51 = dispatch thunk of CustomStringConvertible.description.getter(v42, v50);
          v90 = sub_100016940(v51, v52, &v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v47 + 4, v47 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v42);
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Received separation alert request for paused beacon: %s", v47, 0xCu);
          v33 = 1;
          swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1, -1);
          swift_slowDealloc(v47, -1, -1);

          sub_1000126B0((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }
      else
      {
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v67 = type metadata accessor for Logger(0);
        sub_10001A9E8(v67, (uint64_t)qword_1011B75D0);
        v41 = v82;
        v42 = v85;
        v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 16))(v82, a1, v85);
        v44 = Logger.logObject.getter(v68);
        v69 = static os_log_type_t.error.getter(v44);
        if (os_log_type_enabled(v44, v69))
        {
          v70 = v41;
          v71 = (uint8_t *)swift_slowAlloc(12, -1);
          v72 = swift_slowAlloc(32, -1);
          v84 = v4;
          v73 = v72;
          v92 = v72;
          *(_DWORD *)v71 = 136315138;
          v80 = (char *)v37;
          v74 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v75 = dispatch thunk of CustomStringConvertible.description.getter(v42, v74);
          v90 = sub_100016940(v75, v76, &v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v71 + 4, v71 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v89 + 8))(v70, v42);
          _os_log_impl((void *)&_mh_execute_header, v44, v69, "Received separation alert request for unsupported beacon: %s", v71, 0xCu);
          v33 = 1;
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v71, -1, -1);

          sub_1000126B0((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_24;
        }
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v42);
      sub_1000126B0(v37, type metadata accessor for OwnedBeaconRecord);
      v33 = 1;
      goto LABEL_24;
    }
    v84 = v4;
    v53 = v89;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v54 = type metadata accessor for Logger(0);
    sub_10001A9E8(v54, (uint64_t)qword_1011B75D0);
    v55 = v83;
    v56 = v85;
    v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 16))(v83, a1, v85);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(12, -1);
      v80 = v21;
      v61 = v55;
      v62 = (uint8_t *)v60;
      v63 = swift_slowAlloc(32, -1);
      v92 = v63;
      *(_DWORD *)v62 = 136315138;
      v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v56, v64);
      v90 = sub_100016940(v65, v66, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v56);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received separation alert request for non-leashed beacon: %s", v62, 0xCu);
      v33 = 1;
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      sub_1000126B0((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_24;
    }

    (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
    sub_1000126B0((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
LABEL_23:
    v33 = 1;
    goto LABEL_24;
  }
  v84 = v4;
  sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F47C0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v22 = type metadata accessor for Logger(0);
  sub_10001A9E8(v22, (uint64_t)qword_1011B75D0);
  v23 = v89;
  v24 = v85;
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 16))(v14, a1, v85);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (!os_log_type_enabled(v26, v27))
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);

    goto LABEL_23;
  }
  v28 = (uint8_t *)swift_slowAlloc(12, -1);
  v29 = swift_slowAlloc(32, -1);
  v92 = v29;
  *(_DWORD *)v28 = 136315138;
  v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v31 = dispatch thunk of CustomStringConvertible.description.getter(v24, v30);
  v90 = sub_100016940(v31, v32, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v28 + 4, v28 + 12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v14, v24);
  _os_log_impl((void *)&_mh_execute_header, v26, v27, "Received separation alert request for unknown beacon: %s", v28, 0xCu);
  swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1, -1);
  swift_slowDealloc(v28, -1, -1);

  v33 = 1;
LABEL_24:
  v77 = v88;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v77, v33, 1, v87);
}

void sub_10075DE50(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  id v52;
  uint64_t v53[20];
  uint64_t v54;
  uint64_t v55;
  char v56;

  v51 = a8;
  v52 = a4;
  v49 = a7;
  v14 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v14);
  v50 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    v54 = (uint64_t)a1;
    type metadata accessor for SPSeparationMonitoringError(0);
    v17 = v16;
    v18 = sub_100006204(&qword_101106EA0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B50);
    swift_willThrowTypedImpl(&v54, v17, v18);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B75D0);
    sub_10077E1C8(a1, a2, 1);
    v20 = v52;
    sub_10077E1C8(a1, a2, 1);
    v21 = v20;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      v25 = swift_slowAlloc(22, -1);
      v47 = a6;
      v26 = v25;
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(32, -1);
      v53[0] = v46;
      *(_DWORD *)v26 = 138412546;
      v45 = v22;
      v48 = a5;
      v54 = (uint64_t)v21;
      HIDWORD(v44) = v24;
      v28 = v21;
      a5 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v26 + 4, v26 + 12);
      *v27 = v21;

      *(_WORD *)(v26 + 12) = 2080;
      v54 = (uint64_t)a1;
      v55 = a2;
      v56 = 1;
      v29 = a1;
      v30 = sub_10001A9A8((uint64_t *)&unk_101106F30);
      v31 = String.init<A>(describing:)(&v54, v30);
      v54 = sub_100016940(v31, v32, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_10077E1D8(a1, a2, 1);
      sub_10077E1D8(a1, a2, 1);
      v22 = v45;
      _os_log_impl((void *)&_mh_execute_header, v45, BYTE4(v44), "Failed to reverse geocode location %@ for notification, result: %s", (uint8_t *)v26, 0x16u);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v27, 1, v33);
      swift_slowDealloc(v27, -1, -1);
      v34 = v46;
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v35 = v26;
      a6 = v47;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {

      sub_10077E1D8(a1, a2, 1);
      sub_10077E1D8(a1, a2, 1);
    }

    a1 = 0;
    a2 = 0;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  if (*(_QWORD *)(a5 + 40))
  {
    swift_retain();
    sub_1003837B4((uint64_t)v53);
    swift_release();
    sub_100005CF0((uint64_t)v53, (uint64_t)&v54, &qword_1010FA078);
    v36 = sub_1001D7100((uint64_t)&v54);
    if (v36 != 1)
      sub_10077E2EC(v53);
    v37 = v36 != 1;
    v38 = type metadata accessor for TaskPriority(0);
    v39 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v50, 1, 1, v38);
    v40 = swift_allocObject(&unk_101090C68, 104, 7);
    *(_QWORD *)(v40 + 16) = 0;
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = a5;
    *(_QWORD *)(v40 + 40) = a6;
    v42 = v51;
    v41 = v52;
    *(_QWORD *)(v40 + 48) = v49;
    *(_QWORD *)(v40 + 56) = v42;
    *(_QWORD *)(v40 + 64) = v41;
    *(_QWORD *)(v40 + 72) = a9;
    *(_BYTE *)(v40 + 80) = v37;
    *(_QWORD *)(v40 + 88) = a1;
    *(_QWORD *)(v40 + 96) = a2;
    v43 = v41;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v42);
    sub_100626BC4(v39, (uint64_t)&unk_101106F28, v40);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10075E2A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v8 + 336) = v27;
  *(_QWORD *)(v8 + 344) = v28;
  *(_BYTE *)(v8 + 777) = v26;
  *(_QWORD *)(v8 + 320) = a8;
  *(_QWORD *)(v8 + 328) = v25;
  *(_QWORD *)(v8 + 304) = a6;
  *(_QWORD *)(v8 + 312) = a7;
  *(_QWORD *)(v8 + 288) = a4;
  *(_QWORD *)(v8 + 296) = a5;
  v9 = sub_10001A9A8(&qword_101106E40);
  *(_QWORD *)(v8 + 352) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 360) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 368) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 376) = swift_task_alloc(v10);
  v11 = type metadata accessor for SafeLocation(0);
  *(_QWORD *)(v8 + 384) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 392) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 400) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 408) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 416) = swift_task_alloc(v13);
  v14 = type metadata accessor for AnyAnalyticsEvent(0);
  *(_QWORD *)(v8 + 424) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v8 + 432) = v15;
  *(_QWORD *)(v8 + 440) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for StableIdentifier(0);
  *(_QWORD *)(v8 + 448) = v16;
  *(_QWORD *)(v8 + 456) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v8 + 464) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v8 + 472) = v18;
  v19 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v8 + 480) = v19;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 488) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 496) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 504) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 512) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 520) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 528) = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 536) = swift_task_alloc(v20);
  v21 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 544) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v8 + 552) = v22;
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 560) = swift_task_alloc(v23);
  *(_QWORD *)(v8 + 568) = swift_task_alloc(v23);
  *(_QWORD *)(v8 + 576) = swift_task_alloc(v23);
  return swift_task_switch(sub_10075E488, 0, 0);
}

uint64_t sub_10075E488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 208, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 168, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 192))
  {
    sub_10000F9FC((__int128 *)(v0 + 168), v0 + 128);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCA0 + dword_1010EBCA0);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBCA4);
    *(_QWORD *)(v0 + 584) = v3;
    *v3 = v0;
    v3[1] = sub_10075E588;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10075E588(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10075E5E4, 0, 0);
}

uint64_t sub_10075E5E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v19)(void *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v1 = (_QWORD *)(v0 + 128);
  if (*(_QWORD *)(v0 + 592))
  {
    v2 = *(_QWORD *)(v0 + 312);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 600) = v3;
    v4 = _swiftEmptyArrayStorage;
    if (v3)
    {
      v5 = *(_QWORD *)(v0 + 552);
      v6 = *(_QWORD *)(v0 + 472);
      v42 = *(_QWORD *)(v0 + 464);
      v44 = _swiftEmptyArrayStorage;
      v7 = *(_QWORD *)(v0 + 312);
      sub_10009A578(0, v3, 0);
      v8 = v7 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v9 = *(_QWORD *)(v6 + 72);
      v4 = _swiftEmptyArrayStorage;
      v40 = v9;
      do
      {
        v10 = *(_QWORD *)(v0 + 576);
        v11 = *(_QWORD *)(v0 + 544);
        v12 = *(_QWORD *)(v0 + 536);
        sub_10005972C(v8, v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v10, v12 + *(int *)(v42 + 20), v11);
        sub_1000126B0(v12, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        {
          sub_10009A578(0, v4[2] + 1, 1);
          v9 = v40;
          v4 = v44;
        }
        v14 = v4[2];
        v13 = v4[3];
        if (v14 >= v13 >> 1)
        {
          sub_10009A578(v13 > 1, v14 + 1, 1);
          v9 = v40;
          v4 = v44;
        }
        v15 = *(_QWORD *)(v0 + 576);
        v16 = *(_QWORD *)(v0 + 544);
        v4[2] = v14 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v14, v15, v16);
        v44 = v4;
        v8 += v9;
        --v3;
      }
      while (v3);
    }
    *(_QWORD *)(v0 + 608) = sub_10001B664((uint64_t)v4);
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)swift_task_alloc(dword_1010ECB74);
    *(_QWORD *)(v0 + 616) = v17;
    *v17 = v0;
    v17[1] = sub_10075E94C;
    return sub_10007F990(*(_QWORD *)(v0 + 312));
  }
  else
  {
    v19 = *(void (**)(void *, uint64_t))(v0 + 296);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for SPSeparationMonitoringError(0);
    v21 = v20;
    *(_QWORD *)(v0 + 240) = 12;
    v22 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v23 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 232), v0 + 240, v22, v21, v23);
    v24 = *(void **)(v0 + 232);
    v19(v24, 1);

    v25 = *(_QWORD *)(v0 + 568);
    v26 = *(_QWORD *)(v0 + 560);
    v27 = *(_QWORD *)(v0 + 536);
    v28 = *(_QWORD *)(v0 + 528);
    v29 = *(_QWORD *)(v0 + 520);
    v30 = *(_QWORD *)(v0 + 504);
    v31 = *(_QWORD *)(v0 + 512);
    v33 = *(_QWORD *)(v0 + 488);
    v32 = *(_QWORD *)(v0 + 496);
    v34 = *(_QWORD *)(v0 + 456);
    v35 = *(_QWORD *)(v0 + 440);
    v36 = *(_QWORD *)(v0 + 416);
    v37 = *(_QWORD *)(v0 + 408);
    v38 = *(_QWORD *)(v0 + 400);
    v39 = *(_QWORD *)(v0 + 376);
    v41 = *(_QWORD *)(v0 + 368);
    v43 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10075E94C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 616));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_10075F3A4;
  }
  else
  {
    *(_QWORD *)(v4 + 624) = a1;
    v5 = sub_10075E9C4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10075E9C4()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  _QWORD *v77;
  void (*v78)(_QWORD, _QWORD);
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint8_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(void *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;

  v1 = *(_QWORD *)(v0 + 624);
  *(_QWORD *)(v0 + 632) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 552);
    v5 = *(_QWORD *)(v0 + 472);
    v120 = *(_QWORD *)(v0 + 464);
    v122 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(_QWORD *)(v0 + 568);
      v9 = *(_QWORD *)(v0 + 544);
      v10 = *(_QWORD *)(v0 + 536);
      sub_10005972C(v6, v10, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v120 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A578(0, v3[2] + 1, 1);
        v3 = v122;
      }
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v3 = v122;
      }
      v13 = *(_QWORD *)(v0 + 568);
      v14 = *(_QWORD *)(v0 + 544);
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v13, v14);
      v122 = v3;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  v15 = *(_QWORD *)(v0 + 608);
  v16 = sub_10001B664((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v16 + 16) <= *(_QWORD *)(v15 + 16) >> 3)
  {
    v122 = *(_QWORD **)(v0 + 608);
    sub_10063AFB0(v16);
    swift_bridgeObjectRelease();
    v17 = v122;
  }
  else
  {
    v17 = sub_10063D7D8(v16, *(_QWORD *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 640) = v17;
  if (*(_QWORD *)(v0 + 600))
  {
    v18 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 312);
    v20 = *(_DWORD *)(v18 + 80);
    *(_DWORD *)(v0 + 768) = v20;
    v21 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v0 + 648) = v21;
    swift_bridgeObjectRetain(v19);
    v23 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 656) = v23;
      v24 = *(_QWORD *)(v0 + 528);
      v25 = *(_QWORD *)(v0 + 520);
      v26 = *(_QWORD *)(v0 + 456);
      v27 = *(_QWORD *)(v0 + 464);
      v28 = *(_QWORD *)(v0 + 448);
      sub_10005972C(v22 + ((v20 + 32) & ~(unint64_t)v20) + v21 * v23, v24, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v24 + *(int *)(v27 + 24), v26, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v26, v28);
      sub_1000126B0(v26, type metadata accessor for StableIdentifier);
      sub_10005972C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        v31 = *(_QWORD *)(v0 + 640);
        if (*(_QWORD *)(v31 + 16))
        {
          v32 = *(_QWORD *)(v0 + 544);
          v33 = *(_QWORD *)(v0 + 520) + *(int *)(*(_QWORD *)(v0 + 464) + 20);
          v34 = *(_QWORD *)(v31 + 40);
          v35 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v32, v35);
          v37 = -1 << *(_BYTE *)(v31 + 32);
          v38 = v36 & ~v37;
          if (((*(_QWORD *)(v31 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v38) & 1) != 0)
            break;
        }
      }
LABEL_14:
      sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      v29 = *(_QWORD *)(v0 + 600);
      v30 = *(_QWORD *)(v0 + 656) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v30 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      v23 = *(_QWORD *)(v0 + 656) + 1;
      v21 = *(_QWORD *)(v0 + 648);
      LOBYTE(v20) = *(_BYTE *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 312);
    }
    v39 = ~v37;
    v40 = *(_QWORD *)(v0 + 552);
    v41 = *(_QWORD *)(v40 + 72);
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    v43 = *(_QWORD *)(v0 + 640);
    while (1)
    {
      v44 = *(_QWORD *)(v0 + 560);
      v45 = *(_QWORD *)(v0 + 552);
      v46 = *(_QWORD *)(v0 + 544);
      v42(v44, *(_QWORD *)(v43 + 48) + v38 * v41, v46);
      v47 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v33, v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      if ((v48 & 1) != 0)
        break;
      v43 = *(_QWORD *)(v0 + 640);
      v38 = (v38 + 1) & v39;
      if (((*(_QWORD *)(v43 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v38) & 1) == 0)
        goto LABEL_14;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    v49 = sub_10001A9A8(&qword_101106F48);
    *(_QWORD *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    v50 = sub_1000193A4((unint64_t *)&unk_101106F50, &qword_101106F48, (const char *)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    v51 = dispatch thunk of Actor.unownedExecutor.getter(v49, v50);
    return swift_task_switch(sub_10075FD8C, v51, v52);
  }
  else
  {
LABEL_24:
    v54 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRelease();
    v55 = *(_QWORD *)(v54 + 16);
    *(_QWORD *)(v0 + 664) = v55;
    if (v55)
    {
      v56 = *(_QWORD *)(v0 + 632);
      v58 = *(_QWORD *)(v0 + 472);
      v57 = *(_QWORD *)(v0 + 480);
      v59 = *(void **)(v0 + 320);
      LODWORD(v60) = *(_DWORD *)(v58 + 80);
      *(_DWORD *)(v0 + 772) = v60;
      v60 = v60;
      v61 = (v60 + 32) & ~v60;
      *(_QWORD *)(v0 + 672) = *(_QWORD *)(v58 + 72);
      *(_QWORD *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 712) = 0;
      v62 = *(_QWORD *)(v0 + 536);
      v63 = *(_QWORD *)(v0 + 504);
      v64 = *(_QWORD *)(v0 + 288);
      v65 = v61 + v57;
      v66 = v60 | 7;
      sub_10005972C(v56 + v61, v63, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v63, v62, type metadata accessor for OwnedBeaconRecord);
      v67 = swift_allocObject(&unk_101090C90, v65, v66);
      *(_QWORD *)(v0 + 728) = v67;
      *(_QWORD *)(v67 + 16) = v64;
      *(_QWORD *)(v67 + 24) = v59;
      sub_1000126EC(v62, v67 + v61, type metadata accessor for OwnedBeaconRecord);
      v68 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v69 = v59;
      v70 = (_QWORD *)swift_task_alloc(v68);
      *(_QWORD *)(v0 + 736) = v70;
      *v70 = v0;
      v70[1] = sub_10076093C;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10077E5F4, v67, &type metadata for Bool);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      v71 = *(_QWORD *)(v0 + 328);
      if (v71 == 1)
      {
        v79 = *(_QWORD *)(v0 + 336);
        v80 = *(_QWORD *)(v0 + 344);
        v81 = *(_BYTE *)(v0 + 777);
        v82 = *(void **)(v0 + 320);
        v84 = *(_QWORD *)(v0 + 296);
        v83 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 16) = 1;
        *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v81;
        *(_QWORD *)(v0 + 40) = 0;
        *(_QWORD *)(v0 + 48) = v79;
        *(_QWORD *)(v0 + 56) = v80;
        *(_QWORD *)(v0 + 64) = v82;
        swift_bridgeObjectRetain(v80);
        v85 = v82;
        sub_1007625AC(v0 + 16, v84, v83);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        if (!v71)
        {
          v72 = *(void **)(v0 + 320);
          v73 = *(_QWORD *)(v0 + 288);
          v74 = swift_allocObject(&unk_101090CB8, 32, 7);
          *(_QWORD *)(v0 + 752) = v74;
          *(_QWORD *)(v74 + 16) = v73;
          *(_QWORD *)(v74 + 24) = v72;
          v75 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v76 = v72;
          v77 = (_QWORD *)swift_task_alloc(v75);
          *(_QWORD *)(v0 + 760) = v77;
          *v77 = v0;
          v77[1] = sub_100761200;
          return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_10077E638, v74, *(_QWORD *)(v0 + 352));
        }
        v86 = (_QWORD *)(v0 + 248);
        v87 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v88 = type metadata accessor for Logger(0);
        v89 = sub_10001A9E8(v88, (uint64_t)qword_1011B75D0);
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = *(_QWORD *)(v0 + 328);
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v94 = (_QWORD *)swift_slowAlloc(32, -1);
          v122 = v94;
          *(_DWORD *)v93 = 136315138;
          *(_QWORD *)(v0 + 264) = v92;
          v86 = (_QWORD *)(v0 + 248);
          v87 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0);
          v96 = String.init<A>(describing:)(v0 + 264, v95);
          *(_QWORD *)(v0 + 272) = sub_100016940(v96, v97, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Received unknown eventType: %s", v93, 0xCu);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);
        }

        v98 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        v100 = v99;
        *(_QWORD *)(v0 + 256) = 12;
        v101 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v102 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
        _BridgedStoredNSError.init(_:userInfo:)(v86, v87, v101, v100, v102);
        v103 = *(void **)(v0 + 248);
        v98(v103, 1);
        swift_release();

      }
    }
    else
    {
      v78 = *(void (**)(_QWORD, _QWORD))(v0 + 296);
      swift_bridgeObjectRelease();
      v78(0, 0);
      swift_release();
    }
    v104 = *(_QWORD *)(v0 + 568);
    v105 = *(_QWORD *)(v0 + 560);
    v106 = *(_QWORD *)(v0 + 536);
    v107 = *(_QWORD *)(v0 + 528);
    v108 = *(_QWORD *)(v0 + 520);
    v109 = *(_QWORD *)(v0 + 504);
    v110 = *(_QWORD *)(v0 + 512);
    v112 = *(_QWORD *)(v0 + 488);
    v111 = *(_QWORD *)(v0 + 496);
    v113 = *(_QWORD *)(v0 + 456);
    v114 = *(_QWORD *)(v0 + 440);
    v115 = *(_QWORD *)(v0 + 416);
    v116 = *(_QWORD *)(v0 + 408);
    v117 = *(_QWORD *)(v0 + 400);
    v118 = *(_QWORD *)(v0 + 376);
    v119 = *(_QWORD *)(v0 + 368);
    v121 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10075F3A4()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  _QWORD *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  _QWORD *v77;
  void (*v78)(_QWORD, _QWORD);
  uint64_t v79;
  uint64_t v80;
  char v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint8_t *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(void *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;

  v1 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 632) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 552);
    v5 = *(_QWORD *)(v0 + 472);
    v120 = *(_QWORD *)(v0 + 464);
    v122 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v8 = *(_QWORD *)(v0 + 568);
      v9 = *(_QWORD *)(v0 + 544);
      v10 = *(_QWORD *)(v0 + 536);
      sub_10005972C(v6, v10, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v120 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A578(0, v3[2] + 1, 1);
        v3 = v122;
      }
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v3 = v122;
      }
      v13 = *(_QWORD *)(v0 + 568);
      v14 = *(_QWORD *)(v0 + 544);
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v13, v14);
      v122 = v3;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  v15 = *(_QWORD *)(v0 + 608);
  v16 = sub_10001B664((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v16 + 16) <= *(_QWORD *)(v15 + 16) >> 3)
  {
    v122 = *(_QWORD **)(v0 + 608);
    sub_10063AFB0(v16);
    swift_bridgeObjectRelease();
    v17 = v122;
  }
  else
  {
    v17 = sub_10063D7D8(v16, *(_QWORD *)(v0 + 608));
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 640) = v17;
  if (*(_QWORD *)(v0 + 600))
  {
    v18 = *(_QWORD *)(v0 + 472);
    v19 = *(_QWORD *)(v0 + 312);
    v20 = *(_DWORD *)(v18 + 80);
    *(_DWORD *)(v0 + 768) = v20;
    v21 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v0 + 648) = v21;
    swift_bridgeObjectRetain(v19);
    v23 = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 656) = v23;
      v24 = *(_QWORD *)(v0 + 528);
      v25 = *(_QWORD *)(v0 + 520);
      v26 = *(_QWORD *)(v0 + 456);
      v27 = *(_QWORD *)(v0 + 464);
      v28 = *(_QWORD *)(v0 + 448);
      sub_10005972C(v22 + ((v20 + 32) & ~(unint64_t)v20) + v21 * v23, v24, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v24 + *(int *)(v27 + 24), v26, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v26, v28);
      sub_1000126B0(v26, type metadata accessor for StableIdentifier);
      sub_10005972C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        v31 = *(_QWORD *)(v0 + 640);
        if (*(_QWORD *)(v31 + 16))
        {
          v32 = *(_QWORD *)(v0 + 544);
          v33 = *(_QWORD *)(v0 + 520) + *(int *)(*(_QWORD *)(v0 + 464) + 20);
          v34 = *(_QWORD *)(v31 + 40);
          v35 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v32, v35);
          v37 = -1 << *(_BYTE *)(v31 + 32);
          v38 = v36 & ~v37;
          if (((*(_QWORD *)(v31 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v38) & 1) != 0)
            break;
        }
      }
LABEL_14:
      sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      v29 = *(_QWORD *)(v0 + 600);
      v30 = *(_QWORD *)(v0 + 656) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v30 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
      v23 = *(_QWORD *)(v0 + 656) + 1;
      v21 = *(_QWORD *)(v0 + 648);
      LOBYTE(v20) = *(_BYTE *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 312);
    }
    v39 = ~v37;
    v40 = *(_QWORD *)(v0 + 552);
    v41 = *(_QWORD *)(v40 + 72);
    v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    v43 = *(_QWORD *)(v0 + 640);
    while (1)
    {
      v44 = *(_QWORD *)(v0 + 560);
      v45 = *(_QWORD *)(v0 + 552);
      v46 = *(_QWORD *)(v0 + 544);
      v42(v44, *(_QWORD *)(v43 + 48) + v38 * v41, v46);
      v47 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v33, v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      if ((v48 & 1) != 0)
        break;
      v43 = *(_QWORD *)(v0 + 640);
      v38 = (v38 + 1) & v39;
      if (((*(_QWORD *)(v43 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v38) & 1) == 0)
        goto LABEL_14;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    v49 = sub_10001A9A8(&qword_101106F48);
    *(_QWORD *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    v50 = sub_1000193A4((unint64_t *)&unk_101106F50, &qword_101106F48, (const char *)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    v51 = dispatch thunk of Actor.unownedExecutor.getter(v49, v50);
    return swift_task_switch(sub_10075FD8C, v51, v52);
  }
  else
  {
LABEL_24:
    v54 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRelease();
    v55 = *(_QWORD *)(v54 + 16);
    *(_QWORD *)(v0 + 664) = v55;
    if (v55)
    {
      v56 = *(_QWORD *)(v0 + 632);
      v58 = *(_QWORD *)(v0 + 472);
      v57 = *(_QWORD *)(v0 + 480);
      v59 = *(void **)(v0 + 320);
      LODWORD(v60) = *(_DWORD *)(v58 + 80);
      *(_DWORD *)(v0 + 772) = v60;
      v60 = v60;
      v61 = (v60 + 32) & ~v60;
      *(_QWORD *)(v0 + 672) = *(_QWORD *)(v58 + 72);
      *(_QWORD *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 712) = 0;
      v62 = *(_QWORD *)(v0 + 536);
      v63 = *(_QWORD *)(v0 + 504);
      v64 = *(_QWORD *)(v0 + 288);
      v65 = v61 + v57;
      v66 = v60 | 7;
      sub_10005972C(v56 + v61, v63, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v63, v62, type metadata accessor for OwnedBeaconRecord);
      v67 = swift_allocObject(&unk_101090C90, v65, v66);
      *(_QWORD *)(v0 + 728) = v67;
      *(_QWORD *)(v67 + 16) = v64;
      *(_QWORD *)(v67 + 24) = v59;
      sub_1000126EC(v62, v67 + v61, type metadata accessor for OwnedBeaconRecord);
      v68 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v69 = v59;
      v70 = (_QWORD *)swift_task_alloc(v68);
      *(_QWORD *)(v0 + 736) = v70;
      *v70 = v0;
      v70[1] = sub_10076093C;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10077E5F4, v67, &type metadata for Bool);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      v71 = *(_QWORD *)(v0 + 328);
      if (v71 == 1)
      {
        v79 = *(_QWORD *)(v0 + 336);
        v80 = *(_QWORD *)(v0 + 344);
        v81 = *(_BYTE *)(v0 + 777);
        v82 = *(void **)(v0 + 320);
        v84 = *(_QWORD *)(v0 + 296);
        v83 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 16) = 1;
        *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v81;
        *(_QWORD *)(v0 + 40) = 0;
        *(_QWORD *)(v0 + 48) = v79;
        *(_QWORD *)(v0 + 56) = v80;
        *(_QWORD *)(v0 + 64) = v82;
        swift_bridgeObjectRetain(v80);
        v85 = v82;
        sub_1007625AC(v0 + 16, v84, v83);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        if (!v71)
        {
          v72 = *(void **)(v0 + 320);
          v73 = *(_QWORD *)(v0 + 288);
          v74 = swift_allocObject(&unk_101090CB8, 32, 7);
          *(_QWORD *)(v0 + 752) = v74;
          *(_QWORD *)(v74 + 16) = v73;
          *(_QWORD *)(v74 + 24) = v72;
          v75 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v76 = v72;
          v77 = (_QWORD *)swift_task_alloc(v75);
          *(_QWORD *)(v0 + 760) = v77;
          *v77 = v0;
          v77[1] = sub_100761200;
          return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_10077E638, v74, *(_QWORD *)(v0 + 352));
        }
        v86 = (_QWORD *)(v0 + 248);
        v87 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v88 = type metadata accessor for Logger(0);
        v89 = sub_10001A9E8(v88, (uint64_t)qword_1011B75D0);
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = *(_QWORD *)(v0 + 328);
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v94 = (_QWORD *)swift_slowAlloc(32, -1);
          v122 = v94;
          *(_DWORD *)v93 = 136315138;
          *(_QWORD *)(v0 + 264) = v92;
          v86 = (_QWORD *)(v0 + 248);
          v87 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0);
          v96 = String.init<A>(describing:)(v0 + 264, v95);
          *(_QWORD *)(v0 + 272) = sub_100016940(v96, v97, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Received unknown eventType: %s", v93, 0xCu);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);
        }

        v98 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        v100 = v99;
        *(_QWORD *)(v0 + 256) = 12;
        v101 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v102 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
        _BridgedStoredNSError.init(_:userInfo:)(v86, v87, v101, v100, v102);
        v103 = *(void **)(v0 + 248);
        v98(v103, 1);
        swift_release();

      }
    }
    else
    {
      v78 = *(void (**)(_QWORD, _QWORD))(v0 + 296);
      swift_bridgeObjectRelease();
      v78(0, 0);
      swift_release();
    }
    v104 = *(_QWORD *)(v0 + 568);
    v105 = *(_QWORD *)(v0 + 560);
    v106 = *(_QWORD *)(v0 + 536);
    v107 = *(_QWORD *)(v0 + 528);
    v108 = *(_QWORD *)(v0 + 520);
    v109 = *(_QWORD *)(v0 + 504);
    v110 = *(_QWORD *)(v0 + 512);
    v112 = *(_QWORD *)(v0 + 488);
    v111 = *(_QWORD *)(v0 + 496);
    v113 = *(_QWORD *)(v0 + 456);
    v114 = *(_QWORD *)(v0 + 440);
    v115 = *(_QWORD *)(v0 + 416);
    v116 = *(_QWORD *)(v0 + 408);
    v117 = *(_QWORD *)(v0 + 400);
    v118 = *(_QWORD *)(v0 + 376);
    v119 = *(_QWORD *)(v0 + 368);
    v121 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10075FD8C(uint64_t a1)
{
  dispatch thunk of AnalyticsEvent.anyAnalyticsEvent.getter(a1);
  return swift_task_switch(sub_10075FDCC, 0, 0);
}

uint64_t sub_10075FDCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v2 = v0[54];
  v1 = v0[55];
  v3 = v0[53];
  static AnalyticsPublisher.publish(event:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v4 = v0[66];
  v5 = v0[64];
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B75D0);
  v7 = sub_10005972C(v4, v5, type metadata accessor for OwnedBeaconRecord);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = v0[68];
    v11 = v0[64];
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v22 = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    v0[35] = sub_100016940(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ignoring separation monitor alert for unregistered self-beaconing device: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[64], type metadata accessor for OwnedBeaconRecord);
  }

  v17 = v0[66];
  v18 = v0[36];
  v19 = swift_task_alloc(32);
  v0[86] = v19;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)(v19 + 24) = v17;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[87] = v20;
  *v20 = v0;
  v20[1] = sub_100760058;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v20, 0, 0, 0xD00000000000003FLL, 0x8000000100EE31D0, sub_10077E640, v19, &type metadata for () + 1);
}

uint64_t sub_100760058()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 696);
  *(_QWORD *)(*v1 + 704) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 688);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    v5 = sub_100761564;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 688));
    v5 = sub_1007600F8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1007600F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, unint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  void (*v58)(_QWORD, _QWORD);
  uint64_t v59;
  uint64_t v60;
  char v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(void *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  swift_release();
  v1 = *(_QWORD *)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 656) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
  if (v2 == v1)
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 632);
    swift_bridgeObjectRelease();
    v4 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v0 + 664) = v4;
    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 632);
      v7 = *(_QWORD *)(v0 + 472);
      v6 = *(_QWORD *)(v0 + 480);
      v8 = *(void **)(v0 + 320);
      LODWORD(v9) = *(_DWORD *)(v7 + 80);
      *(_DWORD *)(v0 + 772) = v9;
      v9 = v9;
      v10 = (v9 + 32) & ~v9;
      *(_QWORD *)(v0 + 672) = *(_QWORD *)(v7 + 72);
      *(_QWORD *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 712) = 0;
      v11 = *(_QWORD *)(v0 + 536);
      v12 = *(_QWORD *)(v0 + 504);
      v13 = *(_QWORD *)(v0 + 288);
      v14 = v10 + v6;
      v15 = v9 | 7;
      sub_10005972C(v5 + v10, v12, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v12, v11, type metadata accessor for OwnedBeaconRecord);
      v16 = swift_allocObject(&unk_101090C90, v14, v15);
      *(_QWORD *)(v0 + 728) = v16;
      *(_QWORD *)(v16 + 16) = v13;
      *(_QWORD *)(v16 + 24) = v8;
      sub_1000126EC(v11, v16 + v10, type metadata accessor for OwnedBeaconRecord);
      v17 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v18 = v8;
      v19 = (_QWORD *)swift_task_alloc(v17);
      *(_QWORD *)(v0 + 736) = v19;
      *v19 = v0;
      v19[1] = sub_10076093C;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10077E5F4, v16, &type metadata for Bool);
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      v51 = *(_QWORD *)(v0 + 328);
      if (v51 == 1)
      {
        v59 = *(_QWORD *)(v0 + 336);
        v60 = *(_QWORD *)(v0 + 344);
        v61 = *(_BYTE *)(v0 + 777);
        v62 = *(void **)(v0 + 320);
        v64 = *(_QWORD *)(v0 + 296);
        v63 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 16) = 1;
        *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v61;
        *(_QWORD *)(v0 + 40) = 0;
        *(_QWORD *)(v0 + 48) = v59;
        *(_QWORD *)(v0 + 56) = v60;
        *(_QWORD *)(v0 + 64) = v62;
        swift_bridgeObjectRetain(v60);
        v65 = v62;
        sub_1007625AC(v0 + 16, v64, v63);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        if (!v51)
        {
          v52 = *(void **)(v0 + 320);
          v53 = *(_QWORD *)(v0 + 288);
          v54 = swift_allocObject(&unk_101090CB8, 32, 7);
          *(_QWORD *)(v0 + 752) = v54;
          *(_QWORD *)(v54 + 16) = v53;
          *(_QWORD *)(v54 + 24) = v52;
          v55 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v56 = v52;
          v57 = (_QWORD *)swift_task_alloc(v55);
          *(_QWORD *)(v0 + 760) = v57;
          *v57 = v0;
          v57[1] = sub_100761200;
          return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_10077E638, v54, *(_QWORD *)(v0 + 352));
        }
        v66 = (_QWORD *)(v0 + 248);
        v67 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v68 = type metadata accessor for Logger(0);
        v69 = sub_10001A9E8(v68, (uint64_t)qword_1011B75D0);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.error.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          v72 = *(_QWORD *)(v0 + 328);
          v73 = (uint8_t *)swift_slowAlloc(12, -1);
          v74 = swift_slowAlloc(32, -1);
          v101 = v74;
          *(_DWORD *)v73 = 136315138;
          *(_QWORD *)(v0 + 264) = v72;
          v66 = (_QWORD *)(v0 + 248);
          v67 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0);
          v76 = String.init<A>(describing:)(v0 + 264, v75);
          *(_QWORD *)(v0 + 272) = sub_100016940(v76, v77, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v73 + 4, v73 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Received unknown eventType: %s", v73, 0xCu);
          swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v74, -1, -1);
          swift_slowDealloc(v73, -1, -1);
        }

        v78 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        v80 = v79;
        *(_QWORD *)(v0 + 256) = 12;
        v81 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v82 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
        _BridgedStoredNSError.init(_:userInfo:)(v66, v67, v81, v80, v82);
        v83 = *(void **)(v0 + 248);
        v78(v83, 1);
        swift_release();

      }
    }
    else
    {
      v58 = *(void (**)(_QWORD, _QWORD))(v0 + 296);
      swift_bridgeObjectRelease();
      v58(0, 0);
      swift_release();
    }
    v84 = *(_QWORD *)(v0 + 568);
    v85 = *(_QWORD *)(v0 + 560);
    v86 = *(_QWORD *)(v0 + 536);
    v87 = *(_QWORD *)(v0 + 528);
    v88 = *(_QWORD *)(v0 + 520);
    v89 = *(_QWORD *)(v0 + 504);
    v90 = *(_QWORD *)(v0 + 512);
    v92 = *(_QWORD *)(v0 + 488);
    v91 = *(_QWORD *)(v0 + 496);
    v93 = *(_QWORD *)(v0 + 456);
    v94 = *(_QWORD *)(v0 + 440);
    v95 = *(_QWORD *)(v0 + 416);
    v96 = *(_QWORD *)(v0 + 408);
    v97 = *(_QWORD *)(v0 + 400);
    v98 = *(_QWORD *)(v0 + 376);
    v99 = *(_QWORD *)(v0 + 368);
    v100 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      v23 = *(_QWORD *)(v0 + 656) + 1;
      *(_QWORD *)(v0 + 656) = v23;
      v24 = *(_QWORD *)(v0 + 528);
      v25 = *(_QWORD *)(v0 + 520);
      v27 = *(_QWORD *)(v0 + 456);
      v26 = *(_QWORD *)(v0 + 464);
      v28 = *(_QWORD *)(v0 + 448);
      sub_10005972C(*(_QWORD *)(v0 + 312)+ ((*(unsigned __int8 *)(v0 + 768) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 768))+ *(_QWORD *)(v0 + 648) * v23, v24, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v24 + *(int *)(v26 + 24), v27, type metadata accessor for StableIdentifier);
      LODWORD(v28) = swift_getEnumCaseMultiPayload(v27, v28);
      sub_1000126B0(v27, type metadata accessor for StableIdentifier);
      sub_10005972C(v24, v25, type metadata accessor for OwnedBeaconRecord);
      if (!(_DWORD)v28)
      {
        v29 = *(_QWORD *)(v0 + 640);
        if (*(_QWORD *)(v29 + 16))
        {
          v30 = *(_QWORD *)(v0 + 544);
          v31 = *(_QWORD *)(v0 + 520) + *(int *)(*(_QWORD *)(v0 + 464) + 20);
          v32 = *(_QWORD *)(v29 + 40);
          v33 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v34 = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v30, v33);
          v35 = -1 << *(_BYTE *)(v29 + 32);
          v36 = v34 & ~v35;
          if (((*(_QWORD *)(v29 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v36) & 1) != 0)
            break;
        }
      }
LABEL_5:
      sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      v21 = *(_QWORD *)(v0 + 600);
      v22 = *(_QWORD *)(v0 + 656) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v22 == v21)
        goto LABEL_2;
    }
    v37 = ~v35;
    v38 = *(_QWORD *)(v0 + 552);
    v39 = *(_QWORD *)(v38 + 72);
    v40 = *(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16);
    v41 = *(_QWORD *)(v0 + 640);
    while (1)
    {
      v42 = *(_QWORD *)(v0 + 560);
      v43 = *(_QWORD *)(v0 + 552);
      v44 = *(_QWORD *)(v0 + 544);
      v40(v42, *(_QWORD *)(v41 + 48) + v36 * v39, v44);
      v45 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v31, v44, v45);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
      if ((v46 & 1) != 0)
        break;
      v41 = *(_QWORD *)(v0 + 640);
      v36 = (v36 + 1) & v37;
      if (((*(_QWORD *)(v41 + ((v36 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v36) & 1) == 0)
        goto LABEL_5;
    }
    sub_1000126B0(*(_QWORD *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    v47 = sub_10001A9A8(&qword_101106F48);
    *(_QWORD *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    v48 = sub_1000193A4((unint64_t *)&unk_101106F50, &qword_101106F48, (const char *)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    v49 = dispatch thunk of Actor.unownedExecutor.getter(v47, v48);
    return swift_task_switch(sub_10075FD8C, v49, v50);
  }
}

uint64_t sub_10076093C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 736));
  swift_release();
  return swift_task_switch(sub_10076099C, 0, 0);
}

uint64_t sub_10076099C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  void (*v51)(_QWORD, _QWORD);
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(void *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  if ((*(_BYTE *)(v0 + 776) & 1) != 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v1 = *(_QWORD *)(v0 + 504);
    v2 = *(_QWORD *)(v0 + 488);
    v3 = *(void **)(v0 + 320);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B75D0);
    sub_10005972C(v1, v2, type metadata accessor for OwnedBeaconRecord);
    v5 = Logger.logObject.getter(v3);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = *(_QWORD *)(v0 + 544);
      v93 = *(_QWORD *)(v0 + 504);
      v8 = *(_QWORD *)(v0 + 488);
      v9 = *(void **)(v0 + 320);
      v10 = swift_slowAlloc(32, -1);
      v11 = (_QWORD *)swift_slowAlloc(8, -1);
      v12 = swift_slowAlloc(32, -1);
      v95 = v12;
      *(_DWORD *)v10 = 138412803;
      *(_QWORD *)(v10 + 4) = v9;
      *v11 = v9;

      *(_WORD *)(v10 + 12) = 2160;
      *(_QWORD *)(v10 + 14) = 1752392040;
      *(_WORD *)(v10 + 22) = 2081;
      v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
      *(_QWORD *)(v10 + 24) = sub_100016940(v14, v15, &v95);
      swift_bridgeObjectRelease();
      sub_1000126B0(v8, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Location is in safe location - not posting separation notification at %@ for beacon %{private,mask.hash}s.", (uint8_t *)v10, 0x20u);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v11, 1, v16);
      swift_slowDealloc(v11, -1, -1);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      v17 = v93;
    }
    else
    {
      v27 = *(_QWORD *)(v0 + 504);
      v28 = *(_QWORD *)(v0 + 488);
      v29 = *(void **)(v0 + 320);

      sub_1000126B0(v28, type metadata accessor for OwnedBeaconRecord);
      v17 = v27;
    }
    sub_1000126B0(v17, type metadata accessor for OwnedBeaconRecord);
    v20 = *(_QWORD *)(v0 + 720);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 720);
    sub_10005972C(*(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 496), type metadata accessor for OwnedBeaconRecord);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v20 = *(_QWORD *)(v0 + 720);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v20 = sub_1007C8520(0, *(_QWORD *)(v20 + 16) + 1, 1, *(_QWORD *)(v0 + 720));
    v22 = *(_QWORD *)(v20 + 16);
    v21 = *(_QWORD *)(v20 + 24);
    if (v22 >= v21 >> 1)
      v20 = sub_1007C8520(v21 > 1, v22 + 1, 1, v20);
    v23 = *(_QWORD *)(v0 + 672);
    v24 = *(unsigned __int8 *)(v0 + 772);
    v25 = *(_QWORD *)(v0 + 496);
    v26 = *(_QWORD *)(v0 + 504);
    *(_QWORD *)(v20 + 16) = v22 + 1;
    sub_1000126EC(v25, v20 + ((v24 + 32) & ~v24) + v23 * v22, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0(v26, type metadata accessor for OwnedBeaconRecord);
  }
  v30 = *(_QWORD *)(v0 + 712) + 1;
  if (v30 == *(_QWORD *)(v0 + 664))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 744) = v20;
    if (*(_QWORD *)(v20 + 16))
    {
      v31 = *(_QWORD *)(v0 + 328);
      if (v31 == 1)
      {
        v52 = *(_QWORD *)(v0 + 336);
        v53 = *(_QWORD *)(v0 + 344);
        v54 = *(_BYTE *)(v0 + 777);
        v55 = *(void **)(v0 + 320);
        v56 = *(_QWORD *)(v0 + 296);
        v57 = *(_QWORD *)(v0 + 304);
        *(_QWORD *)(v0 + 16) = 1;
        *(_QWORD *)(v0 + 24) = v20;
        *(_BYTE *)(v0 + 32) = v54;
        *(_QWORD *)(v0 + 40) = 0;
        *(_QWORD *)(v0 + 48) = v52;
        *(_QWORD *)(v0 + 56) = v53;
        *(_QWORD *)(v0 + 64) = v55;
        swift_bridgeObjectRetain(v53);
        v58 = v55;
        sub_1007625AC(v0 + 16, v56, v57);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

      }
      else
      {
        if (!v31)
        {
          v32 = *(void **)(v0 + 320);
          v33 = *(_QWORD *)(v0 + 288);
          v34 = swift_allocObject(&unk_101090CB8, 32, 7);
          *(_QWORD *)(v0 + 752) = v34;
          *(_QWORD *)(v34 + 16) = v33;
          *(_QWORD *)(v34 + 24) = v32;
          v35 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v36 = v32;
          v37 = (_QWORD *)swift_task_alloc(v35);
          *(_QWORD *)(v0 + 760) = v37;
          *v37 = v0;
          v37[1] = sub_100761200;
          return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 376), sub_10077E638, v34, *(_QWORD *)(v0 + 352));
        }
        v59 = (_QWORD *)(v0 + 248);
        v60 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v61 = type metadata accessor for Logger(0);
        v62 = sub_10001A9E8(v61, (uint64_t)qword_1011B75D0);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.error.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          v65 = *(_QWORD *)(v0 + 328);
          v66 = (uint8_t *)swift_slowAlloc(12, -1);
          v67 = swift_slowAlloc(32, -1);
          v95 = v67;
          *(_DWORD *)v66 = 136315138;
          *(_QWORD *)(v0 + 264) = v65;
          v59 = (_QWORD *)(v0 + 248);
          v60 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0);
          v69 = String.init<A>(describing:)(v0 + 264, v68);
          *(_QWORD *)(v0 + 272) = sub_100016940(v69, v70, &v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v66 + 4, v66 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Received unknown eventType: %s", v66, 0xCu);
          swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1, -1);
          swift_slowDealloc(v66, -1, -1);
        }

        v71 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0);
        v73 = v72;
        *(_QWORD *)(v0 + 256) = 12;
        v74 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v75 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
        _BridgedStoredNSError.init(_:userInfo:)(v59, v60, v74, v73, v75);
        v76 = *(void **)(v0 + 248);
        v71(v76, 1);
        swift_release();

      }
    }
    else
    {
      v51 = *(void (**)(_QWORD, _QWORD))(v0 + 296);
      swift_bridgeObjectRelease();
      v51(0, 0);
      swift_release();
    }
    v77 = *(_QWORD *)(v0 + 568);
    v78 = *(_QWORD *)(v0 + 560);
    v79 = *(_QWORD *)(v0 + 536);
    v80 = *(_QWORD *)(v0 + 528);
    v81 = *(_QWORD *)(v0 + 520);
    v82 = *(_QWORD *)(v0 + 504);
    v83 = *(_QWORD *)(v0 + 512);
    v85 = *(_QWORD *)(v0 + 488);
    v84 = *(_QWORD *)(v0 + 496);
    v86 = *(_QWORD *)(v0 + 456);
    v87 = *(_QWORD *)(v0 + 440);
    v88 = *(_QWORD *)(v0 + 416);
    v89 = *(_QWORD *)(v0 + 408);
    v90 = *(_QWORD *)(v0 + 400);
    v91 = *(_QWORD *)(v0 + 376);
    v92 = *(_QWORD *)(v0 + 368);
    v94 = *(_QWORD *)(v0 + 360);
    swift_task_dealloc(*(_QWORD *)(v0 + 576));
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 720) = v20;
    *(_QWORD *)(v0 + 712) = v30;
    v39 = *(unsigned __int8 *)(v0 + 772);
    v40 = *(_QWORD *)(v0 + 536);
    v41 = *(_QWORD *)(v0 + 504);
    v42 = *(void **)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 288);
    v44 = (v39 + 32) & ~v39;
    v45 = v44 + *(_QWORD *)(v0 + 480);
    v46 = v39 | 7;
    sub_10005972C(*(_QWORD *)(v0 + 632) + v44 + *(_QWORD *)(v0 + 672) * v30, v41, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C(v41, v40, type metadata accessor for OwnedBeaconRecord);
    v47 = swift_allocObject(&unk_101090C90, v45, v46);
    *(_QWORD *)(v0 + 728) = v47;
    *(_QWORD *)(v47 + 16) = v43;
    *(_QWORD *)(v47 + 24) = v42;
    sub_1000126EC(v40, v47 + v44, type metadata accessor for OwnedBeaconRecord);
    v48 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v49 = v42;
    v50 = (_QWORD *)swift_task_alloc(v48);
    *(_QWORD *)(v0 + 736) = v50;
    *v50 = v0;
    v50[1] = sub_10076093C;
    return unsafeBlocking<A>(_:)(v0 + 776, sub_10077E5F4, v47, &type metadata for Bool);
  }
}

uint64_t sub_100761200()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  swift_release();
  return swift_task_switch(sub_100761260, 0, 0);
}

uint64_t sub_100761260()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 48);
  if (v3(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_101106E40);
    v4 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 416);
    sub_1000126EC(v2, v5, type metadata accessor for SafeLocation);
    if (*(_BYTE *)(v5 + *(int *)(v1 + 48)) == 3)
    {
      v6 = 1;
    }
    else
    {
      sub_10005972C(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 368), type metadata accessor for SafeLocation);
      v6 = 0;
    }
    v7 = *(_QWORD *)(v0 + 384);
    v9 = *(_QWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 392) + 56))(v8, v6, 1, v7);
    sub_10000F9B8(v8, v9, &qword_101106E40);
    if (v3(v9, 1, v7) == 1)
    {
      v4 = 0;
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 400);
      v10 = *(_QWORD *)(v0 + 408);
      sub_1000126EC(*(_QWORD *)(v0 + 360), v10, type metadata accessor for SafeLocation);
      sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
      sub_10005972C(v10, v11, type metadata accessor for SafeLocation);
      v4 = sub_10075AC58(v11);
      sub_1000126B0(v10, type metadata accessor for SafeLocation);
    }
    v12 = *(_QWORD *)(v0 + 416);
    sub_100004048(*(_QWORD *)(v0 + 368), &qword_101106E40);
    sub_1000126B0(v12, type metadata accessor for SafeLocation);
  }
  v13 = *(_QWORD *)(v0 + 744);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 344);
  v16 = *(_BYTE *)(v0 + 777);
  v17 = *(void **)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 296);
  v18 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = v13;
  *(_BYTE *)(v0 + 88) = v16;
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v14;
  *(_QWORD *)(v0 + 112) = v15;
  *(_QWORD *)(v0 + 120) = v17;
  swift_bridgeObjectRetain(v15);
  v20 = v17;
  v21 = v4;
  sub_1007625AC(v0 + 72, v19, v18);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  v22 = *(_QWORD *)(v0 + 568);
  v23 = *(_QWORD *)(v0 + 560);
  v24 = *(_QWORD *)(v0 + 536);
  v25 = *(_QWORD *)(v0 + 528);
  v26 = *(_QWORD *)(v0 + 520);
  v27 = *(_QWORD *)(v0 + 504);
  v28 = *(_QWORD *)(v0 + 512);
  v30 = *(_QWORD *)(v0 + 488);
  v29 = *(_QWORD *)(v0 + 496);
  v32 = *(_QWORD *)(v0 + 456);
  v33 = *(_QWORD *)(v0 + 440);
  v34 = *(_QWORD *)(v0 + 416);
  v35 = *(_QWORD *)(v0 + 408);
  v36 = *(_QWORD *)(v0 + 400);
  v37 = *(_QWORD *)(v0 + 376);
  v38 = *(_QWORD *)(v0 + 368);
  v39 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 576));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100761564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 528);
  v6 = *(_QWORD *)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 504);
  v7 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 496);
  v11 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 400);
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 360);
  swift_release();
  swift_release();
  sub_1000126B0(v5, type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007616BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_10005972C(a3, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = (v15 + 40) & ~v15;
  v17 = *(unsigned __int8 *)(v5 + 80);
  v18 = (v10 + v17 + v16) & ~v17;
  v19 = (char *)swift_allocObject(&unk_101090CE0, v18 + v6, v15 | v17 | 7);
  *((_QWORD *)v19 + 2) = 0;
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = v22;
  sub_1000126EC((uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v19[v16], type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v19[v18], v7, v4);
  swift_retain();
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_101106F68, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100761884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = sub_10001A9A8(&qword_1010F8318);
  v6[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[7] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[8] = v9;
  v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v6[10] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v6[11] = v11;
  v6[12] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100761918, 0, 0);
}

uint64_t sub_100761918()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[9];
  v4 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v8 = v0[5];
  v7 = v0[6];
  v9 = v0[3];
  sub_10005972C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v8, v7);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v5 + 80);
  v13 = (v2 + v12 + v11) & ~v12;
  v14 = swift_allocObject(&unk_101090D08, v13 + v6, v10 | v12 | 7);
  v0[13] = v14;
  *(_QWORD *)(v14 + 16) = v9;
  sub_1000126EC(v1, v14 + v11, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v14 + v13, v3, v7);
  v15 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[14] = v16;
  *v16 = v0;
  v16[1] = sub_100761A4C;
  return unsafeBlocking<A>(_:)(v0[2], sub_10077ED00, v14, &type metadata for () + 1);
}

uint64_t sub_100761A4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 104);
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = *(_QWORD *)(*v0 + 72);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100761ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t (**v63)(uint64_t);
  uint64_t v64;
  unint64_t v65;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  v78 = (char *)a2;
  v73 = type metadata accessor for OwnedBeaconRecord(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v72 = v5;
  v75 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v68 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v67 - v10;
  v12 = sub_10001A9A8(&qword_1010F8318);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  v17 = (char *)&v67 - v16;
  v70 = *(_QWORD *)(a1 + 280);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v18((char *)&v67 - v16, a3, v12);
  v74 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18(v74, (uint64_t)v17, v12);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = (v19 + 16) & ~v19;
  v69 = swift_allocObject(&unk_101090D30, v20 + v14, v19 | 7);
  v76 = v13;
  v77 = v12;
  v21 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v69 + v20, v17, v12);
  v22 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v23 = qword_1011B7D38;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v25 = swift_allocObject(v24, 72, 7);
  v67 = xmmword_100E22B00;
  *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
  v26 = (uint64_t)&v78[*(int *)(v73 + 20)];
  v27 = type metadata accessor for UUID(0);
  v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v73 = v26;
  v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
  v31 = v30;
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = sub_10001AA00();
  *(_QWORD *)(v25 + 32) = v29;
  *(_QWORD *)(v25 + 40) = v31;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Unpair owned beacon: %@", 23, 2, v25);
  v32 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v32);
  v33 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v68 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  v34 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v80, v6, v34);
  dispatch thunk of RawRepresentable.rawValue.getter(&v79, v6, v34);
  v36 = v79;
  v35 = v80;
  v37 = *(void (**)(char *, uint64_t))(v33 + 8);
  v37(v9, v6);
  v38 = ((uint64_t (*)(char *, uint64_t))v37)(v11, v6);
  v39 = v35 == v36;
  v40 = v77;
  v41 = v74;
  if (v39)
  {
    v42 = static os_log_type_t.default.getter(v38);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    v43 = sub_10008806C();
    v44 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v43, 0, 0);
    *v45 = 0;
    v80 = v44;
    swift_errorRetain(v44);
    v46 = CheckedContinuation.resume(throwing:)(&v80, v40);
    CheckedContinuation.resume(returning:)(v46, v40);
    swift_errorRelease(v44);
  }
  v47 = dispatch_group_create();
  dispatch_group_enter(v47);
  v48 = sub_10001A9A8(&qword_1011003C0);
  v49 = *(_QWORD *)(v27 - 8);
  v50 = *(unsigned __int8 *)(v49 + 80);
  v51 = (v50 + 32) & ~v50;
  v52 = swift_allocObject(v48, v51 + *(_QWORD *)(v49 + 72), v50 | 7);
  *(_OWORD *)(v52 + 16) = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v52 + v51, v73, v27);
  v53 = swift_allocObject(&unk_101090D58, 24, 7);
  *(_QWORD *)(v53 + 16) = v47;
  v54 = v47;
  v55 = v70;
  sub_10075B3D0(v52, (uint64_t)sub_10028F938, v53, (uint64_t)&unk_10108FDB8, (uint64_t)sub_10077CA6C, (uint64_t)&unk_10108FDD0);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  v56 = v78;
  v57 = v75;
  sub_10005972C((uint64_t)v78, v75, type metadata accessor for OwnedBeaconRecord);
  v58 = *(unsigned __int8 *)(v71 + 80);
  v59 = (v58 + 16) & ~v58;
  v60 = (v72 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8;
  v62 = swift_allocObject(&unk_101090D80, v61 + 10, v58 | 7);
  sub_1000126EC(v57, v62 + v59, type metadata accessor for OwnedBeaconRecord);
  v63 = (uint64_t (**)(uint64_t))(v62 + v60);
  v64 = v69;
  *v63 = sub_10077EDD4;
  v63[1] = (uint64_t (*)(uint64_t))v64;
  v65 = v62 + v61;
  *(_QWORD *)v65 = v55;
  *(_WORD *)(v65 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_1009FB1F0(v56, (void (*)(_QWORD))sub_100297834, v62);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v41, v77);
}

uint64_t sub_100762028(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    v1 = sub_10001A9A8(&qword_1010F8318);
    CheckedContinuation.resume(throwing:)(&v4, v1);
  }
  v2 = sub_10001A9A8(&qword_1010F8318);
  return CheckedContinuation.resume(returning:)(v2, v2);
}

uint64_t sub_100762084@<X0>(void *a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, __n128);
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  BOOL *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v39 = a3;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SafeLocation(0);
  v41 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v47 = (uint64_t)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - v15;
  v17 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v17);
  v38 = (uint64_t)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  v40 = sub_10076FF48(a1);
  v46 = v40[2];
  if (v46)
  {
    v20 = 0;
    v50 = a2 + v19;
    v43 = (char *)v40 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
    v42 = *(_QWORD *)(v41 + 72);
    v44 = v16;
    v45 = v12;
    do
    {
      v48 = v20;
      sub_10005972C((uint64_t)&v43[v42 * v20], (uint64_t)v16, type metadata accessor for SafeLocation);
      v24 = *(_QWORD *)&v16[*(int *)(v12 + 52)];
      v25 = *(_QWORD *)(v24 + 16);
      v49 = v24;
      if (v25)
      {
        v26 = v24 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v21 = swift_bridgeObjectRetain(v24);
        v27 = *(_QWORD *)(v6 + 72);
        v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16);
        while (1)
        {
          v28(v11, v26, v5, v21);
          v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
          ((void (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v11, 0, 1, v5);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
            break;
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
          v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v50, v5, v29);
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          if ((v30 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v16 = v44;
            v31 = v47;
            sub_10005972C((uint64_t)v44, v47, type metadata accessor for SafeLocation);
            v12 = v45;
            v32 = *(unsigned __int8 *)(v31 + *(int *)(v45 + 48));
            sub_1000126B0(v31, type metadata accessor for SafeLocation);
            if (v32 != 1)
              goto LABEL_6;
            v33 = v38;
            sub_1000126EC((uint64_t)v16, v38, type metadata accessor for SafeLocation);
            v34 = v41;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v33, 0, 1, v12);
            goto LABEL_16;
          }
          v26 += v27;
          if (!--v25)
            goto LABEL_4;
        }
      }
      else
      {
        v21 = swift_bridgeObjectRetain(v24);
        v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
LABEL_4:
        v22(v11, 1, 1, v5, v21);
      }
      swift_bridgeObjectRelease();
      v16 = v44;
      v23 = v47;
      sub_10005972C((uint64_t)v44, v47, type metadata accessor for SafeLocation);
      sub_1000126B0(v23, type metadata accessor for SafeLocation);
      v12 = v45;
LABEL_6:
      v20 = v48 + 1;
      sub_1000126B0((uint64_t)v16, type metadata accessor for SafeLocation);
    }
    while (v20 != v46);
  }
  v34 = v41;
  v33 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v38, 1, 1, v12);
LABEL_16:
  swift_bridgeObjectRelease();
  v35 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v12) != 1;
  result = sub_100004048(v33, &qword_101106E40);
  *v39 = v35;
  return result;
}

uint64_t sub_100762484(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  _BYTE v13[16];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(a1 + 280);
  v9 = *(void **)(v8 + 96);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v9;
  v10 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) != 0)
  {
    __chkstk_darwin(result);
    *(_QWORD *)&v13[-32] = v8;
    *(_QWORD *)&v13[-24] = a2;
    *(_QWORD *)&v13[-16] = 0;
    *(_QWORD *)&v13[-8] = 0;
    v12 = sub_10001A9A8(&qword_101106E40);
    return OS_dispatch_queue.sync<A>(execute:)(sub_10077F0F8, &v13[-48], v12);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007625AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v4 = v3;
  v35 = a2;
  v36 = a3;
  v6 = sub_10001A9A8(&qword_101106F78);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101106F80);
  v34 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA140 != -1)
    swift_once(&qword_1010EA140, sub_100A3A528);
  v12 = qword_1011B7B70;
  v13 = *(_QWORD *)(v4 + 280);
  v14 = type metadata accessor for SeparationAlertCoalescer();
  v15 = swift_allocObject(v14, 32, 7);
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v12;
  swift_retain();
  swift_retain();
  v16 = sub_100D8535C((_QWORD *)a1);
  swift_retain();
  sub_10077F244((_QWORD *)a1);
  swift_retain();
  v17 = sub_100778E14(v16, v4, a1, v15);
  swift_release();
  sub_10077F290(a1);
  swift_bridgeObjectRelease();
  swift_release();
  v37 = v17;
  v18 = sub_10001A9A8(&qword_101106F88);
  v19 = sub_10001A9A8(&qword_101106F90);
  v20 = sub_1000193A4(&qword_101106F98, &qword_101106F88, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v21 = sub_1000193A4(&qword_101106FA0, &qword_101106F90, (const char *)&protocol conformance descriptor for [A]);
  Publishers.MergeMany.init<A>(_:)(&v37, v18, v19, v20, v21);
  v22 = sub_1000193A4(&qword_101106FA8, &qword_101106F78, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
  Publisher.collect()(v6, v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v6);
  v23 = sub_1000193A4(&qword_101106FB0, &qword_101106F80, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
  v24 = Publisher.eraseToAnyPublisher()(v9, v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  v37 = (_QWORD *)v24;
  v25 = swift_allocObject(&unk_101090DD0, 88, 7);
  v26 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v25 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v25 + 32) = v26;
  *(_OWORD *)(v25 + 48) = *(_OWORD *)(a1 + 32);
  v27 = v35;
  v28 = v36;
  *(_QWORD *)(v25 + 64) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v25 + 72) = v27;
  *(_QWORD *)(v25 + 80) = v28;
  sub_10077F244((_QWORD *)a1);
  swift_retain();
  v29 = sub_10001A9A8(&qword_101106FB8);
  v30 = sub_1000193A4(&qword_101106FC0, &qword_101106FB8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_10077F320, v25, v29, v30);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1007628F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t result;
  __int128 v16[2];

  v10 = swift_allocObject(&unk_101090E20, 24, 7);
  swift_weakInit(v10 + 16, a1);
  sub_100030784(a4, (uint64_t)v16);
  v11 = swift_allocObject(&unk_101090E48, 128, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 40) = v12;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v11 + 72) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v11 + 80) = a3;
  sub_10000F9FC(v16, v11 + 88);
  v13 = sub_10001A9A8(&qword_101106FD0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  sub_10077F244((_QWORD *)a2);
  swift_retain();
  result = Future.init(_:)(sub_10077F3C0, v11, v14);
  *a5 = result;
  return result;
}

uint64_t sub_1007629EC(uint64_t (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  __int128 v26[2];
  _BYTE v27[24];

  v25 = a5;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_allocObject(&unk_101090E70, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  a3 += 16;
  swift_beginAccess(a3, v27, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v17 = Strong;
    v18 = swift_allocObject(&unk_101090E20, 24, 7);
    swift_weakInit(v18 + 16, v17);
    sub_100030784(a6, (uint64_t)v26);
    v19 = swift_allocObject(&unk_101090E98, 144, 7);
    v20 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + 40) = *(_OWORD *)a4;
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = sub_10077D014;
    *(_QWORD *)(v19 + 32) = v15;
    *(_OWORD *)(v19 + 56) = v20;
    *(_OWORD *)(v19 + 72) = *(_OWORD *)(a4 + 32);
    v21 = v25;
    *(_QWORD *)(v19 + 88) = *(_QWORD *)(a4 + 48);
    *(_QWORD *)(v19 + 96) = v21;
    sub_10000F9FC(v26, v19 + 104);
    swift_retain();
    swift_retain();
    sub_10077F244((_QWORD *)a4);
    v22 = swift_retain();
    UUID.init()(v22);
    Sequencer.perform(identifier:_:enqueueCompletion:)(v14, sub_10077F430, v19, 0, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_retain();
    swift_release();
    *(_QWORD *)&v26[0] = 0;
    BYTE8(v26[0]) = 1;
    return a1(v26);
  }
}

uint64_t sub_100762BE0(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t (*v49)(_QWORD);
  uint64_t (*v50)(_QWORD, _QWORD);
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[32];
  uint64_t v58;
  __int128 v59[2];
  __int128 v60;
  uint64_t v61;
  __int128 v62[2];
  uint64_t v63[5];
  _BYTE v64[32];

  v14 = a3 + 16;
  swift_beginAccess(a3 + 16, v64, 0, 0);
  if (swift_weakLoadStrong(v14))
  {
    v50 = a4;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B75D0);
    sub_10077F244((_QWORD *)a6);
    v16 = sub_10077F244((_QWORD *)a6);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v51 = a2;
    v49 = a1;
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v63[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = *(_OWORD *)(a6 + 16);
      v52 = *(_OWORD *)a6;
      v53 = v21;
      v54 = *(_OWORD *)(a6 + 32);
      v55 = *(_QWORD *)(a6 + 48);
      sub_10077F244((_QWORD *)a6);
      v22 = String.init<A>(describing:)(&v52, &type metadata for SeparationMonitoringAlertContext);
      *(_QWORD *)&v52 = sub_100016940(v22, v23, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, (char *)&v52 + 8, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      sub_10077F290(a6);
      sub_10077F290(a6);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Attempting to coallesce notification with context: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10077F290(a6);
      sub_10077F290(a6);
    }

    sub_100D86154(&v52, (uint64_t)v63, a8);
    sub_10000F9B8((uint64_t)v63, (uint64_t)&v60, &qword_101106FE8);
    if (v61)
    {
      sub_10000F9FC(&v60, (uint64_t)v62);
      sub_100030784((uint64_t)v62, (uint64_t)&v60);
      v26 = sub_100030784((uint64_t)&v52, (uint64_t)v59);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.default.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = swift_slowAlloc(22, -1);
        v30 = swift_slowAlloc(64, -1);
        v58 = v30;
        *(_DWORD *)v29 = 136315394;
        sub_100030784((uint64_t)&v60, (uint64_t)&v56);
        v31 = sub_10001A9A8(&qword_101106FF0);
        v32 = String.init<A>(describing:)(&v56, v31);
        v56 = sub_100016940(v32, v33, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v29 + 4, v29 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
        *(_WORD *)(v29 + 12) = 2080;
        sub_100030784((uint64_t)v59, (uint64_t)&v56);
        v34 = String.init<A>(describing:)(&v56, v31);
        v56 = sub_100016940(v34, v35, &v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v29 + 14, v29 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Replacing notification %s with %s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
      }

      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      sub_100030784((uint64_t)v62, (uint64_t)&v60);
      sub_100030784((uint64_t)&v52, (uint64_t)v59);
      v44 = (_QWORD *)swift_allocObject(&unk_101090EE8, 128, 7);
      sub_10000F9FC(&v60, (uint64_t)(v44 + 2));
      sub_10000F9FC(v59, (uint64_t)(v44 + 7));
      v44[12] = v50;
      v44[13] = a5;
      v44[14] = a1;
      v44[15] = v51;
      swift_retain();
      swift_retain();
      sub_100A3C37C(v62, &v52, (uint64_t)sub_10077F4CC, (uint64_t)v44);
      swift_release();
      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
    }
    else
    {
      sub_100004048((uint64_t)&v60, &qword_101106FE8);
      v36 = sub_100030784((uint64_t)&v52, (uint64_t)v62);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v59[0] = v40;
        *(_DWORD *)v39 = 136315138;
        sub_100030784((uint64_t)v62, (uint64_t)&v60);
        v41 = sub_10001A9A8(&qword_101106FF0);
        v42 = String.init<A>(describing:)(&v60, v41);
        *(_QWORD *)&v60 = sub_100016940(v42, v43, (uint64_t *)v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Posting notification %s", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      }

      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      sub_100030784((uint64_t)&v52, (uint64_t)v62);
      v45 = (_QWORD *)swift_allocObject(&unk_101090EC0, 88, 7);
      sub_10000F9FC(v62, (uint64_t)(v45 + 2));
      v45[7] = v50;
      v45[8] = a5;
      v45[9] = v49;
      v45[10] = v51;
      v46 = *((_QWORD *)&v53 + 1);
      v47 = v54;
      v48 = sub_10001AA44(&v52, *((uint64_t *)&v53 + 1));
      swift_retain();
      swift_retain();
      sub_100A3B794((uint64_t)v48, (uint64_t)sub_10077F47C, (uint64_t)v45, v46, v47);
      swift_release();
      swift_release();
    }
    sub_100004048((uint64_t)v63, &qword_101106FE8);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v52);
  }
  else
  {
    v24 = a4(0, 1);
    return a1(v24);
  }
}

uint64_t sub_1007632F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[32];
  uint64_t v31;
  _QWORD v32[5];
  _QWORD v33[6];

  v12 = a2 & 1;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B75D0);
  sub_100030784(a3, (uint64_t)v33);
  sub_100030784(a4, (uint64_t)v32);
  sub_10077F4E4(a1, v12);
  v14 = sub_10077F4E4(a1, v12);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    v28 = swift_slowAlloc(96, -1);
    v31 = v28;
    *(_DWORD *)v17 = 136315650;
    sub_100030784((uint64_t)v33, (uint64_t)&v29);
    v18 = sub_10001A9A8(&qword_101106FF0);
    v19 = String.init<A>(describing:)(&v29, v18);
    v29 = sub_100016940(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    *(_WORD *)(v17 + 12) = 2080;
    sub_100030784((uint64_t)v32, (uint64_t)&v29);
    v21 = String.init<A>(describing:)(&v29, v18);
    v29 = sub_100016940(v21, v22, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
    *(_WORD *)(v17 + 22) = 2080;
    v29 = a1;
    v30[0] = (_DWORD)v12 != 0;
    sub_10077F4E4(a1, v12);
    v23 = sub_10001A9A8((uint64_t *)&unk_101106FF8);
    v24 = String.init<A>(describing:)(&v29, v23);
    v29 = sub_100016940(v24, v25, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    sub_10077F500(a1, v12);
    sub_10077F500(a1, v12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Completed replacing old separation notification: %s with %s - result: %s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy(v28, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
    sub_10077F500(a1, v12);
    sub_10077F500(a1, v12);
  }

  v26 = a5(a1, v12);
  return a7(v26);
}

uint64_t sub_100763624(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _BYTE v26[32];
  uint64_t v27;
  _QWORD v28[5];

  v10 = a2 & 1;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B75D0);
  sub_100030784(a3, (uint64_t)v28);
  sub_10077F4E4(a1, v10);
  v12 = sub_10077F4E4(a1, v10);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v27 = v16;
    *(_DWORD *)v15 = 136315394;
    sub_100030784((uint64_t)v28, (uint64_t)&v25);
    v17 = sub_10001A9A8(&qword_101106FF0);
    v18 = String.init<A>(describing:)(&v25, v17);
    v25 = sub_100016940(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    *(_WORD *)(v15 + 12) = 2080;
    v25 = a1;
    v26[0] = (_DWORD)v10 != 0;
    sub_10077F4E4(a1, v10);
    v20 = sub_10001A9A8((uint64_t *)&unk_101106FF8);
    v21 = String.init<A>(describing:)(&v25, v20);
    v25 = sub_100016940(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_10077F500(a1, v10);
    sub_10077F500(a1, v10);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Completed posting new separation notification: %s - result: %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    sub_10077F500(a1, v10);
    sub_10077F500(a1, v10);
  }

  v23 = a4(a1, v10);
  return a6(v23);
}

void sub_1007638D8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, uint64_t))
{
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B75D0);
    sub_10077F244((_QWORD *)a2);
    v6 = sub_10077F244((_QWORD *)a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      *(_DWORD *)v9 = 136315138;
      v11 = *(_OWORD *)(a2 + 16);
      v28 = *(_OWORD *)a2;
      v29 = v11;
      v30 = *(_OWORD *)(a2 + 32);
      v31 = *(_QWORD *)(a2 + 48);
      v32 = v10;
      sub_10077F244((_QWORD *)a2);
      v12 = String.init<A>(describing:)(&v28, &type metadata for SeparationMonitoringAlertContext);
      *(_QWORD *)&v28 = sub_100016940(v12, v13, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 8, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      sub_10077F290(a2);
      sub_10077F290(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to post separation notifications for context: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_10077F290(a2);
      sub_10077F290(a2);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v24 = v23;
    v32 = 12;
    v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v32, v25, v24, v26);
    v27 = (void *)v28;
    a3(v28, 1);

  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B75D0);
    sub_10077F244((_QWORD *)a2);
    v15 = sub_10077F244((_QWORD *)a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      *(_DWORD *)v18 = 136315138;
      v20 = *(_OWORD *)(a2 + 16);
      v28 = *(_OWORD *)a2;
      v29 = v20;
      v30 = *(_OWORD *)(a2 + 32);
      v31 = *(_QWORD *)(a2 + 48);
      v32 = v19;
      sub_10077F244((_QWORD *)a2);
      v21 = String.init<A>(describing:)(&v28, &type metadata for SeparationMonitoringAlertContext);
      *(_QWORD *)&v28 = sub_100016940(v21, v22, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, (char *)&v28 + 8, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_10077F290(a2);
      sub_10077F290(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Successfuly posted separation notifications for context: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_10077F290(a2);
      sub_10077F290(a2);
    }

    a3(0, 0);
  }
}

void sub_100763CC0(uint64_t a1, uint64_t a2, void (*a3)(void *, unint64_t, uint64_t), uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;

  if (!a1)
    goto LABEL_19;
  v8 = a1;
  v9 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFFF8);
  if (!((unint64_t)a1 >> 62))
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v10)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (a1 >= 0)
    v22 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v22 = a1;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v22))
    goto LABEL_18;
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
  }
  else
  {
    if (!v9[2])
    {
      __break(1u);
      goto LABEL_22;
    }
    v9 = *(_QWORD **)(v8 + 32);
    swift_unknownObjectRetain(v9);
  }
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, "name");
  if (!v11)
  {
    swift_unknownObjectRelease(v9);
LABEL_19:
    type metadata accessor for SPSeparationMonitoringError(0);
    v24 = v23;
    v31 = 18;
    v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v32, &v31, v25, v24, v26);
    v27 = v32;
    a3(v32, 0, 1);

    return;
  }
  v12 = v11;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v8 = v13;

  if (qword_1010E9F10 != -1)
LABEL_22:
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B75D0);
  v15 = a5;
  swift_bridgeObjectRetain_n(v8, 2);
  v16 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v28 = (_QWORD *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v31 = (uint64_t)v16;
    v32 = (void *)v29;
    *(_DWORD *)v19 = 138412546;
    v30 = v9;
    v20 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
    *v28 = v16;

    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(v8);
    v31 = sub_100016940(v5, v8, (uint64_t *)&v32);
    v9 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received reverse geocoded address for location: %@: %s", (uint8_t *)v19, 0x16u);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v28, 1, v21);
    swift_slowDealloc(v28, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  a3((void *)v5, v8, 0);
  swift_unknownObjectRelease(v9);
  swift_bridgeObjectRelease();
}

uint64_t sub_10076408C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v6 = sub_10001A9A8(&qword_101106F18);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }
  swift_retain();
  v7 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_10076410C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id result;
  void *v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  unint64_t v25;
  _OWORD v26[2];
  _BYTE v27[24];
  uint64_t v28;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (_QWORD *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = objc_msgSend((id)objc_opt_self(NRPairedDeviceRegistry), "sharedInstance");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v10 = result;
  v11 = objc_msgSend(result, "getActivePairedDevice");

  if (!v11)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  v12 = objc_msgSend(v11, "valueForProperty:", NRDevicePropertyUDID);
  if (v12)
  {
    v13 = v12;
    _bridgeAnyObjectToAny(_:)(v26, v12);
    swift_unknownObjectRelease(v13);
  }
  else
  {
    memset(v26, 0, sizeof(v26));
  }
  sub_100005CF0((uint64_t)v26, (uint64_t)v27, (uint64_t *)&unk_1010F6390);
  if (!v28)
  {

    sub_100004048((uint64_t)v27, (uint64_t *)&unk_1010F6390);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  if ((swift_dynamicCast(&v24, v27, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {

    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  v14 = v25;
  v15 = HIBYTE(v25) & 0xF;
  if ((v25 & 0x2000000000000000) == 0)
    v15 = v24 & 0xFFFFFFFFFFFFLL;
  if (!v15)
  {

    swift_bridgeObjectRelease();
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  *v8 = v24;
  v8[1] = v14;
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  v16 = sub_1000188D0();
  v17 = *((_QWORD *)v16 + 2);
  if (v17)
  {
    v18 = *(unsigned __int8 *)(v3 + 80);
    v23[1] = v16;
    v19 = (uint64_t)&v16[(v18 + 32) & ~v18];
    v20 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_10005972C(v19, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      sub_100C72B64((uint64_t)&v5[*(int *)(v2 + 24)], (uint64_t)v8);
      if ((v21 & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      v19 += v20;
      if (!--v17)
      {
        v22 = 1;
        goto LABEL_23;
      }
    }
    sub_1000126EC((uint64_t)v5, a1, type metadata accessor for OwnedBeaconRecord);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
LABEL_23:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v22, 1, v2);
  swift_bridgeObjectRelease();

  return (id)sub_1000126B0((uint64_t)v8, type metadata accessor for StableIdentifier);
}

uint64_t sub_1007643D8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD v159[4];
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  const char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  _QWORD *v191;
  __int128 aBlock;
  uint64_t (*v193)(uint64_t);
  void *v194;
  uint64_t (*v195)();
  uint64_t v196;
  _QWORD *v197;
  char v198[8];
  uint64_t v199;
  uint64_t v200;

  v177 = a4;
  v176 = a3;
  v6 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  v160 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v162 = (uint64_t)v159 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = v8;
  __chkstk_darwin(v7);
  v168 = (uint64_t)v159 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v184 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v183 = (char *)v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v185 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)v159 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for DispatchQoS.QoSClass(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = type metadata accessor for UUID(0);
  v187 = *(_QWORD *)(v189 - 8);
  v16 = __chkstk_darwin(v189);
  v18 = (char *)v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v159[0] = (char *)v159 - v20;
  __chkstk_darwin(v19);
  v190 = (char *)v159 - v21;
  v171 = type metadata accessor for DispatchPredicate(0);
  v170 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v169 = (_QWORD *)((char *)v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v166 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v166);
  v167 = (char *)v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v24);
  v26 = (char *)v159 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B75D0);
  swift_bridgeObjectRetain_n(a1, 2);
  v174 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v188 = a1;
  v186 = v12;
  v179 = v10;
  v178 = v14;
  v173 = v18;
  if (v32)
  {
    v33 = swift_slowAlloc(12, -1);
    v175 = (void (*)(char *, _QWORD, uint64_t, uint64_t))a2;
    v34 = (uint8_t *)v33;
    v35 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain(a1);
    v36 = v189;
    v38 = Array.description.getter(v37, v189);
    v40 = v39;
    swift_bridgeObjectRelease();
    v41 = v38;
    a1 = v188;
    v197 = (_QWORD *)sub_100016940(v41, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Enabling separation monitoring for beacons: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v42 = v34;
    a2 = (uint64_t)v175;
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v36 = v189;
  }
  v43 = v187;
  if (*((_QWORD *)a1 + 2))
  {
    v44 = &a1[(*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80)];
    v45 = *(_QWORD *)(v187 + 72);
    v46 = *(void (**)(char *, char *, uint64_t, __n128))(v187 + 16);
    v47 = swift_bridgeObjectRetain(a1);
    v165 = "";
    v164 = "enableNotifyWhenFound";
    v163 = "onnect";
    v159[3] = v26;
    v159[2] = v44;
    v159[1] = v45;
    v46(v26, v44, v36, v47);
    v175 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56);
    v175(v26, 0, 1, v36);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v26, 1, v36) != 1)
    {
      v48 = (uint64_t)v190;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v190, v26, v36);
      sub_10080B648(v48, (uint64_t)&aBlock);
      if (v194)
      {
        sub_10000F9FC(&aBlock, (uint64_t)&v197);
        v49 = v199;
        v50 = v200;
        v51 = sub_10001AA44(&v197, v199);
        v52 = sub_100758F58((uint64_t)v51, a2, v49, v50);
        if (*((_QWORD *)v52 + 2))
        {
          Hasher.init(_seed:)(&aBlock);
          String.hash(into:)(&aBlock, 0x61654C6E69676562, 0xED0000676E696873);
          v53 = Hasher._finalize()() & ~(-1 << v52[32]);
          if (((*(_QWORD *)&v52[((v53 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v53) & 1) != 0)
            __asm { BR              X9 }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v54 = v173;
        v55 = v189;
        v56 = ((uint64_t (*)(char *, char *))v46)(v173, v190);
        v57 = Logger.logObject.getter(v56);
        v58 = static os_log_type_t.error.getter(v57);
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc(12, -1);
          v60 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v60;
          *(_DWORD *)v59 = 136315138;
          v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v62 = v55;
          v63 = dispatch thunk of CustomStringConvertible.description.getter(v55, v61);
          v191 = (_QWORD *)sub_100016940(v63, v64, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v191, &aBlock, v59 + 4, v59 + 12);
          swift_bridgeObjectRelease();
          v188 = *(char **)(v187 + 8);
          ((void (*)(char *, uint64_t))v188)(v54, v55);
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed to enable separation monitoring for unsupported beacon: %s", v59, 0xCu);
          swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v60, -1, -1);
          swift_slowDealloc(v59, -1, -1);
        }
        else
        {
          v62 = v55;
          v188 = *(char **)(v187 + 8);
          ((void (*)(char *, uint64_t))v188)(v54, v55);
        }

        v91 = v179;
        v92 = v178;
        v93 = v177;
        v94 = v176;
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v95 = v181;
        v96 = v180;
        v97 = v182;
        (*(void (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for DispatchQoS.QoSClass.default(_:), v182);
        v98 = (void *)static OS_dispatch_queue.global(qos:)(v96);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v96, v97);
        v99 = swift_allocObject(&unk_1010903D0, 32, 7);
        *(_QWORD *)(v99 + 16) = v94;
        *(_QWORD *)(v99 + 24) = v93;
        v195 = (uint64_t (*)())sub_10077D128;
        v196 = v99;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v193 = sub_100016FB8;
        v194 = &unk_1010903E8;
        v100 = _Block_copy(&aBlock);
        v101 = swift_retain();
        static DispatchQoS.unspecified.getter(v101);
        v191 = _swiftEmptyArrayStorage;
        v102 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v103 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v104 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v105 = v183;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v191, v103, v104, v91, v102);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v92, v105, v100);
        _Block_release(v100);

        (*(void (**)(char *, uint64_t))(v184 + 8))(v105, v91);
        (*(void (**)(char *, uint64_t))(v185 + 8))(v92, v186);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
        ((void (*)(char *, uint64_t))v188)(v190, v62);
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
        v133 = v159[0];
        v134 = ((uint64_t (*)(_QWORD, char *, uint64_t))v46)(v159[0], v190, v36);
        v135 = v36;
        v136 = Logger.logObject.getter(v134);
        v137 = static os_log_type_t.error.getter(v136);
        if (os_log_type_enabled(v136, v137))
        {
          v138 = (uint8_t *)swift_slowAlloc(12, -1);
          v139 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v139;
          *(_DWORD *)v138 = 136315138;
          v140 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v141 = dispatch thunk of CustomStringConvertible.description.getter(v135, v140);
          v197 = (_QWORD *)sub_100016940(v141, v142, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v197, v198, v138 + 4, v138 + 12);
          swift_bridgeObjectRelease();
          v143 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v143(v133, v135);
          _os_log_impl((void *)&_mh_execute_header, v136, v137, "Failed to enable separation monitoring for unknown beacon: %s", v138, 0xCu);
          swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v139, -1, -1);
          swift_slowDealloc(v138, -1, -1);
        }
        else
        {
          v143 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
          v143(v133, v135);
        }

        v144 = v179;
        v145 = v178;
        v146 = v177;
        v147 = v176;
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v148 = v181;
        v149 = v180;
        v150 = v182;
        (*(void (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for DispatchQoS.QoSClass.default(_:), v182);
        v151 = (void *)static OS_dispatch_queue.global(qos:)(v149);
        (*(void (**)(char *, uint64_t))(v148 + 8))(v149, v150);
        v152 = swift_allocObject(&unk_101090380, 32, 7);
        *(_QWORD *)(v152 + 16) = v147;
        *(_QWORD *)(v152 + 24) = v146;
        v195 = sub_10077F7F8;
        v196 = v152;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v193 = sub_100016FB8;
        v194 = &unk_101090398;
        v153 = _Block_copy(&aBlock);
        v154 = swift_retain();
        static DispatchQoS.unspecified.getter(v154);
        v197 = _swiftEmptyArrayStorage;
        v155 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v156 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v157 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v158 = v183;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v197, v156, v157, v144, v155);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v145, v158, v153);
        _Block_release(v153);

        (*(void (**)(char *, uint64_t))(v184 + 8))(v158, v144);
        (*(void (**)(char *, uint64_t))(v185 + 8))(v145, v186);
        v143((uint64_t)v190, v189);
      }
      return swift_release();
    }
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v187 + 56);
    v66 = swift_bridgeObjectRetain(a1);
    v65(v26, 1, 1, v36, v66);
  }
  swift_bridgeObjectRelease();
  v67 = *(void **)(a2 + 96);
  v68 = v169;
  *v169 = v67;
  v69 = v170;
  v70 = v171;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v170 + 104))(v68, enum case for DispatchPredicate.notOnQueue(_:), v171);
  v71 = v67;
  v72 = _dispatchPreconditionTest(_:)(v68);
  (*(void (**)(_QWORD *, uint64_t))(v69 + 8))(v68, v70);
  if ((v72 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1007659A8);
  }
  v73 = (uint64_t)v167;
  OS_dispatch_queue.sync<A>(execute:)(sub_10077D05C, a2, v166);
  v74 = type metadata accessor for LeashRecord(0);
  v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 48))(v73, 1, v74);
  sub_100004048(v73, &qword_101111B80);
  if (v75 == 1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v76 = v181;
    v77 = v180;
    v78 = v182;
    (*(void (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for DispatchQoS.QoSClass.default(_:), v182);
    v79 = (void *)static OS_dispatch_queue.global(qos:)(v77);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
    v80 = swift_allocObject(&unk_1010902B8, 32, 7);
    v81 = v177;
    *(_QWORD *)(v80 + 16) = v176;
    *(_QWORD *)(v80 + 24) = v81;
    v195 = (uint64_t (*)())sub_10077D074;
    v196 = v80;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v193 = sub_100016FB8;
    v194 = &unk_1010902D0;
    v82 = _Block_copy(&aBlock);
    v83 = swift_retain();
    v84 = v178;
    static DispatchQoS.unspecified.getter(v83);
    v197 = _swiftEmptyArrayStorage;
    v85 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v86 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v87 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v88 = v183;
    v89 = v86;
    v90 = v179;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v197, v89, v87, v179, v85);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v84, v88, v82);
    _Block_release(v82);

    (*(void (**)(char *, uint64_t))(v184 + 8))(v88, v90);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v84, v186);
  }
  else
  {
    v106 = swift_allocObject(&unk_101090308, 24, 7);
    *(_QWORD *)(v106 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v107 = v168;
    sub_100765BF0((uint64_t)sub_10077CA94, a2, (uint64_t)sub_10077D0A0, v106, (uint64_t *)&unk_101106E50, (uint64_t)sub_10077CAE0, v168);
    swift_release();
    swift_release();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v108 = v181;
    v109 = a2;
    v110 = v180;
    v111 = v182;
    (*(void (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for DispatchQoS.QoSClass.default(_:), v182);
    v112 = (void *)static OS_dispatch_queue.global(qos:)(v110);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v111);
    v113 = v107;
    v114 = v162;
    sub_10000F9B8(v113, v162, (uint64_t *)&unk_101106E50);
    v115 = *(unsigned __int8 *)(v160 + 80);
    v116 = (v115 + 16) & ~v115;
    v117 = (v161 + v116 + 7) & 0xFFFFFFFFFFFFFFF8;
    v118 = (v117 + 15) & 0xFFFFFFFFFFFFFFF8;
    v119 = (v118 + 23) & 0xFFFFFFFFFFFFFFF8;
    v120 = swift_allocObject(&unk_101090330, v119 + 8, v115 | 7);
    sub_100005CF0(v114, v120 + v116, (uint64_t *)&unk_101106E50);
    *(_QWORD *)(v120 + v117) = a1;
    v121 = (_QWORD *)(v120 + v118);
    v122 = v177;
    *v121 = v176;
    v121[1] = v122;
    *(_QWORD *)(v120 + v119) = v109;
    v195 = sub_10077D0AC;
    v196 = v120;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v193 = sub_100016FB8;
    v194 = &unk_101090348;
    v123 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v124 = swift_retain();
    v125 = v178;
    static DispatchQoS.unspecified.getter(v124);
    v197 = _swiftEmptyArrayStorage;
    v126 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v127 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v128 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v129 = v183;
    v130 = v127;
    v131 = v179;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v197, v130, v128, v179, v126);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v125, v129, v123);
    _Block_release(v123);

    (*(void (**)(char *, uint64_t))(v184 + 8))(v129, v131);
    (*(void (**)(char *, uint64_t))(v185 + 8))(v125, v186);
    sub_100004048(v168, (uint64_t *)&unk_101106E50);
  }
  return swift_release();
}

void sub_1007659FC(void (*a1)(void *, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B75D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to enable separation monitoring due to missing leash record.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  type metadata accessor for SPSeparationMonitoringError(0);
  v8 = v7;
  v12 = 4;
  v9 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v10 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&v13, &v12, v9, v8, v10);
  v11 = v13;
  a1(v13, 1);

}

uint64_t sub_100765B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;

  v4 = *(int *)(type metadata accessor for LeashRecord(0) + 24);
  v9 = *(_QWORD *)(a1 + v4);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a2);
  sub_1003028FC(v5);
  v6 = sub_10001B664(v9);
  swift_bridgeObjectRelease();
  v7 = sub_100508DAC(v6);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v4) = v7;
  return result;
}

uint64_t sub_100765BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint8_t *v42;
  id v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];

  v50 = a7;
  v51 = a6;
  v49 = a4;
  v46 = a2;
  v47 = a3;
  v45 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v41 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = v7;
  v20 = *(void **)(v7 + 96);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.notOnQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  v22 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) != 0)
  {
    v43 = v21;
    v44 = a5;
    UUID.init()(v22);
    if (qword_1010E9F10 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9F10, sub_10075AEB4);
LABEL_3:
  v23 = type metadata accessor for Logger(0);
  sub_10001A9E8(v23, (uint64_t)qword_1011B75D0);
  v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v53[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v42 = v27 + 4;
    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v9, v29);
    v32 = v31;
    v52 = sub_100016940(v30, v31, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v42, v27 + 12);
    swift_bridgeObjectRelease(v32);
    v33 = *(void (**)(char *, uint64_t))(v10 + 8);
    v33(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Queueing synced modify operation with identifier: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    v33 = *(void (**)(char *, uint64_t))(v10 + 8);
    v33(v13, v9);
  }

  __chkstk_darwin(v34);
  v35 = v44;
  v36 = v45;
  *(&v41 - 6) = (uint64_t)v15;
  *(&v41 - 5) = v36;
  v37 = v48;
  *(&v41 - 4) = v46;
  *(&v41 - 3) = v37;
  v38 = v49;
  *(&v41 - 2) = v47;
  *(&v41 - 1) = v38;
  v39 = sub_10001A9A8(v35);
  OS_dispatch_queue.sync<A>(execute:)(v51, &v41 - 8, v39);
  return ((uint64_t (*)(char *, uint64_t))v33)(v15, v9);
}

uint64_t sub_100765F30(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint8_t *v39;
  void (*v40)(void *, uint64_t);
  uint64_t v41;
  _QWORD v42[3];
  _BYTE v43[16];
  uint64_t v44;
  void *v45;

  v8 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v10, (uint64_t *)&unk_101106E50);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B75D0);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v41 = a4;
      v18 = v17;
      v45 = (void *)v17;
      *(_DWORD *)v16 = 136315138;
      swift_getErrorValue(v11, v43, v42);
      v19 = Error.localizedDescription.getter(v42[1], v42[2]);
      v44 = sub_100016940(v19, v20, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to modify leash record due to: %s", v16, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v34 = v33;
    v44 = 14;
    v35 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v36 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v45, &v44, v35, v34, v36);
    v37 = v45;
    a3(v45, 1);
    swift_errorRelease(v11);

  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B75D0);
    swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v41 = a4;
      v27 = v26;
      v45 = (void *)v26;
      v40 = a3;
      *(_DWORD *)v25 = 136315138;
      v39 = v25 + 4;
      v28 = type metadata accessor for UUID(0);
      swift_bridgeObjectRetain(a2);
      v30 = Array.description.getter(v29, v28);
      v32 = v31;
      swift_bridgeObjectRelease();
      v44 = sub_100016940(v30, v32, (uint64_t *)&v45);
      a3 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v39, v25 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Completed enabling separation monitoring for beacons: %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a3(0, 0);
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_101106E50);
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  type metadata accessor for Transaction(0);
  static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  return sub_1007EEF64(16);
}

uint64_t sub_100766404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  uint64_t v62;
  void (*v63)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  uint8_t *v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  void (*v166)(char *, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  void *v173;
  uint64_t v174;
  void *v175;
  char *v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v200;
  uint8_t *v201;
  unint64_t v202;
  uint64_t v203;
  __int128 v204;
  unsigned int v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint8_t *v212;
  char *v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unsigned __int8 *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  __int128 aBlock;
  __int128 v245;
  uint64_t (*v246)();
  uint64_t v247;

  v225 = a4;
  v224 = a3;
  v234 = a2;
  v218 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v217 = *(_QWORD *)(v218 - 8);
  v5 = __chkstk_darwin(v218);
  v216 = (char *)&v200 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v215 = (char *)&v200 - v7;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v206 = (char *)&v200 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v211 = (char *)&v200 - v13;
  v14 = __chkstk_darwin(v12);
  v213 = (char *)&v200 - v15;
  v16 = __chkstk_darwin(v14);
  v238 = (char *)&v200 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v200 - v18;
  v20 = type metadata accessor for DispatchWorkItemFlags(0);
  v228 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v227 = (char *)&v200 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v230 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v229 = (char *)&v200 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = type metadata accessor for DispatchQoS.QoSClass(0);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v200 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  v208 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v210 = (uint64_t)&v200 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = v27;
  __chkstk_darwin(v26);
  v214 = (uint64_t)&v200 - v28;
  v29 = sub_10001A9A8(&qword_1010ED860);
  v30 = __chkstk_darwin(v29);
  v32 = (char *)&v200 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v34 = (char *)&v200 - v33;
  v35 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v35);
  v236 = (uint64_t *)((char *)&v200 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  v233 = type metadata accessor for LeashRecord(0);
  v237 = *(unsigned __int8 **)(v233 - 8);
  __chkstk_darwin(v233);
  v232 = (uint64_t)&v200 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B75D0);
  v40 = swift_bridgeObjectRetain_n(a1, 2);
  v220 = v39;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v231 = v22;
  v226 = v20;
  v240 = v19;
  if (v43)
  {
    v219 = v34;
    v44 = a1;
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v235 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v235;
    v212 = v45;
    *(_DWORD *)v45 = 136315138;
    v207 = (uint64_t)(v45 + 4);
    v46 = swift_bridgeObjectRetain(a1);
    v47 = v9;
    v48 = Array.description.getter(v46, v8);
    v50 = v49;
    swift_bridgeObjectRelease(v44);
    v51 = v48;
    v9 = v47;
    *(_QWORD *)&v241 = sub_100016940(v51, v50, (uint64_t *)&aBlock);
    v20 = v226;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v207, v45 + 12);
    swift_bridgeObjectRelease_n(v44, 2);
    v52 = v50;
    a1 = v44;
    v34 = v219;
    swift_bridgeObjectRelease(v52);
    v53 = v42;
    v54 = v212;
    _os_log_impl((void *)&_mh_execute_header, v41, v53, "Disabling separation monitoring for beacons: %s", v212, 0xCu);
    v55 = v235;
    swift_arrayDestroy(v235, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v56 = v20;
  v57 = sub_100889888();
  v58 = v57;
  v59 = v57[2];
  v60 = v237;
  v239 = v9;
  if (v59)
  {
    v61 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v236;
    sub_10005972C((uint64_t)v57 + ((v237[80] + 32) & ~(unint64_t)v237[80]), (uint64_t)v236, type metadata accessor for LeashRecord);
    v62 = 0;
  }
  else
  {
    v62 = 1;
    v61 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v236;
  }
  v63 = (void (*)(uint64_t (*)(_QWORD, _QWORD, _QWORD), uint64_t, uint64_t, uint64_t))*((_QWORD *)v60 + 7);
  v64 = v60;
  v65 = v233;
  v63(v61, v62, 1, v233);
  swift_bridgeObjectRelease(v58);
  if ((*((unsigned int (**)(_QWORD, uint64_t, uint64_t))v64 + 6))(v61, 1, v65) != 1)
  {
    sub_1000126EC((uint64_t)v61, v232, type metadata accessor for LeashRecord);
    if (*(_QWORD *)(a1 + 16))
    {
      v201 = *(uint8_t **)(a1 + 16);
      v78 = v239;
      v202 = (*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      v79 = a1 + v202;
      v80 = *(_QWORD *)(v239 + 72);
      v81 = *(unsigned __int8 **)(v239 + 16);
      v205 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
      v82 = a1;
      swift_bridgeObjectRetain(a1);
      v83 = 0;
      v204 = xmmword_100E22B00;
      v203 = a1;
      v219 = v34;
      v237 = v81;
      v200 = v79;
      v235 = v80;
LABEL_14:
      v212 = v83;
      ((void (*)(char *, uint64_t, uint64_t))v81)(v34, v79 + v80 * (_QWORD)v83, v8);
      v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
      v84(v34, 0, 1, v8);
      v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48);
      if (v85(v34, 1, v8) != 1)
      {
        v236 = *(_QWORD **)(v78 + 32);
        v86 = ((uint64_t (*)(char *, char *, uint64_t))v236)(v240, v34, v8);
        v87 = static os_log_type_t.info.getter(v86);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v88 = qword_1011B7D38;
        v89 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v90 = swift_allocObject(v89, 72, 7);
        *(_OWORD *)(v90 + 16) = v204;
        v91 = UUID.uuidString.getter(v90);
        v93 = v92;
        *(_QWORD *)(v90 + 56) = &type metadata for String;
        *(_QWORD *)(v90 + 64) = sub_10001AA00();
        *(_QWORD *)(v90 + 32) = v91;
        *(_QWORD *)(v90 + 40) = v93;
        os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "beaconRecord(for uuid: %@)", 26, 2, v90);
        v94 = swift_bridgeObjectRelease(v90);
        v95 = v215;
        static SystemInfo.lockState.getter(v94);
        v96 = v217;
        v97 = v216;
        v98 = v218;
        (*(void (**)(char *, _QWORD, uint64_t))(v217 + 104))(v216, v205, v218);
        v99 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
        LOBYTE(v88) = dispatch thunk of static Equatable.== infix(_:_:)(v95, v97, v98, v99);
        v100 = *(void (**)(char *, uint64_t))(v96 + 8);
        v100(v97, v98);
        v101 = ((uint64_t (*)(char *, uint64_t))v100)(v95, v98);
        if ((v88 & 1) != 0)
        {
          v155 = static os_log_type_t.default.getter(v101);
          os_log(_:dso:log:_:_:)(v155, &_mh_execute_header, qword_1011B7D38, "beaconRecord call failed because in device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
          v246 = 0;
          aBlock = 0u;
          v245 = 0u;
          v108 = (void (*)(char *, uint64_t, uint64_t))v237;
        }
        else
        {
          v207 = sub_100017368();
          v102 = *(_QWORD *)(v207 + 16);
          v103 = v213;
          if (v102)
          {
            v104 = v207 + 32;
            while (1)
            {
              sub_100030784(v104, (uint64_t)&v241);
              v105 = v242;
              v106 = v243;
              sub_10001AA44(&v241, v242);
              v107 = v238;
              (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v106 + 8) + 8) + 32))(v105);
              LOBYTE(v105) = static UUID.== infix(_:_:)(v107, v240);
              (*(void (**)(char *, uint64_t))(v239 + 8))(v107, v8);
              if ((v105 & 1) != 0)
                break;
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v241);
              v104 += 40;
              if (!--v102)
                goto LABEL_22;
            }
            sub_10000F9FC(&v241, (uint64_t)&aBlock);
          }
          else
          {
LABEL_22:
            v246 = 0;
            aBlock = 0u;
            v245 = 0u;
          }
          swift_bridgeObjectRelease(v207);
          v108 = (void (*)(char *, uint64_t, uint64_t))v237;
          if (*((_QWORD *)&v245 + 1))
          {
            sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
            v109 = *(int *)(v233 + 24);
            v110 = *(_QWORD *)(v232 + v109);
            v111 = *(_QWORD *)(v110 + 16);
            if (v111)
            {
              ++v212;
              v112 = v110 + v202;
              swift_bridgeObjectRetain_n(v110, 2);
              while (1)
              {
                v108(v32, v112, v8);
                v84(v32, 0, 1, v8);
                if (v85(v32, 1, v8) == 1)
                  break;
                ((void (*)(char *, char *, uint64_t))v236)(v103, v32, v8);
                v113 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v114 = dispatch thunk of static Equatable.== infix(_:_:)(v103, v240, v8, v113);
                v115 = *(void (**)(char *, uint64_t))(v239 + 8);
                v115(v103, v8);
                if ((v114 & 1) != 0)
                {
                  swift_bridgeObjectRelease_n(v110, 2);
                  v115(v240, v8);
                  v83 = v212;
                  v82 = v203;
                  v78 = v239;
                  v34 = v219;
                  v81 = v237;
                  v79 = v200;
                  v80 = v235;
                  if (v212 != v201)
                    goto LABEL_14;
                  goto LABEL_36;
                }
                v112 += v235;
                --v111;
                v108 = (void (*)(char *, uint64_t, uint64_t))v237;
                if (!v111)
                  goto LABEL_44;
              }
            }
            else
            {
              swift_bridgeObjectRetain_n(*(_QWORD *)(v232 + v109), 2);
LABEL_44:
              v84(v32, 1, 1, v8);
            }
            swift_bridgeObjectRelease_n(v110, 2);
            swift_bridgeObjectRelease(v203);
            v176 = v211;
            v177 = ((uint64_t (*)(char *, char *, uint64_t))v108)(v211, v240, v8);
            v178 = Logger.logObject.getter(v177);
            v179 = static os_log_type_t.error.getter(v178);
            if (os_log_type_enabled(v178, v179))
            {
              v180 = (uint8_t *)swift_slowAlloc(12, -1);
              v181 = swift_slowAlloc(32, -1);
              *(_QWORD *)&aBlock = v181;
              *(_DWORD *)v180 = 136315138;
              v182 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              v183 = dispatch thunk of CustomStringConvertible.description.getter(v8, v182);
              v185 = v184;
              *(_QWORD *)&v241 = sub_100016940(v183, v184, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v180 + 4, v180 + 12);
              swift_bridgeObjectRelease(v185);
              v166 = *(void (**)(char *, uint64_t))(v239 + 8);
              v166(v176, v8);
              _os_log_impl((void *)&_mh_execute_header, v178, v179, "Failed to disable separation monitoring for unleashed beacon: %s", v180, 0xCu);
              swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v181, -1, -1);
              swift_slowDealloc(v180, -1, -1);
            }
            else
            {
              v166 = *(void (**)(char *, uint64_t))(v239 + 8);
              v166(v176, v8);
            }

            v167 = v226;
            v186 = v225;
            v187 = v224;
            v188 = v223;
            v189 = v222;
            v190 = v221;
            sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
            (*(void (**)(char *, _QWORD, uint64_t))(v189 + 104))(v190, enum case for DispatchQoS.QoSClass.default(_:), v188);
            v173 = (void *)static OS_dispatch_queue.global(qos:)(v190);
            (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v188);
            v191 = swift_allocObject(&unk_10108FF20, 32, 7);
            *(_QWORD *)(v191 + 16) = v187;
            *(_QWORD *)(v191 + 24) = v186;
            v246 = (uint64_t (*)())sub_10077CAC4;
            v247 = v191;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v175 = &unk_10108FF38;
            goto LABEL_49;
          }
        }
        sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
        swift_bridgeObjectRelease(v203);
        v156 = v206;
        v157 = ((uint64_t (*)(char *, char *, uint64_t))v108)(v206, v240, v8);
        v158 = Logger.logObject.getter(v157);
        v159 = static os_log_type_t.error.getter(v158);
        if (os_log_type_enabled(v158, v159))
        {
          v160 = (uint8_t *)swift_slowAlloc(12, -1);
          v161 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v161;
          *(_DWORD *)v160 = 136315138;
          v162 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v163 = dispatch thunk of CustomStringConvertible.description.getter(v8, v162);
          v165 = v164;
          *(_QWORD *)&v241 = sub_100016940(v163, v164, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v160 + 4, v160 + 12);
          swift_bridgeObjectRelease(v165);
          v166 = *(void (**)(char *, uint64_t))(v239 + 8);
          v166(v156, v8);
          _os_log_impl((void *)&_mh_execute_header, v158, v159, "Failed to disable separation monitoring for unknown beacon: %s", v160, 0xCu);
          swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v161, -1, -1);
          swift_slowDealloc(v160, -1, -1);
        }
        else
        {
          v166 = *(void (**)(char *, uint64_t))(v239 + 8);
          v166(v156, v8);
        }

        v167 = v226;
        v168 = v225;
        v169 = v224;
        v170 = v223;
        v171 = v222;
        v172 = v221;
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        (*(void (**)(char *, _QWORD, uint64_t))(v171 + 104))(v172, enum case for DispatchQoS.QoSClass.default(_:), v170);
        v173 = (void *)static OS_dispatch_queue.global(qos:)(v172);
        (*(void (**)(char *, uint64_t))(v171 + 8))(v172, v170);
        v174 = swift_allocObject(&unk_10108FED0, 32, 7);
        *(_QWORD *)(v174 + 16) = v169;
        *(_QWORD *)(v174 + 24) = v168;
        v246 = sub_10077F7F8;
        v247 = v174;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v175 = &unk_10108FEE8;
LABEL_49:
        *(_QWORD *)&v245 = sub_100016FB8;
        *((_QWORD *)&v245 + 1) = v175;
        v192 = _Block_copy(&aBlock);
        v193 = swift_retain();
        v194 = v229;
        static DispatchQoS.unspecified.getter(v193);
        *(_QWORD *)&v241 = _swiftEmptyArrayStorage;
        v195 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v196 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v197 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v198 = v227;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v241, v196, v197, v167, v195);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v194, v198, v192);
        _Block_release(v192);

        (*(void (**)(char *, uint64_t))(v228 + 8))(v198, v167);
        (*(void (**)(char *, uint64_t))(v230 + 8))(v194, v231);
        v166(v240, v8);
        goto LABEL_50;
      }
    }
    else
    {
      v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v239 + 56);
      v82 = a1;
      swift_bridgeObjectRetain(a1);
LABEL_36:
      v84(v34, 1, 1, v8);
    }
    swift_bridgeObjectRelease(v82);
    v130 = swift_allocObject(&unk_10108FE58, 24, 7);
    *(_QWORD *)(v130 + 16) = v82;
    swift_bridgeObjectRetain(v82);
    v131 = v234;
    swift_retain();
    v132 = v214;
    sub_100765BF0((uint64_t)sub_10077CA94, v131, (uint64_t)sub_10077CAAC, v130, (uint64_t *)&unk_101106E50, (uint64_t)sub_10077CAE0, v214);
    swift_release(v131);
    swift_release(v130);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v133 = v222;
    v134 = v221;
    v135 = v223;
    (*(void (**)(char *, _QWORD, uint64_t))(v222 + 104))(v221, enum case for DispatchQoS.QoSClass.default(_:), v223);
    v136 = (void *)static OS_dispatch_queue.global(qos:)(v134);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v134, v135);
    v137 = v210;
    sub_10000F9B8(v132, v210, (uint64_t *)&unk_101106E50);
    v138 = *(unsigned __int8 *)(v208 + 80);
    v139 = (v138 + 16) & ~v138;
    v140 = (v209 + v139 + 7) & 0xFFFFFFFFFFFFFFF8;
    v141 = (v140 + 15) & 0xFFFFFFFFFFFFFFF8;
    v142 = (v141 + 23) & 0xFFFFFFFFFFFFFFF8;
    v143 = swift_allocObject(&unk_10108FE80, v142 + 8, v138 | 7);
    sub_100005CF0(v137, v143 + v139, (uint64_t *)&unk_101106E50);
    *(_QWORD *)(v143 + v140) = v82;
    v144 = (_QWORD *)(v143 + v141);
    v145 = v225;
    *v144 = v224;
    v144[1] = v145;
    *(_QWORD *)(v143 + v142) = v131;
    v246 = sub_10077CAB8;
    v247 = v143;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v245 = sub_100016FB8;
    *((_QWORD *)&v245 + 1) = &unk_10108FE98;
    v146 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(v82);
    swift_retain();
    v147 = swift_retain();
    v148 = v229;
    static DispatchQoS.unspecified.getter(v147);
    *(_QWORD *)&v241 = _swiftEmptyArrayStorage;
    v149 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v150 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v151 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v152 = v227;
    v153 = v150;
    v154 = v226;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v241, v153, v151, v226, v149);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v148, v152, v146);
    _Block_release(v146);

    (*(void (**)(char *, uint64_t))(v228 + 8))(v152, v154);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v148, v231);
    sub_100004048(v214, (uint64_t *)&unk_101106E50);
LABEL_50:
    sub_1000126B0(v232, type metadata accessor for LeashRecord);
    return swift_release(v247);
  }
  sub_100004048((uint64_t)v61, &qword_101111B80);
  v66 = swift_bridgeObjectRetain_n(a1, 2);
  v67 = Logger.logObject.getter(v66);
  v68 = static os_log_type_t.error.getter(v67);
  v69 = v56;
  if (os_log_type_enabled(v67, v68))
  {
    v70 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v71;
    *(_DWORD *)v70 = 136315138;
    v72 = swift_bridgeObjectRetain(a1);
    v73 = Array.description.getter(v72, v8);
    v74 = a1;
    v75 = v73;
    v77 = v76;
    swift_bridgeObjectRelease(v74);
    *(_QWORD *)&v241 = sub_100016940(v75, v77, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v241, (char *)&v241 + 8, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease_n(v74, 2);
    swift_bridgeObjectRelease(v77);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed to disable separation monitoring for beacons: %s due to missing leash record", v70, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v70, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v116 = v231;
  v117 = v225;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v118 = v222;
  v119 = v221;
  v120 = v223;
  (*(void (**)(char *, _QWORD, uint64_t))(v222 + 104))(v221, enum case for DispatchQoS.QoSClass.default(_:), v223);
  v121 = (void *)static OS_dispatch_queue.global(qos:)(v119);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v120);
  v122 = swift_allocObject(&unk_10108FE08, 32, 7);
  *(_QWORD *)(v122 + 16) = v224;
  *(_QWORD *)(v122 + 24) = v117;
  v246 = (uint64_t (*)())sub_10077CA78;
  v247 = v122;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v245 = sub_100016FB8;
  *((_QWORD *)&v245 + 1) = &unk_10108FE20;
  v123 = _Block_copy(&aBlock);
  v124 = swift_retain();
  v125 = v229;
  static DispatchQoS.unspecified.getter(v124);
  *(_QWORD *)&v241 = _swiftEmptyArrayStorage;
  v126 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v127 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v128 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v129 = v227;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v241, v127, v128, v69, v126);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v125, v129, v123);
  _Block_release(v123);

  (*(void (**)(char *, uint64_t))(v228 + 8))(v129, v69);
  (*(void (**)(char *, uint64_t))(v230 + 8))(v125, v116);
  return swift_release(v247);
}

uint64_t sub_100767B14@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_100889888();
  v3 = v2[2];
  v4 = type metadata accessor for LeashRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (v3)
  {
    sub_10005972C((uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, type metadata accessor for LeashRecord);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v6, 1, v4);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100767BA8(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t result;
  int64_t v6;

  v3 = (unint64_t *)(a1 + *(int *)(type metadata accessor for LeashRecord(0) + 24));
  swift_bridgeObjectRetain(a2);
  v4 = sub_10077C474(v3, a2);
  result = swift_bridgeObjectRelease(a2);
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 >= v4)
    return sub_1007793D0(v4, v6);
  __break(1u);
  return result;
}

uint64_t sub_100767C28(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  void (*v36)(void *, uint64_t);
  uint64_t v37;
  void *v38;

  v8 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v8);
  v10 = (_QWORD *)((char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v10, (uint64_t *)&unk_101106E50);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    swift_errorRelease(*v10);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B75D0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to disable separation monitoring due to leash record update failure.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v17 = v16;
    v37 = 14;
    v18 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v19 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v18, v17, v19);
    v20 = v38;
    a3(v38, 1);

  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B75D0);
    v22 = swift_bridgeObjectRetain_n(a2, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v36 = a3;
      v27 = v26;
      v38 = (void *)v26;
      v35[1] = a4;
      *(_DWORD *)v25 = 136315138;
      v35[0] = v25 + 4;
      v28 = type metadata accessor for UUID(0);
      v29 = swift_bridgeObjectRetain(a2);
      v30 = Array.description.getter(v29, v28);
      v32 = v31;
      swift_bridgeObjectRelease(a2);
      v37 = sub_100016940(v30, v32, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v35[0], v25 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Completed separation monitoring for beacons: %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      v33 = v27;
      a3 = v36;
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    a3(0, 0);
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_101106E50);
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  type metadata accessor for Transaction(0);
  static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  return sub_1007EEF64(16);
}

void sub_100768020(uint64_t a1, int a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint8_t *v37;
  void **v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  NSObject *v50;
  uint64_t v51;
  id v52;
  Class isa;
  id v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(NSObject *, uint64_t);
  uint64_t v68;
  double v69;
  double v70;
  uint64_t v71;
  double v72;
  NSObject *v73;
  id v74;
  Class v75;
  id v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  id v83;
  NSString v84;
  id v85;
  uint64_t v86;
  double v87;
  double v88;
  int *v89;
  char *v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  id v94;
  Class v95;
  id v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  id v103;
  NSString v104;
  id v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  double v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  void **v142;
  void **v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void **v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(_QWORD, _QWORD);
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (*v225)(NSObject *, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint8_t *v228;
  uint64_t v229;
  uint64_t v230;
  NSObject *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void **aBlock;
  uint64_t v236;
  uint64_t (*v237)(uint64_t);
  void *v238;
  void (*v239)();
  uint64_t v240;

  v5 = v4;
  LODWORD(v219) = a2;
  v205 = type metadata accessor for DispatchTime(0);
  v204 = *(_QWORD *)(v205 - 8);
  v9 = __chkstk_darwin(v205);
  v202 = (char *)&v200 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v203 = (char *)&v200 - v11;
  v217 = type metadata accessor for DispatchWorkItemFlags(0);
  v215 = *(_QWORD *)(v217 - 8);
  __chkstk_darwin(v217);
  v213 = (char *)&v200 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = type metadata accessor for DispatchQoS(0);
  v216 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218);
  v214 = (char *)&v200 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for DispatchQoS.QoSClass(0);
  v210 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211);
  v209 = (char *)&v200 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v15);
  v229 = (uint64_t)&v200 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for Date(0);
  v230 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232);
  v231 = ((char *)&v200 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = (int *)type metadata accessor for SafeLocation(0);
  v222 = *((_QWORD *)v18 - 1);
  v19 = __chkstk_darwin(v18);
  v21 = (char *)&v200 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v200 - v23;
  v25 = __chkstk_darwin(v22);
  v220 = (uint64_t)&v200 - v26;
  v206 = v27;
  __chkstk_darwin(v25);
  v29 = (char *)&v200 - v28;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B75D0);
  v233 = a1;
  v32 = sub_10005972C(a1, (uint64_t)v29, type metadata accessor for SafeLocation);
  v207 = v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v208 = v21;
  if (v35)
  {
    v212 = a3;
    v36 = swift_slowAlloc(12, -1);
    v221 = a4;
    v37 = (uint8_t *)v36;
    v38 = (void **)swift_slowAlloc(32, -1);
    v201 = v5;
    v39 = v38;
    aBlock = v38;
    *(_DWORD *)v37 = 136315138;
    v228 = v37 + 4;
    v40 = v220;
    sub_10005972C((uint64_t)v29, v220, type metadata accessor for SafeLocation);
    v41 = String.init<A>(describing:)(v40, v18);
    v234 = sub_100016940(v41, v42, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &aBlock, v228, v37 + 12);
    a3 = v212;
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v29, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Adding safe location: %s", v37, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v43 = v39;
    v5 = v201;
    swift_slowDealloc(v43, -1, -1);
    v44 = v37;
    a4 = v221;
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v29, type metadata accessor for SafeLocation);
  }

  v45 = (uint8_t *)v18[8];
  v46 = v233;
  v227 = v18[9];
  v228 = v45;
  v47 = *(double *)&v45[v233];
  v48 = *(double *)(v233 + v227);
  v226 = v18[10];
  v49 = *(double *)(v233 + v226);
  v50 = v231;
  Date.init()(v51);
  v52 = objc_allocWithZone((Class)CLLocation);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v54 = objc_msgSend(v52, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v47, v48, 0.0, v49, v49, -1.0, -1.0, -1.0, 0xBFF0000000000000);

  v225 = *(void (**)(NSObject *, uint64_t))(v230 + 8);
  v225(v50, v232);
  v224 = v18[11];
  objc_msgSend(v54, "setReferenceFrame:", *(unsigned __int8 *)(v46 + v224));
  LOBYTE(isa) = sub_10000CC48();

  if ((isa & 1) != 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v56 = v55;
    v234 = 21;
    v57 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v58 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v234, v57, v56, v58);
    v59 = aBlock;
    a3(aBlock, 1);

  }
  else
  {
    v60 = v229;
    v223 = v46 + v18[5];
    sub_100889110(v223, v229);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v222 + 48))(v60, 1, v18);
    sub_100004048(v60, &qword_101106E40);
    if (v61 == 1)
    {
      v221 = a4;
      v212 = a3;
      if ((v219 & 1) == 0)
      {
        v62 = sub_10001E350();
        v63 = v62[2];
        if (v63)
        {
          v201 = v5;
          v64 = *(unsigned __int8 *)(v222 + 80);
          v200 = ~v64;
          v207 = v64;
          v208 = v62;
          v65 = (uint64_t)v62 + ((v64 + 32) & ~v64);
          v219 = *(_QWORD *)(v222 + 72);
          v66 = v232;
          v67 = v225;
          do
          {
            v229 = v65;
            v230 = v63;
            v68 = sub_10005972C(v65, (uint64_t)v24, type metadata accessor for SafeLocation);
            v69 = *(double *)&v24[v18[8]];
            v70 = *(double *)&v24[v18[9]];
            v71 = v18[10];
            v72 = *(double *)&v24[v71];
            v73 = v231;
            Date.init()(v68);
            v74 = objc_allocWithZone((Class)CLLocation);
            v75 = Date._bridgeToObjectiveC()().super.isa;
            v76 = objc_msgSend(v74, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", v75, v69, v70, 0.0, v72, v72, -1.0, -1.0, -1.0, 0xBFF0000000000000);

            v67(v73, v66);
            objc_msgSend(v76, "setReferenceFrame:", v24[v18[11]]);
            objc_msgSend(v76, "coordinate");
            v78 = v77;
            v80 = v79;

            v81 = *(double *)&v24[v71];
            UUID.uuidString.getter(v82);
            v83 = objc_allocWithZone((Class)CLCircularRegion);
            v84 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v85 = objc_msgSend(v83, "initWithCenter:radius:identifier:", v84, v78, v80, v81);

            v86 = v233;
            v87 = *(double *)&v228[v233];
            v88 = *(double *)(v233 + v227);
            v89 = v18;
            v90 = v24;
            v91 = v226;
            v92 = *(double *)(v233 + v226);
            Date.init()(v93);
            v94 = objc_allocWithZone((Class)CLLocation);
            v95 = Date._bridgeToObjectiveC()().super.isa;
            v96 = objc_msgSend(v94, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", v95, v87, v88, 0.0, v92, v92, -1.0, -1.0, -1.0, 0xBFF0000000000000);

            v67(v73, v66);
            objc_msgSend(v96, "setReferenceFrame:", *(unsigned __int8 *)(v86 + v224));
            objc_msgSend(v96, "coordinate");
            v98 = v97;
            v100 = v99;

            v101 = *(double *)(v86 + v91);
            v24 = v90;
            v18 = v89;
            UUID.uuidString.getter(v102);
            v103 = objc_allocWithZone((Class)CLCircularRegion);
            v104 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            v105 = objc_msgSend(v103, "initWithCenter:radius:identifier:", v104, v98, v100, v101);

            sub_100B02664(v105);
            v107 = v106;
            objc_msgSend(v85, "radius");
            v109 = v108;
            objc_msgSend(v85, "radius");
            v111 = v109 * v110 * 3.14159265;
            objc_msgSend(v105, "radius");
            v113 = v112;
            objc_msgSend(v105, "radius");
            v115 = v114;

            v116 = v113 * v115 * 3.14159265;
            if (v116 >= v111)
              v116 = v111;
            if (v116 > 0.0 && v107 / v116 > 0.5 && v24[v89[12]] != 3)
            {
              swift_bridgeObjectRelease();
              sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
              v117 = v210;
              v118 = v209;
              v119 = v211;
              (*(void (**)(char *, _QWORD, uint64_t))(v210 + 104))(v209, enum case for DispatchQoS.QoSClass.default(_:), v211);
              v120 = (void *)static OS_dispatch_queue.global(qos:)(v118);
              (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
              v121 = v220;
              sub_10005972C((uint64_t)v24, v220, type metadata accessor for SafeLocation);
              v122 = (v207 + 16) & v200;
              v123 = (v206 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
              v124 = swift_allocObject(&unk_101090560, v123 + 16, v207 | 7);
              sub_1000126EC(v121, v124 + v122, type metadata accessor for SafeLocation);
              v125 = (_QWORD *)(v124 + v123);
              v126 = v221;
              *v125 = v212;
              v125[1] = v126;
              v239 = sub_10077D624;
              v240 = v124;
              aBlock = _NSConcreteStackBlock;
              v236 = 1107296256;
              v237 = sub_100016FB8;
              v238 = &unk_101090578;
              v127 = _Block_copy(&aBlock);
              v128 = swift_retain();
              v129 = v214;
              static DispatchQoS.unspecified.getter(v128);
              v234 = (uint64_t)_swiftEmptyArrayStorage;
              v130 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v131 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
              v132 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
              v133 = v213;
              v134 = v131;
              v135 = v217;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v134, v132, v217, v130);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v129, v133, v127);
              _Block_release(v127);

              (*(void (**)(char *, uint64_t))(v215 + 8))(v133, v135);
              (*(void (**)(char *, uint64_t))(v216 + 8))(v129, v218);
              sub_1000126B0((uint64_t)v24, type metadata accessor for SafeLocation);
              goto LABEL_27;
            }
            sub_1000126B0((uint64_t)v24, type metadata accessor for SafeLocation);
            v65 = v229 + v219;
            v63 = v230 - 1;
          }
          while (v230 != 1);
          swift_bridgeObjectRelease();
          v5 = v201;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v46 = v233;
      }
      v163 = dispatch_group_create();
      dispatch_group_enter(v163);
      v164 = sub_10001A9A8(&qword_101106E48);
      v232 = swift_allocBox(v164);
      v166 = v165;
      v167 = sub_10001A9A8((uint64_t *)&unk_101106E30);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v166, 1, 1, v167);
      v168 = v220;
      sub_10005972C(v46, v220, type metadata accessor for SafeLocation);
      v169 = *(unsigned __int8 *)(v222 + 80);
      v170 = (v169 + 24) & ~v169;
      v230 = v169 | 7;
      v171 = v5;
      v172 = v206 + 7;
      v173 = (v206 + 7 + v170) & 0xFFFFFFFFFFFFFFF8;
      v174 = (v173 + 15) & 0xFFFFFFFFFFFFFFF8;
      v175 = swift_allocObject(&unk_1010904E8, v174 + 8, v169 | 7);
      *(_QWORD *)(v175 + 16) = v171;
      sub_1000126EC(v168, v175 + v170, type metadata accessor for SafeLocation);
      *(_QWORD *)(v175 + v173) = v232;
      *(_QWORD *)(v175 + v174) = v163;
      swift_retain();
      swift_retain();
      v231 = v163;
      sub_100818C6C(sub_10077D470, v175);
      v176 = swift_release();
      v177 = v202;
      static DispatchTime.now()(v176);
      v178 = v203;
      + infix(_:_:)(v177, 120.0);
      v179 = *(void (**)(char *, uint64_t))(v204 + 8);
      v180 = v205;
      v179(v177, v205);
      LOBYTE(v173) = OS_dispatch_group.wait(timeout:)(v178) & 1;
      v179(v178, v180);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v181 = v210;
      v182 = v209;
      v183 = v211;
      (*(void (**)(char *, _QWORD, uint64_t))(v210 + 104))(v209, enum case for DispatchQoS.QoSClass.default(_:), v211);
      v184 = (void *)static OS_dispatch_queue.global(qos:)(v182);
      (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
      sub_10005972C(v233, v168, type metadata accessor for SafeLocation);
      v185 = (v169 + 17) & ~v169;
      v186 = (v172 + v185) & 0xFFFFFFFFFFFFFFF8;
      v187 = (v186 + 23) & 0xFFFFFFFFFFFFFFF8;
      v188 = (v187 + 15) & 0xFFFFFFFFFFFFFFF8;
      v189 = swift_allocObject(&unk_101090510, v188 + 8, v230);
      *(_BYTE *)(v189 + 16) = v173;
      sub_1000126EC(v168, v189 + v185, type metadata accessor for SafeLocation);
      v190 = (_QWORD *)(v189 + v186);
      v191 = v221;
      *v190 = v212;
      v190[1] = v191;
      *(_QWORD *)(v189 + v187) = v232;
      *(_QWORD *)(v189 + v188) = v171;
      v239 = sub_10077D5C0;
      v240 = v189;
      aBlock = _NSConcreteStackBlock;
      v236 = 1107296256;
      v237 = sub_100016FB8;
      v238 = &unk_101090528;
      v192 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      v193 = swift_retain();
      v194 = v214;
      static DispatchQoS.unspecified.getter(v193);
      v234 = (uint64_t)_swiftEmptyArrayStorage;
      v195 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v196 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v197 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v198 = v213;
      v199 = v217;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v196, v197, v217, v195);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v194, v198, v192);
      _Block_release(v192);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v198, v199);
      (*(void (**)(char *, uint64_t))(v216 + 8))(v194, v218);
      swift_release();
    }
    else
    {
      v136 = v46;
      v137 = (uint64_t)v208;
      v138 = sub_10005972C(v136, (uint64_t)v208, type metadata accessor for SafeLocation);
      v139 = Logger.logObject.getter(v138);
      v140 = static os_log_type_t.error.getter(v139);
      if (os_log_type_enabled(v139, v140))
      {
        v141 = (uint8_t *)swift_slowAlloc(12, -1);
        v142 = (void **)swift_slowAlloc(32, -1);
        v221 = a4;
        v143 = v142;
        aBlock = v142;
        *(_DWORD *)v141 = 136315138;
        v144 = type metadata accessor for UUID(0);
        v145 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v146 = dispatch thunk of CustomStringConvertible.description.getter(v144, v145);
        v234 = sub_100016940(v146, v147, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &aBlock, v141 + 4, v141 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v137, type metadata accessor for SafeLocation);
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "Safe location with identifier: %s already exists", v141, 0xCu);
        swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
        v148 = v143;
        a4 = v221;
        swift_slowDealloc(v148, -1, -1);
        swift_slowDealloc(v141, -1, -1);
      }
      else
      {
        sub_1000126B0(v137, type metadata accessor for SafeLocation);
      }

      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v149 = v210;
      v150 = v209;
      v151 = v211;
      (*(void (**)(char *, _QWORD, uint64_t))(v210 + 104))(v209, enum case for DispatchQoS.QoSClass.default(_:), v211);
      v152 = (void *)static OS_dispatch_queue.global(qos:)(v150);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v150, v151);
      v153 = swift_allocObject(&unk_1010905B0, 32, 7);
      *(_QWORD *)(v153 + 16) = a3;
      *(_QWORD *)(v153 + 24) = a4;
      v239 = sub_10077D668;
      v240 = v153;
      aBlock = _NSConcreteStackBlock;
      v236 = 1107296256;
      v237 = sub_100016FB8;
      v238 = &unk_1010905C8;
      v154 = _Block_copy(&aBlock);
      v155 = swift_retain();
      v156 = v214;
      static DispatchQoS.unspecified.getter(v155);
      v234 = (uint64_t)_swiftEmptyArrayStorage;
      v157 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v158 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v159 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v160 = v213;
      v161 = v158;
      v162 = v217;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v234, v161, v159, v217, v157);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v156, v160, v154);
      _Block_release(v154);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v160, v162);
      (*(void (**)(char *, uint64_t))(v216 + 8))(v156, v218);
    }
LABEL_27:
    swift_release();
  }
}

