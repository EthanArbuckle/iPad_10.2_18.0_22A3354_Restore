uint64_t sub_100255468()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*v0 + 152);
  v2 = *(_QWORD *)(*v0 + 144);
  v3 = *(_QWORD *)(*v0 + 104);
  v9 = *(_QWORD *)(*v0 + 112);
  v4 = *(_QWORD *)(*v0 + 96);
  v5 = *(_QWORD *)(*v0 + 80);
  v8 = v5 + *(int *)(*v0 + 200);
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 192));
  sub_10001BC14(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100004048(v8, &qword_1010ED860);
  v6 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v6(v5, v3);
  v6(v4, v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_10025558C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1011163CC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_100B6F844(a2);
}

uint64_t sub_1002555E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EC74C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10005CD54(a2);
}

uint64_t sub_100255634(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010EFC3C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_1001394E4(a2, a3);
}

uint64_t sub_100255698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EFC44);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10013E610(a2);
}

uint64_t sub_1002556EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 76) = a4;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_10025570C, 0, 0);
}

uint64_t sub_10025570C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = sub_10001A9A8(&qword_1010ED308);
  v3 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v0 + 40) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 72);
  LODWORD(v4) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 72) = v4;
  v4 = v4;
  v6 = (v4 + 32) & ~v4;
  v7 = swift_allocObject(v2, v6 + v5, v4 | 7);
  *(_QWORD *)(v0 + 48) = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  sub_10005972C(v1, v7 + v6, type metadata accessor for OwnerPeerTrust);
  v8 = (_QWORD *)swift_task_alloc(dword_10112001C);
  *(_QWORD *)(v0 + 56) = v8;
  *v8 = v0;
  v8[1] = sub_1002557E0;
  return sub_100D90E74(v7, *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 76));
}

uint64_t sub_1002557E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 56);
  v3 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100255898, 0, 0);
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_QWORD *)(v3 + 48);
  v7 = v6 + ((*(unsigned __int8 *)(v3 + 72) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 72));
  swift_setDeallocating(v6);
  swift_arrayDestroy(v7, *(_QWORD *)(v6 + 16), v5);
  swift_deallocClassInstance(v6, 32, 7);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100255898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = v2 + ((*(unsigned __int8 *)(v0 + 72) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 72));
  swift_setDeallocating(v2);
  swift_arrayDestroy(v3, *(_QWORD *)(v2 + 16), v1);
  swift_deallocClassInstance(v2, 32, 7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100255908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101120044);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100DA0938(a2, a3);
}

uint64_t sub_10025596C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_101120024);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  return sub_100D94FB8(a2);
}

uint64_t sub_1002559C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10112002C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_100D98D18(a2);
}

uint64_t sub_100255A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_101120034);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_100D99034(a2);
}

uint64_t sub_100255A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101100DFC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_10060962C(a2, a3);
}

uint64_t sub_100255ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_101100E04);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10060AB80(a2);
}

uint64_t sub_100255B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = (_QWORD *)swift_task_alloc(dword_10112004C);
  v3[5] = v4;
  *v4 = v3;
  v4[1] = sub_100255B70;
  return sub_100DA4D28();
}

uint64_t sub_100255B70()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  v2 = (_QWORD *)swift_task_alloc(dword_1010F404C);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v4;
  v2[1] = sub_100255BD8;
  return sub_100258308(*(_QWORD *)(v1 + 24));
}

uint64_t sub_100255BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 48));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_100255D6C;
  }
  else
  {
    *(_QWORD *)(v4 + 56) = a1;
    v5 = sub_100255C50;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100255C50()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = unk_1010F416C;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F4168 + dword_1010F4168);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[8] = v2;
  *v2 = v0;
  v2[1] = sub_100255CC0;
  return v4(v0[7], v0[2]);
}

uint64_t sub_100255CC0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_100255D1C, 0, 0);
}

uint64_t sub_100255D1C()
{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  v1 = (_QWORD *)swift_task_alloc(dword_1010EFC4C);
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_100255E68;
  return sub_10013FF7C();
}

uint64_t sub_100255D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Can't create shareCreateUseCase!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_1010EFC4C);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_100255E68;
  return sub_10013FF7C();
}

uint64_t sub_100255E68()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  v2 = (_QWORD *)swift_task_alloc(dword_1010EFC54);
  *(_QWORD *)(v1 + 80) = v2;
  *v2 = v4;
  v2[1] = sub_100255ECC;
  return sub_100140C10();
}

uint64_t sub_100255ECC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100255F18()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101120054);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1002613B8;
  return sub_100DA5DC4();
}

uint64_t sub_100255F60()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010EC954);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100030654;
  return sub_1000686D4();
}

uint64_t sub_100255FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[3];
  uint64_t v49;
  _UNKNOWN **v50;
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;
  _QWORD v54[3];
  uint64_t v55;
  _UNKNOWN **v56;
  _QWORD v57[3];
  uint64_t v58;
  _UNKNOWN **v59;
  _QWORD v60[3];
  uint64_t v61;
  _UNKNOWN **v62;

  v61 = type metadata accessor for FamilyCircleService();
  v62 = &off_10109F1D0;
  v60[0] = a2;
  v58 = type metadata accessor for SharingCircleKeyManager();
  v59 = &off_10109BDA0;
  v57[0] = a3;
  v55 = type metadata accessor for MemberCircleRevokeManager();
  v56 = &off_1010B7198;
  v54[0] = a4;
  v52 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v53 = &off_10109EA18;
  v51[0] = a5;
  v50 = &off_101080CF8;
  v49 = type metadata accessor for ShareKeysDownloadUseCase();
  v48[0] = a6;
  v47 = &off_10106BB00;
  v46 = type metadata accessor for BeaconManagerService(0);
  v45[0] = a8;
  v16 = type metadata accessor for ShareAcceptUseCase();
  v17 = swift_allocObject(v16, 416, 15);
  v18 = sub_10009F5D0((uint64_t)v60, v61);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v45[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10009F5D0((uint64_t)v57, v58);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v45[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_10009F5D0((uint64_t)v54, v55);
  __chkstk_darwin(v26);
  v28 = (_QWORD *)((char *)&v45[-1] - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_10009F5D0((uint64_t)v51, v52);
  __chkstk_darwin(v30);
  v32 = (_QWORD *)((char *)&v45[-1] - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  v34 = sub_10009F5D0((uint64_t)v48, v49);
  __chkstk_darwin(v34);
  v36 = (_QWORD *)((char *)&v45[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  v38 = sub_10009F5D0((uint64_t)v45, v46);
  __chkstk_darwin(v38);
  v40 = (_QWORD *)((char *)&v45[-1] - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v41 + 16))(v40);
  v42 = sub_100256784(a1, *v20, *v24, *v28, *v32, *v36, a7, *v40, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
  return v42;
}

uint64_t sub_100256318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t UseCase;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[3];
  uint64_t v49;
  _UNKNOWN **v50;
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;
  _QWORD v54[3];
  uint64_t v55;
  _UNKNOWN **v56;

  v41 = a6;
  v55 = type metadata accessor for FamilyCircleService();
  v56 = &off_10109F1D0;
  v54[0] = a2;
  v52 = type metadata accessor for SharingCircleKeyManager();
  v53 = &off_10109BDA0;
  v51[0] = a3;
  v49 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v50 = &off_10109EA18;
  v48[0] = a4;
  v46 = type metadata accessor for ShareKeysDownloadUseCase();
  v47 = &off_101080CF8;
  v45[0] = a7;
  v44 = &off_101052B38;
  v43 = type metadata accessor for ShareAcceptUseCase();
  v42[0] = a8;
  UseCase = type metadata accessor for ShareCreateUseCase();
  v17 = swift_allocObject(UseCase, 400, 15);
  v18 = sub_10009F5D0((uint64_t)v54, v55);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10009F5D0((uint64_t)v51, v52);
  __chkstk_darwin(v22);
  v24 = (uint64_t *)((char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_10009F5D0((uint64_t)v48, v49);
  __chkstk_darwin(v26);
  v28 = (uint64_t *)((char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v29 + 16))(v28);
  v30 = sub_10009F5D0((uint64_t)v45, v46);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)&v40 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v33 + 16))(v32);
  v34 = sub_10009F5D0((uint64_t)v42, v43);
  __chkstk_darwin(v34);
  v36 = (uint64_t *)((char *)&v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  v38 = sub_100256610(a1, *v20, *v24, *v28, a5, v41, *v32, *v36, a9, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v51);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  return v38;
}

uint64_t sub_100256610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  __int128 v25;
  uint64_t v26;
  _UNKNOWN **v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;
  __int128 v34;
  uint64_t v35;
  _UNKNOWN **v36;
  _UNKNOWN **v37;

  v36 = &off_1010B33F8;
  v37 = &off_1010761A8;
  v35 = type metadata accessor for KeyDropInterface();
  *(_QWORD *)&v34 = a5;
  v32 = type metadata accessor for FamilyCircleService();
  v33 = &off_10109F1D0;
  *(_QWORD *)&v31 = a2;
  v29 = type metadata accessor for SharingCircleKeyManager();
  v30 = &off_10109BDA0;
  *(_QWORD *)&v28 = a3;
  v26 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v27 = &off_10109EA18;
  *(_QWORD *)&v25 = a4;
  v23 = type metadata accessor for ShareKeysDownloadUseCase();
  v24 = &off_101080CF8;
  *(_QWORD *)&v22 = a7;
  v20 = type metadata accessor for ShareAcceptUseCase();
  v21 = &off_101052B38;
  *(_QWORD *)&v19 = a8;
  swift_defaultActor_initialize(a10);
  *(_QWORD *)(a10 + 384) = &_swiftEmptyDictionarySingleton;
  sub_100057E20(&v34, (_OWORD *)(a10 + 112));
  sub_10000F9FC(&v28, a10 + 248);
  *(_QWORD *)(a10 + 160) = a1;
  sub_10000F9FC(&v31, a10 + 168);
  sub_10000F9FC(&v25, a10 + 208);
  *(_QWORD *)(a10 + 288) = a6;
  *(_QWORD *)(a10 + 296) = &off_1010A85F0;
  sub_10000F9FC(&v22, a10 + 304);
  sub_10000F9FC(&v19, a10 + 344);
  *(_QWORD *)(a10 + 392) = a9;
  return a10;
}

uint64_t sub_100256784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  __int128 v27;
  uint64_t v28;
  _UNKNOWN **v29;
  __int128 v30;
  uint64_t v31;
  _UNKNOWN **v32;
  __int128 v33;
  uint64_t v34;
  _UNKNOWN **v35;
  __int128 v36;
  uint64_t v37;
  _UNKNOWN **v38;
  _UNKNOWN **v39;

  v38 = &off_1010B33F8;
  v39 = &off_1010761A8;
  v37 = type metadata accessor for KeyDropInterface();
  *(_QWORD *)&v36 = a7;
  v34 = type metadata accessor for FamilyCircleService();
  v35 = &off_10109F1D0;
  *(_QWORD *)&v33 = a2;
  v31 = type metadata accessor for SharingCircleKeyManager();
  v32 = &off_10109BDA0;
  *(_QWORD *)&v30 = a3;
  v28 = type metadata accessor for MemberCircleRevokeManager();
  v29 = &off_1010B7198;
  *(_QWORD *)&v27 = a4;
  v25 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v26 = &off_10109EA18;
  *(_QWORD *)&v24 = a5;
  v22 = type metadata accessor for ShareKeysDownloadUseCase();
  v23 = &off_101080CF8;
  *(_QWORD *)&v21 = a6;
  v19 = type metadata accessor for BeaconManagerService(0);
  v20 = &off_10106BB00;
  *(_QWORD *)&v18 = a8;
  swift_defaultActor_initialize(a9);
  *(_QWORD *)(a9 + 408) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(a9 + 112) = a1;
  sub_10000F9FC(&v33, a9 + 120);
  sub_10000F9FC(&v30, a9 + 160);
  sub_10000F9FC(&v27, a9 + 200);
  sub_10000F9FC(&v24, a9 + 240);
  sub_10000F9FC(&v21, a9 + 280);
  sub_100057E20(&v36, (_OWORD *)(a9 + 320));
  sub_10000F9FC(&v18, a9 + 368);
  return a9;
}

uint64_t sub_10025690C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  _QWORD v33[3];
  uint64_t v34;
  _UNKNOWN **v35;

  v34 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v35 = &off_10109EA18;
  v33[0] = a2;
  v31 = type metadata accessor for FamilyCircleService();
  v32 = &off_10109F1D0;
  v30[0] = a3;
  v28 = type metadata accessor for SharingCircleKeyManager();
  v29 = &off_10109BDA0;
  v27[0] = a5;
  v10 = type metadata accessor for ShareStopUseCase();
  v11 = swift_allocObject(v10, 288, 15);
  v12 = sub_10009F5D0((uint64_t)v33, v34);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)&v27[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_10009F5D0((uint64_t)v30, v31);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)&v27[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_10009F5D0((uint64_t)v27, v28);
  __chkstk_darwin(v20);
  v22 = (_QWORD *)((char *)&v27[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_100256AE4(a1, *v14, *v18, a4, *v22, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  return v24;
}

uint64_t sub_100256AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  _UNKNOWN **v25;

  v24 = &off_1010B33F8;
  v25 = &off_1010761A8;
  v23 = type metadata accessor for KeyDropInterface();
  *(_QWORD *)&v22 = a4;
  v20 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v21 = &off_10109EA18;
  *(_QWORD *)&v19 = a2;
  v17 = type metadata accessor for FamilyCircleService();
  v18 = &off_10109F1D0;
  *(_QWORD *)&v16 = a3;
  v14 = type metadata accessor for SharingCircleKeyManager();
  v15 = &off_10109BDA0;
  *(_QWORD *)&v13 = a5;
  swift_defaultActor_initialize(a6);
  *(_QWORD *)(a6 + 112) = a1;
  sub_10000F9FC(&v19, a6 + 120);
  sub_10000F9FC(&v16, a6 + 160);
  sub_100057E20(&v22, (_OWORD *)(a6 + 200));
  sub_10000F9FC(&v13, a6 + 248);
  return a6;
}

uint64_t sub_100256BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _QWORD v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  _QWORD v30[5];

  v6 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v30[3] = v6;
  v30[4] = &off_10109EA18;
  v30[0] = a2;
  v7 = type metadata accessor for FamilyCircleService();
  v28 = v7;
  v29 = &off_10109F1D0;
  v27[0] = a3;
  v8 = type metadata accessor for ShareDeclineUseCase();
  v9 = swift_allocObject(v8, 200, 15);
  v10 = sub_10009F5D0((uint64_t)v30, v6);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_10009F5D0((uint64_t)v27, v28);
  __chkstk_darwin(v14);
  v16 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v12;
  v19 = *v16;
  v25 = v6;
  v26 = &off_10109EA18;
  v23 = &off_10109F1D0;
  *(_QWORD *)&v24 = v18;
  v22 = v7;
  *(_QWORD *)&v21 = v19;
  swift_defaultActor_initialize(v9);
  *(_QWORD *)(v9 + 112) = a1;
  sub_10000F9FC(&v24, v9 + 120);
  sub_10000F9FC(&v21, v9 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return v9;
}

uint64_t sub_100256D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  __int128 v26;
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  _QWORD v32[5];

  v8 = type metadata accessor for SharingCircleKeyManager();
  v32[3] = v8;
  v32[4] = &off_10109BDA0;
  v32[0] = a1;
  v9 = type metadata accessor for MemberCircleRevokeManager();
  v30 = v9;
  v31 = &off_1010B7198;
  v29[0] = a3;
  v10 = a4(0);
  v11 = swift_allocObject(v10, 200, 15);
  v12 = sub_10009F5D0((uint64_t)v32, v8);
  __chkstk_darwin(v12);
  v14 = (uint64_t *)((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_10009F5D0((uint64_t)v29, v30);
  __chkstk_darwin(v16);
  v18 = (uint64_t *)((char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v14;
  v21 = *v18;
  v27 = v8;
  v28 = &off_10109BDA0;
  v25 = &off_1010B7198;
  *(_QWORD *)&v26 = v20;
  v24 = v9;
  *(_QWORD *)&v23 = v21;
  swift_defaultActor_initialize(v11);
  sub_10000F9FC(&v26, v11 + 112);
  *(_QWORD *)(v11 + 152) = a2;
  sub_10000F9FC(&v23, v11 + 160);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  return v11;
}

uint64_t sub_100256EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  _QWORD v32[3];
  uint64_t v33;
  _UNKNOWN **v34;
  _QWORD v35[3];
  uint64_t v36;
  _UNKNOWN **v37;

  v36 = type metadata accessor for FamilyCircleService();
  v37 = &off_10109F1D0;
  v35[0] = a2;
  v33 = type metadata accessor for SharingCircleKeyManager();
  v34 = &off_10109BDA0;
  v32[0] = a3;
  v30 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v31 = &off_10109EA18;
  v29[0] = a4;
  v12 = type metadata accessor for SelfBeaconingShareUseCase();
  v13 = swift_allocObject(v12, 296, 15);
  v14 = sub_10009F5D0((uint64_t)v35, v36);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)&v29[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_10009F5D0((uint64_t)v32, v33);
  __chkstk_darwin(v18);
  v20 = (_QWORD *)((char *)&v29[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_10009F5D0((uint64_t)v29, v30);
  __chkstk_darwin(v22);
  v24 = (_QWORD *)((char *)&v29[-1] - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = sub_1002570CC(a1, *v16, *v20, *v24, a5, a6, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return v26;
}

uint64_t sub_1002570CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _UNKNOWN **v27;

  v26 = &off_1010B33F8;
  v27 = &off_1010761A8;
  v25 = type metadata accessor for KeyDropInterface();
  *(_QWORD *)&v24 = a5;
  v22 = type metadata accessor for FamilyCircleService();
  v23 = &off_10109F1D0;
  *(_QWORD *)&v21 = a2;
  v19 = type metadata accessor for SharingCircleKeyManager();
  v20 = &off_10109BDA0;
  *(_QWORD *)&v18 = a3;
  v16 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v17 = &off_10109EA18;
  *(_QWORD *)&v15 = a4;
  swift_defaultActor_initialize(a7);
  sub_100057E20(&v24, (_OWORD *)(a7 + 112));
  sub_10000F9FC(&v18, a7 + 248);
  *(_QWORD *)(a7 + 160) = a1;
  sub_10000F9FC(&v21, a7 + 168);
  sub_10000F9FC(&v15, a7 + 208);
  *(_QWORD *)(a7 + 288) = a6;
  return a7;
}

uint64_t sub_1002571D0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[9] = a2;
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  v2[5] = type metadata accessor for ShareCreateUseCase();
  v2[6] = &off_1010AF920;
  v2[2] = a1;
  swift_retain();
  return swift_task_switch(sub_100257288, a2, 0);
}

uint64_t sub_100257288()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 72) + 112);
  *(_QWORD *)(v0 + 128) = v1;
  return swift_task_switch(sub_1002572A4, v1, 0);
}

uint64_t sub_1002572A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100257320;
  return unsafeBlocking<A>(_:)(v0 + 56, sub_100068004, *(_QWORD *)(v0 + 128), v3);
}

uint64_t sub_100257320()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_10025737C, v1, 0);
}

uint64_t sub_10025737C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[9];
  v0[18] = v0[7];
  return swift_task_switch(sub_100257398, v1, 0);
}

uint64_t sub_100257398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = (uint64_t (*)(uint64_t))_swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 88);
    v34 = _swiftEmptyArrayStorage;
    v2 = type metadata accessor for OwnerSharingCircle;
    v32 = v5;
    v33 = *(_QWORD *)(v1 + 16);
    while (v4 < *(_QWORD *)(v1 + 16))
    {
      v7 = *(_QWORD *)(v0 + 120);
      v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v9 = *(_QWORD *)(v6 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 144) + v8 + v9 * v4, v7, type metadata accessor for OwnerSharingCircle);
      v10 = *(_QWORD *)(v0 + 120);
      if (*(_BYTE *)(v7 + *(int *)(v5 + 36)) == 4)
      {
        sub_1000126EC(v10, *(_QWORD *)(v0 + 96), type metadata accessor for OwnerSharingCircle);
        v11 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        {
          sub_10009A520(0, v34[2] + 1, 1);
          v11 = _swiftEmptyArrayStorage;
        }
        v13 = v11[2];
        v12 = v11[3];
        if (v13 >= v12 >> 1)
        {
          sub_10009A520(v12 > 1, v13 + 1, 1);
          v11 = _swiftEmptyArrayStorage;
        }
        v14 = *(_QWORD *)(v0 + 96);
        v11[2] = v13 + 1;
        v34 = v11;
        sub_1000126EC(v14, (uint64_t)v11 + v8 + v13 * v9, type metadata accessor for OwnerSharingCircle);
        v5 = v32;
        v3 = v33;
      }
      else
      {
        sub_1001EFC74(v10);
      }
      ++v4;
      v2 = type metadata accessor for OwnerSharingCircle;
      if (v3 == v4)
      {
        v2 = (uint64_t (*)(uint64_t))v34;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    *(_QWORD *)(v0 + 152) = v2;
    swift_bridgeObjectRelease();
    if (qword_1010E9938 == -1)
      goto LABEL_14;
  }
  swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_14:
  v15 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 160) = sub_10001A9E8(v15, (uint64_t)qword_1011B6748);
  v16 = swift_retain();
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v19 = 134217984;
    *(_QWORD *)(v0 + 64) = *((_QWORD *)v2 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v19 + 4, v19 + 12);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found %ld of expired tentatively revoked owner circles.", v19, 0xCu);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release();
  }

  v20 = *((_QWORD *)v2 + 2);
  *(_QWORD *)(v0 + 168) = v20;
  if (v20)
  {
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v23 = *(_DWORD *)(v21 + 80);
    *(_DWORD *)(v0 + 208) = v23;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v0 + 184) = 0;
    v24 = *(_QWORD *)(v0 + 112);
    sub_10005972C(*(_QWORD *)(v0 + 152) + ((v23 + 32) & ~(unint64_t)v23), v24, type metadata accessor for OwnerSharingCircle);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v25 = v24 + *(int *)(v22 + 20);
    v26 = (_QWORD *)swift_task_alloc(dword_1011163CC);
    *(_QWORD *)(v0 + 192) = v26;
    *v26 = v0;
    v26[1] = sub_100257708;
    return sub_100B6F844(v25);
  }
  else
  {
    swift_release();
    v28 = *(_QWORD *)(v0 + 112);
    v29 = *(_QWORD *)(v0 + 120);
    v31 = *(_QWORD *)(v0 + 96);
    v30 = *(_QWORD *)(v0 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100257708()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100257888;
  else
    v4 = sub_10025776C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 72), 0);
}

uint64_t sub_10025776C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_1001EFC74(*(_QWORD *)(v0 + 112));
  v1 = *(_QWORD *)(v0 + 184) + 1;
  if (v1 == *(_QWORD *)(v0 + 168))
  {
    swift_release();
    v3 = *(_QWORD *)(v0 + 112);
    v2 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v1;
    v7 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 80);
    sub_10005972C(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208))+ *(_QWORD *)(v0 + 176) * v1, v7, type metadata accessor for OwnerSharingCircle);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = v7 + *(int *)(v8 + 20);
    v10 = (_QWORD *)swift_task_alloc(dword_1011163CC);
    *(_QWORD *)(v0 + 192) = v10;
    *v10 = v0;
    v10[1] = sub_100257708;
    return sub_100B6F844(v9);
  }
}

uint64_t sub_100257888()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = (_QWORD *)(v0 + 16);
  v2 = sub_10005972C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), type metadata accessor for OwnerSharingCircle);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  if (v5)
  {
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v26 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_1001D4C18();
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v9 + 4) = sub_100016940(v13, v14, &v26);
    swift_bridgeObjectRelease();
    sub_1001EFC74(v8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to re-create owned tentatively revoked share with identifier: %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    v15 = v9;
    v1 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v15, -1, -1);
    swift_errorRelease(v6);

  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 200));

    sub_1001EFC74(v8);
  }
  sub_1001EFC74(v7);
  v16 = *(_QWORD *)(v0 + 184) + 1;
  if (v16 == *(_QWORD *)(v0 + 168))
  {
    swift_release();
    v18 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v16;
    v22 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 80);
    sub_10005972C(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v0 + 208) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 208))+ *(_QWORD *)(v0 + 176) * v16, v22, type metadata accessor for OwnerSharingCircle);
    sub_10001AA44(v1, *(_QWORD *)(v0 + 40));
    v24 = v22 + *(int *)(v23 + 20);
    v25 = (_QWORD *)swift_task_alloc(dword_1011163CC);
    *(_QWORD *)(v0 + 192) = v25;
    *v25 = v0;
    v25[1] = sub_100257708;
    return sub_100B6F844(v24);
  }
}

uint64_t sub_100257AF8()
{
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_100257B0C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100257BF8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100257BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100257C54, 0, 0);
}

uint64_t sub_100257C54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No IDSTransportService_ItemSharingCrossAccount available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD00000000000002BLL;
    v11[1] = 0x8000000100ECC560;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100257DA8()
{
  return swift_task_switch(sub_100257DBC, 0, 0);
}

uint64_t sub_100257DBC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100257EA8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100257EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100257F04, 0, 0);
}

uint64_t sub_100257F04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconManagerService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000014;
    v11[1] = 0x8000000100ECC5D0;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100258058()
{
  return swift_task_switch(sub_10025806C, 0, 0);
}

uint64_t sub_10025806C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB58 + dword_1010EBB58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB5C);
    *(_QWORD *)(v0 + 120) = v2;
    *v2 = v0;
    v2[1] = sub_100258158;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100258158(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002581B4, 0, 0);
}

uint64_t sub_1002581B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No PeerTrustService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000010;
    v11[1] = 0x8000000100ECC5B0;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100258308(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 496) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v1 + 504) = v2;
  *v2 = v1;
  v2[1] = sub_100258364;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_100258364(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 504);
  v4 = *v2;
  *(_QWORD *)(v4 + 512) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  *(_QWORD *)(v4 + 520) = v6;
  *v6 = v4;
  v6[1] = sub_1002583FC;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_1002583FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 520);
  *(_QWORD *)(v3 + 528) = a1;
  *(_QWORD *)(v3 + 536) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1002586B4;
  else
    v5 = sub_10025846C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10025846C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v16 = v0[66];
  v1 = v0[64];
  v2 = v0[62];
  v3 = type metadata accessor for SharingCircleKeyManager();
  v0[68] = v3;
  v4 = swift_allocObject(v3, 128, 15);
  v0[69] = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v0[70] = v5;
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v1;
  sub_100030784(v2, (uint64_t)(v0 + 29));
  v7 = v0[32];
  v8 = sub_10009F5D0((uint64_t)(v0 + 29), v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = *v10;
  swift_retain_n(v4, 2);
  swift_retain();
  v0[71] = sub_100256D60(v4, v1, v11, (uint64_t (*)(_QWORD))type metadata accessor for ShareKeysDownloadUseCase);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 29);
  swift_release();
  swift_task_dealloc(v10);
  v12 = type metadata accessor for FamilyCircleService();
  v0[72] = v12;
  v0[37] = v12;
  v0[38] = &off_10109F1D0;
  v0[34] = v16;
  v0[17] = v3;
  v0[18] = &off_10109BDA0;
  v0[14] = v4;
  sub_100030784(v2, (uint64_t)(v0 + 19));
  v13 = dword_1010F402C;
  swift_retain();
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[73] = v14;
  *v14 = v0;
  v14[1] = sub_100258638;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_100258638(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 584);
  *(_QWORD *)(*v2 + 592) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 152));
    v6 = sub_100258848;
  }
  else
  {
    *(_QWORD *)(v4 + 600) = a1;
    v6 = sub_1002586E8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002586B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002586E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[75];
  v2 = v0[71];
  v3 = v0[70];
  v4 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[76] = v4;
  v0[27] = v4;
  v0[28] = &off_10109EA18;
  v0[24] = v1;
  v0[57] = type metadata accessor for ShareKeysDownloadUseCase();
  v0[58] = &off_101080CF8;
  v0[54] = v2;
  v5 = swift_allocObject(v3, 128, 15);
  swift_retain();
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v0[11] = v3;
  v0[12] = &off_1010B33F8;
  v0[13] = &off_1010761A8;
  v0[8] = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F4054);
  v0[77] = v6;
  *v6 = v0;
  v6[1] = sub_1002587CC;
  return swift_task_switch(sub_100257DBC, 0, 0);
}

uint64_t sub_1002587CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 616);
  *(_QWORD *)(*v2 + 624) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 152));
    v6 = sub_100258C58;
  }
  else
  {
    *(_QWORD *)(v4 + 632) = a1;
    v6 = sub_1002588C8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100258848()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 272));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002588C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;

  v32 = v0[79];
  v33 = v0[72];
  v36 = v0[69];
  v34 = v0[66];
  v35 = v0[68];
  v1 = v0[37];
  v2 = sub_10009F5D0((uint64_t)(v0 + 34), v1);
  v3 = *(_QWORD *)(v1 - 8);
  v37 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v37, v2, v1);
  v4 = v0[17];
  sub_10009F5D0((uint64_t)(v0 + 14), v4);
  v5 = *(_QWORD *)(v4 - 8);
  v31 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v5 + 16))();
  v6 = v0[22];
  sub_10009F5D0((uint64_t)(v0 + 19), v6);
  v7 = *(_QWORD *)(v6 - 8);
  v30 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v7 + 16))();
  v8 = v0[27];
  v9 = sub_10009F5D0((uint64_t)(v0 + 24), v8);
  v10 = *(_QWORD *)(v8 - 8);
  v11 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v11, v9, v8);
  v12 = v0[57];
  v13 = sub_10009F5D0((uint64_t)(v0 + 54), v12);
  v14 = *(_QWORD *)(v12 - 8);
  v15 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v15, v13, v12);
  v16 = v0[11];
  v17 = sub_10009F5D0((uint64_t)(v0 + 8), v16);
  v18 = *(_QWORD *)(v16 - 8);
  v19 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v19, v17, v16);
  v20 = *v37;
  v21 = *v31;
  v22 = *v30;
  v23 = *v11;
  v24 = *v15;
  v25 = *v19;
  v26 = swift_retain();
  v0[80] = sub_100255FA8(v26, v20, v21, v22, v23, v24, v25, v32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 8);
  swift_task_dealloc(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 54);
  swift_task_dealloc(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_task_dealloc(v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 19);
  swift_task_dealloc(v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 14);
  swift_task_dealloc(v31);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 34);
  swift_task_dealloc(v37);
  v0[42] = v33;
  v0[43] = &off_10109F1D0;
  v0[39] = v34;
  v0[47] = v35;
  v0[48] = &off_10109BDA0;
  v0[44] = v36;
  v27 = dword_1010F402C;
  swift_retain();
  swift_retain();
  v28 = (_QWORD *)swift_task_alloc(v27);
  v0[81] = v28;
  *v28 = v0;
  v28[1] = sub_100258BE4;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_100258BE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 648);
  *(_QWORD *)(*v2 + 656) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100258E1C;
  }
  else
  {
    *(_QWORD *)(v4 + 664) = a1;
    v6 = sub_100258D04;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100258C58()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 432));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 192));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 272));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100258D04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[83];
  v2 = v0[70];
  v0[52] = v0[76];
  v0[53] = &off_10109EA18;
  v0[49] = v1;
  v3 = swift_allocObject(v2, 128, 15);
  swift_defaultActor_initialize(v3);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  v0[5] = v2;
  v0[6] = &off_1010B33F8;
  v0[7] = &off_1010761A8;
  v0[2] = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_1010F405C);
  v0[84] = v4;
  *v4 = v0;
  v4[1] = sub_100258DB0;
  return swift_task_switch(sub_10025806C, 0, 0);
}

uint64_t sub_100258DB0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[59] = v2;
  v3[60] = a1;
  v3[61] = v1;
  v4 = v3[84];
  v3[85] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100259118;
  else
    v5 = sub_100258EA8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100258E1C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 352));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 312));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100258EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = qword_1010E9CF0;
  swift_retain();
  swift_retain();
  if (v3 == -1)
  {
    v28 = v2;
    v29 = v1;
  }
  else
  {
    swift_once(&qword_1010E9CF0, sub_10058CADC);
    v28 = *(_QWORD *)(v0 + 568);
    v29 = *(_QWORD *)(v0 + 640);
  }
  v27 = *(_QWORD *)(v0 + 480);
  v26 = *(_QWORD *)(v0 + 512);
  v4 = qword_1011B7160;
  v5 = *(_QWORD *)(v0 + 336);
  sub_10009F5D0(v0 + 312, v5);
  v6 = *(_QWORD *)(v5 - 8);
  v25 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v0 + 376);
  v8 = sub_10009F5D0(v0 + 352, v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = sub_10009F5D0(v0 + 392, v11);
  v13 = *(_QWORD *)(v11 - 8);
  v14 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(v14, v12, v11);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = sub_10009F5D0(v0 + 16, v15);
  v17 = *(_QWORD *)(v15 - 8);
  v18 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v18, v16, v15);
  v19 = *v25;
  v20 = *v10;
  v21 = *v14;
  v22 = *v18;
  swift_retain();
  v23 = sub_100256318(v26, v19, v20, v21, v22, v27, v28, v29, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 392));
  swift_task_dealloc(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 352));
  swift_task_dealloc(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 312));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v23);
}

uint64_t sub_100259118()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 392));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 352));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 312));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002591C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_BYTE *)(v4 + 104) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 32) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 40) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v4 + 48) = v8;
  *(_QWORD *)(v4 + 56) = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)swift_task_alloc(dword_1010F404C);
  *(_QWORD *)(v4 + 64) = v9;
  *v9 = v4;
  v9[1] = sub_100259244;
  return sub_100258308(a4);
}

uint64_t sub_100259244(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1002592C0, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 56));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1002592C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void *, uint64_t);

  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 16), v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_101062DE0, v10 + 9, v8 | 7);
  *(_QWORD *)(v0 + 80) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v9, v2, v4);
  v12 = v11 + v10;
  *(_QWORD *)v12 = v7;
  *(_BYTE *)(v12 + 8) = v6;
  v13 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v16 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_bridgeObjectRetain(v7);
  v14 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 88) = v14;
  *v14 = v0;
  v14[1] = sub_10025940C;
  return v16(&unk_1010F40E0, v11);
}

uint64_t sub_10025940C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_1002594B8;
  else
    v3 = sub_100259478;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100259478()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002594B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002594F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  *(_BYTE *)(v3 + 240) = a3;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = a2;
  v4 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
  *(_QWORD *)(v3 + 72) = v4;
  v5 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v3 + 80) = v5;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
  *(_QWORD *)(v3 + 96) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v3 + 104) = v7;
  *(_QWORD *)(v3 + 112) = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v3 + 120) = v8;
  *v8 = v3;
  v8[1] = sub_1002595A4;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_1002595A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v2 + 120);
  v4 = *v2;
  *(_QWORD *)(v4 + 128) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10025962C, 0, 0);
  v5 = *(_QWORD *)(v4 + 88);
  swift_task_dealloc(*(_QWORD *)(v4 + 112));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10025962C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[16];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[17] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[18] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[19] = v6;
  *v6 = v0;
  v6[1] = sub_1002596E4;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_1002596E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100259844;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
    v6 = sub_100259758;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100259758()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[21];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[22] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[23] = v3;
  *v3 = v0;
  v3[1] = sub_1002597D0;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_1002597D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100259B18;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v6 = sub_100259894;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100259844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100259894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v28)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = swift_allocObject(*(_QWORD *)(v0 + 144), 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0(v0 + 16, v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  *(_QWORD *)(v0 + 208) = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v12 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 80);
  v17 = *(_BYTE *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 64);
  sub_10005972C(*(_QWORD *)(v0 + 56), v11, type metadata accessor for OwnerPeerTrust);
  sub_10005972C(v18, v13, type metadata accessor for OwnerSharingCircle);
  v19 = *(unsigned __int8 *)(v14 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = *(unsigned __int8 *)(v15 + 80);
  v22 = (v12 + v21 + v20) & ~v21;
  v23 = v22 + v16;
  v24 = swift_allocObject(&unk_101062D90, v23 + 1, v19 | v21 | 7);
  *(_QWORD *)(v0 + 216) = v24;
  *(_QWORD *)(v24 + 16) = v10;
  sub_1000126EC(v11, v24 + v20, type metadata accessor for OwnerPeerTrust);
  sub_1000126EC(v13, v24 + v22, type metadata accessor for OwnerSharingCircle);
  *(_BYTE *)(v24 + v23) = v17;
  v25 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v28 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v26 = (_QWORD *)swift_task_alloc(v25);
  *(_QWORD *)(v0 + 224) = v26;
  *v26 = v0;
  v26[1] = sub_100259AAC;
  return v28(&unk_1010F40A0, v24);
}

uint64_t sub_100259AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_100259BDC;
  else
    v3 = sub_100259B74;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100259B18()
{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100259B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 208));
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100259BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100259C38(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  *(_BYTE *)(v2 + 200) = a2;
  *(_QWORD *)(v2 + 56) = a1;
  v3 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 64) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 72) = v4;
  v5 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v2 + 80) = v5;
  *(_QWORD *)(v2 + 88) = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v2 + 96) = v6;
  *v6 = v2;
  v6[1] = sub_100259CC4;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_100259CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 96);
  v4 = *v2;
  *(_QWORD *)(v4 + 104) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 88));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    *(_QWORD *)(v4 + 112) = v6;
    *v6 = v4;
    v6[1] = sub_100259D64;
    return swift_task_switch(sub_100257B0C, 0, 0);
  }
}

uint64_t sub_100259D64(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_100259ED4;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_100259DE0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100259DE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[16];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[17] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[18] = v3;
  *v3 = v0;
  v3[1] = sub_100259E58;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_100259E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_10025A110;
  }
  else
  {
    *(_QWORD *)(v4 + 160) = a1;
    v6 = sub_100259F08;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100259ED4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100259F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v20)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = sub_10009F5D0(v0 + 16, v2);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v2);
  v7 = sub_100256BD8(v3, *v6, v1);
  *(_QWORD *)(v0 + 168) = v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v6);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v0 + 72);
  v12 = *(_BYTE *)(v0 + 200);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v8, *(_QWORD *)(v0 + 56), v10);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = v14 + v9;
  v16 = swift_allocObject(&unk_101062D18, v14 + v9 + 1, v13 | 7);
  *(_QWORD *)(v0 + 176) = v16;
  *(_QWORD *)(v16 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v16 + v14, v8, v10);
  *(_BYTE *)(v16 + v15) = v12;
  v17 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v20 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v18 = (_QWORD *)swift_task_alloc(v17);
  *(_QWORD *)(v0 + 184) = v18;
  *v18 = v0;
  v18[1] = sub_10025A0A4;
  return v20(&unk_1010EE258, v16);
}

uint64_t sub_10025A0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025A18C;
  else
    v3 = sub_10025A14C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025A110()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025A14C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025A18C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025A1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10025A240(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2[38] = a1;
  v2[39] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[40] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[41] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[42] = v5;
  v2[43] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v2[44] = v6;
  *v6 = v2;
  v6[1] = sub_10025A2C8;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025A2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 352);
  v4 = *v2;
  *(_QWORD *)(v4 + 360) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 344));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1010F4034);
    *(_QWORD *)(v4 + 368) = v6;
    *v6 = v4;
    v6[1] = sub_10025A368;
    return swift_task_switch(sub_1001BECD8, 0, 0);
  }
}

uint64_t sub_10025A368(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  *(_QWORD *)(v3 + 376) = a1;
  *(_QWORD *)(v3 + 384) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10025A604;
  else
    v5 = sub_10025A3D4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10025A3D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v16 = v0[47];
  v1 = v0[45];
  v2 = v0[39];
  v3 = type metadata accessor for SharingCircleKeyManager();
  v4 = swift_allocObject(v3, 128, 15);
  v0[49] = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v0[50] = v5;
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v1;
  sub_100030784(v2, (uint64_t)(v0 + 18));
  v7 = v0[21];
  v8 = sub_10009F5D0((uint64_t)(v0 + 18), v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = *v10;
  swift_retain();
  v12 = swift_retain();
  v0[51] = sub_100256D60(v12, v1, v11, (uint64_t (*)(_QWORD))type metadata accessor for ShareKeysDownloadUseCase);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 18);
  swift_task_dealloc(v10);
  v0[11] = type metadata accessor for FamilyCircleService();
  v0[12] = &off_10109F1D0;
  v0[8] = v16;
  v0[16] = v3;
  v0[17] = &off_10109BDA0;
  v0[13] = v4;
  sub_100030784(v2, (uint64_t)(v0 + 33));
  v13 = dword_1010F402C;
  swift_retain();
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[52] = v14;
  *v14 = v0;
  v14[1] = sub_10025A588;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025A588(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 416);
  *(_QWORD *)(*v2 + 424) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 264));
    v6 = sub_10025A798;
  }
  else
  {
    *(_QWORD *)(v4 + 432) = a1;
    v6 = sub_10025A640;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025A604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025A640()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[54];
  v2 = v0[50];
  v3 = v0[51];
  v0[26] = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[27] = &off_10109EA18;
  v0[23] = v1;
  v0[31] = type metadata accessor for ShareKeysDownloadUseCase();
  v0[32] = &off_101080CF8;
  v0[28] = v3;
  v4 = swift_allocObject(v2, 128, 15);
  swift_retain();
  swift_defaultActor_initialize(v4);
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  v0[5] = v2;
  v0[6] = &off_1010B33F8;
  v0[7] = &off_1010761A8;
  v0[2] = v4;
  v5 = (_QWORD *)swift_task_alloc(dword_1010F4054);
  v0[55] = v5;
  *v5 = v0;
  v5[1] = sub_10025A71C;
  return swift_task_switch(sub_100257DBC, 0, 0);
}

uint64_t sub_10025A71C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 440);
  *(_QWORD *)(*v2 + 448) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v4 + 264));
    v6 = sub_10025ABF4;
  }
  else
  {
    *(_QWORD *)(v4 + 456) = a1;
    v6 = sub_10025A820;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025A798()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025A820()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t);

  v43 = v0[57];
  v1 = v0[11];
  sub_10009F5D0((uint64_t)(v0 + 8), v1);
  v2 = *(_QWORD *)(v1 - 8);
  v42 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v2 + 16))();
  v3 = v0[16];
  sub_10009F5D0((uint64_t)(v0 + 13), v3);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(void))(v4 + 16);
  v7 = (uint64_t *)v5;
  v41 = v5;
  v6();
  v8 = v0[36];
  sub_10009F5D0((uint64_t)(v0 + 33), v8);
  v9 = *(_QWORD *)(v8 - 8);
  v40 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(v9 + 16))();
  v10 = v0[26];
  v11 = sub_10009F5D0((uint64_t)(v0 + 23), v10);
  v12 = *(_QWORD *)(v10 - 8);
  v13 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v13, v11, v10);
  v14 = v0[31];
  v15 = sub_10009F5D0((uint64_t)(v0 + 28), v14);
  v16 = *(_QWORD *)(v14 - 8);
  v17 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v17, v15, v14);
  v18 = v0[5];
  v19 = sub_10009F5D0((uint64_t)(v0 + 2), v18);
  v20 = *(_QWORD *)(v18 - 8);
  v21 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 16))(v21, v19, v18);
  v22 = *v42;
  v23 = *v7;
  v24 = *v40;
  v25 = *v13;
  v26 = *v17;
  v27 = *v21;
  v28 = swift_retain();
  v29 = sub_100255FA8(v28, v22, v23, v24, v25, v26, v27, v43);
  v0[58] = v29;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 28);
  swift_task_dealloc(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 23);
  swift_task_dealloc(v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 33);
  swift_task_dealloc(v40);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 13);
  swift_task_dealloc(v41);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 8);
  swift_task_dealloc(v42);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v31 = v0[42];
  v30 = v0[43];
  v32 = v0[40];
  v33 = v0[41];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v33 + 16))(v30, v0[38], v32);
  v34 = *(unsigned __int8 *)(v33 + 80);
  v35 = (v34 + 24) & ~v34;
  v36 = swift_allocObject(&unk_101062F20, v35 + v31, v34 | 7);
  v0[59] = v36;
  *(_QWORD *)(v36 + 16) = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v36 + v35, v30, v32);
  v37 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v44 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v38 = (_QWORD *)swift_task_alloc(v37);
  v0[60] = v38;
  *v38 = v0;
  v38[1] = sub_10025AB88;
  return v44(&unk_1010F41E0, v36);
}

uint64_t sub_10025AB88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025AD28;
  else
    v3 = sub_10025ACA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025ABF4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 224));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 184));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025ACA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 344);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025AD28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 376);
  swift_release(*(_QWORD *)(v0 + 360));
  swift_release(v3);
  swift_release(v4);
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025AD9C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10025ADF8;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025ADF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025AE6C, 0, 0);
}

uint64_t sub_10025AE6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[9];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[10] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[11] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_10025AF24;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025AF24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025B084;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_10025AF98;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025AF98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[14];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[15] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[16] = v3;
  *v3 = v0;
  v3[1] = sub_10025B010;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025B010(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025B2C4;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_10025B0C0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025B084()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025B0C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void *, uint64_t);

  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[10];
  v4 = v0[9];
  v5 = swift_allocObject(v0[11], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  v0[19] = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v11 = v0[7];
  v12 = swift_allocObject(&unk_101062EF8, 32, 7);
  v0[20] = v12;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v16 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_bridgeObjectRetain(v11);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[21] = v14;
  *v14 = v0;
  v14[1] = sub_10025B258;
  return v16(&unk_1010F41C8, v12);
}

uint64_t sub_10025B258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_10025B354;
  }
  else
  {
    swift_release();
    v3 = sub_10025B30C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025B2C4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025B30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025B354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025B3AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10025B408;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025B408(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025B47C, 0, 0);
}

uint64_t sub_10025B47C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[9];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[10] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[11] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_10025B534;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025B534(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613B0;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_10025B5A8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025B5A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[14];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[15] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[16] = v3;
  *v3 = v0;
  v3[1] = sub_10025B620;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025B620(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613A4;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_10025B694;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025B694()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void *, uint64_t);

  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[10];
  v4 = v0[9];
  v5 = swift_allocObject(v0[11], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  v0[19] = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v11 = v0[7];
  v12 = swift_allocObject(&unk_101062E30, 32, 7);
  v0[20] = v12;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v16 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_bridgeObjectRetain(v11);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[21] = v14;
  *v14 = v0;
  v14[1] = sub_10025B82C;
  return v16(&unk_1010F4118, v12);
}

uint64_t sub_10025B82C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002613C0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 160));
    v4 = sub_1002613A8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10025B898(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2[7] = a1;
  v2[8] = a2;
  v3 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
  v2[9] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[10] = v4;
  v2[11] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
  v2[12] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[13] = v6;
  v2[14] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v2[15] = v7;
  *v7 = v2;
  v7[1] = sub_10025B944;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025B944(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v2 + 120);
  v4 = *v2;
  *(_QWORD *)(v4 + 128) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10025B9CC, 0, 0);
  v5 = *(_QWORD *)(v4 + 88);
  swift_task_dealloc(*(_QWORD *)(v4 + 112));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10025B9CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[16];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[17] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[18] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[19] = v6;
  *v6 = v0;
  v6[1] = sub_10025BA84;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025BA84(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100259844;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
    v6 = sub_10025BAF8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025BAF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[21];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[22] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[23] = v3;
  *v3 = v0;
  v3[1] = sub_10025BB70;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025BB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100259B18;
  }
  else
  {
    *(_QWORD *)(v4 + 200) = a1;
    v6 = sub_10025BBE4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025BBE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t (*v26)(void *, uint64_t);

  v1 = v0[25];
  v2 = v0[22];
  v3 = v0[17];
  v4 = v0[16];
  v5 = swift_allocObject(v0[18], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  v0[26] = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v12 = v0[13];
  v11 = v0[14];
  v13 = v0[11];
  v14 = v0[12];
  v15 = v0[9];
  v16 = v0[10];
  v17 = v0[8];
  sub_10005972C(v0[7], v11, type metadata accessor for OwnerPeerTrust);
  sub_10005972C(v17, v13, type metadata accessor for OwnerSharingCircle);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = *(unsigned __int8 *)(v15 + 80);
  v21 = (v12 + v20 + v19) & ~v20;
  v22 = swift_allocObject(&unk_101062ED0, v21 + v16, v18 | v20 | 7);
  v0[27] = v22;
  *(_QWORD *)(v22 + 16) = v10;
  sub_1000126EC(v11, v22 + v19, type metadata accessor for OwnerPeerTrust);
  sub_1000126EC(v13, v22 + v21, type metadata accessor for OwnerSharingCircle);
  v23 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v26 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v24 = (_QWORD *)swift_task_alloc(v23);
  v0[28] = v24;
  *v24 = v0;
  v24[1] = sub_100259AAC;
  return v26(&unk_1010F41B0, v22);
}

uint64_t sub_10025BDF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1[7] = a1;
  v2 = type metadata accessor for UUID(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[10] = v4;
  v1[11] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v1[12] = v5;
  *v5 = v1;
  v5[1] = sub_10025BE78;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025BE78(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 96);
  v4 = *v2;
  *(_QWORD *)(v4 + 104) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 88));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    *(_QWORD *)(v4 + 112) = v6;
    *v6 = v4;
    v6[1] = sub_10025BF18;
    return swift_task_switch(sub_100257B0C, 0, 0);
  }
}

uint64_t sub_10025BF18(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_100259ED4;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_10025BF94;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025BF94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[16];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[17] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[18] = v3;
  *v3 = v0;
  v3[1] = sub_10025C00C;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025C00C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v6 = sub_10025A110;
  }
  else
  {
    *(_QWORD *)(v4 + 160) = a1;
    v6 = sub_10025C088;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025C088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v18)(void *, uint64_t);

  v1 = v0[20];
  v2 = v0[17];
  v3 = v0[13];
  v4 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v5 = *(_QWORD *)(v2 - 8);
  v6 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v6, v4, v2);
  v7 = sub_100256BD8(v3, *v6, v1);
  v0[21] = v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v6);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v9 = v0[10];
  v8 = v0[11];
  v10 = v0[8];
  v11 = v0[9];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 16))(v8, v0[7], v10);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_101062E58, v13 + v9, v12 | 7);
  v0[22] = v14;
  *(_QWORD *)(v14 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v14 + v13, v8, v10);
  v15 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v18 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc(v15);
  v0[23] = v16;
  *v16 = v0;
  v16[1] = sub_10025A0A4;
  return v18(&unk_1010EE598, v14);
}

uint64_t sub_10025C210()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v0 + 128) = v1;
  *v1 = v0;
  v1[1] = sub_10025C268;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025C268(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 128);
  v4 = *v2;
  *(_QWORD *)(v4 + 136) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025C2DC, 0, 0);
}

uint64_t sub_10025C2DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[17];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[18] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[19] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[20] = v6;
  *v6 = v0;
  v6[1] = sub_10025C394;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025C394(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 160);
  *(_QWORD *)(*v2 + 168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025C4F4;
  }
  else
  {
    *(_QWORD *)(v4 + 176) = a1;
    v6 = sub_10025C408;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025C408()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[22];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[23] = v2;
  v0[14] = v2;
  v0[15] = &off_10109EA18;
  v0[11] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[24] = v3;
  *v3 = v0;
  v3[1] = sub_10025C480;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025C480(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025C6FC;
  }
  else
  {
    *(_QWORD *)(v4 + 208) = a1;
    v6 = sub_10025C530;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025C4F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025C530()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[26];
  v2 = v0[23];
  v3 = v0[18];
  v4 = v0[17];
  v5 = swift_allocObject(v0[19], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 11), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v0[27] = sub_10025690C(v4, v9, v1, v5, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 11);
  swift_task_dealloc(v8);
  v10 = type metadata accessor for CheckDataIntegrityUseCase();
  swift_allocObject(v10, 128, 15);
  v11 = (_QWORD *)swift_task_alloc(dword_1010ECA2C);
  v0[28] = v11;
  *v11 = v0;
  v11[1] = sub_10025C650;
  return sub_100068460();
}

uint64_t sub_10025C650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  v5 = *(_QWORD **)v2;
  v5[29] = a1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5[43] = v1;
    return swift_task_switch(sub_10025CA24, 0, 0);
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1010EC974);
    v5[30] = v7;
    *v7 = v5;
    v7[1] = sub_10025C744;
    return sub_1000702BC((uint64_t)(v5 + 2));
  }
}

uint64_t sub_10025C6FC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025C744()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v14;

  v2 = *(_QWORD *)(*v1 + 240);
  v3 = *v1;
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 248) = v0;
  *(_QWORD *)(v3 + 256) = v5;
  v6 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 264) = v4;
  *(_QWORD *)(v3 + 272) = v6;
  v8 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 280) = v7;
  *(_QWORD *)(v3 + 288) = v8;
  v14 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(v3 + 296) = v14;
  v9 = *(_QWORD *)(v3 + 72);
  v10 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 312) = v9;
  *(_QWORD *)(v3 + 320) = v10;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10025C9E0, 0, 0);
  swift_release();
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101120210 + dword_101120210);
  v12 = (_QWORD *)swift_task_alloc(unk_101120214);
  *(_QWORD *)(v3 + 328) = v12;
  *v12 = v3;
  v12[1] = sub_10025C86C;
  return v13(v5, v4, v6, v7, v8, v14, v9, v10);
}

uint64_t sub_10025C86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
    v3 = sub_10025C998;
  else
    v3 = sub_10025C950;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025C950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025C998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025C9E0()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 344) = *(_QWORD *)(v0 + 248);
  return swift_task_switch(sub_10025CA24, 0, 0);
}

uint64_t sub_10025CA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025CA6C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_10025CAC4;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025CAC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 56);
  v4 = *v2;
  *(_QWORD *)(v4 + 64) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025CB38, 0, 0);
}

uint64_t sub_10025CB38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[8];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[9] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[10] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_10025CBF0;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025CBF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025CD50;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = a1;
    v6 = sub_10025CC64;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025CC64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[13];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[14] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_10025CCDC;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025CCDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025CF00;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_10025CD8C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025CD50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025CD8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[17];
  v2 = v0[14];
  v3 = v0[9];
  v4 = v0[8];
  v5 = swift_allocObject(v0[10], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v0[18] = sub_10025690C(v4, v9, v1, v5, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  v10 = (_QWORD *)swift_task_alloc(dword_10112003C);
  v0[19] = v10;
  *v10 = v0;
  v10[1] = sub_10025CE9C;
  return sub_100D9C040();
}

uint64_t sub_10025CE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10025CF90;
  else
    v3 = sub_10025CF48;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025CF00()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025CF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025CF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025CFD8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2[12] = a1;
  v2[13] = a2;
  v3 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[15] = v4;
  v2[16] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[18] = v6;
  v2[19] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v2[20] = v7;
  *v7 = v2;
  v7[1] = sub_10025D084;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025D084(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(*v2 + 160);
  v4 = *v2;
  *(_QWORD *)(v4 + 168) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    v5 = *(_QWORD *)(v4 + 128);
    swift_task_dealloc(*(_QWORD *)(v4 + 152));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    *(_QWORD *)(v4 + 176) = v7;
    *v7 = v4;
    v7[1] = sub_10025D130;
    return swift_task_switch(sub_100257B0C, 0, 0);
  }
}

uint64_t sub_10025D130(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 176);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    v7 = v4[16];
    swift_task_dealloc(v4[19]);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    v4[23] = a1;
    return swift_task_switch(sub_10025D1C8, 0, 0);
  }
}

uint64_t sub_10025D1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v24)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = &off_10109EA18;
  *(_QWORD *)(v0 + 16) = v1;
  v4 = type metadata accessor for ShareRequestUseCase();
  v5 = swift_allocObject(v4, 160, 15);
  *(_QWORD *)(v0 + 192) = v5;
  v6 = sub_10009F5D0(v0 + 16, v3);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v3);
  *(_QWORD *)(v0 + 56) = *v8;
  *(_QWORD *)(v0 + 80) = v3;
  *(_QWORD *)(v0 + 88) = &off_10109EA18;
  swift_retain();
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = v2;
  sub_10000F9FC((__int128 *)(v0 + 56), v5 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 104);
  sub_10005972C(*(_QWORD *)(v0 + 96), v9, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v15, v11, type metadata accessor for MemberPeerTrust);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = *(unsigned __int8 *)(v13 + 80);
  v19 = (v10 + v18 + v17) & ~v18;
  v20 = swift_allocObject(&unk_101062EA8, v19 + v14, v16 | v18 | 7);
  *(_QWORD *)(v0 + 200) = v20;
  *(_QWORD *)(v20 + 16) = v5;
  sub_1000126EC(v9, v20 + v17, type metadata accessor for MemberSharingCircle);
  sub_1000126EC(v11, v20 + v19, type metadata accessor for MemberPeerTrust);
  v21 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v24 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v22 = (_QWORD *)swift_task_alloc(v21);
  *(_QWORD *)(v0 + 208) = v22;
  *v22 = v0;
  v22[1] = sub_10025D3F0;
  return v24(&unk_1010F4188, v20);
}

uint64_t sub_10025D3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025D4A8;
  else
    v3 = sub_10025D45C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025D45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025D4A8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025D4F0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  *(_BYTE *)(v3 + 80) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  v4 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v3 + 32) = v4;
  *v4 = v3;
  v4[1] = sub_10025D550;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025D550(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 32);
  v4 = *v2;
  *(_QWORD *)(v4 + 40) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025D5C4, 0, 0);
}

uint64_t sub_10025D5C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = type metadata accessor for SharingCircleKeyManager();
  v4 = swift_allocObject(v3, 128, 15);
  *(_QWORD *)(v0 + 48) = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v1;
  swift_retain();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v0 + 56) = sub_100256D60(v4, v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for ShareKeysUploadUseCase);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD2E4);
  *(_QWORD *)(v0 + 64) = v7;
  *v7 = v0;
  v7[1] = sub_10025D6AC;
  return sub_1004D68D4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 80));
}

uint64_t sub_10025D6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10025D758;
  else
    v3 = sub_10025D710;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025D710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025D758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025D7A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[7] = a1;
  v2[8] = a2;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v2[9] = v3;
  *v3 = v2;
  v3[1] = sub_10025D7FC;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025D7FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 72);
  v4 = *v2;
  *(_QWORD *)(v4 + 80) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025D870, 0, 0);
}

uint64_t sub_10025D870()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[10];
  v2 = v0[8];
  v3 = type metadata accessor for SharingCircleKeyManager();
  v4 = swift_allocObject(v3, 128, 15);
  v0[11] = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v1;
  sub_100030784(v2, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = sub_10009F5D0((uint64_t)(v0 + 2), v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = *v10;
  swift_retain();
  v12 = swift_retain();
  v0[12] = sub_100256D60(v12, v1, v11, (uint64_t (*)(_QWORD))type metadata accessor for ShareKeysDownloadUseCase);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v10);
  v13 = (_QWORD *)swift_task_alloc(dword_1010FFC5C);
  v0[13] = v13;
  *v13 = v0;
  v13[1] = sub_10025D9BC;
  return sub_1005A1250(v0[7]);
}

uint64_t sub_10025D9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002613C8;
  else
    v3 = sub_1002613AC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025DA20(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[7] = a1;
  v2[8] = a2;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v2[9] = v3;
  *v3 = v2;
  v3[1] = sub_10025DA7C;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025DA7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 72);
  v4 = *v2;
  *(_QWORD *)(v4 + 80) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025DAF0, 0, 0);
}

uint64_t sub_10025DAF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[10];
  v2 = v0[8];
  v3 = type metadata accessor for SharingCircleKeyManager();
  v4 = swift_allocObject(v3, 128, 15);
  v0[11] = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v1;
  sub_100030784(v2, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = sub_10009F5D0((uint64_t)(v0 + 2), v7);
  v9 = *(_QWORD *)(v7 - 8);
  v10 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16))(v10, v8, v7);
  v11 = *v10;
  swift_retain();
  v12 = swift_retain();
  v0[12] = sub_100256D60(v12, v1, v11, (uint64_t (*)(_QWORD))type metadata accessor for ShareKeysDownloadUseCase);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v10);
  v13 = (_QWORD *)swift_task_alloc(dword_1010FFC6C);
  v0[13] = v13;
  *v13 = v0;
  v13[1] = sub_10025DC3C;
  return sub_1005A8B28(v0[7]);
}

uint64_t sub_10025DC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10025DCE8;
  else
    v3 = sub_10025DCA0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025DCA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025DCE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025DD30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1[6] = a1;
  v2 = sub_10001A9A8(&qword_1010ED860);
  v1[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[9] = v4;
  v1[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CheckDataIntegrityUseCase();
  swift_allocObject(v5, 128, 15);
  v6 = (_QWORD *)swift_task_alloc(dword_1010ECA2C);
  v1[11] = v6;
  *v6 = v1;
  v6[1] = sub_10025DDDC;
  return sub_100068460();
}

uint64_t sub_10025DDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*v2 + 88);
  v4 = *v2;
  *(_QWORD *)(v4 + 96) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_10025DE64, 0, 0);
  v5 = *(_QWORD *)(v4 + 56);
  swift_task_dealloc(*(_QWORD *)(v4 + 80));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10025DE64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t **v6;

  v1 = v0[8];
  v2 = v0[9];
  v3 = v0[7];
  sub_10000F9B8(v0[6], v3, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v0[7], &qword_1010ED860);
    v4 = (uint64_t **)swift_task_alloc(dword_1010EC95C);
    v0[14] = (uint64_t)v4;
    *v4 = v0;
    v4[1] = (uint64_t *)sub_10025E010;
    return sub_10006BCA0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0[9] + 32))(v0[10], v0[7], v0[8]);
    v6 = (uint64_t **)swift_task_alloc(dword_1010EC964);
    v0[13] = (uint64_t)v6;
    *v6 = v0;
    v6[1] = (uint64_t *)sub_10025DF48;
    return sub_10006CEEC(v0[10]);
  }
}

uint64_t sub_10025DF48(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[2] = v1;
  v2[3] = a1;
  swift_task_dealloc(v2[13]);
  return swift_task_switch(sub_10025DFA0, 0, 0);
}

uint64_t sub_10025DFA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_10025E010(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)*v1;
  v2[4] = v1;
  v2[5] = a1;
  swift_task_dealloc(v2[14]);
  return swift_task_switch(sub_10025E068, 0, 0);
}

uint64_t sub_10025E068()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 96));
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10025E0B8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_10025E110;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025E110(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 56);
  v4 = *v2;
  *(_QWORD *)(v4 + 64) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025E184, 0, 0);
}

uint64_t sub_10025E184()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[8];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[9] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[10] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_10025E23C;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025E23C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613BC;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = a1;
    v6 = sub_10025E2B0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025E2B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[13];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[14] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[15] = v3;
  *v3 = v0;
  v3[1] = sub_10025E328;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025E328(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613C4;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_10025E39C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025E39C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(void *, uint64_t);

  v1 = v0[17];
  v2 = v0[14];
  v3 = v0[9];
  v4 = v0[8];
  v5 = swift_allocObject(v0[10], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  v0[18] = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v11 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v14 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[19] = v12;
  *v12 = v0;
  v12[1] = sub_10025E508;
  return v14(&unk_1010F4148, v10);
}

uint64_t sub_10025E508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_10025E574;
  }
  else
  {
    swift_release();
    v3 = sub_1002613B4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025E574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release_n(*(_QWORD *)(v0 + 144), 2);
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E5C0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *(_BYTE *)(v3 + 368) = a3;
  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = a2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 200) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 208) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v3 + 216) = v6;
  *(_QWORD *)(v3 + 224) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v3 + 232) = v7;
  *v7 = v3;
  v7[1] = sub_10025E64C;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025E64C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 232);
  v4 = *v2;
  *(_QWORD *)(v4 + 240) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 224));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1010F4034);
    *(_QWORD *)(v4 + 248) = v6;
    *v6 = v4;
    v6[1] = sub_10025E6EC;
    return swift_task_switch(sub_1001BECD8, 0, 0);
  }
}

uint64_t sub_10025E6EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10025E8D0;
  else
    v5 = sub_10025E758;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10025E758()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[32];
  v2 = v0[30];
  v3 = type metadata accessor for SharingCircleKeyManager();
  v4 = swift_allocObject(v3, 128, 15);
  v0[34] = v4;
  swift_retain();
  swift_defaultActor_initialize(v4);
  v5 = type metadata accessor for KeyDropInterface();
  v0[35] = v5;
  v6 = swift_allocObject(v5, 128, 15);
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v4 + 112) = v6;
  *(_QWORD *)(v4 + 120) = v2;
  v0[11] = type metadata accessor for FamilyCircleService();
  v0[12] = &off_10109F1D0;
  v0[8] = v1;
  v0[16] = v3;
  v0[17] = &off_10109BDA0;
  v0[13] = v4;
  v7 = dword_1010F402C;
  swift_retain();
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[36] = v8;
  *v8 = v0;
  v8[1] = sub_10025E85C;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025E85C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 288);
  *(_QWORD *)(*v2 + 296) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025EA30;
  }
  else
  {
    *(_QWORD *)(v4 + 304) = a1;
    v6 = sub_10025E90C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025E8D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025E90C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[38];
  v2 = v0[35];
  v0[21] = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[22] = &off_10109EA18;
  v0[18] = v1;
  v3 = swift_allocObject(v2, 128, 15);
  swift_defaultActor_initialize(v3);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  v0[5] = v2;
  v0[6] = &off_1010B33F8;
  v0[7] = &off_1010761A8;
  v0[2] = v3;
  v4 = (_QWORD *)swift_task_alloc(dword_1010F405C);
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_10025E9BC;
  return swift_task_switch(sub_10025806C, 0, 0);
}

uint64_t sub_10025E9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 312);
  *(_QWORD *)(*v2 + 320) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025EDE0;
  }
  else
  {
    *(_QWORD *)(v4 + 328) = a1;
    v6 = sub_10025EAA4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025EA30()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025EAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t (*v38)(void *, uint64_t);

  v37 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = sub_10009F5D0(v0 + 64, v1);
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v4, v2, v1);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = sub_10009F5D0(v0 + 104, v5);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v5);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = sub_10009F5D0(v0 + 144, v9);
  v11 = *(_QWORD *)(v9 - 8);
  v12 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v12, v10, v9);
  v13 = *(_QWORD *)(v0 + 40);
  v14 = sub_10009F5D0(v0 + 16, v13);
  v15 = *(_QWORD *)(v13 - 8);
  v16 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v15 + 16))(v16, v14, v13);
  v17 = *v4;
  v18 = *v8;
  v19 = *v12;
  v20 = *v16;
  v21 = swift_retain();
  v22 = sub_100256EEC(v21, v17, v18, v19, v20, v37);
  *(_QWORD *)(v0 + 336) = v22;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
  swift_task_dealloc(v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  swift_task_dealloc(v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(v4);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v24 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 224);
  v25 = *(_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 208);
  v27 = *(_BYTE *)(v0 + 368);
  v28 = *(_QWORD *)(v0 + 192);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 16))(v23, *(_QWORD *)(v0 + 184), v25);
  v29 = *(unsigned __int8 *)(v26 + 80);
  v30 = (v29 + 24) & ~v29;
  v31 = (v24 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_101062E08, v31 + 9, v29 | 7);
  *(_QWORD *)(v0 + 344) = v32;
  *(_QWORD *)(v32 + 16) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v32 + v30, v23, v25);
  v33 = v32 + v31;
  *(_QWORD *)v33 = v28;
  *(_BYTE *)(v33 + 8) = v27;
  v34 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v38 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_bridgeObjectRetain(v28);
  v35 = (_QWORD *)swift_task_alloc(v34);
  *(_QWORD *)(v0 + 352) = v35;
  *v35 = v0;
  v35[1] = sub_10025ED74;
  return v38(&unk_1010F40F8, v32);
}

uint64_t sub_10025ED74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025EEE0;
  else
    v3 = sub_10025EE74;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025EDE0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 144));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025EE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 224);
  swift_release(*(_QWORD *)(v0 + 336));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025EEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  swift_release(*(_QWORD *)(v0 + 240));
  swift_release(v3);
  swift_release(v2);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025EF48(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  *(_QWORD *)(v8 + 160) = v58;
  *(_QWORD *)(v8 + 168) = v59;
  *(_OWORD *)(v8 + 144) = v57;
  *(_QWORD *)(v8 + 128) = v54;
  *(_QWORD *)(v8 + 136) = v55;
  *(_DWORD *)(v8 + 324) = v52;
  *(_DWORD *)(v8 + 320) = v51;
  *(_QWORD *)(v8 + 112) = v50;
  *(_QWORD *)(v8 + 120) = v53;
  *(_QWORD *)(v8 + 96) = v48;
  *(_QWORD *)(v8 + 104) = v49;
  *(_QWORD *)(v8 + 80) = v46;
  *(_QWORD *)(v8 + 88) = v47;
  *(_QWORD *)(v8 + 64) = v42;
  *(_QWORD *)(v8 + 72) = v45;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 56) = v41;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  *(_BYTE *)(v8 + 333) = a3;
  *(_BYTE *)(v8 + 332) = a2;
  v12 = (int *)sub_10001A9A8(&qword_1010EE1E0);
  *(_QWORD *)(v8 + 176) = v12;
  v13 = *((_QWORD *)v12 - 1);
  *(_QWORD *)(v8 + 184) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v8 + 192) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 200) = swift_task_alloc(v15);
  v16 = swift_task_alloc(v15);
  *(_QWORD *)(v8 + 208) = v16;
  v17 = (int *)sub_10001A9A8(&qword_1010EE1E8);
  *(_QWORD *)(v8 + 216) = v17;
  v18 = *((_QWORD *)v17 - 1);
  *(_QWORD *)(v8 + 224) = v18;
  v19 = *(_QWORD *)(v18 + 64);
  *(_QWORD *)(v8 + 232) = v19;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v20);
  v21 = swift_task_alloc(v20);
  *(_QWORD *)(v8 + 248) = v21;
  v22 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 256) = v22;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  *(_QWORD *)(v8 + 264) = v23;
  v23(v21, a1, v22);
  *(_BYTE *)(v21 + v17[12]) = a2;
  v24 = v21 + v17[16];
  *(_BYTE *)v24 = a3;
  *(_QWORD *)(v24 + 8) = a4;
  *(_QWORD *)(v24 + 16) = a5;
  v25 = (_QWORD *)(v21 + v17[20]);
  *v25 = a6;
  v25[1] = a7;
  *(_QWORD *)(v21 + v17[24]) = a8;
  v26 = (uint64_t *)(v21 + v17[28]);
  *v26 = v41;
  v26[1] = v42;
  v27 = v12[12];
  *(_DWORD *)(v8 + 328) = v27;
  v28 = v16 + v27;
  v23(v16, v43, v22);
  sub_10000F9B8(v44, v28, &qword_1010ED860);
  v29 = (_QWORD *)(v16 + v12[16]);
  *v29 = v45;
  v29[1] = v46;
  v30 = (_QWORD *)(v16 + v12[20]);
  *v30 = v47;
  v30[1] = v48;
  v31 = (_QWORD *)(v16 + v12[24]);
  *v31 = v49;
  v31[1] = v50;
  *(_DWORD *)(v16 + v12[28]) = v51;
  *(_DWORD *)(v16 + v12[32]) = v52;
  *(_QWORD *)(v16 + v12[36]) = v53;
  v32 = (_QWORD *)(v16 + v12[40]);
  *v32 = v54;
  v32[1] = v55;
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  sub_10001BBBC(v41, v42);
  v33 = dword_1010F404C;
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  v34 = (_QWORD *)swift_task_alloc(v33);
  *(_QWORD *)(v8 + 272) = v34;
  *v34 = v8;
  v34[1] = sub_10025F268;
  return sub_100258308(v56);
}

uint64_t sub_10025F268(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 272);
  *(_QWORD *)(v3 + 280) = a1;
  *(_QWORD *)(v3 + 288) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10025F700;
  else
    v5 = sub_10025F2D4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10025F2D4()
{
  uint64_t v0;
  int *v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(void);
  uint64_t (*v64)(void *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v57 = *(_QWORD *)(v0 + 280);
  v63 = *(void (**)(void))(v0 + 264);
  v37 = *(_QWORD *)(v0 + 256);
  v56 = *(_QWORD *)(v0 + 232);
  v50 = *(_QWORD *)(v0 + 224);
  v1 = *(int **)(v0 + 216);
  v38 = *(_QWORD *)(v0 + 208);
  v42 = *(_QWORD *)(v0 + 200);
  v55 = *(_QWORD *)(v0 + 192);
  v2 = *(int **)(v0 + 176);
  v49 = *(_QWORD *)(v0 + 184);
  v61 = *(_QWORD *)(v0 + 168);
  v60 = *(_QWORD *)(v0 + 160);
  v59 = *(_QWORD *)(v0 + 152);
  v58 = *(_QWORD *)(v0 + 144);
  v48 = *(_QWORD *)(v0 + 136);
  v47 = *(_QWORD *)(v0 + 128);
  v46 = *(_DWORD *)(v0 + 324);
  v44 = *(_DWORD *)(v0 + 320);
  v45 = *(_QWORD *)(v0 + 120);
  v67 = *(_QWORD *)(v0 + 112);
  v43 = *(_QWORD *)(v0 + 104);
  v66 = *(_QWORD *)(v0 + 96);
  v41 = v38 + *(int *)(v0 + 328);
  v36 = v1[12];
  v62 = *(_QWORD *)(v0 + 240);
  v3 = v62 + v1[16];
  v4 = (_QWORD *)(v62 + v1[20]);
  v35 = v1[24];
  v5 = (uint64_t *)(v62 + v1[28]);
  v40 = *(_QWORD *)(v0 + 88);
  v65 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v39 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v53 = v7;
  v54 = v6;
  v9 = *(_QWORD *)(v0 + 40);
  v51 = v9;
  v52 = v8;
  v10 = *(_QWORD *)(v0 + 24);
  v33 = *(_QWORD *)(v0 + 16);
  v34 = *(_QWORD *)(v0 + 32);
  v31 = *(_BYTE *)(v0 + 332);
  v32 = *(_BYTE *)(v0 + 333);
  v63();
  *(_BYTE *)(v62 + v36) = v31;
  *(_BYTE *)v3 = v32;
  *(_QWORD *)(v3 + 8) = v33;
  *(_QWORD *)(v3 + 16) = v10;
  *v4 = v34;
  v4[1] = v9;
  *(_QWORD *)(v62 + v35) = v8;
  *v5 = v7;
  v5[1] = v6;
  v11 = v42 + v2[12];
  v12 = (_QWORD *)(v42 + v2[16]);
  v13 = (_QWORD *)(v42 + v2[20]);
  v14 = (_QWORD *)(v42 + v2[24]);
  v15 = v2[28];
  v16 = v2[32];
  v17 = (_QWORD *)(v42 + v2[40]);
  v18 = v2[36];
  ((void (*)(uint64_t, uint64_t, uint64_t))v63)(v42, v38, v37);
  sub_10000F9B8(v41, v11, &qword_1010ED860);
  *v12 = v39;
  v12[1] = v65;
  *v13 = v40;
  v13[1] = v66;
  *v14 = v43;
  v14[1] = v67;
  *(_DWORD *)(v42 + v15) = v44;
  *(_DWORD *)(v42 + v16) = v46;
  *(_QWORD *)(v42 + v18) = v45;
  *v17 = v47;
  v17[1] = v48;
  v19 = *(unsigned __int8 *)(v50 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = *(unsigned __int8 *)(v49 + 80);
  v22 = (v56 + v21 + v20) & ~v21;
  v23 = (v55 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_101062D68, v24 + 16, v19 | v21 | 7);
  *(_QWORD *)(v0 + 296) = v25;
  *(_QWORD *)(v25 + 16) = v57;
  sub_100005CF0(v62, v25 + v20, &qword_1010EE1E8);
  sub_100005CF0(v42, v25 + v22, &qword_1010EE1E0);
  v26 = (_QWORD *)(v25 + v23);
  *v26 = v58;
  v26[1] = v59;
  v27 = (_QWORD *)(v25 + v24);
  *v27 = v60;
  v27[1] = v61;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v52);
  sub_10001BBBC(v53, v54);
  v28 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v64 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRetain(v66);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v48);
  swift_retain();
  swift_retain();
  swift_retain();
  v29 = (_QWORD *)swift_task_alloc(v28);
  *(_QWORD *)(v0 + 304) = v29;
  *v29 = v0;
  v29[1] = sub_10025F694;
  return v64(&unk_1010F4088, v25);
}

uint64_t sub_10025F694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025F808;
  else
    v3 = sub_10025F784;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025F700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  sub_100004048(v3, &qword_1010EE1E0);
  sub_100004048(v1, &qword_1010EE1E8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025F784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  swift_release();
  sub_100004048(v3, &qword_1010EE1E0);
  sub_100004048(v2, &qword_1010EE1E8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025F808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release();
  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  sub_100004048(v3, &qword_1010EE1E0);
  sub_100004048(v1, &qword_1010EE1E8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025F894(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[12] = a1;
  v2 = *(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8);
  v1[13] = v2;
  v3 = *(_QWORD *)(v2 + 64);
  v1[14] = v3;
  v1[15] = swift_task_alloc((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  v1[16] = v4;
  *v4 = v1;
  v4[1] = sub_10025F918;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025F918(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *(_QWORD *)(*v2 + 128);
  v4 = *v2;
  *(_QWORD *)(v4 + 136) = a1;
  swift_task_dealloc(v3);
  if (v1)
  {
    swift_task_dealloc(*(_QWORD *)(v4 + 120));
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
    *(_QWORD *)(v4 + 144) = v6;
    *v6 = v4;
    v6[1] = sub_10025F9B8;
    return swift_task_switch(sub_100257B0C, 0, 0);
  }
}

uint64_t sub_10025F9B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_release();
    swift_task_dealloc(*(_QWORD *)(v4 + 120));
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  else
  {
    *(_QWORD *)(v4 + 152) = a1;
    return swift_task_switch(sub_10025FA44, 0, 0);
  }
}

uint64_t sub_10025FA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v18)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  *(_QWORD *)(v0 + 40) = v3;
  *(_QWORD *)(v0 + 48) = &off_10109EA18;
  *(_QWORD *)(v0 + 16) = v1;
  v4 = type metadata accessor for ShareRequestUseCase();
  v5 = swift_allocObject(v4, 160, 15);
  *(_QWORD *)(v0 + 160) = v5;
  v6 = sub_10009F5D0(v0 + 16, v3);
  v7 = *(_QWORD *)(v3 - 8);
  v8 = (_QWORD *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v3);
  *(_QWORD *)(v0 + 56) = *v8;
  *(_QWORD *)(v0 + 80) = v3;
  *(_QWORD *)(v0 + 88) = &off_10109EA18;
  swift_retain();
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = v2;
  sub_10000F9FC((__int128 *)(v0 + 56), v5 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v10 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  sub_10005972C(*(_QWORD *)(v0 + 96), v9, type metadata accessor for MemberSharingCircle);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_101062DB8, v13 + v10, v12 | 7);
  *(_QWORD *)(v0 + 168) = v14;
  *(_QWORD *)(v14 + 16) = v5;
  sub_1000126EC(v9, v14 + v13, type metadata accessor for MemberSharingCircle);
  v15 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v18 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  v16 = (_QWORD *)swift_task_alloc(v15);
  *(_QWORD *)(v0 + 176) = v16;
  *v16 = v0;
  v16[1] = sub_10025FC24;
  return v18(&unk_1010F40B8, v14);
}

uint64_t sub_10025FC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_10025FCD0;
  else
    v3 = sub_10025FC90;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10025FC90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025FCD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10025FD0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v1 + 64) = v2;
  *v2 = v1;
  v2[1] = sub_10025FD68;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025FD68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 64);
  v4 = *v2;
  *(_QWORD *)(v4 + 72) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_10025FDDC, 0, 0);
}

uint64_t sub_10025FDDC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[9];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[10] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[11] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[12] = v6;
  *v6 = v0;
  v6[1] = sub_10025FE94;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_10025FE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613B0;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_10025FF08;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025FF08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[14];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[15] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[16] = v3;
  *v3 = v0;
  v3[1] = sub_10025FF80;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_10025FF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002613A4;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v6 = sub_10025FFF4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10025FFF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(void *, uint64_t);

  v1 = v0[18];
  v2 = v0[15];
  v3 = v0[10];
  v4 = v0[9];
  v5 = swift_allocObject(v0[11], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v10 = sub_10025690C(v4, v9, v1, v5, v3);
  v0[19] = v10;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v11 = v0[7];
  v12 = swift_allocObject(&unk_101062D40, 32, 7);
  v0[20] = v12;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v16 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_bridgeObjectRetain(v11);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[21] = v14;
  *v14 = v0;
  v14[1] = sub_10025B82C;
  return v16(&unk_1010F4070, v12);
}

uint64_t sub_100260190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F406C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_101120034);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  return sub_100D99034(v2);
}

uint64_t sub_100260208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  v1 = sub_10001A9A8(&qword_1010EE1E8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010EE1E0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v16 = *(_QWORD *)(v7 + 64);
  swift_release();
  v10 = v0 + v4;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v10 + *(int *)(v1 + 112)), *(_QWORD *)(v10 + *(int *)(v1 + 112) + 8));
  v13(v0 + v9, v11);
  v14 = v0 + v9 + *(int *)(v6 + 48);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v11))
    v13(v14, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v16 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v8 | 7);
}

uint64_t sub_1002603C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1010EE1E8) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010EE1E0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v0 + 16);
  v10 = v0 + v3;
  v11 = v0 + v6;
  v12 = (uint64_t *)(v0 + v7);
  v13 = *v12;
  v14 = v12[1];
  v15 = v0 + v8;
  v16 = *(_QWORD *)(v0 + v8);
  v17 = *(_QWORD *)(v15 + 8);
  v18 = (_QWORD *)swift_task_alloc(dword_1010F4084);
  *(_QWORD *)(v1 + 16) = v18;
  *v18 = v1;
  v18[1] = sub_100004A74;
  return sub_10025508C(v9, v10, v11, v13, v14, v16, v17);
}

uint64_t sub_1002604B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for OwnerPeerTrust(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v16 = *(_QWORD *)(v6 + 64);
  swift_release();
  v8 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = v0 + v4 + v1[7];
  v13 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v11(v12, v10);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = (v4 + v17 + v7) & ~v7;
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v8 + v1[9]), *(_QWORD *)(v8 + v1[9] + 8));
  sub_10001BC14(*(_QWORD *)(v0 + v14), *(_QWORD *)(v0 + v14 + 8));
  v11(v0 + v14 + *(int *)(v5 + 20), v10);
  v11(v0 + v14 + *(int *)(v5 + 24), v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v16 + v14 + 1, v3 | v7 | 7);
}

uint64_t sub_10026067C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v2 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v6;
  v10 = *(_BYTE *)(v0 + v6 + *(_QWORD *)(v5 + 64));
  v11 = swift_task_alloc(dword_1010F409C);
  *(_QWORD *)(v1 + 16) = v11;
  *(_QWORD *)v11 = v1;
  *(_QWORD *)(v11 + 8) = sub_100004A74;
  *(_BYTE *)(v11 + 76) = v10;
  *(_QWORD *)(v11 + 24) = v8;
  *(_QWORD *)(v11 + 32) = v9;
  *(_QWORD *)(v11 + 16) = v7;
  return swift_task_switch(sub_10025570C, 0, 0);
}

uint64_t sub_100260738()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v10(v7 + v1[7], v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100260814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F40B4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_101100E04);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return sub_10060AB80(v3);
}

uint64_t sub_1002608AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = *(_QWORD *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F40DC);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004A74;
  v9 = (_QWORD *)swift_task_alloc(dword_1011163C4);
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_100004A74;
  return sub_100B68548(v4, v6, v7);
}

uint64_t sub_100260970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 9, v5);
}

uint64_t sub_100260A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v6 = *(_QWORD *)v5;
  v7 = *(_BYTE *)(v5 + 8);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F40F4);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004A74;
  v9 = (_QWORD *)swift_task_alloc(dword_1011204EC);
  v8[2] = v9;
  *v9 = v8;
  v9[1] = sub_100004A74;
  return sub_100DB20A8(v4, v6, v7);
}

uint64_t sub_100260AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4114);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_10112002C);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  return sub_100D98D18(v2);
}

uint64_t sub_100260B40()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4144);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_101120054);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_100DA5DC4();
}

uint64_t sub_100260BA4()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100260BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = v0 + 24;
  v4 = *(_QWORD *)(v0 + 64);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F415C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[3] = v3;
  v5[4] = v4;
  v5[2] = v2;
  v6 = (_QWORD *)swift_task_alloc(dword_10112004C);
  v5[5] = v6;
  *v6 = v5;
  v6[1] = sub_100255B70;
  return sub_100DA4D28();
}

uint64_t sub_100260C5C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for MemberPeerTrust(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v17 = *(_QWORD *)(v7 + 64);
  swift_release();
  v10 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v11 = v0 + v4 + v1[5];
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v10 + v1[6], v12);
  v13(v10 + v1[7], v12);
  v13(v10 + v1[8], v12);
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v13(v0 + v9 + v6[5], v12);
  v14 = v0 + v9 + v6[7];
  v15 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v14, v15))
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v13(v14, v12);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + v9 + v6[9]), *(_QWORD *)(v0 + v9 + v6[9] + 8));
  return swift_deallocObject(v0, v9 + v17, v3 | v8 | 7);
}

uint64_t sub_100260E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc(dword_1010F4184);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  v10 = (_QWORD *)swift_task_alloc(dword_101100DFC);
  v9[2] = v10;
  *v10 = v9;
  v10[1] = sub_100004A74;
  return sub_10060962C(v7, v8);
}

uint64_t sub_100260EF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for OwnerPeerTrust(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v16 = *(_QWORD *)(v6 + 64);
  swift_release();
  v8 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v0 + v4 + v1[5];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v12 = v0 + v4 + v1[7];
  v13 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v11(v12, v10);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = (v4 + v17 + v7) & ~v7;
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v8 + v1[9]), *(_QWORD *)(v8 + v1[9] + 8));
  sub_10001BC14(*(_QWORD *)(v0 + v14), *(_QWORD *)(v0 + v14 + 8));
  v11(v0 + v14 + *(int *)(v5 + 20), v10);
  v11(v0 + v14 + *(int *)(v5 + 24), v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v14 + v16, v3 | v7 | 7);
}

uint64_t sub_1002610C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = v0 + v3;
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc(dword_1010F41AC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  v10 = (_QWORD *)swift_task_alloc(dword_101120044);
  v9[2] = v10;
  *v10 = v9;
  v10[1] = sub_100004A74;
  return sub_100DA0938(v7, v8);
}

uint64_t sub_100261180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F41C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_101120024);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004C28;
  return sub_100D94FB8(v2);
}

uint64_t sub_1002611FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F41DC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_1010EC74C);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return sub_10005CD54(v3);
}

uint64_t storeEnumTagSinglePayload for BeaconSharingFlowError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1002612DC + 4 * byte_100E2F267[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100261310 + 4 * byte_100E2F262[v4]))();
}

uint64_t sub_100261310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100261318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100261320);
  return result;
}

uint64_t sub_10026132C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100261334);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100261338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100261340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingFlowError()
{
  return &type metadata for BeaconSharingFlowError;
}

unint64_t sub_100261360()
{
  unint64_t result;

  result = qword_1010F41E8;
  if (!qword_1010F41E8)
  {
    result = swift_getWitnessTable(")=#", &type metadata for BeaconSharingFlowError);
    atomic_store(result, (unint64_t *)&qword_1010F41E8);
  }
  return result;
}

uint64_t sub_1002613E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002613F0);
}

uint64_t sub_1002613F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100261400);
}

uint64_t type metadata accessor for ServiceUUID(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F4248, (uint64_t)&nominal type descriptor for ServiceUUID);
}

uint64_t sub_10026141C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100261458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10026149C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002614E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100261524(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100261568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100261574);
}

uint64_t sub_100261578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1002615B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002615C0);
}

uint64_t sub_1002615C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CharacteristicUUID(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F42D8, (uint64_t)&nominal type descriptor for CharacteristicUUID);
}

uint64_t sub_100261618(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void *sub_100261680()
{
  return &protocol witness table for String;
}

uint64_t sub_10026168C()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  _QWORD v4[2];

  strcpy((char *)v4, "ServiceUUID(");
  v0._countAndFlagsBits = UUID.uuidString.getter();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4[0];
}

unint64_t sub_10026170C()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;

  _StringGuts.grow(_:)(22);
  v0 = swift_bridgeObjectRelease(0xE000000000000000);
  v1._countAndFlagsBits = UUID.uuidString.getter(v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000013;
}

Swift::Int sub_10026179C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100261808(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_100261860()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1002618C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)(*a1, a1[1]);
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  __break(1u);
  return result;
}

uint64_t sub_100261988()
{
  return sub_100006204(&qword_1010F4310, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_100E2F394);
}

void *sub_1002619B4()
{
  return &protocol witness table for String;
}

uint64_t sub_1002619C0()
{
  return sub_100006204(&qword_1010F4318, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_100E2F3CC);
}

uint64_t sub_1002619EC()
{
  return sub_100006204(&qword_1010F4320, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_100E2F3F4);
}

void *sub_100261A18()
{
  return &protocol witness table for String;
}

uint64_t sub_100261A24()
{
  return sub_100006204(&qword_1010F4328, type metadata accessor for ServiceUUID, (uint64_t)&unk_100E2F4DC);
}

uint64_t sub_100261A50()
{
  return sub_100006204(&qword_1010F4330, type metadata accessor for ServiceUUID, (uint64_t)&unk_100E2F514);
}

uint64_t sub_100261A7C()
{
  return sub_100006204(&qword_1010F4338, type metadata accessor for ServiceUUID, (uint64_t)&unk_100E2F53C);
}

id sub_100261AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  unsigned __int8 v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  char *v19;
  id v20;
  Class isa;
  Class v22;
  Class v23;
  uint64_t v24;
  unint64_t v25;
  Class v26;
  Class v27;
  Class v28;
  id v29;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _QWORD v48[5];
  __int128 v49;

  v39 = a2;
  v4 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24);
  v12 = v11(a1, v10);
  v49 = xmmword_100E22FC0;
  v47 = v12 >> 6;
  v48[3] = &type metadata for UnsafeRawBufferPointer;
  v48[4] = &protocol witness table for UnsafeRawBufferPointer;
  v48[0] = &v47;
  v48[1] = v48;
  v13 = sub_10001AA44(v48, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v13, v13[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v10);
  v40 = v15;
  v41 = v14;
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(a1, v9);
  v37 = v17;
  v38 = v16;
  v33 = *((_QWORD *)&v49 + 1);
  v34 = v49;
  sub_10001BBBC(v49, *((unint64_t *)&v49 + 1));
  v36 = v11(a1, v10);
  v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(a1, v10);
  v18 = *(void (**)(uint64_t, uint64_t))(v10 + 48);
  v32 = v8;
  v18(a1, v10);
  v19 = v42;
  (*(void (**)(uint64_t))(*(_QWORD *)(v39 + 16) + 8))(a1);
  v20 = objc_allocWithZone((Class)SPBeaconAdvertisement);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v22 = Data._bridgeToObjectiveC()().super.isa;
  v23 = Data._bridgeToObjectiveC()().super.isa;
  v24 = v34;
  v25 = v33;
  v26 = Data._bridgeToObjectiveC()().super.isa;
  v27 = Date._bridgeToObjectiveC()().super.isa;
  v28 = UUID._bridgeToObjectiveC()().super.isa;
  v29 = objc_msgSend(v20, "initWithAddress:publicKey:deviceType:batteryState:rawStatus:rssi:scanDate:recordIdentifier:", isa, v22, v23, v26, v36, v35, v27, v28);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v46);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
  sub_10001BC14(v24, v25);
  sub_10001BC14(v38, v37);
  sub_10001BC14(v41, v40);
  sub_10001BC14(v24, v25);
  return v29;
}

uint64_t sub_100261DD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10001BBBC(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100261E04()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_100261E0C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t sub_100261E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_100261E54@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = objc_msgSend(v1, "location");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "latitude");
    v6 = v5;
    objc_msgSend(v4, "longitude");
    v8 = v7;
    objc_msgSend(v4, "horizontalAccuracy");
    v10 = v9;
    v11 = objc_msgSend(v4, "timestamp");
    v12 = type metadata accessor for CachedHistoricalLocation(0);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v11);

    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
    v14 = a1;
    v15 = 0;
    v16 = v12;
  }
  else
  {
    v16 = type metadata accessor for CachedHistoricalLocation(0);
    v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v14 = a1;
    v15 = 1;
  }
  return v13(v14, v15, 1, v16);
}

uint64_t sub_100261F60@<X0>(_QWORD *a1@<X8>)
{
  return sub_100261E54(a1);
}

uint64_t sub_100261F80(uint64_t a1, uint64_t a2)
{
  return sub_100261F98(a1, a2, (SEL *)&selRef_address);
}

uint64_t sub_100261F8C(uint64_t a1, uint64_t a2)
{
  return sub_100261F98(a1, a2, (SEL *)&selRef_advertisementData);
}

uint64_t sub_100261F98(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v5;
  id v6;
  uint64_t v7;

  v5 = objc_msgSend(*v3, "advertisement");
  v6 = objc_msgSend(v5, *a3);

  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  return v7;
}

id sub_10026200C()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "advertisement");
  v2 = objc_msgSend(v1, "status");

  return v2;
}

id sub_100262058()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "advertisement");
  v2 = objc_msgSend(v1, "rssi");

  return v2;
}

void sub_1002620A4()
{
  id *v0;
  id v1;
  id v2;

  v1 = objc_msgSend(*v0, "advertisement");
  v2 = objc_msgSend(v1, "scanDate");

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v2);
}

uint64_t sub_100262110()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v4;

  v1 = objc_msgSend(v0, "fetchLimit");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "integerValue");

  }
  else
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1AE54(v4);
    swift_bridgeObjectRelease();
  }
  if (qword_1010EA480 != -1)
    swift_once(&qword_1010EA480, sub_100C74348);
  return 0;
}

unint64_t sub_100262210(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_10001BBBC(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    sub_10001BBBC(v11, v12);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v13 = *(int *)(a3 + 36);
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1002622EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100262348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_1002623F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10001BC14(v12, v13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_10001BC14(v16, v17);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = *(int *)(a3 + 36);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t sub_1002624C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v5 = *(int *)(a3 + 36);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_100262534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v10, v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1002625D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002625E0);
}

uint64_t sub_1002625E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_100262668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100262674);
}

char *sub_100262674(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 36)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SPCachedAdvertisement(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4398;
  if (!qword_1010F4398)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SPCachedAdvertisement);
  return result;
}

uint64_t sub_10026272C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E2F698;
  v4[1] = &unk_100E2F698;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = &unk_100E2F698;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1002627C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = enum case for FMNAccountType.pairingLock(_:);
  v3 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for PairingLockCheckEndPoint(0);
  URLComponents.init()(v4);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B4E0(v6);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for PairingLockCheckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4438;
  if (!qword_1010F4438)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingLockCheckEndPoint);
  return result;
}

uint64_t sub_10026291C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100262928);
}

uint64_t sub_100262928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_10026299C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002629A8);
}

uint64_t sub_1002629A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

_QWORD *sub_100262A24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  unsigned int v25;
  uint64_t (*v26)(char *);
  uint64_t v27;
  _QWORD *v28;

  v27 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = sub_10001F6FC();
  v25 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v26 = *(uint64_t (**)(char *))(v9 + 104);
  v12 = v26(v11);
  static DispatchQoS.unspecified.getter(v12);
  v28 = _swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v24[0] = v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100ECC7B0, v7, v4, v11, 0);
  v16 = ((uint64_t (*)(char *, _QWORD, uint64_t))v26)(v11, v25, v8);
  static DispatchQoS.unspecified.getter(v16);
  v28 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v14, v15, v2, v24[0]);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000049, 0x8000000100ECC7F0, v7, v4, v11, 0);
  v17 = sub_10001A9A8(&qword_1010F4690);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v1[5] = PassthroughSubject.init()();
  v1[7] = 0;
  v1[8] = 0;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v1[10] = qword_1011B7160;
  v18 = (char *)v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription;
  v19 = sub_10001A9A8(&qword_101108020);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService____lazy_storage___tagCommandManager) = 0;
  v1[2] = v27;
  *((_BYTE *)v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationStarted) = 0;
  v1[9] = &_swiftEmptySetSingleton;
  v20 = v1[5];
  v21 = sub_10001A9A8(&qword_1010F4698);
  v22 = swift_allocObject(v21, 24, 7);
  *(_QWORD *)(v22 + 16) = v20;
  v1[6] = v22;
  swift_retain();
  swift_retain();
  return v1;
}

id *sub_100262D70()
{
  id *v0;
  id *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  __n128 v24;
  char *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_101108020);
  v3 = *(_QWORD *)(v2 - 8);
  v30 = v2;
  v31 = v3;
  __chkstk_darwin(v2);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject(&unk_101063400, 24, 7);
  swift_weakInit(v12 + 16, v1);
  aBlock[4] = sub_100264F8C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101063418;
  v13 = _Block_copy(aBlock);
  v14 = swift_release();
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v18 = v16;
  v19 = v15;
  v20 = v30;
  v21 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v17, v5, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v29);
  objc_msgSend(v1[8], "invalidate");
  v22 = v1[8];
  v1[8] = 0;

  v23 = (uint64_t)v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription;
  v24 = swift_beginAccess((char *)v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription, aBlock, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v21 + 48))(v23, 1, v20, v24))
  {
    v25 = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v28, v23, v20);
    Subscription.unsubscribe(completion:)(sub_100263158, 0, v20);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  }
  swift_release();

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  sub_100004048(v23, &qword_1010F46A0);
  objc_release(*(id *)((char *)v1
                     + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService____lazy_storage___tagCommandManager));
  return v1;
}

void sub_1002630B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(id *)(Strong + 56);
    swift_release(v3);
    objc_msgSend(v4, "invalidate");

  }
  swift_beginAccess(v1, &v7, 0, 0);
  v5 = swift_weakLoadStrong(v1);
  if (v5)
  {
    v6 = *(void **)(v5 + 56);
    *(_QWORD *)(v5 + 56) = 0;
    swift_release(v5);

  }
}

uint64_t sub_100263158(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[8];

  if (a1)
  {
    v2 = swift_errorRetain(a1);
    v3 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA298 != -1)
      swift_once(&qword_1010EA298, sub_100B5DCE4);
    v4 = qword_1011B7D78;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v13, v12);
    v7 = Error.localizedDescription.getter(v12[1], v12[2]);
    v9 = v8;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Unsubscribe error: %@", 21, 2, v6);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v11 = static os_log_type_t.default.getter(0);
    if (qword_1010EA298 != -1)
      swift_once(&qword_1010EA298, sub_100B5DCE4);
    return os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D78, "Unsubscribed successfuly from observations", 42, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_1002632DC()
{
  uint64_t v0;

  sub_100262D70();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100263300()
{
  return type metadata accessor for BeaconNearOwnerService(0);
}

uint64_t type metadata accessor for BeaconNearOwnerService(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F44B0;
  if (!qword_1010F44B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconNearOwnerService);
  return result;
}

uint64_t sub_100263344(uint64_t a1, uint64_t a2)
{
  return sub_1002638E4(a1, a2, (uint64_t)&unk_1010633B0, (uint64_t)sub_100264F2C, (uint64_t)&unk_1010633C8);
}

uint64_t sub_100263360(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v38[2];
  void (*v39)(_QWORD *);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD v45[6];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v40 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)v38 - v9;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v11);
  v41 = (uint64_t)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong(a1);
  swift_retain();
  swift_release();
  v13 = sub_100017368();
  swift_release();
  v14 = v13;
  v15 = *(_QWORD *)(v13 + 16);
  if (v15)
  {
    v38[1] = a3;
    v39 = a2;
    v38[0] = v14;
    v16 = v14 + 32;
    v43 = _swiftEmptyDictionarySingleton;
    do
    {
      sub_100030784(v16, (uint64_t)v46);
      swift_unownedRetainStrong(a1);
      swift_retain();
      swift_release();
      v18 = v47;
      v17 = v48;
      sub_10001AA44(v46, v47);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v17 + 8) + 8) + 32))(v18);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v19 = qword_1011B7160;
      v20 = objc_autoreleasePoolPush();
      v21 = sub_10001A9A8(&qword_1010F7770);
      OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v19, v21);
      v22 = v45[0];
      if (*(_QWORD *)(v45[0] + 16) && (v23 = sub_100003FB0((uint64_t)v10), (v24 & 1) != 0))
      {
        v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease();
        v26 = sub_100508D98(v25);
        swift_bridgeObjectRelease();
        sub_10088FD00((uint64_t)v26);
        v28 = v27;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v28 = _swiftEmptyArrayStorage;
      }
      objc_autoreleasePoolPop(v20);
      v29 = v41;
      v30 = sub_10082B1AC(v41, (uint64_t)v10, (uint64_t)v28, 1);
      swift_release();
      swift_bridgeObjectRelease();
      v31 = *(void (**)(char *, uint64_t))(v42 + 8);
      v31(v10, v6);
      sub_100004048(v29, (uint64_t *)&unk_1010EA690);
      if ((v30 & 1) != 0)
      {
        v33 = v47;
        v32 = v48;
        sub_10001AA44(v46, v47);
        v34 = (uint64_t)v40;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v32 + 8) + 8) + 32))(v33);
        sub_100030784((uint64_t)v46, (uint64_t)v45);
        v35 = v43;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v43);
        v44 = v35;
        sub_10010B170((uint64_t)v45, v34, isUniquelyReferenced_nonNull_native);
        v43 = v44;
        swift_bridgeObjectRelease();
        v31((char *)v34, v6);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v46);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v39(v43);
  }
  else
  {
    swift_bridgeObjectRelease();
    a2(_swiftEmptyDictionarySingleton);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002636F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = *(_QWORD *)(v0 + 24);
  aBlock[4] = SharingCircleWildAdvertisementKey.init(key:);
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101063378;
  v8 = _Block_copy(aBlock);
  v9 = swift_unownedRetain(v0);
  static DispatchQoS.unspecified.getter(v9);
  v16 = _swiftEmptyArrayStorage;
  v10 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v12 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v11, v12, v1, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v8);
  swift_unownedRelease(v0);
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1002638C8(uint64_t a1, uint64_t a2)
{
  return sub_1002638E4(a1, a2, (uint64_t)&unk_1010632E8, (uint64_t)sub_100264E58, (uint64_t)&unk_101063300);
}

uint64_t sub_1002638E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[6];

  v9 = v5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v9 + 24);
  v18 = swift_unownedRetainStrong(v9);
  v19 = swift_unownedRetain(v18);
  swift_unownedRetain(v19);
  swift_release();
  v20 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v20[2] = v9;
  v20[3] = a1;
  v20[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a5;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v30 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v21);
  swift_unownedRelease(v9);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return swift_release();
}

uint64_t sub_100263AEC(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[3];
  void *v42;
  void (*v43)();
  uint64_t v44;

  v40 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F46A0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v34 - v15;
  swift_unownedRetainStrong(a1);
  v17 = *(_BYTE *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationStarted);
  swift_release();
  if ((v17 & 1) == 0)
  {
    v18 = swift_unownedRetainStrong(a1);
    swift_unownedRetainStrong(v18);
    v19 = *(_QWORD *)(a1 + 80);
    swift_retain();
    swift_release();
    swift_unownedRetainStrong(a1);
    v20 = type metadata accessor for BeaconNearOwnerService(0);
    v35 = a2;
    v42 = (void *)v20;
    v43 = (void (*)())&off_1010631B0;
    aBlock[0] = a1;
    __chkstk_darwin(v20);
    *(&v34 - 2) = (uint64_t)aBlock;
    *(&v34 - 1) = v19;
    v21 = sub_10001A9A8(&qword_101108020);
    OS_dispatch_queue.sync<A>(execute:)(sub_100150D80, &v34 - 4, v21);
    swift_release();
    a2 = v35;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v16, 0, 1, v21);
    sub_100264E64((uint64_t)v16, (uint64_t)v14);
    v22 = a1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription;
    swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription, aBlock, 33, 0);
    sub_100264EAC((uint64_t)v14, v22);
    swift_endAccess(aBlock);
    swift_release();
    swift_unownedRetainStrong(a1);
    *(_BYTE *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationStarted) = 1;
    swift_release();
  }
  sub_10001F6FC();
  v23 = (void *)static OS_dispatch_queue.main.getter();
  v24 = swift_allocObject(&unk_101063338, 24, 7);
  *(_QWORD *)(v24 + 16) = a1;
  v43 = sub_100264EF4;
  v44 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  v42 = &unk_101063350;
  v25 = _Block_copy(aBlock);
  swift_unownedRetain(a1);
  v26 = swift_release();
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  v30 = v28;
  v31 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v30, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v31);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v10, v37);
  return a2(v32);
}

void sub_100263EA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  double v4;
  double v5;
  id v6;
  void *v7;
  uint64_t v8;

  v2 = *(_QWORD *)(swift_unownedRetainStrong(a1) + 56);
  swift_release();
  if (!v2)
  {
    swift_unownedRetainStrong(a1);
    v3 = (void *)objc_opt_self(NSTimer);
    swift_unownedRetainStrong(a1);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B68C(v8);
    v5 = v4;
    swift_release();
    swift_bridgeObjectRelease();
    swift_unownedRetainStrong(a1);
    v6 = objc_msgSend(v3, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", a1, "nearOwnerMonitoringTimerFired", 0, 1, v5);
    swift_release();
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v6;
    swift_release();

  }
}

uint64_t sub_100263FD4(uint64_t a1)
{
  return sub_100264110(a1, (uint64_t)&unk_101063298, (uint64_t)sub_100264E08, (uint64_t)&unk_1010632B0);
}

uint64_t sub_100263FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v13[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v13[-v9 - 8];
  swift_unownedRetainStrong(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  swift_beginAccess(a1 + 72, v13, 33, 0);
  sub_100A09F38((uint64_t)v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v10, v4);
  swift_endAccess(v13);
  swift_release();
  swift_unownedRetainStrong(a1);
  sub_1002644A8();
  return swift_release();
}

uint64_t sub_1002640F4(uint64_t a1)
{
  return sub_100264110(a1, (uint64_t)&unk_101063248, (uint64_t)sub_100264D84, (uint64_t)&unk_101063260);
}

uint64_t sub_100264110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v29 = a4;
  v26 = a2;
  v27 = a3;
  v5 = v4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v28 = *(_QWORD *)(v5 + 24);
  v16 = swift_unownedRetainStrong(v5);
  v17 = swift_unownedRetain(v16);
  swift_unownedRetain(v17);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(v26, v19 + v15, v18 | 7);
  *(_QWORD *)(v20 + 16) = v5;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  aBlock[4] = v27;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v29;
  v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v21);
  v33 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v23, v24, v7, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v21);
  swift_unownedRelease(v5);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

void sub_10026437C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BYTE v11[24];

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_unownedRetainStrong(a1);
  swift_beginAccess(a1 + 72, v11, 33, 0);
  sub_100C81CDC(a2, (uint64_t)v6);
  sub_100004048((uint64_t)v6, &qword_1010ED860);
  swift_endAccess(v11);
  swift_release();
  swift_unownedRetainStrong(a1);
  swift_beginAccess(a1 + 72, v11, 0, 0);
  v7 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain(v7);
  swift_release();
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRelease();
  if (!v8)
  {
    swift_unownedRetainStrong(a1);
    objc_msgSend(*(id *)(a1 + 64), "invalidate");
    v9 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    swift_release();

  }
}

uint64_t sub_1002644A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(v0 + 64))
  {
    sub_10001F6FC();
    v17 = static OS_dispatch_queue.main.getter();
    aBlock[4] = sub_100264D78;
    aBlock[5] = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101063210;
    v10 = _Block_copy(aBlock);
    swift_retain();
    v11 = swift_release();
    static DispatchQoS.unspecified.getter(v11);
    aBlock[0] = _swiftEmptyArrayStorage;
    v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v14 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v13, v14, v1, v12);
    v15 = (void *)v17;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v4, v10);
    _Block_release(v10);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

id sub_10026468C(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  id v5;
  void *v6;
  uint64_t v8;

  v2 = (void *)objc_opt_self(NSTimer);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B6A4(v8);
  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v2, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", a1, "scanTimerFired", 0, 1, v4);
  v6 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v5;

  return objc_msgSend(*(id *)(a1 + 64), "fire");
}

uint64_t sub_100264784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(_QWORD *)(v0 + 24);
  v8 = swift_unownedRetainStrong(v0);
  v9 = swift_unownedRetain(v8);
  swift_unownedRetain(v9);
  swift_release();
  v10 = swift_allocObject(&unk_1010631D0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_100264D70;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010631E8;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v11);
  v18 = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v14 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v11);
  swift_unownedRelease(v0);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

uint64_t sub_100264984(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _BYTE v6[24];

  v2 = swift_unownedRetainStrong(a1);
  swift_beginAccess(v2 + 72, v6, 0, 0);
  v3 = *(_QWORD *)(a1 + 72);
  swift_bridgeObjectRetain(v3);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  result = swift_bridgeObjectRelease();
  if (v4)
  {
    swift_unownedRetainStrong(a1);
    sub_1002636F4();
    return swift_release();
  }
  return result;
}

void sub_100264A68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[5] = "\b";
  v4[6] = "\b";
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100264B20(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(v2 - 8) + 64;
    v4[10] = &unk_100E2F790;
    v4[11] = "\b";
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_100264B20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010F44C0)
  {
    v2 = sub_10001F784(&qword_101108020);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010F44C0);
  }
}

uint64_t sub_100264B78(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[5];

  result = type metadata accessor for BeaconObservation(0);
  v3 = *(unsigned __int8 *)(a1 + *(int *)(result + 24));
  v4 = v3 > 0x22;
  v5 = (1 << v3) & 0x600018000;
  if (!v4 && v5 != 0)
  {
    v7 = static os_log_type_t.info.getter(result);
    if (qword_1010EA298 != -1)
      swift_once(&qword_1010EA298, sub_100B5DCE4);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D78, "Sending \"Near Owner\" Event to Intents Session", 45, 2, _swiftEmptyArrayStorage);
    sub_10080B648(a1, (uint64_t)&v18);
    if (v19)
    {
      sub_10000F9FC(&v18, (uint64_t)v20);
      v8 = sub_10001A9A8(&qword_1010F4680);
      v9 = sub_10001A9A8(&qword_1010F4688);
      v10 = *(_QWORD *)(v9 - 8);
      v11 = *(_QWORD *)(v10 + 72);
      v12 = *(unsigned __int8 *)(v10 + 80);
      v13 = (v12 + 32) & ~v12;
      v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
      *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
      v15 = v14 + v13;
      v16 = v15 + *(int *)(v9 + 48);
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, a1, v17);
      sub_100030784((uint64_t)v20, v16);
      *(_QWORD *)&v18 = sub_1006B9884(v14);
      PassthroughSubject.send(_:)(&v18);
      swift_bridgeObjectRelease();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    }
    else
    {
      return sub_100004048((uint64_t)&v18, (uint64_t *)&unk_1010EE310);
    }
  }
  return result;
}

uint64_t sub_100264D2C(uint64_t a1)
{
  return sub_100264B78(a1);
}

uint64_t sub_100264D4C()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100264D70()
{
  uint64_t v0;

  return sub_100264984(*(_QWORD *)(v0 + 16));
}

id sub_100264D78()
{
  uint64_t v0;

  return sub_10026468C(v0);
}

uint64_t sub_100264D84()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_10026437C);
}

uint64_t sub_100264D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100264E08()
{
  return sub_100264E14(sub_100263FF0);
}

uint64_t sub_100264E14(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100264E58()
{
  uint64_t v0;

  return sub_100263AEC(*(_QWORD *)(v0 + 16), *(uint64_t (**)(_QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100264E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F46A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100264EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F46A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100264EF4()
{
  uint64_t v0;

  sub_100263EA8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100264F00()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100264F2C()
{
  uint64_t v0;

  return sub_100263360(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100264F38(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return PassthroughSubject.send(_:)(&v2);
}

uint64_t sub_100264F68()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100264F8C()
{
  uint64_t v0;

  sub_1002630B0(v0);
}

uint64_t sub_100264FD8()
{
  uint64_t result;

  result = sub_100264FF4();
  qword_1010F46A8 = result;
  return result;
}

uint64_t sub_100264FF4()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t result;

  v0 = objc_msgSend(objc_allocWithZone((Class)GEOMapRegion), "init");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", 38.3767625, 123.875419);
    objc_msgSend(v1, "addVertex:", v2);

    v3 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", 31.8502665, 125.094901);
    objc_msgSend(v1, "addVertex:", v3);

    v4 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", 36.7747537, 133.334647);
    objc_msgSend(v1, "addVertex:", v4);

    v5 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", 39.1903306, 130.434257);
    objc_msgSend(v1, "addVertex:", v5);

    v6 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", 38.3767625, 123.875419);
    objc_msgSend(v1, "addVertex:", v6);

    return (uint64_t)v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100ECC8C0, "searchpartyd/CLLocationRepresentable.swift", 42, 2, 25, 0);
    __break(1u);
  }
  return result;
}

id sub_1002651C4()
{
  id *v0;

  return objc_msgSend(*v0, "coordinate");
}

double sub_1002651D4()
{
  id *v0;
  double v1;

  objc_msgSend(*v0, "coordinate");
  return v1;
}

id sub_1002651F8()
{
  id *v0;

  return objc_msgSend(*v0, "horizontalAccuracy");
}

void sub_100265208()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

id sub_100265254()
{
  id *v0;

  return objc_msgSend(*v0, "latitude");
}

id sub_100265264()
{
  id *v0;

  return objc_msgSend(*v0, "longitude");
}

uint64_t sub_100265274()
{
  id v0;
  void *v1;
  uint64_t i;
  id v3;
  uint64_t result;

  v0 = objc_msgSend(objc_allocWithZone((Class)GEOMapRegion), "init");
  if (v0)
  {
    v1 = v0;
    for (i = 0; i != 576; i += 16)
    {
      v3 = objc_msgSend(objc_allocWithZone((Class)GEOLatLng), "initWithLatitude:longitude:", *(double *)((char *)&off_101048938 + i + 40), *(double *)((char *)&off_101048938 + i + 32));
      objc_msgSend(v1, "addVertex:", v3);

    }
    return (uint64_t)v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000024, 0x8000000100ECC8C0, "searchpartyd/CLLocationRepresentable.swift", 42, 2, 41, 0);
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingCompleteCommandPayload()
{
  return &type metadata for AirPodsSWPairingCompleteCommandPayload;
}

uint64_t sub_100265394@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v14, v5, v6);
  v7 = v15;
  v8 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(4, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v12 = v9;
    v13 = v10;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    *a2 = v12;
    a2[1] = v13;
  }
  return result;
}

uint64_t sub_100265454(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[2];
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = *v1;
  v3 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v11, v4, v5);
  v10[0] = v2;
  v10[1] = v3;
  v6 = v12;
  v7 = v13;
  sub_10009F5D0((uint64_t)v11, v12);
  v8 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v10, &type metadata for Data, v8, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

unint64_t sub_1002654F8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100265524();
  result = sub_10024D484();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100265524()
{
  unint64_t result;

  result = qword_1010F46B8;
  if (!qword_1010F46B8)
  {
    result = swift_getWitnessTable(byte_100E2F900, &type metadata for AirPodsSWPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F46B8);
  }
  return result;
}

uint64_t sub_100265568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;

  v58 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v3 = __chkstk_darwin(v58);
  v57 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v56 = (char *)&v47 - v6;
  v7 = __chkstk_darwin(v5);
  v55 = (uint64_t *)((char *)&v47 - v8);
  v9 = __chkstk_darwin(v7);
  v54 = (uint64_t *)((char *)&v47 - v10);
  __chkstk_darwin(v9);
  v53 = (uint64_t *)((char *)&v47 - v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  if (!v12)
    return (uint64_t)v13;
  v47 = v1;
  v61 = _swiftEmptyArrayStorage;
  sub_10009A364(0, v12, 0);
  result = sub_10001D6A8(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v48 = a1 + 80;
  v49 = v12;
  v51 = a1 + 64;
  v52 = a1;
  v50 = v15;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v59 = v17;
    v60 = 1 << v16;
    v22 = v58;
    v23 = (uint64_t)v53;
    v24 = (uint64_t)v53 + *(int *)(v58 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (uint64_t *)(v25 + 16 * v16);
    v28 = *v27;
    v29 = v27[1];
    *v53 = *v27;
    *(_QWORD *)(v23 + 8) = v29;
    v30 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    sub_10005972C(v26 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v16, v24, type metadata accessor for OwnedBeaconGroup.PairingState);
    v31 = (uint64_t)v54;
    *v54 = v28;
    *(_QWORD *)(v31 + 8) = v29;
    sub_10005972C(v24, v31 + *(int *)(v22 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    v32 = v55;
    sub_100005CF0(v31, (uint64_t)v55, (uint64_t *)&unk_1010F9880);
    sub_10001BBBC(v28, v29);
    sub_10001BBBC(v28, v29);
    sub_100004048(v23, (uint64_t *)&unk_1010F9880);
    v33 = *(int *)(v22 + 48);
    v34 = (uint64_t)&v56[v33];
    v35 = *v32;
    v36 = v32[1];
    sub_10005972C((uint64_t)v32 + v33, (uint64_t)&v56[v33], type metadata accessor for OwnedBeaconGroup.PairingState);
    v37 = (uint64_t)v57;
    v38 = (uint64_t)v57 + *(int *)(v22 + 48);
    *v57 = v35;
    *(_QWORD *)(v37 + 8) = v36;
    sub_1000126EC(v34, v38, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001BBBC(v35, v36);
    sub_10001BBBC(v35, v36);
    sub_100004048(v37, (uint64_t *)&unk_1010F9880);
    sub_100004048((uint64_t)v32, (uint64_t *)&unk_1010F9880);
    v13 = v61;
    result = swift_isUniquelyReferenced_nonNull_native(v61);
    if ((result & 1) == 0)
    {
      result = sub_10009A364(0, v13[2] + 1, 1);
      v13 = v61;
    }
    v40 = v13[2];
    v39 = v13[3];
    if (v40 >= v39 >> 1)
    {
      result = sub_10009A364(v39 > 1, v40 + 1, 1);
      v13 = v61;
    }
    v13[2] = v40 + 1;
    v41 = &v13[2 * v40];
    v41[4] = v35;
    v41[5] = v36;
    a1 = v52;
    v19 = 1 << *(_BYTE *)(v52 + 32);
    if (v16 >= v19)
      goto LABEL_27;
    v18 = v51;
    v42 = *(_QWORD *)(v51 + 8 * v21);
    if ((v42 & v60) == 0)
      goto LABEL_28;
    LODWORD(v15) = v50;
    if (*(_DWORD *)(v52 + 36) != (_DWORD)v50)
      goto LABEL_29;
    v43 = v42 & (-2 << (v16 & 0x3F));
    if (v43)
    {
      v19 = __clz(__rbit64(v43)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v20 = v49;
    }
    else
    {
      v44 = v21 + 1;
      v45 = (unint64_t)(v19 + 63) >> 6;
      v20 = v49;
      if (v21 + 1 < v45)
      {
        v46 = *(_QWORD *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          v19 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v21)
          {
            v46 = *(_QWORD *)(v48 + 8 * v21++);
            if (v46)
            {
              v44 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v17 = v59 + 1;
    v16 = v19;
    if (v59 + 1 == v20)
      return (uint64_t)v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100265974()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6C50);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6C50);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x676E6972696170, 0xE700000000000000);
}

uint64_t sub_1002659E8()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(stringLiteral:)(0xD000000000000082, 0x8000000100ECE500);
  qword_1011B6C68 = result;
  unk_1011B6C70 = v1;
  return result;
}

uint64_t sub_100265A20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v5 = sub_10001A9A8(&qword_1010F46C0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v10 = qword_1011B7D88;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
  v24 = *v2;
  v13 = sub_10001A9A8(&qword_1010F49B8);
  v14 = String.init<A>(describing:)(&v24, v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for String;
  *(_QWORD *)(v12 + 104) = v17;
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 72) = 0xD000000000000023;
  *(_QWORD *)(v12 + 80) = 0x8000000100ECE710;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "%{public}@: %{public}@", 22, 2, v12);
  swift_bridgeObjectRelease();
  v18 = v2[35];
  v19 = (_QWORD *)swift_allocObject(&unk_101064460, 40, 7);
  v19[2] = a1;
  v19[3] = a2;
  v19[4] = v2;
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v8, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_101064488, 56, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v18;
  v21[5] = sub_100294B78;
  v21[6] = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v8, (uint64_t)&unk_1010F4A68, (uint64_t)v21);
  swift_release();
  return swift_release();
}

void sub_100265C4C(uint64_t a1, void (*a2)(void **, uint64_t))
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[64];

  if ((a1 & 1) != 0)
  {
    v15 = sub_10079D584();
    a2(v15, v3 & 1);

  }
  else
  {
    v4 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D88, "#Durian: initiatePairingSession - manatee not available!", 56, 2, _swiftEmptyArrayStorage);
    v5 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v5, v18);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 48) = 0xD00000000000002FLL;
    *(_QWORD *)(inited + 56) = 0x8000000100ECE780;
    v8 = sub_1006B8DC4(inited);
    type metadata accessor for SPPairingSessionError(0);
    v10 = v9;
    v16 = 20;
    sub_10047B41C(v8);
    v12 = v11;
    swift_bridgeObjectRelease();
    v13 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v17, &v16, v12, v10, v13);
    v14 = v17;
    a2((void **)v17, 1);

  }
}

uint64_t sub_100265DF8(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD aBlock[6];

  v4 = v3;
  v43 = a1;
  v44 = a3;
  v41 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v5 - 8);
  v49 = v5;
  __chkstk_darwin(v5);
  v47 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  __chkstk_darwin(v7);
  v42 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v39 = qword_1011B7D88;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 152, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E221E0;
  aBlock[0] = *v4;
  v16 = sub_10001A9A8(&qword_1010F49B8);
  v17 = String.init<A>(describing:)(aBlock, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD000000000000026;
  *(_QWORD *)(v15 + 80) = 0x8000000100ECE660;
  v21 = v43;
  v22 = objc_msgSend(v43, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *(_QWORD *)(v15 + 136) = &type metadata for String;
  *(_QWORD *)(v15 + 144) = v20;
  *(_QWORD *)(v15 + 112) = v24;
  *(_QWORD *)(v15 + 120) = v26;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "%{public}@: %{public}@ for session - %@", 39, 2, v15);
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)swift_allocObject(&unk_101064370, 48, 7);
  v27[2] = v4;
  v27[3] = v21;
  v28 = v44;
  v27[4] = v41;
  v27[5] = v28;
  aBlock[4] = sub_100294AE0;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101064388;
  v29 = _Block_copy(aBlock);
  swift_retain();
  v30 = v21;
  v31 = swift_retain();
  v32 = v42;
  static DispatchQoS.unspecified.getter(v31);
  v50 = _swiftEmptyArrayStorage;
  v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v36 = v47;
  v37 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v34, v35, v49, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v46);
  return swift_release();
}

uint64_t sub_1002661B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  _QWORD *v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  char v29;
  char v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  void **aBlock;
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  void *v72;
  uint64_t (*v73)();
  _QWORD *v74;
  char v75[64];
  char v76[32];

  v61 = a4;
  v60 = a3;
  v67 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v64 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for DispatchQoS(0);
  v63 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v62 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v59 - v17;
  v19 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

  v20 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators);
  v21 = swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators, v76, 0, 0);
  v22 = *v20;
  if (*(_QWORD *)(*v20 + 16))
  {
    swift_bridgeObjectRetain(*v20);
    v23 = sub_100003FB0((uint64_t)v18);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_retain();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v13 + 8);
      v26(v18, v12);
      v27 = v25;
      v59 = v25;
      v28 = (void *)sub_100BB5018();
      v30 = v29 & 1;
      v31 = objc_msgSend(*(id *)(v27 + 16), "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

      swift_beginAccess(v20, &aBlock, 33, 0);
      sub_10010368C((uint64_t)v16);
      v26(v16, v12);
      swift_endAccess(&aBlock);
      swift_release();
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
      v32 = (void *)static OS_dispatch_queue.global(qos:)(v11);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v33 = swift_allocObject(&unk_101064410, 41, 7);
      v34 = v61;
      *(_QWORD *)(v33 + 16) = v60;
      *(_QWORD *)(v33 + 24) = v34;
      v35 = v28;
      *(_QWORD *)(v33 + 32) = v28;
      *(_BYTE *)(v33 + 40) = v30;
      v73 = sub_100294B34;
      v74 = (_QWORD *)v33;
      aBlock = _NSConcreteStackBlock;
      v70 = 1107296256;
      v71 = sub_100016FB8;
      v72 = &unk_101064428;
      v36 = _Block_copy(&aBlock);
      swift_retain();
      v37 = sub_100294B60(v28, v30);
      v38 = v62;
      static DispatchQoS.unspecified.getter(v37);
      v68 = _swiftEmptyArrayStorage;
      v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v42 = v64;
      v43 = v67;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v40, v41, v67, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v36);
      _Block_release(v36);
      swift_release();

      sub_100294B28(v35, v30);
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
  v44 = (*(uint64_t (**)(char *, uint64_t, __n128))(v13 + 8))(v18, v12, v21);
  v45 = static os_log_type_t.error.getter(v44);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D88, "#Durian: Invalidate session called for incorrect session.", 57, 2, _swiftEmptyArrayStorage);
  v46 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  inited = swift_initStackObject(v46, v75);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v48;
  *(_QWORD *)(inited + 48) = 0xD000000000000032;
  *(_QWORD *)(inited + 56) = 0x8000000100ECE6D0;
  v49 = sub_1006B8DC4(inited);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  v50 = (void *)static OS_dispatch_queue.global(qos:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v51 = (_QWORD *)swift_allocObject(&unk_1010643C0, 40, 7);
  v52 = v61;
  v51[2] = v60;
  v51[3] = v52;
  v51[4] = v49;
  v73 = sub_100298280;
  v74 = v51;
  aBlock = _NSConcreteStackBlock;
  v70 = 1107296256;
  v71 = sub_100016FB8;
  v72 = &unk_1010643D8;
  v53 = _Block_copy(&aBlock);
  v54 = swift_retain();
  v38 = v62;
  static DispatchQoS.unspecified.getter(v54);
  v68 = _swiftEmptyArrayStorage;
  v55 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v56 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v57 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v42 = v64;
  v43 = v67;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v56, v57, v67, v55);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v38, v42, v53);
  _Block_release(v53);

LABEL_8:
  (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v66);
  return swift_release();
}

uint64_t sub_10026687C(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD aBlock[7];

  v4 = v3;
  v44 = a1;
  v45 = a3;
  v41 = *v3;
  v42 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v48 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v39 = qword_1011B7D88;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 152, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E221E0;
  aBlock[0] = *v4;
  v16 = sub_10001A9A8(&qword_1010F49B8);
  v17 = String.init<A>(describing:)(aBlock, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD000000000000022;
  *(_QWORD *)(v15 + 80) = 0x8000000100ECDFF0;
  v21 = v44;
  v22 = objc_msgSend(v44, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *(_QWORD *)(v15 + 136) = &type metadata for String;
  *(_QWORD *)(v15 + 144) = v20;
  *(_QWORD *)(v15 + 112) = v24;
  *(_QWORD *)(v15 + 120) = v26;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "%{public}@: %{public}@ for session - %@", 39, 2, v15);
  swift_bridgeObjectRelease();
  v27 = (_QWORD *)swift_allocObject(&unk_101064280, 56, 7);
  v27[2] = v4;
  v27[3] = v21;
  v28 = v45;
  v27[4] = v42;
  v27[5] = v28;
  v27[6] = v41;
  aBlock[4] = sub_100294574;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101064298;
  v29 = _Block_copy(aBlock);
  swift_retain();
  v30 = v21;
  v31 = swift_retain();
  v32 = v43;
  static DispatchQoS.unspecified.getter(v31);
  v51 = _swiftEmptyArrayStorage;
  v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v36 = v48;
  v37 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v34, v35, v50, v33);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v47);
  return swift_release();
}

uint64_t sub_100266C48(uint64_t a1, void *a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t (*v45)(char *, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t inited;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD v81[18];
  uint64_t v82;
  void (*v83)(void *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[24];
  void *v89[26];

  v81[14] = a5;
  v83 = a3;
  v8 = type metadata accessor for HashAlgorithm(0);
  v81[16] = *(_QWORD *)(v8 - 8);
  v81[17] = v8;
  __chkstk_darwin(v8);
  v81[15] = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v81 - v15;
  v17 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v18 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators);
  v19 = swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators, &v87, 0, 0);
  v20 = *v18;
  if (*(_QWORD *)(*v18 + 16))
  {
    swift_bridgeObjectRetain(*v18);
    v21 = sub_100003FB0((uint64_t)v16);
    if ((v22 & 1) != 0)
    {
      v81[9] = a1;
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
      swift_retain();
      swift_bridgeObjectRelease();
      v24 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      v25 = static os_signpost_type_t.end.getter(v24);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v26 = qword_1011B7D88;
      v27 = v23 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
      v28 = os_signpost(_:dso:log:name:signpostID:)(v25, &_mh_execute_header, qword_1011B7D88, "signFetchPhase", 14, 2, v23 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
      v29 = static os_signpost_type_t.begin.getter(v28);
      os_signpost(_:dso:log:name:signpostID:)(v29, &_mh_execute_header, v26, "pairingLockCheck", 16, 2, v27);
      type metadata accessor for Transaction(0);
      v30 = swift_allocObject(&unk_1010642D0, 32, 7);
      *(_QWORD *)(v30 + 16) = v23;
      *(_QWORD *)(v30 + 24) = a2;
      swift_retain();
      v31 = a2;
      static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1010F4A40, v30);
      swift_release();
      v32 = objc_msgSend(v31, "collaborativeKeyC1");
      if (v32)
      {
        v33 = v32;
        v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v36 = v35;

        v37 = objc_msgSend(v31, "attestation");
        if (v37)
        {
          v38 = v37;
          v82 = a4;
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          v41 = objc_msgSend(v31, "nonce");
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v43 = v42;

          v44 = (char *)&loc_100266F24 + dword_100267FF4[v43 >> 62];
          v81[11] = v40;
          __asm { BR              X10 }
        }
        v71 = static os_log_type_t.error.getter(0);
        os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, qword_1011B7D88, "#Durian: attestation(S1) is not available.", 42, 2, _swiftEmptyArrayStorage);
        v72 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
        inited = swift_initStackObject(v72, &v84);
        *(_OWORD *)(inited + 16) = xmmword_100E22B00;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v74;
        *(_QWORD *)(inited + 48) = 0xD000000000000042;
        *(_QWORD *)(inited + 56) = 0x8000000100ECE170;
        v75 = sub_1006B8DC4(inited);
        type metadata accessor for SPPairingSessionError(0);
        v77 = v76;
        v88[0] = 6;
        sub_10047B41C(v75);
        v79 = v78;
        swift_bridgeObjectRelease();
        v80 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(v89, v88, v79, v77, v80);
        v70 = v89[0];
        sub_100BB58B8(v89[0], 1, (uint64_t)v83, a4);
        sub_10001BC14(v34, v36);
      }
      else
      {
        v60 = static os_log_type_t.error.getter(0);
        os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, qword_1011B7D88, "#Durian: Commitment is not available to verify pairing info", 59, 2, _swiftEmptyArrayStorage);
        v61 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
        v62 = swift_initStackObject(v61, &v85);
        *(_OWORD *)(v62 + 16) = xmmword_100E22B00;
        *(_QWORD *)(v62 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(v62 + 40) = v63;
        *(_QWORD *)(v62 + 48) = 0xD000000000000041;
        *(_QWORD *)(v62 + 56) = 0x8000000100ECE0F0;
        v64 = sub_1006B8DC4(v62);
        type metadata accessor for SPPairingSessionError(0);
        v66 = v65;
        v88[0] = 6;
        sub_10047B41C(v64);
        v68 = v67;
        swift_bridgeObjectRelease();
        v69 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(v89, v88, v68, v66, v69);
        v70 = v89[0];
        sub_100BB58B8(v89[0], 1, (uint64_t)v83, a4);
      }

      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  v82 = a4;
  v45 = *(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8);
  v46 = v45(v16, v10, v19);
  v47 = static os_log_type_t.error.getter(v46);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_1011B7D88, "#Durian: Verification step reached for a session that was not instantiated from here.", 85, 2, _swiftEmptyArrayStorage);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  v49 = swift_initStackObject(v48, &v86);
  *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v49 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(v49 + 40) = v50;
  *(_QWORD *)(v49 + 48) = 0xD000000000000048;
  *(_QWORD *)(v49 + 56) = 0x8000000100ECE080;
  v51 = sub_1006B8DC4(v49);
  type metadata accessor for SPPairingSessionError(0);
  v53 = v52;
  v88[0] = 6;
  sub_10047B41C(v51);
  v55 = v54;
  swift_bridgeObjectRelease();
  v56 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v89, v88, v55, v53, v56);
  v57 = v89[0];
  v83(v89[0], 1);

  v58 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v58);

  swift_beginAccess(v18, v89, 33, 0);
  sub_10010368C((uint64_t)v14);
  ((void (*)(char *, uint64_t))v45)(v14, v10);
  swift_endAccess(v89);
  return swift_release();
}

uint64_t sub_100268014(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for DispatchTime(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100268074, 0, 0);
}

uint64_t sub_100268074()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 80) = v1;
  return swift_task_switch(sub_10026809C, v1, 0);
}

uint64_t sub_10026809C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v3 = v1[9];
  v2 = v1[10];
  v4 = v1[7];
  v5 = v1[8];
  static DispatchTime.now()(a1);
  v6 = v2 + OBJC_IVAR____TtC12searchpartyd24SPAnalyticsItemPairEvent_beginVerifyPairing;
  v7 = swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd24SPAnalyticsItemPairEvent_beginVerifyPairing, v1 + 2, 33, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 40))(v6, v3, v4, v7);
  swift_endAccess(v1 + 2);
  v1[11] = type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4A58, v2);
  swift_release();
  return swift_task_switch(sub_100268174, 0, 0);
}

uint64_t sub_100268174()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = objc_msgSend(*(id *)(v0 + 48), "serialNumber");
  if (v1)
  {
    v2 = v1;
    v3 = *(void **)(v0 + 48);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v6 = v5;

    *(_QWORD *)(v0 + 96) = v6;
    v7 = objc_msgSend(v3, "systemVersion");
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(v0 + 80);
      *(_QWORD *)(v0 + 104) = v4;
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v12 = v11;

      *(_QWORD *)(v0 + 112) = v10;
      *(_QWORD *)(v0 + 120) = v12;
      return swift_task_switch(sub_10026824C, v9, 0);
    }
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026824C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = (_QWORD *)swift_allocObject(&unk_101064348, 56, 7);
  v6[2] = v5;
  v6[3] = v2;
  v6[4] = v1;
  v6[5] = v4;
  v6[6] = v3;
  swift_retain(v5);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v3);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4A60, v6);
  swift_release(v6);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100268314(uint64_t a1, NSObject *a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t inited;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  dispatch_group_t v61;
  _QWORD v62[3];
  _QWORD v63[3];
  _BYTE v64[72];

  v54 = a7;
  v60 = a6;
  v61 = a2;
  v57 = a4;
  v10 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v10 - 8);
  v56 = v10;
  v11 = __chkstk_darwin(v10);
  v53 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a5 + 16;
  v59 = a5;
  v13 = static os_log_type_t.error.getter(v11);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v14 = qword_1011B7D88;
  v51 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v51, 72, 7);
  v52 = xmmword_100E22B00;
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v63[0] = a1;
  swift_errorRetain(a1);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v17 = String.init<A>(describing:)(v63, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "#Durian: Pairing check request failed with error - %@", 53, 2, v15);
  v21 = swift_bridgeObjectRelease();
  v22 = static os_signpost_type_t.end.getter(v21);
  os_signpost(_:dso:log:name:signpostID:)(v22, &_mh_execute_header, qword_1011B7D88, "pairingLockCheck", 16, 2, a3 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
  if ((v57 & 1) != 0)
  {
    if (qword_1010E9AE0 != -1)
      swift_once(&qword_1010E9AE0, sub_100265974);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6C50);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "AlphaWasp: bypassing pairing lock check failure for hardcoded pairing", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    swift_beginAccess(v58, v63, 1, 0);
    v28 = v59;
    v29 = v60;
    v30 = *(void **)(v59 + 16);
    *(_QWORD *)(v59 + 16) = v60;
    *(_BYTE *)(v28 + 24) = 0;

    v31 = v29;
  }
  else
  {
    v63[0] = a1;
    swift_errorRetain(a1);
    type metadata accessor for SPPairingSessionError(0);
    v33 = v32;
    if ((swift_dynamicCast(v62, v63, v16, v32, 6) & 1) == 0)
    {
      v34 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
      inited = swift_initStackObject(v34, v64);
      *(_OWORD *)(inited + 16) = v52;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v36;
      v37 = swift_allocObject(v51, 72, 7);
      *(_OWORD *)(v37 + 16) = v52;
      v63[0] = a1;
      swift_errorRetain(a1);
      v38 = String.init<A>(describing:)(v63, v16);
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = v20;
      *(_QWORD *)(v37 + 32) = v38;
      *(_QWORD *)(v37 + 40) = v39;
      *(_QWORD *)(inited + 48) = String.init(format:_:)(0xD00000000000002ALL, 0x8000000100ECE5D0, v37);
      *(_QWORD *)(inited + 56) = v40;
      v41 = sub_1006B8DC4(inited);
      v63[0] = 3;
      sub_10047B41C(v41);
      v43 = v42;
      swift_bridgeObjectRelease();
      v44 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v62, v63, v43, v33, v44);
    }
    v45 = v62[0];
    swift_beginAccess(v58, v63, 1, 0);
    v46 = v59;
    v47 = *(void **)(v59 + 16);
    *(_QWORD *)(v59 + 16) = v45;
    *(_BYTE *)(v46 + 24) = 1;

    v48 = objc_msgSend(v60, "identifier");
    v49 = (uint64_t)v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

    swift_beginAccess(v54 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators, v62, 33, 0);
    sub_10010368C(v49);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v49, v56);
    swift_endAccess(v62);
    swift_release();
  }
  dispatch_group_leave(v61);
}

void sub_1002687B4(_QWORD *a1, NSObject *a2, unint64_t a3, uint8_t *a4, void *a5, objc_class *a6, unint64_t a7, uint64_t a8, unsigned __int8 a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __CFString *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  uint8_t *v84;
  void *v85;
  id v86;
  Class isa;
  Class v88;
  Class v89;
  Class v90;
  Class v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  Class v113;
  Class v114;
  Class v115;
  NSString v116;
  NSString v117;
  Class v118;
  uint64_t v119;
  unint64_t v120;
  Class v121;
  Class v122;
  Class v123;
  Class v124;
  Class v125;
  _QWORD *v126;
  id v127;
  double v128;
  void *v129;
  id v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t inited;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  void *v150;
  id v151;
  uint64_t v152;
  Class v153;
  uint64_t v154;
  unint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  os_log_t v158;
  unsigned int v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  Class v163;
  Class v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  Class v169;
  uint8_t *v170;
  Class v171;
  char *v172;
  uint64_t v173;
  dispatch_group_t v174;
  unint64_t v175;
  id v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD v179[7];
  uint64_t v180;
  uint64_t v181;
  _QWORD v182[3];
  Class v183;
  Class v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187[4];

  v165 = a7;
  v166 = a8;
  v164 = a6;
  v176 = a5;
  v170 = a4;
  v174 = a2;
  v14 = type metadata accessor for LocalizationUtility.Table(0);
  v162 = *(_QWORD *)(v14 - 8);
  v163 = (Class)v14;
  __chkstk_darwin(v14);
  v161 = (char *)&v154 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = type metadata accessor for UUID(0);
  v171 = *(Class *)(v173 - 8);
  __chkstk_darwin(v173);
  v172 = (char *)&v154 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(unsigned __int8 *)a1;
  v18 = a1[1];
  v19 = a1[2];
  v20 = a1[3];
  v21 = a1[4];
  v22 = a1[5];
  v169 = (Class)a1[6];
  v23 = a1[7];
  if (qword_1010E9AE0 != -1)
    swift_once(&qword_1010E9AE0, sub_100265974);
  v175 = a3 + 16;
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6C50);
  sub_10001BD08(v18, v19);
  sub_10001BD08(v20, v21);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v22);
  sub_10001BD08(v18, v19);
  sub_10001BD08(v20, v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v160 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter(v27);
  LODWORD(v168) = v28;
  if (!os_log_type_enabled(v27, v28))
  {
    sub_10001EF3C(v18, v19);
    sub_10001EF3C(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001EF3C(v18, v19);
    sub_10001EF3C(v20, v21);

    swift_bridgeObjectRelease();
    v39 = swift_bridgeObjectRelease();
    v53 = v17;
    v34 = v19;
    if (v53 >= 2)
      goto LABEL_5;
LABEL_9:
    if (v21 >> 60 == 15 || !v23 || v22[2].isa != (Class)2)
    {
      v67 = static os_log_type_t.error.getter(v39);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, qword_1011B7D88, "#Durian: Could not get necessary data from sever response", 57, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0);
      v69 = v68;
      v178 = 3;
      v70 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v71 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v187, &v178, v70, v69, v71);
      v72 = v187[0];
      swift_beginAccess(v175, &v178, 1, 0);
      v73 = *(void **)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v72;
      *(_BYTE *)(a3 + 24) = 1;

      v52 = objc_msgSend(v176, "identifier");
      goto LABEL_18;
    }
    v177 = v34;
    v157 = v23;
    v158 = v22;
    v167 = a3;
    v154 = v18;
    sub_10001BBBC(v20, v21);
    v54 = v20;
    if (qword_1010E9AE8 != -1)
      swift_once(&qword_1010E9AE8, sub_1002659E8);
    v159 = a9;
    v55 = qword_1011B6C68;
    v56 = (uint8_t *)qword_1011B6C70;
    v57 = objc_msgSend(v176, "nonce");
    v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    sub_100626210(v58, v60);
    v185 = v61;
    v186 = v62;
    Data.append(_:)(*((_QWORD *)v164 + 10), *((_QWORD *)v164 + 11));
    Data.append(_:)(v165, v166);
    v63 = v185;
    v64 = v186;
    sub_10001BBBC(v185, v186);
    v65 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    v164 = (Class)v55;
    v156 = v56;
    v168 = v54;
    v66 = sub_1007DFE84(v55, (uint64_t)v56, v63, v64, v54, v21, v65);
    v155 = v21;
    v76 = v66;

    v77 = sub_10001BC14(v63, v64);
    if ((v76 & 1) != 0)
    {
      v78 = (id)static os_log_type_t.default.getter(v77);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, qword_1011B7D88, "#Durian: Signature(S3) verified.", 32, 2, _swiftEmptyArrayStorage);
    }
    else
    {
      v79 = static os_log_type_t.error.getter(v77);
      v55 = v173;
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v80 = os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, qword_1011B7D88, "#Durian: Signature(S3) did not match", 36, 2, _swiftEmptyArrayStorage);
      if ((v159 & 1) == 0)
      {
        v138 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
        inited = swift_initStackObject(v138, &v181);
        *(_OWORD *)(inited + 16) = xmmword_100E22B00;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v140;
        *(_QWORD *)(inited + 48) = 0xD00000000000003FLL;
        *(_QWORD *)(inited + 56) = 0x8000000100ECE410;
        v141 = sub_1006B8DC4(inited);
        type metadata accessor for SPPairingSessionError(0);
        v143 = v142;
        v178 = 3;
        sub_10047B41C(v141);
        v144 = v21;
        v146 = v145;
        swift_bridgeObjectRelease();
        v147 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(v187, &v178, v146, v143, v147);
        v148 = v187[0];
        swift_beginAccess(v175, &v178, 1, 0);
        v149 = v167;
        v150 = *(void **)(v167 + 16);
        *(_QWORD *)(v167 + 16) = v148;
        *(_BYTE *)(v149 + 24) = 1;

        v151 = objc_msgSend(v176, "identifier");
        v152 = (uint64_t)v172;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v151);

        swift_beginAccess(&v170[OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators], v187, 33, 0);
        sub_10010368C(v152);
        (*((void (**)(uint64_t, uint64_t))v171 + 1))(v152, v55);
        swift_endAccess(v187);
        sub_10001EF3C(v168, v144);
        swift_release();
        goto LABEL_51;
      }
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.default.getter(v81);
      v83 = os_log_type_enabled(v81, v82);
      v64 = v167;
      if (v83)
      {
        v84 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "AlphaWasp: bypassing pairing lock check failure for alphaWasp hardcoded pairing", v84, 2u);
        swift_slowDealloc(v84, -1, -1);
      }

      swift_beginAccess(v175, &v178, 1, 0);
      v85 = *(void **)(v64 + 16);
      v78 = v176;
      *(_QWORD *)(v64 + 16) = v176;
      *(_BYTE *)(v64 + 24) = 0;

      v86 = v78;
    }
    isa = v158[2].isa;
    if (isa)
    {
      if (isa != (Class)1)
      {
        v55 = (uint64_t)a10;
        v89 = v158[4].isa;
        v88 = v158[5].isa;
        v91 = v158[6].isa;
        v90 = v158[7].isa;
        v183 = v89;
        v184 = v88;
        sub_10001BBBC((uint64_t)v89, (unint64_t)v88);
        sub_10001BBBC((uint64_t)v89, (unint64_t)v88);
        sub_10001BBBC((uint64_t)v91, (unint64_t)v90);
        Data.append(_:)(v91, v90);
        v92 = a10[4];
        v93 = a10[5];
        a10[4] = v89;
        a10[5] = v88;
        sub_10001BBBC((uint64_t)v89, (unint64_t)v88);
        sub_10001EF3C(v92, v93);
        v94 = a10[6];
        v95 = a10[7];
        a10[6] = v91;
        a10[7] = v90;
        v165 = (unint64_t)v90;
        v166 = (uint64_t)v91;
        sub_10001BBBC((uint64_t)v91, (unint64_t)v90);
        v96 = sub_10001EF3C(v94, v95);
        if ((v159 & 1) != 0)
        {
          v170 = (uint8_t *)v89;
          v171 = v88;
          if (v177 >> 60 == 15)
            v97 = 0;
          else
            v97 = v154;
          if (v177 >> 60 == 15)
            v98 = 0xC000000000000000;
          else
            v98 = v177;
          sub_10001BD08(v154, v177);
        }
        else
        {
          v98 = v177;
          if (v177 >> 60 == 15)
          {
            v99 = static os_log_type_t.error.getter(v96);
            if (qword_1010EA2A8 != -1)
              swift_once(&qword_1010EA2A8, sub_100B5DDB4);
            os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, qword_1011B7D88, "#Durian: Could not get necessary data from sever response", 57, 2, _swiftEmptyArrayStorage);
            type metadata accessor for SPPairingSessionError(0);
            v101 = v100;
            v187[0] = 3;
            v102 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
            v103 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
            _BridgedStoredNSError.init(_:userInfo:)(v182, v187, v102, v101, v103);
            v104 = v182[0];
            swift_beginAccess(v175, v187, 1, 0);
            v105 = v167;
            v106 = *(void **)(v167 + 16);
            *(_QWORD *)(v167 + 16) = v104;
            *(_BYTE *)(v105 + 24) = 1;

            v107 = objc_msgSend(v176, "identifier");
            v108 = (uint64_t)v172;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v107);

            swift_beginAccess(&v170[OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators], v182, 33, 0);
            sub_10010368C(v108);
            (*((void (**)(uint64_t, uint64_t))v171 + 1))(v108, v173);
            swift_endAccess(v182);
            sub_10001EF3C(v168, v21);
            sub_10001BC14(v166, v165);
            sub_10001BC14((uint64_t)v89, (unint64_t)v88);
            swift_release();
            v109 = (uint64_t)v183;
            v110 = (unint64_t)v184;
            goto LABEL_49;
          }
          v170 = (uint8_t *)v89;
          v171 = v88;
          v97 = v154;
          sub_10001BBBC(v154, v177);
        }
        v173 = a12;
        v111 = v161;
        v112 = v162;
        v113 = v163;
        (*(void (**)(char *, _QWORD, Class))(v162 + 104))(v161, enum case for LocalizationUtility.Table.default(_:), v163);
        static LocalizationUtility.localizedString(key:table:)(0xD000000000000017, 0x8000000100ECE360, v111);
        (*(void (**)(char *, Class))(v112 + 8))(v111, v113);
        v154 = v97;
        v177 = v98;
        v114 = Data._bridgeToObjectiveC()().super.isa;
        v115 = Data._bridgeToObjectiveC()().super.isa;
        v163 = Data._bridgeToObjectiveC()().super.isa;
        v164 = Data._bridgeToObjectiveC()().super.isa;
        v116 = String._bridgeToObjectiveC()();
        v117 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v118 = Data._bridgeToObjectiveC()().super.isa;
        v169 = v118;
        v119 = (uint64_t)v183;
        v120 = (unint64_t)v184;
        sub_10001BBBC((uint64_t)v183, (unint64_t)v184);
        v121 = Data._bridgeToObjectiveC()().super.isa;
        v172 = (char *)v120;
        v173 = v119;
        sub_10001BC14(v119, v120);
        v153 = v118;
        v21 = (unint64_t)v176;
        v122 = v114;
        v123 = v114;
        v125 = v163;
        v124 = v164;
        objc_msgSend(v176, "updateWithSeed:collaborativeKeyC2:serverSignature:serverPublicKey:maskedAppleID:userMessage:baaIntermediateCert:baaLeafCert:", v123, v115, v163, v164, v116, v117, v153, v121);

        v126 = (_QWORD *)(*(_QWORD *)((char *)a10
                                    + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor)
                        + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
        *(_QWORD *)&v128 = swift_beginAccess(v126, v187, 0, 0).n128_u64[0];
        if (*v126)
          v127 = objc_msgSend((id)v21, "updatePairingLocation:", v128);
        v78 = (id)static os_log_type_t.default.getter(v127);
        v56 = v170;
        v64 = (unint64_t)v171;
        if (qword_1010EA2A8 == -1)
        {
LABEL_48:
          os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, qword_1011B7D88, "#Durian: Verification completed successfully. Collaborative share is added to session.", 86, 2, _swiftEmptyArrayStorage);
          v129 = *(void **)(v55 + 16);
          *(_QWORD *)(v55 + 16) = v21;
          v130 = (id)v21;

          swift_beginAccess(v175, v182, 1, 0);
          v131 = v167;
          v132 = *(void **)(v167 + 16);
          *(_QWORD *)(v167 + 16) = v130;
          *(_BYTE *)(v131 + 24) = 0;

          v133 = static os_signpost_type_t.end.getter(v130);
          v134 = qword_1011B7D88;
          v135 = v55 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
          v136 = os_signpost(_:dso:log:name:signpostID:)(v133, &_mh_execute_header, qword_1011B7D88, "pairingLockCheck", 16, 2, v55 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
          v137 = static os_signpost_type_t.begin.getter(v136);
          os_signpost(_:dso:log:name:signpostID:)(v137, &_mh_execute_header, v134, "tagKeyGeneration", 16, 2, v135);
          sub_10001EF3C(v168, v155);
          sub_10001BC14(v166, v165);
          sub_10001BC14((uint64_t)v56, v64);
          sub_10001BC14(v154, v177);
          v110 = (unint64_t)v172;
          v109 = v173;
LABEL_49:
          sub_10001BC14(v109, v110);
LABEL_51:
          sub_10001BC14(v185, v186);
          goto LABEL_19;
        }
LABEL_54:
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
        goto LABEL_48;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_54;
  }
  v177 = v19;
  v158 = v27;
  v29 = swift_slowAlloc(12, -1);
  v167 = a3;
  v30 = (uint8_t *)v29;
  v157 = swift_slowAlloc(32, -1);
  v187[0] = v157;
  v156 = v30;
  *(_DWORD *)v30 = 136315138;
  v159 = v17;
  LOBYTE(v178) = v17;
  v179[0] = v18;
  v179[1] = v177;
  v179[2] = v20;
  v179[3] = v21;
  v179[4] = v22;
  v179[5] = v169;
  v179[6] = v23;
  sub_10001BD08(v18, v177);
  sub_10001BD08(v20, v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v31 = String.init<A>(describing:)(&v178, &type metadata for PairingLockCheckResponse);
  v178 = sub_100016940(v31, v32, v187);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v30 + 4, v30 + 12);
  v33 = v21;
  v34 = v177;
  swift_bridgeObjectRelease();
  sub_10001EF3C(v18, v34);
  sub_10001EF3C(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001EF3C(v18, v34);
  sub_10001EF3C(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = v158;
  v36 = v156;
  _os_log_impl((void *)&_mh_execute_header, v158, (os_log_type_t)v168, "pairingCheckResponse: %s", v156, 0xCu);
  v37 = v157;
  swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
  v38 = v37;
  v21 = v33;
  swift_slowDealloc(v38, -1, -1);
  a3 = v167;
  swift_slowDealloc(v36, -1, -1);

  if (v159 < 2)
    goto LABEL_9;
LABEL_5:
  v40 = static os_log_type_t.error.getter(v39);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B7D88, "#Durian: Device being paired is locked. Cannot proceed.", 55, 2, _swiftEmptyArrayStorage);
  v41 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  v42 = swift_initStackObject(v41, &v180);
  *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v42 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(v42 + 40) = v43;
  *(_QWORD *)(v42 + 48) = 0xD000000000000036;
  *(_QWORD *)(v42 + 56) = 0x8000000100ECE4C0;
  v44 = sub_1006B8DC4(v42);
  type metadata accessor for SPPairingSessionError(0);
  v46 = v45;
  v178 = 18;
  sub_10047B41C(v44);
  v48 = v47;
  swift_bridgeObjectRelease();
  v49 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v187, &v178, v48, v46, v49);
  v50 = v187[0];
  swift_beginAccess(v175, &v178, 1, 0);
  v51 = *(void **)(a3 + 16);
  *(_QWORD *)(a3 + 16) = v50;
  *(_BYTE *)(a3 + 24) = 1;

  v52 = objc_msgSend(v176, "identifier");
LABEL_18:
  v74 = v52;
  v75 = (uint64_t)v172;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

  swift_beginAccess(&v170[OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators], v187, 33, 0);
  sub_10010368C(v75);
  (*((void (**)(uint64_t, uint64_t))v171 + 1))(v75, v173);
  swift_endAccess(v187);
  swift_release();
LABEL_19:
  dispatch_group_leave(v174);
}

uint64_t sub_100269AEC(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v4 = v3;
  v37 = a1;
  v38 = a3;
  v35 = *v3;
  v36 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v8 - 8);
  v43 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  __chkstk_darwin(v11);
  v39 = (uint64_t)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static Date.trustedNow.getter(v39);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v15 = qword_1011B7D88;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  aBlock[0] = *v3;
  v18 = sub_10001A9A8(&qword_1010F49B8);
  v19 = String.init<A>(describing:)(aBlock, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v22 = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 64) = v22;
  *(_QWORD *)(v17 + 72) = 0xD000000000000024;
  *(_QWORD *)(v17 + 80) = 0x8000000100ECD610;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "%{public}@: %{public}@", 22, 2, v17);
  swift_bridgeObjectRelease();
  v23 = (_QWORD *)swift_allocObject(&unk_101064050, 56, 7);
  v24 = v36;
  v25 = v37;
  v23[2] = v4;
  v23[3] = v25;
  v26 = v38;
  v23[4] = v24;
  v23[5] = v26;
  v23[6] = v35;
  aBlock[4] = sub_100293A30;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101064068;
  v27 = _Block_copy(aBlock);
  swift_retain();
  v28 = v25;
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v5, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v43);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  return swift_release();
}

void sub_100269E44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t (*v47)(char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  id v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  _QWORD v129[10];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140[19];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _BYTE v151[152];
  uint64_t v152;
  _BYTE v153[152];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  _OWORD v164[9];
  uint64_t v165;
  uint64_t aBlock;
  uint64_t aBlock_8;
  uint64_t (*v168)(uint64_t);
  void *v169;
  void (*v170)();
  _QWORD *v171;

  v118 = a5;
  v126 = a3;
  v127 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v124 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)&v125 = v7;
  __chkstk_darwin(v7);
  v123 = (char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v121 = *(_QWORD *)(v9 - 8);
  v122 = v9;
  __chkstk_darwin(v9);
  v120 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v116);
  v117 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v115 - v21;
  v128 = a2;
  v23 = objc_msgSend(a2, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

  v119 = a1;
  v24 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators);
  v25 = swift_beginAccess(v24, &v152, 0, 0);
  v26 = *v24;
  if (!*(_QWORD *)(*v24 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain(*v24);
  v27 = sub_100003FB0((uint64_t)v22);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v47 = *(uint64_t (**)(char *, uint64_t, __n128))(v17 + 8);
    v48 = v47(v22, v16, v25);
    v49 = static os_log_type_t.error.getter(v48);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D88, "#Durian: Finalize step reached for a session that was not instantiated from here.", 81, 2, _swiftEmptyArrayStorage);
    v50 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    v51 = swift_allocObject(v50, 64, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v51 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v51 + 40) = v52;
    *(_QWORD *)(v51 + 48) = 0xD000000000000050;
    *(_QWORD *)(v51 + 56) = 0x8000000100ECD6A0;
    v53 = sub_1006B8DC4(v51);
    v54 = objc_msgSend(v128, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v54);

    swift_beginAccess(v24, &aBlock, 33, 0);
    sub_10010368C((uint64_t)v20);
    ((void (*)(char *, uint64_t))v47)(v20, v16);
    swift_endAccess(&aBlock);
    swift_release();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v55 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v56 = (_QWORD *)swift_allocObject(&unk_1010640A0, 40, 7);
    v57 = v127;
    v56[2] = v126;
    v56[3] = v57;
    v56[4] = v53;
    v170 = sub_100293A48;
    v171 = v56;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    aBlock_8 = 1107296256;
    v168 = sub_100016FB8;
    v169 = &unk_1010640B8;
    v58 = _Block_copy(&aBlock);
    v59 = swift_retain();
    v60 = v120;
    static DispatchQoS.unspecified.getter(v59);
    *(_QWORD *)&v164[0] = _swiftEmptyArrayStorage;
    v61 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v62 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v63 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v64 = v123;
    v65 = v62;
    v66 = v125;
    dispatch thunk of SetAlgebra.init<A>(_:)(v164, v65, v63, v125, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v64, v58);
    _Block_release(v58);

    (*(void (**)(char *, uint64_t))(v124 + 8))(v64, v66);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v60, v122);
    goto LABEL_11;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
  swift_retain();
  swift_bridgeObjectRelease();
  v30 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v16);
  v31 = static os_signpost_type_t.end.getter(v30);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v32 = qword_1011B7D88;
  os_signpost(_:dso:log:name:signpostID:)(v31, &_mh_execute_header, qword_1011B7D88, "tagKeyGeneration", 16, 2, v29 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
  v33 = *(_QWORD *)(v29 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  swift_retain();
  v34 = v128;
  sub_10026B3D8(v128, v29, (uint64_t)v153);
  sub_100005CF0((uint64_t)v153, (uint64_t)v151, (uint64_t *)&unk_1010F49D0);
  sub_100005CF0((uint64_t)v153, (uint64_t)&v154, (uint64_t *)&unk_1010F49D0);
  v35 = sub_100293A64((uint64_t)&v154);
  if ((_DWORD)v35 == 1)
  {
    v36 = static os_log_type_t.error.getter(v35);
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v32, "#Durian: Session has critical ack info missing.", 47, 2, _swiftEmptyArrayStorage);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    v38 = swift_allocObject(v37, 64, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v38 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v38 + 40) = v39;
    *(_QWORD *)(v38 + 48) = 0xD000000000000043;
    *(_QWORD *)(v38 + 56) = 0x8000000100ECD750;
    v40 = sub_1006B8DC4(v38);
    type metadata accessor for SPPairingSessionError(0);
    v42 = v41;
    *(_QWORD *)&v164[0] = 6;
    sub_10047B41C(v40);
    v44 = v43;
    swift_bridgeObjectRelease();
    v45 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v164, v44, v42, v45);
    v46 = (void *)aBlock;
    sub_100BB614C((void *)aBlock, 1, (uint64_t)v153, v126, v127);

    swift_release();
LABEL_11:
    swift_release();
    return;
  }
  v164[6] = v160;
  v164[7] = v161;
  v164[8] = v162;
  v164[2] = v156;
  v164[3] = v157;
  v164[4] = v158;
  v164[5] = v159;
  v164[0] = v154;
  v164[1] = v155;
  v147 = v160;
  v148 = v161;
  v149 = v162;
  v143 = v156;
  v144 = v157;
  v145 = v158;
  v146 = v159;
  v165 = v163;
  v150 = v163;
  v141 = v154;
  v142 = v155;
  type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1010F49E8, v33);
  swift_release();
  v67 = objc_msgSend(v34, "keyGenerationStatus");
  v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v70 = v69;

  aBlock = v68;
  aBlock_8 = v70;
  v71 = sub_100035530();
  v72 = DataProtocol.intValue.getter(&type metadata for Data, v71);
  v73 = sub_10001BC14(v68, v70);
  if (v72)
  {
    v74 = static os_log_type_t.error.getter(v73);
    v75 = qword_1011B7D88;
    v76 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v77 = swift_allocObject(v76, 72, 7);
    v125 = xmmword_100E22B00;
    *(_OWORD *)(v77 + 16) = xmmword_100E22B00;
    v78 = objc_msgSend(v34, "keyGenerationStatus");
    v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v78);
    v81 = v80;

    v82 = Data.hexString.getter(v79, v81);
    v84 = v83;
    sub_10001BC14(v79, v81);
    *(_QWORD *)(v77 + 56) = &type metadata for String;
    *(_QWORD *)(v77 + 64) = sub_10001AA00();
    *(_QWORD *)(v77 + 32) = v82;
    *(_QWORD *)(v77 + 40) = v84;
    os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v75, "#Durian: Key generation did not succeed on remote device. Status - %@", 69, 2, v77);
    swift_bridgeObjectRelease();
    v85 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    v86 = swift_allocObject(v85, 64, 7);
    *(_OWORD *)(v86 + 16) = v125;
    *(_QWORD *)(v86 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v86 + 40) = v87;
    *(_QWORD *)(v86 + 48) = 0xD000000000000050;
    *(_QWORD *)(v86 + 56) = 0x8000000100ECD7F0;
    v88 = sub_1006B8DC4(v86);
    type metadata accessor for SPPairingSessionError(0);
    v90 = v89;
    aBlock = 3;
  }
  else
  {
    if (*(_QWORD *)(v29 + 24))
    {
      swift_retain();
      v95 = objc_msgSend(v34, "collaborativeKeyC3");
      if (v95)
      {
        v96 = v95;
        static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
        v98 = v97;

        CCCKGGetOpeningSize(224, 10);
        v99 = (char *)&loc_10026A8EC + dword_10026B31C[v98 >> 62];
        *(_QWORD *)&v125 = v98;
        __asm { BR              X10 }
      }
      v105 = static os_log_type_t.error.getter(0);
      os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, qword_1011B7D88, "#Durian: Commitment is not available to verify pairing info", 59, 2, _swiftEmptyArrayStorage);
      v106 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
      v107 = swift_allocObject(v106, 64, 7);
      *(_OWORD *)(v107 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v107 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v107 + 40) = v108;
      *(_QWORD *)(v107 + 48) = 0xD000000000000050;
      *(_QWORD *)(v107 + 56) = 0x8000000100ECD920;
      v109 = sub_1006B8DC4(v107);
      type metadata accessor for SPPairingSessionError(0);
      v111 = v110;
      aBlock = 6;
      sub_10047B41C(v109);
      v113 = v112;
      swift_bridgeObjectRelease();
      v114 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v129, &aBlock, v113, v111, v114);
      v94 = (void *)v129[0];
      v136 = v147;
      v137 = v148;
      v138 = v149;
      v139 = v150;
      v132 = v143;
      v133 = v144;
      v134 = v145;
      v135 = v146;
      v130 = v141;
      v131 = v142;
      SharingCircleWildAdvertisementKey.init(key:)(&v130);
      sub_100005CF0((uint64_t)&v130, (uint64_t)&aBlock, (uint64_t *)&unk_1010F49D0);
      sub_100005CF0((uint64_t)v151, (uint64_t)v140, (uint64_t *)&unk_1010F49D0);
      sub_100293AD8(v140);
      sub_100BB614C(v94, 1, (uint64_t)&aBlock, v126, v127);
      swift_release();
      sub_100293BA8((uint64_t)v153);
      swift_release();
      goto LABEL_15;
    }
    v100 = static os_log_type_t.error.getter(v73);
    os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, qword_1011B7D88, "#Durian: Owner context is missing in wrapper. Cannot proceed.", 61, 2, _swiftEmptyArrayStorage);
    v101 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    v102 = swift_allocObject(v101, 64, 7);
    *(_OWORD *)(v102 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v102 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v102 + 40) = v103;
    *(_QWORD *)(v102 + 48) = 0xD00000000000004ELL;
    *(_QWORD *)(v102 + 56) = 0x8000000100ECD890;
    v88 = sub_1006B8DC4(v102);
    type metadata accessor for SPPairingSessionError(0);
    v90 = v104;
    aBlock = 7;
  }
  sub_10047B41C(v88);
  v92 = v91;
  swift_bridgeObjectRelease();
  v93 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v129, &aBlock, v92, v90, v93);
  v94 = (void *)v129[0];
  v136 = v147;
  v137 = v148;
  v138 = v149;
  v139 = v150;
  v132 = v143;
  v133 = v144;
  v134 = v145;
  v135 = v146;
  v130 = v141;
  v131 = v142;
  SharingCircleWildAdvertisementKey.init(key:)(&v130);
  sub_100005CF0((uint64_t)&v130, (uint64_t)&aBlock, (uint64_t *)&unk_1010F49D0);
  sub_100005CF0((uint64_t)v151, (uint64_t)v140, (uint64_t *)&unk_1010F49D0);
  sub_100293AD8(v140);
  sub_100BB614C(v94, 1, (uint64_t)&aBlock, v126, v127);
  swift_release();
  sub_100293BA8((uint64_t)v153);
LABEL_15:
  swift_release();
  sub_100293BA8((uint64_t)v153);

}

void sub_10026B32C(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  type metadata accessor for SPPairingSessionError(0);
  v6 = v5;
  v11 = 6;
  sub_10047B41C(a3);
  v8 = v7;
  v9 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v8, v6, v9);
  v10 = v12;
  a1(v12, 1);

}

uint64_t sub_10026B3D8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  id v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  id v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  _QWORD v110[19];
  _BYTE v111[160];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + 152);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_63:
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    goto LABEL_15;
  }
  v14 = objc_msgSend(a1, "ecid");
  if (v14)
  {
    v15 = v14;
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    v19 = objc_msgSend(a1, "chipId");
    if (v19)
    {
      v20 = v19;
      v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v23 = v22;

      v24 = objc_msgSend(a1, "serialNumber");
      if (v24)
      {
        v25 = v24;
        v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

        v28 = objc_msgSend(a1, "systemVersion");
        if (v28)
        {
          v29 = v28;
          v109 = (id)v16;
          v30 = v18;
          v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v32 = v31;

          v33 = objc_msgSend(a1, "confirmSignature");
          if (!v33)
          {
            swift_bridgeObjectRelease();
            v55 = swift_bridgeObjectRelease();
            v56 = static os_log_type_t.error.getter(v55);
            if (qword_1010EA2A8 != -1)
              swift_once(&qword_1010EA2A8, sub_100B5DDB4);
            os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, qword_1011B7D88, "#Durian: signature(S4) is not available.", 40, 2, _swiftEmptyArrayStorage);
            sub_10001BC14(v21, v23);
            v52 = (uint64_t)v109;
            v53 = v30;
            goto LABEL_27;
          }
          v34 = v33;
          v104 = v32;
          v105 = v27;
          v106 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
          v36 = v35;

          if (*(_BYTE *)(a2 + 65) == 1)
          {
            v100 = v23;
            v18 = v30;
            if (qword_1010E9AE0 != -1)
              swift_once(&qword_1010E9AE0, sub_100265974);
            v98 = v36;
            v99 = v21;
            v37 = type metadata accessor for Logger(0);
            v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B6C50);
            v39 = Logger.logObject.getter(v38);
            v40 = static os_log_type_t.default.getter(v39);
            v41 = os_log_type_enabled(v39, v40);
            v42 = (uint64_t)v109;
            if (v41)
            {
              v43 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v43 = 0;
              _os_log_impl((void *)&_mh_execute_header, v39, v40, "AlphaWasp: bypassing missing server seed and BAA certs if needed", v43, 2u);
              swift_slowDealloc(v43, -1, -1);
            }

            v44 = objc_msgSend(a1, "serverSeed");
            if (v44)
            {
              v45 = v44;
              v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v44);
              v102 = v47;
              v103 = v46;

            }
            else
            {
              v102 = 0xC000000000000000;
              v103 = 0;
            }
            v64 = sub_10001A9A8(&qword_1010F4A30);
            v65 = swift_allocObject(v64, 64, 7);
            *(_OWORD *)(v65 + 16) = xmmword_100E22B10;
            v66 = *(_QWORD *)(a2 + 32);
            v67 = *(_QWORD *)(a2 + 40);
            if (v67 >> 60 == 15)
              v68 = 0;
            else
              v68 = *(_QWORD *)(a2 + 32);
            if (v67 >> 60 == 15)
              v69 = 0xC000000000000000;
            else
              v69 = *(_QWORD *)(a2 + 40);
            *(_QWORD *)(v65 + 32) = v68;
            *(_QWORD *)(v65 + 40) = v69;
            v70 = *(_QWORD *)(a2 + 48);
            v71 = *(_QWORD *)(a2 + 56);
            if (v71 >> 60 == 15)
              v72 = 0;
            else
              v72 = *(_QWORD *)(a2 + 48);
            if (v71 >> 60 == 15)
              v73 = 0xC000000000000000;
            else
              v73 = *(_QWORD *)(a2 + 56);
            *(_QWORD *)(v65 + 48) = v72;
            *(_QWORD *)(v65 + 56) = v73;
            sub_10001BD08(v66, v67);
            v74 = v70;
            v75 = v71;
            goto LABEL_52;
          }
          v57 = objc_msgSend(a1, "serverSeed");
          v18 = v30;
          if (v57)
          {
            v58 = v57;
            v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
            v102 = v60;
            v103 = v59;

            v61 = *(_QWORD *)(a2 + 40);
            v42 = (uint64_t)v109;
            if (v61 >> 60 == 15)
            {
              swift_bridgeObjectRelease();
              v62 = swift_bridgeObjectRelease();
              v63 = static os_log_type_t.error.getter(v62);
              if (qword_1010EA2A8 != -1)
                swift_once(&qword_1010EA2A8, sub_100B5DDB4);
              os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, qword_1011B7D88, "#Durian: baaLeafCert is not available.", 38, 2, _swiftEmptyArrayStorage);
              sub_10001BC14(v106, v36);
              sub_10001BC14(v21, v23);
              sub_10001BC14(v42, v18);
            }
            else
            {
              v86 = *(_QWORD *)(a2 + 32);
              v87 = *(_QWORD *)(a2 + 56);
              if (v87 >> 60 != 15)
              {
                v98 = v36;
                v99 = v21;
                v100 = v23;
                v92 = *(_QWORD *)(a2 + 48);
                v93 = v86;
                v94 = v61;
                v95 = v87;
                v96 = sub_10001A9A8(&qword_1010F4A30);
                v65 = swift_allocObject(v96, 64, 7);
                *(_OWORD *)(v65 + 16) = xmmword_100E22B10;
                *(_QWORD *)(v65 + 32) = v93;
                *(_QWORD *)(v65 + 40) = v94;
                *(_QWORD *)(v65 + 48) = v92;
                *(_QWORD *)(v65 + 56) = v95;
                sub_10001BD08(v93, v94);
                v74 = v92;
                v75 = v95;
LABEL_52:
                sub_10001BD08(v74, v75);
                v109 = objc_msgSend(a1, "productId");
                v101 = objc_msgSend(a1, "vendorId");
                v76 = objc_msgSend(a1, "nonce");
                v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v76);
                v79 = v78;

                v80 = objc_msgSend(a1, "keyGenerationStatus");
                v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v80);
                v83 = v82;

                v110[0] = v42;
                v110[1] = v18;
                v110[2] = v99;
                v110[3] = v100;
                v110[4] = v108;
                v110[5] = v105;
                v110[6] = v109;
                v110[7] = v101;
                v110[8] = v107;
                v110[9] = v104;
                v110[10] = v106;
                v110[11] = v98;
                v110[12] = v77;
                v110[13] = v79;
                v110[14] = v103;
                v110[15] = v102;
                v110[16] = v81;
                v110[17] = v83;
                v110[18] = v65;
                SharingCircleWildAdvertisementKey.init(key:)(v110);
                goto LABEL_29;
              }
              v88 = *(_QWORD *)(a2 + 32);
              v89 = v61;
              sub_10001BBBC(v86, v61);
              swift_bridgeObjectRelease();
              v90 = swift_bridgeObjectRelease();
              v91 = static os_log_type_t.error.getter(v90);
              if (qword_1010EA2A8 != -1)
                swift_once(&qword_1010EA2A8, sub_100B5DDB4);
              os_log(_:dso:log:_:_:)(v91, &_mh_execute_header, qword_1011B7D88, "#Durian: baaIntermediateCert is not available.", 46, 2, _swiftEmptyArrayStorage);
              sub_10001BC14(v106, v36);
              sub_10001BC14(v21, v23);
              sub_10001BC14(v42, v18);
              sub_10001EF3C(v88, v89);
            }
            v53 = v102;
            v52 = v103;
            goto LABEL_27;
          }
          swift_bridgeObjectRelease();
          v84 = swift_bridgeObjectRelease();
          v85 = static os_log_type_t.error.getter(v84);
          v16 = (uint64_t)v109;
          if (qword_1010EA2A8 != -1)
            swift_once(&qword_1010EA2A8, sub_100B5DDB4);
          os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, qword_1011B7D88, "#Durian: serverSeed is not available.", 37, 2, _swiftEmptyArrayStorage);
          sub_10001BC14(v106, v36);
        }
        else
        {
          v50 = swift_bridgeObjectRelease();
          v51 = static os_log_type_t.error.getter(v50);
          if (qword_1010EA2A8 != -1)
            swift_once(&qword_1010EA2A8, sub_100B5DDB4);
          os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, qword_1011B7D88, "#Durian: systemVersion is not available.", 40, 2, _swiftEmptyArrayStorage);
        }
      }
      else
      {
        v49 = static os_log_type_t.error.getter(0);
        if (qword_1010EA2A8 != -1)
          swift_once(&qword_1010EA2A8, sub_100B5DDB4);
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D88, "#Durian: serialNumber is not available.", 39, 2, _swiftEmptyArrayStorage);
      }
      sub_10001BC14(v21, v23);
    }
    else
    {
      v48 = static os_log_type_t.error.getter(0);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, qword_1011B7D88, "#Durian: chipId is not available.", 33, 2, _swiftEmptyArrayStorage);
    }
    v52 = v16;
    v53 = v18;
LABEL_27:
    sub_10001BC14(v52, v53);
    goto LABEL_28;
  }
  v13 = static os_log_type_t.error.getter(0);
  if (qword_1010EA2A8 != -1)
    goto LABEL_63;
LABEL_15:
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D88, "#Durian: ecid is not available.", 31, 2, _swiftEmptyArrayStorage);
LABEL_28:
  sub_10029454C((uint64_t)v110);
LABEL_29:
  sub_100005CF0((uint64_t)v110, (uint64_t)v111, (uint64_t *)&unk_1010F49D0);
  return sub_100005CF0((uint64_t)v111, a3, (uint64_t *)&unk_1010F49D0);
}

uint64_t sub_10026BCE4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_10026BCFC, a1, 0);
}

uint64_t sub_10026BCFC()
{
  uint64_t v0;

  sub_100CD7AB8();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10026BD2C(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  NSObject *v76;
  id v77;
  uint64_t v78;
  void *v79;
  int v80;
  id v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _QWORD v96[3];
  _QWORD v97[3];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[19];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v90 = a8;
  v92 = a6;
  v93 = a7;
  v95 = a4;
  v11 = a5[7];
  v115 = a5[6];
  v116 = v11;
  v117 = a5[8];
  v118 = *((_QWORD *)a5 + 18);
  v12 = a5[3];
  v111 = a5[2];
  v112 = v12;
  v13 = a5[5];
  v113 = a5[4];
  v114 = v13;
  v14 = a5[1];
  v109 = *a5;
  v110 = v14;
  v88 = type metadata accessor for PairingConfig(0);
  __chkstk_darwin(v88);
  v89 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OwnedBeaconRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v91 = (uint64_t)&v82 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v24 = qword_1011B7D88;
  v25 = os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1011B7D88, "#Durian: All checks passed. Trying to create the record.", 56, 2, _swiftEmptyArrayStorage);
  v26 = static os_signpost_type_t.begin.getter(v25);
  v94 = a1;
  v27 = a1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
  os_signpost(_:dso:log:name:signpostID:)(v26, &_mh_execute_header, v24, "pairingRecordCreate", 19, 2, v27);
  v28 = *(_QWORD *)(a2 + 280);
  sub_1007F0B38(a3, v95, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F47C0);
    type metadata accessor for SPPairingSessionError(0);
    v30 = v29;
    v108[0] = 6;
    v31 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v97, v108, v31, v30, v32);
    v33 = (void *)v97[0];
    v104 = v115;
    v105 = v116;
    v106 = v117;
    v107 = v118;
    v100 = v111;
    v101 = v112;
    v102 = v113;
    v103 = v114;
    v98 = v109;
    v99 = v110;
    SharingCircleWildAdvertisementKey.init(key:)(&v98);
    sub_100005CF0((uint64_t)&v98, (uint64_t)v108, (uint64_t *)&unk_1010F49D0);
    sub_100BB614C(v33, 1, (uint64_t)v108, v92, v93);

  }
  else
  {
    v87 = a2;
    v34 = v91;
    sub_1000126EC((uint64_t)v18, v91, type metadata accessor for OwnedBeaconRecord);
    v35 = dispatch_group_create();
    v36 = swift_allocObject(&unk_101063D08, 17, 7);
    *(_BYTE *)(v36 + 16) = 0;
    v37 = (_BYTE *)(v36 + 16);
    dispatch_group_enter(v35);
    v39 = static os_signpost_type_t.begin.getter(v38);
    v40 = v27;
    v41 = v36;
    os_signpost(_:dso:log:name:signpostID:)(v39, &_mh_execute_header, v24, "nfcSubscription", 15, 2, v40);
    v42 = v94;
    swift_retain();
    v43 = v35;
    swift_retain();
    sub_100152638(v34, v28, v42, v43, v41, v90);
    OS_dispatch_group.wait()();
    swift_beginAccess(v37, v97, 0, 0);
    if (*v37 == 1)
    {
      v85 = v43;
      v45 = static os_log_type_t.default.getter(v44);
      os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v24, "#Durian: NFC info subscription passed. Proceed to saving new record to CK.", 74, 2, _swiftEmptyArrayStorage);
      v46 = dispatch_group_create();
      dispatch_group_enter(v46);
      v47 = swift_allocObject(&unk_101064190, 25, 7);
      type metadata accessor for SPPairingSessionError(0);
      v49 = v48;
      *(_QWORD *)&v98 = 1;
      v50 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v51 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v108, &v98, v50, v49, v51);
      *(_QWORD *)(v47 + 16) = v108[0];
      *(_BYTE *)(v47 + 24) = 1;
      v52 = v95;
      v53 = objc_msgSend(v95, "name");
      v84 = v47 + 16;
      if (v53)
      {
        v54 = v53;
        v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
        v82 = v56;
        v83 = v55;

      }
      else
      {
        v82 = 0xE000000000000000;
        v83 = 0;
      }
      v86 = v41;
      v63 = objc_msgSend(v52, "roleId", v82, v83);
      v64 = objc_msgSend(v52, "roleEmoji");
      if (v64)
      {
        v65 = v64;
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        v68 = v67;

      }
      else
      {
        v66 = 0;
        v68 = 0;
      }
      v69 = (uint64_t *)v89;
      v70 = &v89[*(int *)(v88 + 28)];
      v71 = type metadata accessor for AccessoryProductInfo(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v70, 1, 1, v71);
      v72 = v82;
      *v69 = v83;
      v69[1] = v72;
      v69[2] = (uint64_t)v63;
      v69[3] = v66;
      v69[4] = v68;
      v73 = swift_allocObject(&unk_1010637E0, 24, 7);
      swift_weakInit(v73 + 16, v87);
      v74 = (_QWORD *)swift_allocObject(&unk_1010641B8, 64, 7);
      v74[2] = v46;
      v75 = v95;
      v74[3] = v94;
      v74[4] = v47;
      v74[5] = v73;
      v74[6] = v75;
      v74[7] = v90;
      swift_retain();
      v76 = v46;
      swift_retain();
      swift_retain();
      v77 = v75;
      v78 = v91;
      sub_1007F1214(v91, v69, (uint64_t)sub_100293DF4, (uint64_t)v74);
      swift_release();
      swift_release();
      OS_dispatch_group.wait()();
      swift_beginAccess(v84, v96, 0, 0);
      v79 = *(void **)(v47 + 16);
      v80 = *(unsigned __int8 *)(v47 + 24);
      v104 = v115;
      v105 = v116;
      v106 = v117;
      v107 = v118;
      v100 = v111;
      v101 = v112;
      v102 = v113;
      v103 = v114;
      v98 = v109;
      v99 = v110;
      SharingCircleWildAdvertisementKey.init(key:)(&v98);
      sub_100005CF0((uint64_t)&v98, (uint64_t)v108, (uint64_t *)&unk_1010F49D0);
      v81 = v79;
      sub_100BB614C(v79, v80, (uint64_t)v108, v92, v93);

      sub_1000126B0((uint64_t)v69, type metadata accessor for PairingConfig);
      sub_1000126B0(v78, type metadata accessor for OwnedBeaconRecord);
      swift_release();
    }
    else
    {
      v57 = static os_log_type_t.error.getter(v44);
      os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v24, "#Durian: NFC info subscription failed. Abort saving new record to CK.", 69, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0);
      v59 = v58;
      v108[0] = 19;
      v60 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v61 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v96, v108, v60, v59, v61);
      v62 = (void *)v96[0];
      v104 = v115;
      v105 = v116;
      v106 = v117;
      v107 = v118;
      v100 = v111;
      v101 = v112;
      v102 = v113;
      v103 = v114;
      v98 = v109;
      v99 = v110;
      SharingCircleWildAdvertisementKey.init(key:)(&v98);
      sub_100005CF0((uint64_t)&v98, (uint64_t)v108, (uint64_t *)&unk_1010F49D0);
      sub_100BB614C(v62, 1, (uint64_t)v108, v92, v93);

      sub_1000126B0(v34, type metadata accessor for OwnedBeaconRecord);
    }
    swift_release();
  }
}

void sub_10026C520(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v9[24];

  v8 = static os_signpost_type_t.end.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_signpost(_:dso:log:name:signpostID:)(v8, &_mh_execute_header, qword_1011B7D88, "nfcSubscription", 15, 2, a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
  swift_beginAccess(a4 + 16, v9, 1, 0);
  *(_BYTE *)(a4 + 16) = a1 == 0;
  dispatch_group_leave(a3);
}

void sub_10026C5F4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t Strong;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  Class isa;
  id v68;
  id *v69;
  id v70;
  id v71;
  int *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123[24];
  char v124[24];
  char v125[24];
  _QWORD v126[3];
  _QWORD v127[4];

  v111 = a7;
  v114 = a3;
  v109 = type metadata accessor for BeaconEstimatedLocation(0);
  v106 = *(_QWORD *)(v109 - 8);
  v11 = __chkstk_darwin(v109);
  v107 = v12;
  v108 = (uint64_t)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (_OWORD *)((char *)&v104 - v13);
  v110 = type metadata accessor for OwnedBeaconRecord(0);
  v112 = *(_QWORD *)(v110 - 8);
  v15 = *(_QWORD *)(v112 + 64);
  v16 = __chkstk_darwin(v110);
  *(_QWORD *)&v118 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v116 = (uint64_t)&v104 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117 = a5;
  v115 = a5 + 16;
  v22 = static os_signpost_type_t.end.getter(v19);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v23 = qword_1011B7D88;
  v113 = a4;
  os_signpost(_:dso:log:name:signpostID:)(v22, &_mh_execute_header, qword_1011B7D88, "pairingRecordCreate", 19, 2, a4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);
  sub_10000F9B8(a1, (uint64_t)v21, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v25 = *v21;
    v26 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 72, 7);
    v118 = xmmword_100E22B00;
    *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
    v127[0] = v25;
    swift_errorRetain(v25);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v30 = String.init<A>(describing:)(v127, v29);
    v32 = v31;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_10001AA00();
    *(_QWORD *)(v28 + 32) = v30;
    *(_QWORD *)(v28 + 40) = v32;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v23, "#Durian: Failure during finishing pairing - %@", 46, 2, v28);
    swift_bridgeObjectRelease();
    v33 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v33, &v119);
    *(_OWORD *)(inited + 16) = v118;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v35;
    *(_QWORD *)(inited + 48) = 0xD000000000000032;
    *(_QWORD *)(inited + 56) = 0x8000000100ECDD50;
    v36 = sub_1006B8DC4(inited);
    type metadata accessor for SPPairingSessionError(0);
    v38 = v37;
    v127[0] = 11;
    sub_10047B41C(v36);
    v40 = v39;
    swift_bridgeObjectRelease();
    v41 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v126, v127, v40, v38, v41);
    swift_errorRelease(v25);
    v42 = v126[0];
    swift_beginAccess(v115, v127, 1, 0);
    v43 = v117;
    v44 = *(void **)(v117 + 16);
    *(_QWORD *)(v117 + 16) = v42;
    *(_BYTE *)(v43 + 24) = 1;

    v45 = v114;
LABEL_24:
    dispatch_group_leave(v45);
    return;
  }
  v105 = v15;
  v46 = a6 + 16;
  v47 = v116;
  v48 = sub_1000126EC((uint64_t)v21, v116, type metadata accessor for OwnedBeaconRecord);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
  v52 = v118;
  sub_10005972C(v47, v118, type metadata accessor for OwnedBeaconRecord);
  v53 = v110;
  v54 = String.init<A>(describing:)(v52, v110);
  v56 = v55;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = sub_10001AA00();
  *(_QWORD *)(v51 + 32) = v54;
  *(_QWORD *)(v51 + 40) = v56;
  v57 = v47;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v23, "#Durian: The beacon record has been created. Record UUID - %@", 61, 2, v51);
  swift_bridgeObjectRelease();
  swift_beginAccess(v46, v127, 0, 0);
  if (swift_weakLoadStrong(v46))
  {
    swift_retain();
    swift_release();
    sub_1007BEC2C(v47);
    swift_release();
  }
  swift_beginAccess(v46, v126, 0, 0);
  Strong = swift_weakLoadStrong(v46);
  v59 = v113;
  if (!Strong)
  {
LABEL_10:
    swift_beginAccess(v46, v125, 0, 0);
    v61 = swift_weakLoadStrong(v46);
    if (v61)
    {
      v62 = *(_QWORD *)(v61 + 280);
      swift_retain_n(v62, 2);
      swift_release();
      v63 = sub_1002835F0(v57, v62);
      v104 = v62;
      swift_release();
      type metadata accessor for Transaction(0);
      v64 = swift_allocObject(&unk_1010641E0, 32, 7);
      *(_QWORD *)(v64 + 16) = v59;
      *(_QWORD *)(v64 + 24) = v63;
      swift_retain();
      v65 = v63;
      static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1010F4A08, v64);

      v59 = v113;
      swift_release();
    }
    else
    {
      v104 = 0;
    }
    v66 = v57 + *(int *)(v53 + 20);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v68 = v111;
    objc_msgSend(v111, "updateBeaconId:", isa);

    v69 = (id *)(*(_QWORD *)(v59 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor)
               + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess(v69, v124, 0, 0);
    if (*v69)
    {
      v70 = *v69;
      v71 = objc_msgSend(v68, "updatePairingLocation:", v70);
      v72 = (int *)v109;
      UUID.init()(v71);
      v73 = (char *)v14 + v72[6];
      v74 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 16))(v73, v66, v74);
      objc_msgSend(v70, "coordinate");
      v76 = v75;
      objc_msgSend(v70, "coordinate");
      v78 = v77;
      objc_msgSend(v70, "horizontalAccuracy");
      v80 = v79;
      v81 = objc_msgSend(v70, "timestamp");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v81);

      v82 = (char *)v14 + v72[12];
      v83 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 1, 1, v83);
      *v14 = xmmword_100E22FC0;
      *(_QWORD *)((char *)v14 + v72[7]) = v76;
      *(_QWORD *)((char *)v14 + v72[8]) = v78;
      *(_QWORD *)((char *)v14 + v72[9]) = v80;
      *((_BYTE *)v14 + v72[11]) = 1;
      *(_QWORD *)((char *)v14 + v72[13]) = 0;
      swift_beginAccess(v46, &v120, 0, 0);
      if (swift_weakLoadStrong(v46))
      {
        swift_retain();
        swift_release();
        v84 = v108;
        sub_10005972C((uint64_t)v14, v108, type metadata accessor for BeaconEstimatedLocation);
        v85 = v118;
        sub_10005972C(v57, v118, type metadata accessor for OwnedBeaconRecord);
        v86 = *(unsigned __int8 *)(v106 + 80);
        v87 = (v86 + 16) & ~v86;
        v88 = *(unsigned __int8 *)(v112 + 80);
        v89 = (v107 + v88 + v87) & ~v88;
        v90 = swift_allocObject(&unk_101064230, v89 + v105, v86 | v88 | 7);
        sub_1000126EC(v84, v90 + v87, type metadata accessor for BeaconEstimatedLocation);
        v68 = v111;
        sub_1000126EC(v85, v90 + v89, type metadata accessor for OwnedBeaconRecord);
        sub_100801BA0((uint64_t)v14, (uint64_t)sub_1002944E0, v90);
        swift_release();
        swift_release();
      }

      sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconEstimatedLocation);
    }
    swift_beginAccess(v115, v123, 1, 0);
    v91 = v117;
    v92 = *(void **)(v117 + 16);
    *(_QWORD *)(v117 + 16) = v68;
    *(_BYTE *)(v91 + 24) = 0;

    swift_beginAccess(v46, &v122, 0, 0);
    v93 = swift_weakLoadStrong(v46);
    if (v93)
    {
      v94 = *(_QWORD *)(v93 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
      v95 = v68;
      swift_retain();
      swift_release();
    }
    else
    {
      v96 = v68;
      v94 = 0;
    }
    v45 = v114;
    swift_beginAccess(v46, &v121, 0, 0);
    v97 = swift_weakLoadStrong(v46);
    if (v97)
    {
      v98 = *(_QWORD *)(v97 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateScheduler);
      swift_retain();
      swift_release();
    }
    else
    {
      v98 = 0;
    }
    type metadata accessor for Transaction(0);
    v99 = v116;
    v100 = v118;
    sub_10005972C(v116, v118, type metadata accessor for OwnedBeaconRecord);
    v101 = *(unsigned __int8 *)(v112 + 80);
    v102 = (v101 + 32) & ~v101;
    v103 = swift_allocObject(&unk_101064208, v102 + v105, v101 | 7);
    *(_QWORD *)(v103 + 16) = v94;
    *(_QWORD *)(v103 + 24) = v98;
    sub_1000126EC(v100, v103 + v102, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("com.apple.icloud.searchpartyd.BeaconManagerService.firmware-update-after-pairing", 80, 2, &unk_1010F4A18, v103);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1000126B0(v99, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_24;
  }
  v60 = *(_QWORD *)(Strong + 40);
  swift_retain();
  swift_release();
  if (v60)
  {
    sub_10037BD14(v47);
    swift_release();
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_10026D018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_10026D030, 0, 0);
}

uint64_t sub_10026D030()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(_QWORD *)(v0 + 32) = v1;
  return swift_task_switch(sub_10026D058, v1, 0);
}

uint64_t sub_10026D058()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101064258, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain(v1);
  v4 = v2;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4A28, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026D0EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1010F4A20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v8 = qword_1011B7D88;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 152, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E221E0;
    type metadata accessor for BeaconEstimatedLocation(0);
    v11 = type metadata accessor for Date(0);
    v12 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v15 = v14;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    v16 = sub_10001AA00();
    *(_QWORD *)(v10 + 64) = v16;
    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    type metadata accessor for OwnedBeaconRecord(0);
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
    *(_QWORD *)(v10 + 72) = v19;
    *(_QWORD *)(v10 + 80) = v20;
    v40 = v6;
    swift_errorRetain(v6);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v22 = String.init<A>(describing:)(&v40, v21);
    *(_QWORD *)(v10 + 136) = &type metadata for String;
    *(_QWORD *)(v10 + 144) = v16;
    *(_QWORD *)(v10 + 112) = v22;
    *(_QWORD *)(v10 + 120) = v23;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Saving BeaconEstimatedLocation %@ for CL %@ error: %@", 53, 2, v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }
  else
  {
    v25 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v26 = qword_1011B7D88;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 112, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E22B10;
    type metadata accessor for BeaconEstimatedLocation(0);
    v29 = type metadata accessor for Date(0);
    v30 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v33 = v32;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v34 = sub_10001AA00();
    *(_QWORD *)(v28 + 64) = v34;
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    type metadata accessor for OwnedBeaconRecord(0);
    v35 = type metadata accessor for UUID(0);
    v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    *(_QWORD *)(v28 + 72) = v37;
    *(_QWORD *)(v28 + 80) = v38;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Saved BeaconEstimatedLocation %@ from CL for beacon %@", 54, 2, v28);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v4, &qword_1010F4A20);
  }
}

uint64_t sub_10026D470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10026D4D4, 0, 0);
}

uint64_t sub_10026D4D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(v0 + 16) && *(_QWORD *)(v0 + 24))
  {
    swift_retain();
    v1 = swift_retain();
    v2 = static os_log_type_t.default.getter(v1);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v4 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = qword_1011B7DE0;
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    v10 = type metadata accessor for OwnedBeaconRecord(0);
    v11 = v5 + *(int *)(v10 + 20);
    v12 = UUID.uuidString.getter(v10);
    v14 = v13;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10001AA00();
    *(_QWORD *)(v9 + 32) = v12;
    *(_QWORD *)(v9 + 40) = v14;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v7, "Initiating firmware update check after beacon creation: %@", 58, 2, v9);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v11, v6);
    return swift_task_switch(sub_10026D650, *(_QWORD *)(v0 + 16), 0);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10026D650()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  sub_10014CC14(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_10026D6B0, 0, 0);
}

uint64_t sub_10026D6B0(uint64_t a1)
{
  uint64_t v1;

  sub_1001385F8(a1);
  swift_release();
  swift_release();
  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10026D6F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  _QWORD v7[6];

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D28, "Destroy pending creatingLocalBeaconFuture", 41, 2, _swiftEmptyArrayStorage);
  v3 = *(NSObject **)(v1 + 80);
  v4 = swift_allocObject(&unk_101064000, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_100293A0C;
  *(_QWORD *)(v4 + 24) = v1;
  v7[4] = sub_10001D850;
  v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10001D8B8;
  v7[3] = &unk_101064018;
  v5 = _Block_copy(v7);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 152, 633, 43, 1);
  swift_release();
  result = swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10026D860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD aBlock[6];
  _QWORD *v51;

  v48 = a2;
  v49 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = __chkstk_darwin(v13);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
  {
    v20 = swift_retain();
    v21 = static os_log_type_t.default.getter(v20);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    result = os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D28, "Returning existing creatingLocalBeaconFuture", 44, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v39 = v16;
    v40 = v14;
    v41 = v15;
    v42 = v12;
    v43 = v10;
    v44 = v9;
    v45 = v8;
    v46 = v6;
    v38 = v5;
    v47 = v3;
    v23 = sub_10001A9A8(&qword_1010F4B00);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    v19 = Future.init()();
    v24 = static os_log_type_t.default.getter(v19);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D28, "Created new creatingLocalBeaconFuture", 37, 2, _swiftEmptyArrayStorage);
    v25 = v41;
    *(_QWORD *)(v41 + 88) = v19;
    swift_retain();
    swift_release();
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v27 = v39;
    v26 = v40;
    (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v18, enum case for DispatchQoS.QoSClass.default(_:), v40);
    v28 = (void *)static OS_dispatch_queue.global(qos:)(v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v26);
    v29 = (_QWORD *)swift_allocObject(&unk_101064820, 40, 7);
    v29[2] = v25;
    v29[3] = v19;
    v29[4] = v48;
    aBlock[4] = sub_100297148;
    aBlock[5] = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101064838;
    v30 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v31 = swift_retain();
    v32 = v42;
    static DispatchQoS.unspecified.getter(v31);
    v51 = _swiftEmptyArrayStorage;
    v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v36 = v45;
    v37 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v34, v35, v38, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v32, v36, v30);
    _Block_release(v30);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
    result = swift_release();
  }
  *v49 = v19;
  return result;
}

uint64_t sub_10026DC3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 280);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100864864(v6, a1, a2, a3);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10026DCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10028D338(a2, a3, a4);
}

uint64_t sub_10026DCB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10026D6F8(v1);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  Future.finish(result:)(v3);
  return sub_100004048((uint64_t)v3, (uint64_t *)&unk_1010F47C0);
}

uint64_t sub_10026DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[6];

  v36 = a3;
  v37 = a4;
  v35 = a2;
  v33 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
  v34 = static OS_dispatch_queue.global(qos:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_10000F9B8(v33, (uint64_t)v13, (uint64_t *)&unk_101108050);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_1010648E8, v22 + 8, v18 | 7);
  sub_100005CF0((uint64_t)v13, v23 + v19, (uint64_t *)&unk_101108050);
  v24 = v36;
  *(_QWORD *)(v23 + v20) = v35;
  *(_QWORD *)(v23 + v21) = v24;
  *(_QWORD *)(v23 + v22) = v37;
  aBlock[4] = sub_1002974A4;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101064900;
  v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v41 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v4, v27);
  v30 = (void *)v34;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  return swift_release();
}

uint64_t sub_10026E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v14 = *v12;
    v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v16 = qword_1011B7D88;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v28 = v14;
    swift_errorRetain(v14);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v28, v19);
    v22 = v21;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Could not create local pairing record: %@", 41, 2, v18, v27);
    v23 = swift_bridgeObjectRelease();
    sub_10026D6F8(v23);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    Future.finish(result:)(v5);
    swift_errorRelease(v14);
    return sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47C0);
  }
  else
  {
    v25 = sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    v26 = static os_log_type_t.default.getter(v25);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D88, "Self beaconing completed successfully for this device.", 54, 2, _swiftEmptyArrayStorage, v27);
    sub_10005972C((uint64_t)v9, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    Future.finish(result:)(v5);
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47C0);
    sub_1007BEC2C((uint64_t)v9);
    return sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_10026E3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v1 = v0;
  v77 = type metadata accessor for OwnedBeaconRecord(0);
  v75 = *(_QWORD *)(v77 - 8);
  v2 = *(_QWORD *)(v75 + 64);
  v3 = __chkstk_darwin(v77);
  v4 = (char *)&v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v66 - v6;
  __chkstk_darwin(v5);
  v69 = (char *)&v66 - v8;
  v9 = type metadata accessor for StableIdentifier(0);
  v10 = __chkstk_darwin(v9);
  v74 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v70 = (uint64_t *)((char *)&v66 - v12);
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v66 - v19;
  static SystemInfo.lockState.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  v21 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v22 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v17, v13, v21);
  v23 = *(void (**)(char *, uint64_t))(v14 + 8);
  v23(v17, v13);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v20, v13);
  if ((v22 & 1) != 0)
  {
    v25 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    return os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "removeDuplicateLocalBeacons call failed because we're beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v27 = (id)MobileGestalt_get_current_device(v24);
    if (v27)
    {
      v28 = v27;
      v29 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

      v30 = v1;
      if (v29)
      {
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

      }
      else
      {
        v31 = 0;
        v33 = 0xE000000000000000;
      }
      v34 = (uint64_t)v69;
      v35 = HIBYTE(v33) & 0xF;
      if ((v33 & 0x2000000000000000) == 0)
        v35 = v31 & 0xFFFFFFFFFFFFLL;
      if (v35)
      {
        v36 = v70;
        *v70 = v31;
        v36[1] = v33;
        swift_storeEnumTagMultiPayload(v36, v9, 0);
        v37 = objc_autoreleasePoolPush();
        v38 = sub_1000188D0();
        __chkstk_darwin(v38);
        *(&v66 - 2) = (uint64_t)v36;
        v78 = sub_10008B550((uint64_t (*)(char *))sub_10028F5BC, (unint64_t *)&v66 - 4, v39);
        swift_bridgeObjectRetain(v78);
        sub_10027EB6C(&v78, sub_10027EDD4);
        swift_bridgeObjectRelease();
        v40 = v78;
        objc_autoreleasePoolPop(v37);
        v41 = *(_QWORD *)(v40 + 16);
        if (v41)
        {
          v42 = *(unsigned __int8 *)(v75 + 80);
          v73 = (v42 + 32) & ~v42;
          v43 = sub_10005972C(v40 + v73, v34, type metadata accessor for OwnedBeaconRecord);
          if (v41 == 1)
          {
            swift_release();
            v44 = v34;
          }
          else
          {
            __chkstk_darwin(v43);
            *(&v66 - 2) = v34;
            v47 = sub_10008B550((uint64_t (*)(char *))sub_10028F608, (unint64_t *)&v66 - 4, v40);
            LODWORD(v72) = static os_log_type_t.error.getter(v47);
            if (qword_1010EA258 != -1)
              swift_once(&qword_1010EA258, sub_100B5D9CC);
            v48 = qword_1011B7D38;
            v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v49 = swift_allocObject(v68, 72, 7);
            v76 = xmmword_100E22B00;
            *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
            v50 = v74;
            sub_10005972C((uint64_t)v70, v74, type metadata accessor for StableIdentifier);
            v51 = String.init<A>(describing:)(v50, v9);
            v53 = v52;
            *(_QWORD *)(v49 + 56) = &type metadata for String;
            v67 = sub_10001AA00();
            *(_QWORD *)(v49 + 64) = v67;
            *(_QWORD *)(v49 + 32) = v51;
            *(_QWORD *)(v49 + 40) = v53;
            os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v48, "Multiple beaconRecords found matching stableIdentifer of %@", 59, 2, v49);
            swift_bridgeObjectRelease();
            v54 = *(_QWORD *)(v47 + 16);
            if (v54)
            {
              v66 = v47;
              v55 = v47 + v73;
              v56 = *(_QWORD *)(v75 + 72);
              v74 = v30;
              v75 = v56;
              v73 = (v42 + 16) & ~v42;
              v72 = v73 + v2;
              v71 = v42 | 7;
              v58 = v67;
              v57 = v68;
              do
              {
                v59 = sub_10005972C(v55, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
                v60 = static os_log_type_t.default.getter(v59);
                v61 = qword_1011B7D38;
                v62 = swift_allocObject(v57, 72, 7);
                *(_OWORD *)(v62 + 16) = v76;
                sub_10005972C((uint64_t)v7, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
                v63 = String.init<A>(describing:)(v4, v77);
                *(_QWORD *)(v62 + 56) = &type metadata for String;
                *(_QWORD *)(v62 + 64) = v58;
                *(_QWORD *)(v62 + 32) = v63;
                *(_QWORD *)(v62 + 40) = v64;
                os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Removing duplicate record: %@", 29, 2, v62, v66);
                swift_bridgeObjectRelease();
                sub_10005972C((uint64_t)v7, (uint64_t)v4, type metadata accessor for OwnedBeaconRecord);
                v65 = (void (*)(uint64_t))swift_allocObject(&unk_101063740, v72, v71);
                sub_1000126EC((uint64_t)v4, (uint64_t)v65 + v73, type metadata accessor for OwnedBeaconRecord);
                sub_10026ECC0((uint64_t)v7, 1, (void (*)(uint64_t))sub_10028F8D0, v65);
                swift_release();
                sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
                v55 += v75;
                --v54;
              }
              while (v54);
            }
            swift_bridgeObjectRelease();
            v44 = (uint64_t)v69;
          }
          sub_1000126B0(v44, type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          swift_release();
        }
        return sub_1000126B0((uint64_t)v70, type metadata accessor for StableIdentifier);
      }
      else
      {
        v45 = swift_bridgeObjectRelease();
        v46 = static os_log_type_t.error.getter(v45);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        return os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7D38, "removeDuplicateLocalBeacons could not get UUID!", 47, 2, _swiftEmptyArrayStorage);
      }
    }
    else
    {
      __break(1u);
      result = swift_release();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10026EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _BYTE v28[8];

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v8 = swift_errorRetain(a1);
    v9 = static os_log_type_t.error.getter(v8);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v10 = qword_1011B7D38;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
    sub_10005972C(a2, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    v13 = String.init<A>(describing:)(v7, v4);
    v15 = v14;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v16 = sub_10001AA00();
    *(_QWORD *)(v12 + 64) = v16;
    *(_QWORD *)(v12 + 32) = v13;
    *(_QWORD *)(v12 + 40) = v15;
    swift_getErrorValue(a1, v28, v27);
    v17 = Error.localizedDescription.getter(v27[1], v27[2]);
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v16;
    *(_QWORD *)(v12 + 72) = v17;
    *(_QWORD *)(v12 + 80) = v18;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to remove duplicate record: %@. Error - %@", 49, 2, v12);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v20 = static os_log_type_t.default.getter(v5);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v21 = qword_1011B7D38;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    sub_10005972C(a2, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    v24 = String.init<A>(describing:)(v7, v4);
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    *(_QWORD *)(v23 + 64) = sub_10001AA00();
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Successfully removed duplicate record: %@", 41, 2, v23);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10026ECC0(uint64_t a1, int a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void (**v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (**v84)(uint64_t);
  uint64_t (*v85)(uint64_t);
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  void (*v109)(uint64_t);
  char *v110;
  void (*v111)(uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v5 = v4;
  v109 = a3;
  v106 = a2;
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v103 = *(_QWORD *)(v8 - 8);
  v104 = v8;
  v9 = __chkstk_darwin(v8);
  v102 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v101 = (char *)&v90 - v11;
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v107 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v90 - v17;
  v114 = v19;
  __chkstk_darwin(v16);
  v21 = (char *)&v90 - v20;
  v22 = type metadata accessor for ShareRecord(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  v26 = *(_QWORD *)(v5 + 280);
  v93 = v12;
  v27 = *(int *)(v12 + 20);
  v115 = (char *)a1;
  v105 = v26;
  v112 = a1 + v27;
  v28 = sub_10088A6EC();
  v29 = v28[2];
  v110 = v18;
  v111 = a4;
  if (v29)
  {
    *(_QWORD *)&v108 = v13;
    v30 = (uint64_t)v28 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v31 = *(_QWORD *)(v23 + 72);
    while (1)
    {
      result = sub_10005972C(v30, (uint64_t)v25, type metadata accessor for ShareRecord);
      if (!*(_QWORD *)(v5 + 40))
        break;
      swift_retain();
      sub_10037BF50((uint64_t)v25, (uint64_t)sub_10027D6CC, 0);
      swift_release();
      sub_1000126B0((uint64_t)v25, type metadata accessor for ShareRecord);
      v30 += v31;
      if (!--v29)
      {
        swift_bridgeObjectRelease();
        v18 = v110;
        a4 = v111;
        v13 = v108;
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10005972C((uint64_t)v115, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v21, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
    v33 = *(unsigned __int8 *)(v13 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = (v114 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v100 = v33 | 7;
    v38 = swift_allocObject(&unk_101063768, v37 + 8, v33 | 7);
    v95 = v34;
    sub_1000126EC((uint64_t)v21, v38 + v34, type metadata accessor for OwnedBeaconRecord);
    v96 = v35;
    v39 = (void (**)(uint64_t))(v38 + v35);
    *v39 = v109;
    v39[1] = a4;
    v40 = v113;
    v97 = v36;
    *(_QWORD *)(v38 + v36) = v113;
    v94 = v38;
    *(_QWORD *)(v38 + v37) = v5;
    swift_retain_n(a4, 2);
    swift_retain_n(v40, 2);
    v41 = swift_retain_n(v5, 2);
    v42 = static os_log_type_t.default.getter(v41);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v98 = ~v33;
    v99 = v33;
    v43 = qword_1011B7D38;
    v92 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v44 = swift_allocObject(v92, 72, 7);
    v108 = xmmword_100E22B00;
    *(_OWORD *)(v44 + 16) = xmmword_100E22B00;
    v45 = type metadata accessor for UUID(0);
    v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v91);
    v48 = v47;
    *(_QWORD *)(v44 + 56) = &type metadata for String;
    v90 = sub_10001AA00();
    *(_QWORD *)(v44 + 64) = v90;
    *(_QWORD *)(v44 + 32) = v46;
    *(_QWORD *)(v44 + 40) = v48;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "Unpair owned beacon: %@", 23, 2, v44);
    v49 = swift_bridgeObjectRelease();
    v50 = v101;
    static SystemInfo.lockState.getter(v49);
    v52 = v102;
    v51 = v103;
    v53 = v104;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v104);
    v54 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v117, v53, v54);
    dispatch thunk of RawRepresentable.rawValue.getter(&v116, v53, v54);
    v56 = v116;
    v55 = v117;
    v57 = *(void (**)(char *, uint64_t))(v51 + 8);
    v57(v52, v53);
    v58 = ((uint64_t (*)(char *, uint64_t))v57)(v50, v53);
    v59 = (uint64_t)v110;
    v60 = v115;
    if (v55 == v56)
    {
      v61 = static os_log_type_t.default.getter(v58);
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
      v62 = sub_10008806C();
      v63 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v62, 0, 0);
      *v64 = 0;
      v65 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v66 = qword_1011B7D88;
      v67 = swift_allocObject(v92, 72, 7);
      *(_OWORD *)(v67 + 16) = v108;
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v45, v91);
      v69 = v90;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      *(_QWORD *)(v67 + 64) = v69;
      *(_QWORD *)(v67 + 32) = v68;
      *(_QWORD *)(v67 + 40) = v70;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Unpair for beacon, %@, unsuccessful", 35, 2, v67);
      swift_bridgeObjectRelease();
      v109(v63);
      swift_errorRelease(v63);
      v60 = v115;
    }
    v71 = dispatch_group_create();
    dispatch_group_enter(v71);
    v72 = sub_10001A9A8(&qword_1011003C0);
    v73 = *(_QWORD *)(v45 - 8);
    v74 = *(unsigned __int8 *)(v73 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = swift_allocObject(v72, v75 + *(_QWORD *)(v73 + 72), v74 | 7);
    *(_OWORD *)(v76 + 16) = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v76 + v75, v112, v45);
    v77 = swift_allocObject(&unk_101063790, 24, 7);
    *(_QWORD *)(v77 + 16) = v71;
    v78 = v71;
    v79 = v105;
    sub_10075B3B4(v76, (uint64_t)sub_10028F938, v77);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    v80 = v107;
    sub_10005972C((uint64_t)v60, v107, type metadata accessor for OwnedBeaconRecord);
    v81 = v97;
    v82 = v100;
    v83 = swift_allocObject(&unk_1010637B8, v97 + 10, v100);
    sub_1000126EC(v80, v83 + v95, type metadata accessor for OwnedBeaconRecord);
    v84 = (uint64_t (**)(uint64_t))(v83 + v96);
    v85 = (uint64_t (*)(uint64_t))v94;
    *v84 = sub_10028F910;
    v84[1] = v85;
    v86 = v83 + v81;
    *(_QWORD *)v86 = v79;
    *(_BYTE *)(v86 + 8) = v106 & 1;
    *(_BYTE *)(v86 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_1009FB1F0(v60, (void (*)(_QWORD))sub_10028F948, v83);
    swift_release();
    swift_release();

    sub_1000126B0(v59, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for Transaction(0);
    v87 = swift_allocObject(&unk_1010637E0, 24, 7);
    swift_weakInit(v87 + 16, v5);
    sub_10005972C((uint64_t)v60, v80, type metadata accessor for OwnedBeaconRecord);
    v88 = (v99 + 24) & v98;
    v89 = swift_allocObject(&unk_101063808, v88 + v114, v82);
    *(_QWORD *)(v89 + 16) = v87;
    sub_1000126EC(v80, v89 + v88, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    static Transaction.asyncTask(name:block:)("com.apple.icloud.searchpartyd-force-stop-item-sharing", 53, 2, &unk_1010F4718, v89);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10026F528(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  _QWORD *v81;

  v67 = a1;
  v68 = a2;
  v73 = type metadata accessor for DispatchWorkItemFlags(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v70 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS.QoSClass(0);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v64 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = v2;
  v19 = *(void **)(v2 + 64);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v22);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v24(v12, v8);
  v25 = ((uint64_t (*)(char *, uint64_t))v24)(v14, v8);
  if ((v23 & 1) != 0)
  {
    v9 = static os_log_type_t.error.getter(v25);
    if (qword_1010EA258 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D38, "searchForDetachedLocalBeacon call failed because we're beforeFirstUnlock state", 78, 2, _swiftEmptyArrayStorage);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v27 = v65;
      v26 = v66;
      (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v66);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v7);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
      v29 = swift_allocObject(&unk_101064780, 32, 7);
      v30 = v68;
      *(_QWORD *)(v29 + 16) = v67;
      *(_QWORD *)(v29 + 24) = v30;
      v80 = sub_100298198;
      v81 = (_QWORD *)v29;
      aBlock = _NSConcreteStackBlock;
      v77 = 1107296256;
      v31 = &unk_101064798;
LABEL_10:
      v78 = sub_100016FB8;
      v79 = v31;
      v54 = _Block_copy(&aBlock);
      v55 = swift_retain();
      v56 = v70;
      static DispatchQoS.unspecified.getter(v55);
      v75 = _swiftEmptyArrayStorage;
      v57 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v58 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v59 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v60 = v69;
      v61 = v58;
      v62 = v73;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v61, v59, v73, v57);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v56, v60, v54);
      _Block_release(v54);

      (*(void (**)(char *, uint64_t))(v71 + 8))(v60, v62);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v74);
      return swift_release();
    }
LABEL_13:
    swift_once(&qword_1010EA258, sub_100B5D9CC);
    goto LABEL_4;
  }
  v32 = v64;
  sub_1007FDEC4();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v33 = swift_release();
  if (aBlock != 1)
  {
    v49 = static os_log_type_t.error.getter(v33);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D38, "searchForDetachedLocalBeacon call failed because cloud backed beacon store is not avaiable", 90, 2, _swiftEmptyArrayStorage);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v51 = v65;
    v50 = v66;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v66);
    v28 = (void *)static OS_dispatch_queue.global(qos:)(v7);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v50);
    v52 = swift_allocObject(&unk_1010646E0, 32, 7);
    v53 = v68;
    *(_QWORD *)(v52 + 16) = v67;
    *(_QWORD *)(v52 + 24) = v53;
    v80 = sub_1002970EC;
    v81 = (_QWORD *)v52;
    aBlock = _NSConcreteStackBlock;
    v77 = 1107296256;
    v31 = &unk_1010646F8;
    goto LABEL_10;
  }
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v35 = v65;
  v34 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v66);
  v36 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v34);
  v37 = (_QWORD *)swift_allocObject(&unk_101064730, 40, 7);
  v38 = v67;
  v39 = v68;
  v37[2] = v32;
  v37[3] = v38;
  v37[4] = v39;
  v80 = sub_100297110;
  v81 = v37;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_100016FB8;
  v79 = &unk_101064748;
  v40 = _Block_copy(&aBlock);
  swift_retain();
  v41 = swift_retain();
  v42 = v70;
  static DispatchQoS.unspecified.getter(v41);
  v75 = _swiftEmptyArrayStorage;
  v43 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v44 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v45 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v46 = v69;
  v47 = v44;
  v48 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v47, v45, v73, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v46, v40);
  _Block_release(v40);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v46, v48);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v42, v74);
  return swift_release();
}

uint64_t sub_10026FC70(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  a1(v4);
  return sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F47C0);
}

uint64_t sub_10026FD10(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t);

  v58 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v57 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v56 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v55 = (char *)&v51 - v10;
  v11 = sub_10001A9A8(&qword_10110EE80);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v51 - v19;
  v21 = sub_10080D208();
  v22 = v21[2];
  if (v22)
  {
    v53 = v15;
    v54 = a3;
    v23 = sub_10005972C((uint64_t)v21 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    if (v22 == 1)
    {
      v24 = swift_bridgeObjectRelease();
      v25 = v14;
    }
    else
    {
      v52 = static os_log_type_t.error.getter(v23);
      v25 = v14;
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v51 = qword_1011B7D38;
      v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v34 = swift_allocObject(v33, 112, 7);
      *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
      sub_100B11004(v34, v13);
      v35 = String.init<A>(describing:)(v13, v11);
      v37 = v36;
      *(_QWORD *)(v34 + 56) = &type metadata for String;
      *(_QWORD *)(v34 + 64) = sub_10001AA00();
      *(_QWORD *)(v34 + 32) = v35;
      *(_QWORD *)(v34 + 40) = v37;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v34 + 96) = &type metadata for Int;
      *(_QWORD *)(v34 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v34 + 72) = v22;
      os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v51, "Multiple beaconRecords found matching stableIdentifer of %@: %ld", 64, 2, v34);
      v24 = swift_bridgeObjectRelease();
    }
    v38 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v39 = qword_1011B7D38;
    v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v41 = swift_allocObject(v40, 72, 7);
    *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v20, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
    v42 = String.init<A>(describing:)(v18, v25);
    v44 = v43;
    *(_QWORD *)(v41 + 56) = &type metadata for String;
    *(_QWORD *)(v41 + 64) = sub_10001AA00();
    *(_QWORD *)(v41 + 32) = v42;
    *(_QWORD *)(v41 + 40) = v44;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Found detached local beacon: %@", 31, 2, v41);
    swift_bridgeObjectRelease();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v45 = &v20[*(int *)(v25 + 20)];
    v46 = type metadata accessor for UUID(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = (uint64_t)v55;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v55, v45, v46);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v46);
    sub_100013B60();
    v49 = v56;
    sub_10000F9B8(v48, v56, &qword_1010ED860);
    sub_100B05560(v49);
    swift_release();
    sub_100004048(v48, &qword_1010ED860);
    v50 = v57;
    sub_10005972C((uint64_t)v20, v57, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v25);
    v58(v50);
    sub_100004048(v50, (uint64_t *)&unk_1010F47C0);
    return sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
    v26 = swift_bridgeObjectRelease();
    __chkstk_darwin(v26);
    *(&v51 - 2) = a1;
    *(&v51 - 1) = v27;
    v28 = sub_10001A9A8(&qword_1010F4B00);
    OS_dispatch_queue.sync<A>(execute:)(sub_10029711C, &v51 - 4, v28);
    v29 = swift_allocObject(&unk_1010647D0, 32, 7);
    v30 = v58;
    *(_QWORD *)(v29 + 16) = v58;
    *(_QWORD *)(v29 + 24) = a3;
    swift_retain();
    Future.addFailure(block:)(sub_100297134, v29);
    swift_release();
    swift_release();
    v31 = swift_allocObject(&unk_1010647F8, 32, 7);
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = a3;
    swift_retain();
    Future.addSuccess(block:)(sub_10029713C, v31);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1002702B8(uint64_t a1, void (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.error.getter(v5);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v9 = qword_1011B7D38;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  v19 = a1;
  swift_errorRetain(a1);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v13 = String.init<A>(describing:)(&v19, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "createLocalPairingIfSupported error: %@", 39, 2, v11);
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
  a2(v7);
  return sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47C0);
}

uint64_t sub_100270444(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, _QWORD, uint64_t, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);

  v40 = a3;
  v41 = a2;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v37 = (uint64_t)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v38 = (char *)&v36 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - v9;
  v11 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v36 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v36 - v18;
  v20 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v21 = qword_1011B7D38;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v22, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  sub_10000F9B8(a1, (uint64_t)v19, (uint64_t *)&unk_1010F47C0);
  v24 = String.init<A>(describing:)(v19, v13);
  v26 = v25;
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = sub_10001AA00();
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Found local beacon : %@", 23, 2, v23);
  swift_bridgeObjectRelease();
  sub_10000F9B8(a1, (uint64_t)v16, (uint64_t *)&unk_1010F47C0);
  v27 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v16, 1, v27) == 1)
  {
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F47C0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v10, 1, 1, v11);
LABEL_6:
    sub_100004048((uint64_t)v10, &qword_1010ED860);
    return v41(a1);
  }
  v28 = &v16[*(int *)(v27 + 20)];
  v29 = v39;
  v30 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v30(v10, v28, v11);
  sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  v31 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
  v31(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v10, 1, v11) == 1)
    goto LABEL_6;
  v32 = v36;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v36, v10, v11);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v33 = (uint64_t)v38;
  v30(v38, v32, v11);
  v31((char *)v33, 0, 1, v11);
  sub_100013B60();
  v34 = v37;
  sub_10000F9B8(v33, v37, &qword_1010ED860);
  sub_100B05560(v34);
  swift_release();
  sub_100004048(v33, &qword_1010ED860);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v11);
  return v41(a1);
}

uint64_t sub_10027081C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v13[2];

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (_QWORD *)((char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v9 = v13[1];
  KeyPath = swift_getKeyPath(&unk_100E2F9E0);
  sub_100C1C4BC(KeyPath, v9, v4);
  swift_bridgeObjectRelease();
  swift_release();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100004048((uint64_t)v4, &qword_1010ED860);
    v11 = type metadata accessor for OwnedBeaconRecord(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    (*(void (**)(char *, _QWORD *, uint64_t))(v6 + 32))(v8, v4, v5);
    sub_10080B950((uint64_t)v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_1002709D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1002709F0, 0, 0);
}

uint64_t sub_1002709F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[2];
  v2 = swift_allocObject(&unk_101064500, 32, 7);
  v0[5] = v2;
  *(_QWORD *)(v2 + 16) = &unk_1010F4AA0;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[6] = v4;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v4 = v0;
  v4[1] = sub_100270AB0;
  return withTimeout<A>(_:block:)(v0 + 7, 8000000000000000000, 0, &unk_1010F4AB0, v2, v5);
}

uint64_t sub_100270AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  if (v0)
  {
    swift_errorRelease(v0);
    swift_release();
    v2 = sub_10029819C;
  }
  else
  {
    swift_release();
    v2 = sub_100270B2C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100270B2C()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(v0 + 24))(1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100270B60(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_switch(sub_100270B78, 0, 0);
}

uint64_t sub_100270B78()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_100270BE4;
  return unsafeBlocking<A>(_:)(v2, sub_100294D18, *(_QWORD *)(v0 + 32), &type metadata for () + 1);
}

uint64_t sub_100270BE4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_100270C40, 0, 0);
}

uint64_t sub_100270C40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F4ABC);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_100270C88;
  return sub_100271568();
}

uint64_t sub_100270C88()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_100270CDC, 0, 0);
}

uint64_t sub_100270CDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  if (qword_1010E9CF8 != -1)
    swift_once(&qword_1010E9CF8, sub_10058CBB4);
  v1 = type metadata accessor for URL(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7168);
  result = static NSFileManager.removeDirectory(url:)(v2);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 32) + 40))
  {
    v4 = qword_1010EA438;
    swift_retain();
    if (v4 != -1)
      swift_once(&qword_1010EA438, sub_100C4E78C);
    v5 = sub_10001A9E8(v1, (uint64_t)qword_10111B048);
    static NSFileManager.removeDirectory(url:)(v5);
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027111C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t result;
  char *v24;
  void **aBlock;
  _QWORD v26[4];
  uint64_t v27;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10029565C();
  v5 = *(_QWORD *)(a1 + 280);
  sub_1007F3274();
  while (1)
  {
    v14 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v15 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v5, v14, &type metadata for () + 1, v15);
    v16 = aBlock;
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
    v18 = (_QWORD *)swift_allocObject(&unk_101064550, 40, 7);
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v16;
    swift_retain();
    sub_100691AC0((uint64_t)v4, (uint64_t)&unk_1010F4AD0, (uint64_t)v18);
    swift_release();
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("BeaconKeyManager.deleteAllKeyMaps", 33, 2, sub_1002958B4, v16, &type metadata for () + 1);
    swift_release();
    sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    v19 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100215C88);
    sub_10079D218(v19);
    if (qword_1010E9968 != -1)
      swift_once(&qword_1010E9968, sub_1000FC8C8);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10027EBFC, 0, qword_1010EEF78, &type metadata for () + 1, &type metadata for () + 1);
    v20 = *(NSObject **)(a1 + 64);
    v21 = swift_allocObject(&unk_101064578, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1002958CC;
    *(_QWORD *)(v21 + 24) = a1;
    v26[3] = sub_10005CBA4;
    v27 = v21;
    aBlock = _NSConcreteStackBlock;
    v26[0] = 1107296256;
    v26[1] = sub_10001D8B8;
    v26[2] = &unk_101064590;
    v4 = (char *)_Block_copy(&aBlock);
    v5 = v27;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v20, v4);
    _Block_release(v4);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v21, "", 152, 890, 54, 1);
    swift_release();
    result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      break;
    __break(1u);
    swift_once(&qword_1010EA230, sub_100B5D824);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7D00);
    swift_errorRetain(isEscapingClosureAtFileLocation);
    v7 = swift_errorRetain(isEscapingClosureAtFileLocation);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v24 = v4;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      swift_errorRetain(isEscapingClosureAtFileLocation);
      v12 = _swift_stdlib_bridgeErrorToNSError(isEscapingClosureAtFileLocation);
      aBlock = (void **)v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v26, v10 + 4, v10 + 12);
      *v11 = v12;
      v4 = v24;
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error purging beacon store files: %@.", v10, 0xCu);
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(isEscapingClosureAtFileLocation);
    }
    else
    {
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);
      swift_errorRelease(isEscapingClosureAtFileLocation);

    }
  }
  return result;
}

uint64_t sub_100271568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 216) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002715C4, 0, 0);
}

uint64_t sub_1002715C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 232) = v3;
    *v3 = v0;
    v3[1] = sub_1002716C4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002716C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100271720, 0, 0);
}

uint64_t sub_100271720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1002717FC, *(_QWORD *)(v0 + 240), 0);
  *(_QWORD *)(v0 + 256) = 0;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v4 = (uint64_t (*)(void))((char *)&dword_1010EBC58 + dword_1010EBC58);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 264) = v3;
    *v3 = v0;
    v3[1] = sub_100271910;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002717FC()
{
  uint64_t v0;

  sub_100C642D8();
  *(_QWORD *)(v0 + 248) = 0;
  return swift_task_switch(sub_10027185C, 0, 0);
}

uint64_t sub_10027185C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  swift_release();
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 248);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 264) = v2;
    *v2 = v0;
    v2[1] = sub_100271910;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100271910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10027196C, 0, 0);
}

uint64_t sub_10027196C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 272);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  if (v1)
    return swift_task_switch(sub_1002719CC, *(_QWORD *)(v0 + 272), 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002719CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[34];
  if (*(_QWORD *)(v1 + 128))
  {
    v2 = v0[32];
    sub_100C64290();
    v0[35] = v2;
    if (v2)
    {
      v3 = sub_100271D34;
      return swift_task_switch(v3, 0, 0);
    }
    v1 = v0[34];
  }
  v4 = *(_QWORD *)(v1 + 136);
  if (v4)
  {
    v5 = v0[28];
    v6 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    v7 = (_QWORD *)swift_allocObject(&unk_101064528, 40, 7);
    v7[2] = 0;
    v7[3] = 0;
    v7[4] = v4;
    swift_retain();
    sub_100626BC4(v5, (uint64_t)&unk_1010F4AC8, (uint64_t)v7);
    swift_release();
  }
  v3 = sub_100271AA4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100271AA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100271ADC()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t (__cdecl *v15)();

  v1 = (__int128 *)(v0 + 7);
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v2 = v0[31];
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7648);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[31];
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v11 = _convertErrorToNSError(_:)(v8);
    v0[26] = v11;
    v1 = (__int128 *)(v0 + 7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error purging StandaloneBeaconService: %@", v9, 0xCu);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_release();
    swift_errorRelease(v8);
  }
  else
  {
    swift_release();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    swift_errorRelease(v8);

  }
  v0[32] = 0;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 17));
    sub_10001AA44(v0 + 17, v0[20]);
    v15 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v14 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    v0[33] = v14;
    *v14 = v0;
    v14[1] = sub_100271910;
    return v15();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100271D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7648);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 280);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 200) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error purging ObservationStoreSerivce: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();

    swift_errorRelease(v7);
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100271F14(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_100271F6C;
  return v5();
}

uint64_t sub_100271F6C()
{
  uint64_t *v0;
  _BYTE *v1;
  uint64_t v3;

  v1 = *(_BYTE **)(*v0 + 16);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v1 = 0;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100271FBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[7];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9968 != -1)
    swift_once(&qword_1010E9968, sub_1000FC8C8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10027EBFC, 0, qword_1010EEF78, &type metadata for () + 1, &type metadata for () + 1);
  v8 = *(_QWORD *)(v0 + 280);
  v9 = swift_allocObject(&unk_1010636A0, 32, 7);
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v0;
  aBlock[4] = sub_10027EC1C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010636B8;
  v10 = _Block_copy(aBlock);
  swift_retain();
  v11 = swift_retain();
  static DispatchQoS.unspecified.getter(v11);
  v18 = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v14 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

void sub_100272204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  uint64_t v32;

  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  v15 = swift_allocObject(&unk_1010636F0, 32, 7);
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = a2;
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_101063718, 56, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a1;
  v17[5] = sub_10027EC50;
  v17[6] = v15;
  v18 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F46C8, (uint64_t)v17);
  swift_release();
  swift_release();
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B7648);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Waiting for manateeAvailable check to complete.", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  static DispatchTime.now()(v24);
  + infix(_:_:)(v8, 240.0);
  v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v8, v4);
  v26 = OS_dispatch_group.wait(timeout:)(v10) & 1;
  v25(v10, v4);
  v27 = static DispatchTimeoutResult.== infix(_:_:)(v26, 1);
  if ((v27 & 1) != 0)
  {
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Timed out waiting for manateeAvailable.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
      v31 = v18;
      v18 = v28;
    }
    else
    {
      v31 = v28;
    }

  }
}

void sub_100272520(char a1, NSObject *a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];

  v6 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (!v6)
  {
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "aa_primaryAppleAccount");

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7648);
  v10 = v8;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v20 = a3;
    v13 = swift_slowAlloc(28, -1);
    v14 = swift_slowAlloc(32, -1);
    v22[0] = v14;
    *(_DWORD *)v13 = 136446722;
    if (v10)
      v15 = 0x6C696E2D746F6ELL;
    else
      v15 = 7104878;
    if (v10)
      v16 = 0xE700000000000000;
    else
      v16 = 0xE300000000000000;
    v21 = sub_100016940(v15, v16, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v13 + 4, v13 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2048;
    if (v10)
    {
      v17 = sub_10036202C();

    }
    else
    {
      v17 = 0;
    }
    v21 = (uint64_t)v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v13 + 14, v13 + 22);

    *(_WORD *)(v13 + 22) = 1024;
    LODWORD(v21) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 4, v13 + 24, v13 + 28);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "primaryAccountModified account: %{public}s,      security: %lu with manatee enabled: %{BOOL}d.", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    a3 = v20;
    if (!v10)
      goto LABEL_18;
  }
  else
  {

    if (!v10)
      goto LABEL_18;
  }
  v18 = v10;
  v19 = sub_10036202C();

  if (v19 != (id)4)
LABEL_18:
    a1 = 0;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  sub_100013B60();
  sub_100B04D40(v10 != 0, a1 & 1);
  swift_release();
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_10027ECEC, a3, &type metadata for () + 1);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.checkForMissingKeys", 49, 2, sub_10027ED04, a3, &type metadata for () + 1);

  dispatch_group_leave(a2);
}

void sub_100272898(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  _BYTE v94[48];
  __int128 v95;
  uint64_t v96;
  unsigned __int8 v97[48];

  v92 = a4;
  v93 = a3;
  v90 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for OwnedBeaconGroup(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for UUID(0);
  v84 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v81 = v11;
  v82 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v83 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v85);
  v86 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SharedBeaconRecord(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v81 - v19;
  v21 = type metadata accessor for OwnedBeaconRecord(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v81 - v25;
  v91 = v4;
  sub_10080B648(a1, (uint64_t)&v95);
  if (v96)
  {
    sub_10000F9FC(&v95, (uint64_t)v97);
    sub_100030784((uint64_t)v97, (uint64_t)&v95);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    if (swift_dynamicCast(v26, &v95, v27, v21, 0))
    {
      sub_1000126EC((uint64_t)v26, (uint64_t)v24, type metadata accessor for OwnedBeaconRecord);
      sub_100273E98((uint64_t)v24, v90 & 1, (uint64_t)v93, v92);
      sub_1000126B0((uint64_t)v24, type metadata accessor for OwnedBeaconRecord);
    }
    else if (swift_dynamicCast(v20, &v95, v27, v15, 0))
    {
      sub_1000126EC((uint64_t)v20, (uint64_t)v18, type metadata accessor for SharedBeaconRecord);
      sub_100274B28((uint64_t)v18, (uint64_t)v93, v92);
      sub_1000126B0((uint64_t)v18, type metadata accessor for SharedBeaconRecord);
    }
    else
    {
      v51 = v86;
      v52 = swift_dynamicCast(v86, &v95, v27, v85, 0);
      if ((_DWORD)v52)
      {
        v53 = swift_allocObject(&unk_101063830, 32, 7);
        v54 = v92;
        *(_QWORD *)(v53 + 16) = v93;
        *(_QWORD *)(v53 + 24) = v54;
        v55 = type metadata accessor for TaskPriority(0);
        v56 = (uint64_t)v83;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v83, 1, 1, v55);
        v57 = v84;
        v58 = v82;
        v59 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v82, a1, v87);
        v60 = *(unsigned __int8 *)(v57 + 80);
        v61 = (v60 + 56) & ~v60;
        v62 = (uint64_t)v51;
        v63 = (char *)swift_allocObject(&unk_101063858, v61 + v81, v60 | 7);
        *((_QWORD *)v63 + 2) = 0;
        *((_QWORD *)v63 + 3) = 0;
        *((_QWORD *)v63 + 4) = v91;
        *((_QWORD *)v63 + 5) = sub_10001D858;
        *((_QWORD *)v63 + 6) = v53;
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v63[v61], v58, v59);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_100691AC0(v56, (uint64_t)&unk_1010F4740, (uint64_t)v63);
        swift_release();
        swift_release();
        ((void (*)(_QWORD))v93)(0);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v97);
        sub_1000126B0(v62, type metadata accessor for LocalFindableAccessoryRecord);
LABEL_25:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v95);
        return;
      }
      v68 = static os_log_type_t.error.getter(v52);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v69 = qword_1011B7D88;
      v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v71 = swift_allocObject(v70, 72, 7);
      *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
      sub_100030784((uint64_t)v97, (uint64_t)v94);
      v72 = String.init<A>(describing:)(v94, v27);
      v74 = v73;
      *(_QWORD *)(v71 + 56) = &type metadata for String;
      *(_QWORD *)(v71 + 64) = sub_10001AA00();
      *(_QWORD *)(v71 + 32) = v72;
      *(_QWORD *)(v71 + 40) = v74;
      os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Unhandled beacon type: %@", 25, 2, v71);
      swift_bridgeObjectRelease();
      v75 = sub_10028FA08();
      v76 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v75, 0, 0);
      *v77 = 3;
      v93();
      swift_errorRelease(v76);
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v97);
    goto LABEL_25;
  }
  sub_100004048((uint64_t)&v95, (uint64_t *)&unk_1010EE310);
  sub_10081EDA8(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v8, 1, v89) != 1)
  {
    v42 = (uint64_t)v10;
    sub_1000126EC((uint64_t)v8, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    v97[0] = 0;
    sub_10036AC6C();
    v44 = v43;
    v45 = v91;
    swift_retain();
    sub_10028AA7C(v44, v45, v97);
    swift_bridgeObjectRelease();
    v46 = swift_release();
    v47 = v97[0];
    v48 = static os_log_type_t.default.getter(v46);
    if (v47 == 1)
    {
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, qword_1011B7DF0, "Device may be already connected.", 32, 2, _swiftEmptyArrayStorage);
      v49 = v90 & 1;
      v50 = v42;
    }
    else
    {
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v64 = qword_1011B7D88;
      v65 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v66 = swift_allocObject(v65, 72, 7);
      *(_OWORD *)(v66 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v66 + 56) = &type metadata for Bool;
      *(_QWORD *)(v66 + 64) = &protocol witness table for Bool;
      v67 = v90;
      *(_BYTE *)(v66 + 32) = v90 & 1;
      os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v64, "Device is not connected. Force [%d]", v81);
      swift_bridgeObjectRelease();
      if ((v67 & 1) == 0)
      {
        v78 = sub_10028FA08();
        v79 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v78, 0, 0);
        *v80 = 7;
        v93();
        swift_errorRelease(v79);
        goto LABEL_27;
      }
      v50 = v42;
      v49 = 1;
    }
    sub_100274D88(v50, v49, (uint64_t)v93, v92);
LABEL_27:
    sub_1000126B0(v42, type metadata accessor for OwnedBeaconGroup);
    return;
  }
  v28 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010FF7F0);
  v29 = static os_log_type_t.error.getter(v28);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v30 = qword_1011B7D88;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v34 = dispatch thunk of CustomStringConvertible.description.getter(v87, v33);
  v36 = v35;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = sub_10001AA00();
  *(_QWORD *)(v32 + 32) = v34;
  *(_QWORD *)(v32 + 40) = v36;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Can't find beacon for uuid: %@", 30, 2, v32);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  v38 = v37;
  *(_QWORD *)&v95 = 2;
  v39 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v40 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v97, &v95, v39, v38, v40);
  v41 = *(void **)v97;
  ((void (*)(_QWORD))v93)(*(_QWORD *)v97);

}

void sub_1002731D0(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;

  if (!((unint64_t)a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(a1);
    v6 = 0;
    goto LABEL_12;
  }
  if (a1 < 0)
    v7 = a1;
  else
    v7 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v7))
    goto LABEL_11;
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_6;
  }
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(id *)(a1 + 32);
LABEL_6:
    v8 = v5;
    swift_bridgeObjectRelease(a1);
    v6 = v8;
LABEL_12:
    v9 = v6;
    a2();

    return;
  }
  __break(1u);
}

uint64_t sub_1002732A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int **v23;
  int *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t result;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t inited;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int *v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  int *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100[64];
  uint64_t v101;
  unint64_t v102;
  __int128 v103;

  v98 = a2;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v92 = (unint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for UUID(0);
  v88 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v87 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v86 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v83 - v11;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v99 = v103;
  v13 = *(_QWORD *)(v2 + 280);
  v14 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  v15 = *(_QWORD *)(v13 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v91 = (unint64_t *)type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v13, v15, &type metadata for () + 1, v91);
  v85 = a1 + *(int *)(v4 + 20);
  v16 = (int *)v4;
  v17 = sub_100DD8B78(v85);
  swift_release();
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v12, a1 + v16[8], v7);
  v94 = v16;
  v19 = (uint64_t *)(a1 + v16[13]);
  v20 = *v19;
  v21 = v19[1];
  v97 = v7;
  v96 = v8;
  v95 = v12;
  if (!v17)
  {
    v30 = v20;
    v31 = v21;
    sub_10001BBBC(v20, v21);
    swift_bridgeObjectRelease();
    if (qword_1010E9C30 != -1)
      swift_once(&qword_1010E9C30, sub_10047F0AC);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B6F60);
    v33 = a1;
    v34 = v92;
    v35 = sub_10005972C(v33, v92, type metadata accessor for OwnedBeaconRecord);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v103 = v39;
      *(_DWORD *)v38 = 141558275;
      v101 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v93, v40);
      v101 = sub_100016940(v41, v42, (uint64_t *)&v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to get basePrimaryKeyIndex for %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
      sub_10001BC14(v30, v31);

    }
    else
    {
      sub_10001BC14(v30, v31);

      sub_1000126B0(v34, type metadata accessor for OwnedBeaconRecord);
    }
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
    v79 = v98;
    v80 = type metadata accessor for OfflineFindingInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 1, 1, v80);
    v28 = 0;
    v29 = 0xF000000000000000;
    return sub_10001EF3C(v28, v29);
  }
  v22 = v17;
  v90 = v21;
  v89 = v20;
  if (v17 == 1)
  {
    v23 = (int **)(a1 + v94[9]);
    v24 = *v23;
    v25 = (unint64_t)v23[1];
    sub_10001BBBC(v20, v21);
    v94 = v24;
    sub_10001BBBC((uint64_t)v24, v25);
    v26 = v99;
  }
  else
  {
    v84 = v18;
    v43 = *(_QWORD *)(v13 + v14);
    v44 = a1;
    sub_10001BBBC(v20, v21);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v13, v43, &type metadata for () + 1, v91);
    v91 = &v83;
    v92 = v103;
    v45 = (uint64_t *)(a1 + v94[9]);
    v46 = *v45;
    v47 = v45[1];
    v49 = *v19;
    v48 = v19[1];
    v50 = (uint64_t *)(v44 + v94[12]);
    v52 = *v50;
    v51 = v50[1];
    sub_10001BBBC(v46, v47);
    sub_10001BBBC(v46, v47);
    v53 = v48;
    sub_10001BBBC(v49, v48);
    sub_10001BBBC(v52, v51);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    *(_QWORD *)&v103 = 0x7365547265646E75;
    *((_QWORD *)&v103 + 1) = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v101, &v103, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    v54 = sub_1007E0410(v46, v47, v22);
    v56 = v55;
    v101 = v54;
    v102 = v55;
    v94 = (int *)objc_autoreleasePoolPush();
    sub_10001BBBC(v54, v56);
    v83 = v53;
    sub_1007E2220(v52, v51, v49, v53, v54, v56, 1, &v101, &v103);
    sub_10001BC14(v54, v56);
    v81 = v51;
    v82 = (int *)v101;
    v25 = v102;
    sub_10001BBBC(v101, v102);
    sub_10001BBBC((uint64_t)v82, v25);
    sub_10001EF3C(0, 0xF000000000000000);
    sub_100296FD8((uint64_t *)&v103);
    sub_10001BC14((uint64_t)v82, v25);
    objc_autoreleasePoolPop(v94);
    v94 = v82;
    sub_10001BC14((uint64_t)v82, v25);
    sub_10001BC14(v46, v47);
    sub_10001BC14(v49, v83);
    sub_10001BC14(v52, v81);
    sub_10001BC14(v46, v47);
    swift_release();
    v26 = v99;
    v18 = v84;
  }
  if (v25 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
    sub_10001BC14(v89, v90);
    swift_bridgeObjectRelease();
    v27 = type metadata accessor for OfflineFindingInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v98, 1, 1, v27);
    v28 = (uint64_t)v94;
    v29 = v25;
    return sub_10001EF3C(v28, v29);
  }
  sub_10001BBBC((uint64_t)v94, v25);
  result = sub_100C1B838(v26);
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v58 = result;
    v59 = (void (*)(char *, char *, uint64_t))v18;
    v99 = v22;
    v60 = sub_100C1B84C(v26);
    result = swift_bridgeObjectRelease();
    if ((v60 & 0x8000000000000000) == 0)
    {
      v61 = objc_msgSend(objc_allocWithZone((Class)SPOfflineAdvertisingConfiguration), "initWithShortIntervalCount:longIntervalCount:", v58, v60);
      v62 = v88;
      v63 = v87;
      v64 = v93;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v85, v93);
      v65 = v86;
      v66 = v95;
      v67 = v97;
      v59(v86, v95, v97);
      v68 = sub_10001A9A8(&qword_1010F4AE0);
      inited = swift_initStackObject(v68, v100);
      *(_OWORD *)(inited + 16) = xmmword_100E22B10;
      *(_QWORD *)(inited + 32) = 2;
      *(_QWORD *)(inited + 40) = v61;
      *(_QWORD *)(inited + 48) = 1;
      *(_QWORD *)(inited + 56) = v61;
      v92 = sub_1006C9434((_QWORD *)inited);
      swift_setDeallocating(inited);
      v70 = v61;
      v71 = sub_10001A9A8(&qword_1010F4AE8);
      swift_arrayDestroy(inited + 32, 2, v71);
      v72 = v96;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v66, v67);
      v73 = v98;
      (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v98, v63, v64);
      v74 = (int *)type metadata accessor for OfflineFindingInfo(0);
      (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v73 + v74[5], v65, v67);
      *(_QWORD *)(v73 + v74[6]) = v99;
      v75 = (_QWORD *)(v73 + v74[7]);
      v76 = v90;
      *v75 = v89;
      v75[1] = v76;
      v77 = (_QWORD *)(v73 + v74[8]);
      v78 = v94;
      *v77 = v94;
      v77[1] = v25;
      *(_QWORD *)(v73 + v74[9]) = v92;
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v74 - 1) + 56))(v73, 0, 1, v74);
      v28 = (uint64_t)v78;
      v29 = v25;
      return sub_10001EF3C(v28, v29);
    }
  }
  __break(1u);
  return result;
}

void sub_100273E98(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  char *v22;
  _QWORD v23[15];
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v29 = a4;
  v27 = a2;
  v23[12] = *v4;
  v6 = type metadata accessor for OSSignpostID(0);
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  v7 = *(_QWORD *)(v24 + 64);
  v8 = __chkstk_darwin(v6);
  v23[11] = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v23[14] = (char *)v23 - v9;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  v23[13] = (char *)v23 - v12;
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v14 = *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64);
  v15 = __chkstk_darwin(v13);
  v26 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  v17 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v17);
  v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(int *)(v13 + 24);
  v30 = a1;
  sub_10005972C(a1 + v20, (uint64_t)v19, v21);
  v22 = (char *)sub_100274074 + 4 * word_100E2F950[swift_getEnumCaseMultiPayload(v19, v17)];
  __asm { BR              X10 }
}

uint64_t sub_100274074()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return sub_10026ECC0(*(_QWORD *)(v0 - 120), 1, *(void (**)(uint64_t))(v0 - 136), *(void (**)(uint64_t))(v0 - 128));
}

uint64_t sub_100274B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - v11;
  sub_10005972C(a1, (uint64_t)&v23 - v11, type metadata accessor for SharedBeaconRecord);
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_101063BF0, v15 + 16, v13 | 7);
  *(_QWORD *)(v16 + 16) = v3;
  sub_1000126EC((uint64_t)v12, v16 + v14, type metadata accessor for SharedBeaconRecord);
  v17 = (_QWORD *)(v16 + v15);
  *v17 = v24;
  v17[1] = a3;
  v18 = *(_QWORD *)(a1 + *(int *)(v6 + 44));
  sub_10005972C(a1, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  if (v18 != -1)
  {
    swift_retain();
    swift_retain();
    result = sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
LABEL_4:
    if (*(_QWORD *)(v3 + 40))
    {
      v21 = swift_allocObject(&unk_101063C18, 32, 7);
      *(_QWORD *)(v21 + 16) = sub_1002923EC;
      *(_QWORD *)(v21 + 24) = v16;
      swift_retain();
      swift_retain();
      sub_10037D304(a1, (uint64_t)sub_1000A18BC, v21);
LABEL_6:
      swift_release();
      swift_release();
      return swift_release();
    }
    __break(1u);
    goto LABEL_10;
  }
  v20 = *(_QWORD *)&v10[*(int *)(v6 + 48)];
  swift_retain();
  swift_retain();
  result = sub_1000126B0((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
  if (v20 != -1)
    goto LABEL_4;
  if (*(_QWORD *)(v3 + 40))
  {
    v22 = swift_allocObject(&unk_101063C40, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_1002923EC;
    *(_QWORD *)(v22 + 24) = v16;
    swift_retain();
    swift_retain();
    sub_10037CD84(a1, (uint64_t)sub_10001D858, v22);
    goto LABEL_6;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100274D68(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_100274D88(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = a4;
  v40 = a3;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v41 = v9;
  v42 = (uint64_t)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v39 - v10;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v13 = sub_10005972C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v45 = a1;
  v44 = a2;
  if (v16)
  {
    v17 = swift_slowAlloc(28, -1);
    v18 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 141558531;
    v47 = 1752392040;
    v48 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v19 = type metadata accessor for UUID(0);
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    v47 = sub_100016940(v21, v22, &v48);
    a1 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v17 + 22) = 1024;
    LODWORD(v47) = v44 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v17 + 24, v17 + 28);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "unpairMultipartAccessory for group %{private,mask.hash}s. Force? %{BOOL}d", (uint8_t *)v17, 0x1Cu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  v23 = v42;
  sub_10005972C(a1, v42, type metadata accessor for OwnedBeaconGroup);
  v24 = *(unsigned __int8 *)(v7 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = v24 | 7;
  v27 = v41;
  v28 = (v41 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_101063CB8, v28 + 16, v24 | 7);
  *(_QWORD *)(v29 + 16) = v46;
  sub_1000126EC(v23, v29 + v25, type metadata accessor for OwnedBeaconGroup);
  v30 = (_QWORD *)(v29 + v28);
  v31 = v40;
  v32 = v43;
  *v30 = v40;
  v30[1] = v32;
  sub_10005972C(a1, v23, type metadata accessor for OwnedBeaconGroup);
  v33 = (v24 + 16) & ~v24;
  v34 = (v33 + v27 + 31) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject(&unk_101063CE0, v34 + 16, v26);
  sub_1000126EC(v23, v35 + v33, type metadata accessor for OwnedBeaconGroup);
  v36 = v35 + ((v33 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v36 = sub_10029298C;
  *(_QWORD *)(v36 + 8) = v29;
  *(_BYTE *)(v36 + 16) = v44 & 1;
  v37 = (_QWORD *)(v35 + v34);
  *v37 = v31;
  v37[1] = v32;
  swift_retain_n(v32, 2);
  swift_retain();
  swift_retain();
  sub_1002794D8(v45, (uint64_t)sub_100292AD4, v35);
  swift_release();
  return swift_release();
}

uint64_t sub_10027516C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v4 + 104) = a4;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  *(_QWORD *)(v4 + 48) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002751D4, 0, 0);
}

uint64_t sub_1002751D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v4 = v0[3];
  sub_10005972C(v0[4], v1, type metadata accessor for OwnedBeaconRecord);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = swift_allocObject(&unk_101063B00, v6 + v2, v5 | 7);
  v0[9] = v7;
  *(_QWORD *)(v7 + 16) = v4;
  sub_1000126EC(v1, v7 + v6, type metadata accessor for OwnedBeaconRecord);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[10] = v9;
  v10 = sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  *v9 = v0;
  v9[1] = sub_1002752C8;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_100291758, v7, v10);
}

uint64_t sub_1002752C8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release();
  return swift_task_switch(sub_100275324, 0, 0);
}

uint64_t sub_100275324()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[11] = v0[2];
  return swift_task_switch(sub_100275340, v1, 0);
}

uint64_t sub_100275340()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = (void *)v0[11];
  v2 = v0[5];
  v0[12] = type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101063B28, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  swift_retain();
  v4 = v1;
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F47A0, v3);
  swift_release();
  return swift_task_switch(sub_1002753E8, 0, 0);
}

uint64_t sub_1002753E8()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 104) == 1)
    return swift_task_switch(sub_10027544C, *(_QWORD *)(v0 + 40), 0);

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027544C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_retain();
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F47A8, v1);
  swift_release();
  return swift_task_switch(sub_1002754B8, 0, 0);
}

uint64_t sub_1002754B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002754F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  char v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v20 = a1;
  v21 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D88, "#Durian: Proceeding to unpair and remove pairing lock.", 54, 2, _swiftEmptyArrayStorage);
  v43 = a2;
  v44 = a3;
  v22 = sub_1000330C8();
  v23 = swift_bridgeObjectRetain(a3);
  v24 = Data.init<A>(hexString:)(&v43, &type metadata for String, v22, v23);
  if (v25 >> 60 == 15)
    goto LABEL_6;
  v26 = v24;
  v27 = v25;
  v43 = a4;
  v44 = a5;
  v28 = swift_bridgeObjectRetain(a5);
  v29 = Data.init<A>(hexString:)(&v43, &type metadata for String, v22, v28);
  if (v30 >> 60 == 15)
  {
    v24 = sub_10001EF3C(v26, v27);
LABEL_6:
    v31 = static os_log_type_t.error.getter(v24);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7D88, "#Durian: Insufficient info for unpair.", 38, 2, _swiftEmptyArrayStorage);
    v32 = sub_10028FA08();
    v33 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v32, 0, 0);
    *v34 = 3;
    a6();
    return swift_errorRelease(v33);
  }
  v36 = v29;
  v37 = v30;
  v38 = type metadata accessor for OwnedBeaconRecord(0);
  v39 = *(_QWORD *)(a10 + *(int *)(v38 + 68));
  v40 = *(_QWORD *)(a10 + *(int *)(v38 + 64));
  v43 = v26;
  v44 = v27;
  v45 = v36;
  v46 = v37;
  v47 = a8;
  v48 = a9;
  v49 = v39;
  v50 = v40;
  sub_10001BD08(v26, v27);
  sub_10001BD08(v36, v37);
  swift_bridgeObjectRetain(a9);
  sub_1002757FC(a10, &v43, a12 & 1, v20 & 1);
  v41 = (_QWORD *)swift_allocObject(&unk_101063970, 40, 7);
  v41[2] = a13;
  v41[3] = a6;
  v41[4] = a7;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100290940, v41);
  swift_release();
  swift_release();
  v42 = (_QWORD *)swift_allocObject(&unk_101063998, 40, 7);
  v42[2] = a13;
  v42[3] = a6;
  v42[4] = a7;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_100290958, v42);
  swift_release();
  swift_release();
  swift_release();
  sub_10001BC14(v26, v27);
  sub_10001BC14(v36, v37);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v36, v37);
  return sub_10001EF3C(v26, v27);
}

uint64_t sub_1002757FC(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v70 = a4;
  v71 = a3;
  v68 = a2;
  v5 = *v4;
  v74 = a1;
  v75 = v5;
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v67 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v10 = v9;
  v11 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignpostID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  v17 = (char *)&v54 - v16;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v73 = Future.init()();
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v19 = (id)qword_1011B7D88;
  v20 = v17;
  v72 = v17;
  OSSignpostID.init(log:)(v19);
  v64 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v21 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64(v21, v20, v12);
  sub_10005972C(v74, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
  v22 = *(unsigned __int8 *)(v13 + 80);
  v23 = (v22 + 16) & ~v22;
  v61 = v23;
  v62 = v23 + v14;
  v24 = (v23 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = *(unsigned __int8 *)(v8 + 80);
  v58 = v10;
  v25 = (v57 + v24 + 8) & ~v57;
  v59 = v22 | v57 | 7;
  v66 = v13;
  v26 = (v10 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = v12;
  v56 = v12;
  v28 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = (uint64_t)v11;
  v30 = swift_allocObject(&unk_101063A60, v28 + 8, v59);
  v63 = v30;
  v60 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v54 = v21;
  v60(v30 + v23, v21, v27);
  v31 = v69;
  *(_QWORD *)(v30 + v24) = v69;
  v32 = v29;
  v55 = v29;
  sub_1000126EC(v29, v30 + v25, type metadata accessor for OwnedBeaconRecord);
  *(_QWORD *)(v30 + v26) = v73;
  *(_QWORD *)(v30 + v28) = v75;
  swift_retain();
  v33 = swift_retain();
  v34 = static os_signpost_type_t.begin.getter(v33);
  v35 = v72;
  os_signpost(_:dso:log:name:signpostID:)(v34, &_mh_execute_header, qword_1011B7D88, "removePairingLock", 17, 2, v72);
  v36 = v74;
  v37 = v74 + *(int *)(v65 + 20);
  v38 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v67, v37, v38);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v40, 0, 1, v38);
  v68 = (uint64_t *)sub_100652BD0(v40, v68);
  sub_100004048(v40, &qword_1010ED860);
  v41 = v21;
  v42 = v56;
  v64(v41, v35, v56);
  sub_10005972C(v36, v32, type metadata accessor for OwnedBeaconRecord);
  v43 = v62;
  v44 = (v57 + (v62 & 0xFFFFFFFFFFFFFFF8) + 16) & ~v57;
  v45 = v44 + v58;
  v46 = (((v44 + v58) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v47 = v31;
  v48 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  v49 = swift_allocObject(&unk_101063A88, v48 + 8, v59);
  v50 = (v45 & 0xFFFFFFFFFFFFFFF8) + v49;
  v60(v49 + v61, v54, v42);
  *(_BYTE *)(v49 + v43) = v70 & 1;
  *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFF8) + v49 + 8) = v47;
  sub_1000126EC(v55, v49 + v44, type metadata accessor for OwnedBeaconRecord);
  *(_BYTE *)(v49 + v45) = v71 & 1;
  v51 = v63;
  *(_QWORD *)(v50 + 8) = sub_100290E18;
  *(_QWORD *)(v50 + 16) = v51;
  v52 = v73;
  *(_QWORD *)(v49 + v46) = v73;
  *(_QWORD *)(v49 + v48) = v75;
  swift_retain();
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1002911C4, v49);
  swift_release();
  swift_release();
  swift_retain();
  Future.addFailure(block:)(sub_100291288, v52);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v42);
  return v52;
}

uint64_t sub_100275CA4(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;

  v5 = *a1;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v9 + 56) = &type metadata for Bool;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 32) = v5;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Reset & pairing lock remove success - %i", v12);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0);
  v10 = swift_allocObject(&unk_101063A10, 25, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = v5;
  swift_retain();
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1010F4780, v10);
  swift_release();
  return a3(0);
}

uint64_t sub_100275DF8(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 24) = a2;
  *(_QWORD *)(v2 + 16) = a1;
  return swift_task_switch(sub_100275E18, a1, 0);
}

uint64_t sub_100275E18()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_BYTE *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_101063A38, 49, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = v1;
  swift_retain(v2);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4788, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100275EB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  _BYTE v16[8];

  v6 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v16, v15);
  v10 = Error.localizedDescription.getter(v15[1], v15[2]);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Error during reset & pairing lock remove - %@", 54, 2, v9);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0);
  v13 = swift_allocObject(&unk_1010639C0, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a1;
  swift_retain();
  swift_errorRetain(a1);
  static Transaction.asyncTask(name:block:)("PairingAnalytics", 16, 2, &unk_1010F4768, v13);
  swift_release();
  return a3(a1);
}

uint64_t sub_10027603C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100276058, a1, 0);
}

uint64_t sub_100276058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  type metadata accessor for Transaction(0);
  v3 = swift_allocObject(&unk_1010639E8, 49, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 48) = 0;
  swift_retain(v1);
  swift_errorRetain(v2);
  static Transaction.asyncTask(name:block:)("ItemPairEvent", 13, 2, &unk_1010F4770, v3);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002760F8(unsigned __int8 *a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t), uint64_t a5, void (*a6)(void), int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;

  v10 = *a1;
  v11 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v12 = qword_1011B7D88;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v14 + 56) = &type metadata for Bool;
  *(_QWORD *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = v10;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "#Durian: Connection with device successful - %i", a7);
  v15 = swift_bridgeObjectRelease();
  v16 = static os_signpost_type_t.end.getter(v15);
  v17 = qword_1011B7D88;
  v18 = os_signpost(_:dso:log:name:signpostID:)(v16, &_mh_execute_header, qword_1011B7D88, "preConnection", 13, 2, a2);
  if ((v10 & 1) != 0 || (a3 & 1) != 0)
    return a4(v10);
  v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v17, "#Durian: Can't force unpair. Completing with generic error.", 59, 2, _swiftEmptyArrayStorage);
  v20 = sub_10028FA08();
  v21 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v20, 0, 0);
  *v22 = 0;
  a6();
  return swift_errorRelease(v21);
}

uint64_t sub_1002762B4(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v24[3];
  _BYTE v25[8];

  v9 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v10 = qword_1011B7D88;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v25, v24);
  v13 = Error.localizedDescription.getter(v24[1], v24[2]);
  v15 = v14;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  *(_QWORD *)(v12 + 64) = sub_10001AA00();
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v15;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "#Durian: Error during connection - %@", 37, 2, v12);
  v16 = swift_bridgeObjectRelease();
  v17 = static os_signpost_type_t.end.getter(v16);
  v18 = qword_1011B7D88;
  v19 = os_signpost(_:dso:log:name:signpostID:)(v17, &_mh_execute_header, qword_1011B7D88, "preConnection", 13, 2, a2);
  if ((a3 & 1) != 0)
    return a4(0);
  v21 = static os_log_type_t.default.getter(v19);
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v18, "#Durian: Can't force unpair. Completing with connection error.", 62, 2, _swiftEmptyArrayStorage);
  return a6(a1);
}

id sub_100276454(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id result;
  void *v42;
  uint64_t uniqueChipID;
  uint64_t v44;
  void *v45;
  uint64_t chipID;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(void);
  unint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, char *, uint64_t);
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  char *v112;
  uint64_t v113;
  void (*v114)(void);
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119[2];
  uint64_t v120;
  uint64_t v121;

  v114 = a3;
  v115 = a4;
  v109 = a2;
  v5 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v106 = *((_QWORD *)v5 - 1);
  v6 = __chkstk_darwin(v5);
  v111 = (void (*)(char *, char *, uint64_t))((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = v7;
  __chkstk_darwin(v6);
  v107 = (uint64_t)&v95 - v8;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v108 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for AccessoryUnpairData(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for UUID(0);
  v117 = *(_QWORD *)(v113 - 8);
  v17 = __chkstk_darwin(v113);
  v112 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v116 = (char *)&v95 - v20;
  v21 = static os_log_type_t.default.getter(v19);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v22 = qword_1011B7DF0;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  v105 = a1 + v5[5];
  v25 = UUID.uuidString.getter(v24);
  v118 = a1;
  v27 = v26;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v25;
  *(_QWORD *)(v24 + 40) = v27;
  v28 = v118;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "unpairAccessory %@.", 19, 2, v24);
  swift_bridgeObjectRelease();
  sub_10005972C(v28 + v5[6], (uint64_t)v16, type metadata accessor for StableIdentifier);
  if (swift_getEnumCaseMultiPayload(v16, v14) == 2)
  {
    v29 = sub_10001A9A8(&qword_101106F40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = &v16[*(int *)(v29 + 80)];
    v32 = *(_QWORD *)v30;
    v31 = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRelease();
    v33 = v116;
    v34 = v117;
    v35 = v113;
    v111 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
    v111(v116, v16, v113);
    v36 = (unint64_t)sub_100B118D0();
    v38 = v37;
    v39 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0)
      v39 = v36 & 0xFFFFFFFFFFFFLL;
    if (!v39)
    {
      swift_bridgeObjectRelease();
      v69 = swift_bridgeObjectRelease();
      v70 = static os_log_type_t.error.getter(v69);
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, qword_1011B7DF0, "Insufficient info to remove pairing lock.", 41, 2, _swiftEmptyArrayStorage);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    }
    v40 = v36;
    v103 = v32;
    result = (id)MobileGestalt_get_current_device(v36);
    if (result)
    {
      v42 = result;
      v101 = v40;
      v102 = v31;
      uniqueChipID = MobileGestalt_get_uniqueChipID();

      result = (id)MobileGestalt_get_current_device(v44);
      if (result)
      {
        v45 = result;
        chipID = MobileGestalt_get_chipID();

        v100 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
        v100(v112, v116, v35);
        v119[0] = uniqueChipID;
        v99 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
        v98 = v47;
        v119[0] = chipID;
        v97 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
        v96 = v48;
        v49 = (uint64_t *)(v118 + v5[15]);
        v51 = *v49;
        v50 = v49[1];
        swift_bridgeObjectRetain(v50);
        v52 = sub_1009A1DCC();
        if (v53 >> 60 == 15)
        {
          v54 = 0;
          v55 = 0;
        }
        else
        {
          v71 = v52;
          v72 = v53;
          v119[0] = v52;
          v119[1] = v53;
          v73 = sub_100133250();
          v54 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v73);
          v55 = v74;
          sub_10001EF3C(v71, v72);
        }
        v75 = v104;
        v76 = v113;
        v111(v13, v112, v113);
        v77 = &v13[v11[5]];
        v78 = v102;
        *(_QWORD *)v77 = v103;
        *((_QWORD *)v77 + 1) = v78;
        v79 = &v13[v11[6]];
        *(_QWORD *)v79 = v101;
        *((_QWORD *)v79 + 1) = v38;
        v80 = (uint64_t *)&v13[v11[7]];
        v81 = v98;
        *v80 = v99;
        v80[1] = v81;
        v82 = (uint64_t *)&v13[v11[8]];
        v83 = v96;
        *v82 = v97;
        v82[1] = v83;
        v84 = &v13[v11[9]];
        *(_QWORD *)v84 = v51;
        *((_QWORD *)v84 + 1) = v50;
        v85 = (uint64_t *)&v13[v11[10]];
        *v85 = v54;
        v85[1] = v55;
        v86 = v110;
        sub_1007929F8();
        v87 = (uint64_t)v108;
        v100(v108, (char *)v105, v76);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v87, 0, 1, v76);
        v88 = v107;
        sub_10005972C(v118, v107, type metadata accessor for OwnedBeaconRecord);
        v89 = *(unsigned __int8 *)(v106 + 80);
        v90 = (v89 + 32) & ~v89;
        v91 = (v75 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
        v92 = swift_allocObject(&unk_101063B78, v91 + 9, v89 | 7);
        v93 = v115;
        *(_QWORD *)(v92 + 16) = v114;
        *(_QWORD *)(v92 + 24) = v93;
        sub_1000126EC(v88, v92 + v90, type metadata accessor for OwnedBeaconRecord);
        v94 = v92 + v91;
        *(_QWORD *)v94 = v86;
        *(_BYTE *)(v94 + 8) = v109 & 1;
        swift_retain();
        swift_retain();
        sub_1002A0654(v87, (uint64_t)v13, (uint64_t)sub_100291B74, v92);
        swift_release();
        swift_release();
        sub_100004048(v87, &qword_1010ED860);
        sub_1000126B0((uint64_t)v13, type metadata accessor for AccessoryUnpairData);
        return (id)(*(uint64_t (**)(char *, uint64_t))(v117 + 8))(v116, v76);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
  sub_1000126B0((uint64_t)v16, type metadata accessor for StableIdentifier);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v56 = type metadata accessor for Logger(0);
  sub_10001A9E8(v56, (uint64_t)qword_1011B7DF8);
  v57 = v111;
  v58 = sub_10005972C(v28, (uint64_t)v111, type metadata accessor for OwnedBeaconRecord);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.error.getter(v59);
  if (os_log_type_enabled(v59, v60))
  {
    v61 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(32, -1);
    v119[0] = v62;
    *(_DWORD *)v61 = 141558275;
    v120 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v61 + 4, v61 + 12);
    *(_WORD *)(v61 + 12) = 2081;
    sub_100C6ED38();
    v120 = sub_100016940(v63, v64, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v61 + 14, v61 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v57, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unsupported stableIdentifier: %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
    swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v61, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v57, type metadata accessor for OwnedBeaconRecord);
  }

  v65 = v114;
  v66 = sub_10028FA08();
  v67 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v66, 0, 0);
  *v68 = 6;
  v65();
  return (id)swift_errorRelease(v67);
}

id sub_100276CAC(char *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v19;
  int v20;

  v10 = *a1;
  v11 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v12 = qword_1011B7D88;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v14 + 56) = &type metadata for Bool;
  *(_QWORD *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = v10;
  *(_QWORD *)(v14 + 96) = &type metadata for Bool;
  *(_QWORD *)(v14 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 72) = a2 & 1;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Connection with device success [%d] force [%d]", v19, v20);
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0 || (a2 & 1) != 0)
    return sub_100276454(a4, a2 & 1, a5, a6);
  v15 = sub_10028FA08();
  v16 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v15, 0, 0);
  *v17 = 7;
  a5();
  return (id)swift_errorRelease(v16);
}

id sub_100276E1C(uint64_t a1, char a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;

  v11 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v12 = qword_1011B7D88;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v14 + 56) = &type metadata for Bool;
  *(_QWORD *)(v14 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v14 + 32) = a2 & 1;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Connection with device failed. Force [%d]", v16);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
    return sub_100276454(a6, 1, a3, a4);
  else
    return (id)((uint64_t (*)(uint64_t))a3)(a1);
}

id sub_100276F40(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id result;
  void *v43;
  uint64_t uniqueChipID;
  uint64_t v45;
  void *v46;
  uint64_t chipID;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[12];
  int v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(_QWORD);
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[16];
  uint64_t v77[8];
  char v78;
  _QWORD *v79;

  v5 = v4;
  v70 = a3;
  v71 = a4;
  LODWORD(v68) = a2;
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v72 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v9);
  v11 = &v65[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v14 = sub_10005972C(a1, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v73 = v9;
  v74 = v5;
  if (v17)
  {
    v18 = swift_slowAlloc(22, -1);
    v69 = v13;
    v19 = v18;
    v20 = swift_slowAlloc(32, -1);
    v77[0] = v20;
    *(_DWORD *)v19 = 141558275;
    v75 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = v21;
    v9 = v73;
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    v75 = sub_100016940(v24, v25, v77);
    v5 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "removeAirPodsPairingLock for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  }

  v26 = *(int *)(v9 + 40);
  v69 = a1;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + v26));
  v28 = sub_100265568(v27);
  swift_bridgeObjectRelease();
  swift_retain();
  v29 = sub_10028B8A4(v28, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n(v29, 2);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v67 = v29;
  if (v33)
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v77[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    swift_bridgeObjectRetain(v29);
    v38 = Array.description.getter(v37, v36);
    v40 = v39;
    swift_bridgeObjectRelease();
    v75 = sub_100016940(v38, v40, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "unpairDevices: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    v41 = swift_bridgeObjectRelease_n(v29, 2);
  }
  result = (id)MobileGestalt_get_current_device(v41);
  if (result)
  {
    v43 = result;
    uniqueChipID = MobileGestalt_get_uniqueChipID();

    result = (id)MobileGestalt_get_current_device(v45);
    if (result)
    {
      v46 = result;
      v66 = v68 & 1;
      chipID = MobileGestalt_get_chipID();

      v77[0] = uniqueChipID;
      v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v50 = v49;
      v68 = v49;
      v77[0] = chipID;
      v51 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v53 = v52;
      v54 = sub_100B118D0();
      v56 = v55;
      v57 = v73;
      v58 = v69;
      v59 = MACAddress.udid.getter(v54);
      v77[0] = v48;
      v77[1] = v50;
      v77[2] = v51;
      v77[3] = v53;
      v77[4] = (uint64_t)v54;
      v77[5] = v56;
      v77[6] = v59;
      v77[7] = v60;
      v78 = v66;
      v79 = v67;
      sub_1007929F8();
      v61 = v58 + *(int *)(v57 + 24);
      v62 = type metadata accessor for UUID(0);
      v63 = *(_QWORD *)(v62 - 8);
      v64 = (uint64_t)v72;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v63 + 16))(v72, v61, v62);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v63 + 56))(v64, 0, 1, v62);
      sub_1006EF54C(v64, (uint64_t)v77, v70, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (id)sub_100004048(v64, &qword_1010ED860);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100277510@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  int *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  int *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __n128 v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  char *v145;
  int *v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  int *v159;
  uint64_t *v160;
  char *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v171 = a2;
  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v168 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v163 = (uint64_t)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v165 = (uint64_t)&v163 - v9;
  v10 = type metadata accessor for UUID(0);
  v173 = *(_QWORD *)(v10 - 8);
  v174 = (_QWORD *)v10;
  v11 = __chkstk_darwin(v10);
  v167 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v169 = (char *)&v163 - v13;
  v14 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v19 = (char *)&v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OwnedBeaconRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v166 = (uint64_t)&v163 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v164 = (uint64_t)&v163 - v25;
  __chkstk_darwin(v24);
  v172 = (uint64_t)&v163 - v26;
  v27 = *a1;
  v28 = a1[1];
  v175 = sub_10080BC6C(v27, v28);
  swift_bridgeObjectRetain(v175);
  sub_10027EB6C(&v175, sub_10027F7D0);
  v170 = v2;
  if (v2)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x100278510);
  }
  swift_bridgeObjectRelease();
  if (v175[2])
  {
    sub_10005972C((uint64_t)v175 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v29, 1, v20);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010F47C0);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v27, v28);
    v31 = sub_10001BBBC(v27, v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = (_QWORD *)swift_slowAlloc(32, -1);
      v175 = v35;
      *(_DWORD *)v34 = 141558275;
      v177 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v36 = sub_10001BBBC(v27, v28);
      v37 = v168;
      static String.Encoding.utf8.getter(v36);
      v38 = String.init(data:encoding:)(v27, v28, v37);
      if (!v39)
        v38 = Data.hexString.getter(v27, v28);
      v40 = v38;
      v41 = v39;
      sub_10001BC14(v27, v28);
      v177 = sub_100016940(v40, v41, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v27, v28);
      sub_10001BC14(v27, v28);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing beacon record for %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_10001BC14(v27, v28);
      sub_10001BC14(v27, v28);
    }

    v71 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    v72 = v171;
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v173 + 56))((char *)v171 + v71[7], 1, 1, v174);
    *(_OWORD *)v72 = xmmword_100E22B20;
    *((_OWORD *)v72 + 1) = xmmword_100E22B20;
    v72[4] = v27;
    v72[5] = v28;
    v73 = (uint64_t *)((char *)v72 + v71[8]);
    *v73 = 0;
    v73[1] = 0;
    v74 = (uint64_t *)((char *)v72 + v71[9]);
    *v74 = 0;
    v74[1] = 0;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v71 - 1) + 56))(v72, 0, 1, v71);
    return sub_10001BBBC(v27, v28);
  }
  v42 = (uint64_t)v19;
  v43 = v172;
  sub_1000126EC(v42, v172, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C(v43 + *(int *)(v20 + 24), (uint64_t)v16, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if (EnumCaseMultiPayload == 3)
  {
    v76 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    v77 = &v16[v76[12]];
    v79 = *(_QWORD **)v77;
    v78 = *((_QWORD *)v77 + 1);
    v80 = &v16[v76[16]];
    v81 = *(_QWORD **)v80;
    v82 = *((_QWORD *)v80 + 1);
    v83 = &v16[v76[20]];
    v85 = *(_QWORD **)v83;
    v84 = *((_QWORD *)v83 + 1);
    v86 = v167;
    (*(void (**)(char *, char *, _QWORD *))(v173 + 32))(v167, v16, v174);
    v175 = v81;
    v176 = v82;
    v87 = sub_1000330C8();
    v89 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v88);
    if (v90 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v108 = v89;
      v109 = v90;
      v175 = v79;
      v176 = v78;
      v110 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v91);
      if (v111 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v117 = v110;
        v118 = v111;
        v175 = v85;
        v176 = v84;
        v119 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v112);
        if (v120 >> 60 != 15)
        {
          v136 = v120;
          v169 = (char *)v119;
          v138 = v173;
          v137 = v174;
          v139 = v86;
          v140 = v163;
          (*(void (**)(uint64_t, char *, _QWORD *))(v173 + 16))(v163, v139, v174);
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v138 + 56))(v140, 0, 1, v137);
          v141 = sub_1009A1DCC();
          if (v142 >> 60 == 15)
          {
            v143 = 0;
            v168 = 0;
          }
          else
          {
            v149 = v141;
            v150 = v142;
            v151 = sub_1001EDBAC(v141, v142);
            v153 = v152;
            sub_10001EF3C(v149, v150);
            v154 = Data.hexString.getter(v151, v153);
            v168 = v155;
            v156 = v151;
            v143 = v154;
            sub_10001BC14(v156, v153);
          }
          sub_1009A1DCC();
          if (v157 >> 60 != 15)
          {
            v166 = v143;
            __asm { BR              X11 }
          }
          (*(void (**)(char *, _QWORD *))(v173 + 8))(v167, v174);
          sub_1000126B0(v172, type metadata accessor for OwnedBeaconRecord);
          v158 = v171;
          *v171 = v108;
          v158[1] = v109;
          v158[2] = v117;
          v158[3] = v118;
          v158[4] = (uint64_t)v169;
          v158[5] = v136;
          v159 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
          sub_100005CF0(v163, (uint64_t)v158 + v159[7], &qword_1010ED860);
          v160 = (uint64_t *)((char *)v158 + v159[8]);
          v161 = v168;
          *v160 = v143;
          v160[1] = (uint64_t)v161;
          v162 = (uint64_t *)((char *)v158 + v159[9]);
          *v162 = 0;
          v162[1] = 0;
          return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v159 - 1) + 56))(v158, 0, 1, v159);
        }
        sub_10001EF3C(v117, v118);
      }
      sub_10001EF3C(v108, v109);
    }
    (*(void (**)(char *, _QWORD *))(v173 + 8))(v86, v174);
    sub_1000126B0(v43, type metadata accessor for OwnedBeaconRecord);
    v121 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v171, 1, 1, v121);
  }
  if (EnumCaseMultiPayload == 2)
  {
    v45 = (int *)sub_10001A9A8(&qword_101106F40);
    v46 = &v16[v45[12]];
    v47 = *(_QWORD **)v46;
    v48 = *((_QWORD *)v46 + 1);
    v49 = &v16[v45[16]];
    v51 = *(_QWORD **)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = &v16[v45[20]];
    v53 = *(_QWORD **)v52;
    v54 = *((_QWORD *)v52 + 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, _QWORD *))(v173 + 32))(v169, v16, v174);
    v175 = v53;
    v176 = v54;
    v55 = sub_1000330C8();
    v57 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v56);
    if (v58 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v60 = type metadata accessor for Logger(0);
      sub_10001A9E8(v60, (uint64_t)qword_1011B7DF8);
      v61 = v172;
      v62 = v164;
      v63 = sub_10005972C(v172, v164, type metadata accessor for OwnedBeaconRecord);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter(v64);
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc(22, -1);
        v67 = (_QWORD *)swift_slowAlloc(32, -1);
        v175 = v67;
        *(_DWORD *)v66 = 141558275;
        v177 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v66 + 4, v66 + 12);
        *(_WORD *)(v66 + 12) = 2081;
        sub_100C6ED38();
        v177 = sub_100016940(v68, v69, (uint64_t *)&v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Invalid serialNumber for %{private,mask.hash}s", (uint8_t *)v66, 0x16u);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        v70 = v172;
      }
      else
      {

        sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        v70 = v61;
      }
      sub_1000126B0(v70, type metadata accessor for OwnedBeaconRecord);
      v115 = v171;
      v116 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 1, 1, v116);
    }
    v102 = v57;
    v103 = v58;
    if (v50)
    {
      v175 = v51;
      v176 = v50;
      v104 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v59);
      v167 = v105;
      v168 = (char *)v104;
      if (v48)
      {
LABEL_29:
        v175 = v47;
        v176 = v48;
        v166 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v59);
        v107 = v106;
LABEL_42:
        v123 = v173;
        v122 = v174;
        v124 = v165;
        (*(void (**)(uint64_t, char *, _QWORD *))(v173 + 16))(v165, v169, v174);
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v123 + 56))(v124, 0, 1, v122);
        v125 = sub_1009A1DCC();
        if (v126 >> 60 == 15)
        {
          v127 = 0;
          v128 = 0;
        }
        else
        {
          v129 = v125;
          v130 = v126;
          v131 = sub_1001EDBAC(v125, v126);
          v133 = v132;
          sub_10001EF3C(v129, v130);
          v127 = Data.hexString.getter(v131, v133);
          v128 = v134;
          sub_10001BC14(v131, v133);
        }
        sub_1009A1DCC();
        if (v135 >> 60 != 15)
          __asm { BR              X11 }
        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        sub_1000126B0(v172, type metadata accessor for OwnedBeaconRecord);
        v144 = v171;
        v145 = v167;
        *v171 = (uint64_t)v168;
        v144[1] = (uint64_t)v145;
        v144[2] = v166;
        v144[3] = v107;
        v144[4] = v102;
        v144[5] = v103;
        v146 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
        sub_100005CF0(v165, (uint64_t)v144 + v146[7], &qword_1010ED860);
        v147 = (uint64_t *)((char *)v144 + v146[8]);
        *v147 = v127;
        v147[1] = v128;
        v148 = (uint64_t *)((char *)v144 + v146[9]);
        *v148 = 0;
        v148[1] = 0;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v146 - 1) + 56))(v144, 0, 1, v146);
      }
    }
    else
    {
      v167 = (char *)0xF000000000000000;
      v168 = 0;
      if (v48)
        goto LABEL_29;
    }
    v166 = 0;
    v107 = 0xF000000000000000;
    goto LABEL_42;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v92 = type metadata accessor for Logger(0);
  sub_10001A9E8(v92, (uint64_t)qword_1011B7DF8);
  v93 = v166;
  v94 = sub_10005972C(v43, v166, type metadata accessor for OwnedBeaconRecord);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.error.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = swift_slowAlloc(22, -1);
    v174 = (_QWORD *)swift_slowAlloc(32, -1);
    v175 = v174;
    *(_DWORD *)v97 = 141558275;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v97 + 4, v97 + 12);
    *(_WORD *)(v97 + 12) = 2081;
    sub_100C6ED38();
    v177 = sub_100016940(v98, v99, (uint64_t *)&v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v97 + 14, v97 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v93, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Unsupported beacon %{private,mask.hash}s", (uint8_t *)v97, 0x16u);
    v100 = v174;
    swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v97, -1, -1);

    v101 = v172;
  }
  else
  {

    sub_1000126B0(v93, type metadata accessor for OwnedBeaconRecord);
    v101 = v43;
  }
  sub_1000126B0(v101, type metadata accessor for OwnedBeaconRecord);
  v113 = v171;
  v114 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v113, 1, 1, v114);
  return sub_1000126B0((uint64_t)v16, type metadata accessor for StableIdentifier);
}

uint64_t sub_100278530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_101063E98, v15 + 16, v12 | 7);
  sub_1000126EC((uint64_t)v11, v16 + v13, type metadata accessor for OwnedBeaconGroup);
  *(_QWORD *)(v16 + v14) = a1;
  v17 = (_QWORD *)(v16 + v15);
  *v17 = a3;
  v17[1] = a4;
  swift_retain();
  swift_retain();
  sub_100276F40(a2, 0, (uint64_t (*)(_QWORD))sub_100293504, v16);
  return swift_release();
}

void sub_10027864C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v38[2];
  void (*v39)(void *);
  uint64_t v40;
  uint64_t v41;
  void *v42;

  v10 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(a1);
    v14 = swift_errorRetain(a1);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v41 = a1;
      v42 = (void *)v18;
      *(_DWORD *)v17 = 136446210;
      swift_errorRetain(a1);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v20 = String.init<A>(describing:)(&v41, v19);
      v41 = sub_100016940(v20, v21, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to remove pairing lock due to %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    type metadata accessor for UnpairError(0);
    v34 = v33;
    v41 = 4;
    v35 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v36 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
    _BridgedStoredNSError.init(_:userInfo:)(&v42, &v41, v35, v34, v36);
    v37 = v42;
    a4(v42);
    swift_errorRelease(a1);

  }
  else
  {
    v40 = a5;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7DF8);
    v23 = sub_10005972C(a2, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v38[1] = a3;
      v28 = v27;
      *(_DWORD *)v26 = 141558275;
      v41 = 1752392040;
      v42 = (void *)v27;
      v39 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      v29 = type metadata accessor for UUID(0);
      v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      v41 = sub_100016940(v31, v32, (uint64_t *)&v42);
      a4 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully removed pairing lock for group %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100278ACC(a2, 1, (void (*)(_QWORD))a4, v40);
  }
}

uint64_t sub_100278ACC(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[4];
  uint64_t v74;

  v5 = v4;
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v69 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v70 = v11;
  v71 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F4920);
  v61 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F4928);
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F4930);
  v64 = *(_QWORD *)(v18 - 8);
  v65 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010F4938);
  v67 = *(_QWORD *)(v21 - 8);
  v68 = v21;
  __chkstk_darwin(v21);
  v66 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = (uint64_t)_swiftEmptyArrayStorage;
  v72 = a1;
  sub_10036AC6C();
  v24 = v23;
  swift_retain();
  sub_10028AF88(v24, v5, &v74, a2);
  swift_bridgeObjectRelease();
  swift_release();
  v25 = v74;
  if ((unint64_t)v74 >> 62)
  {
    if (v74 < 0)
      v55 = v74;
    else
      v55 = v74 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v74);
    v56 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease();
    if (v56)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v26 = swift_allocObject(&unk_101063D30, 24, 7);
    v60 = v26;
    *(_QWORD *)(v26 + 16) = 0;
    v27 = (uint64_t *)(v26 + 16);
    v73[0] = v25;
    swift_bridgeObjectRetain(v25);
    v28 = sub_10001A9A8(&qword_1010F4940);
    v59 = a3;
    v29 = v28;
    v30 = sub_10001A9A8(&qword_1010F4948);
    v58 = a4;
    v31 = v30;
    v32 = sub_1000193A4(&qword_1010F4950, &qword_1010F4940, (const char *)&protocol conformance descriptor for Future<A, B>);
    v33 = sub_1000193A4(&qword_1010F4958, &qword_1010F4948, (const char *)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(v73, v29, v31, v32, v33);
    v34 = sub_1000193A4(&qword_1010F4960, &qword_1010F4920, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
    Publisher.collect()(v12, v34);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v14, v12);
    v35 = sub_10001A9A8(&qword_1010F4968);
    v36 = sub_1000193A4(&qword_1010F4970, &qword_1010F4928, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
    v37 = v63;
    Publisher.map<A>(_:)(sub_10027BAEC, 0, v63, v35, v36);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v17, v37);
    v38 = sub_10001A9A8(&qword_1010F4978);
    v39 = sub_1000193A4(&qword_1010F4980, &qword_1010F4930, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v40 = sub_1000193A4(&qword_1010F4988, &qword_1010F4978, (const char *)&protocol conformance descriptor for Just<A>);
    v41 = v65;
    v42 = v66;
    Publisher.catch<A>(_:)(sub_10027BAFC, 0, v65, v38, v39, v40);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v20, v41);
    v43 = v71;
    sub_10005972C(v72, v71, type metadata accessor for OwnedBeaconGroup);
    v44 = *(unsigned __int8 *)(v69 + 80);
    v45 = (v44 + 16) & ~v44;
    v46 = (v70 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    v47 = (v46 + 23) & 0xFFFFFFFFFFFFFFF8;
    v48 = swift_allocObject(&unk_101063EC0, v47 + 8, v44 | 7);
    sub_1000126EC(v43, v48 + v45, type metadata accessor for OwnedBeaconGroup);
    v49 = (_QWORD *)(v48 + v46);
    v50 = v58;
    *v49 = v59;
    v49[1] = v50;
    *(_QWORD *)(v48 + v47) = v60;
    v51 = sub_1000193A4(&qword_1010F4990, &qword_1010F4938, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    v52 = v68;
    v53 = Publisher<>.sink(receiveValue:)(sub_100293660, v48, v68, v51);
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v52);
    swift_beginAccess(v27, v73, 1, 0);
    *v27 = v53;
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  if ((a2 & 1) != 0)
    sub_1009FA384(v72, a3, a4);
  else
    a3(0);
  return swift_bridgeObjectRelease();
}

void sub_100279034(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, int a5, void (*a6)(void *))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  void *v48;

  v12 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v44 = a5;
      v19 = swift_slowAlloc(12, -1);
      v46 = a4;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      v45 = a3;
      v22 = v21;
      v47 = a1;
      v48 = (void *)v21;
      *(_DWORD *)v20 = 136446210;
      swift_errorRetain(a1);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v24 = String.init<A>(describing:)(&v47, v23);
      v47 = sub_100016940(v24, v25, (uint64_t *)&v48);
      v26 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to send unpair command due to %{public}s", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v27 = v22;
      a3 = v45;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      if ((v26 & 1) == 0)
      {
LABEL_6:
        type metadata accessor for UnpairError(0);
        v29 = v28;
        v47 = 5;
        v30 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v31 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
        _BridgedStoredNSError.init(_:userInfo:)(&v48, &v47, v30, v29, v31);
        v32 = v48;
        a6(v48);
        swift_errorRelease(a1);

        return;
      }
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      if ((a5 & 1) == 0)
        goto LABEL_6;
    }
    a3();
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7DF8);
    v34 = sub_10005972C(a2, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      *(_DWORD *)v37 = 141558275;
      v47 = 1752392040;
      v48 = (void *)v38;
      v46 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v47 = sub_100016940(v41, v42, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully sent unpair command for group %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    }

    a3();
  }
}

uint64_t sub_1002794D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95;
  _BYTE v96[24];

  v84 = a2;
  v85 = a3;
  v4 = sub_10001A9A8(&qword_1010F4850);
  v92 = *(_QWORD *)(v4 - 8);
  v93 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F4858);
  v90 = *(_QWORD *)(v7 - 8);
  v91 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v81 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v82 = v12;
  v83 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v87 = (uint64_t)&v77 - v13;
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  v78 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v79 = v16;
  v80 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v77 - v17;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7DF8);
  v20 = sub_10005972C(a1, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v86 = a1;
  if (v23)
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(32, -1);
    v94[0] = v25;
    *(_DWORD *)v24 = 141558275;
    v95 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    v89 = v24 + 14;
    v26 = type metadata accessor for UUID(0);
    v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
    v95 = sub_100016940(v28, v29, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v89, v24 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sending unpair command to all members of group %{private,mask.hash}s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v30 = v24;
    a1 = v86;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }

  sub_10036AC6C();
  v32 = v31;
  v33 = v88;
  swift_retain();
  v34 = (uint64_t)sub_10028BB00(v32, v33);
  swift_bridgeObjectRelease();
  swift_release();
  if (!((unint64_t)v34 >> 62))
  {
    v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_8;
LABEL_19:
    swift_bridgeObjectRelease();
    v53 = _swiftEmptyArrayStorage;
LABEL_20:
    v55 = v88;
    sub_1007F3570(a1, v87);
    v56 = swift_allocObject(&unk_101063D08, 17, 7);
    *(_BYTE *)(v56 + 16) = 0;
    v57 = swift_allocObject(&unk_101063D30, 24, 7);
    *(_QWORD *)(v57 + 16) = 0;
    v94[0] = (uint64_t)v53;
    v58 = a1;
    v59 = sub_10001A9A8(&qword_1010F4898);
    v60 = sub_1000193A4(&qword_1010F48A0, &qword_1010F4898, (const char *)&protocol conformance descriptor for [A]);
    v93 = sub_1000193A4(&qword_1010F48A8, &qword_1010F48B0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v61 = Sequence<>.merged()(v59, v60, v93);
    swift_bridgeObjectRelease();
    v94[0] = v61;
    v62 = swift_allocObject(&unk_1010637E0, 24, 7);
    swift_weakInit(v62 + 16, v55);
    v63 = v80;
    sub_10005972C(v58, v80, type metadata accessor for OwnedBeaconGroup);
    v64 = *(unsigned __int8 *)(v78 + 80);
    v65 = (v64 + 48) & ~v64;
    v66 = (v79 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
    v67 = (_QWORD *)swift_allocObject(&unk_101063D58, v66 + 8, v64 | 7);
    v67[2] = v62;
    v67[3] = v56;
    v68 = v85;
    v67[4] = v84;
    v67[5] = v68;
    sub_1000126EC(v63, (uint64_t)v67 + v65, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)((char *)v67 + v66) = v57;
    v69 = v87;
    v70 = v83;
    sub_10000F9B8(v87, v83, (uint64_t *)&unk_1010F47C0);
    v71 = *(unsigned __int8 *)(v81 + 80);
    v72 = (v71 + 16) & ~v71;
    v73 = (v82 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
    v74 = swift_allocObject(&unk_101063D80, v73 + 8, v71 | 7);
    sub_100005CF0(v70, v74 + v72, (uint64_t *)&unk_1010F47C0);
    *(_QWORD *)(v74 + v73) = v56;
    swift_retain_n(v56, 2);
    swift_retain();
    swift_retain();
    v75 = sub_10001A9A8(&qword_1010F48B0);
    v76 = Publisher.sink(receiveCompletion:receiveValue:)(sub_100292C70, v67, sub_100292F9C, v74, v75, v93);
    swift_release();
    swift_release();
    swift_release();
    sub_100004048(v69, (uint64_t *)&unk_1010F47C0);
    swift_beginAccess(v57 + 16, v94, 1, 0);
    *(_QWORD *)(v57 + 16) = v76;
    swift_release();
    swift_release();
    return swift_release();
  }
  if (v34 < 0)
    v54 = v34;
  else
    v54 = v34 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v34);
  v35 = _CocoaArrayWrapper.endIndex.getter(v54);
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_19;
LABEL_8:
  v94[0] = (uint64_t)_swiftEmptyArrayStorage;
  result = specialized ContiguousArray.reserveCapacity(_:)(v35);
  if ((v35 & 0x8000000000000000) == 0)
  {
    v37 = 0;
    v89 = v34 & 0xC000000000000001;
    v38 = v34;
    do
    {
      if (v89)
      {
        v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v34);
      }
      else
      {
        v39 = *(_QWORD *)(v34 + 8 * v37 + 32);
        swift_retain();
      }
      ++v37;
      v95 = v39;
      v40 = sub_10001A9A8(&qword_1010F4860);
      v41 = sub_10001A9A8(&qword_1010F4868);
      v42 = sub_1000193A4(&qword_1010F4870, &qword_1010F4860, (const char *)&protocol conformance descriptor for Future<A, B>);
      Publisher.map<A>(_:)(sub_100279D28, 0, v40, v41, v42);
      v43 = sub_10001A9A8(&qword_1010F4878);
      v44 = sub_1000193A4(&qword_1010F4880, &qword_1010F4850, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v45 = sub_1000193A4(&qword_1010F4888, &qword_1010F4878, (const char *)&protocol conformance descriptor for Just<A>);
      v46 = v93;
      Publisher.catch<A>(_:)(sub_100279D80, 0, v93, v43, v44, v45);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v6, v46);
      v47 = sub_1000193A4(&qword_1010F4890, &qword_1010F4858, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v48 = v91;
      v49 = Publisher.eraseToAnyPublisher()(v91, v47);
      (*(void (**)(char *, uint64_t))(v90 + 8))(v9, v48);
      v50 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v50);
      v51 = *(_QWORD *)(v94[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      v52 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
      specialized ContiguousArray._endMutation()(v52);
      v34 = v38;
    }
    while (v35 != v37);
    v53 = (_QWORD *)v94[0];
    swift_bridgeObjectRelease();
    a1 = v86;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_100279D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  v5 = sub_10001A9A8(&qword_1010F4868);
  return swift_storeEnumTagMultiPayload(a2, v5, 0);
}

uint64_t sub_100279D80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *a1;
  *v4 = v5;
  swift_storeEnumTagMultiPayload(v4, v2, 1);
  swift_errorRetain(v5);
  return Just.init(_:)(v4, v2);
}

uint64_t sub_100279E18(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, __n128), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  __n128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];

  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = &v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v30, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    v19 = swift_beginAccess(a3 + 16, v29, 0, 0);
    if ((*(_BYTE *)(a3 + 16) & 1) != 0)
    {
      a4(0, v19);
    }
    else
    {
      v20 = (_QWORD *)(a7 + 16);
      v27 = type metadata accessor for Transaction(0);
      sub_10005972C(a6, (uint64_t)&v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for OwnedBeaconGroup);
      v21 = *(unsigned __int8 *)(v14 + 80);
      v22 = (v21 + 16) & ~v21;
      v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
      v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      v25 = swift_allocObject(&unk_101063DA8, v24 + 16, v21 | 7);
      sub_1000126EC((uint64_t)v16, v25 + v22, type metadata accessor for OwnedBeaconGroup);
      *(_QWORD *)(v25 + v23) = v18;
      v26 = (_QWORD *)(v25 + v24);
      *v26 = a4;
      v26[1] = a5;
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)("sendUnpairCommand.UnpairManagedPeripheral", 41, 2, &unk_1010F48C0, v25);
      swift_release();
      swift_release();
      swift_beginAccess(v20, v28, 1, 0);
      *v20 = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100279FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  return swift_task_switch(sub_100279FF4, 0, 0);
}

uint64_t sub_100279FF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10036AC6C();
  v2 = v1;
  swift_retain();
  sub_10028B45C(v2);
  v4 = v3;
  v0[26] = v3;
  swift_bridgeObjectRelease();
  swift_release();
  v0[15] = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[27] = v5;
  v6 = sub_10001A9A8(&qword_1010EE190);
  v7 = sub_1000193A4((unint64_t *)&unk_1010F48D8, &qword_1010EE190, (const char *)&protocol conformance descriptor for [A]);
  *v5 = v0;
  v5[1] = sub_10027A0D8;
  return Sequence.asyncFilter(_:)(&unk_1010F48C8, 0, v6, v7);
}

uint64_t sub_10027A0D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10027A13C, 0, 0);
}

uint64_t sub_10027A13C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  void (*v3)(void *);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t (__cdecl *v9)();

  if (*(_QWORD *)(*(_QWORD *)(v0 + 224) + 16))
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC((__int128 *)(v0 + 16), v0 + 56);
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
      *(_QWORD *)(v0 + 232) = v2;
      *v2 = v0;
      v2[1] = sub_10027A2E8;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v3 = *(void (**)(void *))(v0 + 192);
    swift_bridgeObjectRelease();
    type metadata accessor for UnpairError(0);
    v5 = v4;
    *(_QWORD *)(v0 + 168) = 1;
    v6 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v7 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 160), v0 + 168, v6, v5, v7);
    v8 = *(void **)(v0 + 160);
    v3(v8);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10027A2E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10027A344, 0, 0);
}

uint64_t sub_10027A344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void (*v11)(void *);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 224);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 248) = v3;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    v4 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v0 + 256) = v4;
    *v4 = v0;
    v4[1] = sub_10027A554;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v4, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F48F0, v3, &type metadata for () + 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "sendUnpairCommand: missing OwnerCommandService to send unpair!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(void (**)(void *))(v0 + 192);

    type metadata accessor for UnpairError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 136) = 1;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 128), v0 + 136, v14, v13, v15);
    v16 = *(void **)(v0 + 128);
    v11(v16);

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10027A554()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10027A5BC, 0, 0);
}

uint64_t sub_10027A5BC()
{
  uint64_t v0;
  void (*v1)(void *);
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(void (**)(void *))(v0 + 192);
  type metadata accessor for UnpairError(0);
  v3 = v2;
  *(_QWORD *)(v0 + 152) = 1;
  v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 144), v0 + 152, v4, v3, v5);
  v6 = *(void **)(v0 + 144);
  v1(v6);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027A688()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110EEA4);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10027A6D0;
  return sub_1009A1F44();
}

uint64_t sub_10027A6D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10027A724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v5);
  v4[13] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v4[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v4[16] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v4[20] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[21] = v11;
  v4[22] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10027A804, 0, 0);
}

uint64_t sub_10027A804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 120);
    v60 = *(_QWORD *)(v0 + 176) + *(int *)(*(_QWORD *)(v0 + 160) + 20);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v59 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    v61 = v4;
    while (1)
    {
      v67 = v2;
      v9 = *(_QWORD *)(v0 + 176);
      v10 = *(_QWORD *)(v0 + 152);
      v11 = *(_QWORD *)(v0 + 112);
      sub_10005972C(v5, v9, type metadata accessor for OwnedBeaconRecord);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      v12(v10, v60, v11);
      sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v13 = *(_QWORD *)(v0 + 144);
      v14 = *(_QWORD *)(v0 + 152);
      v15 = *(_QWORD *)(v0 + 112);
      v16 = type metadata accessor for Logger(0);
      sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
      v64 = v12;
      v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v13, v14, v15);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      v20 = os_log_type_enabled(v18, v19);
      v21 = *(_QWORD *)(v0 + 144);
      v22 = *(_QWORD *)(v0 + 112);
      v66 = v5;
      if (v20)
      {
        v23 = swift_slowAlloc(22, -1);
        v24 = swift_slowAlloc(32, -1);
        v68 = v24;
        *(_DWORD *)v23 = 141558275;
        *(_QWORD *)(v23 + 4) = 1752392040;
        *(_WORD *)(v23 + 12) = 2081;
        v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
        *(_QWORD *)(v23 + 14) = sub_100016940(v26, v27, &v68);
        swift_bridgeObjectRelease();
        v65 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v65(v21, v22);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "sendUnpairCommand: Sending unpair to managed peripheral %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        v65 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v65(v21, v22);
      }

      v28 = *(_QWORD *)(v0 + 152);
      v30 = *(_QWORD *)(v0 + 128);
      v29 = *(_QWORD *)(v0 + 136);
      v32 = *(_QWORD *)(v0 + 104);
      v31 = *(_QWORD *)(v0 + 112);
      v33 = *(_QWORD *)(v0 + 88);
      v62 = v32;
      v63 = *(_QWORD *)(v0 + 96);
      v34 = type metadata accessor for TaskPriority(0);
      v35 = *(_QWORD *)(v34 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v32, 1, 1, v34);
      v64(v29, v28, v31);
      v36 = *(unsigned __int8 *)(v4 + 80);
      v37 = (v36 + 40) & ~v36;
      v38 = (_QWORD *)swift_allocObject(&unk_101063DD0, v37 + v30, v36 | 7);
      v38[2] = 0;
      v39 = v38 + 2;
      v38[3] = 0;
      v38[4] = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))((char *)v38 + v37, v29, v31);
      sub_10000F9B8(v62, v63, &qword_1010F46C0);
      LODWORD(v37) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v63, 1, v34);
      v40 = swift_retain();
      v41 = *(_QWORD *)(v0 + 96);
      if ((_DWORD)v37 == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010F46C0);
        v42 = 0;
        v43 = *v39;
        if (!*v39)
          goto LABEL_13;
      }
      else
      {
        v49 = TaskPriority.rawValue.getter(v40);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v41, v34);
        v42 = v49;
        v43 = *v39;
        if (!*v39)
        {
LABEL_13:
          v46 = 0;
          v48 = 0;
          goto LABEL_14;
        }
      }
      v44 = v38[3];
      ObjectType = swift_getObjectType(v43);
      swift_unknownObjectRetain(v43);
      v46 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v44);
      v48 = v47;
      swift_unknownObjectRelease(v43);
LABEL_14:
      v50 = **(_QWORD **)(v0 + 72);
      v51 = swift_allocObject(&unk_101063DF8, 32, 7);
      *(_QWORD *)(v51 + 16) = &unk_1010F4900;
      *(_QWORD *)(v51 + 24) = v38;
      v52 = v48 | v46;
      if (v48 | v46)
      {
        v52 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v46;
        *(_QWORD *)(v0 + 40) = v48;
      }
      v6 = *(_QWORD *)(v0 + 152);
      v8 = *(_QWORD *)(v0 + 104);
      v7 = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v52;
      *(_QWORD *)(v0 + 64) = v50;
      swift_task_create(v42 | 0x3100, v0 + 48, &type metadata for () + 1, &unk_1010F4908, v51);
      swift_release();
      sub_100004048(v8, &qword_1010F46C0);
      v65(v6, v7);
      v5 = v66 + v59;
      v2 = v67 - 1;
      v4 = v61;
      if (v67 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v53 = *(_QWORD *)(v0 + 144);
  v54 = *(_QWORD *)(v0 + 152);
  v55 = *(_QWORD *)(v0 + 136);
  v57 = *(_QWORD *)(v0 + 96);
  v56 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v54);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027ACF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v5[7] = a4;
  v5[8] = a5;
  v6 = type metadata accessor for UUID(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v8);
  v5[12] = swift_task_alloc(v8);
  return swift_task_switch(sub_10027AD64, 0, 0);
}

uint64_t sub_10027AD64()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t **v6;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7DF8);
  v0[13] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying RX Unpair...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (uint64_t **)swift_task_alloc(dword_10111F184);
  v0[14] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_10027AE6C;
  return sub_100D5055C(v0[8], 0);
}

uint64_t sub_10027AE6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10027B0B0;
  else
    v3 = sub_10027AED0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027AED0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 80);
    v6 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 40) = 1752392040;
    v14 = v12;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v7 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v5, v7);
    *(_QWORD *)(v0 + 48) = sub_100016940(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RX Unpaired %{private,mask.hash}s completed successfully", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72));
  }

  v10 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027B0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *log;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 120);
    v20 = *(_QWORD *)(v0 + 80);
    log = v3;
    v6 = *(_QWORD *)(v0 + 72);
    v7 = swift_slowAlloc(32, -1);
    v22 = (uint64_t *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(32, -1);
    v24 = v23;
    *(_QWORD *)(v0 + 16) = 1752392040;
    *(_DWORD *)v7 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v8 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    *(_QWORD *)(v0 + 24) = sub_100016940(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v5, v6);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v19);
    v11 = _swift_stdlib_bridgeErrorToNSError(v19);
    *(_QWORD *)(v0 + 32) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 24, v7 + 32);
    *v22 = v11;
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, log, v4, "RX Unpaired %{private,mask.hash}s with error %{public}@", (uint8_t *)v7, 0x20u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v22, 1, v12);
    swift_slowDealloc(v22, -1, -1);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v19);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);
    swift_errorRelease(v13);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  v17 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10027B370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  void (*v33)(char *, char *, uint64_t);
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[3];
  uint64_t v68;
  uint64_t v69;

  v64 = a3;
  v65 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for OwnedBeaconRecord(0);
  v63 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v62 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v57 - v16;
  v18 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v20, &qword_1010F4868);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v18);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v22 = *v20;
    v23 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v24 = qword_1011B7DF0;
    if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v23))
    {
      swift_errorRetain(v22);
      swift_errorRetain(v22);
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v67[0] = v26;
      *(_DWORD *)v25 = 136315138;
      v68 = v22;
      swift_errorRetain(v22);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v28 = String.init<A>(describing:)(&v68, v27);
      v68 = sub_100016940(v28, v29, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "Unpair failed. %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    swift_errorRelease(v22);
  }
  else
  {
    v30 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v10 + 32))(v17, v20, v9);
    v31 = static os_log_type_t.default.getter(v30);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v32 = qword_1011B7DF0;
    v33 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v33(v15, v17, v9);
    v34 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      v35 = swift_slowAlloc(22, -1);
      v59 = v33;
      v36 = v35;
      v58 = swift_slowAlloc(32, -1);
      v67[0] = v58;
      *(_DWORD *)v36 = 141558275;
      v68 = 1752392040;
      v60 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v61 = v8;
      v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v9, v37);
      v68 = sub_100016940(v38, v39, v67);
      v17 = v60;
      v8 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(char *, uint64_t))(v10 + 8);
      v40(v15, v9);
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "Unpair succeeded for beacon %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
      v41 = v58;
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      v42 = v36;
      v33 = v59;
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      v40 = *(void (**)(char *, uint64_t))(v10 + 8);
      v40(v15, v9);
    }
    v43 = (_BYTE *)(v64 + 16);
    sub_10000F9B8(v65, (uint64_t)v6, (uint64_t *)&unk_1010F47C0);
    v44 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v6, 1, v66) == 1)
    {
      v40(v17, v9);
      sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      sub_1000126EC((uint64_t)v6, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      if ((static UUID.== infix(_:_:)(&v8[*(int *)(v44 + 20)], v17) & 1) == 0)
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        v40(v17, v9);
        return;
      }
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v45 = type metadata accessor for Logger(0);
      sub_10001A9E8(v45, (uint64_t)qword_1011B7DF8);
      v46 = v62;
      v47 = ((uint64_t (*)(char *, char *, uint64_t))v33)(v62, v17, v9);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.default.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(22, -1);
        v60 = v17;
        v51 = v50;
        v66 = swift_slowAlloc(32, -1);
        v67[0] = v66;
        *(_DWORD *)v51 = 141558275;
        v68 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v51 + 4, v51 + 12);
        *(_WORD *)(v51 + 12) = 2081;
        v61 = v8;
        v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v53 = dispatch thunk of CustomStringConvertible.description.getter(v9, v52);
        v68 = sub_100016940(v53, v54, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v51 + 14, v51 + 22);
        swift_bridgeObjectRelease();
        v40(v46, v9);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unpair command succeeded for primary beacon %{private,mask.hash}s", (uint8_t *)v51, 0x16u);
        v55 = v66;
        swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v51, -1, -1);

        sub_1000126B0((uint64_t)v61, type metadata accessor for OwnedBeaconRecord);
        v56 = v60;
      }
      else
      {

        v40(v46, v9);
        sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        v56 = v17;
      }
      v40(v56, v9);
    }
    swift_beginAccess(v43, v67, 1, 0);
    *v43 = 1;
  }
}

uint64_t sub_10027BAEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10027BAFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *a1;
  v4 = 1;
  swift_errorRetain(v3);
  v1 = sub_10001A9A8(&qword_1010F4968);
  return Just.init(_:)(&v3, v1);
}

uint64_t sub_10027BB50(uint64_t *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[3];

  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v44 - v14;
  if ((a1[1] & 1) != 0)
  {
    v16 = *a1;
    swift_errorRetain(*a1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7DF8);
    sub_10005972C(a2, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    sub_1000FE298(v16, 1);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(32, -1);
      v47 = a4;
      v22 = v21;
      v23 = swift_slowAlloc(64, -1);
      v45 = v23;
      *(_DWORD *)v22 = 141558531;
      v48 = 1752392040;
      v49[0] = v23;
      v46 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = type metadata accessor for UUID(0);
      v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
      v48 = sub_100016940(v26, v27, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v22 + 22) = 2082;
      v48 = v16;
      swift_errorRetain(v16);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&v48, v28);
      v48 = sub_100016940(v29, v30, v49);
      a3 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v22 + 24, v22 + 32);
      swift_bridgeObjectRelease();
      sub_1000FE214(v16, 1);
      sub_1000FE214(v16, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to remove related records for %{private,mask.hash}s. Error %{public}s)", (uint8_t *)v22, 0x20u);
      v31 = v45;
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_1000FE214(v16, 1);
      sub_1000FE214(v16, 1);
    }

    swift_errorRetain(v16);
    a3(v16);
    sub_1000FE214(v16, 1);
    sub_1000FE214(v16, 1);
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7DF8);
    v33 = sub_10005972C(a2, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(32, -1);
      v47 = a4;
      v38 = v37;
      *(_DWORD *)v36 = 141558275;
      v48 = 1752392040;
      v49[0] = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v46 = a5;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v48 = sub_100016940(v41, v42, v49);
      a5 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully removed related records for %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    }

    a3(0);
  }
  swift_beginAccess((char *)a5 + 16, v49, 1, 0);
  *((_QWORD *)a5 + 2) = 0;
  return swift_release();
}

uint64_t sub_10027C0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_100667D40(a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(&unk_101063E48, v11 + v9, v10 | 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  Future.addSuccess(block:)(sub_1002933BC, v12);
  swift_release();
  swift_release();
  v13 = swift_allocObject(&unk_101063E70, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  swift_retain();
  Future.addFailure(block:)(sub_1002933FC, v13);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10027C224(_BYTE *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;

  v7 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, a4, v10);
    v11 = 0;
  }
  else
  {
    v12 = sub_10028FA08();
    v13 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v12, 0, 0);
    *v14 = 0;
    *v9 = v13;
    v11 = 1;
  }
  swift_storeEnumTagMultiPayload(v9, v7, v11);
  a2(v9);
  return sub_100004048((uint64_t)v9, &qword_1010F4868);
}

uint64_t sub_10027C31C(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = sub_10001A9A8(&qword_1010F4868);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v6 = a1;
  swift_storeEnumTagMultiPayload(v6, v7, 1);
  swift_errorRetain(a1);
  a2(v6);
  return sub_100004048((uint64_t)v6, &qword_1010F4868);
}

uint64_t sub_10027C3C0(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (**v43)(uint64_t);
  void (*v44)(uint64_t);
  void (*v45)(uint64_t);
  unint64_t v46;
  uint64_t v47;
  void (**v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;

  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v16 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v17 = swift_errorRetain(a1);
    v18 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v19 = qword_1011B7DF0;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    v56 = a1;
    swift_errorRetain(a1);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v23 = String.init<A>(describing:)(&v56, v22);
    v25 = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Failed to remove pairing lock due to %@", 39, 2, v21);
    swift_bridgeObjectRelease();
    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v52 = a6;
    v53 = a2;
    v54 = a3;
    LODWORD(v55) = static os_log_type_t.default.getter(v15);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v50 = qword_1011B7DF0;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
    v29 = a4 + *(int *)(v12 + 20);
    v30 = UUID.uuidString.getter(v28);
    v31 = a4;
    v51 = a4;
    v32 = v30;
    v34 = v33;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    *(_QWORD *)(v28 + 64) = sub_10001AA00();
    *(_QWORD *)(v28 + 32) = v32;
    *(_QWORD *)(v28 + 40) = v34;
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v50, "Successfully removed pairing lock for %@.", 41, 2, v28);
    swift_bridgeObjectRelease();
    v55 = sub_100667D40(v29);
    sub_10005972C(v31, (uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
    v35 = *(unsigned __int8 *)(v13 + 80);
    v36 = (v35 + 16) & ~v35;
    v37 = v36 + v14;
    v38 = v35 | 7;
    v39 = (v36 + v14) & 0xFFFFFFFFFFFFFFF8;
    v40 = v39 + 8;
    v49 = v38;
    v50 = v39 + 8;
    v41 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
    v42 = swift_allocObject(&unk_101063BA0, v41 + 16, v38);
    sub_1000126EC((uint64_t)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v42 + v36, type metadata accessor for OwnedBeaconRecord);
    LOBYTE(v34) = v52 & 1;
    *(_BYTE *)(v42 + v37) = v52 & 1;
    *(_QWORD *)(v42 + v40) = a5;
    v43 = (void (**)(uint64_t))(v42 + v41);
    v45 = v53;
    v44 = v54;
    *v43 = v53;
    v43[1] = v44;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_100291E90, v42);
    swift_release();
    swift_release();
    sub_10005972C(v51, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    v46 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_101063BC8, v46 + 8, v49);
    sub_1000126EC((uint64_t)v16, v47 + v36, type metadata accessor for OwnedBeaconRecord);
    *(_BYTE *)(v47 + v37) = v34;
    *(_QWORD *)(v47 + v50) = 0;
    v48 = (void (**)(uint64_t))(v47 + v41);
    *v48 = v45;
    v48[1] = v44;
    *(_QWORD *)(v47 + v46) = a5;
    swift_retain();
    swift_retain();
    Future.addFailure(block:)(sub_1002921C4, v47);
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10027C798(char *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a1;
  v9 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v10 = qword_1011B7DF0;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 152, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E221E0;
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v28 = a2;
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  *(_QWORD *)(v12 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v12 + 64) = v17;
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v16;
  *(_QWORD *)(v12 + 96) = &type metadata for Bool;
  *(_QWORD *)(v12 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v12 + 72) = v8;
  *(_QWORD *)(v12 + 136) = &type metadata for Bool;
  *(_QWORD *)(v12 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v12 + 112) = a3 & 1;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Unpaired device %@ with success [%d] force [%d]", 47, 2, v12);
  v18 = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0 || (a3 & 1) != 0)
  {
    v23 = static os_log_type_t.default.getter(v18);
    v24 = qword_1011B7DF0;
    v25 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
    v26 = UUID.uuidString.getter(v25);
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = v17;
    *(_QWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 40) = v27;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Removing beacon record %@.", 26, 2, v25);
    swift_bridgeObjectRelease();
    return sub_10026ECC0(v28, 1, a5, a6);
  }
  else
  {
    v19 = sub_10028FA08();
    v20 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v19, 0, 0);
    *v21 = 7;
    a5(v20);
    return swift_errorRelease(v20);
  }
}

uint64_t sub_10027C9C0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v28;
  uint64_t v31;

  v28 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v9 = qword_1011B7DF0;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 152, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E221E0;
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for Bool;
  *(_QWORD *)(v11 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v11 + 72) = a3 & 1;
  v31 = a4;
  swift_errorRetain(a4);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
  v18 = String.init<A>(describing:)(&v31, v17);
  *(_QWORD *)(v11 + 136) = &type metadata for String;
  *(_QWORD *)(v11 + 144) = v16;
  *(_QWORD *)(v11 + 112) = v18;
  *(_QWORD *)(v11 + 120) = v19;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v9, "Unpair %@ failed! Force [%d]. Error %@", 38, 2, v11);
  v20 = swift_bridgeObjectRelease();
  if ((a3 & 1) == 0)
    return ((uint64_t (*)(uint64_t))a5)(a1);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = qword_1011B7DF0;
  v23 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v24 = UUID.uuidString.getter(v23);
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  *(_QWORD *)(v23 + 64) = v16;
  *(_QWORD *)(v23 + 32) = v24;
  *(_QWORD *)(v23 + 40) = v25;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Force removing beacon record %@.", 32, 2, v23);
  swift_bridgeObjectRelease();
  return sub_10026ECC0(a2, 1, a5, a6);
}

uint64_t sub_10027CBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t);
  _QWORD v21[2];

  v21[1] = a2;
  v9 = type metadata accessor for OSSignpostID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static os_signpost_type_t.begin.getter(v12);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_signpost(_:dso:log:name:signpostID:)(v14, &_mh_execute_header, qword_1011B7D88, "removeCKRecord", 14, 2, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (void (*)(uint64_t))swift_allocObject(&unk_101063AD8, v18 + 8, v15 | 7);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v19 + v16, v13, v9);
  *(_QWORD *)((char *)v19 + v17) = a4;
  *(_QWORD *)((char *)v19 + v18) = a5;
  swift_retain();
  sub_10026ECC0(a3, 1, (void (*)(uint64_t))sub_1002916F8, v19);
  return swift_release();
}

uint64_t sub_10027CD3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  _QWORD v17[3];
  _BYTE v18[15];
  char v19;

  v4 = static os_signpost_type_t.end.getter();
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v5 = qword_1011B7D88;
  v6 = os_signpost(_:dso:log:name:signpostID:)(v4, &_mh_execute_header, qword_1011B7D88, "removeCKRecord", 14, 2, a2);
  if (a1)
  {
    v7 = swift_errorRetain(a1);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v18, v17);
    v11 = Error.localizedDescription.getter(v17[1], v17[2]);
    v13 = v12;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    *(_QWORD *)(v10 + 64) = sub_10001AA00();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = v13;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v5, "#Durian: Remove beacon failed with error [%d].", v16);
    swift_bridgeObjectRelease();
    Future.finish(error:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v15 = static os_log_type_t.default.getter(v6);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v5, "#Durian: Remove beacon was successful.", 38, 2, _swiftEmptyArrayStorage);
    v19 = 1;
    return Future.finish(result:)(&v19);
  }
}

uint64_t sub_10027CEE0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);

  v54 = a7;
  v51 = a6;
  v48 = a5;
  v14 = type metadata accessor for OwnedBeaconRecord(0);
  v49 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v49 + 64);
  __chkstk_darwin(v14);
  v53 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for OSSignpostID(0);
  v47 = *(_QWORD *)(v50 - 8);
  v16 = *(_QWORD *)(v47 + 64);
  v17 = __chkstk_darwin(v50);
  v52 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v19 = qword_1011B7D88;
  v20 = os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7D88, "#Durian: Remove pairing lock completed with success", 51, 2, _swiftEmptyArrayStorage);
  v21 = static os_signpost_type_t.end.getter(v20);
  v22 = os_signpost(_:dso:log:name:signpostID:)(v21, &_mh_execute_header, v19, "removePairingLock", 17, 2, a2);
  if ((a3 & 1) == 0)
    return v54(v22);
  v45 = a9;
  v46 = a10;
  v23 = static os_signpost_type_t.begin.getter(v22);
  os_signpost(_:dso:log:name:signpostID:)(v23, &_mh_execute_header, v19, "unpairDevice", 12, 2, a2);
  v43 = a8;
  v24 = v48;
  v44 = sub_100667D40(v48 + *(int *)(v14 + 20));
  v42 = swift_allocObject(&unk_1010637E0, 24, 7);
  swift_weakInit(v42 + 16, a4);
  v25 = v47;
  v26 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v52, a2, v50);
  sub_10005972C(v24, v53, type metadata accessor for OwnedBeaconRecord);
  v27 = *(unsigned __int8 *)(v25 + 80);
  v28 = (v27 + 16) & ~v27;
  v29 = v28 + v16;
  v30 = (v28 + v16) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  v33 = *(unsigned __int8 *)(v49 + 80);
  v34 = (v33 + v32 + 8) & ~v33;
  v35 = (v15 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_101063AB0, v35 + 8, v27 | v33 | 7);
  v37 = v30 + v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v36 + v28, v52, v26);
  *(_BYTE *)(v36 + v29) = v51 & 1;
  v38 = v53;
  v39 = v43;
  *(_QWORD *)(v37 + 8) = v54;
  *(_QWORD *)(v37 + 16) = v39;
  *(_QWORD *)(v36 + v31) = v45;
  *(_QWORD *)(v36 + v32) = v42;
  sub_1000126EC(v38, v36 + v34, type metadata accessor for OwnedBeaconRecord);
  *(_QWORD *)(v36 + v35) = v46;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)(sub_1002915AC, v36);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10027D200(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v32)(uint64_t);
  _QWORD v33[3];
  _BYTE v34[8];
  _BYTE v35[24];

  v13 = *a1;
  v14 = static os_signpost_type_t.end.getter();
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v15 = qword_1011B7D88;
  result = os_signpost(_:dso:log:name:signpostID:)(v14, &_mh_execute_header, qword_1011B7D88, "unpairDevice", 12, 2, a3);
  if (a2)
  {
    v17 = swift_errorRetain(a2);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a2, v34, v33);
    v21 = Error.localizedDescription.getter(v33[1], v33[2]);
    v23 = v22;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v21;
    *(_QWORD *)(v20 + 40) = v23;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v15, "#Durian: Unpair failed. Error - %@", 34, 2, v20);
    v24 = swift_bridgeObjectRelease();
    if ((a4 & 1) != 0)
    {
      v25 = static os_log_type_t.error.getter(v24);
      v26 = os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D88, "#Durian: Proceeding to remove beacon record when unpair errored because force == 1", 82, 2, _swiftEmptyArrayStorage);
      a5(v26);
    }
    else
    {
      Future.finish(error:)(a2);
    }
    return swift_errorRelease(a2);
  }
  else if (v13 != 2)
  {
    v27 = static os_log_type_t.default.getter(result);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v29 + 56) = &type metadata for Bool;
    *(_QWORD *)(v29 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v29 + 32) = v13 & 1;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v15, "#Durian: Unpaired device with success [%d].", (_DWORD)a5);
    v30 = swift_bridgeObjectRelease();
    if ((v13 & 1) != 0 || (a4 & 1) != 0)
    {
      v32(v30);
      swift_beginAccess(a8 + 16, v35, 0, 0);
      result = swift_weakLoadStrong(a8 + 16);
      if (result)
      {
        swift_retain();
        swift_release();
        sub_1007BEC3C(a9);
        return swift_release();
      }
    }
    else
    {
      v35[0] = 0;
      return Future.finish(result:)(v35);
    }
  }
  return result;
}

uint64_t sub_10027D4CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _BYTE v11[8];

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v3 = qword_1011B7D88;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a1, v11, v10);
  v6 = Error.localizedDescription.getter(v10[1], v10[2]);
  v8 = v7;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "#Durian: Remove pairing lock failed with error - %@", 51, 2, v5);
  swift_bridgeObjectRelease();
  return Future.finish(error:)(a1);
}

uint64_t sub_10027D5E4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v10;

  v10 = swift_allocObject(&unk_101063F10, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_10028D908(a4, a5, a3, (void (*)(uint64_t, uint64_t))sub_1002939C0, v10);
  return swift_release_n(v10, 2);
}

uint64_t sub_10027D670(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1)
    return a2(0, 0);
  swift_errorRetain(a1);
  a2(a1, 1);
  return swift_errorRelease(a1);
}

uint64_t sub_10027D6CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v1 = result;
    v2 = swift_errorRetain(result);
    v3 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v4 = qword_1011B7D88;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    v11 = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(&v11, v7);
    v10 = v9;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v10;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "unshare failed: %@", 18, 2, v6);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v1);
  }
  return result;
}

uint64_t sub_10027D7E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];

  v10 = static os_log_type_t.default.getter(a1);
  if (a1)
  {
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v11 = qword_1011B7D88;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    type metadata accessor for OwnedBeaconRecord(0);
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    v18 = v17;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v13 + 32) = v16;
    *(_QWORD *)(v13 + 40) = v18;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Unpair for beacon, %@, unsuccessful", 35, 2, v13);
    swift_bridgeObjectRelease();
    return a3(a1);
  }
  else
  {
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v20 = qword_1011B7D88;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v23 = type metadata accessor for OwnedBeaconRecord(0);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v26;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v20, "Successfully unpaired beacon %@.", 32, 2, v22);
    swift_bridgeObjectRelease();
    a3(0);
    sub_1007BEC3C(a2);
    type metadata accessor for Transaction(0);
    v27 = swift_allocObject(&unk_1010637E0, 24, 7);
    v28 = swift_weakInit(v27 + 16, a6);
    __chkstk_darwin(v28);
    v30[2] = v27;
    v30[3] = a2;
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-unpair-disableActions", 51, 2, sub_10028F9F0, v30, v29);
    return swift_release();
  }
}

uint64_t sub_10027DAA4@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a2 += 16;
  swift_beginAccess(a2, v18, 0, 0);
  result = swift_weakLoadStrong(a2);
  v13 = result;
  if (result)
  {
    v14 = *(_QWORD *)(result + 48);
    swift_retain();
    v15 = swift_release();
    UUID.init()(v15);
    v16 = a3 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
    swift_retain();
    sub_1002155C8((uint64_t)v11, v16, v14, a1);
    swift_release();
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a4 = v13 == 0;
  return result;
}

uint64_t sub_10027DBD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[3];
  _BYTE v14[8];

  Transaction.capture()();
  if (a1)
  {
    v3 = swift_errorRetain(a1);
    v4 = static os_log_type_t.error.getter(v3);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v5 = qword_1011B7D88;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v14, v13);
    v8 = Error.localizedDescription.getter(v13[1], v13[2]);
    v10 = v9;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = v8;
    *(_QWORD *)(v7 + 40) = v10;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Disable notify when found for beacon error - %@", 47, 2, v7);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v12 = static os_log_type_t.default.getter(v2);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    return os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1011B7D88, "Disable notify when found successful.", 37, 2, _swiftEmptyArrayStorage);
  }
}

uint64_t sub_10027DD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return swift_task_switch(sub_10027DD78, 0, 0);
}

uint64_t sub_10027DD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (__cdecl *v13)();

  v1 = *(_QWORD *)(v0 + 176) + 16;
  swift_beginAccess(v1, v0 + 96, 0, 0);
  if (swift_weakLoadStrong(v1))
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 120, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v13 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBD0 + dword_1010EBBD0);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBBD4);
      *(_QWORD *)(v0 + 192) = v3;
      *v3 = v0;
      v3[1] = sub_10027DFB4;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v4 = static os_log_type_t.error.getter(0);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v5 = qword_1011B7D88;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    type metadata accessor for OwnedBeaconRecord(0);
    v8 = type metadata accessor for UUID(0);
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    v12 = v11;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = v10;
    *(_QWORD *)(v7 + 40) = v12;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Unpair for beacon, %@, unsuccessful, no BeaconSharingService found.", 67, 2, v7);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_10027DFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10027E010, 0, 0);
}

uint64_t sub_10027E010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1010EE0FC);
    *(_QWORD *)(v0 + 208) = v3;
    *v3 = v0;
    v3[1] = sub_10027E194;
    return sub_1000D1548(*(_QWORD *)(v0 + 184));
  }
  else
  {
    v5 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v6 = qword_1011B7D88;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    type metadata accessor for OwnedBeaconRecord(0);
    v9 = type metadata accessor for UUID(0);
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
    v13 = v12;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v8 + 32) = v11;
    *(_QWORD *)(v8 + 40) = v13;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Unpair for beacon, %@, unsuccessful, no BeaconSharingService found.", 67, 2, v8);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10027E194()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10027E228;
  else
    v3 = sub_10027E1F8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10027E1F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027E228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v15 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v2 = *(_QWORD *)(v1 + 216);
  v3 = qword_1011B7D88;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  type metadata accessor for OwnedBeaconRecord(0);
  v6 = type metadata accessor for UUID(0);
  v7 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
  v10 = v9;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v11 = sub_10001AA00();
  *(_QWORD *)(v5 + 64) = v11;
  *(_QWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 40) = v10;
  swift_getErrorValue(v2, v1 + 168, v1 + 144);
  v12 = Error.localizedDescription.getter(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v11;
  *(_QWORD *)(v5 + 72) = v12;
  *(_QWORD *)(v5 + 80) = v13;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v3, "Unpair for beacon, %@, unsuccessful, can't forceStopSharing %@", 62, 2, v5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10027E3B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a4;
  v30 = a5;
  v31 = a3;
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = swift_errorRetain(a1);
    v12 = static os_log_type_t.error.getter(v11);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v13 = qword_1011B7D88;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    v32 = a1;
    swift_errorRetain(a1);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v17 = String.init<A>(describing:)(&v32, v16);
    v19 = v18;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10001AA00();
    *(_QWORD *)(v15 + 32) = v17;
    *(_QWORD *)(v15 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "declineShare failed: %@", 23, 2, v15);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
  }
  v20 = v31;
  sub_10005972C(v31, (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  v21 = *(unsigned __int8 *)(v8 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v9 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_101063C68, v24 + 8, v21 | 7);
  *(_QWORD *)(v25 + 16) = a1;
  sub_1000126EC((uint64_t)v10, v25 + v22, type metadata accessor for SharedBeaconRecord);
  v26 = (_QWORD *)(v25 + v23);
  v27 = v30;
  *v26 = v29;
  v26[1] = v27;
  *(_QWORD *)(v25 + v24) = a2;
  swift_errorRetain(a1);
  swift_retain();
  swift_retain();
  sub_1009F9E28(v20, (uint64_t)sub_100292630, v25);
  return swift_release();
}

uint64_t sub_10027E5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(void);
  uint64_t (**v34)(uint64_t);
  uint64_t (*v35)(uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t (*v40)(uint64_t);

  v37 = a6;
  v39 = a4;
  v40 = a5;
  v8 = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v37 - v18;
  v38 = a2;
  if (a2)
  {
    v20 = v39;
    v21 = static os_log_type_t.default.getter(v17);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v22 = qword_1011B7D88;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v12, v25);
    v28 = v27;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_10001AA00();
    *(_QWORD *)(v24 + 32) = v26;
    *(_QWORD *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Unpair for beacon, %@, unsuccessful", 35, 2, v24);
    swift_bridgeObjectRelease();
    return v20(v38);
  }
  else
  {
    v38 = *(_QWORD *)(v37 + 48);
    UUID.init()(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3 + *(int *)(v8 + 20), v12);
    sub_10005972C(a3, (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    v30 = *(unsigned __int8 *)(v9 + 80);
    v31 = (v30 + 16) & ~v30;
    v32 = (v10 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = (void (*)(void))swift_allocObject(&unk_101063C90, v32 + 16, v30 | 7);
    sub_1000126EC((uint64_t)v11, (uint64_t)v33 + v31, type metadata accessor for SharedBeaconRecord);
    v34 = (uint64_t (**)(uint64_t))((char *)v33 + v32);
    v35 = v40;
    *v34 = v39;
    v34[1] = v35;
    swift_retain();
    sub_100202F50((uint64_t)v19, (uint64_t)v16, (void (*)(void))sub_100292844, v33);
    swift_release();
    v36 = *(void (**)(char *, uint64_t))(v13 + 8);
    v36(v16, v12);
    return ((uint64_t (*)(char *, uint64_t))v36)(v19, v12);
  }
}

uint64_t sub_10027E87C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v6 = a1 == 0;
  v7 = qword_1011B7D88;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 112, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  type metadata accessor for SharedBeaconRecord(0);
  v10 = type metadata accessor for UUID(0);
  v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
  v14 = v13;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  *(_QWORD *)(v9 + 96) = &type metadata for Bool;
  *(_QWORD *)(v9 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v9 + 72) = v6;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v7, "Unpair completed for beacon, %@, success, %d", 44, 2, v9);
  swift_bridgeObjectRelease();
  return a3(0);
}

uint64_t sub_10027E9DC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v6 = qword_1011B7D88;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v16 = a1;
    swift_errorRetain(a1);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v10 = String.init<A>(describing:)(&v16, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Remove beacon got an error (%@)", 31, 2, v8);
    swift_bridgeObjectRelease();
    v13 = swift_errorRelease(a1);
  }
  else
  {
    v14 = static os_log_type_t.default.getter(0);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v13 = os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D88, "Remove beacon was successful", 28, 2, _swiftEmptyArrayStorage);
  }
  return a2(v13);
}

uint64_t sub_10027EB6C(_QWORD *a1, uint64_t (*a2)(_QWORD *))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v5 = (_QWORD *)sub_10088F164(v5);
  v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = a2(v8);
  *a1 = v5;
  return result;
}

uint64_t sub_10027EBFC(uint64_t a1)
{
  return sub_1000FC950(a1);
}

uint64_t sub_10027EC10()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

void sub_10027EC1C()
{
  uint64_t v0;

  sub_100272204(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10027EC24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10027EC50(char a1)
{
  uint64_t v1;

  sub_100272520(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10027EC58()
{
  return sub_100294B98((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10027EC6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_10110AA44);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100800968(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10027ECEC(uint64_t a1)
{
  uint64_t v1;

  return sub_10079CA9C(a1, v1);
}

uint64_t sub_10027ED04(uint64_t a1)
{
  uint64_t v1;

  return sub_1007979CC(a1, v1);
}

uint64_t sub_10027ED1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1007E4504(v11, a3, a4, a5);
    return swift_release(a3);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

Swift::Int sub_10027EDD4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for OwnedBeaconRecord(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_100281734(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_1002824F0(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for OwnedBeaconRecord);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for OwnedBeaconRecord);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 32), v25 + *(int *)(v134 + 32));
    sub_1000126B0(v25, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0(v23, type metadata accessor for OwnedBeaconRecord);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for OwnedBeaconRecord);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for OwnedBeaconRecord);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 32), v33 + *(int *)(v134 + 32));
      sub_1000126B0(v33, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0(v32, type metadata accessor for OwnedBeaconRecord);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_1002824F0(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for OwnedBeaconRecord);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for OwnedBeaconRecord);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for OwnedBeaconRecord);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for OwnedBeaconRecord);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 32), v47 + *(int *)(v134 + 32));
          sub_1000126B0(v47, type metadata accessor for OwnedBeaconRecord);
          sub_1000126B0(v45, type metadata accessor for OwnedBeaconRecord);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for OwnedBeaconRecord);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for OwnedBeaconRecord);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_10027F7D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  char *v58;
  uint64_t v59;
  Swift::Int v60;
  unint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  Swift::Int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  unint64_t v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  _QWORD *v153;
  Swift::Int v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  Swift::Int v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  Swift::Int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  Swift::Int v186;
  char *v187;
  char *v188;
  void (*v189)(_QWORD, _QWORD);
  void *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  Swift::Int v194;
  uint64_t *v195;
  uint64_t v196;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v174 = (char *)&v153 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v153 - v9;
  v11 = __chkstk_darwin(v8);
  v187 = (char *)&v153 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v153 - v14;
  v16 = __chkstk_darwin(v13);
  v158 = (char *)&v153 - v17;
  v18 = __chkstk_darwin(v16);
  v165 = (char *)&v153 - v19;
  __chkstk_darwin(v18);
  v163 = (char *)&v153 - v20;
  v21 = type metadata accessor for Date(0);
  v196 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v192 = (char *)&v153 - v26;
  v27 = __chkstk_darwin(v25);
  v162 = (char *)&v153 - v28;
  v29 = __chkstk_darwin(v27);
  v168 = (char *)&v153 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v153 - v32;
  __chkstk_darwin(v31);
  v157 = (char *)&v153 - v34;
  v176 = type metadata accessor for OwnedBeaconRecord(0);
  v171 = *(_QWORD *)(v176 - 8);
  v35 = __chkstk_darwin(v176);
  v161 = (uint64_t)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v188 = (char *)&v153 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v153 - v40;
  v42 = __chkstk_darwin(v39);
  v191 = (uint64_t)&v153 - v43;
  v44 = __chkstk_darwin(v42);
  v172 = (uint64_t)&v153 - v45;
  v46 = __chkstk_darwin(v44);
  v167 = (uint64_t)&v153 - v47;
  v48 = __chkstk_darwin(v46);
  v169 = (char *)&v153 - v49;
  __chkstk_darwin(v48);
  v156 = (uint64_t)&v153 - v50;
  v195 = a1;
  v51 = a1[1];
  result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      if (v51)
        return sub_100281970(0, v51, 1, v195);
      return result;
    }
    goto LABEL_131;
  }
  if (v51 >= 0)
    v53 = v51;
  else
    v53 = v51 + 1;
  if (v51 < -1)
  {
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    JUMPOUT(0x1002816F4);
  }
  v185 = v10;
  v154 = result;
  v155 = v15;
  if (v51 < 2)
  {
    v170 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    v153 = _swiftEmptyArrayStorage;
    if (v51 != 1)
    {
      v61 = _swiftEmptyArrayStorage[2];
      v58 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      v145 = v177;
      if (v61 < 2)
      {
        v144 = v153;
        goto LABEL_109;
      }
      v146 = *v195;
      v144 = v153;
      while (1)
      {
        v147 = v61 - 2;
        if (v61 < 2)
          goto LABEL_126;
        if (!v146)
          goto LABEL_137;
        v148 = v58;
        v149 = *(_QWORD *)&v58[16 * v147 + 32];
        v150 = *(_QWORD *)&v58[16 * v61 + 24];
        sub_1002829A0(v146 + *(_QWORD *)(v171 + 72) * v149, v146 + *(_QWORD *)(v171 + 72) * *(_QWORD *)&v58[16 * v61 + 16], v146 + *(_QWORD *)(v171 + 72) * v150, v170);
        if (v145)
          goto LABEL_109;
        if (v150 < v149)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0)
          v148 = sub_10088F088((uint64_t)v148);
        if (v147 >= *((_QWORD *)v148 + 2))
          goto LABEL_128;
        v151 = &v148[16 * v147 + 32];
        *(_QWORD *)v151 = v149;
        *((_QWORD *)v151 + 1) = v150;
        v152 = *((_QWORD *)v148 + 2);
        if (v61 > v152)
          goto LABEL_129;
        memmove(&v148[16 * v61 + 16], &v148[16 * v61 + 32], 16 * (v152 - v61));
        v58 = v148;
        *((_QWORD *)v148 + 2) = v152 - 1;
        v61 = v152 - 1;
        if (v152 <= 2)
          goto LABEL_109;
      }
    }
  }
  else
  {
    v54 = v53 >> 1;
    v55 = static Array._allocateBufferUninitialized(minimumCapacity:)(v53 >> 1, v176);
    *(_QWORD *)(v55 + 16) = v54;
    v56 = *(unsigned __int8 *)(v171 + 80);
    v153 = (_QWORD *)v55;
    v170 = (char *)(v55 + ((v56 + 32) & ~v56));
  }
  v57 = 0;
  v58 = (char *)_swiftEmptyArrayStorage;
  v175 = xmmword_100E22B00;
  v173 = v5;
  v193 = v21;
  v180 = v24;
  v166 = v33;
  v184 = v41;
  v59 = (uint64_t)v169;
  v60 = v51;
  while (1)
  {
    v62 = v57;
    v63 = v57 + 1;
    v160 = v58;
    v164 = v57;
    v194 = v60;
    if (v57 + 1 >= v60)
    {
      v72 = v57 + 1;
      goto LABEL_44;
    }
    v64 = *v195;
    v65 = *(_QWORD *)(v171 + 72);
    v66 = v156;
    sub_10005972C(*v195 + v65 * v63, v156, type metadata accessor for OwnedBeaconRecord);
    v179 = v64;
    sub_10005972C(v64 + v65 * v62, v59, type metadata accessor for OwnedBeaconRecord);
    v67 = objc_autoreleasePoolPush();
    v68 = v177;
    sub_10084EE10(v66);
    if (v68)
    {
      objc_autoreleasePoolPop(v67);
      __break(1u);
      goto LABEL_139;
    }
    objc_autoreleasePoolPop(v67);
    v69 = objc_autoreleasePoolPush();
    sub_10084EE10(v59);
    v177 = 0;
    objc_autoreleasePoolPop(v69);
    v70 = v157;
    v190 = (void *)Date.compare(_:)(v33);
    v71 = *(void (**)(char *, uint64_t))(v196 + 8);
    v71(v33, v21);
    v189 = (void (*)(_QWORD, _QWORD))v71;
    v71(v70, v21);
    sub_1000126B0(v59, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0(v156, type metadata accessor for OwnedBeaconRecord);
    v72 = v62 + 2;
    if (v62 + 2 < v194)
    {
      v73 = v65 * v63;
      v74 = v179;
      v182 = v65 * v72;
      v183 = v73;
      v186 = v62 + 2;
      v75 = v167;
      sub_10005972C(v179 + v65 * v72, v167, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v74 + v183, v172, type metadata accessor for OwnedBeaconRecord);
      v76 = objc_autoreleasePoolPush();
      __asm { BR              X9 }
    }
    v58 = v160;
    if (v190 != (void *)1)
      goto LABEL_33;
    if (v72 < v62)
      goto LABEL_132;
    if (v62 < v72)
    {
      v77 = 0;
      v78 = v65 * (v62 + 1);
      v79 = v72 * v65;
      v80 = v62 * v65;
      v178 = v65;
      do
      {
        if (v62 != v72 + v77 - 1)
        {
          v83 = v179;
          if (!v179)
            goto LABEL_136;
          v84 = v72;
          v85 = v179 + v80;
          v190 = (void *)(v179 + v78);
          sub_1000126EC(v179 + v80, v161, type metadata accessor for OwnedBeaconRecord);
          if (v80 < v78 || v85 >= v83 + v79)
          {
            v81 = v83 + v80;
            v82 = (uint64_t)v190;
            swift_arrayInitWithTakeFrontToBack(v81, v190, 1, v176);
          }
          else
          {
            v82 = (uint64_t)v190;
            if (v80 != v78)
              swift_arrayInitWithTakeBackToFront(v85, v190);
          }
          sub_1000126EC(v161, v82, type metadata accessor for OwnedBeaconRecord);
          v58 = v160;
          v72 = v84;
          v65 = v178;
        }
        ++v62;
        --v77;
        v78 -= v65;
        v79 -= v65;
        v80 += v65;
      }
      while (v62 < v72 + v77);
      v33 = v166;
      v86 = (uint64_t)v184;
      v59 = (uint64_t)v169;
      v62 = v164;
      if (v72 >= v194)
        goto LABEL_44;
    }
    else
    {
LABEL_33:
      v86 = (uint64_t)v184;
      if (v72 >= v194)
        goto LABEL_44;
    }
    if (__OFSUB__(v72, v62))
      goto LABEL_130;
    if (v72 - v62 < v154)
    {
      if (__OFADD__(v62, v154))
        goto LABEL_133;
      v87 = v194;
      if (v62 + v154 < v194)
        v87 = v62 + v154;
      if (v87 < v62)
        goto LABEL_134;
      if (v72 != v87)
      {
        v88 = *(_QWORD *)(v171 + 72);
        v89 = v88 * (v72 - 1);
        v181 = v88;
        v194 = v72 * v88;
        v159 = v87;
        v186 = v72;
        v182 = v89;
        v90 = *v195;
        v91 = v191;
        sub_10005972C(v72 * v88 + *v195, v191, type metadata accessor for OwnedBeaconRecord);
        v189 = (void (*)(_QWORD, _QWORD))v89;
        sub_10005972C(v89 + v90, v86, type metadata accessor for OwnedBeaconRecord);
        v190 = objc_autoreleasePoolPush();
        __asm { BR              X9 }
      }
    }
LABEL_44:
    if (v72 < v62)
      goto LABEL_125;
    v186 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) != 0)
      v58 = v160;
    else
      v58 = sub_10088E710(0, *((_QWORD *)v160 + 2) + 1, 1, v160);
    v93 = *((_QWORD *)v58 + 2);
    v92 = *((_QWORD *)v58 + 3);
    v61 = v93 + 1;
    v57 = v186;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_10088E710((char *)(v92 > 1), v93 + 1, 1, v58);
      v57 = v186;
      v58 = v143;
    }
    *((_QWORD *)v58 + 2) = v61;
    v94 = v58 + 32;
    v95 = &v58[16 * v93 + 32];
    *(_QWORD *)v95 = v62;
    *((_QWORD *)v95 + 1) = v57;
    if (v93)
      break;
    v61 = 1;
LABEL_14:
    v60 = v195[1];
    if (v57 >= v60)
      goto LABEL_96;
  }
  while (1)
  {
    v96 = v61 - 1;
    if (v61 >= 4)
    {
      v101 = &v94[16 * v61];
      v102 = *((_QWORD *)v101 - 8);
      v103 = *((_QWORD *)v101 - 7);
      v107 = __OFSUB__(v103, v102);
      v104 = v103 - v102;
      if (v107)
        goto LABEL_114;
      v106 = *((_QWORD *)v101 - 6);
      v105 = *((_QWORD *)v101 - 5);
      v107 = __OFSUB__(v105, v106);
      v99 = v105 - v106;
      v100 = v107;
      if (v107)
        goto LABEL_115;
      v108 = v61 - 2;
      v109 = &v94[16 * v61 - 32];
      v111 = *(_QWORD *)v109;
      v110 = *((_QWORD *)v109 + 1);
      v107 = __OFSUB__(v110, v111);
      v112 = v110 - v111;
      if (v107)
        goto LABEL_117;
      v107 = __OFADD__(v99, v112);
      v113 = v99 + v112;
      if (v107)
        goto LABEL_120;
      if (v113 >= v104)
      {
        v131 = &v94[16 * v96];
        v133 = *(_QWORD *)v131;
        v132 = *((_QWORD *)v131 + 1);
        v107 = __OFSUB__(v132, v133);
        v134 = v132 - v133;
        if (v107)
          goto LABEL_124;
        v124 = v99 < v134;
        goto LABEL_81;
      }
    }
    else
    {
      if (v61 != 3)
      {
        v125 = *((_QWORD *)v58 + 4);
        v126 = *((_QWORD *)v58 + 5);
        v107 = __OFSUB__(v126, v125);
        v118 = v126 - v125;
        v119 = v107;
        goto LABEL_75;
      }
      v98 = *((_QWORD *)v58 + 4);
      v97 = *((_QWORD *)v58 + 5);
      v107 = __OFSUB__(v97, v98);
      v99 = v97 - v98;
      v100 = v107;
    }
    if ((v100 & 1) != 0)
      goto LABEL_116;
    v108 = v61 - 2;
    v114 = &v94[16 * v61 - 32];
    v116 = *(_QWORD *)v114;
    v115 = *((_QWORD *)v114 + 1);
    v117 = __OFSUB__(v115, v116);
    v118 = v115 - v116;
    v119 = v117;
    if (v117)
      goto LABEL_119;
    v120 = &v94[16 * v96];
    v122 = *(_QWORD *)v120;
    v121 = *((_QWORD *)v120 + 1);
    v107 = __OFSUB__(v121, v122);
    v123 = v121 - v122;
    if (v107)
      goto LABEL_122;
    if (__OFADD__(v118, v123))
      goto LABEL_123;
    if (v118 + v123 >= v99)
    {
      v124 = v99 < v123;
LABEL_81:
      if (v124)
        v96 = v108;
      goto LABEL_83;
    }
LABEL_75:
    if ((v119 & 1) != 0)
      goto LABEL_118;
    v127 = &v94[16 * v96];
    v129 = *(_QWORD *)v127;
    v128 = *((_QWORD *)v127 + 1);
    v107 = __OFSUB__(v128, v129);
    v130 = v128 - v129;
    if (v107)
      goto LABEL_121;
    if (v130 < v118)
      goto LABEL_14;
LABEL_83:
    v135 = v96 - 1;
    if (v96 - 1 >= v61)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x100281684);
    }
    if (!*v195)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }
    v136 = v58;
    v137 = &v94[16 * v135];
    v138 = *(_QWORD *)v137;
    v139 = &v94[16 * v96];
    v140 = *((_QWORD *)v139 + 1);
    v141 = v177;
    sub_1002829A0(*v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v137, *v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v139, *v195 + *(_QWORD *)(v171 + 72) * v140, v170);
    v177 = v141;
    if (v141)
      break;
    if (v140 < v138)
      goto LABEL_111;
    if (v96 > *((_QWORD *)v136 + 2))
      goto LABEL_112;
    *(_QWORD *)v137 = v138;
    *(_QWORD *)&v94[16 * v135 + 8] = v140;
    v142 = *((_QWORD *)v136 + 2);
    if (v96 >= v142)
      goto LABEL_113;
    v61 = v142 - 1;
    memmove(&v94[16 * v96], v139 + 16, 16 * (v142 - 1 - v96));
    v58 = v136;
    *((_QWORD *)v136 + 2) = v142 - 1;
    v124 = v142 > 2;
    v33 = v166;
    v59 = (uint64_t)v169;
    v57 = v186;
    if (!v124)
      goto LABEL_14;
  }
  v144 = v153;
LABEL_109:
  swift_bridgeObjectRelease();
  v144[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100281734(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for OwnedBeaconRecord);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 32)], v19 + *(int *)(v30 + 32));
      sub_1000126B0(v19, type metadata accessor for OwnedBeaconRecord);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for OwnedBeaconRecord);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for OwnedBeaconRecord);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100281970(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v32[1] = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v32 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v32 - v15;
  __chkstk_darwin(v14);
  v39 = (char *)v32 - v17;
  v18 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v38 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v46 = (char *)v32 - v21;
  v34 = type metadata accessor for OwnedBeaconRecord(0);
  v22 = __chkstk_darwin(v34);
  v41 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v50 = (uint64_t)v32 - v25;
  result = __chkstk_darwin(v24);
  v45 = (uint64_t)v32 - v28;
  v32[0] = a2;
  if (a3 != a2)
  {
    v32[2] = v13;
    v32[3] = v10;
    v40 = *(_QWORD *)(v27 + 72);
    v48 = v40 * a3;
    v49 = v40 * (a3 - 1);
    v33 = xmmword_100E22B00;
    v35 = a4;
    v37 = v16;
    v44 = v18;
    v36 = a3;
    v29 = *a4;
    v43 = v40 * a3;
    v30 = v45;
    sub_10005972C(v40 * a3 + v29, v45, type metadata accessor for OwnedBeaconRecord);
    v42 = v49;
    sub_10005972C(v49 + v29, v50, type metadata accessor for OwnedBeaconRecord);
    v31 = objc_autoreleasePoolPush();
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_1002824F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for OwnedBeaconRecord(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for OwnedBeaconRecord);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 32), v32 + *(int *)(v45 + 32));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for OwnedBeaconRecord);
          sub_1000126B0(v31, type metadata accessor for OwnedBeaconRecord);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        sub_10005972C(a4, v20, type metadata accessor for OwnedBeaconRecord);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 32)], v20 + *(int *)(v45 + 32));
        sub_1000126B0(v20, type metadata accessor for OwnedBeaconRecord);
        sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088E920(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002829A0(unint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t result;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;

  v5 = v4;
  v10 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v10 - 8);
  v79 = v10;
  v11 = __chkstk_darwin(v10);
  v70 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v77 = (char *)&v68 - v14;
  v15 = __chkstk_darwin(v13);
  v75 = (char *)&v68 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - v17;
  v73 = type metadata accessor for OwnedBeaconRecord(0);
  v19 = __chkstk_darwin(v73);
  v71 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v76 = (unint64_t)&v68 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v68 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v68 - v26;
  v29 = *(_QWORD *)(v28 + 72);
  if (!v29)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    objc_autoreleasePoolPop(a4);
    __break(1u);
LABEL_67:
    objc_autoreleasePoolPop(v18);
    __break(1u);
    goto LABEL_68;
  }
  if (a2 - a1 == 0x8000000000000000 && v29 == -1)
    goto LABEL_64;
  v30 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v29 == -1)
    goto LABEL_65;
  v31 = (uint64_t)(a2 - a1) / v29;
  v82 = (char *)a1;
  v81 = (unint64_t)a4;
  v32 = v30 / v29;
  if (v31 >= v30 / v29)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      v34 = v32 * v29;
      if ((unint64_t)a4 < a2 || a2 + v34 <= (unint64_t)a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v32, v73);
      }
      else if (a4 != (void *)a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v47 = (unint64_t)a4 + v34;
      v80 = (unint64_t)a4 + v34;
      v82 = (char *)a2;
      if (v34 >= 1 && a1 < a2)
      {
        v49 = -v29;
        v50 = (uint64_t)v71;
        v68 = a1;
        v69 = (unint64_t)a4;
        v72 = v49;
        while (1)
        {
          v51 = v76;
          sub_10005972C(v47 + v49, v76, type metadata accessor for OwnedBeaconRecord);
          v52 = a2 + v49;
          sub_10005972C(a2 + v49, v50, type metadata accessor for OwnedBeaconRecord);
          v18 = (char *)objc_autoreleasePoolPush();
          sub_10084EE10(v51);
          if (v5)
            goto LABEL_67;
          objc_autoreleasePoolPop(v18);
          v53 = objc_autoreleasePoolPush();
          v54 = v70;
          sub_10084EE10(v50);
          v75 = 0;
          v55 = v72;
          v74 = a3 + v72;
          objc_autoreleasePoolPop(v53);
          v56 = v77;
          v57 = Date.compare(_:)(v54);
          v58 = a3;
          v59 = *(void (**)(char *, uint64_t))(v78 + 8);
          v60 = v54;
          v61 = v79;
          v59(v60, v79);
          v59(v56, v61);
          sub_1000126B0(v50, type metadata accessor for OwnedBeaconRecord);
          sub_1000126B0(v76, type metadata accessor for OwnedBeaconRecord);
          if (v57 == 1)
          {
            a3 = v74;
            if (v58 < a2 || v74 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v52, 1, v73);
              v5 = v75;
              v63 = v68;
              v50 = (uint64_t)v71;
              v49 = v72;
            }
            else
            {
              v62 = v58 == a2;
              v5 = v75;
              v63 = v68;
              v50 = (uint64_t)v71;
              v49 = v72;
              if (!v62)
                swift_arrayInitWithTakeBackToFront(v74, v52);
            }
            v82 += v49;
            v66 = v69;
          }
          else
          {
            v64 = v80;
            v65 = v80 + v55;
            v80 += v55;
            v63 = v68;
            v49 = v55;
            a3 = v74;
            if (v58 < v64 || v74 >= v64)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v65, 1, v73);
              v52 = a2;
              v5 = v75;
              v66 = v69;
              v50 = (uint64_t)v71;
            }
            else
            {
              v66 = v69;
              v50 = (uint64_t)v71;
              if (v58 != v64)
                swift_arrayInitWithTakeBackToFront(v74, v65);
              v52 = a2;
              v5 = v75;
            }
          }
          v47 = v80;
          if (v80 > v66)
          {
            a2 = v52;
            if (v52 > v63)
              continue;
          }
          goto LABEL_62;
        }
      }
      goto LABEL_62;
    }
  }
  else if ((v31 & 0x8000000000000000) == 0)
  {
    v77 = (char *)v29;
    v33 = v31 * v29;
    if ((unint64_t)a4 < a1 || a1 + v33 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v31, v73);
    }
    else if (a4 != (void *)a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v76 = (unint64_t)a4 + v33;
    v80 = (unint64_t)a4 + v33;
    v35 = v33 < 1 || a2 >= a3;
    if (!v35)
    {
      while (1)
      {
        sub_10005972C(a2, (uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
        sub_10005972C((uint64_t)a4, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
        a4 = objc_autoreleasePoolPush();
        sub_10084EE10((uint64_t)v27);
        if (v5)
          goto LABEL_66;
        v36 = a3;
        objc_autoreleasePoolPop(a4);
        v37 = objc_autoreleasePoolPush();
        v38 = v75;
        sub_10084EE10((uint64_t)v25);
        v5 = 0;
        objc_autoreleasePoolPop(v37);
        v39 = Date.compare(_:)(v38);
        v40 = *(void (**)(char *, uint64_t))(v78 + 8);
        v41 = v38;
        v42 = v79;
        v40(v41, v79);
        v40(v18, v42);
        sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
        sub_1000126B0((uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
        v43 = (unint64_t)v82;
        if (v39 == 1)
        {
          v44 = v77;
          v45 = (unint64_t)&v77[a2];
          if ((unint64_t)v82 < a2 || (unint64_t)v82 >= v45)
          {
            swift_arrayInitWithTakeFrontToBack(v82, a2, 1, v73);
          }
          else if (v82 == (char *)a2)
          {
            v43 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v82, a2);
          }
        }
        else
        {
          v44 = v77;
          v46 = (unint64_t)&v77[v81];
          if ((unint64_t)v82 < v81 || (unint64_t)v82 >= v46)
          {
            swift_arrayInitWithTakeFrontToBack(v82, v81, 1, v73);
          }
          else if (v82 != (char *)v81)
          {
            swift_arrayInitWithTakeBackToFront(v82, v81);
          }
          v81 = v46;
          v45 = a2;
        }
        v82 = &v44[v43];
        a4 = (void *)v81;
        if (v81 < v76)
        {
          a2 = v45;
          v35 = v45 >= v36;
          a3 = v36;
          if (!v35)
            continue;
        }
        break;
      }
    }
LABEL_62:
    sub_10088E920((unint64_t *)&v82, &v81, (uint64_t *)&v80);
    return 1;
  }
LABEL_68:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100283074@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_100283108(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100283130(a1, a2, a3, a4, &qword_1010F4B18, IDSAccount_ptr);
}

void sub_10028311C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100283130(a1, a2, a3, a4, &qword_1010F4B10, SPUnauthorizedTrackingObservation_ptr);
}

void sub_100283130(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  unint64_t *v25;

  v10 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v14 = __CocoaSet.Index.element.getter(v10, a2);
        v24 = v14;
        v15 = sub_10000F4A0(0, a5, a6);
        swift_unknownObjectRetain(v14);
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v15, 7);
        a5 = v25;
        swift_unknownObjectRelease(v14);
        v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v17 = -1 << *(_BYTE *)(a4 + 32);
        v10 = v16 & ~v17;
        if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
        {
          v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          v19 = static NSObject.== infix(_:_:)(v18, a5);

          if ((v19 & 1) == 0)
          {
            v20 = ~v17;
            do
            {
              v10 = (v10 + 1) & v20;
              if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                goto LABEL_24;
              v21 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
              v22 = static NSObject.== infix(_:_:)(v21, a5);

            }
            while ((v22 & 1) == 0);
          }

LABEL_20:
          v23 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v10);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v11 = a4;
  else
    v11 = a4 & 0xFFFFFFFFFFFFFF8;
  v12 = __CocoaSet.element(at:)(a1, a2, v11);
  v24 = v12;
  v13 = sub_10000F4A0(0, a5, a6);
  swift_unknownObjectRetain(v12);
  swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v13, 7);
  swift_unknownObjectRelease(v12);
}

uint64_t sub_100283390(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = result;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) == 0)
    {
      if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
      {
        __break(1u);
      }
      else if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) != 0)
      {
        if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        {
LABEL_20:
          v10 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          swift_retain();
          return v10;
        }
        __break(1u);
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    result = __CocoaSet.Index.age.getter(result, a2);
    if ((_DWORD)result == *(_DWORD *)(a4 + 36))
    {
      v11 = __CocoaSet.Index.element.getter(v6, a2);
      v20 = v11;
      swift_unknownObjectRetain(v11);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
      swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
      v13 = v21;
      swift_unknownObjectRelease(v11);
      v22 = v13;
      v14 = *(_QWORD *)(a4 + 40);
      v15 = sub_1000193A4(&qword_101117070, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v12, v15);
      v17 = -1 << *(_BYTE *)(a4 + 32);
      v6 = v16 & ~v17;
      if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        v18 = ~v17;
        v19 = sub_1000193A4(&qword_1010F49B0, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
        while (1)
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          if ((dispatch thunk of static Equatable.== infix(_:_:)(&v21, &v22, v12, v19) & 1) != 0)
            break;
          v6 = (v6 + 1) & v18;
          if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        swift_release();
        __break(1u);
      }
      swift_release();
      goto LABEL_20;
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((a3 & 1) != 0)
  {
    if (a4 < 0)
      v7 = a4;
    else
      v7 = a4 & 0xFFFFFFFFFFFFFF8;
    v8 = __CocoaSet.element(at:)(result, a2, v7);
    v21 = v8;
    swift_unknownObjectRetain(v8);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
    swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v9, 7);
    v10 = v22;
    swift_unknownObjectRelease(v8);
    return v10;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_1002835F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  Class isa;
  id v88;
  NSString v89;
  Class v90;
  NSString v91;
  Class v92;
  Class v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  int *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  id v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  Class v130;
  uint64_t v131;
  id v132;
  double v133;
  double v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t);
  void *v145;
  uint64_t *v146;
  BOOL v147;
  int *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  void *v159;
  id v160;
  Class v161;
  id v162;
  uint64_t v163;
  void *v164;
  Class v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  char *v170;
  Class v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  Class v179;
  char *v180;
  uint64_t v181;
  id v182;
  char *v183;
  Class v184;
  uint64_t v185;
  uint64_t v186;
  Class v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  void (*v207)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  id v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  uint64_t v230;
  NSString v231;
  int *v232;
  id v233;
  id v234;
  NSString v235;
  NSString v236;
  id v237;
  NSString v238;
  uint64_t v239;
  unint64_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  id v244;
  id v245;
  NSString v246;
  NSString v247;
  void *v248;
  id v249;
  uint64_t v250;
  NSString v251;
  uint64_t v252;
  int v253;
  void (*v254)(uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v255;
  NSString v256;
  int *v257;
  uint64_t v258;
  Class v259;
  int *v260;
  char v261;
  void (*v262)(uint64_t, uint64_t, uint64_t, int *);
  int *v263;
  NSString v264;
  uint64_t v265;
  uint64_t v266;
  void *v267;
  char v268;
  void *v269;
  NSString v270;
  uint64_t v271;
  uint64_t v272;
  Class v273;
  uint64_t v274;
  NSString v275;
  void (*v276)(char *, uint64_t);
  NSString v277;
  void (*v278)(char *, uint64_t);
  uint64_t (*v279)(uint64_t);
  uint64_t v280;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char *v315;
  uint64_t v316;
  char *v317;
  _BYTE *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  _BYTE *v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  char *v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  id v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  __int128 v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  _QWORD v355[5];

  v331 = a2;
  v341 = a1;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v2);
  v4 = (char *)&v282 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v5);
  v314 = (char *)&v282 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = type metadata accessor for SharedBeaconRecord(0);
  v293 = *(_QWORD *)(v295 - 8);
  __chkstk_darwin(v295);
  v287 = (uint64_t)&v282 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v282 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v294 = (uint64_t)&v282 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v313 = (char *)&v282 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v312 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v296 = (uint64_t)&v282 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v309 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v309);
  v310 = (char *)&v282 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v311 = type metadata accessor for BeaconNamingRecord(0);
  v308 = *(_QWORD *)(v311 - 8);
  __chkstk_darwin(v311);
  v315 = (char *)&v282 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v19);
  v307 = (char *)&v282 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_10110EEB0);
  v22 = __chkstk_darwin(v21);
  v292 = (uint64_t)&v282 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v298 = (uint64_t)&v282 - v24;
  v25 = type metadata accessor for BeaconProductInfoRecord(0);
  v319 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v285 = (uint64_t)&v282 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v289 = (uint64_t)&v282 - v28;
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v29);
  v306 = (uint64_t)&v282 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = type metadata accessor for KeyAlignmentRecord(0);
  v305 = *(_QWORD *)(v300 - 8);
  __chkstk_darwin(v300);
  v291 = (uint64_t)&v282 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v32);
  v34 = (char *)&v282 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = type metadata accessor for KeySyncRecord(0);
  v302 = *(_QWORD *)(v304 - 8);
  __chkstk_darwin(v304);
  v290 = (uint64_t)&v282 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v343 = type metadata accessor for LocationProvider(0);
  v342 = *(_QWORD *)(v343 - 8);
  v36 = __chkstk_darwin(v343);
  v336 = (uint64_t)&v282 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v282 - v38;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F47E0);
  v41 = __chkstk_darwin(v40);
  v337 = (uint64_t)&v282 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v339 = (uint64_t)&v282 - v43;
  v338 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v338 - 8);
  v45 = __chkstk_darwin(v338);
  v299 = (char *)&v282 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v45);
  v340 = (char *)&v282 - v48;
  __chkstk_darwin(v47);
  v325 = (char *)&v282 - v49;
  v321 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v50 = __chkstk_darwin(v321);
  v318 = (char *)&v282 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  v324 = (char *)&v282 - v52;
  v53 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v53);
  v297 = (char *)&v282 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v55);
  v316 = (uint64_t)&v282 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for UUID(0);
  v320 = *(_QWORD *)(v57 - 8);
  v58 = __chkstk_darwin(v57);
  v329 = (char *)&v282 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v58);
  v317 = (char *)&v282 - v61;
  v62 = __chkstk_darwin(v60);
  v334 = (char *)&v282 - v63;
  __chkstk_darwin(v62);
  v323 = (char *)&v282 - v64;
  v355[3] = v15;
  v355[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v65 = sub_100018F08(v355);
  sub_10005972C(v341, (uint64_t)v65, type metadata accessor for OwnedBeaconRecord);
  v335 = objc_msgSend(objc_allocWithZone((Class)SPBeacon), "init");
  v327 = v15;
  v66 = *(int *)(v15 + 68);
  v341 = *(int *)(v15 + 64);
  v67 = *(_QWORD *)((char *)v65 + v341);
  v328 = v65;
  v326 = v66;
  v68 = sub_1001EE37C(v67, *(_QWORD *)((char *)v65 + v66));
  v332 = v44;
  v330 = (uint64_t *)v57;
  v286 = v4;
  v288 = v11;
  v301 = v25;
  v303 = v34;
  if (v69 >> 60 == 15)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v70 = type metadata accessor for Logger(0);
    sub_10001A9E8(v70, (uint64_t)qword_1011B77E8);
    sub_100030784((uint64_t)v355, (uint64_t)&v345);
    v71 = sub_100030784((uint64_t)v355, (uint64_t)&v353);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = swift_slowAlloc(22, -1);
      *(_DWORD *)v74 = 134218240;
      v75 = sub_10001AA44(&v345, v347);
      v76 = v327;
      v77 = *(_QWORD *)((char *)v75 + *(int *)(v327 + 64));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v345);
      v344 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, &v345, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      v78 = *(_QWORD *)((char *)sub_10001AA44(&v353, v354) + *(int *)(v76 + 68));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v353);
      *(_QWORD *)&v345 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v345, (char *)&v345 + 8, v74 + 14, v74 + 22);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v74, 0x16u);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v353);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v345);
    }

    UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    v79 = v68;
    v80 = v69;
    if (qword_1010E9A18 != -1)
      swift_once(&qword_1010E9A18, sub_1001EE150);
    v345 = xmmword_1010F2B08;
    sub_10001BBBC(xmmword_1010F2B08, *((unint64_t *)&xmmword_1010F2B08 + 1));
    Data.append(_:)(v79, v80);
    v81 = *((_QWORD *)&v345 + 1);
    v82 = v345;
    v353 = v345;
    v83 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v83);
    sub_10001BC14(v82, v81);
    sub_10001EF3C(v79, v80);
    v57 = (uint64_t)v330;
  }
  v84 = v327;
  v85 = v328;
  v86 = (uint64_t)v328 + *(int *)(v327 + 20);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v88 = v335;
  objc_msgSend(v335, "setIdentifier:", isa);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v85 + *(int *)(v84 + 56) + 8));
  v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v88, "setModel:", v89);

  sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  v90 = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v88, "setShares:", v90);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v85 + *(int *)(v84 + 60) + 8));
  v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v88, "setSystemVersion:", v91);

  v92 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v88, "setProductUUID:", v92);

  objc_msgSend(v88, "setVendorId:", *(_QWORD *)((char *)v85 + v341));
  objc_msgSend(v88, "setProductId:", *(_QWORD *)((char *)v85 + v326));
  v93 = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v88, "setPairingDate:", v93);

  sub_1009A2CF8();
  v95 = v94;
  objc_msgSend(v88, "setType:", v94);

  v96 = v320;
  v97 = *(void (**)(char *, uint64_t, uint64_t))(v320 + 16);
  v98 = (uint64_t)v334;
  v333 = v86;
  v97(v334, v86, v57);
  v322 = *(_QWORD *)(v331 + 160);
  v99 = sub_100889F60(v98);
  v100 = v99[2];
  v101 = (int *)type metadata accessor for LostModeRecord(0);
  v102 = *((_QWORD *)v101 - 1);
  if (v100)
  {
    v103 = v316;
    sub_10005972C((uint64_t)v99 + ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80)), v316, type metadata accessor for LostModeRecord);
    v104 = 0;
    v105 = v332;
  }
  else
  {
    v104 = 1;
    v105 = v332;
    v103 = v316;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v102 + 56))(v103, v104, 1, v101);
  swift_bridgeObjectRelease();
  v106 = v334;
  v334 = *(char **)(v96 + 8);
  ((void (*)(char *, uint64_t))v334)(v106, v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v102 + 48))(v103, 1, v101) == 1)
  {
    sub_100004048(v103, (uint64_t *)&unk_1010F47F0);
    v107 = 0;
  }
  else
  {
    v108 = (uint64_t *)(v103 + v101[9]);
    v109 = v108[1];
    v316 = *v108;
    v110 = v101[8];
    v111 = (uint64_t *)(v103 + v101[7]);
    v112 = v111[1];
    v283 = *v111;
    v113 = *(_QWORD *)(v103 + v110 + 8);
    v284 = *(_QWORD *)(v103 + v110);
    swift_bridgeObjectRetain(v113);
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v112);
    v114 = objc_autoreleasePoolPush();
    v115 = (uint64_t)v297;
    sub_10084EE10(v103);
    objc_autoreleasePoolPop(v114);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v115, 0, 1, v338);
    v116 = objc_allocWithZone((Class)SPLostModeInfo);
    v117 = v112;
    v57 = (uint64_t)v330;
    v107 = sub_10084F34C(v316, v109, v283, v117, v284, v113, v115);
    sub_1000126B0(v103, type metadata accessor for LostModeRecord);
  }
  v118 = (uint64_t)v317;
  objc_msgSend(v335, "setLostModeInfo:", v107);

  v97((char *)v118, v333, v57);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v119 = qword_1011B7160;
  v120 = objc_autoreleasePoolPush();
  sub_10058DC14(v119, v118, 0, 0, &v345);
  v121 = v321;
  v122 = v324;
  v123 = (uint64_t)&v324[*(int *)(v321 + 48)];
  objc_autoreleasePoolPop(v120);
  LOBYTE(v120) = sub_10082B1AC(v123, v118, v345, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v334)(v118, v57);
  v124 = v120 & 1;
  *v122 = v120 & 1;
  objc_msgSend(v335, "setConnected:", v120 & 1);
  v125 = *(int *)(v121 + 48);
  v126 = v318;
  v127 = &v318[v125];
  *v318 = v124;
  sub_10000F9B8(v123, (uint64_t)&v126[v125], (uint64_t *)&unk_1010EA690);
  v128 = v332;
  v129 = v338;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v332 + 48))(v127, 1, v338) == 1)
  {
    v130 = 0;
  }
  else
  {
    v130 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v128 + 8))(v127, v129);
  }
  v131 = v337;
  v321 = (uint64_t)v97;
  v132 = v335;
  objc_msgSend(v335, "setConnectedStateExpiryDate:", v130);

  objc_msgSend(v132, "setIsAppleAudioAccessory:", sub_100A2D38C(*(_QWORD *)((char *)v328 + v341), *(_QWORD *)((char *)v328 + v326)));
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v326 = 0;
  sub_100C1B7A4(v345);
  v134 = v133;
  v135 = swift_bridgeObjectRelease();
  v136 = v325;
  Date.init(timeIntervalSinceNow:)(v135, -v134);
  v137 = sub_10088B3D0(v333);
  v138 = v338;
  (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v340, v136, v338);
  v139 = sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
  v140 = sub_1000170AC(&qword_1010F4818, &qword_1010F4810, SPLocationProvider_ptr);
  swift_bridgeObjectRetain(v137);
  v318 = (_BYTE *)v139;
  v317 = (char *)v140;
  v141 = 0;
  *(_QWORD *)&v345 = Set.init(minimumCapacity:)(0);
  v142 = (uint64_t)v137;
  v143 = v137[2];
  v144 = type metadata accessor for LocationProvider;
  v145 = &protocol conformance descriptor for Date;
  v146 = &qword_1010F4820;
  v341 = (uint64_t)v137;
  while (2)
  {
    v147 = v141 == v143;
    while (1)
    {
      v148 = (int *)v343;
      if (v147)
      {
        v151 = 1;
        v141 = v143;
        goto LABEL_32;
      }
      if (v141 >= *(_QWORD *)(v142 + 16))
      {
        __break(1u);
        goto LABEL_73;
      }
      v137 = (_QWORD *)(v141 + 1);
      sub_10005972C(v142+ ((*(unsigned __int8 *)(v342 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80))+ *(_QWORD *)(v342 + 72) * v141, (uint64_t)v39, type metadata accessor for LocationProvider);
      v149 = &v39[v148[7]];
      v150 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v149, v340, v138, v150) & 1) == 0)
        break;
      sub_1000126B0((uint64_t)v39, type metadata accessor for LocationProvider);
      ++v141;
      v147 = v143 == (_QWORD)v137;
      v142 = v341;
    }
    sub_1000126EC((uint64_t)v39, v339, type metadata accessor for LocationProvider);
    v151 = 0;
    ++v141;
    v148 = (int *)v343;
LABEL_32:
    v152 = v342;
    v153 = v339;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v342 + 56))(v339, v151, 1, v148);
    sub_100005CF0(v153, v131, (uint64_t *)&unk_1010F47E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v152 + 48))(v131, 1, v148) != 1)
    {
      v154 = v131;
      v155 = v39;
      v156 = v336;
      sub_1000126EC(v154, v336, type metadata accessor for LocationProvider);
      v157 = sub_1008A4DC4(*(unsigned __int8 *)(v156 + v148[6]), *(_QWORD *)(v156 + v148[6] + 8), *(void **)(v156 + v148[6] + 16));
      v137 = (_QWORD *)sub_100ACD7B4(v157, v158, v159);
      swift_bridgeObjectRelease();
      v160 = objc_allocWithZone((Class)SPLocationProvider);
      v161 = Date._bridgeToObjectiveC()().super.isa;
      v162 = objc_msgSend(v160, "initWithTimestamp:provider:", v161, v137);

      v163 = v156;
      v39 = v155;
      v131 = v337;
      sub_1000126B0(v163, type metadata accessor for LocationProvider);
      v164 = v162;
      v138 = v338;
      sub_100A0C424((Swift::Int *)&v353, v164);

      v142 = v341;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v165 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v166 = v335;
  objc_msgSend(v335, "setLocationProviders:", v165);

  v167 = (uint64_t)v303;
  sub_10081AECC(v333, (uint64_t)v303);
  v168 = v304;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v167, 1, v304) == 1)
  {
    sub_100004048(v167, &qword_1010F7AE0);
    v169 = objc_msgSend(v166, "setKeySyncLastObservedIndex:", 0);
    v170 = v299;
    static Date.distantPast.getter(v169);
    v171 = Date._bridgeToObjectiveC()().super.isa;
    v172 = v332;
    v173 = v338;
    (*(void (**)(char *, uint64_t))(v332 + 8))(v170, v338);
    objc_msgSend(v166, "setKeySyncLastIndexObservationDate:", v171);

    objc_msgSend(v166, "setKeySyncWildIndexFallback:", 0);
    v174 = v330;
    v175 = v301;
    v176 = v300;
  }
  else
  {
    v177 = v167;
    v178 = v290;
    sub_1000126EC(v177, v290, type metadata accessor for KeySyncRecord);
    objc_msgSend(v166, "setKeySyncLastObservedIndex:", *(_QWORD *)(v178 + *(int *)(v168 + 20)));
    v179 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v166, "setKeySyncLastIndexObservationDate:", v179);

    objc_msgSend(v166, "setKeySyncWildIndexFallback:", *(_QWORD *)(v178 + *(int *)(v168 + 40)));
    sub_1000126B0(v178, type metadata accessor for KeySyncRecord);
    v172 = v332;
    v174 = v330;
    v175 = v301;
    v176 = v300;
    v173 = v338;
  }
  v180 = v329;
  ((void (*)(char *, uint64_t, uint64_t *))v321)(v329, v333, v174);
  v181 = v306;
  sub_1008892B4(v306);
  ((void (*)(char *, uint64_t *))v334)(v180, v174);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v305 + 48))(v181, 1, v176) == 1)
  {
    sub_100004048(v181, (uint64_t *)&unk_1010F47D0);
    v182 = objc_msgSend(v166, "setKeyAlignmentLastObservedIndex:", 0);
    v183 = v299;
    static Date.distantPast.getter(v182);
    v184 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v172 + 8))(v183, v173);
    objc_msgSend(v166, "setKeyAlignmentLastIndexObservationDate:", v184);

  }
  else
  {
    v185 = v181;
    v186 = v291;
    sub_1000126EC(v185, v291, type metadata accessor for KeyAlignmentRecord);
    objc_msgSend(v166, "setKeyAlignmentLastObservedIndex:", *(_QWORD *)(v186 + *(int *)(v176 + 28)));
    v187 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v166, "setKeyAlignmentLastIndexObservationDate:", v187);

    sub_1000126B0(v186, type metadata accessor for KeyAlignmentRecord);
  }
  v188 = objc_msgSend(v166, "type");
  v189 = SPBeaconTypeAccessory;
  v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
  v192 = v191;
  v194 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
  if (v190 == v194 && v192 == v193)
  {
LABEL_42:

    swift_bridgeObjectRelease_n(v192, 2);
    v195 = v331;
    goto LABEL_44;
  }
  v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v190, v192, v194, v193, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v195 = v331;
  if ((v196 & 1) != 0)
    goto LABEL_44;
  v188 = objc_msgSend(v166, "type");
  v211 = SPBeaconTypeHele;
  v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
  v192 = v213;
  v215 = static String._unconditionallyBridgeFromObjectiveC(_:)(v211);
  if (v212 == v215 && v192 == v214)
    goto LABEL_42;
  v216 = _stringCompareWithSmolCheck(_:_:expecting:)(v212, v192, v215, v214, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v195 = v331;
  if ((v216 & 1) != 0)
  {
LABEL_44:
    v197 = objc_msgSend(v166, "identifier");
    v198 = (uint64_t)v329;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v197);

    v199 = v298;
    sub_10081BB64(v198, v298);
    ((void (*)(uint64_t, uint64_t *))v334)(v198, v330);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v199, 1, v175) == 1)
    {
      sub_100004048(v199, &qword_10110EEB0);
    }
    else
    {
      v200 = v199;
      v201 = v289;
      sub_1000126EC(v200, v289, type metadata accessor for BeaconProductInfoRecord);
      v202 = sub_100603CFC();
      objc_msgSend(v166, "setAccessoryProductInfo:", v202);

      sub_1000126B0(v201, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_100030784((uint64_t)v355, (uint64_t)&v345);
  v203 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v204 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v205 = (uint64_t)v307;
  v206 = swift_dynamicCast(v307, &v345, v203, v204, 6);
  v207 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v204 - 8) + 56);
  v343 = v203;
  if (v206)
  {
    v207(v205, 0, 1, v204);
    sub_100004048(v205, (uint64_t *)&unk_1010EDC50);
    v208 = objc_msgSend(v166, "identifier");
    v209 = (uint64_t)v329;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v208);

    v210 = v292;
    sub_10081BB64(v209, v292);
    v146 = v330;
    ((void (*)(uint64_t, uint64_t *))v334)(v209, v330);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v319 + 48))(v210, 1, v175) == 1)
    {
      sub_100004048(v210, &qword_10110EEB0);
    }
    else
    {
      v217 = v210;
      v218 = v285;
      sub_1000126EC(v217, v285, type metadata accessor for BeaconProductInfoRecord);
      v219 = sub_100603CFC();
      objc_msgSend(v166, "setAccessoryProductInfo:", v219);

      sub_1000126B0(v218, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v207(v205, 1, 1, v204);
    sub_100004048(v205, (uint64_t *)&unk_1010EDC50);
    v146 = v330;
  }
  v220 = (uint64_t)v315;
  v221 = v329;
  v222 = ((uint64_t (*)(char *, uint64_t, uint64_t *))v321)(v329, v333, v146);
  __chkstk_darwin(v222);
  v223 = (uint64_t)v310;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
  ((void (*)(char *, uint64_t *))v334)(v221, v146);
  v224 = v311;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48))(v223, 1, v311) == 1)
  {
    sub_100004048(v223, (uint64_t *)&unk_101105880);
    sub_100030784((uint64_t)v355, (uint64_t)&v353);
    v225 = swift_allocObject(&unk_101063B50, 64, 7);
    *(_QWORD *)(v225 + 16) = v195;
    sub_10000F9FC(&v353, v225 + 24);
    swift_retain();
    v226 = sub_10001A9A8((uint64_t *)&unk_1010F4830);
    unsafeFromAsyncTask<A>(_:)(&v345, &unk_1010F4828, v225, v226);
    swift_release();
    v145 = (void *)*((_QWORD *)&v345 + 1);
    v227 = v332;
    v144 = (uint64_t (*)(uint64_t))v343;
    if (*((_QWORD *)&v345 + 1))
    {
      v138 = v346;
      v342 = v347;
      v131 = v348;
      v337 = v349;
      v228 = v350;
      v143 = v351;
      v229 = v166;
      v230 = v352;
      v336 = v345;
      v231 = String._bridgeToObjectiveC()();
      objc_msgSend(v229, "setName:", v231);

      v232 = (int *)sub_100DC5700(v138);
      v148 = v232;
      v339 = v228;
      if (v138 == SPBeaconRoleIdOther && v131 && v232)
      {
        v233 = objc_msgSend(v232, "role", swift_bridgeObjectRetain(v131).n128_f64[0]);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v233);

        v234 = objc_allocWithZone((Class)SPBeaconRole);
        v235 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v236 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v237 = objc_msgSend(v234, "initWithRoleId:role:roleEmoji:", v138, v235, v236);

        v146 = v330;
        objc_msgSend(v335, "setRole:", v237);

      }
      else
      {
        objc_msgSend(v335, "setRole:", v232);
      }
      v137 = (_QWORD *)v327;
      if (v230)
      {
        swift_bridgeObjectRetain(v230);
        v251 = String._bridgeToObjectiveC()();
        sub_10007CB98(v336, (uint64_t)v145, v138, v342, v131, v337, v339, v143, v230);
        swift_bridgeObjectRelease();
        goto LABEL_74;
      }
LABEL_73:
      sub_10007CB98(v336, (uint64_t)v145, v138, v342, v131, v337, v339, v143, 0);
      v251 = 0;
LABEL_74:
      v166 = v335;
      objc_msgSend(v335, "setSerialNumber:", v251);

      v173 = v338;
      v227 = v332;
    }
    else
    {
      v137 = (_QWORD *)v327;
    }
    v250 = (uint64_t)v314;
    goto LABEL_76;
  }
  sub_1000126EC(v223, v220, type metadata accessor for BeaconNamingRecord);
  swift_bridgeObjectRetain(*(_QWORD *)(v220 + *(int *)(v224 + 32) + 8));
  v238 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v166, "setName:", v238);

  v239 = v224;
  v240 = *(_QWORD *)(v220 + *(int *)(v224 + 28));
  v241 = (void *)sub_100DC5700(v240);
  v242 = v241;
  if (v240 == SPBeaconRoleIdOther && (v243 = v220 + *(int *)(v239 + 36), *(_QWORD *)(v243 + 8)) && v241)
  {
    v244 = objc_msgSend(v241, "role", swift_bridgeObjectRetain(*(_QWORD *)(v243 + 8)).n128_f64[0]);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v244);

    v245 = objc_allocWithZone((Class)SPBeaconRole);
    v246 = String._bridgeToObjectiveC()();
    v173 = v338;
    swift_bridgeObjectRelease();
    v247 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v248 = v245;
    v220 = (uint64_t)v315;
    v249 = objc_msgSend(v248, "initWithRoleId:role:roleEmoji:", v240, v246, v247);

    v146 = v330;
    objc_msgSend(v166, "setRole:", v249);

    v242 = v249;
  }
  else
  {
    objc_msgSend(v166, "setRole:", v241);
  }
  v227 = v332;
  v250 = (uint64_t)v314;
  v144 = (uint64_t (*)(uint64_t))v343;

  sub_1000126B0(v220, type metadata accessor for BeaconNamingRecord);
  v137 = (_QWORD *)v327;
LABEL_76:
  sub_100030784((uint64_t)v355, (uint64_t)&v345);
  v252 = (uint64_t)v313;
  v253 = swift_dynamicCast(v313, &v345, v144, v137, 6);
  v254 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(v312 + 56);
  if (v253)
  {
    v254(v252, 0, 1, v137);
    v255 = v296;
    sub_1000126EC(v252, v296, type metadata accessor for OwnedBeaconRecord);
    sub_100C6ED38();
    v256 = String._bridgeToObjectiveC()();
    v257 = (int *)v327;
    swift_bridgeObjectRelease();
    objc_msgSend(v166, "setStableIdentifier:", v256);

    v258 = v294;
    sub_10000F9B8(v255 + v257[7], v294, &qword_1010ED860);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v320 + 48))(v258, 1, v146) == 1)
    {
      v259 = 0;
    }
    else
    {
      v259 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t *))v334)(v258, v146);
    }
    objc_msgSend(v166, "setGroupIdentifier:", v259);

    sub_10085DA88(v255);
    if (v274)
    {
      v275 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      v275 = 0;
    }
    objc_msgSend(v166, "setSerialNumber:", v275);

    objc_msgSend(v166, "setPartIdentifier:", sub_10085DD20(v255));
    objc_msgSend(v166, "setBatteryLevel:", *(unsigned __int8 *)(v255 + v257[19]));
    objc_msgSend(v166, "setIsZeus:", *(unsigned __int8 *)(v255 + v257[20]));
    if (qword_1010EA0E0 != -1)
      swift_once(&qword_1010EA0E0, sub_1009A316C);
    objc_msgSend(v166, "setOwner:", qword_1011B7AC0);
    objc_msgSend(v166, "setAccepted:", 1);
    v277 = String._bridgeToObjectiveC()();
    objc_msgSend(v166, "setCorrelationIdentifier:", v277);

    objc_msgSend(v166, "setInternalShareType:", -1);
    objc_msgSend(v166, "setOwnerBeaconIdentifier:", 0);
    swift_bridgeObjectRelease();
    v278 = *(void (**)(char *, uint64_t))(v227 + 8);
    v278(v340, v173);
    v279 = type metadata accessor for OwnedBeaconRecord;
LABEL_94:
    sub_1000126B0(v255, v279);
    v278(v325, v173);
    sub_100004048((uint64_t)v324, (uint64_t *)&unk_1011002E0);
    ((void (*)(char *, uint64_t *))v334)(v323, v146);
    goto LABEL_95;
  }
  v254(v252, 1, 1, v137);
  sub_100004048(v252, (uint64_t *)&unk_1010F47C0);
  sub_100030784((uint64_t)v355, (uint64_t)&v345);
  v260 = (int *)v295;
  v261 = swift_dynamicCast(v250, &v345, v144, v295, 6);
  v262 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v293 + 56);
  if ((v261 & 1) != 0)
  {
    v262(v250, 0, 1, v260);
    v263 = v260;
    v255 = v287;
    sub_1000126EC(v250, v287, type metadata accessor for SharedBeaconRecord);
    v264 = String._bridgeToObjectiveC()();
    objc_msgSend(v166, "setStableIdentifier:", v264);

    v265 = v255 + v263[7];
    v266 = *(_QWORD *)(v265 + 8);
    v267 = *(void **)(v265 + 16);
    v268 = *(_BYTE *)v265;
    swift_bridgeObjectRetain(v267);
    v269 = (void *)sub_100ACD7B4(v268, v266, v267);
    swift_bridgeObjectRelease();
    objc_msgSend(v166, "setOwner:", v269);

    objc_msgSend(v166, "setAccepted:", *(unsigned __int8 *)(v255 + v263[13]));
    swift_bridgeObjectRetain(*(_QWORD *)(v255 + v263[8] + 8));
    v270 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v166, "setCorrelationIdentifier:", v270);

    objc_msgSend(v166, "setInternalShareType:", *(unsigned __int8 *)(v255 + v263[16]));
    v271 = (uint64_t)v286;
    sub_10000F9B8(v255 + v263[20], (uint64_t)v286, (uint64_t *)&unk_1010F47B0);
    v272 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v272 - 8) + 48))(v271, 1, v272) == 1)
    {
      sub_100004048(v271, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v320 + 56))(v288, 1, 1, v146);
      v273 = 0;
    }
    else
    {
      v280 = (uint64_t)v288;
      sub_10000F9B8(v271 + *(int *)(v272 + 20), (uint64_t)v288, &qword_1010ED860);
      sub_1000126B0(v271, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v320 + 48))(v280, 1, v146) == 1)
      {
        v273 = 0;
      }
      else
      {
        v273 = UUID._bridgeToObjectiveC()().super.isa;
        ((void (*)(uint64_t, uint64_t *))v334)(v280, v146);
      }
    }
    objc_msgSend(v166, "setOwnerBeaconIdentifier:", v273);
    swift_bridgeObjectRelease();

    v278 = *(void (**)(char *, uint64_t))(v227 + 8);
    v278(v340, v173);
    v279 = type metadata accessor for SharedBeaconRecord;
    goto LABEL_94;
  }
  v262(v250, 1, 1, v260);
  swift_bridgeObjectRelease();
  v276 = *(void (**)(char *, uint64_t))(v227 + 8);
  v276(v340, v173);
  v276(v325, v173);
  sub_100004048((uint64_t)v324, (uint64_t *)&unk_1011002E0);
  ((void (*)(char *, uint64_t *))v334)(v323, v146);
  sub_100004048(v250, (uint64_t *)&unk_1010EE180);
LABEL_95:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v355);
  return v166;
}

char *sub_100285C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  _QWORD *v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int *v84;
  _QWORD *v85;
  uint64_t v86;
  Class isa;
  id v88;
  NSString v89;
  Class v90;
  NSString v91;
  Class v92;
  uint64_t v93;
  Class v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _BYTE *v104;
  id v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  void *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  int *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  uint64_t v128;
  Class v129;
  uint64_t v130;
  id v131;
  double v132;
  double v133;
  uint64_t v134;
  char *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  _QWORD *v141;
  int *v142;
  BOOL v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  void *v155;
  id v156;
  Class v157;
  id v158;
  uint64_t v159;
  void *v160;
  Class v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  Class v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  Class v172;
  char *v173;
  uint64_t v174;
  id v175;
  uint64_t v176;
  Class v177;
  uint64_t v178;
  uint64_t v179;
  Class v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  void (*v200)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  int *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  NSString v229;
  void *v230;
  void *v231;
  id v232;
  id v233;
  NSString v234;
  NSString v235;
  id v236;
  NSString v237;
  uint64_t v238;
  NSString v239;
  unint64_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  id v244;
  id v245;
  NSString v246;
  NSString v247;
  void *v248;
  id v249;
  uint64_t v250;
  int *v251;
  uint64_t v252;
  int v253;
  void (*v254)(uint64_t, uint64_t, uint64_t, int *);
  NSString v255;
  uint64_t v256;
  Class v257;
  uint64_t v258;
  char v259;
  void (*v260)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v261;
  NSString v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  char v266;
  void *v267;
  NSString v268;
  Class v269;
  uint64_t v270;
  NSString v271;
  void (*v272)(char *, uint64_t);
  NSString v273;
  void (*v274)(char *, uint64_t);
  uint64_t (*v275)(uint64_t);
  uint64_t v276;
  uint64_t v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  _BYTE *v312;
  uint64_t v313;
  uint64_t v314;
  int *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  _BYTE *v320;
  uint64_t v321;
  uint64_t v322;
  void (*v323)(uint64_t, uint64_t);
  int *v324;
  uint64_t v325;
  _QWORD *v326;
  void (*v327)(uint64_t, uint64_t, uint64_t);
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  _QWORD *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  __int128 v342;
  unint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int128 v350;
  uint64_t v351;
  _QWORD v352[5];

  v329 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v3);
  v281 = (uint64_t)&v279 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v5);
  v290 = (char *)&v279 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v288 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v291 = (uint64_t)&v279 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v279 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v289 = (uint64_t)&v279 - v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v14);
  v307 = (char *)&v279 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v308 = type metadata accessor for OwnedBeaconRecord(0);
  v306 = *(_QWORD *)(v308 - 8);
  __chkstk_darwin(v308);
  v17 = (char *)&v279 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v303);
  v304 = (char *)&v279 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v305 = type metadata accessor for BeaconNamingRecord(0);
  v302 = *(_QWORD *)(v305 - 8);
  __chkstk_darwin(v305);
  v287 = (uint64_t)&v279 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v20);
  v301 = (char *)&v279 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_10110EEB0);
  v23 = __chkstk_darwin(v22);
  v286 = (uint64_t)&v279 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v293 = (uint64_t)&v279 - v25;
  v295 = type metadata accessor for BeaconProductInfoRecord(0);
  v314 = *(_QWORD *)(v295 - 8);
  v26 = __chkstk_darwin(v295);
  v280 = (uint64_t)&v279 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v283 = (uint64_t)&v279 - v28;
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v29);
  v300 = (uint64_t)&v279 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = type metadata accessor for KeyAlignmentRecord(0);
  v299 = *(_QWORD *)(v294 - 8);
  __chkstk_darwin(v294);
  v285 = (uint64_t)&v279 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v32);
  v297 = (uint64_t)&v279 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for KeySyncRecord(0);
  v296 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v284 = (uint64_t)&v279 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v340 = type metadata accessor for LocationProvider(0);
  v339 = *(_QWORD *)(v340 - 8);
  v36 = __chkstk_darwin(v340);
  v333 = (uint64_t)&v279 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v279 - v38;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F47E0);
  v41 = __chkstk_darwin(v40);
  v334 = (uint64_t)&v279 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v336 = (uint64_t)&v279 - v43;
  v313 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v44 = __chkstk_darwin(v313);
  v312 = (char *)&v279 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  v320 = (char *)&v279 - v46;
  v47 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v47);
  v292 = (char *)&v279 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v49);
  v331 = (char *)&v279 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for Date(0);
  v316 = *(_QWORD *)(v335 - 8);
  v51 = __chkstk_darwin(v335);
  v337 = (char *)&v279 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __chkstk_darwin(v51);
  v319 = (char *)&v279 - v54;
  __chkstk_darwin(v53);
  v318 = (uint64_t)&v279 - v55;
  v56 = type metadata accessor for UUID(0);
  v325 = *(_QWORD *)(v56 - 8);
  v57 = __chkstk_darwin(v56);
  v328 = (char *)&v279 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __chkstk_darwin(v57);
  v311 = (char *)&v279 - v60;
  v61 = __chkstk_darwin(v59);
  v310 = (uint64_t)&v279 - v62;
  __chkstk_darwin(v61);
  v64 = (int *)((char *)&v279 - v63);
  v352[3] = v7;
  v352[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v65 = sub_100018F08(v352);
  sub_10005972C(a1, (uint64_t)v65, type metadata accessor for SharedBeaconRecord);
  v332 = (char *)objc_msgSend(objc_allocWithZone((Class)SPBeacon), "init");
  v324 = (int *)v7;
  v66 = *(int *)(v7 + 48);
  v338 = (_QWORD *)*(int *)(v7 + 44);
  v67 = *(_QWORD *)((char *)v338 + (_QWORD)v65);
  v326 = v65;
  v321 = v66;
  v68 = sub_1001EE37C(v67, *(_QWORD *)((char *)v65 + v66));
  v322 = v56;
  v315 = v64;
  v282 = v12;
  v309 = v17;
  v298 = v34;
  if (v69 >> 60 == 15)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v70 = type metadata accessor for Logger(0);
    sub_10001A9E8(v70, (uint64_t)qword_1011B77E8);
    sub_100030784((uint64_t)v352, (uint64_t)&v342);
    v71 = sub_100030784((uint64_t)v352, (uint64_t)&v350);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = swift_slowAlloc(22, -1);
      *(_DWORD *)v74 = 134218240;
      v75 = sub_10001AA44(&v342, v344);
      v76 = v324;
      v77 = *(_QWORD *)((char *)v75 + v324[11]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v342);
      v341 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v341, &v342, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      v78 = *(_QWORD *)((char *)sub_10001AA44(&v350, v351) + v76[12]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v350);
      *(_QWORD *)&v342 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v342, (char *)&v342 + 8, v74 + 14, v74 + 22);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v74, 0x16u);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v350);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v342);
    }

    UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    v79 = v68;
    v80 = v69;
    if (qword_1010E9A18 != -1)
      swift_once(&qword_1010E9A18, sub_1001EE150);
    v342 = xmmword_1010F2B08;
    sub_10001BBBC(xmmword_1010F2B08, *((unint64_t *)&xmmword_1010F2B08 + 1));
    Data.append(_:)(v79, v80);
    v81 = *((_QWORD *)&v342 + 1);
    v82 = v342;
    v350 = v342;
    v83 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v83);
    sub_10001BC14(v82, v81);
    sub_10001EF3C(v79, v80);
    v56 = v322;
  }
  v84 = v324;
  v85 = v326;
  v86 = (uint64_t)v326 + v324[5];
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v88 = v332;
  objc_msgSend(v332, "setIdentifier:", isa);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v85 + v84[9] + 8));
  v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v88, "setModel:", v89);

  sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  v90 = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v88, "setShares:", v90);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v85 + v84[10] + 8));
  v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v88, "setSystemVersion:", v91);

  v92 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v88, "setProductUUID:", v92);

  objc_msgSend(v88, "setVendorId:", *(_QWORD *)((char *)v338 + (_QWORD)v85));
  objc_msgSend(v88, "setProductId:", *(_QWORD *)((char *)v85 + v321));
  v93 = v318;
  sub_100D3A990(v318);
  v94 = Date._bridgeToObjectiveC()().super.isa;
  v95 = v316;
  v323 = *(void (**)(uint64_t, uint64_t))(v316 + 8);
  v323(v93, v335);
  objc_msgSend(v88, "setPairingDate:", v94);

  objc_msgSend(v88, "setType:", sub_100D3F40C());
  v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v325 + 16);
  v97 = v310;
  v330 = v86;
  v327 = v96;
  v96(v310, v86, v56);
  v317 = *(_QWORD *)(v329 + 160);
  v98 = sub_100889F60(v97);
  v99 = v98[2];
  v100 = (int *)type metadata accessor for LostModeRecord(0);
  v101 = *((_QWORD *)v100 - 1);
  if (v99)
  {
    v102 = v331;
    sub_10005972C((uint64_t)v98 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)), (uint64_t)v331, type metadata accessor for LostModeRecord);
    v103 = 0;
    v104 = v320;
  }
  else
  {
    v103 = 1;
    v104 = v320;
    v102 = v331;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v101 + 56))(v102, v103, 1, v100);
  swift_bridgeObjectRelease();
  v331 = *(char **)(v325 + 8);
  ((void (*)(uint64_t, uint64_t))v331)(v97, v56);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v101 + 48))(v102, 1, v100) == 1)
  {
    sub_100004048((uint64_t)v102, (uint64_t *)&unk_1010F47F0);
    v105 = 0;
  }
  else
  {
    v106 = (uint64_t *)&v102[v100[9]];
    v107 = v106[1];
    v310 = *v106;
    v108 = v100[8];
    v109 = (uint64_t *)&v102[v100[7]];
    v110 = *v109;
    v111 = v109[1];
    v112 = *(_QWORD *)&v102[v108 + 8];
    v279 = *(_QWORD *)&v102[v108];
    swift_bridgeObjectRetain(v112);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v111);
    v113 = objc_autoreleasePoolPush();
    v114 = (uint64_t)v292;
    sub_10084EE10((uint64_t)v102);
    v115 = v113;
    v95 = v316;
    objc_autoreleasePoolPop(v115);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v95 + 56))(v114, 0, 1, v335);
    v116 = objc_allocWithZone((Class)SPLostModeInfo);
    v117 = v111;
    v56 = v322;
    v105 = sub_10084F34C(v310, v107, v110, v117, v279, v112, v114);
    sub_1000126B0((uint64_t)v102, type metadata accessor for LostModeRecord);
  }
  v118 = (uint64_t)v311;
  objc_msgSend(v332, "setLostModeInfo:", v105);

  v327(v118, v330, v56);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v119 = v95;
  v120 = qword_1011B7160;
  v121 = objc_autoreleasePoolPush();
  sub_10058DC14(v120, v118, 0, 0, &v342);
  v122 = (int *)v313;
  v123 = (uint64_t)&v104[*(int *)(v313 + 48)];
  objc_autoreleasePoolPop(v121);
  LOBYTE(v121) = sub_10082B1AC(v123, v118, v342, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v331)(v118, v56);
  v124 = v121 & 1;
  *v104 = v121 & 1;
  objc_msgSend(v332, "setConnected:", v121 & 1);
  v125 = v122[12];
  v126 = v312;
  v127 = &v312[v125];
  *v312 = v124;
  sub_10000F9B8(v123, (uint64_t)&v126[v125], (uint64_t *)&unk_1010EA690);
  v128 = v335;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v119 + 48))(v127, 1, v335) == 1)
  {
    v129 = 0;
  }
  else
  {
    v129 = Date._bridgeToObjectiveC()().super.isa;
    v323((uint64_t)v127, v128);
  }
  v130 = v334;
  v131 = v332;
  objc_msgSend(v332, "setConnectedStateExpiryDate:", v129);

  objc_msgSend(v131, "setIsAppleAudioAccessory:", sub_100A2D38C(*(_QWORD *)((char *)v338 + (_QWORD)v326), *(_QWORD *)((char *)v326 + v321)));
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v321 = 0;
  sub_100C1B7A4(v342);
  v133 = v132;
  v134 = swift_bridgeObjectRelease();
  v135 = v319;
  Date.init(timeIntervalSinceNow:)(v134, -v133);
  v136 = sub_10088B3D0(v330);
  v137 = v335;
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v337, v135, v335);
  v138 = sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
  v139 = sub_1000170AC(&qword_1010F4818, &qword_1010F4810, SPLocationProvider_ptr);
  swift_bridgeObjectRetain(v136);
  v316 = v138;
  v313 = v139;
  v140 = 0;
  *(_QWORD *)&v342 = Set.init(minimumCapacity:)(0);
  v141 = v136;
  v142 = (int *)v136[2];
  v338 = v136;
  while (2)
  {
    v143 = v140 == (_QWORD)v142;
    while (1)
    {
      v144 = v340;
      if (v143)
      {
        v147 = 1;
        v140 = (unint64_t)v142;
        goto LABEL_32;
      }
      if (v140 >= v141[2])
      {
        __break(1u);
        goto LABEL_88;
      }
      v122 = (int *)(v140 + 1);
      sub_10005972C((uint64_t)v141+ ((*(unsigned __int8 *)(v339 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v339 + 80))+ *(_QWORD *)(v339 + 72) * v140, (uint64_t)v39, type metadata accessor for LocationProvider);
      v145 = &v39[*(int *)(v144 + 28)];
      v146 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      if ((dispatch thunk of static Comparable.< infix(_:_:)(v145, v337, v137, v146) & 1) == 0)
        break;
      sub_1000126B0((uint64_t)v39, type metadata accessor for LocationProvider);
      ++v140;
      v143 = v142 == v122;
      v141 = v338;
    }
    sub_1000126EC((uint64_t)v39, v336, type metadata accessor for LocationProvider);
    v147 = 0;
    ++v140;
    v144 = v340;
LABEL_32:
    v148 = v339;
    v149 = v336;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v339 + 56))(v336, v147, 1, v144);
    sub_100005CF0(v149, v130, (uint64_t *)&unk_1010F47E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v130, 1, v144) != 1)
    {
      v150 = v130;
      v151 = v39;
      v152 = v333;
      sub_1000126EC(v150, v333, type metadata accessor for LocationProvider);
      v153 = sub_1008A4DC4(*(unsigned __int8 *)(v152 + *(int *)(v144 + 24)), *(_QWORD *)(v152 + *(int *)(v144 + 24) + 8), *(void **)(v152 + *(int *)(v144 + 24) + 16));
      v122 = (int *)sub_100ACD7B4(v153, v154, v155);
      swift_bridgeObjectRelease();
      v156 = objc_allocWithZone((Class)SPLocationProvider);
      v157 = Date._bridgeToObjectiveC()().super.isa;
      v158 = objc_msgSend(v156, "initWithTimestamp:provider:", v157, v122);

      v159 = v152;
      v39 = v151;
      v130 = v334;
      sub_1000126B0(v159, type metadata accessor for LocationProvider);
      v160 = v158;
      v137 = v335;
      sub_100A0C424((Swift::Int *)&v350, v160);

      v141 = v338;
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  v161 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39 = v332;
  objc_msgSend(v332, "setLocationProviders:", v161);

  v162 = v297;
  sub_10081AECC(v330, v297);
  v163 = v298;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v162, 1, v298) == 1)
  {
    sub_100004048(v162, &qword_1010F7AE0);
    v164 = objc_msgSend(v39, "setKeySyncLastObservedIndex:", 0);
    v165 = v318;
    static Date.distantPast.getter(v164);
    v166 = Date._bridgeToObjectiveC()().super.isa;
    v167 = v335;
    v323(v165, v335);
    objc_msgSend(v39, "setKeySyncLastIndexObservationDate:", v166);

    objc_msgSend(v39, "setKeySyncWildIndexFallback:", 0);
    v130 = v322;
    v168 = v295;
    v169 = v294;
  }
  else
  {
    v170 = v162;
    v171 = v284;
    sub_1000126EC(v170, v284, type metadata accessor for KeySyncRecord);
    objc_msgSend(v39, "setKeySyncLastObservedIndex:", *(_QWORD *)(v171 + *(int *)(v163 + 20)));
    v172 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v39, "setKeySyncLastIndexObservationDate:", v172);

    objc_msgSend(v39, "setKeySyncWildIndexFallback:", *(_QWORD *)(v171 + *(int *)(v163 + 40)));
    sub_1000126B0(v171, type metadata accessor for KeySyncRecord);
    v130 = v322;
    v168 = v295;
    v169 = v294;
    v167 = v335;
  }
  v173 = v328;
  v327((uint64_t)v328, v330, v130);
  v174 = v300;
  sub_1008892B4(v300);
  ((void (*)(char *, uint64_t))v331)(v173, v130);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v299 + 48))(v174, 1, v169) == 1)
  {
    sub_100004048(v174, (uint64_t *)&unk_1010F47D0);
    v175 = objc_msgSend(v39, "setKeyAlignmentLastObservedIndex:", 0);
    v176 = v318;
    static Date.distantPast.getter(v175);
    v177 = Date._bridgeToObjectiveC()().super.isa;
    v323(v176, v167);
    objc_msgSend(v39, "setKeyAlignmentLastIndexObservationDate:", v177);

  }
  else
  {
    v178 = v174;
    v179 = v285;
    sub_1000126EC(v178, v285, type metadata accessor for KeyAlignmentRecord);
    objc_msgSend(v39, "setKeyAlignmentLastObservedIndex:", *(_QWORD *)(v179 + *(int *)(v169 + 28)));
    v180 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v39, "setKeyAlignmentLastIndexObservationDate:", v180);

    sub_1000126B0(v179, type metadata accessor for KeyAlignmentRecord);
  }
  v181 = objc_msgSend(v39, "type");
  v182 = SPBeaconTypeAccessory;
  v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
  v185 = v184;
  v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
  if (v183 == v187 && v185 == v186)
  {
LABEL_42:

    swift_bridgeObjectRelease_n(v185, 2);
    v188 = v329;
    goto LABEL_44;
  }
  v189 = _stringCompareWithSmolCheck(_:_:expecting:)(v183, v185, v187, v186, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v188 = v329;
  if ((v189 & 1) != 0)
    goto LABEL_44;
  v181 = objc_msgSend(v39, "type");
  v206 = SPBeaconTypeHele;
  v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v181);
  v185 = v208;
  v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v206);
  if (v207 == v210 && v185 == v209)
    goto LABEL_42;
  v211 = _stringCompareWithSmolCheck(_:_:expecting:)(v207, v185, v210, v209, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v188 = v329;
  if ((v211 & 1) != 0)
  {
LABEL_44:
    v190 = objc_msgSend(v39, "identifier");
    v191 = (uint64_t)v328;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v190);

    v192 = v293;
    sub_10081BB64(v191, v293);
    ((void (*)(uint64_t, uint64_t))v331)(v191, v130);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v314 + 48))(v192, 1, v168) == 1)
    {
      sub_100004048(v192, &qword_10110EEB0);
    }
    else
    {
      v193 = v192;
      v194 = v283;
      sub_1000126EC(v193, v283, type metadata accessor for BeaconProductInfoRecord);
      v195 = sub_100603CFC();
      objc_msgSend(v39, "setAccessoryProductInfo:", v195);

      sub_1000126B0(v194, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_100030784((uint64_t)v352, (uint64_t)&v342);
  v196 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v197 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v198 = (uint64_t)v301;
  v199 = swift_dynamicCast(v301, &v342, v196, v197, 6);
  v200 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v197 - 8) + 56);
  v340 = v196;
  if (v199)
  {
    v200(v198, 0, 1, v197);
    sub_100004048(v198, (uint64_t *)&unk_1010EDC50);
    v201 = objc_msgSend(v39, "identifier");
    v202 = (uint64_t)v328;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v201);

    v203 = v286;
    sub_10081BB64(v202, v286);
    ((void (*)(uint64_t, uint64_t))v331)(v202, v130);
    v204 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v314 + 48))(v203, 1, v168);
    v205 = v315;
    if (v204 == 1)
    {
      sub_100004048(v203, &qword_10110EEB0);
    }
    else
    {
      v212 = v203;
      v213 = v280;
      sub_1000126EC(v212, v280, type metadata accessor for BeaconProductInfoRecord);
      v214 = sub_100603CFC();
      objc_msgSend(v39, "setAccessoryProductInfo:", v214);

      v188 = v329;
      sub_1000126B0(v213, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v200(v198, 1, 1, v197);
    sub_100004048(v198, (uint64_t *)&unk_1010EDC50);
    v205 = v315;
  }
  v215 = v324;
  v216 = v328;
  v217 = ((uint64_t (*)(char *, uint64_t, uint64_t))v327)(v328, v330, v130);
  __chkstk_darwin(v217);
  v218 = (uint64_t)v304;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  ((void (*)(char *, uint64_t))v331)(v216, v130);
  v219 = (int *)v305;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v218, 1, v305) == 1)
  {
    sub_100004048(v218, (uint64_t *)&unk_101105880);
    sub_100030784((uint64_t)v352, (uint64_t)&v350);
    v220 = swift_allocObject(&unk_1010644B0, 64, 7);
    *(_QWORD *)(v220 + 16) = v188;
    sub_10000F9FC(&v350, v220 + 24);
    swift_retain();
    v221 = sub_10001A9A8((uint64_t *)&unk_1010F4830);
    unsafeFromAsyncTask<A>(_:)(&v342, &unk_1010F4A78, v220, v221);
    swift_release();
    v222 = *((_QWORD *)&v342 + 1);
    v223 = v340;
    if (*((_QWORD *)&v342 + 1))
    {
      v224 = v39;
      v225 = v343;
      v339 = v344;
      v226 = v345;
      v334 = v346;
      v227 = v348;
      v336 = v347;
      v228 = v349;
      v333 = v342;
      v229 = String._bridgeToObjectiveC()();
      objc_msgSend(v224, "setName:", v229);

      v230 = (void *)sub_100DC5700(v225);
      v231 = v230;
      v122 = v205;
      if (v225 == SPBeaconRoleIdOther && v226 && v230)
      {
        v232 = objc_msgSend(v230, "role", swift_bridgeObjectRetain(v226).n128_f64[0]);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v232);

        v233 = objc_allocWithZone((Class)SPBeaconRole);
        v234 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v235 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v236 = objc_msgSend(v233, "initWithRoleId:role:roleEmoji:", v225, v234, v235);

        v122 = v315;
        v137 = v335;
        objc_msgSend(v332, "setRole:", v236);

        if (v228)
          goto LABEL_62;
LABEL_71:
        sub_10007CB98(v333, v222, v225, v339, v226, v334, v336, v227, 0);
        v237 = 0;
      }
      else
      {
        objc_msgSend(v332, "setRole:", v230);
        v137 = v335;
        if (!v228)
          goto LABEL_71;
LABEL_62:
        swift_bridgeObjectRetain(v228);
        v237 = String._bridgeToObjectiveC()();
        sub_10007CB98(v333, v222, v225, v339, v226, v334, v336, v227, v228);
        swift_bridgeObjectRelease();
      }
      v130 = v322;
      v39 = v332;
      objc_msgSend(v332, "setSerialNumber:", v237);

      v250 = (uint64_t)v309;
      v215 = v324;
      v251 = (int *)v308;
    }
    else
    {
      v250 = (uint64_t)v309;
      v251 = (int *)v308;
      v122 = v205;
      v137 = v335;
    }
  }
  else
  {
    v238 = v287;
    sub_1000126EC(v218, v287, type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain(*(_QWORD *)(v238 + v219[8] + 8));
    v239 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v39, "setName:", v239);

    v240 = *(_QWORD *)(v238 + v219[7]);
    v241 = (void *)sub_100DC5700(v240);
    v242 = v241;
    if (v240 == SPBeaconRoleIdOther && (v243 = v238 + v219[9], *(_QWORD *)(v243 + 8)) && v241)
    {
      v244 = objc_msgSend(v241, "role", swift_bridgeObjectRetain(*(_QWORD *)(v243 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v244);

      v245 = objc_allocWithZone((Class)SPBeaconRole);
      v246 = String._bridgeToObjectiveC()();
      v39 = v332;
      swift_bridgeObjectRelease();
      v247 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v248 = v245;
      v122 = v315;
      v249 = objc_msgSend(v248, "initWithRoleId:role:roleEmoji:", v240, v246, v247);

      v137 = v335;
      v215 = v324;
      objc_msgSend(v39, "setRole:", v249);

      v242 = v249;
      v250 = (uint64_t)v309;
      v251 = (int *)v308;
    }
    else
    {
      objc_msgSend(v39, "setRole:", v241);
      v250 = (uint64_t)v309;
      v251 = (int *)v308;
      v122 = v205;
      v137 = v335;
    }
    v223 = v340;

    sub_1000126B0(v238, type metadata accessor for BeaconNamingRecord);
  }
  sub_100030784((uint64_t)v352, (uint64_t)&v342);
  v252 = (uint64_t)v307;
  v253 = swift_dynamicCast(v307, &v342, v223, v251, 6);
  v254 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v306 + 56);
  if (!v253)
  {
    v254(v252, 1, 1, v251);
    sub_100004048(v252, (uint64_t *)&unk_1010F47C0);
    sub_100030784((uint64_t)v352, (uint64_t)&v342);
    v258 = (uint64_t)v290;
    v259 = swift_dynamicCast(v290, &v342, v223, v215, 6);
    v260 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v288 + 56);
    if ((v259 & 1) == 0)
    {
      v260(v258, 1, 1, v215);
      swift_bridgeObjectRelease();
      v272 = (void (*)(char *, uint64_t))v323;
      v323((uint64_t)v337, v137);
      v272(v319, v137);
      sub_100004048((uint64_t)v320, (uint64_t *)&unk_1011002E0);
      ((void (*)(int *, uint64_t))v331)(v122, v130);
      sub_100004048(v258, (uint64_t *)&unk_1010EE180);
      goto LABEL_93;
    }
    v260(v258, 0, 1, v215);
    v261 = v291;
    sub_1000126EC(v258, v291, type metadata accessor for SharedBeaconRecord);
    v262 = String._bridgeToObjectiveC()();
    objc_msgSend(v39, "setStableIdentifier:", v262);

    v263 = v261 + v215[7];
    v264 = *(_QWORD *)(v263 + 8);
    v265 = *(void **)(v263 + 16);
    v266 = *(_BYTE *)v263;
    swift_bridgeObjectRetain(v265);
    v267 = (void *)sub_100ACD7B4(v266, v264, v265);
    swift_bridgeObjectRelease();
    objc_msgSend(v39, "setOwner:", v267);

    objc_msgSend(v39, "setAccepted:", *(unsigned __int8 *)(v261 + v215[13]));
    swift_bridgeObjectRetain(*(_QWORD *)(v261 + v215[8] + 8));
    v268 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v39, "setCorrelationIdentifier:", v268);

    objc_msgSend(v39, "setInternalShareType:", *(unsigned __int8 *)(v261 + v215[16]));
    v144 = v281;
    sub_10000F9B8(v261 + v215[20], v281, (uint64_t *)&unk_1010F47B0);
    v140 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)(v140 - 8) + 48))(v144, 1, v140) == 1)
    {
      sub_100004048(v144, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v325 + 56))(v282, 1, 1, v130);
      v269 = 0;
LABEL_91:
      objc_msgSend(v39, "setOwnerBeaconIdentifier:", v269);
      swift_bridgeObjectRelease();

      v274 = (void (*)(char *, uint64_t))v323;
      v323((uint64_t)v337, v137);
      v275 = type metadata accessor for SharedBeaconRecord;
      v276 = v291;
      goto LABEL_92;
    }
LABEL_88:
    v277 = (uint64_t)v282;
    sub_10000F9B8(v144 + *(int *)(v140 + 20), (uint64_t)v282, &qword_1010ED860);
    sub_1000126B0(v144, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v277, 1, v130) == 1)
    {
      v269 = 0;
    }
    else
    {
      v269 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v331)(v277, v130);
    }
    goto LABEL_91;
  }
  v254(v252, 0, 1, v251);
  sub_1000126EC(v252, v250, type metadata accessor for OwnedBeaconRecord);
  sub_100C6ED38();
  v255 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v39, "setStableIdentifier:", v255);

  v256 = v289;
  sub_10000F9B8(v250 + v251[7], v289, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v256, 1, v130) == 1)
  {
    v257 = 0;
  }
  else
  {
    v257 = UUID._bridgeToObjectiveC()().super.isa;
    ((void (*)(uint64_t, uint64_t))v331)(v256, v130);
  }
  objc_msgSend(v39, "setGroupIdentifier:", v257);

  sub_10085DA88(v250);
  if (v270)
  {
    v271 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v271 = 0;
  }
  objc_msgSend(v39, "setSerialNumber:", v271);

  objc_msgSend(v39, "setPartIdentifier:", sub_10085DD20(v250));
  objc_msgSend(v39, "setBatteryLevel:", *(unsigned __int8 *)(v250 + v251[19]));
  objc_msgSend(v39, "setIsZeus:", *(unsigned __int8 *)(v250 + v251[20]));
  if (qword_1010EA0E0 != -1)
    swift_once(&qword_1010EA0E0, sub_1009A316C);
  objc_msgSend(v39, "setOwner:", qword_1011B7AC0);
  objc_msgSend(v39, "setAccepted:", 1);
  v273 = String._bridgeToObjectiveC()();
  objc_msgSend(v39, "setCorrelationIdentifier:", v273);

  objc_msgSend(v39, "setInternalShareType:", -1);
  objc_msgSend(v39, "setOwnerBeaconIdentifier:", 0);
  swift_bridgeObjectRelease();
  v274 = (void (*)(char *, uint64_t))v323;
  v323((uint64_t)v337, v137);
  v275 = type metadata accessor for OwnedBeaconRecord;
  v276 = v250;
LABEL_92:
  sub_1000126B0(v276, v275);
  v274(v319, v137);
  sub_100004048((uint64_t)v320, (uint64_t *)&unk_1011002E0);
  ((void (*)(int *, uint64_t))v331)(v122, v130);
LABEL_93:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v352);
  return v39;
}

id sub_100288384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  Class isa;
  id v84;
  NSString v85;
  Class v86;
  NSString v87;
  Class v88;
  char *v89;
  Class v90;
  uint64_t v91;
  void (**v92)(_QWORD, _QWORD, _QWORD);
  _QWORD *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void *v108;
  id v109;
  _BYTE *v110;
  uint64_t v111;
  void (**v112)(_QWORD, _QWORD, _QWORD);
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  _BYTE *v119;
  char *v120;
  void (**v121)(_QWORD, _QWORD, _QWORD);
  uint64_t v122;
  Class v123;
  uint64_t v124;
  id v125;
  double v126;
  double v127;
  uint64_t v128;
  char *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  void (**v136)(_QWORD, _QWORD, _QWORD);
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  void *v150;
  id v151;
  Class v152;
  id v153;
  uint64_t v154;
  void *v155;
  Class v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  char *v161;
  Class v162;
  uint64_t v163;
  void (**v164)(_QWORD, _QWORD, _QWORD);
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  Class v171;
  uint64_t v172;
  id v173;
  char *v174;
  Class v175;
  uint64_t v176;
  uint64_t v177;
  Class v178;
  id v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  int *v194;
  int v195;
  void (*v196)(uint64_t, uint64_t, uint64_t, int *);
  id v197;
  uint64_t v198;
  void (**v199)(_QWORD, _QWORD, _QWORD);
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  int *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  NSString v223;
  void *v224;
  void *v225;
  uint64_t v226;
  id v227;
  id v228;
  NSString v229;
  NSString v230;
  id v231;
  NSString v232;
  uint64_t v233;
  NSString v234;
  unint64_t v235;
  void *v236;
  void *v237;
  uint64_t v238;
  id v239;
  id v240;
  NSString v241;
  NSString v242;
  void *v243;
  id v244;
  uint64_t v245;
  int *v246;
  uint64_t v247;
  int v248;
  void (*v249)(uint64_t, uint64_t, uint64_t, int *);
  NSString v250;
  uint64_t v251;
  Class v252;
  uint64_t v253;
  uint64_t v254;
  int *v255;
  char v256;
  void (*v257)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v258;
  void *v259;
  int *v260;
  NSString v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  char v265;
  void *v266;
  NSString v267;
  Class v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  NSString v272;
  uint64_t v273;
  void (*v274)(char *, uint64_t);
  NSString v275;
  uint64_t v276;
  void (*v277)(char *, uint64_t);
  uint64_t v278;
  int v279;
  uint64_t v280;
  void (*v281)(char *, uint64_t);
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  char *v316;
  uint64_t v317;
  char *v318;
  _BYTE *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  char *v324;
  int *v325;
  char *v326;
  _BYTE *v327;
  uint64_t v328;
  uint64_t v329;
  void (*v330)(char *, uint64_t);
  void (*v331)(uint64_t, _QWORD *, _QWORD);
  _QWORD *v332;
  void (**v333)(_QWORD, _QWORD, _QWORD);
  char *v334;
  uint64_t v335;
  id v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  _QWORD *i;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  __int128 v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  _QWORD v356[5];

  v335 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  __chkstk_darwin(v3);
  v285 = (uint64_t)&v283 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v5);
  v294 = (char *)&v283 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v295 = type metadata accessor for SharedBeaconRecord(0);
  v292 = *(_QWORD *)(v295 - 8);
  __chkstk_darwin(v295);
  v296 = (uint64_t)&v283 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v283 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v293 = (uint64_t)&v283 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v314 = (char *)&v283 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for OwnedBeaconRecord(0);
  v313 = *(_QWORD *)(v315 - 8);
  __chkstk_darwin(v315);
  v316 = (char *)&v283 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v310);
  v311 = (char *)&v283 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = type metadata accessor for BeaconNamingRecord(0);
  v309 = *(_QWORD *)(v312 - 8);
  __chkstk_darwin(v312);
  v291 = (uint64_t)&v283 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v18);
  v308 = (char *)&v283 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_10110EEB0);
  v21 = __chkstk_darwin(v20);
  v290 = (uint64_t)&v283 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v299 = (uint64_t)&v283 - v23;
  v302 = type metadata accessor for BeaconProductInfoRecord(0);
  v321 = *(_QWORD *)(v302 - 8);
  v24 = __chkstk_darwin(v302);
  v284 = (uint64_t)&v283 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v287 = (uint64_t)&v283 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v27);
  v307 = (uint64_t)&v283 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = type metadata accessor for KeyAlignmentRecord(0);
  v306 = *(_QWORD *)(v300 - 8);
  __chkstk_darwin(v300);
  v289 = (uint64_t)&v283 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v30);
  v304 = (uint64_t)&v283 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v305 = type metadata accessor for KeySyncRecord(0);
  v303 = *(_QWORD *)(v305 - 8);
  __chkstk_darwin(v305);
  v288 = (uint64_t)&v283 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v344 = type metadata accessor for LocationProvider(0);
  v343 = *(_QWORD *)(v344 - 8);
  v33 = __chkstk_darwin(v344);
  v337 = (uint64_t)&v283 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v36 = (char *)&v283 - v35;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F47E0);
  v38 = __chkstk_darwin(v37);
  v338 = (uint64_t)&v283 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v340 = (uint64_t)&v283 - v40;
  v320 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v41 = __chkstk_darwin(v320);
  v319 = (char *)&v283 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v327 = (char *)&v283 - v43;
  v44 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v44);
  v297 = (char *)&v283 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v46);
  v48 = (char *)&v283 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v339 = type metadata accessor for Date(0);
  i = *(_QWORD **)(v339 - 8);
  v49 = __chkstk_darwin(v339);
  v341 = (char *)&v283 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v49);
  v326 = (char *)&v283 - v52;
  __chkstk_darwin(v51);
  v324 = (char *)&v283 - v53;
  v54 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = __chkstk_darwin(v54);
  v301 = (char *)&v283 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __chkstk_darwin(v56);
  v318 = (char *)&v283 - v59;
  v60 = __chkstk_darwin(v58);
  v317 = (uint64_t)&v283 - v61;
  __chkstk_darwin(v60);
  v63 = (uint64_t *)((char *)&v283 - v62);
  v64 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v356[3] = v64;
  v356[4] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v65 = sub_100018F08(v356);
  sub_10005972C(a1, (uint64_t)v65, type metadata accessor for LocalFindableAccessoryRecord);
  v336 = objc_msgSend(objc_allocWithZone((Class)SPBeacon), "init");
  v66 = v64[11];
  v329 = v64[10];
  v67 = *(_QWORD *)((char *)v65 + v329);
  v328 = v66;
  v68 = sub_1001EE37C(v67, *(_QWORD *)((char *)v65 + v66));
  v333 = (void (**)(_QWORD, _QWORD, _QWORD))v54;
  v322 = v63;
  v325 = v64;
  v286 = v11;
  if (v69 >> 60 == 15)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v70 = type metadata accessor for Logger(0);
    sub_10001A9E8(v70, (uint64_t)qword_1011B77E8);
    sub_100030784((uint64_t)v356, (uint64_t)&v346);
    v71 = sub_100030784((uint64_t)v356, (uint64_t)&v354);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = swift_slowAlloc(22, -1);
      *(_DWORD *)v74 = 134218240;
      v75 = *(_QWORD *)((char *)sub_10001AA44(&v346, v348) + v64[10]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v346);
      v345 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v345, &v346, v74 + 4, v74 + 12);
      *(_WORD *)(v74 + 12) = 2048;
      v76 = sub_10001AA44(&v354, v355);
      v77 = *(_QWORD *)((char *)v76 + v325[11]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v354);
      *(_QWORD *)&v346 = v77;
      v64 = v325;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v346, (char *)&v346 + 8, v74 + 14, v74 + 22);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v74, 0x16u);
      swift_slowDealloc(v74, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v354);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v346);
    }

    UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    v78 = v68;
    v79 = v69;
    v334 = v48;
    if (qword_1010E9A18 != -1)
      swift_once(&qword_1010E9A18, sub_1001EE150);
    v346 = xmmword_1010F2B08;
    sub_10001BBBC(xmmword_1010F2B08, *((unint64_t *)&xmmword_1010F2B08 + 1));
    Data.append(_:)(v78, v79);
    v80 = *((_QWORD *)&v346 + 1);
    v81 = v346;
    v354 = v346;
    v82 = sub_100035530();
    DataProtocol.stableUUID.getter(&type metadata for Data, v82);
    sub_10001BC14(v81, v80);
    sub_10001EF3C(v78, v79);
    v64 = v325;
    v48 = v334;
  }
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v84 = v336;
  objc_msgSend(v336, "setIdentifier:", isa);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v65 + v64[5] + 8));
  v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v84, "setModel:", v85);

  sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  v86 = Set._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v84, "setShares:", v86);

  swift_bridgeObjectRetain(*(_QWORD *)((char *)v65 + v64[6] + 8));
  v87 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v84, "setSystemVersion:", v87);

  v88 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v84, "setProductUUID:", v88);

  objc_msgSend(v84, "setVendorId:", *(_QWORD *)((char *)v65 + v329));
  objc_msgSend(v84, "setProductId:", *(_QWORD *)((char *)v65 + v328));
  v89 = v324;
  Date.init(timeIntervalSince1970:)((double)*(uint64_t *)((char *)v65 + v64[12]) / 1000.0);
  v90 = Date._bridgeToObjectiveC()().super.isa;
  v330 = (void (*)(char *, uint64_t))i[1];
  v330(v89, v339);
  objc_msgSend(v84, "setPairingDate:", v90);

  objc_msgSend(v84, "setType:", SPBeaconTypeLocalFindable);
  v91 = v317;
  v92 = v333;
  v331 = *(void (**)(uint64_t, _QWORD *, _QWORD))(v55 + 16);
  v331(v317, v65, v333);
  v323 = *(_QWORD *)(v335 + 160);
  v93 = sub_100889F60(v91);
  v94 = v93[2];
  v95 = (int *)type metadata accessor for LostModeRecord(0);
  v96 = *((_QWORD *)v95 - 1);
  if (v94)
  {
    sub_10005972C((uint64_t)v93 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80)), (uint64_t)v48, type metadata accessor for LostModeRecord);
    v97 = 0;
  }
  else
  {
    v97 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v96 + 56))(v48, v97, 1, v95);
  swift_bridgeObjectRelease();
  v298 = v55;
  v334 = *(char **)(v55 + 8);
  ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v334)(v91, v92);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v96 + 48))(v48, 1, v95) == 1)
  {
    sub_100004048((uint64_t)v48, (uint64_t *)&unk_1010F47F0);
    v98 = 0;
  }
  else
  {
    v99 = (uint64_t *)&v48[v95[9]];
    v100 = v99[1];
    v317 = *v99;
    v101 = v95[8];
    v102 = (uint64_t *)&v48[v95[7]];
    v103 = v102[1];
    v283 = *v102;
    v104 = *(_QWORD *)&v48[v101];
    v105 = *(_QWORD *)&v48[v101 + 8];
    swift_bridgeObjectRetain(v105);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v103);
    v106 = objc_autoreleasePoolPush();
    v107 = (uint64_t)v297;
    sub_10084EE10((uint64_t)v48);
    v108 = v106;
    v92 = v333;
    objc_autoreleasePoolPop(v108);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))i[7])(v107, 0, 1, v339);
    v109 = objc_allocWithZone((Class)SPLostModeInfo);
    v98 = sub_10084F34C(v317, v100, v283, v103, v104, v105, v107);
    sub_1000126B0((uint64_t)v48, type metadata accessor for LostModeRecord);
  }
  v110 = v327;
  v111 = (uint64_t)v318;
  objc_msgSend(v336, "setLostModeInfo:", v98);

  v332 = v65;
  v331(v111, v65, v92);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v112 = v92;
  v113 = qword_1011B7160;
  v114 = objc_autoreleasePoolPush();
  sub_10058DC14(v113, v111, 0, 0, &v346);
  v115 = v320;
  v116 = (uint64_t)&v110[*(int *)(v320 + 48)];
  objc_autoreleasePoolPop(v114);
  v117 = sub_10082B1AC(v116, v111, v346, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v334)(v111, v112);
  LOBYTE(v114) = v117 & 1;
  *v110 = v117 & 1;
  objc_msgSend(v336, "setConnected:", v117 & 1);
  v118 = *(int *)(v115 + 48);
  v119 = v319;
  v120 = &v319[v118];
  *v319 = (_BYTE)v114;
  sub_10000F9B8(v116, (uint64_t)&v119[v118], (uint64_t *)&unk_1010EA690);
  v121 = (void (**)(_QWORD, _QWORD, _QWORD))i;
  v122 = v339;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))i[6])(v120, 1, v339) == 1)
  {
    v123 = 0;
  }
  else
  {
    v123 = Date._bridgeToObjectiveC()().super.isa;
    v330(v120, v122);
  }
  v124 = (uint64_t)v332;
  v125 = v336;
  objc_msgSend(v336, "setConnectedStateExpiryDate:", v123);

  objc_msgSend(v125, "setIsAppleAudioAccessory:", sub_100A2D38C(*(_QWORD *)(v124 + v329), *(_QWORD *)(v124 + v328)));
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v329 = 0;
  sub_100C1B7A4(v346);
  v127 = v126;
  v128 = swift_bridgeObjectRelease();
  v129 = v326;
  Date.init(timeIntervalSinceNow:)(v128, -v127);
  v130 = sub_10088B3D0(v124);
  v131 = v339;
  ((void (**)(char *, char *, uint64_t))v121)[2](v341, v129, v339);
  v132 = sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
  v133 = sub_1000170AC(&qword_1010F4818, &qword_1010F4810, SPLocationProvider_ptr);
  swift_bridgeObjectRetain(v130);
  v328 = v132;
  v320 = v133;
  v134 = 0;
  *(_QWORD *)&v346 = Set.init(minimumCapacity:)(0);
  v135 = v130;
  v136 = (void (**)(_QWORD, _QWORD, _QWORD))v130[2];
  v137 = &qword_1010F4820;
  for (i = v130; ; v135 = i)
  {
    v138 = v344;
    v139 = v338;
    if ((void (**)(_QWORD, _QWORD, _QWORD))v134 != v136)
    {
      while (v134 < v135[2])
      {
        v121 = (void (**)(_QWORD, _QWORD, _QWORD))(v134 + 1);
        sub_10005972C((uint64_t)v135+ ((*(unsigned __int8 *)(v343 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v343 + 80))+ *(_QWORD *)(v343 + 72) * v134, (uint64_t)v36, type metadata accessor for LocationProvider);
        v140 = &v36[*(int *)(v138 + 28)];
        v141 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v140, v341, v131, v141) & 1) == 0)
        {
          sub_1000126EC((uint64_t)v36, v340, type metadata accessor for LocationProvider);
          v142 = 0;
          ++v134;
          v138 = v344;
          goto LABEL_31;
        }
        sub_1000126B0((uint64_t)v36, type metadata accessor for LocationProvider);
        ++v134;
        v135 = i;
        v138 = v344;
        if (v136 == v121)
          goto LABEL_29;
      }
      __break(1u);
      goto LABEL_87;
    }
LABEL_29:
    v142 = 1;
    v134 = (unint64_t)v136;
LABEL_31:
    v143 = v343;
    v144 = v340;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v343 + 56))(v340, v142, 1, v138);
    sub_100005CF0(v144, v139, (uint64_t *)&unk_1010F47E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v139, 1, v138) == 1)
      break;
    v145 = v139;
    v146 = v36;
    v147 = v337;
    sub_1000126EC(v145, v337, type metadata accessor for LocationProvider);
    v148 = sub_1008A4DC4(*(unsigned __int8 *)(v147 + *(int *)(v138 + 24)), *(_QWORD *)(v147 + *(int *)(v138 + 24) + 8), *(void **)(v147 + *(int *)(v138 + 24) + 16));
    v121 = (void (**)(_QWORD, _QWORD, _QWORD))sub_100ACD7B4(v148, v149, v150);
    swift_bridgeObjectRelease();
    v151 = objc_allocWithZone((Class)SPLocationProvider);
    v152 = Date._bridgeToObjectiveC()().super.isa;
    v153 = objc_msgSend(v151, "initWithTimestamp:provider:", v152, v121);

    v154 = v147;
    v36 = v146;
    sub_1000126B0(v154, type metadata accessor for LocationProvider);
    v155 = v153;
    v131 = v339;
    sub_100A0C424((Swift::Int *)&v354, v155);

  }
  swift_bridgeObjectRelease();
  v156 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v157 = v336;
  objc_msgSend(v336, "setLocationProviders:", v156);

  v158 = v304;
  sub_10081AECC((uint64_t)v332, v304);
  v159 = v305;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v303 + 48))(v158, 1, v305) == 1)
  {
    sub_100004048(v158, &qword_1010F7AE0);
    v160 = objc_msgSend(v157, "setKeySyncLastObservedIndex:", 0);
    v161 = v324;
    static Date.distantPast.getter(v160);
    v162 = Date._bridgeToObjectiveC()().super.isa;
    v163 = v339;
    v330(v161, v339);
    objc_msgSend(v157, "setKeySyncLastIndexObservationDate:", v162);

    objc_msgSend(v157, "setKeySyncWildIndexFallback:", 0);
    v164 = v333;
    v165 = v334;
    v166 = v302;
    v167 = (uint64_t)v301;
    v168 = v300;
  }
  else
  {
    v169 = v158;
    v170 = v288;
    sub_1000126EC(v169, v288, type metadata accessor for KeySyncRecord);
    objc_msgSend(v157, "setKeySyncLastObservedIndex:", *(_QWORD *)(v170 + *(int *)(v159 + 20)));
    v171 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v157, "setKeySyncLastIndexObservationDate:", v171);

    objc_msgSend(v157, "setKeySyncWildIndexFallback:", *(_QWORD *)(v170 + *(int *)(v159 + 40)));
    sub_1000126B0(v170, type metadata accessor for KeySyncRecord);
    v164 = v333;
    v165 = v334;
    v166 = v302;
    v167 = (uint64_t)v301;
    v168 = v300;
    v163 = v339;
  }
  v331(v167, v332, v164);
  v172 = v307;
  sub_1008892B4(v307);
  ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v165)(v167, v164);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v306 + 48))(v172, 1, v168) == 1)
  {
    sub_100004048(v172, (uint64_t *)&unk_1010F47D0);
    v173 = objc_msgSend(v157, "setKeyAlignmentLastObservedIndex:", 0);
    v174 = v324;
    static Date.distantPast.getter(v173);
    v175 = Date._bridgeToObjectiveC()().super.isa;
    v330(v174, v163);
    objc_msgSend(v157, "setKeyAlignmentLastIndexObservationDate:", v175);

  }
  else
  {
    v176 = v172;
    v177 = v289;
    sub_1000126EC(v176, v289, type metadata accessor for KeyAlignmentRecord);
    objc_msgSend(v157, "setKeyAlignmentLastObservedIndex:", *(_QWORD *)(v177 + *(int *)(v168 + 28)));
    v178 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v157, "setKeyAlignmentLastIndexObservationDate:", v178);

    sub_1000126B0(v177, type metadata accessor for KeyAlignmentRecord);
  }
  v179 = objc_msgSend(v157, "type");
  v180 = SPBeaconTypeAccessory;
  v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
  v183 = v182;
  v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
  if (v181 == v185 && v183 == v184)
  {
LABEL_41:

    swift_bridgeObjectRelease_n(v183, 2);
    goto LABEL_43;
  }
  v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v181, v183, v185, v184, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v186 & 1) != 0)
    goto LABEL_43;
  v179 = objc_msgSend(v157, "type");
  v200 = SPBeaconTypeHele;
  v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v179);
  v183 = v202;
  v204 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
  if (v201 == v204 && v183 == v203)
    goto LABEL_41;
  v205 = _stringCompareWithSmolCheck(_:_:expecting:)(v201, v183, v204, v203, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v205 & 1) != 0)
  {
LABEL_43:
    v187 = objc_msgSend(v157, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v187);

    v188 = v299;
    sub_10081BB64(v167, v299);
    ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v334)(v167, v333);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v321 + 48))(v188, 1, v166) == 1)
    {
      sub_100004048(v188, &qword_10110EEB0);
    }
    else
    {
      v189 = v188;
      v190 = v287;
      sub_1000126EC(v189, v287, type metadata accessor for BeaconProductInfoRecord);
      v191 = sub_100603CFC();
      objc_msgSend(v157, "setAccessoryProductInfo:", v191);

      sub_1000126B0(v190, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_100030784((uint64_t)v356, (uint64_t)&v346);
  v192 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v193 = (uint64_t)v308;
  v344 = v192;
  v194 = v325;
  v195 = swift_dynamicCast(v308, &v346, v192, v325, 6);
  v196 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v194 - 1) + 56);
  if (v195)
  {
    v196(v193, 0, 1, v194);
    sub_100004048(v193, (uint64_t *)&unk_1010EDC50);
    v197 = objc_msgSend(v157, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v197);

    v198 = v290;
    sub_10081BB64(v167, v290);
    v199 = v333;
    ((void (*)(uint64_t))v334)(v167);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v321 + 48))(v198, 1, v166) == 1)
    {
      sub_100004048(v198, &qword_10110EEB0);
    }
    else
    {
      v206 = v198;
      v207 = v284;
      sub_1000126EC(v206, v284, type metadata accessor for BeaconProductInfoRecord);
      v208 = sub_100603CFC();
      objc_msgSend(v157, "setAccessoryProductInfo:", v208);

      sub_1000126B0(v207, type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v196(v193, 1, 1, v194);
    sub_100004048(v193, (uint64_t *)&unk_1010EDC50);
    v199 = v333;
  }
  v209 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD))v331)(v167, v332, v199);
  v210 = v335;
  __chkstk_darwin(v209);
  v211 = (uint64_t)v311;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v212 = v167;
  v121 = v199;
  v213 = v334;
  ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v334)(v212, v199);
  v214 = (int *)v312;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v309 + 48))(v211, 1, v312) == 1)
  {
    sub_100004048(v211, (uint64_t *)&unk_101105880);
    sub_100030784((uint64_t)v356, (uint64_t)&v354);
    v215 = swift_allocObject(&unk_1010644D8, 64, 7);
    *(_QWORD *)(v215 + 16) = v210;
    sub_10000F9FC(&v354, v215 + 24);
    swift_retain();
    v216 = sub_10001A9A8((uint64_t *)&unk_1010F4830);
    unsafeFromAsyncTask<A>(_:)(&v346, &unk_1010F4A88, v215, v216);
    swift_release();
    v217 = *((_QWORD *)&v346 + 1);
    if (*((_QWORD *)&v346 + 1))
    {
      v218 = v347;
      v343 = v348;
      v219 = v349;
      v338 = v350;
      v220 = v351;
      v221 = v352;
      v222 = v353;
      v337 = v346;
      v223 = String._bridgeToObjectiveC()();
      objc_msgSend(v157, "setName:", v223);

      v224 = (void *)sub_100DC5700(v218);
      v225 = v224;
      v226 = v344;
      v340 = v220;
      if (v218 == SPBeaconRoleIdOther && v219 && v224)
      {
        v227 = objc_msgSend(v224, "role", swift_bridgeObjectRetain(v219).n128_f64[0]);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v227);

        v228 = objc_allocWithZone((Class)SPBeaconRole);
        v229 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v230 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v231 = objc_msgSend(v228, "initWithRoleId:role:roleEmoji:", v218, v229, v230);

        v121 = v333;
        v157 = v336;
        objc_msgSend(v336, "setRole:", v231);

        if (v222)
          goto LABEL_61;
LABEL_70:
        sub_10007CB98(v337, v217, v218, v343, v219, v338, v340, v221, 0);
        v232 = 0;
      }
      else
      {
        objc_msgSend(v157, "setRole:", v224);
        if (!v222)
          goto LABEL_70;
LABEL_61:
        swift_bridgeObjectRetain(v222);
        v232 = String._bridgeToObjectiveC()();
        sub_10007CB98(v337, v217, v218, v343, v219, v338, v340, v221, v222);
        swift_bridgeObjectRelease();
      }
      v213 = v334;
      objc_msgSend(v157, "setSerialNumber:", v232);

      v245 = (uint64_t)v316;
      v137 = v322;
      v246 = (int *)v315;
    }
    else
    {
      v245 = (uint64_t)v316;
      v246 = (int *)v315;
      v137 = v322;
      v226 = v344;
    }
  }
  else
  {
    v233 = v291;
    sub_1000126EC(v211, v291, type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain(*(_QWORD *)(v233 + v214[8] + 8));
    v234 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v157, "setName:", v234);

    v235 = *(_QWORD *)(v233 + v214[7]);
    v236 = (void *)sub_100DC5700(v235);
    v237 = v236;
    if (v235 == SPBeaconRoleIdOther && (v238 = v233 + v214[9], *(_QWORD *)(v238 + 8)) && v236)
    {
      v239 = objc_msgSend(v236, "role", swift_bridgeObjectRetain(*(_QWORD *)(v238 + 8)).n128_f64[0]);
      static String._unconditionallyBridgeFromObjectiveC(_:)(v239);

      v240 = objc_allocWithZone((Class)SPBeaconRole);
      v241 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v242 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v243 = v240;
      v121 = v333;
      v244 = objc_msgSend(v243, "initWithRoleId:role:roleEmoji:", v235, v241, v242);

      v157 = v336;
      v137 = v322;
      objc_msgSend(v157, "setRole:", v244);

      v237 = v244;
      v245 = (uint64_t)v316;
      v246 = (int *)v315;
    }
    else
    {
      objc_msgSend(v157, "setRole:", v236);
      v245 = (uint64_t)v316;
      v246 = (int *)v315;
      v137 = v322;
    }
    v226 = v344;

    sub_1000126B0(v233, type metadata accessor for BeaconNamingRecord);
  }
  sub_100030784((uint64_t)v356, (uint64_t)&v346);
  v247 = (uint64_t)v314;
  v248 = swift_dynamicCast(v314, &v346, v226, v246, 6);
  v249 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v313 + 56);
  if (!v248)
  {
    v249(v247, 1, 1, v246);
    sub_100004048(v247, (uint64_t *)&unk_1010F47C0);
    sub_100030784((uint64_t)v356, (uint64_t)&v346);
    v253 = (uint64_t)v294;
    v254 = v226;
    v255 = (int *)v295;
    v256 = swift_dynamicCast(v294, &v346, v254, v295, 6);
    v257 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v292 + 56);
    if ((v256 & 1) == 0)
    {
      v257(v253, 1, 1, v255);
      swift_bridgeObjectRelease();
      v273 = v339;
      v274 = v330;
      v330(v341, v339);
      v274(v326, v273);
      sub_100004048((uint64_t)v327, (uint64_t *)&unk_1011002E0);
      ((void (*)(uint64_t *, void (**)(_QWORD, _QWORD, _QWORD)))v213)(v137, v121);
      sub_100004048(v253, (uint64_t *)&unk_1010EE180);
      goto LABEL_92;
    }
    v257(v253, 0, 1, v255);
    v258 = v296;
    sub_1000126EC(v253, v296, type metadata accessor for SharedBeaconRecord);
    v259 = v157;
    v260 = v255;
    v261 = String._bridgeToObjectiveC()();
    objc_msgSend(v259, "setStableIdentifier:", v261);

    v262 = v258 + v260[7];
    v263 = *(_QWORD *)(v262 + 8);
    v264 = *(void **)(v262 + 16);
    v265 = *(_BYTE *)v262;
    swift_bridgeObjectRetain(v264);
    v266 = (void *)sub_100ACD7B4(v265, v263, v264);
    swift_bridgeObjectRelease();
    objc_msgSend(v259, "setOwner:", v266);

    objc_msgSend(v259, "setAccepted:", *(unsigned __int8 *)(v258 + v260[13]));
    swift_bridgeObjectRetain(*(_QWORD *)(v258 + v260[8] + 8));
    v267 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v259, "setCorrelationIdentifier:", v267);

    objc_msgSend(v259, "setInternalShareType:", *(unsigned __int8 *)(v258 + v260[16]));
    v138 = v285;
    sub_10000F9B8(v258 + v260[20], v285, (uint64_t *)&unk_1010F47B0);
    v139 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 48))(v138, 1, v139) == 1)
    {
      sub_100004048(v138, (uint64_t *)&unk_1010F47B0);
      (*(void (**)(char *, uint64_t, uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))(v298 + 56))(v286, 1, 1, v121);
      v268 = 0;
      v157 = v336;
      v269 = v334;
LABEL_91:
      objc_msgSend(v157, "setOwnerBeaconIdentifier:", v268);
      swift_bridgeObjectRelease();

      v280 = v339;
      v281 = v330;
      v330(v341, v339);
      sub_1000126B0(v296, type metadata accessor for SharedBeaconRecord);
      v281(v326, v280);
      sub_100004048((uint64_t)v327, (uint64_t *)&unk_1011002E0);
      ((void (*)(uint64_t *, void (**)(_QWORD, _QWORD, _QWORD)))v269)(v137, v121);
      goto LABEL_92;
    }
LABEL_87:
    v278 = (uint64_t)v286;
    sub_10000F9B8(v138 + *(int *)(v139 + 20), (uint64_t)v286, &qword_1010ED860);
    sub_1000126B0(v138, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    v279 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v298 + 48))(v278, 1, v121);
    v269 = v334;
    if (v279 == 1)
    {
      v268 = 0;
    }
    else
    {
      v268 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v269)(v278, v121);
    }
    v157 = v336;
    goto LABEL_91;
  }
  v249(v247, 0, 1, v246);
  sub_1000126EC(v247, v245, type metadata accessor for OwnedBeaconRecord);
  sub_100C6ED38();
  v250 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v157, "setStableIdentifier:", v250);

  v251 = v293;
  sub_10000F9B8(v245 + v246[7], v293, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v298 + 48))(v251, 1, v121) == 1)
  {
    v252 = 0;
  }
  else
  {
    v270 = v251;
    v252 = UUID._bridgeToObjectiveC()().super.isa;
    ((void (*)(uint64_t, void (**)(_QWORD, _QWORD, _QWORD)))v213)(v270, v121);
  }
  objc_msgSend(v157, "setGroupIdentifier:", v252);

  sub_10085DA88(v245);
  if (v271)
  {
    v272 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v272 = 0;
  }
  objc_msgSend(v157, "setSerialNumber:", v272);

  objc_msgSend(v157, "setPartIdentifier:", sub_10085DD20(v245));
  objc_msgSend(v157, "setBatteryLevel:", *(unsigned __int8 *)(v245 + v246[19]));
  objc_msgSend(v157, "setIsZeus:", *(unsigned __int8 *)(v245 + v246[20]));
  if (qword_1010EA0E0 != -1)
    swift_once(&qword_1010EA0E0, sub_1009A316C);
  objc_msgSend(v157, "setOwner:", qword_1011B7AC0);
  objc_msgSend(v157, "setAccepted:", 1);
  v275 = String._bridgeToObjectiveC()();
  objc_msgSend(v157, "setCorrelationIdentifier:", v275);

  objc_msgSend(v157, "setInternalShareType:", -1);
  objc_msgSend(v157, "setOwnerBeaconIdentifier:", 0);
  swift_bridgeObjectRelease();
  v276 = v339;
  v277 = v330;
  v330(v341, v339);
  sub_1000126B0(v245, type metadata accessor for OwnedBeaconRecord);
  v277(v326, v276);
  sub_100004048((uint64_t)v327, (uint64_t *)&unk_1011002E0);
  ((void (*)(uint64_t *, void (**)(_QWORD, _QWORD, _QWORD)))v213)(v137, v121);
LABEL_92:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v356);
  return v157;
}

void sub_10028AA7C(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  int64_t v47;
  uint64_t i;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;

  v51 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v41 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for OwnedBeaconRecord(0);
  v50 = *(_QWORD *)(v52 - 8);
  v10 = __chkstk_darwin(v52);
  v53 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v49 = (uint64_t)&v41 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v54 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[7];
  v46 = (char *)(a1 + 7);
  v20 = 1 << *((_BYTE *)a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v47 = (unint64_t)(v20 + 63) >> 6;
  v23 = swift_bridgeObjectRetain(a1);
  v24 = 0;
  v42 = a1;
  v43 = v9;
  v44 = a3;
  for (i = v13; ; (*(void (**)(char *, uint64_t))(v14 + 8))(v54, i))
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v24 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v24 >= v47)
      goto LABEL_35;
    v28 = *(_QWORD *)&v46[8 * v24];
    if (!v28)
      break;
LABEL_20:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_21:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))(v18, a1[6] + *(_QWORD *)(v14 + 72) * v26, v13, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v18, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13) == 1)
    {
      swift_release();
      return;
    }
    v30 = (uint64_t)v54;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v54, v18, v13);
    sub_10080B950(v30, (uint64_t)v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v9, 1, v52) == 1)
    {
      sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v31 = (uint64_t)v9;
      v32 = v49;
      sub_1000126EC(v31, v49, type metadata accessor for OwnedBeaconRecord);
      v33 = *a3;
      sub_10005972C(v32, v53, type metadata accessor for OwnedBeaconRecord);
      if ((v33 & 1) != 0)
      {
        v34 = 1;
      }
      else
      {
        v35 = *(int *)(v52 + 20);
        if (qword_1010E9CF0 != -1)
          swift_once(&qword_1010E9CF0, sub_10058CADC);
        v36 = v53 + v35;
        v37 = qword_1011B7160;
        a1 = objc_autoreleasePoolPush();
        v38 = v45;
        sub_10058DC14(v37, v36, 0, 0, &v55);
        if (v38)
          goto LABEL_38;
        objc_autoreleasePoolPop(a1);
        v39 = v41;
        v34 = sub_10082B1AC(v41, v36, v55, 1);
        swift_bridgeObjectRelease();
        sub_100004048(v39, (uint64_t *)&unk_1010EA690);
        a1 = v42;
        v45 = 0;
      }
      sub_1000126B0(v53, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0(v49, type metadata accessor for OwnedBeaconRecord);
      v40 = v34 & 1;
      v9 = v43;
      a3 = v44;
      *v44 = v40;
    }
    v13 = i;
  }
  v29 = v24 + 1;
  if (v24 + 1 >= v47)
    goto LABEL_35;
  v28 = *(_QWORD *)&v46[8 * v29];
  if (v28)
    goto LABEL_19;
  v29 = v24 + 2;
  if (v24 + 2 >= v47)
    goto LABEL_35;
  v28 = *(_QWORD *)&v46[8 * v29];
  if (v28)
    goto LABEL_19;
  v29 = v24 + 3;
  if (v24 + 3 >= v47)
    goto LABEL_35;
  v28 = *(_QWORD *)&v46[8 * v29];
  if (v28)
    goto LABEL_19;
  v29 = v24 + 4;
  if (v24 + 4 >= v47)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v18, 1, 1, v13, v23);
    swift_release();
    return;
  }
  v28 = *(_QWORD *)&v46[8 * v29];
  if (v28)
  {
LABEL_19:
    v24 = v29;
    goto LABEL_20;
  }
  while (1)
  {
    v24 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v24 >= v47)
      goto LABEL_35;
    v28 = *(_QWORD *)&v46[8 * v24];
    ++v29;
    if (v28)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  objc_autoreleasePoolPop(a1);
  __break(1u);
}

void sub_10028AF88(uint64_t a1, uint64_t a2, _QWORD *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  char *v67;

  v55 = a3;
  v64 = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v65 - 8);
  v10 = __chkstk_darwin(v65);
  v56 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v51 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v67 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 56);
  v60 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v61 = (unint64_t)(v21 + 63) >> 6;
  v54 = a4 & 1;
  v24 = swift_bridgeObjectRetain(a1);
  v25 = 0;
  v58 = v8;
  v59 = a1;
  v62 = v19;
  v63 = v14;
  v52 = v13;
  v53 = v15;
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_24;
    }
    v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v28 >= v61)
      goto LABEL_29;
    v29 = *(_QWORD *)(v60 + 8 * v28);
    ++v25;
    if (!v29)
    {
      v25 = v28 + 1;
      if (v28 + 1 >= v61)
        goto LABEL_29;
      v29 = *(_QWORD *)(v60 + 8 * v25);
      if (!v29)
      {
        v25 = v28 + 2;
        if (v28 + 2 >= v61)
          goto LABEL_29;
        v29 = *(_QWORD *)(v60 + 8 * v25);
        if (!v29)
        {
          v25 = v28 + 3;
          if (v28 + 3 >= v61)
            goto LABEL_29;
          v29 = *(_QWORD *)(v60 + 8 * v25);
          if (!v29)
            break;
        }
      }
    }
LABEL_23:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))(v19, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v15 + 72) * v27, v14, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14) == 1)
      goto LABEL_30;
    v66 = v25;
    v31 = a1;
    v32 = v19;
    v33 = (uint64_t)v67;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v67, v32, v14);
    v34 = v9;
    v35 = v64;
    sub_10080B950(v33, (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v65) == 1)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F47C0);
      v19 = v62;
      a1 = v31;
    }
    else
    {
      sub_1000126EC((uint64_t)v8, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      v36 = (uint64_t)v13;
      v37 = v56;
      sub_10005972C(v36, v56, type metadata accessor for OwnedBeaconRecord);
      v38 = *(unsigned __int8 *)(v9 + 80);
      v39 = (v38 + 24) & ~v38;
      v40 = v35;
      v41 = v55;
      v42 = v39 + v57;
      v43 = swift_allocObject(&unk_101063EE8, v39 + v57 + 1, v38 | 7);
      *(_QWORD *)(v43 + 16) = v40;
      sub_1000126EC(v37, v43 + v39, type metadata accessor for OwnedBeaconRecord);
      *(_BYTE *)(v43 + v42) = v54;
      v44 = sub_10001A9A8(&qword_1010F4940);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      swift_retain();
      v46 = Future.init(_:)(sub_100293964, v43, v45);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
      v48 = *(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v47 = *(_QWORD *)((*v41 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v48 >= v47 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
      v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
      specialized Array._endMutation()(v49);
      v50 = (uint64_t)v52;
      sub_1000126B0((uint64_t)v52, type metadata accessor for OwnedBeaconRecord);
      v8 = v58;
      a1 = v59;
      v9 = v34;
      v13 = (char *)v50;
      v19 = v62;
      v15 = v53;
    }
    v14 = v63;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v67, v63);
    v25 = v66;
  }
  v30 = v28 + 4;
  if (v30 >= v61)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v19, 1, 1, v14, v24);
LABEL_30:
    swift_release();
    return;
  }
  v29 = *(_QWORD *)(v60 + 8 * v30);
  if (v29)
  {
    v25 = v30;
    goto LABEL_23;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v61)
      goto LABEL_29;
    v29 = *(_QWORD *)(v60 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

void sub_10028B45C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for OwnedBeaconRecord(0);
  v42 = *(_QWORD *)(v41 - 8);
  v5 = __chkstk_darwin(v41);
  v37 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v36 = (uint64_t)&v33 - v7;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 56);
  v39 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v40 = (unint64_t)(v16 + 63) >> 6;
  v19 = swift_bridgeObjectRetain(a1);
  v20 = 0;
  v38 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_22;
    }
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v23 >= v40)
      goto LABEL_30;
    v24 = *(_QWORD *)(v39 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_30;
      v24 = *(_QWORD *)(v39 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v40)
          goto LABEL_30;
        v24 = *(_QWORD *)(v39 + 8 * v20);
        if (!v24)
        {
          v20 = v23 + 3;
          if (v23 + 3 >= v40)
            goto LABEL_30;
          v24 = *(_QWORD *)(v39 + 8 * v20);
          if (!v24)
            break;
        }
      }
    }
LABEL_21:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v9 + 16))(v14, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v9 + 72) * v22, v8, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
      goto LABEL_31;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_10080B950((uint64_t)v11, (uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v4, 1, v41) == 1)
    {
      sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v35 = a1;
      v26 = v36;
      sub_1000126EC((uint64_t)v4, v36, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v26, v37, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = (_QWORD *)sub_1007C8520(0, v38[2] + 1, 1, (unint64_t)v38);
      v28 = v38[2];
      v27 = v38[3];
      v29 = v28 + 1;
      a1 = v35;
      if (v28 >= v27 >> 1)
      {
        v33 = v38[2];
        v34 = v28 + 1;
        v32 = (_QWORD *)sub_1007C8520(v27 > 1, v28 + 1, 1, (unint64_t)v38);
        v28 = v33;
        v29 = v34;
        v38 = v32;
      }
      v30 = v37;
      v31 = v38;
      v38[2] = v29;
      sub_1000126EC(v30, (uint64_t)v31+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v28, type metadata accessor for OwnedBeaconRecord);
    }
  }
  v25 = v23 + 4;
  if (v25 >= v40)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))(v14, 1, 1, v8, v19);
LABEL_31:
    swift_release(a1);
    return;
  }
  v24 = *(_QWORD *)(v39 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v40)
      goto LABEL_30;
    v24 = *(_QWORD *)(v39 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

_QWORD *sub_10028B8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];

  v23[3] = a2;
  v4 = sub_10001A9A8(&qword_1010F4918);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = __chkstk_darwin(v22);
  v21 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v20[1] = a1;
  v13 = (unint64_t *)(a1 + 40);
  v14 = _swiftEmptyArrayStorage;
  do
  {
    v15 = *(v13 - 1);
    v16 = *v13;
    v23[0] = v15;
    v23[1] = v16;
    sub_10001BBBC(v15, v16);
    sub_100277510(v23, v6);
    if (v2)
    {
      sub_10001BC14(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    }
    sub_10001BC14(v15, v16);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v22) == 1)
    {
      sub_100004048((uint64_t)v6, &qword_1010F4918);
    }
    else
    {
      sub_1000126EC((uint64_t)v6, (uint64_t)v11, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      sub_1000126EC((uint64_t)v11, v21, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = (_QWORD *)sub_1007C8FE8(0, v14[2] + 1, 1, (unint64_t)v14);
      v18 = v14[2];
      v17 = v14[3];
      if (v18 >= v17 >> 1)
        v14 = (_QWORD *)sub_1007C8FE8(v17 > 1, v18 + 1, 1, (unint64_t)v14);
      v14[2] = v18 + 1;
      sub_1000126EC(v21, (uint64_t)v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
    }
    v13 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

_QWORD *sub_10028BB00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  char *v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;

  v47 = a2;
  v4 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v4 - 8);
  v46 = v4;
  v5 = __chkstk_darwin(v4);
  v43 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v42 = (char *)v38 - v8;
  v44 = v9;
  __chkstk_darwin(v7);
  v41 = (char *)v38 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v11)
  {
    v38[1] = v2;
    v51 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    result = (_QWORD *)sub_1003B2D14(a1);
    v14 = (uint64_t)result;
    v16 = v15 & 1;
    v39 = a1;
    v40 = a1 + 56;
    v17 = v45;
    v18 = v46;
    v19 = v42;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(v40 + (((unint64_t)v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        goto LABEL_11;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
        goto LABEL_12;
      v20 = *(_QWORD *)(a1 + 48);
      v21 = *(_QWORD *)(v17 + 72);
      v49 = v13;
      v50 = v11;
      v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
      v23 = v41;
      v48 = v16;
      v22(v41, v20 + v21 * v14, v18);
      v24 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      v24(v19, v23, v18);
      v25 = v43;
      v22(v43, (uint64_t)v19, v18);
      v26 = *(unsigned __int8 *)(v17 + 80);
      v27 = (v26 + 24) & ~v26;
      v28 = swift_allocObject(&unk_101063E20, v27 + v44, v26 | 7);
      *(_QWORD *)(v28 + 16) = v47;
      v29 = v25;
      v30 = v50;
      v24((char *)(v28 + v27), v29, v18);
      v31 = sub_10001A9A8(&qword_1010F4860);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      a1 = v39;
      swift_retain();
      v33 = Future.init(_:)(sub_1002932F8, v28, v32);
      v34 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v18);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v34);
      v35 = v51[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v35);
      v36 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v35, v33);
      specialized ContiguousArray._endMutation()(v36);
      result = (_QWORD *)sub_1003B2DB8(v14, v49, v48 & 1, a1);
      v14 = (uint64_t)result;
      v16 = v37 & 1;
      v11 = v30 - 1;
      if (!v11)
      {
        sub_1000FE2A4((uint64_t)result, v13, v16);
        return v51;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_10028BDA0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  unint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  id v31;
  void *v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE v100[200];

  v12 = objc_msgSend(a1, "ecid");
  if (!v12)
  {
    v45 = static os_log_type_t.error.getter(0);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, qword_1011B7D88, "#Durian: ecid is not available.", 31, 2, _swiftEmptyArrayStorage);
    goto LABEL_25;
  }
  v13 = v12;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v16 = v15;

  v17 = objc_msgSend(a1, "chipId");
  if (!v17)
  {
    v46 = static os_log_type_t.error.getter(0);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7D88, "#Durian: chipId is not available.", 33, 2, _swiftEmptyArrayStorage);
    goto LABEL_23;
  }
  v18 = v17;
  v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v76 = v19;

  v20 = objc_msgSend(a1, "serialNumber");
  if (!v20)
  {
    v47 = static os_log_type_t.error.getter(0);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_1011B7D88, "#Durian: serialNumber is not available.", 39, 2, _swiftEmptyArrayStorage);
    goto LABEL_22;
  }
  v21 = v20;
  v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = objc_msgSend(a1, "systemVersion");
  if (!v24)
  {
    v48 = swift_bridgeObjectRelease();
    v49 = static os_log_type_t.error.getter(v48);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D88, "#Durian: systemVersion is not available.", 40, 2, _swiftEmptyArrayStorage);
    goto LABEL_22;
  }
  v25 = v24;
  v74 = v16;
  v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = objc_msgSend(a1, "payloadSignature");
  if (!v28)
  {
    swift_bridgeObjectRelease();
    v53 = swift_bridgeObjectRelease();
    v54 = static os_log_type_t.error.getter(v53);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D88, "#Durian: signature(S2) is not available.", 40, 2, _swiftEmptyArrayStorage);
    goto LABEL_30;
  }
  v29 = v28;
  v70 = v27;
  v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v72 = v30;

  v31 = objc_msgSend(a1, "attestation");
  if (!v31)
  {
    swift_bridgeObjectRelease();
    v55 = swift_bridgeObjectRelease();
    v56 = static os_log_type_t.error.getter(v55);
    v16 = v74;
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, qword_1011B7D88, "#Durian: attestation(S1) is not available.", 42, 2, _swiftEmptyArrayStorage);
    goto LABEL_37;
  }
  v32 = v31;
  v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v68 = v33;

  v34 = objc_msgSend(a1, "systemPublicKey");
  v16 = v74;
  if (!v34)
  {
    swift_bridgeObjectRelease();
    v57 = swift_bridgeObjectRelease();
    v58 = static os_log_type_t.error.getter(v57);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, qword_1011B7D88, "#Durian: refKeyPublicKey is not available.", 42, 2, _swiftEmptyArrayStorage);
    sub_10001BC14(v67, v68);
LABEL_37:
    sub_10001BC14(v71, v72);
LABEL_22:
    sub_10001BC14(v75, v76);
LABEL_23:
    v50 = v14;
    v51 = v16;
LABEL_24:
    sub_10001BC14(v50, v51);
LABEL_25:
    sub_1002949A8(&v77);
    goto LABEL_26;
  }
  v35 = v34;
  v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v66 = v37;

  v38 = objc_msgSend(a1, "refKeyPublicKey");
  if (!v38)
  {
    swift_bridgeObjectRelease();
    v59 = swift_bridgeObjectRelease();
    v60 = static os_log_type_t.error.getter(v59);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, qword_1011B7D88, "#Durian: refKeyPublicKey is not available.", 42, 2, _swiftEmptyArrayStorage);
    sub_10001BC14(v36, v66);
    sub_10001BC14(v67, v68);
    sub_10001BC14(v71, v72);
LABEL_30:
    sub_10001BC14(v75, v76);
    v50 = v14;
    v51 = v74;
    goto LABEL_24;
  }
  v39 = v38;
  v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v64 = v41;
  v65 = v40;

  v63 = objc_msgSend(a1, "productId");
  v62 = objc_msgSend(a1, "vendorId");
  v42 = objc_msgSend(a1, "nonce");
  v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v61 = v44;

  *(_QWORD *)&v77 = v14;
  *((_QWORD *)&v77 + 1) = v74;
  v78 = v75;
  v79 = v76;
  v80 = v73;
  v81 = v23;
  v82 = v63;
  v83 = v62;
  v84 = v69;
  v85 = v70;
  v86 = v71;
  v87 = v72;
  v88 = v67;
  v89 = v68;
  v90 = v36;
  v91 = v66;
  v92 = v65;
  v93 = v64;
  v94 = v43;
  v95 = v61;
  v96 = a2;
  v97 = a3;
  v98 = a4;
  v99 = a5;
  SharingCircleWildAdvertisementKey.init(key:)(&v77);
  sub_10001BBBC(a2, a3);
  sub_10001BBBC(a4, a5);
LABEL_26:
  sub_100005CF0((uint64_t)&v77, (uint64_t)v100, (uint64_t *)&unk_1010F4A48);
  return sub_100005CF0((uint64_t)v100, a6, (uint64_t *)&unk_1010F4A48);
}

uint64_t sub_10028C440(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t (**v82)(uint64_t);
  uint64_t (*v83)(uint64_t);
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  dispatch_group_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD v104[2];

  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  v7 = __chkstk_darwin(v6);
  v93 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v86 - v9;
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)&v98 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v96 = v12;
  v97 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v86 - v13;
  v101 = swift_allocObject(&unk_1010640F0, 24, 7);
  *(_QWORD *)(v101 + 16) = a3;
  v100 = a3;
  LODWORD(v102) = static os_log_type_t.default.getter(v100);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v15 = qword_1011B7D88;
  v99 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v99, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v104[0] = *a2;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F49F0);
  v18 = String.init<A>(describing:)(v104, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = a2;
  v22 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v22;
  *(_QWORD *)(v16 + 64) = v22;
  *(_QWORD *)(v16 + 72) = 0xD000000000000038;
  *(_QWORD *)(v16 + 80) = 0x8000000100ECDAD0;
  os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v15, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  v102 = v21;
  v23 = sub_1000188D0();
  v24 = *((_QWORD *)v23 + 2);
  if (v24)
  {
    v25 = *(unsigned __int8 *)(v98 + 80);
    v91 = ~v25;
    v26 = (uint64_t)&v23[(v25 + 32) & ~v25];
    v27 = *(_QWORD *)(v98 + 72);
    while (1)
    {
      sub_10005972C(v26, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      sub_100C72B64((uint64_t)&v14[*(int *)(v10 + 24)], a1);
      if ((v28 & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v26 += v27;
      if (!--v24)
        goto LABEL_7;
    }
    v29 = swift_bridgeObjectRelease();
    v30 = static os_log_type_t.default.getter(v29);
    v31 = qword_1011B7D88;
    v32 = swift_allocObject(v99, 72, 7);
    v98 = xmmword_100E22B00;
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    v33 = &v14[*(int *)(v10 + 20)];
    v34 = type metadata accessor for UUID(0);
    v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v22;
    *(_QWORD *)(v32 + 32) = v36;
    *(_QWORD *)(v32 + 40) = v37;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Trying to remove (%@)", 21, 2, v32);
    swift_bridgeObjectRelease();
    v38 = swift_allocObject(&unk_101064118, 32, 7);
    v39 = v101;
    v89 = v38;
    *(_QWORD *)(v38 + 16) = sub_100293D78;
    *(_QWORD *)(v38 + 24) = v39;
    v40 = swift_retain_n(v39, 2);
    v41 = static os_log_type_t.default.getter(v40);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v90 = v25;
    v42 = qword_1011B7D38;
    v43 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v43 + 16) = v98;
    v87 = v34;
    v88 = v33;
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = v22;
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v45;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unpair owned beacon: %@", 23, 2, v43);
    v46 = swift_bridgeObjectRelease();
    v47 = v92;
    static SystemInfo.lockState.getter(v46);
    v49 = v93;
    v48 = v94;
    v50 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v95);
    v51 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(v104, v50, v51);
    dispatch thunk of RawRepresentable.rawValue.getter(&v103, v50, v51);
    v53 = v103;
    v52 = v104[0];
    v54 = *(void (**)(char *, uint64_t))(v48 + 8);
    v54(v49, v50);
    v55 = ((uint64_t (*)(char *, uint64_t))v54)(v47, v50);
    if (v52 == v53)
    {
      v56 = static os_log_type_t.default.getter(v55);
      os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
      v57 = sub_10008806C();
      v58 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v57, 0, 0);
      *v59 = 0;
      v60 = swift_errorRetain(v58);
      v61 = static os_log_type_t.error.getter(v60);
      v62 = qword_1011B7D88;
      v63 = swift_allocObject(v99, 72, 7);
      *(_OWORD *)(v63 + 16) = v98;
      v104[0] = v58;
      swift_errorRetain(v58);
      v64 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v65 = String.init<A>(describing:)(v104, v64);
      *(_QWORD *)(v63 + 56) = &type metadata for String;
      *(_QWORD *)(v63 + 64) = v22;
      *(_QWORD *)(v63 + 32) = v65;
      *(_QWORD *)(v63 + 40) = v66;
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Remove beacon got an error (%@)", 31, 2, v63);
      swift_bridgeObjectRelease();
      swift_errorRelease(v58);
      dispatch_group_leave(v100);
      swift_errorRelease(v58);
    }
    v67 = dispatch_group_create();
    dispatch_group_enter(v67);
    v68 = sub_10001A9A8(&qword_1011003C0);
    v69 = v87;
    v70 = *(_QWORD *)(v87 - 8);
    v71 = *(unsigned __int8 *)(v70 + 80);
    v72 = (v71 + 32) & ~v71;
    v73 = swift_allocObject(v68, v72 + *(_QWORD *)(v70 + 72), v71 | 7);
    *(_OWORD *)(v73 + 16) = v98;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v73 + v72, v88, v69);
    v74 = swift_allocObject(&unk_101064140, 24, 7);
    *(_QWORD *)(v74 + 16) = v67;
    v75 = v67;
    v76 = v102;
    sub_10075B3B4(v73, (uint64_t)sub_1002981A0, v74);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    v77 = v97;
    sub_10005972C((uint64_t)v14, v97, type metadata accessor for OwnedBeaconRecord);
    v78 = (v90 + 16) & v91;
    v79 = (v96 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
    v81 = swift_allocObject(&unk_101064168, v80 + 10, v90 | 7);
    sub_1000126EC(v77, v81 + v78, type metadata accessor for OwnedBeaconRecord);
    v82 = (uint64_t (**)(uint64_t))(v81 + v79);
    v83 = (uint64_t (*)(uint64_t))v89;
    *v82 = sub_100293D80;
    v82[1] = v83;
    v84 = v81 + v80;
    *(_QWORD *)v84 = v76;
    *(_WORD *)(v84 + 8) = 257;
    swift_retain();
    swift_retain();
    sub_1009FB1F0(v14, (void (*)(_QWORD))sub_10028F948, v81);
    swift_release();
    swift_release();
    swift_release();

    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    dispatch_group_leave(v100);
  }
  return swift_release();
}

uint64_t sub_10028CBBC(uint64_t a1, _QWORD *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  dispatch_group_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD v104[2];

  v6 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  v7 = __chkstk_darwin(v6);
  v93 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v86 - v9;
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)&v98 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v96 = v12;
  v97 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v86 - v13;
  v101 = swift_allocObject(&unk_101064640, 24, 7);
  *(_QWORD *)(v101 + 16) = a3;
  v100 = a3;
  LODWORD(v102) = static os_log_type_t.default.getter(v100);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v15 = qword_1011B7D88;
  v99 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v99, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v104[0] = *a2;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F49F0);
  v18 = String.init<A>(describing:)(v104, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = a2;
  v22 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v22;
  *(_QWORD *)(v16 + 64) = v22;
  *(_QWORD *)(v16 + 72) = 0xD000000000000038;
  *(_QWORD *)(v16 + 80) = 0x8000000100ECDAD0;
  os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v15, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  v102 = v21;
  v23 = sub_1000188D0();
  v24 = *((_QWORD *)v23 + 2);
  if (v24)
  {
    v25 = *(unsigned __int8 *)(v98 + 80);
    v91 = ~v25;
    v26 = (uint64_t)&v23[(v25 + 32) & ~v25];
    v27 = *(_QWORD *)(v98 + 72);
    while (1)
    {
      sub_10005972C(v26, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      sub_100C72B64((uint64_t)&v14[*(int *)(v10 + 24)], a1);
      if ((v28 & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v26 += v27;
      if (!--v24)
        goto LABEL_7;
    }
    v29 = swift_bridgeObjectRelease();
    v30 = static os_log_type_t.default.getter(v29);
    v31 = qword_1011B7D88;
    v32 = swift_allocObject(v99, 72, 7);
    v98 = xmmword_100E22B00;
    *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
    v33 = &v14[*(int *)(v10 + 20)];
    v34 = type metadata accessor for UUID(0);
    v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v22;
    *(_QWORD *)(v32 + 32) = v36;
    *(_QWORD *)(v32 + 40) = v37;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Trying to remove (%@)", 21, 2, v32);
    swift_bridgeObjectRelease();
    v38 = swift_allocObject(&unk_101064668, 32, 7);
    v39 = v101;
    v89 = v38;
    *(_QWORD *)(v38 + 16) = sub_1002970E0;
    *(_QWORD *)(v38 + 24) = v39;
    v40 = swift_retain_n(v39, 2);
    v41 = static os_log_type_t.default.getter(v40);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v90 = v25;
    v42 = qword_1011B7D38;
    v43 = swift_allocObject(v99, 72, 7);
    *(_OWORD *)(v43 + 16) = v98;
    v87 = v34;
    v88 = v33;
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    *(_QWORD *)(v43 + 64) = v22;
    *(_QWORD *)(v43 + 32) = v44;
    *(_QWORD *)(v43 + 40) = v45;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unpair owned beacon: %@", 23, 2, v43);
    v46 = swift_bridgeObjectRelease();
    v47 = v92;
    static SystemInfo.lockState.getter(v46);
    v49 = v93;
    v48 = v94;
    v50 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v95);
    v51 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(v104, v50, v51);
    dispatch thunk of RawRepresentable.rawValue.getter(&v103, v50, v51);
    v53 = v103;
    v52 = v104[0];
    v54 = *(void (**)(char *, uint64_t))(v48 + 8);
    v54(v49, v50);
    v55 = ((uint64_t (*)(char *, uint64_t))v54)(v47, v50);
    if (v52 == v53)
    {
      v56 = static os_log_type_t.default.getter(v55);
      os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
      v57 = sub_10008806C();
      v58 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v57, 0, 0);
      *v59 = 0;
      v60 = swift_errorRetain(v58);
      v61 = static os_log_type_t.error.getter(v60);
      v62 = qword_1011B7D88;
      v63 = swift_allocObject(v99, 72, 7);
      *(_OWORD *)(v63 + 16) = v98;
      v104[0] = v58;
      swift_errorRetain(v58);
      v64 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v65 = String.init<A>(describing:)(v104, v64);
      *(_QWORD *)(v63 + 56) = &type metadata for String;
      *(_QWORD *)(v63 + 64) = v22;
      *(_QWORD *)(v63 + 32) = v65;
      *(_QWORD *)(v63 + 40) = v66;
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Remove beacon got an error (%@)", 31, 2, v63);
      swift_bridgeObjectRelease();
      swift_errorRelease(v58);
      dispatch_group_leave(v100);
      swift_errorRelease(v58);
    }
    v67 = dispatch_group_create();
    dispatch_group_enter(v67);
    v68 = sub_10001A9A8(&qword_1011003C0);
    v69 = v87;
    v70 = *(_QWORD *)(v87 - 8);
    v71 = *(unsigned __int8 *)(v70 + 80);
    v72 = (v71 + 32) & ~v71;
    v73 = swift_allocObject(v68, v72 + *(_QWORD *)(v70 + 72), v71 | 7);
    *(_OWORD *)(v73 + 16) = v98;
    (*(void (**)(uint64_t, char *, uint64_t))(v70 + 16))(v73 + v72, v88, v69);
    v74 = swift_allocObject(&unk_101064690, 24, 7);
    *(_QWORD *)(v74 + 16) = v67;
    v75 = v67;
    v76 = v102;
    sub_10075B3B4(v73, (uint64_t)sub_1002981A0, v74);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    v77 = v97;
    sub_10005972C((uint64_t)v14, v97, type metadata accessor for OwnedBeaconRecord);
    v78 = (v90 + 16) & v91;
    v79 = (v96 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
    v81 = swift_allocObject(&unk_1010646B8, v80 + 10, v90 | 7);
    sub_1000126EC(v77, v81 + v78, type metadata accessor for OwnedBeaconRecord);
    v82 = (_QWORD *)(v81 + v79);
    v83 = v89;
    *v82 = sub_100298284;
    v82[1] = v83;
    v84 = v81 + v80;
    *(_QWORD *)v84 = v76;
    *(_WORD *)(v84 + 8) = 257;
    swift_retain();
    swift_retain();
    sub_1009FB1F0(v14, (void (*)(_QWORD))sub_10028F948, v81);
    swift_release();
    swift_release();
    swift_release();

    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    dispatch_group_leave(v100);
  }
  return swift_release();
}

uint64_t sub_10028D338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t aBlock[8];

  v43 = a3;
  v52 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for OwnedBeaconRecord(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (uint64_t)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v47 = (unint64_t)&v42 - v19;
  v45 = *(_QWORD **)(a1 + 280);
  sub_1007FDEC4();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v20 = swift_release();
  if (LOBYTE(aBlock[0]) != 1)
    goto LABEL_9;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v21 = sub_100C1AE20(aBlock[0]);
  v20 = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
    v22 = (_QWORD *)swift_allocObject(&unk_1010648C0, 40, 7);
    v23 = v43;
    v22[2] = v52;
    v22[3] = v23;
    v22[4] = a1;
    swift_retain();
    swift_retain();
    v24 = swift_retain();
    v25 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "Creating record for local device on serial queue.", 49, 2, _swiftEmptyArrayStorage);
    v26 = objc_autoreleasePoolPush();
    v27 = v47;
    v28 = v45;
    sub_100830B5C((uint64_t)v45, (uint64_t)sub_1002971A0, (unint64_t)v22, v47);
    objc_autoreleasePoolPop(v26);
    sub_10000F9B8(v27, (uint64_t)v18, (uint64_t *)&unk_1010F47C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v18, 1, v46) == 1)
    {
      sub_100004048(v27, (uint64_t *)&unk_1010F47C0);
      v29 = (uint64_t)v18;
    }
    else
    {
      v40 = v42;
      sub_1000126EC((uint64_t)v18, v42, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_100864100(v40, 0, v28, (uint64_t)v28, (uint64_t)sub_1002971A0, (uint64_t)v22);
      swift_release();
      swift_release();
      sub_1000126B0(v40, type metadata accessor for OwnedBeaconRecord);
      v29 = v27;
    }
    sub_100004048(v29, (uint64_t *)&unk_1010F47C0);
  }
  else
  {
LABEL_9:
    v30 = static os_log_type_t.default.getter(v20);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D88, "Self beaconing is not supported on this device.", 47, 2, _swiftEmptyArrayStorage);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
    v31 = (void *)static OS_dispatch_queue.global(qos:)(v13);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v32 = swift_allocObject(&unk_101064870, 32, 7);
    v33 = v52;
    *(_QWORD *)(v32 + 16) = a1;
    *(_QWORD *)(v32 + 24) = v33;
    aBlock[4] = (uint64_t)sub_100297160;
    aBlock[5] = v32;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_101064888;
    v34 = _Block_copy(aBlock);
    swift_retain();
    v35 = swift_retain();
    static DispatchQoS.unspecified.getter(v35);
    v53 = _swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v39 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v37, v38, v51, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v34);
    _Block_release(v34);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v39);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
  }
  return swift_release();
}

uint64_t sub_10028D908(char *a1, int a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (**v84)(uint64_t);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t result;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  __int128 v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v108 = a2;
  v9 = type metadata accessor for ShareRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v105 = *(_QWORD *)(v13 - 8);
  v106 = v13;
  v14 = __chkstk_darwin(v13);
  v104 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v103 = (char *)&v90 - v16;
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v109 = (uint64_t)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v115 = (uint64_t)&v90 - v22;
  v113 = v23;
  __chkstk_darwin(v21);
  v25 = (char *)&v90 - v24;
  v26 = swift_allocObject(&unk_101063F38, 32, 7);
  v95 = a4;
  *(_QWORD *)(v26 + 16) = a4;
  *(_QWORD *)(v26 + 24) = a5;
  v114 = v26;
  v112 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  v27 = *(_QWORD *)(a3 + 280);
  v94 = v17;
  v28 = &a1[*(int *)(v17 + 20)];
  v107 = v27;
  v96 = a5;
  swift_retain();
  v111 = v28;
  v29 = sub_10088A6EC();
  v30 = v29[2];
  if (v30)
  {
    v102 = v18;
    *(_QWORD *)&v110 = a1;
    v31 = (uint64_t)v29 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v32 = *(_QWORD *)(v10 + 72);
    while (1)
    {
      sub_10005972C(v31, (uint64_t)v12, type metadata accessor for ShareRecord);
      if (!*(_QWORD *)(a3 + 40))
        break;
      swift_retain();
      sub_10037BF50((uint64_t)v12, (uint64_t)sub_10027D6CC, 0);
      swift_release();
      sub_1000126B0((uint64_t)v12, type metadata accessor for ShareRecord);
      v31 += v32;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        a1 = (char *)v110;
        v18 = v102;
        goto LABEL_7;
      }
    }
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10005972C((uint64_t)a1, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v25, v115, type metadata accessor for OwnedBeaconRecord);
    v33 = *(unsigned __int8 *)(v18 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = (v113 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v102 = v33 | 7;
    v38 = swift_allocObject(&unk_101063F60, v37 + 8, v33 | 7);
    v97 = v34;
    sub_1000126EC((uint64_t)v25, v38 + v34, type metadata accessor for OwnedBeaconRecord);
    v98 = v35;
    v99 = v36;
    v39 = (uint64_t (**)(uint64_t))(v38 + v35);
    v40 = (uint64_t (*)(uint64_t))v114;
    *v39 = sub_1002939F8;
    v39[1] = v40;
    v41 = v112;
    *(_QWORD *)(v38 + v36) = v112;
    *(_QWORD *)(v38 + v37) = a3;
    swift_retain_n(v40, 2);
    swift_retain_n(v41, 2);
    v42 = swift_retain_n(a3, 2);
    v43 = static os_log_type_t.default.getter(v42);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v100 = ~v33;
    v101 = v33;
    v44 = qword_1011B7D38;
    v93 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v45 = swift_allocObject(v93, 72, 7);
    v110 = xmmword_100E22B00;
    *(_OWORD *)(v45 + 16) = xmmword_100E22B00;
    v46 = type metadata accessor for UUID(0);
    v92 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v46, v92);
    v49 = v48;
    *(_QWORD *)(v45 + 56) = &type metadata for String;
    v91 = sub_10001AA00();
    *(_QWORD *)(v45 + 64) = v91;
    *(_QWORD *)(v45 + 32) = v47;
    *(_QWORD *)(v45 + 40) = v49;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Unpair owned beacon: %@", 23, 2, v45);
    v50 = swift_bridgeObjectRelease();
    v51 = v103;
    static SystemInfo.lockState.getter(v50);
    v53 = v104;
    v52 = v105;
    v54 = v106;
    (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v104, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v106);
    v55 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v117, v54, v55);
    dispatch thunk of RawRepresentable.rawValue.getter(&v116, v54, v55);
    v57 = v116;
    v56 = v117;
    v58 = *(void (**)(char *, uint64_t))(v52 + 8);
    v58(v53, v54);
    v59 = ((uint64_t (*)(char *, uint64_t))v58)(v51, v54);
    if (v56 == v57)
    {
      v60 = a1;
      v61 = static os_log_type_t.default.getter(v59);
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
      v62 = sub_10008806C();
      v63 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v62, 0, 0);
      *v64 = 0;
      v65 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v66 = qword_1011B7D88;
      v67 = swift_allocObject(v93, 72, 7);
      *(_OWORD *)(v67 + 16) = v110;
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v46, v92);
      v69 = v91;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      *(_QWORD *)(v67 + 64) = v69;
      *(_QWORD *)(v67 + 32) = v68;
      *(_QWORD *)(v67 + 40) = v70;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Unpair for beacon, %@, unsuccessful", 35, 2, v67);
      swift_bridgeObjectRelease();
      swift_errorRetain(v63);
      v95(v63, 1);
      swift_errorRelease(v63);
      swift_errorRelease(v63);
      a1 = v60;
    }
    v71 = dispatch_group_create();
    dispatch_group_enter(v71);
    v72 = sub_10001A9A8(&qword_1011003C0);
    v73 = *(_QWORD *)(v46 - 8);
    v74 = *(unsigned __int8 *)(v73 + 80);
    v75 = (v74 + 32) & ~v74;
    v76 = swift_allocObject(v72, v75 + *(_QWORD *)(v73 + 72), v74 | 7);
    *(_OWORD *)(v76 + 16) = v110;
    (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v76 + v75, v111, v46);
    v77 = swift_allocObject(&unk_101063F88, 24, 7);
    *(_QWORD *)(v77 + 16) = v71;
    v78 = v71;
    v79 = v107;
    sub_10075B3B4(v76, (uint64_t)sub_1002981A0, v77);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    v80 = v109;
    sub_10005972C((uint64_t)a1, v109, type metadata accessor for OwnedBeaconRecord);
    v81 = v99;
    v82 = v102;
    v83 = swift_allocObject(&unk_101063FB0, v99 + 10, v102);
    sub_1000126EC(v80, v83 + v97, type metadata accessor for OwnedBeaconRecord);
    v84 = (uint64_t (**)(uint64_t))(v83 + v98);
    *v84 = sub_10028F910;
    v84[1] = (uint64_t (*)(uint64_t))v38;
    v85 = v83 + v81;
    *(_QWORD *)v85 = v79;
    *(_BYTE *)(v85 + 8) = v108 & 1;
    *(_BYTE *)(v85 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_1009FB1F0(a1, (void (*)(_QWORD))sub_10028F948, v83);
    swift_release();
    swift_release();

    sub_1000126B0(v115, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for Transaction(0);
    v86 = swift_allocObject(&unk_1010637E0, 24, 7);
    swift_weakInit(v86 + 16, a3);
    sub_10005972C((uint64_t)a1, v80, type metadata accessor for OwnedBeaconRecord);
    v87 = (v101 + 24) & v100;
    v88 = swift_allocObject(&unk_101063FD8, v87 + v113, v82);
    *(_QWORD *)(v88 + 16) = v86;
    sub_1000126EC(v80, v88 + v87, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    static Transaction.asyncTask(name:block:)("com.apple.icloud.searchpartyd-force-stop-item-sharing", 53, 2, &unk_1010F4998, v88);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10028E1AC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (**v39)(uint64_t);
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(const void *, void *);
  void *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (**v86)(uint64_t);
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v106 = a2;
  v7 = type metadata accessor for ShareRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v103 = *(_QWORD *)(v11 - 8);
  v104 = v11;
  v12 = __chkstk_darwin(v11);
  v102 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v101 = (char *)&v91 - v14;
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v107 = (uint64_t)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v115 = (uint64_t)&v91 - v20;
  v113 = v21;
  __chkstk_darwin(v19);
  v23 = (char *)&v91 - v22;
  v24 = swift_allocObject(&unk_101064938, 24, 7);
  *(_QWORD *)(v24 + 16) = a4;
  v25 = swift_allocObject(&unk_101064960, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10001D1EC;
  *(_QWORD *)(v25 + 24) = v24;
  v112 = v25;
  v111 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  v26 = *(_QWORD *)(a3 + 280);
  v93 = v15;
  v27 = *(int *)(v15 + 20);
  v114 = (char *)a1;
  v28 = a1 + v27;
  v105 = v26;
  v94 = a4;
  _Block_copy(a4);
  v108 = v24;
  swift_retain();
  v110 = v28;
  v29 = sub_10088A6EC();
  v30 = v29[2];
  if (v30)
  {
    *(_QWORD *)&v109 = v16;
    v31 = (uint64_t)v29 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v32 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_10005972C(v31, (uint64_t)v10, type metadata accessor for ShareRecord);
      if (!*(_QWORD *)(a3 + 40))
        break;
      swift_retain();
      sub_10037BF50((uint64_t)v10, (uint64_t)sub_10027D6CC, 0);
      swift_release();
      sub_1000126B0((uint64_t)v10, type metadata accessor for ShareRecord);
      v31 += v32;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        v16 = v109;
        goto LABEL_7;
      }
    }
    swift_release();
    _Block_release(v94);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10005972C((uint64_t)v114, (uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C((uint64_t)v23, v115, type metadata accessor for OwnedBeaconRecord);
    v33 = *(unsigned __int8 *)(v16 + 80);
    v34 = (v33 + 16) & ~v33;
    v35 = (v113 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8;
    v100 = v33 | 7;
    v38 = swift_allocObject(&unk_101064988, v37 + 8, v33 | 7);
    v95 = v34;
    sub_1000126EC((uint64_t)v23, v38 + v34, type metadata accessor for OwnedBeaconRecord);
    v96 = v35;
    v39 = (uint64_t (**)(uint64_t))(v38 + v35);
    v41 = v111;
    v40 = (uint64_t (*)(uint64_t))v112;
    *v39 = sub_10015A05C;
    v39[1] = v40;
    v97 = v36;
    *(_QWORD *)(v38 + v36) = v41;
    *(_QWORD *)(v38 + v37) = a3;
    swift_retain_n(v40, 2);
    swift_retain_n(v41, 2);
    v42 = swift_retain_n(a3, 2);
    v43 = static os_log_type_t.default.getter(v42);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v99 = v33;
    v98 = ~v33;
    v44 = qword_1011B7D38;
    v92 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v45 = swift_allocObject(v92, 72, 7);
    v109 = xmmword_100E22B00;
    *(_OWORD *)(v45 + 16) = xmmword_100E22B00;
    v46 = type metadata accessor for UUID(0);
    v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v46, v91);
    v49 = v48;
    *(_QWORD *)(v45 + 56) = &type metadata for String;
    v50 = sub_10001AA00();
    *(_QWORD *)(v45 + 64) = v50;
    *(_QWORD *)(v45 + 32) = v47;
    *(_QWORD *)(v45 + 40) = v49;
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "Unpair owned beacon: %@", 23, 2, v45);
    v51 = swift_bridgeObjectRelease();
    v52 = v101;
    static SystemInfo.lockState.getter(v51);
    v54 = v102;
    v53 = v103;
    v55 = v104;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v104);
    v56 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v117, v55, v56);
    dispatch thunk of RawRepresentable.rawValue.getter(&v116, v55, v56);
    v58 = v116;
    v57 = v117;
    v59 = *(void (**)(char *, uint64_t))(v53 + 8);
    v59(v54, v55);
    v60 = ((uint64_t (*)(char *, uint64_t))v59)(v52, v55);
    if (v57 == v58)
    {
      v61 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
      v62 = sub_10008806C();
      v63 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v62, 0, 0);
      *v64 = 0;
      v65 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v66 = qword_1011B7D88;
      v67 = swift_allocObject(v92, 72, 7);
      *(_OWORD *)(v67 + 16) = v109;
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v46, v91);
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      *(_QWORD *)(v67 + 64) = v50;
      *(_QWORD *)(v67 + 32) = v68;
      *(_QWORD *)(v67 + 40) = v69;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Unpair for beacon, %@, unsuccessful", 35, 2, v67);
      swift_bridgeObjectRelease();
      v70 = (void (**)(const void *, void *))v94;
      _Block_copy(v94);
      v71 = (void *)_convertErrorToNSError(_:)(v63);
      v70[2](v70, v71);

      _Block_release(v70);
      swift_errorRelease(v63);
    }
    v72 = dispatch_group_create();
    dispatch_group_enter(v72);
    v73 = sub_10001A9A8(&qword_1011003C0);
    v74 = *(_QWORD *)(v46 - 8);
    v75 = *(unsigned __int8 *)(v74 + 80);
    v76 = (v75 + 32) & ~v75;
    v77 = swift_allocObject(v73, v76 + *(_QWORD *)(v74 + 72), v75 | 7);
    *(_OWORD *)(v77 + 16) = v109;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v77 + v76, v110, v46);
    v78 = swift_allocObject(&unk_1010649B0, 24, 7);
    *(_QWORD *)(v78 + 16) = v72;
    v79 = v72;
    v80 = v105;
    sub_10075B3B4(v77, (uint64_t)sub_1002981A0, v78);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    v81 = v114;
    v82 = v107;
    sub_10005972C((uint64_t)v114, v107, type metadata accessor for OwnedBeaconRecord);
    v83 = v97;
    v84 = v100;
    v85 = swift_allocObject(&unk_1010649D8, v97 + 10, v100);
    sub_1000126EC(v82, v85 + v95, type metadata accessor for OwnedBeaconRecord);
    v86 = (uint64_t (**)(uint64_t))(v85 + v96);
    *v86 = sub_10028F910;
    v86[1] = (uint64_t (*)(uint64_t))v38;
    v87 = v85 + v83;
    *(_QWORD *)v87 = v80;
    *(_BYTE *)(v87 + 8) = v106 & 1;
    *(_BYTE *)(v87 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_1009FB1F0(v81, (void (*)(_QWORD))sub_10028F948, v85);
    swift_release();
    swift_release();

    sub_1000126B0(v115, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for Transaction(0);
    v88 = swift_allocObject(&unk_1010637E0, 24, 7);
    swift_weakInit(v88 + 16, a3);
    sub_10005972C((uint64_t)v81, v82, type metadata accessor for OwnedBeaconRecord);
    v89 = (v99 + 24) & v98;
    v90 = swift_allocObject(&unk_101064A00, v89 + v113, v84);
    *(_QWORD *)(v90 + 16) = v88;
    sub_1000126EC(v82, v90 + v89, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    static Transaction.asyncTask(name:block:)("com.apple.icloud.searchpartyd-force-stop-item-sharing", 53, 2, &unk_1010F4B08, v90);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_10028EA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t i;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  NSString *v55;
  NSString *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSURL *v73;
  void *v74;
  void *v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  __int128 v94;
  void (*v95)(void);
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  char *v103;
  id v104;
  char *v105;
  char *v106;
  unint64_t v107;
  NSURLResourceKey v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  void *v117;
  id v118;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010F46D0);
  __chkstk_darwin(v0);
  v98 = (char *)&v89 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for URLResourceValues(0);
  v3 = *(_QWORD *)(v2 - 8);
  v109 = v2;
  v110 = v3;
  __chkstk_darwin(v2);
  v106 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URL(0);
  v115 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for DirectorySequence(0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v116 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Calendar.Component(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Calendar(0);
  v113 = *(_QWORD *)(v15 - 8);
  v114 = (uint64_t (*)(char *, uint64_t, uint64_t))v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v19 = __chkstk_darwin(v18);
  v105 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v22 = (char *)&v89 - v21;
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD **)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v99 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v89 - v28;
  __chkstk_darwin(v27);
  v103 = (char *)&v89 - v30;
  v104 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  static Calendar.current.getter(v104);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Calendar.Component.day(_:), v11);
  static Date.trustedNow.getter((uint64_t)v29);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v14, -35, v29, 0);
  v100 = (void (*)(char *, uint64_t))v24[1];
  v100(v29, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v113 + 8))(v17, v114);
  v101 = (unsigned int (*)(char *, uint64_t, uint64_t))v24[6];
  if (v101(v22, 1, v23) != 1)
  {
    v95 = (void (*)(void))v24[4];
    v33 = ((uint64_t (*)(char *, char *, uint64_t))v95)(v103, v22, v23);
    v34 = static os_log_type_t.default.getter(v33);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v35 = qword_1011B7D38;
    v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v37 = swift_allocObject(v36, 72, 7);
    v94 = xmmword_100E22B00;
    *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
    v38 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v102 = v23;
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v23, v38);
    v41 = v40;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    v93 = sub_10001AA00();
    *(_QWORD *)(v37 + 64) = v93;
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "removeExpiredNotificationRecordTombstones() threshold: %{public}@", 65, 2, v37);
    swift_bridgeObjectRelease();
    v42 = v111;
    if (qword_1010E9B78 != -1)
      swift_once(&qword_1010E9B78, sub_10033DA58);
    v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B6DB0);
    v44 = NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v43, 0, 0);
    v45 = v111;
    DirectorySequence.next()(v44);
    v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v115 + 48);
    v46 = v114(v9, 1, v45);
    v47 = v98;
    if (v46 == 1)
    {
LABEL_10:

      (*(void (**)(char *, uint64_t))(v96 + 8))(v116, v97);
      v100(v103, v102);
      return;
    }
    v113 = *(_QWORD *)(v115 + 32);
    v108 = NSURLCreationDateKey;
    v112 = (unint64_t)"shold: %{public}@";
    v107 = 0x8000000100ECC9E0;
    v91 = xmmword_100E22B10;
    v92 = v36;
    for (i = ((uint64_t (*)(char *, char *, uint64_t))v113)(v6, v9, v45);
          ;
          i = ((uint64_t (*)(char *, char *, uint64_t))v113)(v6, v9, v45))
    {
      v52 = URL.pathExtension.getter(i);
      if (v52 == 0xD000000000000010 && v53 == v107)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, 0xD000000000000010, v112 | 0x8000000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v54 & 1) == 0)
        {
          v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v45);
          goto LABEL_14;
        }
      }
      type metadata accessor for URLResourceKey(0);
      sub_100006204(&qword_1010EB5A0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E218EC);
      v55 = v108;
      v118 = (id)Set.init(minimumCapacity:)(1);
      v56 = v55;
      sub_100A0E614(&v117, v56);
      v57 = v117;

      URL.resourceValues(forKeys:)(v118);
      swift_bridgeObjectRelease();
      v58 = v109;
      v59 = v110;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v47, 0, 1, v109);
      v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48))(v47, 1, v58);
      v62 = v105;
      v61 = v106;
      if (v60 == 1)
      {
        v45 = v111;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        v49 = (uint64_t)v47;
        v50 = (uint64_t *)&unk_1010F46D0;
LABEL_13:
        v51 = sub_100004048(v49, v50);
        goto LABEL_14;
      }
      v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v106, v47, v58);
      URLResourceValues.creationDate.getter(v63);
      v64 = v102;
      if (v101(v62, 1, v102) == 1)
      {
        (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
        v45 = v111;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        v49 = (uint64_t)v62;
        v50 = (uint64_t *)&unk_1010EA690;
        goto LABEL_13;
      }
      v65 = v99;
      v95();
      v66 = static Date.< infix(_:_:)(v65, v103);
      if ((v66 & 1) != 0)
      {
        v67 = static os_log_type_t.default.getter(v66);
        v68 = qword_1011B7D38;
        v69 = swift_allocObject(v92, 72, 7);
        *(_OWORD *)(v69 + 16) = v94;
        v70 = URL.absoluteString.getter(v69);
        v71 = v93;
        *(_QWORD *)(v69 + 56) = &type metadata for String;
        *(_QWORD *)(v69 + 64) = v71;
        *(_QWORD *)(v69 + 32) = v70;
        *(_QWORD *)(v69 + 40) = v72;
        os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "Purging expired tombstoned notification record: %@", 50, 2, v69);
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v73);
        v75 = v74;
        v118 = 0;
        LODWORD(v67) = objc_msgSend(v104, "removeItemAtURL:error:", v74, &v118);

        v76 = v118;
        if ((_DWORD)v67)
        {
          v77 = v118;
        }
        else
        {
          v78 = v118;
          v79 = (void *)_convertNSErrorToError(_:)(v76);

          v81 = swift_willThrow(v80);
          v82 = static os_log_type_t.error.getter(v81);
          v90 = qword_1011B7D38;
          v83 = swift_allocObject(v92, 112, 7);
          *(_OWORD *)(v83 + 16) = v91;
          v84 = URL.absoluteString.getter(v83);
          *(_QWORD *)(v83 + 56) = &type metadata for String;
          *(_QWORD *)(v83 + 64) = v71;
          *(_QWORD *)(v83 + 32) = v84;
          *(_QWORD *)(v83 + 40) = v85;
          v118 = v79;
          swift_errorRetain(v79);
          v86 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v87 = String.init<A>(describing:)(&v118, v86);
          *(_QWORD *)(v83 + 96) = &type metadata for String;
          *(_QWORD *)(v83 + 104) = v71;
          *(_QWORD *)(v83 + 72) = v87;
          *(_QWORD *)(v83 + 80) = v88;
          os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v90, "Error deleting URL %@: %@", 25, 2, v83);
          swift_bridgeObjectRelease();
          swift_errorRelease(v79);
        }
        v100(v99, v102);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v58);
        v45 = v111;
        v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v111);
        v47 = v98;
      }
      else
      {
        v100(v65, v64);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v58);
        v45 = v111;
        v51 = (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v6, v111);
      }
LABEL_14:
      DirectorySequence.next()(v51);
      if (v114(v9, 1, v45) == 1)
        goto LABEL_10;
    }
  }
  v31 = sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010EA690);
  v32 = static os_log_type_t.error.getter(v31);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7D38, "Unable to create theshold date!", 31, 2, _swiftEmptyArrayStorage);

}

uint64_t sub_10028F5BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  sub_100C72B64(a1 + *(int *)(v4 + 24), v3);
  return v5 & 1;
}

BOOL sub_10028F608(uint64_t *a1)
{
  uint64_t v1;

  return (sub_1009A6610(a1, *(_QWORD *)(v1 + 16)) & 1) == 0;
}

uint64_t sub_10028F638()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10028F8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_10026EA68(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10028F914()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10028F938(int a1, char a2)
{
  uint64_t v2;

  sub_1009FD5DC(a1, a2 & 1, *(dispatch_group_t *)(v2 + 16));
}

uint64_t sub_10028F94C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10028F974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F4714);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[22] = v3;
  v5[23] = v4;
  return swift_task_switch(sub_10027DD78, 0, 0);
}

uint64_t sub_10028F9F0@<X0>(void (*a1)(void)@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2;

  return sub_10027DAA4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_10028FA08()
{
  unint64_t result;

  result = qword_1010F4730;
  if (!qword_1010F4730)
  {
    result = swift_getWitnessTable(byte_100E4FE54, &type metadata for BeaconManagerService.BeaconManagerServiceError);
    atomic_store(result, (unint64_t *)&qword_1010F4730);
  }
  return result;
}

uint64_t sub_10028FA50(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  v11 = (_QWORD *)swift_task_alloc(dword_1010FD06C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  return sub_1004A36F0(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10028FAF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

id sub_10028FDB0(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100276CAC(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(void (**)(void))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_10028FE0C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

id sub_1002900B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100276E1C(a1, *(_BYTE *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1002900FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

uint64_t sub_1002903B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  v7 = *(_QWORD *)v6;
  v8 = *(_BYTE *)(v6 + 8);
  v9 = (_QWORD *)swift_task_alloc(dword_1010F474C);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_10027516C(v4, v5, v7, v8);
}

uint64_t sub_100290448()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((v4 + v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100290724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002754F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(void))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), v1 + v4, *(_QWORD *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002907B8(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  return sub_1002760F8(a1, v1 + v4, *(_BYTE *)(v1 + v5), *(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 16), *(void (**)(void))(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10029082C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v7 + 16));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v6);
}

uint64_t sub_1002908C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002762B4(a1, v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(uint64_t (**)(_QWORD))(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16), *(uint64_t (**)(uint64_t))(v1+ ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100290934()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100290940(char *a1)
{
  uint64_t v1;

  return sub_100275CA4(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24));
}

uint64_t sub_10029094C()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100290958(uint64_t a1)
{
  uint64_t v1;

  return sub_100275EB4(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100290964()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_100290970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F4764);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_100276058, v3, 0);
}

uint64_t sub_1002909D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 48);
  v7 = (_QWORD *)swift_task_alloc(dword_10111D4CC);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_100CD7F88(v2, v3, v4, v5, v6);
}

uint64_t sub_100290A48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100290A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = swift_task_alloc(dword_1010F477C);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_BYTE *)(v4 + 24) = v3;
  *(_QWORD *)(v4 + 16) = v2;
  return swift_task_switch(sub_100275E18, v2, 0);
}

uint64_t sub_100290AD8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_errorRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 49, 7);
}

uint64_t sub_100290B0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v27 = *(_QWORD *)(v7 + 64);
  v9 = v0 + v4;
  v10 = (v5 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v1);
  swift_release();
  v11 = v0 + v10;
  sub_10001BC14(*(_QWORD *)(v0 + v10), *(_QWORD *)(v0 + v10 + 8));
  v12 = v0 + v10 + v6[5];
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v0 + v10 + v6[6];
  v17 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v16, v17))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v10 = v26;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v18 = v11 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
    v15(v18, v13);
  v19 = v11 + v6[8];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  sub_10001BC14(*(_QWORD *)(v11 + v6[9]), *(_QWORD *)(v11 + v6[9] + 8));
  v21 = (uint64_t *)(v11 + v6[10]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10001BC14(*v21, v22);
  v23 = (uint64_t *)(v11 + v6[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v11 + v6[12]), *(_QWORD *)(v11 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v11 + v6[13]), *(_QWORD *)(v11 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v27 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v8 | 7);
}

uint64_t sub_100290E18()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027CBC0(v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, *(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100290EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v27 = *(_QWORD *)(v7 + 64);
  v9 = v0 + v4;
  v10 = (v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v1);
  swift_release();
  v11 = v0 + v10;
  sub_10001BC14(*(_QWORD *)(v0 + v10), *(_QWORD *)(v0 + v10 + 8));
  v12 = v0 + v10 + v6[5];
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v0 + v10 + v6[6];
  v17 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v16, v17))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v10 = v26;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v18 = v11 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
    v15(v18, v13);
  v19 = v11 + v6[8];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  sub_10001BC14(*(_QWORD *)(v11 + v6[9]), *(_QWORD *)(v11 + v6[9] + 8));
  v21 = (uint64_t *)(v11 + v6[10]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10001BC14(*v21, v22);
  v23 = (uint64_t *)(v11 + v6[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v11 + v6[12]), *(_QWORD *)(v11 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v11 + v6[13]), *(_QWORD *)(v11 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((((v10 + v27) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v8 | 7);
}

uint64_t sub_1002911C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v7 = ((v5 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  return sub_10027CEE0(a1, v1 + v4, *(_BYTE *)(v1 + v5), *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), v1 + v7, *(unsigned __int8 *)(v1 + v8), *(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + v1 + 16), *(_QWORD *)(v1 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100291288(uint64_t a1)
{
  return sub_10027D4CC(a1);
}

uint64_t sub_100291290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (((((v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v27 = *(_QWORD *)(v7 + 64);
  v9 = v0 + v4;
  v10 = (v8 + v5 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v9, v1);
  swift_release();
  swift_release();
  swift_release();
  v11 = v0 + v10;
  sub_10001BC14(*(_QWORD *)(v0 + v10), *(_QWORD *)(v0 + v10 + 8));
  v12 = v0 + v10 + v6[5];
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v0 + v10 + v6[6];
  v17 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v16, v17))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v15(v16, v13);
      v26 = v10;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v10 = v26;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v18 = v11 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
    v15(v18, v13);
  v19 = v11 + v6[8];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  sub_10001BC14(*(_QWORD *)(v11 + v6[9]), *(_QWORD *)(v11 + v6[9] + 8));
  v21 = (uint64_t *)(v11 + v6[10]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10001BC14(*v21, v22);
  v23 = (uint64_t *)(v11 + v6[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v11 + v6[12]), *(_QWORD *)(v11 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v11 + v6[13]), *(_QWORD *)(v11 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v27 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v8 | 7);
}

uint64_t sub_1002915AC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for OSSignpostID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  return sub_10027D200(a1, a2, v2 + v6, *(_BYTE *)(v2 + v7), *(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + v2 + 8), *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + v2 + 16), *(_QWORD *)(v2 + (((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v2+ ((*(unsigned __int8 *)(v8 + 80)+ (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
}

uint64_t sub_10029167C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for OSSignpostID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1002916F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for OSSignpostID(0);
  return sub_10027CD3C(a1, v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80)));
}

id sub_100291758@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  result = sub_1002835F0(v1 + ((v3 + 24) & ~v3), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 280));
  *a1 = result;
  return result;
}

uint64_t sub_1002917A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10111D4DC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100CD7018(v2, v3);
}

uint64_t sub_1002917F4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10111D4D4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100CD75CC(v0);
}

uint64_t sub_10029183C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10081B688(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100291858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110A8F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_10082AA40(a1, v4, v1 + 24);
}

uint64_t sub_1002918C0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

uint64_t sub_100291B74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10027C3C0(a1, *(void (**)(uint64_t))(v1 + 16), *(void (**)(uint64_t))(v1 + 24), v1 + v4, *(_QWORD *)v5, *(unsigned __int8 *)(v5 + 8));
}

uint64_t sub_100291BD0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v4 + v5) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100291E90(char *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10027C798(a1, v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(void (**)(uint64_t))(v1+ ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v1+ ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

uint64_t sub_100291EF4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v24 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v24 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  v20 = (v4 + v5) & 0xFFFFFFFFFFFFFFF8;
  v21 = (((v20 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = v20 + v0;
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease(*(_QWORD *)(v22 + 8));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v21 + 8, v3 | 7);
}

uint64_t sub_1002921C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10027C9C0(a1, v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(void (**)(uint64_t))(v1+ ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v1+ ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

uint64_t sub_100292234()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1002923EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_10027E3B4(a1, *(_QWORD *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_100292444()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100292468()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100292630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027E5D0(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))(v1 + v5), *(uint64_t (**)(uint64_t))(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100292694()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100292844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10027E87C(a1, v1 + v4, *(uint64_t (**)(_QWORD))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100292898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10029298C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100278530(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1002929D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((v4 + *(_QWORD *)(v2 + 64) + 31) & 0xFFFFFFFFFFFFFFF8) + 16;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_100292AD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  sub_100279034(a1, v1 + v4, *(void (**)(void))(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(void (**)(void *))(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100292B3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100292B4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100292B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100292C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100279E18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD, __n128))(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100292CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  void (*v21)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47C0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    sub_10001BC14(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    v7 = v5 + v6[5];
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    v11 = v5 + v6[6];
    v12 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v10(v11, v8);
        v21 = v10;
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v10(v11, v8);
        v21 = v10;
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        v10 = v21;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v13 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
      v10(v13, v8);
    v14 = v5 + v6[8];
    v15 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    sub_10001BC14(*(_QWORD *)(v5 + v6[9]), *(_QWORD *)(v5 + v6[9] + 8));
    v16 = (uint64_t *)(v5 + v6[10]);
    v17 = v16[1];
    if (v17 >> 60 != 15)
      sub_10001BC14(*v16, v17);
    v18 = (uint64_t *)(v5 + v6[11]);
    v19 = v18[1];
    if (v19 >> 60 != 15)
      sub_10001BC14(*v18, v19);
    sub_10001BC14(*(_QWORD *)(v5 + v6[12]), *(_QWORD *)(v5 + v6[12] + 8));
    sub_10001BC14(*(_QWORD *)(v5 + v6[13]), *(_QWORD *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_100292F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47C0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10027B370(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100292FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFF8;
  v6 = v0 + v3;
  v7 = *(_QWORD *)(v0 + v4);
  v8 = swift_task_alloc(dword_1010F48BC);
  v9 = *(_OWORD *)(v0 + v5);
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)v8 = v1;
  *(_QWORD *)(v8 + 8) = sub_100004A74;
  *(_OWORD *)(v8 + 192) = v9;
  *(_QWORD *)(v8 + 176) = v6;
  *(_QWORD *)(v8 + 184) = v7;
  return swift_task_switch(sub_100279FF4, 0, 0);
}

uint64_t sub_100293098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F48EC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_10027A724(a1, a2, v7, v6);
}

uint64_t sub_100293104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100293180(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_1010F48FC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10027ACF4(a1, v5, v6, v7, v8);
}

uint64_t sub_100293214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_101101FF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_101101FF0 + dword_101101FF0))(a1, v4);
}

uint64_t sub_100293284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002932F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10027C0C0(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_100293348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002933BC(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10027C224(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_1002933FC(uint64_t a1)
{
  uint64_t v1;

  return sub_10027C31C(a1, *(void (**)(_QWORD *))(v1 + 16));
}

uint64_t sub_100293408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100293504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10027864C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(void *))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100293564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100293660(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027BB50(a1, v1 + v4, *(void (**)(_QWORD))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(_QWORD))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002936C0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5 + v4 + 1, v3 | 7);
}

uint64_t sub_100293964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10027D5E4(a1, a2, *(_QWORD *)(v2 + 16), (char *)(v2 + v6), *(unsigned __int8 *)(v2 + v6 + *(_QWORD *)(v5 + 64)));
}

uint64_t sub_1002939C0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1002939F8(uint64_t a1)
{
  uint64_t v1;

  return sub_10027D670(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100293A0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 88) = 0;
  return swift_release(v1);
}

uint64_t sub_100293A18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100293A28()
{
  return sub_100294AA0(56);
}

uint64_t sub_100293A30()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100269E44);
}

uint64_t sub_100293A3C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_100293A48()
{
  uint64_t v0;

  sub_10026B32C(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100293A64(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_100293A7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F49E4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_10026BCFC, v0, 0);
}

uint64_t *sub_100293AD8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[15];
  v13 = a1[17];
  v14 = a1[16];
  v15 = a1[18];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100293BA8(uint64_t a1)
{
  sub_100293C08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_100293C08(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18)
{
  if (a6)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100293CD4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100BBF03C(v1, a1);
}

uint64_t *sub_100293CEC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001EF3C(v6, v7);
  sub_10001EF3C(v8, v9);
  return a1;
}

void sub_100293D78()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_100293D80(uint64_t a1)
{
  uint64_t v1;

  return sub_10027E9DC(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100293D8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100293DB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 64, 7);
}

void sub_100293DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10026C5F4(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100293E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F4A04);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_10026D030, 0, 0);
}

uint64_t sub_100293E68()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100294110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = v0 + ((v2 + 32) & ~v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F4A14);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_10026D470(v3, v4, v5);
}

uint64_t sub_100294188()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);

  v1 = v0;
  v2 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v3 = *((_QWORD *)v2 - 1);
  v29 = *(unsigned __int8 *)(v3 + 80);
  v4 = (v29 + 16) & ~v29;
  v5 = *(_QWORD *)(v3 + 64);
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = (v4 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27 = *(_QWORD *)(v7 + 64);
  v28 = *(unsigned __int8 *)(v7 + 80);
  v9 = v1 + v4;
  sub_10001BC14(*(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v4 + 8));
  v10 = v1 + v4 + v2[5];
  v11 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v11 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v12(v10, v11);
  v12(v9 + v2[6], v11);
  v13 = v9 + v2[10];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v30 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v30(v13, v14);
  v16 = v9 + v2[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14))
    v30(v16, v14);
  swift_bridgeObjectRelease();
  v17 = v1 + v8;
  sub_10001BC14(*(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8));
  v12(v1 + v8 + v6[5], v11);
  v18 = v1 + v8 + v6[6];
  v19 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v18, v19))
  {
    case 0u:
    case 4u:
      goto LABEL_7;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 2u:
      v12(v18, v11);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3u:
      v12(v18, v11);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v20 = v17 + v6[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v20, 1, v11))
    v12(v20, v11);
  v30(v17 + v6[8], v14);
  sub_10001BC14(*(_QWORD *)(v17 + v6[9]), *(_QWORD *)(v17 + v6[9] + 8));
  v21 = (uint64_t *)(v17 + v6[10]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    sub_10001BC14(*v21, v22);
  v23 = (uint64_t *)(v17 + v6[11]);
  v24 = v23[1];
  if (v24 >> 60 != 15)
    sub_10001BC14(*v23, v24);
  sub_10001BC14(*(_QWORD *)(v17 + v6[12]), *(_QWORD *)(v17 + v6[12] + 8));
  sub_10001BC14(*(_QWORD *)(v17 + v6[13]), *(_QWORD *)(v17 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v1, v8 + v27, v29 | v28 | 7);
}

uint64_t sub_1002944E0(uint64_t a1)
{
  type metadata accessor for BeaconEstimatedLocation(0);
  type metadata accessor for OwnedBeaconRecord(0);
  return sub_10026D0EC(a1);
}

double sub_10029454C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_10029456C()
{
  return sub_100294AA0(56);
}

uint64_t sub_100294574()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100266C48);
}

uint64_t sub_100294580(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100294598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F4A3C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100268014(v2, v3);
}

uint64_t sub_1002945E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 72, 7);
}

void sub_10029462C(uint64_t a1)
{
  uint64_t v1;

  sub_100268314(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100294640()
{
  uint64_t v0;

  swift_release();
  swift_release();

  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  sub_10001BC14(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  return swift_deallocObject(v0, 296, 7);
}

void sub_1002946EC(_QWORD *a1)
{
  uint64_t v1;

  sub_1002687B4(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint8_t **)(v1 + 32), *(void **)(v1 + 40), (objc_class *)(v1 + 48), *(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 248), *(_BYTE *)(v1 + 256), *(_QWORD **)(v1 + 264), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 280));
}

uint64_t sub_100294734(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24)
{
  if (a6)
  {
    sub_10001BBBC(result, a2);
    sub_10001BBBC(a3, a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a10);
    sub_10001BBBC(a11, a12);
    sub_10001BBBC(a13, a14);
    sub_10001BBBC(a15, a16);
    sub_10001BBBC(a17, a18);
    sub_10001BBBC(a19, a20);
    sub_10001BBBC(a21, a22);
    return sub_10001BBBC(a23, a24);
  }
  return result;
}

_QWORD *sub_100294838(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_1002948A4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24)
{
  if (a6)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001BC14(a21, a22);
    return sub_10001BC14(a23, a24);
  }
  return result;
}

double sub_1002949A8(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1002949C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10111D58C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100CD7658(v0);
}

uint64_t sub_100294A10()
{
  return sub_100294B98((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100294A24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_10111D584);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_100CD738C(v2, v3, v4, v5, v6);
}

uint64_t sub_100294A98()
{
  return sub_100294AA0(48);
}

uint64_t sub_100294AA0(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100294AE0()
{
  uint64_t v0;

  return sub_1002661B8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100294AEC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100294AF8()
{
  uint64_t v0;

  swift_release();
  sub_100294B28(*(id *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

void sub_100294B28(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

uint64_t sub_100294B34()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

id sub_100294B60(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_100294B6C()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

void sub_100294B78(uint64_t a1)
{
  uint64_t v1;

  sub_100265C4C(a1, *(void (**)(void **, uint64_t))(v1 + 16));
}

uint64_t sub_100294B84()
{
  return sub_100294B98((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100294B98(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  _QWORD *v2;

  a1(v2[2]);
  a2(v2[4]);
  a2(v2[6]);
  return swift_deallocObject(v2, 56, 7);
}

uint64_t sub_100294BE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110A8F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_10082AA40(a1, v4, v1 + 24);
}

uint64_t sub_100294C4C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F4A9C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[4] = v0;
  return swift_task_switch(sub_100270B78, 0, 0);
}

uint64_t sub_100294CA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F4AAC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1010F4AA8 + dword_1010F4AA8))(a1, v4);
}

uint64_t sub_100294D18()
{
  uint64_t v0;

  return sub_10027111C(v0);
}

uint64_t sub_100294D20()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100294D2C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101105F04);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_10072E60C(a1, v4, v5, v6);
}

uint64_t sub_100294D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  Class isa;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Class v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  Class v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Class v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v96 = a2;
  v91 = a1;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v2);
  v92 = (uint64_t)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for OwnedBeaconRecord(0);
  v89 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v87 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v94 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v82 - v9;
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v84 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v86 = (char *)&v82 - v15;
  v16 = __chkstk_darwin(v14);
  v83 = (uint64_t)&v82 - v17;
  v18 = __chkstk_darwin(v16);
  v85 = (char *)&v82 - v19;
  v20 = __chkstk_darwin(v18);
  v88 = (uint64_t)&v82 - v21;
  v22 = __chkstk_darwin(v20);
  v90 = (char *)&v82 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v82 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v82 - v28;
  __chkstk_darwin(v27);
  v31 = (char *)&v82 - v30;
  v32 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v95 = (char *)&v82 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v35 = v98;
  KeyPath = swift_getKeyPath(&unk_100E2F9E0);
  sub_100C1C4BC(KeyPath, v35, v31);
  swift_bridgeObjectRelease();
  swift_release();
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v37(v31, 1, v32) == 1)
  {
    sub_100004048((uint64_t)v31, &qword_1010ED860);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v29, 1, 1, v32);
    sub_10000F9B8((uint64_t)v29, (uint64_t)v26, &qword_1010ED860);
    if (v37(v26, 1, v32) == 1)
    {
      isa = 0;
    }
    else
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v26, v32);
    }
    (*(void (**)(uint64_t, Class))(v96 + 16))(v96, isa);

    return sub_100004048((uint64_t)v29, &qword_1010ED860);
  }
  else
  {
    v82 = v33;
    v39 = v95;
    v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v95, v31, v32);
    static SystemInfo.lockState.getter(v40);
    v41 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v94, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
    v42 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v98, v5, v42);
    dispatch thunk of RawRepresentable.rawValue.getter(&v97, v5, v42);
    v43 = v98;
    v44 = v97;
    v45 = *(void (**)(char *, uint64_t))(v6 + 8);
    v45(v41, v5);
    v46 = ((uint64_t (*)(char *, uint64_t))v45)(v10, v5);
    if (v43 == v44)
    {
      v47 = static os_log_type_t.default.getter(v46);
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_1011B7D88, "Returning possibly false UUID because device lockState is beforeFirstUnlock", 75, 2, _swiftEmptyArrayStorage);
      v48 = v82;
      v49 = (uint64_t)v90;
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v90, v39, v32);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v32);
      v50 = v88;
      sub_10000F9B8(v49, v88, &qword_1010ED860);
      if (v37((char *)v50, 1, v32) == 1)
      {
        v51 = 0;
      }
      else
      {
        v51 = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v50, v32);
      }
      (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v51);

      sub_100004048(v49, &qword_1010ED860);
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v39, v32);
    }
    else
    {
      v53 = v92;
      sub_10027081C(v92);
      v54 = v93;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v53, 1, v93) == 1)
      {
        v55 = sub_100004048(v53, (uint64_t *)&unk_1010F47C0);
        v56 = static os_log_type_t.error.getter(v55);
        if (qword_1010EA2A8 != -1)
          swift_once(&qword_1010EA2A8, sub_100B5DDB4);
        v57 = qword_1011B7D88;
        v58 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v59 = swift_allocObject(v58, 72, 7);
        *(_OWORD *)(v59 + 16) = xmmword_100E22B00;
        v60 = UUID.uuidString.getter(v59);
        v62 = v61;
        *(_QWORD *)(v59 + 56) = &type metadata for String;
        *(_QWORD *)(v59 + 64) = sub_10001AA00();
        *(_QWORD *)(v59 + 32) = v60;
        *(_QWORD *)(v59 + 40) = v62;
        os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "Local beacon found in defaults, but not in BeaconStore!: %@", 59, 2, v59);
        swift_bridgeObjectRelease();
        v63 = v82;
        v64 = (uint64_t)v86;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v86, 1, 1, v32);
        v65 = v84;
        sub_10000F9B8(v64, v84, &qword_1010ED860);
        if (v37((char *)v65, 1, v32) == 1)
        {
          v66 = 0;
        }
        else
        {
          v66 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v65, v32);
        }
        (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v66);

        sub_100004048(v64, &qword_1010ED860);
        return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v95, v32);
      }
      else
      {
        v67 = v87;
        v68 = sub_1000126EC(v53, v87, type metadata accessor for OwnedBeaconRecord);
        v69 = static os_log_type_t.default.getter(v68);
        if (qword_1010EA2A8 != -1)
          swift_once(&qword_1010EA2A8, sub_100B5DDB4);
        v70 = qword_1011B7D88;
        v71 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v72 = swift_allocObject(v71, 72, 7);
        *(_OWORD *)(v72 + 16) = xmmword_100E22B00;
        v73 = v67 + *(int *)(v54 + 20);
        v74 = UUID.uuidString.getter(v72);
        v76 = v75;
        *(_QWORD *)(v72 + 56) = &type metadata for String;
        *(_QWORD *)(v72 + 64) = sub_10001AA00();
        *(_QWORD *)(v72 + 32) = v74;
        *(_QWORD *)(v72 + 40) = v76;
        os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Found cached local beacon UUID already stored: %@", 49, 2, v72);
        swift_bridgeObjectRelease();
        v77 = v82;
        v78 = (uint64_t)v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v85, v73, v32);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v32);
        v79 = v83;
        sub_10000F9B8(v78, v83, &qword_1010ED860);
        if (v37((char *)v79, 1, v32) == 1)
        {
          v80 = 0;
        }
        else
        {
          v80 = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v32);
        }
        v81 = v95;
        (*(void (**)(uint64_t, Class))(v96 + 16))(v96, v80);

        sub_100004048(v78, &qword_1010ED860);
        sub_1000126B0(v67, type metadata accessor for OwnedBeaconRecord);
        return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v81, v32);
      }
    }
  }
}

void sub_10029565C()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  NSObject *oslog;
  int v10;
  uint64_t v11;

  v0 = sub_1001FB9A4();
  v1 = sub_100D33BC4();
  v2 = sub_100864CB4();
  v3 = sub_100DF689C();
  v4 = sub_1006184E4();
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7648);
  oslog = Logger.logObject.getter(v6);
  v7 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 67110144;
    v10 = v0 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 1024;
    v10 = v1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 10, v8 + 14);
    *(_WORD *)(v8 + 14) = 1024;
    v10 = v2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 16, v8 + 20);
    *(_WORD *)(v8 + 20) = 1024;
    v10 = v3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 22, v8 + 26);
    *(_WORD *)(v8 + 26) = 1024;
    v10 = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 28, v8 + 32);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "\"Deleted account keychain items. deletedItemSharingKey: %{BOOL}d, deletedObservationKey: %{BOOL}d, deletedBeaconStoreKey: %{BOOL}d, deletedKeyManagerKey: %{BOOL}d deletedStandaloneBeaconDatabaseKey: %{BOOL}d.", (uint8_t *)v8, 0x20u);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10029583C()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_100295848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10112112C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100DCC2A4(a1, v4, v5, v6);
}

uint64_t sub_1002958B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100DCC51C(a1, v1);
}

uint64_t sub_1002958D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1002958E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  uint64_t v24;
  _QWORD *v25;

  v3 = type metadata accessor for PairingErrorRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100889840();
  v8 = v7[2];
  if (v8)
  {
    v24 = a2;
    v25 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v8);
    v9 = (uint64_t)v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v10 = *(_QWORD *)(v4 + 72);
    do
    {
      sub_10005972C(v9, (uint64_t)v6, type metadata accessor for PairingErrorRecord);
      sub_1009986E4();
      v12 = v11;
      v13 = sub_1000126B0((uint64_t)v6, type metadata accessor for PairingErrorRecord);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = v25[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
      specialized ContiguousArray._endMutation()(v15);
      v9 += v10;
      --v8;
    }
    while (v8);
    v16 = v25;
    v17 = swift_bridgeObjectRelease();
    a2 = v24;
  }
  else
  {
    v17 = swift_bridgeObjectRelease();
    v16 = _swiftEmptyArrayStorage;
  }
  v18 = static os_log_type_t.info.getter(v17);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v19 = qword_1011B7DF0;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = v16[2];
  *(_QWORD *)(v21 + 56) = &type metadata for Int;
  *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v21 + 32) = v22;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "allPairingErrors count: %i", v24);
  swift_bridgeObjectRelease();
  sub_1007EDD08((uint64_t)v16);
  swift_bridgeObjectRelease();
  sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();

}

void sub_100295B2C(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  const void *v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  void *v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  void *v91;
  int v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  const void *v105;
  uint64_t v106;
  _BYTE v107[48];
  __int128 v108;
  uint64_t v109;
  unsigned __int8 v110[48];

  v103 = a2;
  v100 = type metadata accessor for UUID(0);
  v96 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v93 = v7;
  v94 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v95 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for LocalFindableAccessoryRecord(0);
  __chkstk_darwin(v98);
  v99 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for SharedBeaconRecord(0);
  v11 = __chkstk_darwin(v102);
  v97 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v101 = (char *)&v92 - v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v14);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OwnedBeaconGroup(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OwnedBeaconRecord(0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v26 = (char *)&v92 - v25;
  v106 = swift_allocObject(&unk_1010645C8, 24, 7);
  *(_QWORD *)(v106 + 16) = a4;
  v104 = a3;
  _Block_copy(a4);
  v105 = a4;
  _Block_copy(a4);
  sub_10080B648(a1, (uint64_t)&v108);
  if (v109)
  {
    sub_10000F9FC(&v108, (uint64_t)v110);
    sub_100030784((uint64_t)v110, (uint64_t)&v108);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    if ((swift_dynamicCast(v26, &v108, v27, v21, 0) & 1) != 0)
    {
      sub_1000126EC((uint64_t)v26, (uint64_t)v24, type metadata accessor for OwnedBeaconRecord);
      sub_100273E98((uint64_t)v24, v103 & 1, (uint64_t)sub_10001D1F0, v106);
      v28 = (uint64_t)v24;
      v29 = type metadata accessor for OwnedBeaconRecord;
    }
    else
    {
      v46 = v101;
      v47 = swift_dynamicCast(v101, &v108, v27, v102, 0);
      v48 = v106;
      if ((v47 & 1) == 0)
      {
        v61 = (uint64_t)v99;
        v62 = swift_dynamicCast(v99, &v108, v27, v98, 0);
        if ((_DWORD)v62)
        {
          v63 = swift_allocObject(&unk_1010645F0, 32, 7);
          *(_QWORD *)(v63 + 16) = sub_10001D1F0;
          *(_QWORD *)(v63 + 24) = v48;
          v64 = type metadata accessor for TaskPriority(0);
          v65 = (uint64_t)v95;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v95, 1, 1, v64);
          v66 = v96;
          v67 = v94;
          v68 = a1;
          v69 = v100;
          (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v94, v68, v100);
          v70 = *(unsigned __int8 *)(v66 + 80);
          v71 = (v70 + 56) & ~v70;
          v72 = (char *)swift_allocObject(&unk_101064618, v71 + v93, v70 | 7);
          *((_QWORD *)v72 + 2) = 0;
          *((_QWORD *)v72 + 3) = 0;
          *((_QWORD *)v72 + 4) = v104;
          *((_QWORD *)v72 + 5) = sub_1000A18BC;
          *((_QWORD *)v72 + 6) = v63;
          (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v72[v71], v67, v69);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_100691AC0(v65, (uint64_t)&unk_1010F4AF0, (uint64_t)v72);
          swift_release();
          swift_release();
          v45 = v105;
          (*((void (**)(const void *, _QWORD))v105 + 2))(v105, 0);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v110);
          sub_1000126B0(v61, type metadata accessor for LocalFindableAccessoryRecord);
        }
        else
        {
          v77 = static os_log_type_t.error.getter(v62);
          if (qword_1010EA2A8 != -1)
            swift_once(&qword_1010EA2A8, sub_100B5DDB4);
          v78 = qword_1011B7D88;
          v79 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v80 = swift_allocObject(v79, 72, 7);
          *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
          sub_100030784((uint64_t)v110, (uint64_t)v107);
          v81 = String.init<A>(describing:)(v107, v27);
          v83 = v82;
          *(_QWORD *)(v80 + 56) = &type metadata for String;
          *(_QWORD *)(v80 + 64) = sub_10001AA00();
          *(_QWORD *)(v80 + 32) = v81;
          *(_QWORD *)(v80 + 40) = v83;
          os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "Unhandled beacon type: %@", 25, 2, v80);
          swift_bridgeObjectRelease();
          v84 = sub_10028FA08();
          v85 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v84, 0, 0);
          *v86 = 3;
          v87 = (void *)_convertErrorToNSError(_:)(v85);
          v45 = v105;
          (*((void (**)(const void *, void *))v105 + 2))(v105, v87);

          swift_errorRelease(v85);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v110);
        }
        goto LABEL_11;
      }
      v49 = (uint64_t)v46;
      v50 = v97;
      sub_1000126EC(v49, v97, type metadata accessor for SharedBeaconRecord);
      sub_100274B28(v50, (uint64_t)sub_10001D1F0, v48);
      v28 = v50;
      v29 = type metadata accessor for SharedBeaconRecord;
    }
    sub_1000126B0(v28, v29);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v110);
    v45 = v105;
LABEL_11:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v108);
LABEL_28:
    swift_release();
    goto LABEL_29;
  }
  sub_100004048((uint64_t)&v108, (uint64_t *)&unk_1010EE310);
  sub_10081EDA8(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    v51 = (uint64_t)v20;
    sub_1000126EC((uint64_t)v16, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
    v110[0] = 0;
    sub_10036AC6C();
    v53 = v52;
    v54 = v104;
    swift_retain();
    sub_10028AA7C(v53, v54, v110);
    swift_bridgeObjectRelease();
    v55 = swift_release();
    v56 = v110[0];
    v57 = static os_log_type_t.default.getter(v55);
    if (v56 == 1)
    {
      v58 = v106;
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_1011B7DF0, "Device may be already connected.", 32, 2, _swiftEmptyArrayStorage);
      v59 = v103 & 1;
      v60 = (uint64_t)v20;
    }
    else
    {
      v58 = v106;
      if (qword_1010EA2A8 != -1)
        swift_once(&qword_1010EA2A8, sub_100B5DDB4);
      v73 = qword_1011B7D88;
      v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v75 = swift_allocObject(v74, 72, 7);
      *(_OWORD *)(v75 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v75 + 56) = &type metadata for Bool;
      *(_QWORD *)(v75 + 64) = &protocol witness table for Bool;
      v76 = v103;
      *(_BYTE *)(v75 + 32) = v103 & 1;
      os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v73, "Device is not connected. Force [%d]", v92);
      swift_bridgeObjectRelease();
      if ((v76 & 1) == 0)
      {
        v88 = sub_10028FA08();
        v89 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v88, 0, 0);
        *v90 = 7;
        v91 = (void *)_convertErrorToNSError(_:)(v89);
        v45 = v105;
        (*((void (**)(const void *, void *))v105 + 2))(v105, v91);

        swift_errorRelease(v89);
        goto LABEL_27;
      }
      v60 = v51;
      v59 = 1;
    }
    sub_100274D88(v60, v59, (uint64_t)sub_10001D1F0, v58);
    v45 = v105;
LABEL_27:
    sub_1000126B0(v51, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_28;
  }
  v30 = sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010FF7F0);
  v31 = static os_log_type_t.error.getter(v30);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v32 = qword_1011B7D88;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
  v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v36 = dispatch thunk of CustomStringConvertible.description.getter(v100, v35);
  v38 = v37;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  *(_QWORD *)(v34 + 64) = sub_10001AA00();
  *(_QWORD *)(v34 + 32) = v36;
  *(_QWORD *)(v34 + 40) = v38;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Can't find beacon for uuid: %@", 30, 2, v34);
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  v40 = v39;
  *(_QWORD *)&v108 = 2;
  v41 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v42 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  _BridgedStoredNSError.init(_:userInfo:)(v110, &v108, v41, v40, v42);
  v43 = *(void **)v110;
  v44 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)v110);
  v45 = v105;
  (*((void (**)(const void *, void *))v105 + 2))(v105, v44);
  swift_release();

LABEL_29:
  _Block_release(v45);
}

uint64_t sub_10029654C(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  NSString v10;
  __CFNotificationCenter *v11;
  __CFNotificationCenter *v12;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7DF8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v17 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "setAlwaysBeaconWildState to %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "setBool:forKey:", a1 & 1, v10);

  v11 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v11)
  {
    v12 = v11;
    v13 = (const __CFString *)SPBeaconingStateChangedNotification;
    v14 = static os_log_type_t.default.getter(v11);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D38, "Posting SPBeaconingStateChangedNotification Darwin notification", 63, 2, _swiftEmptyArrayStorage);
    CFNotificationCenterPostNotification(v12, v13, 0, 0, 1u);

  }
  else
  {
    v15 = static os_log_type_t.error.getter(0);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D38, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

uint64_t sub_1002967D0(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  Class isa;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  _BYTE v48[16];
  id v49;

  v3 = sub_10001A9A8(&qword_1010F4AD8);
  __chkstk_darwin(v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OfflineFindingInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v45 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10027081C((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F47C0);
    v16 = sub_10028FA08();
    v17 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v16, 0, 0);
    *v18 = 1;
    swift_errorRetain(v17);
    a2(0, 0xF000000000000000, v17);
    swift_errorRelease(v17);
    return swift_errorRelease(v17);
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    sub_1002732A0((uint64_t)v15, (uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_100004048((uint64_t)v5, &qword_1010F4AD8);
      v20 = sub_10028FA08();
      v21 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v20, 0, 0);
      *v22 = 1;
      swift_errorRetain(v21);
      a2(0, 0xF000000000000000, v21);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }
    else
    {
      v23 = v45;
      sub_1000126EC((uint64_t)v5, v45, type metadata accessor for OfflineFindingInfo);
      v24 = (void *)objc_opt_self(NSPropertyListSerialization);
      sub_1008ED464();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v49 = 0;
      v26 = objc_msgSend(v24, "dataWithPropertyList:format:options:error:", isa, 200, 0, &v49);

      v27 = v49;
      if (v26)
      {
        v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v30 = v29;

        sub_10001BBBC(v28, v30);
        a2(v28, v30, 0);
        sub_10001BC14(v28, v30);
        sub_10001BC14(v28, v30);
      }
      else
      {
        v31 = v27;
        v32 = _convertNSErrorToError(_:)(v27);

        swift_willThrow(v33);
        if (qword_1010E9C30 != -1)
          swift_once(&qword_1010E9C30, sub_10047F0AC);
        v34 = type metadata accessor for Logger(0);
        sub_10001A9E8(v34, (uint64_t)qword_1011B6F60);
        swift_errorRetain(v32);
        v35 = swift_errorRetain(v32);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.error.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v44 = (void *)swift_slowAlloc(32, -1);
          v49 = v44;
          *(_DWORD *)v38 = 136315138;
          v23 = v45;
          v43 = v38 + 4;
          swift_getErrorValue(v32, v48, v47);
          v39 = Error.localizedDescription.getter(v47[1], v47[2]);
          v46 = sub_100016940(v39, v40, (uint64_t *)&v49);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v43, v38 + 12);
          swift_bridgeObjectRelease();
          swift_errorRelease(v32);
          swift_errorRelease(v32);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "PropertyListSerialization error: %s", v38, 0xCu);
          v41 = v44;
          swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v41, -1, -1);
          swift_slowDealloc(v38, -1, -1);
        }
        else
        {
          swift_errorRelease(v32);
          swift_errorRelease(v32);
        }

        swift_errorRetain(v32);
        a2(0, 0xF000000000000000, v32);
        swift_errorRelease(v32);
        swift_errorRelease(v32);
      }
      sub_1000126B0(v23, type metadata accessor for OfflineFindingInfo);
    }
    return sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_100296D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSString v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  UUID.uuidString.getter(v8);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setObject:forKey:", v9, v10);

  if (qword_1010E9C30 != -1)
    swift_once(&qword_1010E9C30, sub_10047F0AC);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B6F60);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v24 = a2;
    v17 = v16;
    v26 = v16;
    *(_DWORD *)v15 = 136315138;
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v25 = sub_100016940(v19, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Poisoning beacon UUID: %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    a2 = v24;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t *sub_100296FD8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_10001EF3C(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001EF3C(v4, v5);
  return a1;
}

uint64_t sub_100297034()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029705C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1002970E0()
{
  uint64_t v0;

  j__dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1002970EC()
{
  uint64_t v0;

  return sub_10026FC70(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_100297104()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100297110()
{
  uint64_t v0;

  return sub_10026FD10(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10029711C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10026D860(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100297134(uint64_t a1)
{
  uint64_t v1;

  return sub_1002702B8(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_10029713C(uint64_t a1)
{
  uint64_t v1;

  return sub_100270444(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100297148()
{
  uint64_t *v0;

  return sub_10026DC3C(v0[2], v0[3], v0[4]);
}

uint64_t sub_100297154()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100297160()
{
  return sub_10026DCB8();
}

uint64_t sub_10029716C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002971A0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10026DD60(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002971AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v22;

  v1 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }
  else
  {
    sub_10001BC14(*v6, v6[1]);
    v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v8 = (char *)v6 + v7[5];
    v9 = type metadata accessor for UUID(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(void (**)(char *, uint64_t))(v10 + 8);
    v11(v8, v9);
    v12 = (char *)v6 + v7[6];
    v13 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v12, v13))
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v11(v12, v9);
        v22 = v5;
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v11(v12, v9);
        v22 = v5;
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        v5 = v22;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v14 = (char *)v6 + v7[7];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
      v11(v14, v9);
    v15 = (char *)v6 + v7[8];
    v16 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[9]), *(uint64_t *)((char *)v6 + v7[9] + 8));
    v17 = (uint64_t *)((char *)v6 + v7[10]);
    v18 = v17[1];
    if (v18 >> 60 != 15)
      sub_10001BC14(*v17, v18);
    v19 = (uint64_t *)((char *)v6 + v7[11]);
    v20 = v19[1];
    if (v20 >> 60 != 15)
      sub_10001BC14(*v19, v20);
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[12]), *(uint64_t *)((char *)v6 + v7[12] + 8));
    sub_10001BC14(*(uint64_t *)((char *)v6 + v7[13]), *(uint64_t *)((char *)v6 + v7[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002974A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101108050) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10026E08C(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100297504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027D7E4(a1, v1 + v4, *(uint64_t (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100297574()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v3 | 7);
}

uint64_t sub_100297834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1009FD5E4(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 9));
}

uint64_t sub_1002978A4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100297B44(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t uniqueChipID;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t chipID;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t result;
  id v70;
  id v71;
  _BYTE v72[4];
  int v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _BYTE *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[16];
  uint64_t v85[8];
  char v86;
  _QWORD *v87;

  v82 = a3;
  LODWORD(v76) = a2;
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v77 = &v72[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  v12 = &v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = qword_1010EA318;
  v79 = a4;
  swift_retain();
  v78 = a5;
  if (v13 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7DF8);
  v15 = sub_10005972C(a1, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v80 = v10;
  v81 = a1;
  if (v18)
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v85[0] = v20;
    *(_DWORD *)v19 = 141558275;
    v83 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = v21;
    v10 = v80;
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    v83 = sub_100016940(v24, v25, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "removeAirPodsPairingLock for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v26 = v20;
    a1 = v81;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  }

  swift_bridgeObjectRetain(*(_QWORD *)(a1 + *(int *)(v10 + 40)));
  v28 = sub_100265568(v27);
  swift_bridgeObjectRelease();
  v29 = v82;
  swift_retain();
  v30 = sub_10028B8A4(v28, v29);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n(v30, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v85[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    swift_bridgeObjectRetain(v30);
    v38 = Array.description.getter(v37, v36);
    v40 = v39;
    swift_bridgeObjectRelease();
    v83 = sub_100016940(v38, v40, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease_n(v30, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "unpairDevices: %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    v41 = swift_bridgeObjectRelease_n(v30, 2);
  }
  v42 = (id)MobileGestalt_get_current_device(v41);
  if (v42)
  {
    v43 = v42;
    v75 = v30;
    uniqueChipID = MobileGestalt_get_uniqueChipID();

    v46 = (id)MobileGestalt_get_current_device(v45);
    if (v46)
    {
      v47 = v46;
      v73 = v76 & 1;
      chipID = MobileGestalt_get_chipID();

      v85[0] = uniqueChipID;
      v49 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v51 = v50;
      v76 = v50;
      v85[0] = chipID;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v54 = v53;
      v74 = v53;
      v55 = sub_100B118D0();
      v57 = v56;
      v59 = v80;
      v58 = v81;
      v60 = MACAddress.udid.getter(v55);
      v85[0] = v49;
      v85[1] = v51;
      v85[2] = v52;
      v85[3] = v54;
      v85[4] = (uint64_t)v55;
      v85[5] = v57;
      v85[6] = v60;
      v85[7] = v61;
      v86 = v73;
      v87 = v75;
      v62 = sub_1007929F8();
      v63 = v58 + *(int *)(v59 + 24);
      v64 = type metadata accessor for UUID(0);
      v65 = *(_QWORD *)(v64 - 8);
      v66 = (uint64_t)v77;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v65 + 16))(v77, v63, v64);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v64);
      v67 = v79;
      swift_retain();
      v68 = v78;
      sub_1007013E4(v66, (uint64_t)v85, v62, v67, v68);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      sub_100004048(v66, &qword_1010ED860);
      return swift_release();
    }
  }
  else
  {
    v70 = v78;

    swift_release_n(v79, 2);
    __break(1u);
  }
  v71 = v78;

  result = swift_release_n(v79, 2);
  __break(1u);
  return result;
}

uint64_t sub_10029826C@<X0>(uint64_t a1@<X8>)
{
  return sub_10029183C(a1);
}

uint64_t sub_100298288()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  Swift::String v8;
  int *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  _QWORD v32[2];
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;

  v1 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v1);
  v3 = (char *)v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = 0;
  v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v7._countAndFlagsBits = 0x7069726373627553;
  v7._object = (void *)0xEC0000006E6F6974;
  String.append(_:)(v7);
  v8._object = (void *)0x8000000100ECEC40;
  v8._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  v9 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0);
  v10._countAndFlagsBits = UUID.uuidString.getter(v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0xEC000000203A6574;
  v11._countAndFlagsBits = 0x6144747261747320;
  String.append(_:)(v11);
  sub_10000F9B8(v0, (uint64_t)v6, (uint64_t *)&unk_1010EA690);
  v12._countAndFlagsBits = String.init<A>(describing:)(v6, v4);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A64697575616220;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  sub_10000F9B8(v0 + v9[7], (uint64_t)v3, &qword_1010ED860);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v3, 1, v14);
  if ((_DWORD)v16 == 1)
  {
    sub_100004048((uint64_t)v3, &qword_1010ED860);
    v17 = 0;
    v18 = (void *)0xE000000000000000;
  }
  else
  {
    v17 = UUID.uuidString.getter(v16);
    v18 = v19;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v14);
  }
  v20._countAndFlagsBits = v17;
  v20._object = v18;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x756F632073646920;
  v21._object = (void *)0xEB0000000020746ELL;
  String.append(_:)(v21);
  v33._countAndFlagsBits = *(_QWORD *)(*(_QWORD *)(v0 + v9[8]) + 16);
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD000000000000016;
  v23._object = (void *)0x8000000100ECEC60;
  String.append(_:)(v23);
  sub_10000F9B8(v0 + v9[9], (uint64_t)v6, (uint64_t *)&unk_1010EA690);
  v24._countAndFlagsBits = String.init<A>(describing:)(v6, v4);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0xD000000000000014;
  v33._object = (void *)0x8000000100ECEC80;
  v32[1] = *(_QWORD *)(*(_QWORD *)(v0 + v9[11]) + 16);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  strcpy((char *)&v33, " productId: ");
  BYTE5(v33._object) = 0;
  HIWORD(v33._object) = -5120;
  v26 = (uint64_t *)(v0 + v9[10]);
  v27 = v26[1];
  if (v27)
    v28 = *v26;
  else
    v28 = 0;
  if (v27)
    v29 = (void *)v26[1];
  else
    v29 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_100298680(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1010F4BE0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_10029B100();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotifyMeRequest.RequestBody.CodingKeys, &type metadata for NotifyMeRequest.RequestBody.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1010F4BF0);
  v12 = sub_10029B290(&qword_1010F4BF8, &qword_1010F4C00, (uint64_t)&unk_100E2FA88, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1002987A4()
{
  return 0x6269726373627573;
}

uint64_t sub_1002987C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6269726373627573 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease(0xE900000000000065);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6269726373627573, 0xE900000000000065, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100298860(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10029B100();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100298888(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10029B100();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_1002988B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10029B144(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1002988D8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100298680(a1, *v1);
}

uint64_t sub_1002988F0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029892C + 4 * byte_100E2FA08[a1]))(0x7461447472617473, 0xE900000000000065);
}

uint64_t sub_10029892C()
{
  return 0x7069726373627573;
}

uint64_t sub_100298950()
{
  return 0x646E756F46636F6CLL;
}

uint64_t sub_100298974()
{
  return 0x646975756162;
}

uint64_t sub_100298988()
{
  return 7562345;
}

unint64_t sub_100298998()
{
  return 0xD000000000000014;
}

uint64_t sub_1002989B4()
{
  return 0x49746375646F7270;
}

uint64_t sub_1002989D0()
{
  return 0x7261646E6F636573;
}

uint64_t sub_1002989F0()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_100298A14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F4C38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10029B314();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NotifyMeRequest.Subscription.CodingKeys, &type metadata for NotifyMeRequest.Subscription.CodingKeys, v11, v9, v10);
  LOBYTE(v30) = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v30, v5, v12, v13);
  if (!v2)
  {
    v27 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0);
    v28 = v3;
    v14 = v3 + v27[5];
    LOBYTE(v30) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v30, v5, v15, v16);
    v17 = *(unsigned __int8 *)(v28 + v27[6]);
    LOBYTE(v30) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v30, v5);
    v18 = v28 + v27[7];
    LOBYTE(v30) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v30, v5, v15, v16);
    v30 = *(_QWORD *)(v28 + v27[8]);
    v29 = 4;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v20 = sub_10029B358((unint64_t *)&qword_1010F19E0, (uint64_t (*)(void))sub_100036A58, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
    v21 = v28 + v27[9];
    LOBYTE(v30) = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v30, v5, v12, v13);
    v22 = (uint64_t *)(v28 + v27[10]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v30) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v30, v5);
    v30 = *(_QWORD *)(v28 + v27[11]);
    v29 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
    v30 = *(_QWORD *)(v28 + v27[12]);
    v29 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100298D70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v42 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v40 - v11;
  v44 = sub_10001A9A8(&qword_1010F4C20);
  v13 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = (int *)type metadata accessor for NotifyMeRequest.Subscription(0);
  __chkstk_darwin(v46);
  v47 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = a1;
  v17 = a1[3];
  v18 = a1[4];
  sub_10001AA44(a1, v17);
  v19 = sub_10029B314();
  v20 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotifyMeRequest.Subscription.CodingKeys, &type metadata for NotifyMeRequest.Subscription.CodingKeys, v19, v17, v18);
  if (v20)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  v21 = v6;
  v49 = v10;
  v22 = v13;
  v23 = type metadata accessor for Date(0);
  LOBYTE(v52) = 0;
  v24 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v25 = v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &v52, v44, v23, v24);
  v40 = v24;
  v41 = v23;
  v26 = v47;
  sub_100005CF0((uint64_t)v12, v47, (uint64_t *)&unk_1010EA690);
  LOBYTE(v52) = 1;
  v27 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v28 = v50;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v50, &v52, v25, v50, v27);
  v29 = v25;
  v30 = v46;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v45 + 32))(v26 + v46[5], v21, v28);
  LOBYTE(v52) = 2;
  *(_BYTE *)(v26 + v30[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v52, v29) & 1;
  LOBYTE(v52) = 3;
  v31 = (uint64_t)v43;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &v52, v44, v28, v27);
  sub_100005CF0(v31, v26 + v30[7], &qword_1010ED860);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v51 = 4;
  v33 = sub_10029B358((unint64_t *)&qword_1010F4C30, (uint64_t (*)(void))sub_100036994, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v44, v32, v33);
  *(_QWORD *)(v26 + v30[8]) = v52;
  LOBYTE(v52) = 5;
  v34 = (uint64_t)v49;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v41, &v52, v44, v41, v40);
  sub_100005CF0(v34, v26 + v30[9], (uint64_t *)&unk_1010EA690);
  LOBYTE(v52) = 6;
  v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v44);
  v36 = (uint64_t *)(v26 + v30[10]);
  *v36 = v35;
  v36[1] = v37;
  v51 = 7;
  v38 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v44, v32, v33);
  *(_QWORD *)(v26 + v46[11]) = v52;
  v51 = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v32, &v51, v38, v32, v33);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v38);
  *(_QWORD *)(v26 + v46[12]) = v52;
  sub_10029B3C0(v26, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  return sub_10029B404(v26);
}

uint64_t sub_100299444()
{
  unsigned __int8 *v0;

  return sub_1002988F0(*v0);
}

uint64_t sub_10029944C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10029B758(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100299470(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10029B314();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100299498(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10029B314();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002994C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100298D70(a1, a2);
}

uint64_t sub_1002994D4(_QWORD *a1)
{
  return sub_100298A14(a1);
}

uint64_t sub_1002994E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = a2[3];
  v3 = a2[4];
  sub_10001AA44(a2, v2);
  v4 = dispatch thunk of Encoder.singleValueContainer()(v9, v2, v3);
  v5 = Date.epoch.getter(v4);
  v6 = v10;
  v7 = v11;
  sub_10009F5D0((uint64_t)v9, v10);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
}

uint64_t sub_10029958C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[17] = v8;
  v2[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10029963C, 0, 0);
}

void sub_10029963C()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (__cdecl *v39)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "serverFriendlyDescription");

    if (v5)
    {
      v6 = v0[17];
      v7 = v0[18];
      v8 = (_QWORD *)v0[15];
      v9 = v0[16];
      v36 = v0[14];
      v37 = v0[13];
      v38 = v0[8];
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v12 = v11;

      v13 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
      v14 = v1;
      v15 = swift_bridgeObjectRelease();
      v16 = Date.init()(v15);
      v17 = Date.epoch.getter(v16);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
      v0[4] = v17;
      v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v20 = v19;
      v21 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
      swift_bridgeObjectRelease();
      v0[5] = 1;
      v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v24 = v23;
      v25 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
      v26 = v14;
      swift_bridgeObjectRelease();
      v27 = sub_100AC2EB8();
      v29 = v28;
      v30 = swift_isUniquelyReferenced_nonNull_native(v26);
      sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
      v0[19] = v26;
      swift_bridgeObjectRelease();
      v31 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
      v0[20] = JSONEncoder.init()(v32);
      *v8 = sub_1002994E8;
      v8[1] = 0;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v36 + 104))(v8, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v37);
      dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v8);
      v0[6] = v38;
      v33 = sub_100299F88();
      v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 6, &type metadata for NotifyMeRequest.RequestBody, v33);
      v0[22] = v34;
      swift_bridgeObjectRelease();
      v39 = (void (__cdecl *)())((char *)&dword_101115360 + dword_101115360);
      v35 = (_QWORD *)swift_task_alloc(unk_101115364);
      v0[23] = v35;
      *v35 = v0;
      v35[1] = sub_100299A34;
      v39();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100299A34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100299A90, 0, 0);
}

uint64_t sub_100299A90()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[24];
  v1 = v0[25];
  v4 = v0[21];
  v3 = v0[22];
  v6 = v0[11];
  v5 = v0[12];
  v7 = v0[10];
  v0[2] = v2;
  v0[3] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[2];
  v9 = v0[3];
  v0[26] = v8;
  v0[27] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[28] = v10;
  v0[29] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115358 + dword_101115358;
  v13 = (_QWORD *)swift_task_alloc(unk_10111535C);
  v0[30] = v13;
  *v13 = v0;
  v13[1] = sub_100299BBC;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[9]);
}

uint64_t sub_100299BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 240);
  *(_QWORD *)(*(_QWORD *)v2 + 248) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100299D24;
  }
  else
  {
    v7 = v4[28];
    v8 = v4[29];
    v4[32] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_100299C38;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100299C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 152);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v13 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v13);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 216);
  v8 = v13;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001BC14(v6, v7);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v9, v10);
}

uint64_t sub_100299D24()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  sub_10001BC14(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
  sub_10001BC14(v1, v2);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  if (v8)
  {
    v20 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 176);
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138543362;
    swift_errorRetain(v9);
    v14 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 56) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
    *v13 = v14;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not sign request: %{public}@.", v12, 0xCu);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
    swift_release();
    sub_10001BC14(v20, v19);
    swift_release();

    swift_errorRelease(v9);
  }
  else
  {
    swift_release();
    sub_10001BC14(v11, v10);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();

  }
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0);
}

unint64_t sub_100299F88()
{
  unint64_t result;

  result = qword_1010F4B28;
  if (!qword_1010F4B28)
  {
    result = swift_getWitnessTable(byte_100E2FB10, &type metadata for NotifyMeRequest.RequestBody);
    atomic_store(result, (unint64_t *)&qword_1010F4B28);
  }
  return result;
}

uint64_t type metadata accessor for NotifyMeRequest.Subscription(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4B88;
  if (!qword_1010F4B88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeRequest.Subscription);
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody()
{
  return &type metadata for NotifyMeRequest.RequestBody;
}

ValueMetadata *type metadata accessor for NotifyMeRequest()
{
  return &type metadata for NotifyMeRequest;
}

uint64_t *sub_10029A028(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v37)(uint64_t *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v37 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v37(a2, 1, v7))
    {
      v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v16(v12, v13, v14);
    v17 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)a2 + v17, 1, v14))
    {
      v20 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v16(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    }
    v21 = a3[8];
    v22 = a3[9];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v23;
    v24 = (char *)a1 + v22;
    v25 = (char *)a2 + v22;
    v26 = swift_bridgeObjectRetain(v23);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v37)(v25, 1, v7, v26))
    {
      v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v25, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v24, 0, 1, v7);
    }
    v28 = a3[10];
    v29 = a3[11];
    v30 = (uint64_t *)((char *)a1 + v28);
    v31 = (uint64_t *)((char *)a2 + v28);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    v33 = *(uint64_t *)((char *)a2 + v29);
    *(uint64_t *)((char *)a1 + v29) = v33;
    v34 = a3[12];
    v35 = *(uint64_t *)((char *)a2 + v34);
    *(uint64_t *)((char *)a1 + v34) = v35;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v35);
  }
  return a1;
}

uint64_t sub_10029A284(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + a2[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = a1 + a2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  v12 = a1 + a2[9];
  if (!v6(v12, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

char *sub_10029A3AC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v35)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v35(a2, 1, v6))
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v14(v10, v11, v12);
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1, v12))
  {
    v18 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = *(_QWORD *)&a2[v19];
  *(_QWORD *)&a1[v19] = v21;
  v22 = &a1[v20];
  v23 = &a2[v20];
  v24 = swift_bridgeObjectRetain(v21);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v35)(v23, 1, v6, v24))
  {
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v22, v23, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v22, 0, 1, v6);
  }
  v26 = a3[10];
  v27 = a3[11];
  v28 = &a1[v26];
  v29 = &a2[v26];
  v30 = *((_QWORD *)v29 + 1);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *((_QWORD *)v28 + 1) = v30;
  v31 = *(_QWORD *)&a2[v27];
  *(_QWORD *)&a1[v27] = v31;
  v32 = a3[12];
  v33 = *(_QWORD *)&a2[v32];
  *(_QWORD *)&a1[v32] = v33;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v33);
  return a1;
}

char *sub_10029A5DC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int *v44;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v43 = v8;
  v10 = v8(a2, 1, v6);
  v42 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  a1[a3[6]] = a2[a3[6]];
  v44 = a3;
  v18 = a3[7];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v22 = v21(&a1[v18], 1, v15);
  v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    v24 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  v17(v19, v20, v15);
LABEL_13:
  v25 = v44[8];
  v26 = *(_QWORD *)&a2[v25];
  *(_QWORD *)&a1[v25] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  v27 = v44[9];
  v28 = &a1[v27];
  v29 = &a2[v27];
  v30 = v43(&a1[v27], 1, v6);
  v31 = v43(v29, 1, v6);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v28, v29, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v28, v6);
    goto LABEL_18;
  }
  if (v31)
  {
LABEL_18:
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v28, v29, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v28, 0, 1, v6);
LABEL_19:
  v33 = v44[10];
  v34 = &a1[v33];
  v35 = &a2[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  v37 = v44[11];
  v38 = *(_QWORD *)&a2[v37];
  *(_QWORD *)&a1[v37] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  v39 = v44[12];
  v40 = *(_QWORD *)&a2[v39];
  *(_QWORD *)&a1[v39] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10029A92C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v25)(char *, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v25(a2, 1, v6))
  {
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  v16 = &a1[v15];
  v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1, v12))
  {
    v18 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  v19 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  if (v25(&a2[v19], 1, v6))
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v20, v21, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v20, 0, 1, v6);
  }
  v23 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  return a1;
}

char *sub_10029AB3C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int *v39;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v38 = v8;
  v10 = v8(a2, 1, v6);
  v37 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  v18 = a3[7];
  v39 = a3;
  a1[a3[6]] = a2[a3[6]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v22 = v21(&a1[v18], 1, v15);
  v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    v24 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  v17(v19, v20, v15);
LABEL_13:
  *(_QWORD *)&a1[v39[8]] = *(_QWORD *)&a2[v39[8]];
  swift_bridgeObjectRelease();
  v25 = v39[9];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = v38(&a1[v25], 1, v6);
  v29 = v38(v27, 1, v6);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v26, v27, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v6);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v26, v27, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v26, 0, 1, v6);
LABEL_19:
  v31 = v39[10];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v35 = *(_QWORD *)v33;
  v34 = *((_QWORD *)v33 + 1);
  *(_QWORD *)v32 = v35;
  *((_QWORD *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v39[11]] = *(_QWORD *)&a2[v39[11]];
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[v39[12]] = *(_QWORD *)&a2[v39[12]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10029AE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029AE6C);
}

uint64_t sub_10029AE6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = sub_10001A9A8(&qword_1010ED860);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t sub_10029AF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029AF4C);
}

uint64_t sub_10029AF4C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = sub_10001A9A8(&qword_1010ED860);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[7];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
  return result;
}

void sub_10029B01C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[9];

  sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v9[0] = v4;
    v5 = type metadata accessor for UUID(319);
    if (v6 <= 0x3F)
    {
      v9[1] = *(_QWORD *)(v5 - 8) + 64;
      v9[2] = &unk_100E2FA58;
      sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
      if (v8 <= 0x3F)
      {
        v9[3] = *(_QWORD *)(v7 - 8) + 64;
        v9[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v9[5] = v4;
        v9[6] = &unk_100E2FA70;
        v9[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v9[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_initStructMetadata(a1, 256, 9, v9, a1 + 16);
      }
    }
  }
}

unint64_t sub_10029B100()
{
  unint64_t result;

  result = qword_1010F4BE8;
  if (!qword_1010F4BE8)
  {
    result = swift_getWitnessTable("uO#", &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4BE8);
  }
  return result;
}

_QWORD *sub_10029B144(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_1010F4C08);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_10029B100();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotifyMeRequest.RequestBody.CodingKeys, &type metadata for NotifyMeRequest.RequestBody.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010F4BF0);
    v12 = sub_10029B290(&qword_1010F4C10, &qword_1010F4C18, (uint64_t)&unk_100E2FAB0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_10029B290(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F4BF0);
    v10 = sub_100006204(a2, type metadata accessor for NotifyMeRequest.Subscription, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10029B314()
{
  unint64_t result;

  result = qword_1010F4C28;
  if (!qword_1010F4C28)
  {
    result = swift_getWitnessTable(byte_100E2FD0C, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C28);
  }
  return result;
}

uint64_t sub_10029B358(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784((uint64_t *)&unk_1010FF7C0);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10029B3C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotifyMeRequest.Subscription(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10029B404(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotifyMeRequest.Subscription(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotifyMeRequest.Subscription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_10029B48C + 4 * byte_100E2FA16[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10029B4C0 + 4 * byte_100E2FA11[v4]))();
}

uint64_t sub_10029B4C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029B4C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10029B4D0);
  return result;
}

uint64_t sub_10029B4DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10029B4E4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_10029B4E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10029B4F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.Subscription.CodingKeys()
{
  return &type metadata for NotifyMeRequest.Subscription.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeRequest.RequestBody.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10029B54C + 4 * byte_100E2FA1B[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10029B56C + 4 * byte_100E2FA20[v4]))();
}

_BYTE *sub_10029B54C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10029B56C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10029B574(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10029B57C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10029B584(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10029B58C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody.CodingKeys()
{
  return &type metadata for NotifyMeRequest.RequestBody.CodingKeys;
}

unint64_t sub_10029B5AC()
{
  unint64_t result;

  result = qword_1010F4C40;
  if (!qword_1010F4C40)
  {
    result = swift_getWitnessTable(byte_100E2FC2C, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C40);
  }
  return result;
}

unint64_t sub_10029B5F4()
{
  unint64_t result;

  result = qword_1010F4C48;
  if (!qword_1010F4C48)
  {
    result = swift_getWitnessTable(byte_100E2FCE4, &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C48);
  }
  return result;
}

unint64_t sub_10029B63C()
{
  unint64_t result;

  result = qword_1010F4C50;
  if (!qword_1010F4C50)
  {
    result = swift_getWitnessTable("%P#", &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C50);
  }
  return result;
}

unint64_t sub_10029B684()
{
  unint64_t result;

  result = qword_1010F4C58;
  if (!qword_1010F4C58)
  {
    result = swift_getWitnessTable("\rP#", &type metadata for NotifyMeRequest.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C58);
  }
  return result;
}

unint64_t sub_10029B6CC()
{
  unint64_t result;

  result = qword_1010F4C60;
  if (!qword_1010F4C60)
  {
    result = swift_getWitnessTable(byte_100E2FB9C, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C60);
  }
  return result;
}

unint64_t sub_10029B714()
{
  unint64_t result;

  result = qword_1010F4C68;
  if (!qword_1010F4C68)
  {
    result = swift_getWitnessTable(byte_100E2FBC4, &type metadata for NotifyMeRequest.RequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4C68);
  }
  return result;
}

uint64_t sub_10029B758(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    v4 = 0xE900000000000065;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0x7069726373627573 && a2 == 0xEE0064496E6F6974)
  {
    v6 = 0xEE0064496E6F6974;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573, 0xEE0064496E6F6974, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0x646E756F46636F6CLL && a2 == 0xEF64656C62616E45)
  {
    v7 = 0xEF64656C62616E45;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E756F46636F6CLL, 0xEF64656C62616E45, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x646975756162 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646975756162, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    v9 = 0xE300000000000000;
LABEL_30:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000014)
  {
    v10 = 0x8000000100ECECA0;
    if (a2 == 0x8000000100ECECA0)
      goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100ECECA0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v11 = 0xE900000000000064;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x7261646E6F636573 && a2 == 0xEC00000073644979)
  {
    v12 = 0xEC00000073644979;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261646E6F636573, 0xEC00000073644979, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369)
  {
    swift_bridgeObjectRelease(0xEE00736449656369);
    return 8;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x76654464656E776FLL, 0xEE00736449656369, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t destroy for AirPodsLESendPairingDataCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_10001BC14(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  sub_10001BC14(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  sub_10001BC14(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  return sub_10001BC14(*(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 208));
}

uint64_t initializeWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 208);
  sub_10001BBBC(v29, v28);
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v20, v21);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v24, v25);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v28, v29);
  v30 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a2 + 112);
  v33 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v32, v33);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  sub_10001BC14(v34, v35);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 128);
  v39 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 144);
  v41 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 144);
  v43 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v41;
  sub_10001BC14(v42, v43);
  v44 = *(_QWORD *)(a2 + 160);
  v45 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v44, v45);
  v46 = *(_QWORD *)(a1 + 160);
  v47 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v44;
  *(_QWORD *)(a1 + 168) = v45;
  sub_10001BC14(v46, v47);
  v48 = *(_QWORD *)(a2 + 176);
  v49 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v48, v49);
  v50 = *(_QWORD *)(a1 + 176);
  v51 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v48;
  *(_QWORD *)(a1 + 184) = v49;
  sub_10001BC14(v50, v51);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v53 = *(_QWORD *)(a2 + 200);
  v52 = *(_QWORD *)(a2 + 208);
  sub_10001BBBC(v53, v52);
  v54 = *(_QWORD *)(a1 + 200);
  v55 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 200) = v53;
  *(_QWORD *)(a1 + 208) = v52;
  sub_10001BC14(v54, v55);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v26, v27);
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v28 = *(_QWORD *)(a1 + 200);
  v29 = *(_QWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  sub_10001BC14(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 216))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 216) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingDataCommandPayload()
{
  return &type metadata for AirPodsLESendPairingDataCommandPayload;
}

uint64_t sub_10029C108(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v40, v3, v4);
  v39 = *v1;
  v5 = v41;
  v6 = v42;
  sub_10009F5D0((uint64_t)v40, v41);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v39 = v1[2];
    v8 = v41;
    v9 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v8, v9);
    v39 = v1[4];
    v10 = v41;
    v11 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v10, v11);
    v39 = v1[5];
    v12 = v41;
    v13 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v12, v13);
    v39 = v1[1];
    v14 = v41;
    v15 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v14, v15);
    v39 = v1[3];
    v16 = v41;
    v17 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v16, v17);
    v39 = v1[6];
    v18 = v41;
    v19 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v18, v19);
    v39 = v1[7];
    v20 = v41;
    v21 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v20, v21);
    v39 = v1[8];
    v22 = v41;
    v23 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v22, v23);
    v39 = v1[9];
    v24 = v41;
    v25 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v24, v25);
    v39 = v1[10];
    v26 = v41;
    v27 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v26, v27);
    v39 = v1[11];
    v28 = v41;
    v29 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v28, v29);
    LOBYTE(v39) = *((_BYTE *)v1 + 192);
    v30 = sub_100059570();
    v31 = FixedWidthInteger.data.getter(&type metadata for UInt8, v30);
    v33 = v32;
    *(_QWORD *)&v39 = v31;
    *((_QWORD *)&v39 + 1) = v32;
    v34 = v41;
    v35 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v34, v35);
    sub_10001BC14(v31, v33);
    v39 = *(__int128 *)((char *)v1 + 200);
    v36 = v41;
    v37 = v42;
    sub_10009F5D0((uint64_t)v40, v41);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v39, &type metadata for Data, v7, v36, v37);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
}

double sub_10029C560@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[13];
  uint64_t v12;

  sub_10029C834(a1, (uint64_t)v11);
  if (!v2)
  {
    v5 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v11[12];
    *(_QWORD *)(a2 + 208) = v12;
    v6 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v6;
    v7 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v7;
    v8 = v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(_OWORD *)(a2 + 48) = v8;
    v9 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v9;
    result = *(double *)v11;
    v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v10;
  }
  return result;
}

uint64_t sub_10029C5E8(_QWORD *a1)
{
  return sub_10029C108(a1);
}

unint64_t sub_10029C5FC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10029C628();
  result = sub_10029C66C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10029C628()
{
  unint64_t result;

  result = qword_1010F4C70;
  if (!qword_1010F4C70)
  {
    result = swift_getWitnessTable(byte_100E2FDD8, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F4C70);
  }
  return result;
}

unint64_t sub_10029C66C()
{
  unint64_t result;

  result = qword_1010F4C78;
  if (!qword_1010F4C78)
  {
    result = swift_getWitnessTable(byte_100E2FE00, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F4C78);
  }
  return result;
}

void sub_10029C6B0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10029C71C(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 32)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10029C810);
}

uint64_t sub_10029C834@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t result;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  int64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD v157[3];
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;

  v5 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v157, v8, v9);
  v10 = v158;
  v11 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v10, v11);
  if (v2)
    goto LABEL_19;
  v14 = v12;
  v174 = v13;
  v16 = v158;
  v15 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v153 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v16, v15);
  v154 = v17;
  v18 = v158;
  v19 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v151 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v18, v19);
  v152 = v20;
  v21 = v158;
  v22 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v149 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v21, v22);
  v150 = v23;
  v24 = v158;
  v25 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v147 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v24, v25);
  v148 = v26;
  v27 = v158;
  v28 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v29 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v27, v28);
  v31 = v30;
  v155 = v147;
  v156 = v148;
  v142 = sub_100035530();
  v32 = DataProtocol.intValue.getter(&type metadata for Data, v142);
  v33 = v32 - 1;
  if (__OFSUB__(v32, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v34 = 20 * v33;
  if ((unsigned __int128)(v33 * (__int128)20) >> 64 != (20 * v33) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v34 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v143 = Data.subdata(in:)(0, v34, v29, v31);
  v144 = v35;
  v145 = v29;
  v146 = v31;
  v36 = v158;
  v37 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v140 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v36, v37);
  v141 = v38;
  v39 = v158;
  v40 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v138 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1280, v39, v40);
  v139 = v41;
  v42 = v158;
  v43 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v44 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v42, v43);
  v29 = v45;
  v46 = sub_10001BBBC(v44, v45);
  static Endianness.current.getter(v46);
  sub_100112060();
  FixedWidthInteger.init(data:ofEndianness:)(&v155, v44, v29, v7);
  if (BYTE2(v155) == 1)
  {
    v47 = type metadata accessor for BinaryEncodingError(0);
    v48 = sub_100006204((unint64_t *)&qword_1010EC000, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v47, v48, 0, 0);
    v50 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v49, enum case for BinaryEncodingError.encodingError(_:), v47);
    swift_willThrow(v50);
    v51 = v44;
LABEL_18:
    sub_10001BC14(v51, v29);
    sub_10001BC14(v138, v139);
    sub_10001BC14(v140, v141);
    sub_10001BC14(v143, v144);
    sub_10001BC14(v145, v146);
    sub_10001BC14(v147, v148);
    sub_10001BC14(v149, v150);
    sub_10001BC14(v151, v152);
    sub_10001BC14(v153, v154);
    sub_10001BC14(v14, v174);
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v157);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  v137 = v44;
  v52 = (unsigned __int16)v155;
  v54 = v138;
  v53 = v139;
  sub_10001BBBC(v138, v139);
  sub_1002F7C0C(v52, v54, v53);
  v135 = v155;
  v136 = v156;
  v55 = v158;
  v56 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v133 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v55, v56);
  v134 = v57;
  v58 = v158;
  v59 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v60 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v58, v59);
  v62 = v61;
  v155 = v60;
  v156 = v61;
  v63 = DataProtocol.intValue.getter(&type metadata for Data, v142);
  sub_10001BC14(v60, v62);
  v65 = v133;
  v64 = v134;
  sub_10001BBBC(v133, v134);
  sub_1002F7C0C(v63, v65, v64);
  v131 = v155;
  v132 = v156;
  v66 = v158;
  v67 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v129 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v66, v67);
  v130 = v68;
  v69 = v158;
  v70 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v71 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v69, v70);
  v73 = v72;
  v155 = v71;
  v156 = v72;
  v74 = DataProtocol.intValue.getter(&type metadata for Data, v142);
  sub_10001BC14(v71, v73);
  v76 = v129;
  v75 = v130;
  sub_10001BBBC(v129, v130);
  sub_1002F7C0C(v74, v76, v75);
  v127 = v155;
  v128 = v156;
  v77 = v158;
  v78 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v125 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v77, v78);
  v126 = v79;
  v80 = v158;
  v81 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v82 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v80, v81);
  v84 = v83;
  v155 = v82;
  v156 = v83;
  v85 = DataProtocol.intValue.getter(&type metadata for Data, v142);
  sub_10001BC14(v82, v84);
  v87 = v125;
  v86 = v126;
  sub_10001BBBC(v125, v126);
  sub_1002F7C0C(v85, v87, v86);
  v123 = v155;
  v124 = v156;
  v88 = v158;
  v89 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v121 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v88, v89);
  v122 = v90;
  v91 = v158;
  v92 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v119 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v91, v92);
  v120 = v93;
  v155 = v119;
  v156 = v93;
  v142 = DataProtocol.intValue.getter(&type metadata for Data, v142);
  v94 = v158;
  v95 = v159;
  sub_10009F5D0((uint64_t)v157, v158);
  v96 = dispatch thunk of BinaryDecodingContaining.decode(length:)(10, v94, v95);
  v117 = v97;
  v118 = v96;
  if (v142 > 3)
  {
LABEL_13:
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v107 = type metadata accessor for Logger(0);
    v108 = sub_10001A9E8(v107, (uint64_t)qword_1011B7E28);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.error.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v111 = 134217984;
      v155 = v142;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, &v156, v111 + 4, v111 + 12);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Invalid beaconPartId %ld!", v111, 0xCu);
      swift_slowDealloc(v111, -1, -1);
    }

    v112 = type metadata accessor for BinaryDecodingError(0);
    v113 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
    swift_allocError(v112, v113, 0, 0);
    v115 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v112 - 8) + 104))(v114, enum case for BinaryDecodingError.decodingError(_:), v112);
    swift_willThrow(v115);
    sub_10001BC14(v118, v117);
    sub_10001BC14(v119, v120);
    sub_10001BC14(v121, v122);
    sub_10001BC14(v123, v124);
    sub_10001BC14(v125, v126);
    sub_10001BC14(v127, v128);
    sub_10001BC14(v129, v130);
    sub_10001BC14(v131, v132);
    sub_10001BC14(v133, v134);
    sub_10001BC14(v135, v136);
    v51 = v137;
    goto LABEL_18;
  }
  sub_10001BC14(v137, v29);
  sub_10001BC14(v138, v139);
  sub_10001BC14(v145, v146);
  sub_10001BC14(v133, v134);
  sub_10001BC14(v129, v130);
  sub_10001BC14(v125, v126);
  sub_10001BC14(v119, v120);
  if (v142 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    sub_10029C6B0(v14, v174);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v157);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v99 = v171;
    v100 = v172;
    v101 = v169;
    *(_OWORD *)(a2 + 160) = v170;
    *(_OWORD *)(a2 + 176) = v99;
    *(_OWORD *)(a2 + 192) = v100;
    v102 = v167;
    v103 = v168;
    v104 = v165;
    *(_OWORD *)(a2 + 96) = v166;
    *(_OWORD *)(a2 + 112) = v102;
    *(_QWORD *)(a2 + 208) = v173;
    *(_OWORD *)(a2 + 128) = v103;
    *(_OWORD *)(a2 + 144) = v101;
    v105 = v163;
    *(_OWORD *)(a2 + 32) = v162;
    *(_OWORD *)(a2 + 48) = v105;
    *(_OWORD *)(a2 + 64) = v164;
    *(_OWORD *)(a2 + 80) = v104;
    v106 = v161;
    *(_OWORD *)a2 = v160;
    *(_OWORD *)(a2 + 16) = v106;
  }
  return result;
}

uint64_t sub_10029D2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029D2DC);
}

uint64_t sub_10029D2DC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10029D358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029D364);
}

char *sub_10029D364(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NotifyMeEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4CD8;
  if (!qword_1010F4CD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeEndpoint);
  return result;
}

uint64_t sub_10029D414()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x697263736275732FLL;
  v5._object = (void *)0xEA00000000006562;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

uint64_t sub_10029D4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _BYTE v15[48];

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v5, v15);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v7 = (_QWORD *)(v0 + *(int *)(type metadata accessor for ItemShareRequestReceivedUserNotification(0) + 32));
  v8 = v7[1];
  *(_QWORD *)(inited + 32) = *v7;
  *(_QWORD *)(inited + 40) = v8;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.itemSharing(_:), v1);
  swift_bridgeObjectRetain(v8);
  v9 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000027, 0x8000000100ECEE00, v4);
  v11 = v10;
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v12 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v13 = String.init(format:arguments:)(v9, v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10029D65C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v19[48];

  v1 = type metadata accessor for LocalizationUtility.Table(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v5, v19);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v7 = type metadata accessor for ItemShareRequestReceivedUserNotification(0);
  v8 = (_QWORD *)(v0 + *(int *)(v7 + 28));
  v9 = v8[1];
  *(_QWORD *)(inited + 32) = *v8;
  *(_QWORD *)(inited + 40) = v9;
  v10 = *(_BYTE *)(v0 + *(int *)(v7 + 36)) == 0;
  if (*(_BYTE *)(v0 + *(int *)(v7 + 36)))
    v11 = 0xD000000000000031;
  else
    v11 = 0xD00000000000002FLL;
  if (v10)
    v12 = 0x8000000100ECEE30;
  else
    v12 = 0x8000000100ECEE60;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.itemSharing(_:), v1);
  swift_bridgeObjectRetain(v9);
  v13 = static LocalizationUtility.localizedString(key:table:)(v11, v12, v4);
  v15 = v14;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
  v16 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v17 = String.init(format:arguments:)(v13, v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_10029D7FC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_10029D804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

unint64_t sub_10029D84C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v0, &v5);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 0x6564496572616873;
  *(_QWORD *)(inited + 40) = 0xEF7265696669746ELL;
  v2 = UUID.uuidString.getter(inited);
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = v3;
  return sub_1006B8B10(inited);
}

uint64_t type metadata accessor for ItemShareRequestReceivedUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4D68;
  if (!qword_1010F4D68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ItemShareRequestReceivedUserNotification);
  return result;
}

_QWORD *sub_10029D920(_WORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    *a1 = *(_WORD *)a2;
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = a3[7];
    v12 = a3[8];
    v13 = (_QWORD *)((char *)v4 + v11);
    v14 = (_QWORD *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (_QWORD *)((char *)v4 + v12);
    v17 = (_QWORD *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
  }
  return v4;
}

uint64_t sub_10029D9F4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

_WORD *sub_10029DA5C(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = a3[7];
  v11 = a3[8];
  v12 = (_QWORD *)((char *)a1 + v10);
  v13 = (_QWORD *)((char *)a2 + v10);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (_QWORD *)((char *)a1 + v11);
  v16 = (_QWORD *)((char *)a2 + v11);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  return a1;
}

_BYTE *sub_10029DB04(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  a1[1] = a2[1];
  v6 = a3[6];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

_WORD *sub_10029DBDC(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

_WORD *sub_10029DC68(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (uint64_t *)((char *)a2 + v10);
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  v16 = a3[8];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v20 = *v18;
  v19 = v18[1];
  v21 = v17[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

uint64_t sub_10029DD18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10029DD24);
}

uint64_t sub_10029DD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10029DDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10029DDB4);
}

uint64_t sub_10029DDB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10029DE34(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E2FED0;
  v4[1] = &unk_100E2FEE8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_100E2FF00;
    v4[4] = &unk_100E2FF00;
    v4[5] = &unk_100E2FF18;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for MessagingAccount(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for MessagingAccount(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for MessagingAccount(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessoryManufacturerNameResponsePayload()
{
  return &type metadata for AccessoryManufacturerNameResponsePayload;
}

uint64_t sub_10029DF70@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_10029E110(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10029DF98(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v2 = *v1;
  v3 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v14, v4, v5);
  v6 = String.utf8Data.getter(v2, v3);
  v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  v9 = v15;
  v10 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v11 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v13, &type metadata for Data, v11, v9, v10);
  sub_10001BC14(v6, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

unint64_t sub_10029E05C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10029E088();
  result = sub_10029E0CC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10029E088()
{
  unint64_t result;

  result = qword_1010F4DB0;
  if (!qword_1010F4DB0)
  {
    result = swift_getWitnessTable(byte_100E2FF6C, &type metadata for AccessoryManufacturerNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F4DB0);
  }
  return result;
}

unint64_t sub_10029E0CC()
{
  unint64_t result;

  result = qword_1010F4DB8;
  if (!qword_1010F4DB8)
  {
    result = swift_getWitnessTable(byte_100E2FF94, &type metadata for AccessoryManufacturerNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F4DB8);
  }
  return result;
}

uint64_t sub_10029E110(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v18, v3, v4);
  v5 = v19;
  v6 = v20;
  v7 = sub_10009F5D0((uint64_t)v18, v19);
  v8 = dispatch thunk of BinaryDecodingContaining.decode()(v5, v6);
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    sub_100035530();
    v12 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
    if (v13)
    {
      v7 = v12;
      sub_10001BC14(v10, v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v7;
    }
    v7 = type metadata accessor for BinaryEncodingError(0);
    v15 = sub_1001120A4();
    swift_allocError(v7, v15, 0, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v16, enum case for BinaryEncodingError.encodingError(_:), v7);
    swift_willThrow(v17);
    sub_10001BC14(v10, v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

uint64_t sub_10029E264(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10029E294 + 4 * byte_100E2FFE0[a1]))(0x6449616E6D66, 0xE600000000000000);
}

unint64_t sub_10029E294()
{
  return 0xD000000000000010;
}

uint64_t sub_10029E2B0()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10029E2D0()
{
  return 1684628325;
}

uint64_t sub_10029E2E0()
{
  return 0x644970696863;
}

uint64_t sub_10029E2F0()
{
  return 0x657261776D726966;
}

uint64_t sub_10029E314()
{
  return 0x44746375646F7270;
}

uint64_t sub_10029E334(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F4FB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1002A5114();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryUnpairData.CodingKeys, &type metadata for AccessoryUnpairData.CodingKeys, v11, v9, v10);
  v41 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v41, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AccessoryUnpairData(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v40 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v40, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v39 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v39, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v38 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v38, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    v37 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v37, v5);
    v27 = (uint64_t *)(v3 + v14[9]);
    v28 = *v27;
    v29 = v27[1];
    v36 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v36, v5);
    v30 = (uint64_t *)(v3 + v14[10]);
    v31 = *v30;
    v32 = v30[1];
    v35 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v35, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10029E57C()
{
  unsigned __int8 *v0;

  return sub_10029E264(*v0);
}

uint64_t sub_10029E584@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002A2F7C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029E5A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A5114();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029E5D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A5114();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10029E5F8(_QWORD *a1)
{
  return sub_10029E334(a1);
}

uint64_t sub_10029E60C()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100ECF260, 0);
  qword_1010F4DC0 = result;
  qword_1010F4DC8 = v1;
  return result;
}

id sub_10029E648()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_10029E6B0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  void (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;

  v83 = a2;
  v84 = a3;
  v79 = *v3;
  v80 = a1;
  v81 = sub_10001A9A8(&qword_1010F4EE0);
  __chkstk_darwin(v81);
  v82 = (char **)((char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v78 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v77 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v73);
  v74 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v72 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessoryPairingLockCheckEndPoint(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v72 - v24;
  v26 = static os_log_type_t.default.getter(v23);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v27 = qword_1011B7DF0;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v29 = swift_allocObject(v28, 72, 7);
  *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v29 + 56) = &type metadata for String;
  *(_QWORD *)(v29 + 64) = sub_10001AA00();
  *(_QWORD *)(v29 + 32) = 0xD000000000000036;
  *(_QWORD *)(v29 + 40) = 0x8000000100ECF0D0;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "%@", 2, 2, v29);
  swift_bridgeObjectRelease();
  v30 = enum case for FMNAccountType.accessory(_:);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v31(v18, enum case for FMNAccountType.accessory(_:), v15);
  v32 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v32, 56, 7);
  *(_QWORD *)v25 = sub_100C511C4((uint64_t)v18);
  v31(&v25[*(int *)(v19 + 20)], v30, v15);
  v33 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
  v34 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
  v35 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v14);
  v36 = type metadata accessor for ServerInteractionController(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  sub_10005972C((uint64_t)v25, (uint64_t)v22, type metadata accessor for AccessoryPairingLockCheckEndPoint);
  v38 = sub_10041D7F4((uint64_t)v22, v35, v37);
  sub_1000126B0((uint64_t)v25, type metadata accessor for AccessoryPairingLockCheckEndPoint);
  v39 = v85;
  v40 = sub_10029E648();
  v41 = sub_100362120();

  if (v41 && (v43 = sub_100362238(), v45 = v44, v41, v45))
  {
    v46 = sub_10001F6FC();
    v47 = v72;
    static DispatchQoS.unspecified.getter(v46);
    v87 = _swiftEmptyArrayStorage;
    v48 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
    v50 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
    v51 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v87, v49, v50, v73, v48);
    v52 = v77;
    (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v77, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v76);
    v53 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x8000000100ECF140, v47, v51, v52, 0);
    v54 = type metadata accessor for TaskPriority(0);
    v55 = (uint64_t)v78;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v78, 1, 1, v54);
    v56 = swift_allocObject(&unk_101065350, 240, 7);
    *(_QWORD *)(v56 + 16) = 0;
    *(_QWORD *)(v56 + 24) = 0;
    v57 = v80;
    v58 = *(_OWORD *)(v80 + 112);
    *(_OWORD *)(v56 + 128) = *(_OWORD *)(v80 + 96);
    *(_OWORD *)(v56 + 144) = v58;
    *(_OWORD *)(v56 + 160) = *(_OWORD *)(v57 + 128);
    v59 = *(_OWORD *)(v57 + 48);
    *(_OWORD *)(v56 + 64) = *(_OWORD *)(v57 + 32);
    *(_OWORD *)(v56 + 80) = v59;
    v60 = *(_OWORD *)(v57 + 80);
    *(_OWORD *)(v56 + 96) = *(_OWORD *)(v57 + 64);
    *(_OWORD *)(v56 + 112) = v60;
    v61 = *(_OWORD *)(v57 + 16);
    *(_OWORD *)(v56 + 32) = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 48) = v61;
    *(_QWORD *)(v56 + 176) = v43;
    *(_QWORD *)(v56 + 184) = v45;
    *(_QWORD *)(v56 + 192) = v39;
    *(_QWORD *)(v56 + 200) = v53;
    v62 = v84;
    *(_QWORD *)(v56 + 208) = v83;
    *(_QWORD *)(v56 + 216) = v62;
    v63 = v79;
    *(_QWORD *)(v56 + 224) = v38;
    *(_QWORD *)(v56 + 232) = v63;
    sub_1002A3C80((uint64_t *)v57);
    swift_retain();
    swift_retain();
    sub_100691AC0(v55, (uint64_t)&unk_1010F4EF0, v56);
    return swift_release();
  }
  else
  {
    v65 = static os_log_type_t.error.getter(v42);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, qword_1011B7D88, "Unable to retrieve masked identifier", 36, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0);
    v67 = v66;
    v86 = 1;
    v68 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v69 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v87, &v86, v68, v67, v69);
    v70 = v81;
    v71 = (uint64_t)v82;
    *v82 = v87;
    swift_storeEnumTagMultiPayload(v71, v70, 1);
    v83(v71);
    swift_release();
    return sub_100004048(v71, &qword_1010F4EE0);
  }
}

uint64_t sub_10029ED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 160) = v15;
  *(_QWORD *)(v8 + 168) = v16;
  *(_OWORD *)(v8 + 144) = v14;
  *(_QWORD *)(v8 + 128) = a7;
  *(_QWORD *)(v8 + 136) = a8;
  *(_QWORD *)(v8 + 112) = a5;
  *(_QWORD *)(v8 + 120) = a6;
  *(_QWORD *)(v8 + 104) = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v8 + 176) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 184) = v10;
  *(_QWORD *)(v8 + 192) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v8 + 200) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 208) = v12;
  *(_QWORD *)(v8 + 216) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10029EE18, 0, 0);
}

uint64_t sub_10029EE18()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (uint64_t *)v0[13];
  v2 = *(_QWORD *)(v0[16] + 16);
  swift_bridgeObjectRetain(v0[15]);
  swift_retain();
  sub_1002A3C80(v1);
  v5 = (char *)&dword_10111CE40 + dword_10111CE40;
  v3 = (_QWORD *)swift_task_alloc(unk_10111CE44);
  v0[28] = v3;
  *v3 = v0;
  v3[1] = sub_10029EEA4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v5)(v0[13], v0[14], v0[15], v2);
}

uint64_t sub_10029EEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[28];
  v4[29] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10029EF08, 0, 0);
}

uint64_t sub_10029EF08(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1[29];
  if (v2)
  {
    v3 = v1[10];
    v4 = v1[11];
    v5 = (_QWORD *)v1[20];
    v6 = v1[18];
    v7 = v1[19];
    v8 = (void *)v1[17];
    v35 = v1[16];
    v37 = v1[21];
    v9 = v1[13];
    swift_bridgeObjectRetain(v2);
    sub_10001BBBC(v3, v4);
    sub_10034C2C0(v2, v3, v4, 0, v5);
    sub_100153D94(v2, v3, v4);
    v10 = (_QWORD *)swift_allocObject(&unk_1010653C8, 40, 7);
    v10[2] = v8;
    v10[3] = v6;
    v10[4] = v7;
    v11 = v8;
    swift_retain();
    Future.addFailure(block:)(sub_1002A3D7C, v10);
    swift_release();
    swift_release();
    v12 = swift_allocObject(&unk_1010653F0, 200, 7);
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v6;
    *(_QWORD *)(v12 + 32) = v7;
    *(_QWORD *)(v12 + 40) = v35;
    *(_OWORD *)(v12 + 48) = *(_OWORD *)v9;
    v13 = *(_OWORD *)(v9 + 16);
    v14 = *(_OWORD *)(v9 + 32);
    v15 = *(_OWORD *)(v9 + 64);
    *(_OWORD *)(v12 + 96) = *(_OWORD *)(v9 + 48);
    *(_OWORD *)(v12 + 112) = v15;
    *(_OWORD *)(v12 + 64) = v13;
    *(_OWORD *)(v12 + 80) = v14;
    v16 = *(_OWORD *)(v9 + 80);
    v17 = *(_OWORD *)(v9 + 96);
    v18 = *(_OWORD *)(v9 + 128);
    *(_OWORD *)(v12 + 160) = *(_OWORD *)(v9 + 112);
    *(_OWORD *)(v12 + 176) = v18;
    *(_OWORD *)(v12 + 128) = v16;
    *(_OWORD *)(v12 + 144) = v17;
    *(_QWORD *)(v12 + 192) = v37;
    sub_1002A3C80((uint64_t *)v9);
    v19 = v11;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1002A3E14, v12);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v2, v3, v4);
  }
  else
  {
    v20 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v21 = v1[27];
    v22 = v1[24];
    v36 = v1[26];
    v38 = v1[25];
    v23 = v1[22];
    v34 = v1[23];
    v24 = v1[18];
    v25 = v1[19];
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7DF0, "Could not create pairing lock request", 37, 2, _swiftEmptyArrayStorage);
    v26 = swift_allocObject(&unk_101065378, 32, 7);
    *(_QWORD *)(v26 + 16) = v24;
    *(_QWORD *)(v26 + 24) = v25;
    v1[6] = sub_1002A5300;
    v1[7] = v26;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_101065390;
    v27 = _Block_copy(v1 + 2);
    v28 = swift_retain();
    static DispatchQoS.unspecified.getter(v28);
    v1[12] = _swiftEmptyArrayStorage;
    v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v30, v31, v23, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v22, v27);
    _Block_release(v27);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v21, v38);
    swift_release();
  }
  v32 = v1[24];
  swift_task_dealloc(v1[27]);
  swift_task_dealloc(v32);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_10029F268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v29 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  v10 = __chkstk_darwin(v30);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Error in verify pairing request. Error - %@", 43, 2, v16);
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_1010655A8, 32, 7);
  *(_QWORD *)(v21 + 16) = v29;
  *(_QWORD *)(v21 + 24) = a4;
  aBlock[4] = sub_1002A3FDC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010655C0;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_10029F52C(void (*a1)(_QWORD *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v7 = sub_10001A9A8(a3);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SPPairingSessionError(0);
  v11 = v10;
  v15 = a4;
  v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v13 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v12, v11, v13);
  *v9 = v16;
  swift_storeEnumTagMultiPayload(v9, v7, 1);
  a1(v9);
  return sub_100004048((uint64_t)v9, a3);
}

uint64_t sub_10029F638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  os_log_type_t v37;
  NSObject *v38;
  uint8_t *v39;
  void **v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void **v45;
  os_log_type_t v46;
  NSObject *v47;
  uint8_t *v48;
  void **v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  __CFString *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint8_t *v139;
  os_log_t v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  _QWORD *v156;
  void **aBlock;
  uint64_t v158;
  uint64_t (*v159)(uint64_t);
  void *v160;
  uint64_t (*v161)();
  uint64_t v162;

  v144 = a6;
  v148 = a3;
  v149 = a4;
  v150 = a2;
  v155 = type metadata accessor for DispatchWorkItemFlags(0);
  v151 = *(_QWORD *)(v155 - 8);
  __chkstk_darwin(v155);
  v152 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v153 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v154 = (char *)&v139 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  v142 = *(_QWORD *)(v145 - 8);
  v10 = *(_QWORD *)(v142 + 64);
  v11 = __chkstk_darwin(v145);
  v143 = (uint64_t)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v146 = (uint8_t **)((char *)&v139 - v12);
  v13 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v139 - v22;
  v24 = __chkstk_darwin(v21);
  v26 = (char *)&v139 - v25;
  v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v24);
  if (v27 == 409)
  {
    v37 = static os_log_type_t.error.getter(409);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v38 = qword_1011B7DF0;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v23, a1, v16);
    if (os_log_type_enabled(v38, v37))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void **)swift_slowAlloc(32, -1);
      v147 = v8;
      v41 = v40;
      aBlock = v40;
      *(_DWORD *)v39 = 136446210;
      v42 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v16, v42);
      v156 = (_QWORD *)sub_100016940(v43, v44, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &aBlock, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
      _os_log_impl((void *)&_mh_execute_header, v38, v37, "Linked to another Apple ID. %{public}s", v39, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      v45 = v41;
      v8 = v147;
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v23, v16);
    }
    v77 = swift_allocObject(&unk_101065468, 32, 7);
    v78 = v149;
    *(_QWORD *)(v77 + 16) = v148;
    *(_QWORD *)(v77 + 24) = v78;
    v161 = sub_1002A3E28;
    v162 = v77;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v79 = &unk_101065480;
    goto LABEL_23;
  }
  if (v27 != 200)
  {
    v46 = static os_log_type_t.error.getter(v27);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v47 = qword_1011B7DF0;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
    if (os_log_type_enabled(v47, v46))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (void **)swift_slowAlloc(32, -1);
      v147 = v8;
      v50 = v49;
      aBlock = v49;
      *(_DWORD *)v48 = 136446210;
      v51 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v16, v51);
      v156 = (_QWORD *)sub_100016940(v52, v53, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &aBlock, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      _os_log_impl((void *)&_mh_execute_header, v47, v46, "Pairing lock failed: %{public}s", v48, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v54 = v50;
      v8 = v147;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    }
    v80 = swift_allocObject(&unk_101065418, 32, 7);
    v81 = v149;
    *(_QWORD *)(v80 + 16) = v148;
    *(_QWORD *)(v80 + 24) = v81;
    v161 = sub_1002A5300;
    v162 = v80;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v79 = &unk_101065430;
LABEL_23:
    v159 = sub_100016FB8;
    v160 = v79;
    v82 = _Block_copy(&aBlock);
    v83 = swift_retain();
    v84 = v154;
    static DispatchQoS.unspecified.getter(v83);
    v156 = _swiftEmptyArrayStorage;
    v85 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v86 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v87 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v88 = v152;
    v89 = v86;
    v90 = v155;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v156, v89, v87, v155, v85);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v84, v88, v82);
    _Block_release(v82);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v88, v90);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v84, v8);
    return swift_release();
  }
  v147 = v8;
  v28 = static os_log_type_t.default.getter(200);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v29 = qword_1011B7DF0;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v26, a1, v16);
  if (os_log_type_enabled(v29, v28))
  {
    v30 = swift_slowAlloc(12, -1);
    v140 = v29;
    v31 = (uint8_t *)v30;
    v141 = (void **)swift_slowAlloc(32, -1);
    aBlock = v141;
    *(_DWORD *)v31 = 136446210;
    v139 = v31 + 4;
    v32 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v16, v32);
    v156 = (_QWORD *)sub_100016940(v33, v34, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v156, &aBlock, v139, v31 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v16);
    _os_log_impl((void *)&_mh_execute_header, v140, v28, "Pairing success: %{public}s", v31, 0xCu);
    v35 = v141;
    swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v36 = swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    v36 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v26, v16);
  }
  v55 = FMNServerInteractionController.FMNResponseFields.data.getter(v36);
  v57 = v56;
  static String.Encoding.utf8.getter(v55);
  v58 = String.init(data:encoding:)(v55, v57, v15);
  v60 = v59;
  v61 = sub_10001BC14(v55, v57);
  v62 = v147;
  if (v60)
  {
    v63 = static os_log_type_t.info.getter(v61);
    v64 = qword_1011B7DF0;
    v65 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v66 = swift_allocObject(v65, 72, 7);
    *(_OWORD *)(v66 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v66 + 56) = &type metadata for String;
    *(_QWORD *)(v66 + 64) = sub_10001AA00();
    *(_QWORD *)(v66 + 32) = v58;
    *(_QWORD *)(v66 + 40) = v60;
    os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v64, "response data: %@", 17, 2, v66);
    swift_bridgeObjectRelease();
  }
  v67 = type metadata accessor for JSONDecoder(0);
  v68 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  v69 = JSONDecoder.init()(v68);
  v70 = FMNServerInteractionController.FMNResponseFields.data.getter(v69);
  v72 = v71;
  v73 = sub_100006204(&qword_1010F4EF8, type metadata accessor for AccessoryPairingLockCheckResponse, (uint64_t)&unk_100E61178);
  v74 = v145;
  v75 = v146;
  v76 = v145;
  v145 = v69;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v74, v70, v72, v76, v73);
  v92 = sub_10001BC14(v70, v72);
  if (qword_1010E9AF0 != -1)
    v92 = swift_once(&qword_1010E9AF0, sub_10029E60C);
  v93 = qword_1010F4DC8;
  if ((unint64_t)qword_1010F4DC8 >> 60 == 15)
  {
    v94 = static os_log_type_t.error.getter(v92);
    os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, qword_1011B7DF0, "Missing SignatureVerificationKey!", 33, 2, _swiftEmptyArrayStorage);
    v95 = swift_allocObject(&unk_101065508, 32, 7);
    v96 = v149;
    *(_QWORD *)(v95 + 16) = v148;
    *(_QWORD *)(v95 + 24) = v96;
    v161 = sub_1002A3E94;
    v162 = v95;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_100016FB8;
    v160 = &unk_101065520;
    v97 = _Block_copy(&aBlock);
    v98 = swift_retain();
    v99 = (uint64_t)v75;
    v100 = v154;
    static DispatchQoS.unspecified.getter(v98);
    v156 = _swiftEmptyArrayStorage;
    v101 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v102 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v103 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v104 = v152;
    v105 = v102;
    v106 = v155;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v156, v105, v103, v155, v101);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v100, v104, v97);
    swift_release();
    _Block_release(v97);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v104, v106);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v100, v62);
    sub_1000126B0(v99, type metadata accessor for AccessoryPairingLockCheckResponse);
  }
  else
  {
    v107 = (_QWORD *)qword_1010F4DC0;
    sub_10001BD08(qword_1010F4DC0, qword_1010F4DC8);
    v108 = sub_1002A328C(v144, v75);
    v110 = v109;
    v111 = v75[2];
    v112 = v75[3];
    sub_10001BBBC(v111, v112);
    v113 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    v144 = v107;
    v114 = (uint64_t)v107;
    v115 = v110;
    v116 = v108;
    v117 = sub_1007DFE84(v114, v93, v108, v115, v111, v112, v113);

    v118 = sub_10001BC14(v111, v112);
    v119 = static os_log_type_t.default.getter(v118);
    v120 = qword_1011B7DF0;
    v121 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v122 = swift_allocObject(v121, 72, 7);
    *(_OWORD *)(v122 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v122 + 56) = &type metadata for Bool;
    *(_QWORD *)(v122 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v122 + 32) = v117 & 1;
    os_log(_:dso:log:_:_:)(v119, &_mh_execute_header, v120, "Signature S2 verified? %d", (_DWORD)v139);
    swift_bridgeObjectRelease();
    v123 = (uint64_t)v146;
    v124 = v143;
    sub_10005972C((uint64_t)v146, v143, type metadata accessor for AccessoryPairingLockCheckResponse);
    v125 = *(unsigned __int8 *)(v142 + 80);
    v126 = (v125 + 32) & ~v125;
    v127 = swift_allocObject(&unk_101065558, v126 + v10, v125 | 7);
    v128 = v149;
    *(_QWORD *)(v127 + 16) = v148;
    *(_QWORD *)(v127 + 24) = v128;
    sub_1000126EC(v124, v127 + v126, type metadata accessor for AccessoryPairingLockCheckResponse);
    v161 = sub_1002A3F74;
    v162 = v127;
    aBlock = _NSConcreteStackBlock;
    v158 = 1107296256;
    v159 = sub_100016FB8;
    v160 = &unk_101065570;
    v129 = _Block_copy(&aBlock);
    v130 = swift_retain();
    v131 = v154;
    static DispatchQoS.unspecified.getter(v130);
    v156 = _swiftEmptyArrayStorage;
    v132 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v133 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v134 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v135 = v116;
    v136 = v152;
    v137 = v133;
    v138 = v155;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v156, v137, v134, v155, v132);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v131, v136, v129);
    _Block_release(v129);
    sub_10001BC14(v135, v115);
    sub_10001EF3C((uint64_t)v144, v93);
    swift_release();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v136, v138);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v131, v147);
    sub_1000126B0(v123, type metadata accessor for AccessoryPairingLockCheckResponse);
  }
  return swift_release();
}

uint64_t sub_1002A0654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;

  v83 = a4;
  v81 = a3;
  v78 = a2;
  v68 = a1;
  v4 = type metadata accessor for AccessoryUnpairData(0);
  v76 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v77 = v5;
  v79 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v80 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v73 = *(_QWORD *)(v8 - 8);
  v74 = v8;
  __chkstk_darwin(v8);
  v75 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v71);
  v72 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v70 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v13);
  v69 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessoryUnpairEndpoint(0);
  v20 = __chkstk_darwin(v19);
  v67 = (uint64_t)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v67 - v22;
  v24 = sub_10001A9A8(&qword_1010ED860);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = static os_log_type_t.default.getter(v25);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v29 = qword_1011B7DF0;
  v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v31 = swift_allocObject(v30, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  sub_1002A380C(v68, (uint64_t)v27);
  v32 = String.init<A>(describing:)(v27, v24);
  v34 = v33;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = sub_10001AA00();
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Removing pairing lock for UUID - %@", 35, 2, v31);
  swift_bridgeObjectRelease();
  v35 = enum case for FMNAccountType.accessory(_:);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v36(v18, enum case for FMNAccountType.accessory(_:), v15);
  v37 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v37, 56, 7);
  *(_QWORD *)v23 = sub_100C511C4((uint64_t)v18);
  v36(&v23[*(int *)(v19 + 20)], v35, v15);
  v38 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v39 = type metadata accessor for FMNMockingPreferences(0);
  v40 = v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v69, 1, 1, v39);
  v41 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v40);
  v42 = type metadata accessor for ServerInteractionController(0);
  v43 = swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
  v44 = v67;
  sub_10005972C((uint64_t)v23, v67, type metadata accessor for AccessoryUnpairEndpoint);
  v69 = (char *)sub_10041D7BC(v44, v41, v43);
  sub_1000126B0((uint64_t)v23, type metadata accessor for AccessoryUnpairEndpoint);
  v45 = sub_10001F6FC();
  v46 = v70;
  static DispatchQoS.unspecified.getter(v45);
  v84 = _swiftEmptyArrayStorage;
  v47 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v49 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  v50 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v48, v49, v71, v47);
  v51 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v75, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v74);
  v52 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x8000000100ECF000, v46, v50, v51, 0);
  v53 = type metadata accessor for TaskPriority(0);
  v54 = (uint64_t)v80;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v80, 1, 1, v53);
  v55 = v79;
  sub_10005972C(v78, v79, type metadata accessor for AccessoryUnpairData);
  v56 = *(unsigned __int8 *)(v76 + 80);
  v57 = (v56 + 32) & ~v56;
  v58 = (v77 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8;
  v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8;
  v61 = (v60 + 23) & 0xFFFFFFFFFFFFFFF8;
  v62 = swift_allocObject(&unk_101065198, v61 + 8, v56 | 7);
  *(_QWORD *)(v62 + 16) = 0;
  *(_QWORD *)(v62 + 24) = 0;
  sub_1000126EC(v55, v62 + v57, type metadata accessor for AccessoryUnpairData);
  v63 = v81;
  *(_QWORD *)(v62 + v58) = v82;
  *(_QWORD *)(v62 + v59) = v52;
  v64 = (_QWORD *)(v62 + v60);
  v65 = v83;
  *v64 = v63;
  v64[1] = v65;
  *(_QWORD *)(v62 + v61) = v69;
  swift_retain();
  swift_retain();
  sub_100691AC0(v54, (uint64_t)&unk_1010F4ED8, v62);
  return swift_release();
}

uint64_t sub_1002A0C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8[17] = a8;
  v8[18] = v15;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryUnpairData(0);
  v8[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002A0D1C, 0, 0);
}

uint64_t sub_1002A0D1C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = v0[14];
  sub_10005972C(v0[13], v0[25], type metadata accessor for AccessoryUnpairData);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = unk_1010F3F54;
  v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F3F50 + dword_1010F3F50);
  swift_retain();
  v4 = (uint64_t **)swift_task_alloc(v3);
  v0[26] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_1002A0DA8;
  return v6(v0[25], v2);
}

uint64_t sub_1002A0DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[26];
  v4[27] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1002A0E0C, 0, 0);
}

uint64_t sub_1002A0E0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1[27];
  if (v2)
  {
    v3 = v1[10];
    v4 = v1[11];
    v6 = v1[17];
    v5 = (_QWORD *)v1[18];
    v7 = (void *)v1[15];
    v8 = v1[16];
    swift_bridgeObjectRetain(v1[27]);
    sub_10001BBBC(v3, v4);
    sub_10034C550(v2, v3, v4, 0, v5);
    sub_100153D94(v2, v3, v4);
    v9 = (_QWORD *)swift_allocObject(&unk_101065210, 40, 7);
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v6;
    v10 = v7;
    swift_retain();
    Future.addFailure(block:)(sub_1002A3A9C, v9);
    swift_release();
    swift_release();
    v11 = (_QWORD *)swift_allocObject(&unk_101065238, 40, 7);
    v11[2] = v10;
    v11[3] = v8;
    v11[4] = v6;
    v12 = v10;
    swift_retain();
    Future.addSuccess(block:)(sub_1002A3AAC, v11);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v2, v3, v4);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v14 = v1[24];
    v15 = v1[21];
    v29 = v1[23];
    v30 = v1[22];
    v16 = v1[19];
    v28 = v1[20];
    v17 = v1[16];
    v18 = v1[17];
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DF0, "Could not create unpair command", 31, 2, _swiftEmptyArrayStorage);
    v19 = swift_allocObject(&unk_1010651C0, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v1[6] = sub_1002A3A7C;
    v1[7] = v19;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_1010651D8;
    v20 = _Block_copy(v1 + 2);
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v1[12] = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v23, v24, v16, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v15, v20);
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v14, v30);
    swift_release();
  }
  v25 = v1[24];
  v26 = v1[21];
  swift_task_dealloc(v1[25]);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1002A1130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v28 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Remove pairing lock command failed. Error - %@", 46, 2, v16);
  swift_bridgeObjectRelease();
  v21 = (_QWORD *)swift_allocObject(&unk_101065300, 40, 7);
  v21[2] = v28;
  v21[3] = a4;
  v21[4] = a1;
  aBlock[4] = sub_100016FE4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101065318;
  v22 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1002A1400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void **aBlock;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  void *v44;
  void *v45;
  uint64_t v46;

  v39 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v11);
  v15 = static os_log_type_t.default.getter(v14);
  if (v14 == 200)
  {
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7DF0, "Remove pairing lock was successful.", 35, 2, _swiftEmptyArrayStorage);
    v16 = swift_allocObject(&unk_1010652B0, 32, 7);
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    v45 = sub_1002A3AD4;
    v46 = v16;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100016FB8;
    v44 = &unk_1010652C8;
    v17 = _Block_copy(&aBlock);
    v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    v40 = _swiftEmptyArrayStorage;
    v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v20, v21, v6, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v10);
  }
  else
  {
    v36 = v7;
    v37 = v10;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v22 = qword_1011B7DF0;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    aBlock = (void **)FMNServerInteractionController.FMNResponseFields.statusCode.getter(v24);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v27 = v26;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_10001AA00();
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v22, "Remove pairing lock failed. Status code - %@", 44, 2, v24);
    swift_bridgeObjectRelease();
    v28 = swift_allocObject(&unk_101065260, 32, 7);
    *(_QWORD *)(v28 + 16) = a3;
    *(_QWORD *)(v28 + 24) = a4;
    v45 = sub_1002A3AB8;
    v46 = v28;
    aBlock = _NSConcreteStackBlock;
    v42 = 1107296256;
    v43 = sub_100016FB8;
    v44 = &unk_101065278;
    v29 = _Block_copy(&aBlock);
    v30 = swift_retain();
    static DispatchQoS.unspecified.getter(v30);
    v40 = _swiftEmptyArrayStorage;
    v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v33 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v32, v33, v6, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v29);
    _Block_release(v29);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v37);
  }
  return swift_release();
}

void sub_1002A183C(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  type metadata accessor for SPPairingSessionError(0);
  v6 = v5;
  v10 = a3;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  v9 = v11;
  a1(v11);

}

uint64_t sub_1002A18E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v57 = a2;
  v58 = a3;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v55 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v53 = *(_QWORD *)(v6 - 8);
  v54 = v6;
  __chkstk_darwin(v6);
  v52 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v51);
  v50 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for FMNAccountType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for AccessoryPairingLockAckEndpoint(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v50 - v23;
  v25 = enum case for FMNAccountType.accessory(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v26(v18, enum case for FMNAccountType.accessory(_:), v15);
  v27 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v27, 56, 7);
  *(_QWORD *)v24 = sub_100C511C4((uint64_t)v18);
  v26(&v24[*(int *)(v19 + 20)], v25, v15);
  v28 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v14, 1, 1, v29);
  v30 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v14);
  v31 = type metadata accessor for ServerInteractionController(0);
  v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  sub_10005972C((uint64_t)v24, (uint64_t)v22, type metadata accessor for AccessoryPairingLockAckEndpoint);
  v33 = sub_10041D810((uint64_t)v22, v30, v32);
  sub_1000126B0((uint64_t)v24, type metadata accessor for AccessoryPairingLockAckEndpoint);
  v34 = sub_10001F6FC();
  static DispatchQoS.unspecified.getter(v34);
  v59 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v37 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  v38 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v36, v37, v51, v35);
  v39 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v54);
  v40 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0x69726961506B6361, 0xEF6575657551676ELL, v11, v38, v39, 0);
  v41 = type metadata accessor for TaskPriority(0);
  v42 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v55, 1, 1, v41);
  v43 = swift_allocObject(&unk_101064F90, 184, 7);
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  v44 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v43 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v43 + 112) = v44;
  *(_OWORD *)(v43 + 128) = *(_OWORD *)(a1 + 96);
  v45 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v43 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v43 + 48) = v45;
  v46 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v43 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v43 + 80) = v46;
  v47 = v57;
  *(_QWORD *)(v43 + 144) = v56;
  *(_QWORD *)(v43 + 152) = v40;
  v48 = v58;
  *(_QWORD *)(v43 + 160) = v47;
  *(_QWORD *)(v43 + 168) = v48;
  *(_QWORD *)(v43 + 176) = v33;
  sub_1002A2EE0((_QWORD *)a1);
  swift_retain();
  swift_retain();
  sub_100691AC0(v42, (uint64_t)&unk_1010F4EB8, v43);
  return swift_release();
}

uint64_t sub_1002A1D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[17] = a8;
  v8[18] = v14;
  v8[15] = a6;
  v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[20] = v10;
  v8[21] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[23] = v12;
  v8[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002A1DF4, 0, 0);
}

uint64_t sub_1002A1DF4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = (_QWORD *)v0[13];
  v2 = *(_QWORD *)(v0[14] + 16);
  swift_retain();
  sub_1002A2EE0(v1);
  v5 = (char *)&dword_10111FAA0 + dword_10111FAA0;
  v3 = (_QWORD *)swift_task_alloc(unk_10111FAA4);
  v0[25] = v3;
  *v3 = v0;
  v3[1] = sub_1002A1E74;
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(v0[13], v2);
}

uint64_t sub_1002A1E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v5 = v4[25];
  v4[26] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1002A1ED8, 0, 0);
}

uint64_t sub_1002A1ED8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1[26];
  if (v2)
  {
    v3 = v1[10];
    v4 = v1[11];
    v6 = v1[17];
    v5 = (_QWORD *)v1[18];
    v7 = (void *)v1[15];
    v8 = v1[16];
    swift_bridgeObjectRetain(v1[26]);
    sub_10001BBBC(v3, v4);
    sub_10034C7E0(v2, v3, v4, 0, v5);
    sub_100153D94(v2, v3, v4);
    v9 = (_QWORD *)swift_allocObject(&unk_101065008, 40, 7);
    v9[2] = v7;
    v9[3] = v8;
    v9[4] = v6;
    v10 = v7;
    swift_retain();
    Future.addFailure(block:)(sub_1002A36C4, v9);
    swift_release();
    swift_release();
    v11 = (_QWORD *)swift_allocObject(&unk_101065030, 40, 7);
    v11[2] = v10;
    v11[3] = v8;
    v11[4] = v6;
    v12 = v10;
    swift_retain();
    Future.addSuccess(block:)(sub_1002A36D4, v11);
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v2, v3, v4);
  }
  else
  {
    v13 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v14 = v1[24];
    v15 = v1[21];
    v28 = v1[23];
    v29 = v1[22];
    v16 = v1[19];
    v27 = v1[20];
    v17 = v1[16];
    v18 = v1[17];
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DF0, "Could not create pairing ack request", 36, 2, _swiftEmptyArrayStorage);
    v19 = swift_allocObject(&unk_101064FB8, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v1[6] = sub_1002A369C;
    v1[7] = v19;
    v1[2] = _NSConcreteStackBlock;
    v1[3] = 1107296256;
    v1[4] = sub_100016FB8;
    v1[5] = &unk_101064FD0;
    v20 = _Block_copy(v1 + 2);
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v1[12] = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 12, v23, v24, v16, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v15, v20);
    _Block_release(v20);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v14, v29);
    swift_release();
  }
  v25 = v1[21];
  swift_task_dealloc(v1[24]);
  swift_task_dealloc(v25);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_1002A21F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[6];

  v29 = a3;
  v32 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v30 - 8);
  v10 = __chkstk_darwin(v30);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.error.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  aBlock[0] = a1;
  swift_errorRetain(a1);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Ack pairing failed. Error - %@", 30, 2, v16);
  swift_bridgeObjectRelease();
  v21 = swift_allocObject(&unk_101065148, 32, 7);
  *(_QWORD *)(v21 + 16) = v29;
  *(_QWORD *)(v21 + 24) = a4;
  aBlock[4] = sub_1002A37AC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101065160;
  v22 = _Block_copy(aBlock);
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v33 = _swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v25, v26, v6, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1002A24B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  void **aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  uint64_t (*v83)();
  uint64_t v84;

  v70 = a3;
  v71 = a4;
  v72 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v74 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v73 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessoryPairingLockAckResponse(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v64 - v13;
  v15 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v12);
  v16 = static os_log_type_t.default.getter(v15);
  if (v15 == 200)
  {
    v68 = v14;
    v69 = v4;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v17 = qword_1011B7DF0;
    v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v67, 72, 7);
    v66 = xmmword_100E22B00;
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v19 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
    v20 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    v23 = v22;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    v65 = sub_10001AA00();
    *(_QWORD *)(v18 + 64) = v65;
    *(_QWORD *)(v18 + 32) = v21;
    *(_QWORD *)(v18 + 40) = v23;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Ack pairing success: %@", 23, 2, v18);
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for JSONDecoder(0);
    v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v26 = JSONDecoder.init()(v25);
    v27 = FMNServerInteractionController.FMNResponseFields.data.getter(v26);
    v29 = v28;
    v30 = sub_100006204(&qword_1010F4EC0, type metadata accessor for AccessoryPairingLockAckResponse, (uint64_t)&unk_100E475F8);
    v31 = (uint64_t)v68;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v27, v29, v7, v30);
    sub_10001BC14(v27, v29);
    sub_10005972C(v31, (uint64_t)v11, type metadata accessor for AccessoryPairingLockAckResponse);
    v50 = *(unsigned __int8 *)(v8 + 80);
    v51 = (v50 + 32) & ~v50;
    v52 = swift_allocObject(&unk_1010650F8, v51 + v9, v50 | 7);
    v53 = v31;
    v54 = v71;
    *(_QWORD *)(v52 + 16) = v70;
    *(_QWORD *)(v52 + 24) = v54;
    sub_1000126EC((uint64_t)v11, v52 + v51, type metadata accessor for AccessoryPairingLockAckResponse);
    v83 = sub_1002A3798;
    v84 = v52;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100016FB8;
    v82 = &unk_101065110;
    v55 = _Block_copy(&aBlock);
    v56 = swift_retain();
    v57 = v73;
    static DispatchQoS.unspecified.getter(v56);
    v78 = _swiftEmptyArrayStorage;
    v58 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v59 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v60 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v61 = v74;
    v62 = v59;
    v63 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v62, v60, v69, v58);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v61, v55);
    _Block_release(v55);
    swift_release();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v61, v63);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v77);
    sub_1000126B0(v53, type metadata accessor for AccessoryPairingLockAckResponse);
  }
  else
  {
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v32 = qword_1011B7DF0;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v35 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
    v36 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
    v39 = v38;
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10001AA00();
    *(_QWORD *)(v34 + 32) = v37;
    *(_QWORD *)(v34 + 40) = v39;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v32, "Ack pairing failed. Response %@", 31, 2, v34);
    swift_bridgeObjectRelease();
    v40 = swift_allocObject(&unk_101065058, 32, 7);
    v41 = v71;
    *(_QWORD *)(v40 + 16) = v70;
    *(_QWORD *)(v40 + 24) = v41;
    v83 = sub_1002A52FC;
    v84 = v40;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100016FB8;
    v82 = &unk_101065070;
    v42 = _Block_copy(&aBlock);
    v43 = swift_retain();
    v44 = v73;
    static DispatchQoS.unspecified.getter(v43);
    v78 = _swiftEmptyArrayStorage;
    v45 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v47 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    v48 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v46, v47, v4, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v42);
    _Block_release(v42);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v48, v4);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v77);
  }
  return swift_release();
}

uint64_t sub_1002A2CD8(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v9 = sub_10001A9A8(a4);
  __chkstk_darwin(v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a3, (uint64_t)v11, a5);
  swift_storeEnumTagMultiPayload(v11, v9, 0);
  a1(v11);
  return sub_100004048((uint64_t)v11, a4);
}

uint64_t type metadata accessor for AccessoryPairingValidator()
{
  return objc_opt_self(_TtC12searchpartyd25AccessoryPairingValidator);
}

uint64_t sub_1002A2DB0()
{
  uint64_t v0;
  unint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 136);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 128), v1);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1002A2E3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[18];
  v7 = v1[19];
  v8 = v1[20];
  v9 = v1[21];
  v10 = (_QWORD *)swift_task_alloc(dword_1010F4EB4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_1002A1D60(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

_QWORD *sub_1002A2EE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  swift_bridgeObjectRetain(v8);
  sub_10001BD08(v9, v10);
  return a1;
}

uint64_t sub_1002A2F7C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC5420;
    if (a2 == 0x8000000100EC5420)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC5420, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v10 = 0xE600000000000000;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v11 = 0xEF6E6F6973726556;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461)
  {
    swift_bridgeObjectRelease(0xEB00000000617461);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44746375646F7270, 0xEB00000000617461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1002A328C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;

  v61 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v4 = qword_1011B7DF0;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v7 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  v8 = UUID.data.getter(v7);
  v10 = v9;
  v11 = Data.hexString.getter(v8, v9);
  v13 = v12;
  sub_10001BC14(v8, v10);
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v14 = sub_10001AA00();
  *(_QWORD *)(v6 + 64) = v14;
  *(_QWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 40) = v13;
  os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v4, "fmnaId: %@", 10, 2, v6);
  v15 = swift_bridgeObjectRelease();
  v16 = static os_log_type_t.debug.getter(v15);
  v17 = qword_1011B7DF0;
  v18 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v20 = a2[6];
  v19 = a2[7];
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = v14;
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v19;
  *(_QWORD *)&v21 = swift_bridgeObjectRetain(v19).n128_u64[0];
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "fmnaSerialNumber: %@", 20, 2, v18, v21);
  v22 = swift_bridgeObjectRelease();
  v23 = static os_log_type_t.debug.getter(v22);
  v24 = qword_1011B7DF0;
  v25 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
  v60 = a1[11];
  v62 = a1[10];
  v26 = Data.hexString.getter(v62, v60);
  *(_QWORD *)(v25 + 56) = &type metadata for String;
  *(_QWORD *)(v25 + 64) = v14;
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v27;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "nonce: %@", 9, 2, v25);
  v28 = swift_bridgeObjectRelease();
  v29 = static os_log_type_t.debug.getter(v28);
  v30 = qword_1011B7DF0;
  v31 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
  v58 = a2[1];
  v59 = *a2;
  v32 = Data.hexString.getter(*a2, v58);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = v14;
  *(_QWORD *)(v31 + 32) = v32;
  *(_QWORD *)(v31 + 40) = v33;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Seed: %@", 8, 2, v31);
  v34 = swift_bridgeObjectRelease();
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = qword_1011B7DF0;
  v37 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  v56 = a1[1];
  v57 = *a1;
  v38 = Data.hexString.getter(*a1, v56);
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = v14;
  *(_QWORD *)(v37 + 32) = v38;
  *(_QWORD *)(v37 + 40) = v39;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "H1 (hashed C2): %@", 18, 2, v37);
  v40 = swift_bridgeObjectRelease();
  v41 = static os_log_type_t.debug.getter(v40);
  v42 = qword_1011B7DF0;
  v43 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
  v44 = Data.hexString.getter(a2[2], a2[3]);
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  *(_QWORD *)(v43 + 64) = v14;
  *(_QWORD *)(v43 + 32) = v44;
  *(_QWORD *)(v43 + 40) = v45;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "S2: %@", 6, 2, v43);
  v46 = swift_bridgeObjectRelease();
  v47 = static os_log_type_t.debug.getter(v46);
  v48 = qword_1011B7DF0;
  v49 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
  v51 = a1[12];
  v50 = a1[13];
  v52 = Data.hexString.getter(v51, v50);
  *(_QWORD *)(v49 + 56) = &type metadata for String;
  *(_QWORD *)(v49 + 64) = v14;
  *(_QWORD *)(v49 + 32) = v52;
  *(_QWORD *)(v49 + 40) = v53;
  os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "E1: %@", 6, 2, v49);
  v54 = swift_bridgeObjectRelease();
  v63 = UUID.data.getter(v54);
  Data.append(_:)(v62, v60);
  Data.append(_:)(v59, v58);
  Data.append(_:)(v57, v56);
  Data.append(_:)(v51, v50);
  Data.append(_:)(a2[4], a2[5]);
  return v63;
}

uint64_t sub_1002A369C()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EC8, 6);
}

uint64_t sub_1002A36C4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002A21F4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002A36D4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002A24B8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002A36E0()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EC8, 1);
}

uint64_t sub_1002A3704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for AccessoryPairingLockAckResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002A3798()
{
  return sub_1002A3F88(type metadata accessor for AccessoryPairingLockAckResponse, &qword_1010F4EC8);
}

uint64_t sub_1002A37AC()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EC8, 5);
}

uint64_t type metadata accessor for AccessoryUnpairData(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F4F58;
  if (!qword_1010F4F58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryUnpairData);
  return result;
}

uint64_t sub_1002A380C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002A3854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for AccessoryUnpairData(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = v2 | 7;
  v5 = (((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t sub_1002A3990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for AccessoryUnpairData(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = *(_QWORD *)(v1 + v6);
  v13 = *(_QWORD *)(v1 + v7);
  v14 = *(_QWORD *)(v1 + v8);
  v15 = *(_QWORD *)(v1 + v8 + 8);
  v16 = (_QWORD *)swift_task_alloc(dword_1010F4ED4);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_100004A74;
  return sub_1002A0C68(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1002A3A7C()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 6);
}

uint64_t sub_1002A3A9C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002A1130(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002A3AAC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002A1400(a1, v1[2], v1[3], v1[4]);
}

void sub_1002A3AB8()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_1002A3AD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1002A3AF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002A3B24()
{
  uint64_t v0;
  unint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 168);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 160), v1);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, 240, 7);
}

uint64_t sub_1002A3BC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  v4 = v1[3];
  v11 = v1[2];
  v5 = v1[22];
  v6 = v1[23];
  v7 = v1[24];
  v8 = v1[25];
  v9 = (_QWORD *)swift_task_alloc(dword_1010F4EEC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10029ED78(a1, v11, v4, (uint64_t)(v1 + 4), v5, v6, v7, v8);
}

uint64_t *sub_1002A3C80(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v14 = a1[16];
  v12 = a1[15];
  v13 = a1[17];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v10);
  swift_bridgeObjectRetain(v12);
  sub_10001BD08(v14, v13);
  return a1;
}

uint64_t sub_1002A3D50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002A3D7C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10029F268(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002A3D88()
{
  uint64_t v0;
  unint64_t v1;

  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 184);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 176), v1);
  return swift_deallocObject(v0, 200, 7);
}

uint64_t sub_1002A3E14(uint64_t a1)
{
  uint64_t *v1;

  return sub_10029F638(a1, v1[2], v1[3], v1[4], v1[5], v1 + 6);
}

uint64_t sub_1002A3E28()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EE0, 18);
}

uint64_t sub_1002A3E4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002A3E70()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EE0, 1);
}

uint64_t sub_1002A3E94()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EE0, 3);
}

uint64_t sub_1002A3EB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  sub_10001BC14(*(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 24));
  sub_10001BC14(*(_QWORD *)(v7 + 32), *(_QWORD *)(v7 + 40));
  swift_bridgeObjectRelease();
  v8 = v0 + v4 + *(int *)(v1 + 32);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002A3F74()
{
  return sub_1002A3F88(type metadata accessor for AccessoryPairingLockCheckResponse, &qword_1010F4EE0);
}

uint64_t sub_1002A3F88(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_1002A2CD8(*(void (**)(char *))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5), a2, a1);
}

uint64_t sub_1002A3FDC()
{
  uint64_t v0;

  return sub_10029F52C(*(void (**)(_QWORD *))(v0 + 16), *(_QWORD *)(v0 + 24), &qword_1010F4EE0, 5);
}

uint64_t destroy for AccessoryPairingCheckData(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[10], a1[11]);
  sub_10001BC14(a1[12], a1[13]);
  result = swift_bridgeObjectRelease();
  v3 = a1[17];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[16], v3);
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingCheckData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[10];
  v12 = a2[11];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v13 = a2[12];
  v14 = a2[13];
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  v15 = a2[15];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = v15;
  v16 = a2 + 16;
  v17 = a2[17];
  swift_bridgeObjectRetain(v15);
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v16;
  }
  else
  {
    v18 = *(_QWORD *)v16;
    sub_10001BBBC(v18, v17);
    *(_QWORD *)(a1 + 128) = v18;
    *(_QWORD *)(a1 + 136) = v17;
  }
  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCheckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  a1[4] = a2[4];
  v12 = a2[5];
  a1[5] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v13 = a2[7];
  a1[7] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  v14 = a2[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = a2[10];
  v16 = a2[11];
  sub_10001BBBC(v15, v16);
  v17 = a1[10];
  v18 = a1[11];
  a1[10] = v15;
  a1[11] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[12];
  v20 = a2[13];
  sub_10001BBBC(v19, v20);
  v21 = a1[12];
  v22 = a1[13];
  a1[12] = v19;
  a1[13] = v20;
  sub_10001BC14(v21, v22);
  a1[14] = a2[14];
  v23 = a2[15];
  a1[15] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  v24 = a2 + 16;
  v25 = a2[17];
  if ((unint64_t)a1[17] >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      v27 = *v24;
      sub_10001BBBC(*v24, v25);
      v28 = a1[16];
      v29 = a1[17];
      a1[16] = v27;
      a1[17] = v25;
      sub_10001BC14(v28, v29);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 16));
    goto LABEL_6;
  }
  if (v25 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 8) = *(_OWORD *)v24;
    return a1;
  }
  v26 = *v24;
  sub_10001BBBC(*v24, v25);
  a1[16] = v26;
  a1[17] = v25;
  return a1;
}

uint64_t *assignWithTake for AccessoryPairingCheckData(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(a2 + 72);
  a1[8] = *(_QWORD *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  v11 = a1[10];
  v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v11, v12);
  v13 = a1[12];
  v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v13, v14);
  v15 = *(_QWORD *)(a2 + 120);
  a1[14] = *(_QWORD *)(a2 + 112);
  a1[15] = v15;
  swift_bridgeObjectRelease();
  v16 = (uint64_t *)(a2 + 128);
  v17 = a1[17];
  if (v17 >> 60 != 15)
  {
    v18 = *(_QWORD *)(a2 + 136);
    if (v18 >> 60 != 15)
    {
      v19 = a1[16];
      a1[16] = *v16;
      a1[17] = v18;
      sub_10001BC14(v19, v17);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 16));
  }
  *((_OWORD *)a1 + 8) = *(_OWORD *)v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCheckData()
{
  return &type metadata for AccessoryPairingCheckData;
}

uint64_t destroy for AccessoryPairingAckData(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[6], a1[7]);
  sub_10001BC14(a1[8], a1[9]);
  result = swift_bridgeObjectRelease();
  v3 = a1[13];
  if (v3 >> 60 != 15)
    return sub_10001BC14(a1[12], v3);
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingAckData(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[6];
  v8 = a2[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v7, v8);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = a2[8];
  v10 = a2[9];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v11;
  v12 = a2 + 12;
  v13 = a2[13];
  swift_bridgeObjectRetain(v11);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *v12;
  }
  else
  {
    v14 = *(_QWORD *)v12;
    sub_10001BBBC(v14, v13);
    *(_QWORD *)(a1 + 96) = v14;
    *(_QWORD *)(a1 + 104) = v13;
  }
  return a1;
}

_QWORD *assignWithCopy for AccessoryPairingAckData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  v6 = a2[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a2[6];
  v8 = a2[7];
  sub_10001BBBC(v7, v8);
  v9 = a1[6];
  v10 = a1[7];
  a1[6] = v7;
  a1[7] = v8;
  sub_10001BC14(v9, v10);
  v11 = a2[8];
  v12 = a2[9];
  sub_10001BBBC(v11, v12);
  v13 = a1[8];
  v14 = a1[9];
  a1[8] = v11;
  a1[9] = v12;
  sub_10001BC14(v13, v14);
  a1[10] = a2[10];
  v15 = a2[11];
  a1[11] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = a2 + 12;
  v17 = a2[13];
  if (a1[13] >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      v19 = *v16;
      sub_10001BBBC(*v16, v17);
      v20 = a1[12];
      v21 = a1[13];
      a1[12] = v19;
      a1[13] = v17;
      sub_10001BC14(v20, v21);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 12));
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 6) = *(_OWORD *)v16;
    return a1;
  }
  v18 = *v16;
  sub_10001BBBC(*v16, v17);
  a1[12] = v18;
  a1[13] = v17;
  return a1;
}

_QWORD *assignWithTake for AccessoryPairingAckData(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a1[6];
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v7, v8);
  v9 = a1[8];
  v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v9, v10);
  v11 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  v12 = (_QWORD *)(a2 + 96);
  v13 = a1[13];
  if (v13 >> 60 != 15)
  {
    v14 = *(_QWORD *)(a2 + 104);
    if (v14 >> 60 != 15)
    {
      v15 = a1[12];
      a1[12] = *v12;
      a1[13] = v14;
      sub_10001BC14(v15, v13);
      return a1;
    }
    sub_10015B504((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *(_OWORD *)v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingAckData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingAckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingAckData()
{
  return &type metadata for AccessoryPairingAckData;
}

uint64_t *sub_1002A48E8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v32);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (uint64_t *)((char *)a1 + v25);
    v30 = (uint64_t *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
  }
  return a1;
}

uint64_t sub_1002A4A04(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_1002A4A9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(a1 + v24);
  v29 = (_QWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t sub_1002A4B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[10];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_1002A4CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_1002A4D70(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[10];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  return a1;
}

uint64_t sub_1002A4E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002A4E74);
}

uint64_t sub_1002A4E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002A4EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002A4F00);
}

uint64_t sub_1002A4F00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1002A4F7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E30088;
    v4[2] = &unk_100E30088;
    v4[3] = &unk_100E30088;
    v4[4] = &unk_100E30088;
    v4[5] = &unk_100E300A0;
    v4[6] = &unk_100E300A0;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingValidator.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002A504C + 4 * byte_100E2FFEC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002A5080 + 4 * byte_100E2FFE7[v4]))();
}

uint64_t sub_1002A5080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A5088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A5090);
  return result;
}

uint64_t sub_1002A509C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A50A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002A50A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A50B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingValidator.Error()
{
  return &type metadata for AccessoryPairingValidator.Error;
}

unint64_t sub_1002A50D0()
{
  unint64_t result;

  result = qword_1010F4FA8;
  if (!qword_1010F4FA8)
  {
    result = swift_getWitnessTable("qW#", &type metadata for AccessoryPairingValidator.Error);
    atomic_store(result, (unint64_t *)&qword_1010F4FA8);
  }
  return result;
}

unint64_t sub_1002A5114()
{
  unint64_t result;

  result = qword_1010F4FB8;
  if (!qword_1010F4FB8)
  {
    result = swift_getWitnessTable("}V#", &type metadata for AccessoryUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryUnpairData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1002A51A4 + 4 * byte_100E2FFF6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1002A51D8 + 4 * byte_100E2FFF1[v4]))();
}

uint64_t sub_1002A51D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A51E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A51E8);
  return result;
}

uint64_t sub_1002A51F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A51FCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1002A5200(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A5208(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryUnpairData.CodingKeys()
{
  return &type metadata for AccessoryUnpairData.CodingKeys;
}

unint64_t sub_1002A5228()
{
  unint64_t result;

  result = qword_1010F4FC0;
  if (!qword_1010F4FC0)
  {
    result = swift_getWitnessTable("EV#", &type metadata for AccessoryUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FC0);
  }
  return result;
}

unint64_t sub_1002A5270()
{
  unint64_t result;

  result = qword_1010F4FC8;
  if (!qword_1010F4FC8)
  {
    result = swift_getWitnessTable(byte_100E3019C, &type metadata for AccessoryUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FC8);
  }
  return result;
}

unint64_t sub_1002A52B8()
{
  unint64_t result;

  result = qword_1010F4FD0;
  if (!qword_1010F4FD0)
  {
    result = swift_getWitnessTable(byte_100E301C4, &type metadata for AccessoryUnpairData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryRegisterIntent()
{
  return &type metadata for FindMyAccessoryRegisterIntent;
}

unint64_t sub_1002A53B0()
{
  return 0xD000000000000012;
}

uint64_t sub_1002A53CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002A57FC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1002A53F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A5644();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A541C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A5644();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A5444@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_10001A9A8(&qword_1010F4FD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1002A5644();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryRegisterIntent.CodingKeys, &type metadata for FindMyAccessoryRegisterIntent.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_1002A555C(_QWORD *a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_10001A9A8(&qword_1010F4FE8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_1002A5644();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryRegisterIntent.CodingKeys, &type metadata for FindMyAccessoryRegisterIntent.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v11, v3, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1002A5644()
{
  unint64_t result;

  result = qword_1010F4FE0;
  if (!qword_1010F4FE0)
  {
    result = swift_getWitnessTable("EV#", &type metadata for FindMyAccessoryRegisterIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FE0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FindMyAccessoryRegisterIntent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002A56C8 + 4 * byte_100E302B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002A56E8 + 4 * byte_100E302B5[v4]))();
}

_BYTE *sub_1002A56C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002A56E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002A56F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002A56F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002A5700(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002A5708(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryRegisterIntent.CodingKeys()
{
  return &type metadata for FindMyAccessoryRegisterIntent.CodingKeys;
}

unint64_t sub_1002A5728()
{
  unint64_t result;

  result = qword_1010F4FF0;
  if (!qword_1010F4FF0)
  {
    result = swift_getWitnessTable("]V#", &type metadata for FindMyAccessoryRegisterIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FF0);
  }
  return result;
}

unint64_t sub_1002A5770()
{
  unint64_t result;

  result = qword_1010F4FF8;
  if (!qword_1010F4FF8)
  {
    result = swift_getWitnessTable(byte_100E3033C, &type metadata for FindMyAccessoryRegisterIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F4FF8);
  }
  return result;
}

unint64_t sub_1002A57B8()
{
  unint64_t result;

  result = qword_1010F5000;
  if (!qword_1010F5000)
  {
    result = swift_getWitnessTable(byte_100E30364, &type metadata for FindMyAccessoryRegisterIntent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F5000);
  }
  return result;
}

uint64_t sub_1002A57FC(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000100ECF2F0)
  {
    swift_bridgeObjectRelease(0x8000000100ECF2F0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100ECF2F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1002A5880(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  dispatch thunk of BinaryEncoding.container()(v20, v10, v11);
  v18 = a2;
  v19 = a3;
  v12 = v21;
  v13 = v22;
  sub_10009F5D0((uint64_t)v20, v21);
  v14 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v18, &type metadata for Data, v14, v12, v13);
  if (!v5)
  {
    v18 = a4;
    v19 = a5;
    v15 = v21;
    v16 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v18, &type metadata for Data, v14, v15, v16);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

uint64_t sub_1002A597C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1002A6054(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002A59A8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1002A5880(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_1002A59C4(char *a1, char *a2)
{
  return word_100E307B6[*a1] == word_100E307B6[*a2];
}

Swift::Int sub_1002A59E8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_100E307B6[v1]);
  return Hasher._finalize()();
}

void sub_1002A5A34()
{
  char *v0;

  Hasher._combine(_:)(word_100E307B6[*v0]);
}

Swift::Int sub_1002A5A68()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_100E307B6[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1002A5AB0@<X0>(__int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002A6184(*a1);
  *a2 = result;
  return result;
}

void sub_1002A5AD8(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_100E307B6[*v1];
}

uint64_t sub_1002A5AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002A6ABC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002A5B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002A6ABC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002A5B98()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002A5BC8 + 4 * byte_100E30450[*v0]))(0x737365636375732ELL, 0xE800000000000000);
}

uint64_t sub_1002A5BC8()
{
  return 0x64696C61766E692ELL;
}

uint64_t sub_1002A5C3C(unsigned __int8 a1)
{
  int v2;
  uint64_t result;

  v2 = a1;
  result = 0x737365636375732ELL;
  if (v2 != 6)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_1002A5CAC()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v3;

  v0._countAndFlagsBits = 0x64696C61766E692ELL;
  v0._object = (void *)0xED00006574617453;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xED00006574617453);
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3;
}

uint64_t sub_1002A5D54(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v5 = sub_10001A9A8(&qword_1010F5030);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1002A69F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryCommandResponse.CodingKeys, &type metadata for AccessoryCommandResponse.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v5);
  if (!v2)
  {
    v16 = BYTE2(a2);
    v15 = 1;
    v12 = sub_1002A6A78();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v15, v5, &type metadata for AccessoryCommandResponse.RawResponseStatus, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002A5E80()
{
  _BYTE *v0;

  if (*v0)
    return 0x7574617453776172;
  else
    return 0x65646F63706FLL;
}

uint64_t sub_1002A5EBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002A6794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A5EE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A69F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A5F08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002A69F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A5F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1002A6888(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_1002A5F60(_QWORD *a1)
{
  unsigned __int16 *v1;

  return sub_1002A5D54(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

uint64_t sub_1002A5F80(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1002A5F8C + dword_1002A6034[a2 >> 62]))();
}

uint64_t sub_1002A5F9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 2)
  {
    __break(1u);
    JUMPOUT(0x1002A6030);
  }
  return ((uint64_t (*)(void))((char *)&loc_1002A5FD8 + dword_1002A6044[a4 >> 62]))();
}

uint64_t sub_1002A6054(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  v5 = v16;
  v6 = v17;
  v7 = sub_10009F5D0((uint64_t)v15, v16);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v5, v6);
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    v12 = v16;
    v13 = v17;
    sub_10009F5D0((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v12, v13);
    v7 = sub_1002A5F80(v10, v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

uint64_t sub_1002A6184(__int16 a1)
{
  if ((unsigned __int16)(a1 + 1) >= 6u)
    return 6;
  else
    return (0x40302010005uLL >> (8 * (a1 + 1)));
}

uint64_t sub_1002A61B4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001BBBC(a1, a2);
  static Endianness.current.getter(v11);
  sub_100112060();
  v12 = FixedWidthInteger.init(data:ofEndianness:)((uint64_t *)((char *)&v16 + 4), a1, a2, v10);
  if (BYTE6(v16) == 1)
  {
    sub_10001BC14(a3, a4);
    sub_10001BC14(a1, a2);
  }
  else
  {
    v13 = WORD2(v16);
    static Endianness.current.getter(v12);
    FixedWidthInteger.init(data:ofEndianness:)(&v16, a3, a4, v10);
    sub_10001BC14(a1, a2);
    if (BYTE2(v16) != 1 && (unsigned __int16)(v16 + 1) <= 5u)
      return dword_100E307C4[(__int16)(v16 + 1)] | v13;
  }
  return 393216;
}

uint64_t destroy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_10001BBBC(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_10001BBBC(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10001BC14(v10, v11);
  return a1;
}

uint64_t *assignWithTake for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponsePayload()
{
  return &type metadata for AccessoryCommandResponsePayload;
}

unint64_t sub_1002A64F0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1002A651C();
  result = sub_1001E9B18();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002A651C()
{
  unint64_t result;

  result = qword_1010F5008;
  if (!qword_1010F5008)
  {
    result = swift_getWitnessTable(byte_100E304CC, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F5008);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryCommandResponse(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryCommandResponse(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFB)
  {
    if ((a2 + 33554181) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 6;
  v6 = v4 - 6;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554181) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFA)
    v3 = 0;
  if (a2 > 0xFA)
  {
    *(_WORD *)result = a2 - 251;
    *(_BYTE *)(result + 2) = (a2 - 251) >> 16;
    if (v3)
    {
      v4 = ((a2 - 251) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 5;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse()
{
  return &type metadata for AccessoryCommandResponse;
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse.RawResponseStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1002A66CC + 4 * byte_100E30461[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1002A6700 + 4 * byte_100E3045C[v4]))();
}

uint64_t sub_1002A6700(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A6708(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A6710);
  return result;
}

uint64_t sub_1002A671C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A6724);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1002A6728(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A6730(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.RawResponseStatus()
{
  return &type metadata for AccessoryCommandResponse.RawResponseStatus;
}

unint64_t sub_1002A6750()
{
  unint64_t result;

  result = qword_1010F5010;
  if (!qword_1010F5010)
  {
    result = swift_getWitnessTable("AW#", &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1010F5010);
  }
  return result;
}

uint64_t sub_1002A6794(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65646F63706FLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F63706FLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7574617453776172 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease(0xE900000000000073);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7574617453776172, 0xE900000000000073, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1002A6888(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unint64_t v11;
  int v12;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = sub_10001A9A8(&qword_1010F5018);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1002A69F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryCommandResponse.CodingKeys, &type metadata for AccessoryCommandResponse.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  BYTE1(v16) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v16 + 1, v3);
  v15 = 1;
  v11 = sub_1002A6A34();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for AccessoryCommandResponse.RawResponseStatus, &v15, v3, &type metadata for AccessoryCommandResponse.RawResponseStatus, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = v16;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (v12 << 16);
}

unint64_t sub_1002A69F0()
{
  unint64_t result;

  result = qword_1010F5020;
  if (!qword_1010F5020)
  {
    result = swift_getWitnessTable("%V#", &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F5020);
  }
  return result;
}

unint64_t sub_1002A6A34()
{
  unint64_t result;

  result = qword_1010F5028;
  if (!qword_1010F5028)
  {
    result = swift_getWitnessTable(byte_100E30588, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1010F5028);
  }
  return result;
}

unint64_t sub_1002A6A78()
{
  unint64_t result;

  result = qword_1010F5038;
  if (!qword_1010F5038)
  {
    result = swift_getWitnessTable(byte_100E30560, &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1010F5038);
  }
  return result;
}

unint64_t sub_1002A6ABC()
{
  unint64_t result;

  result = qword_1010F5040;
  if (!qword_1010F5040)
  {
    result = swift_getWitnessTable("qW#", &type metadata for AccessoryCommandResponse.RawResponseStatus);
    atomic_store(result, (unint64_t *)&qword_1010F5040);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002A6B4C + 4 * byte_100E3046B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002A6B80 + 4 * byte_100E30466[v4]))();
}

uint64_t sub_1002A6B80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A6B88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A6B90);
  return result;
}

uint64_t sub_1002A6B9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A6BA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002A6BA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A6BB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.CodingKeys()
{
  return &type metadata for AccessoryCommandResponse.CodingKeys;
}

unint64_t sub_1002A6BD0()
{
  unint64_t result;

  result = qword_1010F5048;
  if (!qword_1010F5048)
  {
    result = swift_getWitnessTable("-V#", &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F5048);
  }
  return result;
}

unint64_t sub_1002A6C18()
{
  unint64_t result;

  result = qword_1010F5050;
  if (!qword_1010F5050)
  {
    result = swift_getWitnessTable(byte_100E306AC, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F5050);
  }
  return result;
}

unint64_t sub_1002A6C60()
{
  unint64_t result;

  result = qword_1010F5058;
  if (!qword_1010F5058)
  {
    result = swift_getWitnessTable(byte_100E306D4, &type metadata for AccessoryCommandResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F5058);
  }
  return result;
}

uint64_t sub_1002A6CA4(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  ValueMetadata *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _QWORD v34[3];
  ValueMetadata *v35;
  unint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7 = type metadata accessor for Endianness(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = dispatch thunk of BinaryEncoding.container()(v37, v11, v12);
  if (a3 == 2)
  {
    if (a2)
      v14 = 19;
    else
      v14 = 8;
  }
  else if (a3 == 1)
  {
    v14 = 40;
  }
  else
  {
    v14 = 0;
  }
  LOBYTE(v40) = v14;
  static Endianness.current.getter(v13);
  v15 = sub_100059570();
  FixedWidthInteger.convert(to:)(v34, v10, &type metadata for UInt8, v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LOBYTE(v40) = v34[0];
  v16 = v38;
  v17 = v39;
  sub_10009F5D0((uint64_t)v37, v38);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v40, &type metadata for UInt8, v15, v16, v17);
  if (!v3)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        v35 = &type metadata for AirTagSoundStartPayload;
        v36 = sub_1002A7758();
        v34[0] = a2;
        swift_bridgeObjectRetain(a2);
        v18 = sub_10001A9A8(&qword_1010EC540);
        if ((swift_dynamicCast(&v40, v34, v18, &type metadata for AirTagSoundStartPayload, 6) & 1) != 0)
        {
          v34[0] = v40;
          v19 = v38;
          v20 = v39;
          sub_10009F5D0((uint64_t)v37, v38);
          v21 = sub_1002A77E0();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v34, &type metadata for AirTagSoundStartPayload, v21, v19, v20);
          swift_bridgeObjectRelease();
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        }
LABEL_18:
        v30 = sub_1002A7714();
        v31 = swift_allocError(&type metadata for AirTagCommand.AirTagCommandError, v30, 0, 0);
        *v32 = 0;
        swift_willThrow(v31);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      }
      v28 = sub_10005A334();
      v35 = &type metadata for AccessoryGenericPayload;
      v36 = v28;
      v29 = sub_10001A9A8(&qword_1010EC540);
      if (!swift_dynamicCast(v29, v34, v29, &type metadata for AccessoryGenericPayload, 6))
        goto LABEL_18;
      v23 = v38;
      v24 = v39;
      sub_10009F5D0((uint64_t)v37, v38);
      v27 = (_QWORD *)sub_1001E99C4();
      v26 = &type metadata for AccessoryGenericPayload;
      v25 = (unint64_t)v27;
    }
    else
    {
      v35 = &type metadata for AirTagCommandAckPayload;
      v36 = sub_1002A779C();
      LOBYTE(v34[0]) = a2;
      v22 = sub_10001A9A8(&qword_1010EC540);
      if ((swift_dynamicCast(&v40, v34, v22, &type metadata for AirTagCommandAckPayload, 6) & 1) == 0)
        goto LABEL_18;
      LOBYTE(v34[0]) = v40;
      v23 = v38;
      v24 = v39;
      sub_10009F5D0((uint64_t)v37, v38);
      v25 = sub_1002A7824();
      v26 = &type metadata for AirTagCommandAckPayload;
      v27 = v34;
    }
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v27, v26, v25, v23, v24);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
}

char *sub_1002A6FCC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *result;
  char v5;

  result = sub_1002A74A0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1002A6FF8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1002A6CA4(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

uint64_t sub_1002A7014(unsigned __int8 a1)
{
  if (a1 > 0x12u)
  {
    if (a1 != 19)
    {
      if (a1 == 40)
        return 1;
      return 4;
    }
    return 3;
  }
  else
  {
    if (a1)
    {
      if (a1 == 8)
        return 2;
      return 4;
    }
    return 0;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1002A70A8(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1002A70A8(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t destroy for AirTagCommand(uint64_t a1)
{
  return sub_1002A70CC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_1002A70CC(uint64_t result, char a2)
{
  if (a2 == 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t assignWithCopy for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_1002A70A8(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_1002A70CC(v5, v6);
  return a1;
}

uint64_t assignWithTake for AirTagCommand(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_1002A70CC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirTagCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_1002A71F8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_1002A7210(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand()
{
  return &type metadata for AirTagCommand;
}

void sub_1002A7238(char a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_100030784(a2, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_1002A7288()
{
  uint64_t v1;
  _QWORD *v2;
  ValueMetadata *DynamicType;
  _QWORD v4[3];
  uint64_t v5;

  sub_10005A334();
  v1 = v5;
  v2 = sub_10001AA44(v4, v5);
  DynamicType = (ValueMetadata *)swift_getDynamicType(v2, v1, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
  if (&type metadata for AccessoryGenericPayload == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1002A7480);
}

char *sub_1002A74A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  ValueMetadata *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v26, v7, v8);
  v9 = v27;
  v10 = v28;
  v11 = (char *)sub_10009F5D0((uint64_t)v26, v27);
  v12 = sub_100059570();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v24, &type metadata for UInt8, &type metadata for UInt8, v12, v9, v10);
  if (!v1)
  {
    v29 = v24[0];
    static Endianness.current.getter(v13);
    v11 = &v29;
    FixedWidthInteger.convert(to:)(v25, v6, &type metadata for UInt8, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (LOBYTE(v25[0]) > 0x12u)
    {
      if (LOBYTE(v25[0]) == 19)
      {
        v14 = &type metadata for AccessoryGenericPayload;
        v15 = 3;
        goto LABEL_11;
      }
      if (LOBYTE(v25[0]) == 40)
      {
        v14 = &type metadata for AirTagSoundStartPayload;
        v15 = 1;
        v16 = sub_1002A7758();
LABEL_12:
        v17 = v16;
        goto LABEL_13;
      }
    }
    else
    {
      if (!LOBYTE(v25[0]))
      {
        v14 = &type metadata for AirTagCommandAckPayload;
        v17 = sub_1002A779C();
        v15 = 0;
LABEL_13:
        sub_100030784((uint64_t)a1, (uint64_t)v24);
        v25[3] = v14;
        v25[4] = v17;
        sub_100018F08(v25);
        dispatch thunk of BinaryDecodable.init(from:)(v24, v14, *(_QWORD *)(v17 + 8));
        sub_100030784((uint64_t)v25, (uint64_t)v24);
        sub_1002A7238(v15, (uint64_t)v24);
        v11 = v18;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        goto LABEL_15;
      }
      if (LOBYTE(v25[0]) == 8)
      {
        v14 = &type metadata for AccessoryGenericPayload;
        v15 = 2;
LABEL_11:
        v16 = sub_10005A334();
        goto LABEL_12;
      }
    }
    v19 = sub_1002A7714();
    v20 = swift_allocError(&type metadata for AirTagCommand.AirTagCommandError, v19, 0, 0);
    *v21 = 1;
    swift_willThrow(v20);
  }
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v11;
}

unint64_t sub_1002A7714()
{
  unint64_t result;

  result = qword_1010F5060;
  if (!qword_1010F5060)
  {
    result = swift_getWitnessTable(byte_100E3092C, &type metadata for AirTagCommand.AirTagCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F5060);
  }
  return result;
}

unint64_t sub_1002A7758()
{
  unint64_t result;

  result = qword_1010F5068;
  if (!qword_1010F5068)
  {
    result = swift_getWitnessTable(byte_100E3DFE8, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1010F5068);
  }
  return result;
}

unint64_t sub_1002A779C()
{
  unint64_t result;

  result = qword_1010F5070;
  if (!qword_1010F5070)
  {
    result = swift_getWitnessTable(a9_1, &type metadata for AirTagCommandAckPayload);
    atomic_store(result, (unint64_t *)&qword_1010F5070);
  }
  return result;
}

unint64_t sub_1002A77E0()
{
  unint64_t result;

  result = qword_1010F5078;
  if (!qword_1010F5078)
  {
    result = swift_getWitnessTable(byte_100E3DFC0, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1010F5078);
  }
  return result;
}

unint64_t sub_1002A7824()
{
  unint64_t result;

  result = qword_1010F5080;
  if (!qword_1010F5080)
  {
    result = swift_getWitnessTable(aQ_7, &type metadata for AirTagCommandAckPayload);
    atomic_store(result, (unint64_t *)&qword_1010F5080);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirTagCommand.AirTagCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002A78B4 + 4 * byte_100E30839[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002A78E8 + 4 * asc_100E30834[v4]))();
}

uint64_t sub_1002A78E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A78F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002A78F8);
  return result;
}

uint64_t sub_1002A7904(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002A790CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002A7910(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002A7918(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand.AirTagCommandError()
{
  return &type metadata for AirTagCommand.AirTagCommandError;
}

unint64_t sub_1002A7938()
{
  unint64_t result;

  result = qword_1010F5088;
  if (!qword_1010F5088)
  {
    result = swift_getWitnessTable("-V#", &type metadata for AirTagCommand.AirTagCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F5088);
  }
  return result;
}

uint64_t sub_1002A7980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6C78);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6C78);
  if (qword_1010E9B00 != -1)
    swift_once(&qword_1010E9B00, sub_1002AABA4);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6C90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1002A7A10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1002A7A28, v0, 0);
}

uint64_t sub_1002A7A28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD **)(v1 + 136);
  v3 = v2[15];
  v4 = v2[16];
  v2[15] = sub_1002AAC24;
  v2[16] = v1;
  swift_retain();
  sub_10001D8A8(v3, v4);
  v5 = v2[17];
  v6 = v2[18];
  v2[17] = sub_1002AAC34;
  v2[18] = v1;
  swift_retain();
  sub_10001D8A8(v5, v6);
  v7 = swift_allocObject(&unk_101065FE8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1002AAC3C;
  *(_QWORD *)(v7 + 24) = v1;
  v8 = v2[19];
  v9 = v2[20];
  v2[19] = sub_1002AAC8C;
  v2[20] = v7;
  swift_retain();
  sub_10001D8A8(v8, v9);
  v10 = v2[21];
  v11 = v2[22];
  v2[21] = sub_1002AACB0;
  v2[22] = v1;
  swift_retain();
  sub_10001D8A8(v10, v11);
  v12 = v2[23];
  v13 = v2[24];
  v2[23] = sub_1002AACD8;
  v2[24] = v1;
  swift_retain();
  sub_10001D8A8(v12, v13);
  v14 = v2[27];
  v15 = v2[28];
  v2[27] = sub_1002AAD00;
  v2[28] = v1;
  swift_retain();
  sub_10001D8A8(v14, v15);
  v16 = v2[29];
  v17 = v2[30];
  v2[29] = sub_1002AAD08;
  v2[30] = v1;
  swift_retain();
  sub_10001D8A8(v16, v17);
  v18 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v19 = (_QWORD *)swift_task_alloc(v18);
  *(_QWORD *)(v0 + 24) = v19;
  *v19 = v0;
  v19[1] = sub_1002A7BC0;
  return unsafeBlocking<A>(_:)(v19, sub_1002AAD10, *(_QWORD *)(v0 + 16), &type metadata for () + 1);
}

uint64_t sub_1002A7BC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 24));
  swift_release();
  return swift_task_switch(sub_1002A7C1C, v1, 0);
}

uint64_t sub_1002A7C1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A7C24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a5;
  v23 = a4;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin();
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Transaction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (char *)swift_allocObject(&unk_101066268, v18 + 24, v16 | 7);
  *((_QWORD *)v19 + 2) = a7;
  *((_QWORD *)v19 + 3) = a1;
  *((_QWORD *)v19 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[v17], v15, v12);
  v20 = &v19[v18];
  *v20 = v23;
  *((_QWORD *)v20 + 1) = v25;
  *((_QWORD *)v20 + 2) = a6;
  swift_retain(a7);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a6);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_1010F52E8, v19);
  return swift_release(v19);
}

uint64_t sub_1002A7D7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = a7;
  v29 = a8;
  v27 = a6;
  v26 = a4;
  v25 = a3;
  v24 = a1;
  v14 = type metadata accessor for MessagingMessageContext(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v30 = type metadata accessor for Transaction(0);
  sub_10005972C(a11, (uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for MessagingMessageContext);
  v17 = *(unsigned __int8 *)(v15 + 80);
  v18 = (v17 + 104) & ~v17;
  v19 = swift_allocObject(&unk_1010661F0, v18 + v16, v17 | 7);
  v20 = v24;
  *(_QWORD *)(v19 + 16) = a12;
  *(_QWORD *)(v19 + 24) = v20;
  *(_QWORD *)(v19 + 32) = a2;
  *(_BYTE *)(v19 + 40) = v25;
  *(_QWORD *)(v19 + 48) = v26;
  *(_QWORD *)(v19 + 56) = a5;
  *(_BYTE *)(v19 + 64) = v27;
  v21 = v29;
  *(_QWORD *)(v19 + 72) = v28;
  *(_QWORD *)(v19 + 80) = v21;
  *(_QWORD *)(v19 + 88) = a9;
  *(_QWORD *)(v19 + 96) = a10;
  sub_1000126EC((uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for MessagingMessageContext);
  swift_retain();
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a5);
  sub_10001BBBC(v21, a9);
  swift_bridgeObjectRetain(a10);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_1010F52B0, v19);
  return swift_release();
}

uint64_t sub_1002A7EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  type metadata accessor for Transaction(0);
  v8 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a1;
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, a4, v8);
  return swift_release(v8);
}

uint64_t sub_1002A7F88(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v23[2];

  v12 = type metadata accessor for BeaconSharingSessionContext(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = type metadata accessor for Transaction(0);
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for BeaconSharingSessionContext);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 24) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_101066088, v19 + 8, v16 | 7);
  *(_QWORD *)(v20 + 16) = a6;
  sub_1000126EC((uint64_t)v15, v20 + v17, type metadata accessor for BeaconSharingSessionContext);
  v21 = v20 + v18;
  *(_BYTE *)v21 = a2;
  *(_QWORD *)(v21 + 8) = a3;
  *(_QWORD *)(v21 + 16) = a4;
  *(_QWORD *)(v20 + v19) = a5;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  swift_retain();
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_1010F5208, v20);
  return swift_release();
}

uint64_t sub_1002A80DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  type metadata accessor for Transaction(0);
  v4 = swift_allocObject(&unk_101066010, 32, 7);
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a1;
  swift_retain(a2);
  swift_retain(a1);
  static Transaction.asyncTask(name:block:)("IDSCallback", 11, 2, &unk_1010F51D8, v4);
  return swift_release(v4);
}

uint64_t sub_1002A8164()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportService_FMD()
{
  return objc_opt_self(_TtC12searchpartyd23IDSTransportService_FMD);
}

uint64_t sub_1002A81C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F50BC);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_1002A7A28, v0, 0);
}

uint64_t sub_1002A8224(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010F51C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_FMD, (uint64_t)&unk_100E30A04);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002A8260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_BYTE *)(v7 + 80) = a5;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a4;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch(sub_1002A8284, 0, 0);
}

uint64_t sub_1002A8284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v6 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 64) = v6;
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(_BYTE *)(v6 + 48) = v3;
  *(_QWORD *)(v6 + 56) = v2;
  *(_QWORD *)(v6 + 64) = v1;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = sub_1002A8338;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F52F8, v6, &type metadata for () + 1);
}

uint64_t sub_1002A8338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

uint64_t sub_1002A8394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v8 + 192) = a8;
  *(_QWORD *)(v8 + 200) = v15;
  *(_BYTE *)(v8 + 264) = a7;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 152) = a2;
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 208) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 216) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 224) = v12;
  *(_QWORD *)(v8 + 232) = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 240) = swift_task_alloc(v13);
  *(_QWORD *)(v8 + 248) = swift_task_alloc(v13);
  return swift_task_switch(sub_1002A8448, a3, 0);
}

uint64_t sub_1002A8448()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 256) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002A848C, 0, 0);
}

void sub_1002A848C()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = 0;
  v49 = (__int128 *)(v0 + 56);
  v50 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v2 + 64);
  v44 = v2 + 64;
  v48 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v48 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v45 = (unint64_t)(63 - v5) >> 6;
  v46 = *(_QWORD *)(v0 + 224) + 7;
  v47 = *(_QWORD *)(v0 + 216);
  while (1)
  {
    if (v6)
    {
      v51 = (v6 - 1) & v6;
      v52 = v1;
      v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v45)
      goto LABEL_31;
    v10 = *(_QWORD *)(v44 + 8 * v9);
    v11 = v1 + 1;
    if (!v10)
    {
      v11 = v1 + 2;
      if (v1 + 2 >= v45)
        goto LABEL_31;
      v10 = *(_QWORD *)(v44 + 8 * v11);
      if (!v10)
      {
        v11 = v1 + 3;
        if (v1 + 3 >= v45)
          goto LABEL_31;
        v10 = *(_QWORD *)(v44 + 8 * v11);
        if (!v10)
        {
          v11 = v1 + 4;
          if (v1 + 4 >= v45)
            goto LABEL_31;
          v10 = *(_QWORD *)(v44 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v51 = (v10 - 1) & v10;
    v52 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    v13 = *(_QWORD *)(v0 + 248);
    v54 = v13;
    v60 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 232);
    v53 = v14;
    v15 = *(_QWORD *)(v0 + 208);
    v57 = *(_BYTE *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 184);
    v58 = *(_QWORD *)(v0 + 192);
    v59 = *(_QWORD *)(v0 + 200);
    v56 = *(_QWORD *)(v0 + 176);
    v55 = *(_QWORD *)(v0 + 168);
    sub_100030784(*(_QWORD *)(v48 + 56) + 40 * v8, (uint64_t)v50);
    v17 = type metadata accessor for TaskPriority(0);
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, 1, 1, v17);
    sub_10000F9FC(v50, (uint64_t)v49);
    v19 = v14;
    v20 = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v19, v16, v15);
    v21 = *(unsigned __int8 *)(v47 + 80);
    v22 = (v21 + 88) & ~v21;
    v23 = (v46 + v22) & 0xFFFFFFFFFFFFFFF8;
    v24 = (_QWORD *)swift_allocObject(&unk_101066290, v23 + 24, v21 | 7);
    v24[2] = 0;
    v25 = v24 + 2;
    v24[3] = 0;
    sub_10000F9FC(v49, (uint64_t)(v24 + 4));
    v24[9] = v55;
    v24[10] = v56;
    v26 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))((char *)v24 + v22, v53, v20);
    v27 = (char *)v24 + v23;
    *v27 = v57;
    *((_QWORD *)v27 + 1) = v58;
    *((_QWORD *)v27 + 2) = v59;
    sub_1002AAE78(v54, v60);
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v60, 1, v17);
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v59);
    v29 = *(_QWORD *)(v0 + 240);
    if ((_DWORD)v18 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 240), &qword_1010F46C0);
      v30 = 0;
    }
    else
    {
      v31 = TaskPriority.rawValue.getter(v28);
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v17);
      v30 = v31;
    }
    v6 = v51;
    v1 = v52;
    v32 = *v25;
    if (*v25)
    {
      v33 = v24[3];
      ObjectType = swift_getObjectType(*v25);
      swift_unknownObjectRetain(v32);
      v35 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v33);
      v37 = v36;
      swift_unknownObjectRelease(v32);
    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    v38 = **(_QWORD **)(v0 + 152);
    v39 = swift_allocObject(&unk_1010662B8, 32, 7);
    *(_QWORD *)(v39 + 16) = &unk_1010F5308;
    *(_QWORD *)(v39 + 24) = v24;
    v40 = v37 | v35;
    if (v37 | v35)
    {
      v40 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v35;
      *(_QWORD *)(v0 + 120) = v37;
    }
    v7 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v40;
    *(_QWORD *)(v0 + 144) = v38;
    swift_task_create(v30 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F5310, v39);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v12 = v1 + 5;
  if (v1 + 5 >= v45)
  {
LABEL_31:
    v41 = *(_QWORD *)(v0 + 248);
    v43 = *(_QWORD *)(v0 + 232);
    v42 = *(_QWORD *)(v0 + 240);
    swift_release();
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v10 = *(_QWORD *)(v44 + 8 * v12);
  if (v10)
  {
    v11 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v45)
      goto LABEL_31;
    v10 = *(_QWORD *)(v44 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002A88EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = v11;
  *(_BYTE *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  return swift_task_switch(sub_1002A8918, 0, 0);
}

uint64_t sub_1002A8918()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_1002A89A4;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), v2, v3);
}

uint64_t sub_1002A89A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1002A89EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 64) = v10;
  *(_BYTE *)(v8 + 113) = a7;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a8;
  *(_BYTE *)(v8 + 112) = a4;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  return swift_task_switch(sub_1002A8A28, 0, 0);
}

uint64_t sub_1002A8A28()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_BYTE *)(v0 + 113);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_BYTE *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 16);
  v12 = *(_OWORD *)(v0 + 56);
  v7 = swift_task_alloc(112);
  *(_QWORD *)(v0 + 96) = v7;
  v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v7 + 16) = v11;
  *(_QWORD *)(v7 + 32) = v6;
  *(_BYTE *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v4;
  *(_QWORD *)(v7 + 56) = v3;
  *(_BYTE *)(v7 + 64) = v2;
  *(_OWORD *)(v7 + 72) = v12;
  *(_QWORD *)(v7 + 88) = v1;
  *(_OWORD *)(v7 + 96) = v8;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 104) = v9;
  *v9 = v0;
  v9[1] = sub_1002A8B10;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F52C0, v7, &type metadata for () + 1);
}

uint64_t sub_1002A8B10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

uint64_t sub_1002A8B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 232) = v17;
  *(_OWORD *)(v8 + 216) = v16;
  *(_OWORD *)(v8 + 200) = v15;
  *(_BYTE *)(v8 + 289) = v14;
  *(_QWORD *)(v8 + 184) = a7;
  *(_QWORD *)(v8 + 192) = a8;
  *(_BYTE *)(v8 + 288) = a6;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 152) = a2;
  *(_QWORD *)(v8 + 160) = a3;
  v10 = *(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8);
  *(_QWORD *)(v8 + 240) = v10;
  v11 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 248) = v11;
  *(_QWORD *)(v8 + 256) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 272) = swift_task_alloc(v12);
  return swift_task_switch(sub_1002A8C34, a3, 0);
}

uint64_t sub_1002A8C34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 280) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002A8C78, 0, 0);
}

void sub_1002A8C78()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 *v45;
  _QWORD *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = 0;
  v44 = (__int128 *)(v0 + 56);
  v45 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v2 + 64);
  v40 = v2 + 64;
  v42 = *(_QWORD *)(v0 + 240);
  v43 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v43 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v41 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v47 = (v6 - 1) & v6;
      v48 = v1;
      v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v41)
      goto LABEL_31;
    v10 = *(_QWORD *)(v40 + 8 * v9);
    v11 = v1 + 1;
    if (!v10)
    {
      v11 = v1 + 2;
      if (v1 + 2 >= v41)
        goto LABEL_31;
      v10 = *(_QWORD *)(v40 + 8 * v11);
      if (!v10)
      {
        v11 = v1 + 3;
        if (v1 + 3 >= v41)
          goto LABEL_31;
        v10 = *(_QWORD *)(v40 + 8 * v11);
        if (!v10)
        {
          v11 = v1 + 4;
          if (v1 + 4 >= v41)
            goto LABEL_31;
          v10 = *(_QWORD *)(v40 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v47 = (v10 - 1) & v10;
    v48 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    v13 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 248);
    v14 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 232);
    v57 = *(_QWORD *)(v0 + 224);
    v58 = *(_QWORD *)(v0 + 264);
    v55 = *(_QWORD *)(v0 + 208);
    v56 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 200);
    v52 = *(_BYTE *)(v0 + 289);
    v18 = *(_QWORD *)(v0 + 176);
    v51 = *(_QWORD *)(v0 + 184);
    v50 = *(_BYTE *)(v0 + 288);
    v49 = *(_QWORD *)(v0 + 168);
    sub_100030784(*(_QWORD *)(v43 + 56) + 40 * v8, (uint64_t)v45);
    v19 = type metadata accessor for TaskPriority(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v13, 1, 1, v19);
    sub_10000F9FC(v45, (uint64_t)v44);
    sub_10005972C(v16, v14, type metadata accessor for MessagingMessageContext);
    v21 = *(unsigned __int8 *)(v42 + 80);
    v22 = (v21 + 152) & ~v21;
    v23 = swift_allocObject(&unk_101066218, v22 + v15, v21 | 7);
    *(_QWORD *)(v23 + 16) = 0;
    v46 = (_QWORD *)(v23 + 16);
    *(_QWORD *)(v23 + 24) = 0;
    sub_10000F9FC(v44, v23 + 32);
    *(_QWORD *)(v23 + 72) = v49;
    *(_QWORD *)(v23 + 80) = v18;
    *(_BYTE *)(v23 + 88) = v50;
    *(_QWORD *)(v23 + 96) = v51;
    *(_QWORD *)(v23 + 104) = v17;
    *(_BYTE *)(v23 + 112) = v52;
    *(_QWORD *)(v23 + 120) = v53;
    *(_QWORD *)(v23 + 128) = v55;
    *(_QWORD *)(v23 + 136) = v56;
    *(_QWORD *)(v23 + 144) = v57;
    sub_1000126EC(v14, v23 + v22, type metadata accessor for MessagingMessageContext);
    sub_1002AAE78(v13, v58);
    v54 = v20;
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v58, 1, v19);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v17);
    sub_10001BBBC(v55, v56);
    swift_bridgeObjectRetain(v57);
    v25 = *(_QWORD *)(v0 + 264);
    if ((_DWORD)v20 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 264), &qword_1010F46C0);
      v26 = 0;
    }
    else
    {
      v27 = TaskPriority.rawValue.getter(v24);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v25, v19);
      v26 = v27;
    }
    v6 = v47;
    v1 = v48;
    v28 = *v46;
    if (*v46)
    {
      v29 = *(_QWORD *)(v23 + 24);
      ObjectType = swift_getObjectType(*v46);
      swift_unknownObjectRetain(v28);
      v31 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v29);
      v33 = v32;
      swift_unknownObjectRelease(v28);
    }
    else
    {
      v31 = 0;
      v33 = 0;
    }
    v34 = **(_QWORD **)(v0 + 152);
    v35 = swift_allocObject(&unk_101066240, 32, 7);
    *(_QWORD *)(v35 + 16) = &unk_1010F52D0;
    *(_QWORD *)(v35 + 24) = v23;
    v36 = v33 | v31;
    if (v33 | v31)
    {
      v36 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v31;
      *(_QWORD *)(v0 + 120) = v33;
    }
    v7 = *(_QWORD *)(v0 + 272);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v36;
    *(_QWORD *)(v0 + 144) = v34;
    swift_task_create(v26 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F52D8, v35);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v12 = v1 + 5;
  if (v1 + 5 >= v41)
  {
LABEL_31:
    v37 = *(_QWORD *)(v0 + 272);
    v39 = *(_QWORD *)(v0 + 256);
    v38 = *(_QWORD *)(v0 + 264);
    swift_release();
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v10 = *(_QWORD *)(v40 + 8 * v12);
  if (v10)
  {
    v11 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v41)
      goto LABEL_31;
    v10 = *(_QWORD *)(v40 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002A9100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 80) = v15;
  *(_QWORD *)(v8 + 88) = v16;
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = v14;
  *(_BYTE *)(v8 + 105) = v11;
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 56) = v12;
  *(_BYTE *)(v8 + 104) = a7;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  return swift_task_switch(sub_1002A9148, 0, 0);
}

void sub_1002A9148()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  char *v5;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[4];
  sub_10001AA44(v1, v1[3]);
  v3 = *(int **)(v2 + 16);
  v5 = (char *)v3 + *v3;
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_1002A91E8;
  __asm { BR              X8 }
}

uint64_t sub_1002A91E8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 96));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1002A9230(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1002A9248, 0, 0);
}

uint64_t sub_1002A9248()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1002A92D4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F5288, v1, &type metadata for () + 1);
}

uint64_t sub_1002A92D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

uint64_t sub_1002A9330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002A93A4, a3, 0);
}

uint64_t sub_1002A93A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002A93E8, 0, 0);
}

void sub_1002A93E8()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;

  v1 = 0;
  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v2 + 64);
  v37 = v2 + 64;
  v39 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v39 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v42 = (v6 - 1) & v6;
      v9 = v1;
      v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v1 + 1;
    if (!v12)
    {
      v13 = v1 + 2;
      if (v1 + 2 >= v38)
        goto LABEL_31;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v1 + 3;
        if (v1 + 3 >= v38)
          goto LABEL_31;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v1 + 4;
          if (v1 + 4 >= v38)
            goto LABEL_31;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v42 = (v12 - 1) & v12;
    v9 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 168);
    sub_100030784(*(_QWORD *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    sub_10000F9FC(v41, (uint64_t)v40);
    v20 = (_QWORD *)swift_allocObject(&unk_1010661A0, 80, 7);
    v20[2] = 0;
    v21 = v20 + 2;
    v20[3] = 0;
    sub_10000F9FC(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1002AAE78(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    swift_bridgeObjectRetain(v17);
    v23 = *(_QWORD *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      v24 = v25;
    }
    v1 = v9;
    v6 = v42;
    v26 = *v21;
    if (*v21)
    {
      v27 = v20[3];
      ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 152);
    v33 = swift_allocObject(&unk_1010661C8, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_1010F5298;
    *(_QWORD *)(v33 + 24) = v20;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v29;
      *(_QWORD *)(v0 + 120) = v31;
    }
    v7 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v34;
    *(_QWORD *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F52A0, v33);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v37 + 8 * v14);
  if (v12)
  {
    v13 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002A9798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1002A97B0, 0, 0);
}

uint64_t sub_1002A97B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_1002A9830;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_1002A9830()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1002A9878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1002A9890, 0, 0);
}

uint64_t sub_1002A9890()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1002A991C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F5250, v1, &type metadata for () + 1);
}

uint64_t sub_1002A991C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002AC20C, 0, 0);
}

uint64_t sub_1002A9978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002A99EC, a3, 0);
}

uint64_t sub_1002A99EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002A9A30, 0, 0);
}

void sub_1002A9A30()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;

  v1 = 0;
  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v2 + 64);
  v37 = v2 + 64;
  v39 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v39 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v42 = (v6 - 1) & v6;
      v9 = v1;
      v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v1 + 1;
    if (!v12)
    {
      v13 = v1 + 2;
      if (v1 + 2 >= v38)
        goto LABEL_31;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v1 + 3;
        if (v1 + 3 >= v38)
          goto LABEL_31;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v1 + 4;
          if (v1 + 4 >= v38)
            goto LABEL_31;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v42 = (v12 - 1) & v12;
    v9 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 168);
    sub_100030784(*(_QWORD *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    sub_10000F9FC(v41, (uint64_t)v40);
    v20 = (_QWORD *)swift_allocObject(&unk_101066128, 80, 7);
    v20[2] = 0;
    v21 = v20 + 2;
    v20[3] = 0;
    sub_10000F9FC(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1002AAE78(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    swift_bridgeObjectRetain(v17);
    v23 = *(_QWORD *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      v24 = v25;
    }
    v1 = v9;
    v6 = v42;
    v26 = *v21;
    if (*v21)
    {
      v27 = v20[3];
      ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 152);
    v33 = swift_allocObject(&unk_101066150, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_1010F5260;
    *(_QWORD *)(v33 + 24) = v20;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v29;
      *(_QWORD *)(v0 + 120) = v31;
    }
    v7 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v34;
    *(_QWORD *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F5268, v33);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v37 + 8 * v14);
  if (v12)
  {
    v13 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002A9DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1002A9DF8, 0, 0);
}

uint64_t sub_1002A9DF8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v0[3];
  v3 = v1[3];
  v4 = v1[4];
  sub_10001AA44(v1, v3);
  swift_bridgeObjectRetain(v2);
  v6 = sub_100CA82BC(v5);
  v0[4] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int **)(v4 + 32);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[5] = v8;
  *v8 = v0;
  v8[1] = sub_1002A9E9C;
  return v10(v6, v3, v4);
}

uint64_t sub_1002A9E9C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1002A9EEC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a4;
  *(_BYTE *)(v6 + 72) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_1002A9F10, 0, 0);
}

uint64_t sub_1002A9F10()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_BYTE *)(v0 + 72);
  v3 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 56) = v3;
  v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  *(_OWORD *)(v3 + 48) = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = sub_1002A9FBC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v5, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F5218, v3, &type metadata for () + 1);
}

uint64_t sub_1002A9FBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

uint64_t sub_1002AA018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v8 + 184) = a7;
  *(_QWORD *)(v8 + 192) = a8;
  *(_BYTE *)(v8 + 248) = a5;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 176) = a6;
  *(_QWORD *)(v8 + 152) = a2;
  *(_QWORD *)(v8 + 160) = a3;
  v10 = *(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8);
  *(_QWORD *)(v8 + 200) = v10;
  v11 = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 208) = v11;
  *(_QWORD *)(v8 + 216) = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 224) = swift_task_alloc(v12);
  *(_QWORD *)(v8 + 232) = swift_task_alloc(v12);
  return swift_task_switch(sub_1002AA0BC, a3, 0);
}

uint64_t sub_1002AA0BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 240) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002AA100, 0, 0);
}

void sub_1002AA100()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = 0;
  v46 = (__int128 *)(v0 + 56);
  v47 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v2 + 64);
  v41 = v2 + 64;
  v45 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v45 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v42 = (unint64_t)(63 - v5) >> 6;
  v43 = *(_QWORD *)(v0 + 208) + 7;
  v44 = *(_QWORD *)(v0 + 200);
  while (1)
  {
    if (v6)
    {
      v48 = (v6 - 1) & v6;
      v49 = v1;
      v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v42)
      goto LABEL_31;
    v10 = *(_QWORD *)(v41 + 8 * v9);
    v11 = v1 + 1;
    if (!v10)
    {
      v11 = v1 + 2;
      if (v1 + 2 >= v42)
        goto LABEL_31;
      v10 = *(_QWORD *)(v41 + 8 * v11);
      if (!v10)
      {
        v11 = v1 + 3;
        if (v1 + 3 >= v42)
          goto LABEL_31;
        v10 = *(_QWORD *)(v41 + 8 * v11);
        if (!v10)
        {
          v11 = v1 + 4;
          if (v1 + 4 >= v42)
            goto LABEL_31;
          v10 = *(_QWORD *)(v41 + 8 * v11);
          if (!v10)
            break;
        }
      }
    }
LABEL_22:
    v48 = (v10 - 1) & v10;
    v49 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    v13 = *(_QWORD *)(v0 + 232);
    v50 = v13;
    v14 = *(_QWORD *)(v0 + 216);
    v54 = *(_QWORD *)(v0 + 192);
    v55 = *(_QWORD *)(v0 + 224);
    v51 = *(_BYTE *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 176);
    v53 = *(_QWORD *)(v0 + 184);
    sub_100030784(*(_QWORD *)(v45 + 56) + 40 * v8, (uint64_t)v47);
    v16 = type metadata accessor for TaskPriority(0);
    v17 = *(_QWORD *)(v16 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, 1, 1, v16);
    sub_10000F9FC(v47, (uint64_t)v46);
    sub_10005972C(v15, v14, type metadata accessor for BeaconSharingSessionContext);
    v18 = *(unsigned __int8 *)(v44 + 80);
    v19 = (v18 + 72) & ~v18;
    v20 = (v43 + v19) & 0xFFFFFFFFFFFFFFF8;
    v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
    v22 = swift_allocObject(&unk_1010660B0, v21 + 8, v18 | 7);
    *(_QWORD *)(v22 + 16) = 0;
    v23 = (_QWORD *)(v22 + 16);
    *(_QWORD *)(v22 + 24) = 0;
    sub_10000F9FC(v46, v22 + 32);
    sub_1000126EC(v14, v22 + v19, type metadata accessor for BeaconSharingSessionContext);
    v24 = v22 + v20;
    *(_BYTE *)v24 = v51;
    *(_QWORD *)(v24 + 8) = v52;
    *(_QWORD *)(v24 + 16) = v53;
    *(_QWORD *)(v22 + v21) = v54;
    sub_1002AAE78(v50, v55);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v55, 1, v16);
    swift_bridgeObjectRetain(v53);
    v25 = swift_retain();
    v26 = *(_QWORD *)(v0 + 224);
    if ((_DWORD)v21 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 224), &qword_1010F46C0);
      v27 = 0;
    }
    else
    {
      v28 = TaskPriority.rawValue.getter(v25);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v26, v16);
      v27 = v28;
    }
    v6 = v48;
    v1 = v49;
    v29 = *v23;
    if (*v23)
    {
      v30 = *(_QWORD *)(v22 + 24);
      ObjectType = swift_getObjectType(*v23);
      swift_unknownObjectRetain(v29);
      v32 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v30);
      v34 = v33;
      swift_unknownObjectRelease(v29);
    }
    else
    {
      v32 = 0;
      v34 = 0;
    }
    v35 = **(_QWORD **)(v0 + 152);
    v36 = swift_allocObject(&unk_1010660D8, 32, 7);
    *(_QWORD *)(v36 + 16) = &unk_1010F5228;
    *(_QWORD *)(v36 + 24) = v22;
    v37 = v34 | v32;
    if (v34 | v32)
    {
      v37 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v32;
      *(_QWORD *)(v0 + 120) = v34;
    }
    v7 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v37;
    *(_QWORD *)(v0 + 144) = v35;
    swift_task_create(v27 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F5230, v36);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v12 = v1 + 5;
  if (v1 + 5 >= v42)
  {
LABEL_31:
    v38 = *(_QWORD *)(v0 + 232);
    v40 = *(_QWORD *)(v0 + 216);
    v39 = *(_QWORD *)(v0 + 224);
    swift_release();
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v10 = *(_QWORD *)(v41 + 8 * v12);
  if (v10)
  {
    v11 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v42)
      goto LABEL_31;
    v10 = *(_QWORD *)(v41 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002AA54C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 40) = a8;
  *(_QWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a7;
  *(_BYTE *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  return swift_task_switch(sub_1002AA578, 0, 0);
}

uint64_t sub_1002AA578()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 40);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = sub_10015A814;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(*(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v2, v3);
}

uint64_t sub_1002AA600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1002AA618, 0, 0);
}

uint64_t sub_1002AA618()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_1002A991C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2, &type metadata for () + 1, &type metadata for () + 1, 0, 0, &unk_1010F51E8, v1, &type metadata for () + 1);
}

uint64_t sub_1002AA6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v6;

  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F46C0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v6);
  v4[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002AA718, a3, 0);
}

uint64_t sub_1002AA718()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 144);
  *(_QWORD *)(v0 + 192) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_1002AA75C, 0, 0);
}

void sub_1002AA75C()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;

  v1 = 0;
  v40 = (__int128 *)(v0 + 56);
  v41 = (__int128 *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v2 + 64);
  v37 = v2 + 64;
  v39 = v2;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v39 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & v3;
  v38 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v42 = (v6 - 1) & v6;
      v9 = v1;
      v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v11);
    v13 = v1 + 1;
    if (!v12)
    {
      v13 = v1 + 2;
      if (v1 + 2 >= v38)
        goto LABEL_31;
      v12 = *(_QWORD *)(v37 + 8 * v13);
      if (!v12)
      {
        v13 = v1 + 3;
        if (v1 + 3 >= v38)
          goto LABEL_31;
        v12 = *(_QWORD *)(v37 + 8 * v13);
        if (!v12)
        {
          v13 = v1 + 4;
          if (v1 + 4 >= v38)
            goto LABEL_31;
          v12 = *(_QWORD *)(v37 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v42 = (v12 - 1) & v12;
    v9 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 168);
    sub_100030784(*(_QWORD *)(v39 + 56) + 40 * v10, (uint64_t)v41);
    v18 = type metadata accessor for TaskPriority(0);
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v16, 1, 1, v18);
    sub_10000F9FC(v41, (uint64_t)v40);
    v20 = (_QWORD *)swift_allocObject(&unk_101066038, 80, 7);
    v20[2] = 0;
    v21 = v20 + 2;
    v20[3] = 0;
    sub_10000F9FC(v40, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1002AAE78(v16, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    v22 = swift_retain();
    v23 = *(_QWORD *)(v0 + 176);
    if ((_DWORD)v15 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010F46C0);
      v24 = 0;
    }
    else
    {
      v25 = TaskPriority.rawValue.getter(v22);
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
      v24 = v25;
    }
    v1 = v9;
    v6 = v42;
    v26 = *v21;
    if (*v21)
    {
      v27 = v20[3];
      ObjectType = swift_getObjectType(*v21);
      swift_unknownObjectRetain(v26);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v27);
      v31 = v30;
      swift_unknownObjectRelease(v26);
    }
    else
    {
      v29 = 0;
      v31 = 0;
    }
    v32 = **(_QWORD **)(v0 + 152);
    v33 = swift_allocObject(&unk_101066060, 32, 7);
    *(_QWORD *)(v33 + 16) = &unk_1010F51F8;
    *(_QWORD *)(v33 + 24) = v20;
    v34 = v31 | v29;
    if (v31 | v29)
    {
      v34 = v0 + 96;
      *(_QWORD *)(v0 + 96) = 0;
      *(_QWORD *)(v0 + 104) = 0;
      *(_QWORD *)(v0 + 112) = v29;
      *(_QWORD *)(v0 + 120) = v31;
    }
    v7 = *(_QWORD *)(v0 + 184);
    *(_QWORD *)(v0 + 128) = 1;
    *(_QWORD *)(v0 + 136) = v34;
    *(_QWORD *)(v0 + 144) = v32;
    swift_task_create(v24 | 0x3100, v0 + 128, &type metadata for () + 1, &unk_1010F4908, v33);
    swift_release();
    sub_100004048(v7, &qword_1010F46C0);
  }
  v14 = v1 + 5;
  if (v1 + 5 >= v38)
  {
LABEL_31:
    v35 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 176);
    swift_release();
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v12 = *(_QWORD *)(v37 + 8 * v14);
  if (v12)
  {
    v13 = v1 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v38)
      goto LABEL_31;
    v12 = *(_QWORD *)(v37 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_22;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_1002AAB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1002AAB24, 0, 0);
}

uint64_t sub_1002AAB24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[2];
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  v4 = *(int **)(v3 + 48);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_1002AC210;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[3], v2, v3);
}

uint64_t sub_1002AABA4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6C90);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6C90);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000017, 0x8000000100E309A0);
}

void sub_1002AAC24(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  sub_1002ABE38(a3, a4, a5);
}

uint64_t sub_1002AAC34(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return sub_1002A7C24(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_1002AAC3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;

  return sub_1002A7D7C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_1002AAC68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002AAC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return sub_10037D930(a1, a2, a3, a4, a5, a6, a7, a8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 16));
}

uint64_t sub_1002AACB0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A7EF8(a1, v1, (uint64_t)&unk_101066178, (uint64_t)&unk_1010F5278);
}

uint64_t sub_1002AACD8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A7EF8(a1, v1, (uint64_t)&unk_101066100, (uint64_t)&unk_1010F5240);
}

uint64_t sub_1002AAD00(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  return sub_1002A7F88(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1002AAD08(uint64_t a1)
{
  uint64_t v1;

  return sub_1002A80DC(a1, v1);
}

void sub_1002AAD10()
{
  sub_10037D974();
}

uint64_t sub_1002AAD30()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002AAD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F51D4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1002AA618, 0, 0);
}

uint64_t sub_1002AAD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F51E4);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_1002AA6A4(a1, a2, v7, v6);
}

uint64_t sub_1002AAE08()
{
  return sub_1002AB52C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002AAE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F51F4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1002AAB24, 0, 0);
}

uint64_t sub_1002AAE78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002AAEC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002AAF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v0 + v3;
  v8 = (char *)(v0 + v4);
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = *(_QWORD *)(v0 + v5);
  v13 = swift_task_alloc(dword_1010F5204);
  *(_QWORD *)(v1 + 16) = v13;
  *(_QWORD *)v13 = v1;
  *(_QWORD *)(v13 + 8) = sub_100004A74;
  *(_QWORD *)(v13 + 40) = v11;
  *(_QWORD *)(v13 + 48) = v12;
  *(_QWORD *)(v13 + 24) = v7;
  *(_QWORD *)(v13 + 32) = v10;
  *(_BYTE *)(v13 + 72) = v9;
  *(_QWORD *)(v13 + 16) = v6;
  return swift_task_switch(sub_1002A9F10, 0, 0);
}

uint64_t sub_1002AB058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_QWORD *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(_BYTE *)(v2 + 32);
  v12 = (_QWORD *)swift_task_alloc(dword_1010F5214);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_100004A74;
  return sub_1002AA018(a1, a2, v6, v7, v11, v8, v9, v10);
}

uint64_t sub_1002AB0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  v1 = type metadata accessor for BeaconSharingSessionContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRelease();
      break;
    case 0:
LABEL_4:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v4, v7);
      break;
  }
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002AB1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(type metadata accessor for BeaconSharingSessionContext(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 31) & 0xFFFFFFFFFFFFF8;
  v6 = v0 + 32;
  v7 = v0 + v3;
  v8 = (char *)(v0 + v4);
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = *(_QWORD *)(v0 + v5);
  v13 = swift_task_alloc(dword_1010F5224);
  *(_QWORD *)(v1 + 16) = v13;
  *(_QWORD *)v13 = v1;
  *(_QWORD *)(v13 + 8) = sub_100004A74;
  *(_QWORD *)(v13 + 40) = v11;
  *(_QWORD *)(v13 + 48) = v12;
  *(_QWORD *)(v13 + 24) = v7;
  *(_QWORD *)(v13 + 32) = v10;
  *(_BYTE *)(v13 + 64) = v9;
  *(_QWORD *)(v13 + 16) = v6;
  return swift_task_switch(sub_1002AA578, 0, 0);
}

uint64_t sub_1002AB290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_101101FF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_101101FF0 + dword_101101FF0))(a1, v4);
}

uint64_t sub_1002AB300()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002AB30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F523C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1002A9890, 0, 0);
}

uint64_t sub_1002AB36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F524C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_1002A9978(a1, a2, v7, v6);
}

uint64_t sub_1002AB3D8()
{
  return sub_1002AB52C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002AB3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F525C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1002A9DF8, 0, 0);
}

uint64_t sub_1002AB448()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002AB454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F5274);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1002A9248, 0, 0);
}

uint64_t sub_1002AB4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F5284);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_1002A9330(a1, a2, v7, v6);
}

uint64_t sub_1002AB520()
{
  return sub_1002AB52C((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002AB52C(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_unknownObjectRelease(v1[2]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 4);
  a1(v1[9]);
  return swift_deallocObject(v1, 80, 7);
}

uint64_t sub_1002AB56C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 72);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F5294);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch(sub_1002A97B0, 0, 0);
}

uint64_t sub_1002AB5D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for MessagingMessageContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 104) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease();
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v4, 1, v7);
  v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  if (!v9)
    v10(v0 + v4, v7);
  v10(v6 + *(int *)(v1 + 20), v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v6 + *(int *)(v1 + 44);
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002AB70C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 v15;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8) + 80);
  v15 = *(_OWORD *)(v0 + 16);
  v14 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_BYTE *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v11 = v0 + ((v2 + 104) & ~v2);
  v12 = swift_task_alloc(dword_1010F52AC);
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)v12 = v1;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 80) = v9;
  *(_QWORD *)(v12 + 88) = v11;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v10;
  *(_BYTE *)(v12 + 113) = v6;
  *(_QWORD *)(v12 + 48) = v5;
  *(_QWORD *)(v12 + 56) = v7;
  *(_BYTE *)(v12 + 112) = v3;
  *(_QWORD *)(v12 + 32) = v14;
  *(_QWORD *)(v12 + 40) = v4;
  *(_OWORD *)(v12 + 16) = v15;
  return swift_task_switch(sub_1002A8A28, 0, 0);
}

uint64_t sub_1002AB7E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v10 = *(_BYTE *)(v2 + 40);
  v11 = (_QWORD *)swift_task_alloc(dword_1010F52BC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1002A8B6C(a1, a2, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1002AB8B4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(char *, uint64_t);
  char *v11;
  uint64_t v12;

  v1 = type metadata accessor for MessagingMessageContext(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 152) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)v0 + 4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*((_QWORD *)v0 + 16), *((_QWORD *)v0 + 17));
  swift_bridgeObjectRelease();
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v4], 1, v7);
  v10 = *(void (**)(char *, uint64_t))(v8 + 8);
  if (!v9)
    v10(&v0[v4], v7);
  v10(&v6[*(int *)(v1 + 20)], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = &v6[*(int *)(v1 + 44)];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002AB9F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MessagingMessageContext(0) - 8) + 80);
  v3 = v0 + 32;
  v4 = *(_BYTE *)(v0 + 88);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = *(_OWORD *)(v0 + 72);
  v5 = *(_BYTE *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = v0 + ((v2 + 152) & ~v2);
  v9 = swift_task_alloc(dword_1010F52CC);
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)v9 = v1;
  *(_QWORD *)(v9 + 8) = sub_100004A74;
  *(_QWORD *)(v9 + 80) = v7;
  *(_QWORD *)(v9 + 88) = v8;
  *(_QWORD *)(v9 + 72) = v6;
  *(_OWORD *)(v9 + 56) = v11;
  *(_BYTE *)(v9 + 105) = v5;
  *(_OWORD *)(v9 + 40) = v12;
  *(_BYTE *)(v9 + 104) = v4;
  *(_OWORD *)(v9 + 24) = v13;
  *(_QWORD *)(v9 + 16) = v3;
  return swift_task_switch(sub_1002A9148, 0, 0);
}

uint64_t sub_1002ABAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 16));
  return swift_deallocObject(v0, v6 + 24, v5);
}

uint64_t sub_1002ABB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v12 = *(_OWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = v0 + v3;
  v6 = (char *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = *((_QWORD *)v6 + 1);
  v9 = *((_QWORD *)v6 + 2);
  v10 = swift_task_alloc(dword_1010F52E4);
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)v10 = v1;
  *(_QWORD *)(v10 + 8) = sub_100004A74;
  *(_QWORD *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 56) = v9;
  *(_BYTE *)(v10 + 80) = v7;
  *(_QWORD *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v5;
  *(_OWORD *)(v10 + 16) = v12;
  return swift_task_switch(sub_1002A8284, 0, 0);
}

uint64_t sub_1002ABC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(_BYTE *)(v2 + 48);
  v12 = (_QWORD *)swift_task_alloc(dword_1010F52F4);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_100004A74;
  return sub_1002A8394(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1002ABCD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 88) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002ABD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + 32;
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = v0 + v3;
  v8 = (char *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = *((_QWORD *)v8 + 1);
  v11 = *((_QWORD *)v8 + 2);
  v12 = swift_task_alloc(dword_1010F5304);
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)v12 = v1;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 48) = v10;
  *(_QWORD *)(v12 + 56) = v11;
  *(_BYTE *)(v12 + 72) = v9;
  *(_QWORD *)(v12 + 32) = v6;
  *(_QWORD *)(v12 + 40) = v7;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v5;
  return swift_task_switch(sub_1002A8918, 0, 0);
}

void sub_1002ABE38(uint64_t a1, int a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  id v30;
  NSString v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35[3];

  v32 = a3;
  v33 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  v12 = sub_10001A9A8(&qword_1010EF180);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EF178);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + 152, v35, 33, 0);
  sub_100103698(a1, (uint64_t)v14);
  swift_endAccess(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010EF180);
    if (qword_1010E9AF8 != -1)
      swift_once(&qword_1010E9AF8, sub_1002A7980);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B6C78);
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v35[0] = v24;
      *(_DWORD *)v23 = 136446210;
      v25 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v5, v25);
      v34 = sub_100016940(v26, v27, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Untracked identifier: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    if ((v33 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, a1, v5);
      CheckedContinuation.resume(returning:)(v11, v15);
    }
    else
    {
      v28 = v32;
      if (v32)
      {
        v29 = v32;
      }
      else
      {
        v30 = objc_allocWithZone((Class)NSError);
        v31 = String._bridgeToObjectiveC()();
        v29 = objc_msgSend(v30, "initWithDomain:code:userInfo:", v31, 0, 0);

      }
      v35[0] = (uint64_t)v29;
      swift_errorRetain(v28);
      CheckedContinuation.resume(throwing:)(v35, v15);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

_QWORD *sub_1002AC22C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;

  v2 = v1;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v23 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v16, v17, v4, v15);
  v2[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x8000000100ECF400, v9, v6, v13, 0);
  v2[4] = 0;
  v18 = sub_10001A9A8(&qword_1010FAB00);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = PassthroughSubject.init()();
  v2[5] = v19;
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v2[6] = PassthroughSubject.init()();
  v2[7] = &_swiftEmptySetSingleton;
  v2[3] = a1;
  v23 = (_QWORD *)v19;
  v20 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v2[8] = Publisher.eraseToAnyPublisher()(v18, v20);
  return v2;
}

uint64_t sub_1002AC484(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  id v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  id v50;

  v3 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F5450);
  v10 = *(_QWORD *)(v9 - 8);
  v45 = v9;
  v46 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F5458);
  v14 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  v48 = v14;
  __chkstk_darwin(v13);
  v41 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[4] = a1;
  swift_retain();
  swift_release();
  v16 = v1[6];
  v42 = v1;
  v49[0] = v16;
  swift_retain();
  static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)(250);
  v17 = (void *)v1[2];
  v50 = v17;
  v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
  v40 = v17;
  v19 = sub_10001A9A8(&qword_1010FAB00);
  v20 = sub_10001F6FC();
  v21 = sub_1000193A4(&qword_1010EEDC0, &qword_1010FAB00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v22 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v23 = v12;
  Publisher.debounce<A>(for:scheduler:options:)(v8, &v50, v5, v19, v20, v21, v22);
  sub_1002ACC2C((uint64_t)v5);

  v24 = v44;
  v25 = *(void (**)(char *, uint64_t))(v43 + 8);
  v25(v8, v44);
  swift_release();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(10);
  v49[0] = v40;
  v26 = sub_1000193A4(&qword_1010F5460, &qword_1010F5450, (const char *)&protocol conformance descriptor for Publishers.Debounce<A, B>);
  v27 = v41;
  v28 = v45;
  Publisher.throttle<A>(for:scheduler:latest:)(v8, v49, 1, v45, v20, v26, v22);
  v25(v8, v24);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v28);
  v29 = swift_allocObject(&unk_101066308, 24, 7);
  v30 = v42;
  swift_weakInit(v29 + 16, v42);
  v31 = swift_allocObject(&unk_101066330, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_1002ACC90;
  *(_QWORD *)(v31 + 24) = v29;
  v32 = sub_1000193A4(&qword_1010F5468, &qword_1010F5458, (const char *)&protocol conformance descriptor for Publishers.Throttle<A, B>);
  v33 = v47;
  Publisher<>.sink(receiveValue:)(sub_10001D858, v31, v47, v32);
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v33);
  v34 = v30 + 7;
  swift_beginAccess(v30 + 7, v49, 33, 0);
  AnyCancellable.store(in:)(v30 + 7);
  swift_endAccess(v49);
  swift_release();
  v49[0] = *(_QWORD *)(v30[3] + 24);
  v35 = swift_allocObject(&unk_101066308, 24, 7);
  swift_weakInit(v35 + 16, v30);
  swift_retain();
  v36 = sub_10001A9A8(&qword_1010F5470);
  v37 = sub_1000193A4(&qword_1010F5478, &qword_1010F5470, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_1002ACCBC, v35, v36, v37);
  swift_release();
  swift_release();
  swift_beginAccess(v34, v49, 33, 0);
  AnyCancellable.store(in:)(v34);
  swift_endAccess(v49);
  return swift_release();
}

uint64_t sub_1002AC8F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1002AC9B0();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002AC948(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 48);
    v6 = swift_retain(v5);
    PassthroughSubject.send(_:)(v6);
    swift_release(v4);
    return swift_release(v5);
  }
  return result;
}

void sub_1002AC9B0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {
    swift_retain();
    sub_10037F0F8();
    swift_release();
  }
}

uint64_t sub_1002ACBA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_1002ACBEC()
{
  uint64_t v0;

  sub_1002ACBA0();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for CloudKitIDSUpdateManager()
{
  return objc_opt_self(_TtC12searchpartyd24CloudKitIDSUpdateManager);
}

uint64_t sub_1002ACC2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EECC8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002ACC6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002ACC90()
{
  uint64_t v0;

  return sub_1002AC8F4(v0);
}

uint64_t sub_1002ACC98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002ACCBC(uint64_t a1)
{
  uint64_t v1;

  return sub_1002AC948(a1, v1);
}

uint64_t sub_1002ACCC4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v22, v3, v4);
  v21 = *v1;
  v5 = v23;
  v6 = v24;
  sub_10009F5D0((uint64_t)v22, v23);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v21 = v1[1];
    v8 = v23;
    v9 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v8, v9);
    v21 = v1[3];
    v10 = v23;
    v11 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v10, v11);
    v21 = v1[4];
    v12 = v23;
    v13 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v12, v13);
    v21 = v1[2];
    v14 = v23;
    v15 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v14, v15);
    v21 = v1[5];
    v16 = v23;
    v17 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v16, v17);
    v21 = v1[6];
    v18 = v23;
    v19 = v24;
    sub_10009F5D0((uint64_t)v22, v23);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v21, &type metadata for Data, v7, v18, v19);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
}

__n128 sub_1002ACF08@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_1002AD9A0(a1, v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1002ACF58(_QWORD *a1)
{
  return sub_1002ACCC4(a1);
}

void sub_1002ACF6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X17 }
}

void sub_1002ACF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a2) == 114)
    __asm { BR              X17 }
  __break(1u);
  JUMPOUT(0x1002AD1F0);
}

void sub_1002AD278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

void sub_1002AD2E0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unsigned __int8 v3;
  uint64_t v5;
  unint64_t v6;

  if (!__OFSUB__(60, v3))
  {
    v5 = sub_10060C584(60 - v3);
    v6 = v0;
    sub_10051EB40((uint64_t)&v5);
    v1 = v5;
    v2 = v6;
    Data.append(_:)(v5, v6);
    sub_10001BC14(v1, v2);
    __asm { BR              X9 }
  }
  __break(1u);
  JUMPOUT(0x1002AD580);
}

uint64_t destroy for AirPodsSWFinalizePairingCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  return sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
}

uint64_t *initializeWithCopy for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v12 = a2[8];
  v13 = a2[9];
  sub_10001BBBC(v12, v13);
  a1[8] = v12;
  a1[9] = v13;
  v14 = a2[10];
  v15 = a2[11];
  sub_10001BBBC(v14, v15);
  a1[10] = v14;
  a1[11] = v15;
  v17 = a2[12];
  v16 = a2[13];
  sub_10001BBBC(v17, v16);
  a1[12] = v17;
  a1[13] = v16;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[8];
  v21 = a2[9];
  sub_10001BBBC(v20, v21);
  v22 = a1[8];
  v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[10];
  v25 = a2[11];
  sub_10001BBBC(v24, v25);
  v26 = a1[10];
  v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001BC14(v26, v27);
  v29 = a2[12];
  v28 = a2[13];
  sub_10001BBBC(v29, v28);
  v30 = a1[12];
  v31 = a1[13];
  a1[12] = v29;
  a1[13] = v28;
  sub_10001BC14(v30, v31);
  return a1;
}

uint64_t *assignWithTake for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v10, v11);
  v12 = a1[8];
  v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001BC14(v12, v13);
  v14 = a1[10];
  v15 = a1[11];
  *((_OWORD *)a1 + 5) = a2[5];
  sub_10001BC14(v14, v15);
  v16 = a1[12];
  v17 = a1[13];
  *((_OWORD *)a1 + 6) = a2[6];
  sub_10001BC14(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsSWFinalizePairingCommandPayload;
}

unint64_t sub_1002AD930(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1002AD95C();
  result = sub_10024D50C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002AD95C()
{
  unint64_t result;

  result = qword_1010F5480;
  if (!qword_1010F5480)
  {
    result = swift_getWitnessTable("IY#", &type metadata for AirPodsSWFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F5480);
  }
  return result;
}

uint64_t sub_1002AD9A0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v36, v5, v6);
  v7 = v37;
  v8 = v38;
  sub_10009F5D0((uint64_t)v36, v37);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(114, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v37;
    v14 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v13, v14);
    v46 = v15;
    v17 = v37;
    v16 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    v34 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    v35 = v18;
    v19 = v37;
    v20 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v19, v20);
    sub_10001BBBC(v34, v35);
    v21 = sub_100035530();
    v22 = DataProtocol.intValue.getter(&type metadata for Data, v21);
    sub_1002F7C0C(v22, v34, v35);
    v23 = v37;
    v24 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v23, v24);
    v25 = v37;
    v26 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v25, v26);
    v27 = v37;
    v28 = v38;
    sub_10009F5D0((uint64_t)v36, v37);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(24, v27, v28);
    sub_10001BC14(v34, v35);
    sub_1002ACF6C(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v30 = v44;
    v31 = v45;
    a2[4] = v43;
    a2[5] = v30;
    a2[6] = v31;
    v32 = v40;
    *a2 = v39;
    a2[1] = v32;
    v33 = v42;
    a2[2] = v41;
    a2[3] = v33;
  }
  return result;
}

uint64_t sub_1002ADCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ADCAC);
}

uint64_t sub_1002ADCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1002ADD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ADD34);
}

uint64_t sub_1002ADD34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1002ADDAC(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 20)));
}

uint64_t sub_1002ADDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v8 + 688) = a8;
  *(_QWORD *)(v8 + 680) = a7;
  *(_QWORD *)(v8 + 672) = a6;
  *(_BYTE *)(v8 + 832) = a5;
  *(_QWORD *)(v8 + 664) = a4;
  *(_QWORD *)(v8 + 656) = a3;
  *(_QWORD *)(v8 + 648) = a2;
  *(_QWORD *)(v8 + 640) = a1;
  v9 = type metadata accessor for BeaconIdentifier(0);
  *(_QWORD *)(v8 + 696) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 704) = swift_task_alloc(v10);
  *(_QWORD *)(v8 + 712) = swift_task_alloc(v10);
  return swift_task_switch(sub_1002ADE40, 0, 0);
}

uint64_t sub_1002ADE40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint8_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  unint64_t v45;
  uint64_t *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  sub_100005CF0(*(_QWORD *)(v0 + 656), v0 + 456, &qword_1010F5520);
  v1 = *(_QWORD *)(v0 + 464);
  if (v1 >> 60 == 15)
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7660);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary root key!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_1002B1B2C();
    v8 = swift_allocError(&type metadata for LTKGenerator.Error, v7, 0, 0);
    *v9 = 3;
    swift_willThrow(v8);
    goto LABEL_26;
  }
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 672);
  v12 = *(_QWORD *)(v0 + 648);
  v13 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 472);
  v15 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 488);
  v17 = *(_QWORD *)(v0 + 496);
  sub_1002B1B70(*(_QWORD *)(v0 + 656), (void (*)(void))sub_10001BBBC);
  v18 = sub_10075887C(v12, v11, v10);
  *(_QWORD *)(v0 + 720) = v18;
  *(_QWORD *)(v0 + 728) = v19;
  *(_QWORD *)(v0 + 736) = v20;
  v21 = v18;
  v22 = v20;
  v71 = v15;
  v72 = v14;
  v74 = v17;
  v75 = v0 + 632;
  v79 = v19;
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v23 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 744) = sub_10001A9E8(v23, (uint64_t)qword_1011B7660);
  v24 = v22;
  v25 = sub_1002B1C18(v21, v79, v22);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = v16;
    v29 = v13;
    v30 = v28;
    *(_DWORD *)v28 = 134217984;
    if (v24 >> 60 == 15)
      v31 = 0;
    else
      v31 = v21;
    *(_QWORD *)(v0 + 632) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v75, v0 + 640, v28 + 4, v28 + 12);
    sub_1002B1C34(v21, v79, v24);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found keyGenerationHint %llu", v30, 0xCu);
    v32 = v30;
    v13 = v29;
    v16 = v70;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_1002B1C34(v21, v79, v24);
  }
  v33 = *(unsigned __int8 *)(v0 + 832);

  if (v33)
  {
    if (v33 != 1)
    {
      v47 = Logger.logObject.getter(v34);
      v48 = static os_log_type_t.error.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        v80 = v50;
        *(_DWORD *)v49 = 136315138;
        *(_QWORD *)(v0 + 624) = sub_100016940(0xD000000000000010, 0x8000000100EC6940, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v75, v49 + 4, v49 + 12);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Invalid key sequence %s!", v49, 0xCu);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v49, -1, -1);
      }

      v40 = *(_QWORD *)(v0 + 656);
      v51 = sub_1002B1B2C();
      v42 = swift_allocError(&type metadata for LTKGenerator.Error, v51, 0, 0);
      v44 = 1;
      goto LABEL_25;
    }
    v35 = sub_100005CF0(*(_QWORD *)(v0 + 664), v0 + 408, &qword_1010F5520);
    v36 = *(_QWORD *)(v0 + 416);
    if (v36 >> 60 == 15)
    {
      v37 = Logger.logObject.getter(v35);
      v38 = static os_log_type_t.error.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing secondary root key!", v39, 2u);
        swift_slowDealloc(v39, -1, -1);
      }
      v40 = *(_QWORD *)(v0 + 656);

      v41 = sub_1002B1B2C();
      v42 = swift_allocError(&type metadata for LTKGenerator.Error, v41, 0, 0);
      v44 = 4;
LABEL_25:
      *v43 = v44;
      swift_willThrow(v42);
      sub_1002B1C34(v21, v79, v24);
      sub_1002B1B70(v40, (void (*)(void))sub_10001BC14);
LABEL_26:
      v52 = *(_QWORD *)(v0 + 704);
      swift_task_dealloc(*(_QWORD *)(v0 + 712));
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v54 = v24;
    v77 = *(_QWORD *)(v0 + 672);
    v55 = *(_QWORD *)(v0 + 664);
    v56 = *(_QWORD *)(v0 + 408);
    v57 = *(_QWORD *)(v0 + 424);
    v58 = *(_QWORD *)(v0 + 432);
    v59 = *(_QWORD *)(v0 + 440);
    v73 = *(_QWORD *)(v0 + 448);
    sub_1002B1C18(v21, v79, v54);
    sub_1002B1B70(v55, (void (*)(void))sub_10001BBBC);
    sub_10001BBBC(v57, v58);
    sub_10001BBBC(v56, v36);
    sub_10001BBBC(v59, v73);
    sub_100736DBC(v57, v58, v56, v36, v59, v73, v21, v79, (uint64_t *)(v0 + 232), v54, v77);
    sub_1002B1B70(*(_QWORD *)(v0 + 664), (void (*)(void))sub_10001BC14);
    v46 = (uint64_t *)(v0 + 232);
  }
  else
  {
    v45 = v24;
    v46 = (uint64_t *)(v0 + 16);
    v76 = *(_QWORD *)(v0 + 672);
    sub_1002B1C18(v21, v79, v45);
    sub_10001BBBC(v72, v71);
    sub_10001BBBC(v13, v1);
    sub_10001BBBC(v16, v74);
    sub_100736DBC(v72, v71, v13, v1, v16, v74, v21, v79, (uint64_t *)(v0 + 16), v45, v76);
  }
  v60 = v46[7];
  *(_QWORD *)(v0 + 752) = v60;
  v61 = v46[8];
  *(_QWORD *)(v0 + 760) = v61;
  v62 = v46[6];
  v63 = v46[4];
  *(_QWORD *)(v0 + 768) = v63;
  v64 = v46[5];
  *(_QWORD *)(v0 + 776) = v64;
  v65 = v46[2];
  *(_QWORD *)(v0 + 784) = v65;
  v66 = v46[3];
  *(_QWORD *)(v0 + 792) = v66;
  v67 = *v46;
  v68 = v46[1];
  *(_QWORD *)(v0 + 800) = v68;
  *(_QWORD *)(v0 + 808) = v67;
  *(_QWORD *)(v0 + 160) = v67;
  *(_QWORD *)(v0 + 168) = v68;
  *(_QWORD *)(v0 + 176) = v65;
  *(_QWORD *)(v0 + 184) = v66;
  *(_QWORD *)(v0 + 192) = v63;
  *(_QWORD *)(v0 + 200) = v64;
  *(_QWORD *)(v0 + 208) = v62;
  *(_QWORD *)(v0 + 216) = v60;
  *(_QWORD *)(v0 + 224) = v61;
  sub_10001BD08(v67, v68);
  sub_10001BBBC(v65, v66);
  sub_10001BBBC(v63, v64);
  sub_10001BBBC(v60, v61);
  v78 = (char *)&dword_101102080 + dword_101102080;
  v69 = (_QWORD *)swift_task_alloc(unk_101102084);
  *(_QWORD *)(v0 + 816) = v69;
  *v69 = v0;
  v69[1] = sub_1002AE600;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))v78)(v0 + 88, 0, 0, v0 + 592);
}

uint64_t sub_1002AE600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 816);
  *(_QWORD *)(*(_QWORD *)v1 + 824) = v0;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002AE654, 0, 0);
}

void sub_1002AE654()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  Swift::String v59;
  Swift::String v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  void (*v73)(void);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  Swift::String v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  Swift::String v101;
  Swift::String v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  os_log_type_t type;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;

  v1 = *(_QWORD *)(v0 + 104);
  if (v1 >> 60 == 15)
  {
    v3 = *(_QWORD *)(v0 + 176);
    v2 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    sub_10001EF3C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    sub_10001BC14(v3, v2);
    sub_10001BC14(v4, v5);
    sub_10001BC14(v6, v7);
    v144 = 0;
    v145 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0xF000000000000000;
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v0 + 736) >> 60 == 15)
    v13 = 0;
  else
    v13 = *(_QWORD *)(v0 + 720);
  v14 = v12 >= v13;
  v15 = v12 - v13;
  if (!v14)
  {
    __break(1u);
    return;
  }
  v135 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 96);
  v144 = *(_QWORD *)(v0 + 112);
  v145 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v146 = *(_QWORD *)(v0 + 136);
  v148 = *(_QWORD *)(v0 + 152);
  v150 = *(_QWORD *)(v0 + 120);
  if (v15 <= *(_QWORD *)(v0 + 688))
  {
    v138 = *(_QWORD *)(v0 + 96);
    v35 = *(_QWORD *)(v0 + 176);
    v34 = *(_QWORD *)(v0 + 184);
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(_QWORD *)(v0 + 200);
    v38 = *(_QWORD *)(v0 + 216);
    v39 = *(_QWORD *)(v0 + 224);
    sub_10001EF3C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    sub_10001BC14(v35, v34);
    sub_10001BC14(v36, v37);
    sub_10001BC14(v38, v39);
    v40 = *(_QWORD *)(v0 + 824);
  }
  else
  {
    v141 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 824);
    v18 = *(_QWORD *)(v0 + 680);
    v19 = *(_QWORD *)(v0 + 648);
    v20 = *(_BYTE *)(v0 + 832);
    v21 = sub_10001A9A8(&qword_1010ED1C0);
    inited = swift_initStackObject(v21, v0 + 304);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v135;
    v23 = inited + 32;
    *(_QWORD *)(inited + 40) = v16;
    *(_QWORD *)(inited + 48) = v1;
    sub_10001BBBC(v16, v1);
    sub_100753C90(v19, v20, inited, v18);
    if (v17)
    {
      v116 = *(_QWORD *)(v0 + 800);
      v118 = *(_QWORD *)(v0 + 808);
      v120 = *(_QWORD *)(v0 + 784);
      v122 = *(_QWORD *)(v0 + 792);
      v124 = *(_QWORD *)(v0 + 768);
      v126 = *(_QWORD *)(v0 + 776);
      v129 = *(_QWORD *)(v0 + 752);
      v132 = *(_QWORD *)(v0 + 760);
      v24 = *(_QWORD *)(v0 + 736);
      v25 = *(_QWORD *)(v0 + 728);
      v26 = *(_QWORD *)(v0 + 720);
      v27 = *(_QWORD *)(v0 + 656);
      swift_setDeallocating(inited);
      swift_arrayDestroy(v23, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
      sub_1002B1D28(v135, v16, v1, v144, v150, v145, v146, v141, v148);
      sub_1002B1B70(v27, (void (*)(void))sub_10001BC14);
      sub_1002B1C34(v26, v25, v24);
      sub_10001EF3C(v118, v116);
      sub_10001BC14(v120, v122);
      sub_10001BC14(v124, v126);
      sub_10001BC14(v129, v132);
      v29 = *(_QWORD *)(v0 + 176);
      v28 = *(_QWORD *)(v0 + 184);
      v30 = *(_QWORD *)(v0 + 192);
      v31 = *(_QWORD *)(v0 + 200);
      v32 = *(_QWORD *)(v0 + 216);
      v33 = *(_QWORD *)(v0 + 224);
      sub_10001EF3C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
      sub_10001BC14(v29, v28);
      sub_10001BC14(v30, v31);
      sub_10001BC14(v32, v33);
LABEL_24:
      v72 = *(_QWORD *)(v0 + 704);
      swift_task_dealloc(*(_QWORD *)(v0 + 712));
      swift_task_dealloc(v72);
      v73 = *(void (**)(void))(v0 + 8);
LABEL_25:
      v73();
      return;
    }
    v138 = v16;
    v42 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 184);
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 200);
    v45 = *(_QWORD *)(v0 + 216);
    v46 = *(_QWORD *)(v0 + 224);
    sub_10001EF3C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
    sub_10001BC14(v42, v41);
    sub_10001BC14(v43, v44);
    sub_10001BC14(v45, v46);
    swift_setDeallocating(inited);
    swift_arrayDestroy(v23, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
    v40 = 0;
    v9 = v141;
  }
  v10 = v148;
  v8 = v150;
  *(_QWORD *)(v0 + 360) = v144;
  *(_QWORD *)(v0 + 368) = v150;
  v11 = v146;
  *(_QWORD *)(v0 + 376) = v145;
  *(_QWORD *)(v0 + 384) = v146;
  *(_QWORD *)(v0 + 392) = v9;
  *(_QWORD *)(v0 + 400) = v148;
  sub_10001BD08(v144, v150);
  sub_10001BBBC(v145, v146);
  sub_10001BD08(v9, v148);
  sub_1002B1D28(v135, v138, v1, v144, v150, v145, v146, v9, v148);
  if (v150 >> 60 == 15)
  {
LABEL_14:
    v149 = v10;
    v151 = v8;
    v147 = v11;
    v142 = v9;
    v47 = sub_1002B1C50(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 704));
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    v50 = os_log_type_enabled(v48, v49);
    v51 = *(_QWORD *)(v0 + 704);
    if (v50)
    {
      v52 = *(unsigned __int8 *)(v0 + 832);
      v53 = swift_slowAlloc(32, -1);
      v139 = swift_slowAlloc(64, -1);
      v152 = v139;
      *(_DWORD *)v53 = 136446723;
      if (v52)
        v54 = 0x61646E6F6365732ELL;
      else
        v54 = 0x7972616D6972702ELL;
      if (v52)
        v55 = 0xEA00000000007972;
      else
        v55 = 0xE800000000000000;
      *(_QWORD *)(v0 + 568) = sub_100016940(v54, v55, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v53 + 4, v53 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2160;
      *(_QWORD *)(v0 + 576) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v53 + 14, v53 + 22);
      *(_WORD *)(v53 + 22) = 2081;
      v56 = type metadata accessor for UUID(0);
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v153 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      v154 = v58;
      v59._countAndFlagsBits = 47;
      v59._object = (void *)0xE100000000000000;
      String.append(_:)(v59);
      v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      String.append(_:)(v60);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 584) = sub_100016940(v153, v154, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v53 + 24, v53 + 32);
      swift_bridgeObjectRelease();
      sub_1002B1C94(v51);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to generate %{public}s key for %{private,mask.hash}s", (uint8_t *)v53, 0x20u);
      swift_arrayDestroy(v139, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      sub_1002B1C94(*(_QWORD *)(v0 + 704));
    }

    v61 = *(_QWORD *)(v0 + 808);
    v62 = *(_QWORD *)(v0 + 800);
    v63 = *(_QWORD *)(v0 + 792);
    v64 = *(_QWORD *)(v0 + 784);
    v65 = *(_QWORD *)(v0 + 776);
    v66 = *(_QWORD *)(v0 + 768);
    v67 = *(_QWORD *)(v0 + 760);
    v68 = *(_QWORD *)(v0 + 752);
    v130 = *(_QWORD *)(v0 + 728);
    v133 = *(_QWORD *)(v0 + 736);
    v127 = *(_QWORD *)(v0 + 720);
    v136 = *(_QWORD *)(v0 + 656);
    v69 = sub_1002B1B2C();
    v70 = swift_allocError(&type metadata for LTKGenerator.Error, v69, 0, 0);
    *v71 = 0;
    swift_willThrow(v70);
    sub_10001EF3C(v61, v62);
    sub_10001BC14(v64, v63);
    sub_10001BC14(v66, v65);
    sub_10001BC14(v68, v67);
    sub_1002B1CD0(v144, v151, v145, v147, v142, v149);
    sub_1002B1C34(v127, v130, v133);
    sub_1002B1B70(v136, (void (*)(void))sub_10001BC14);
    goto LABEL_24;
  }
  sub_10001BD08(v144, v150);
  sub_10001BBBC(v145, v146);
  sub_10001BD08(v9, v148);
  sub_10001BD08(v144, v150);
  v74 = sub_1007DFD44();
  sub_1002F7C0C(6, v74, v75);
  v137 = v153;
  v140 = v154;
  v76 = String.utf8Data.getter(0x7463656E6E6F63, 0xE700000000000000);
  v78 = v77;
  sub_10001BBBC(v144, v150);
  sub_1007E6A88(v144, v150, v76, v78, 32);
  if (!v40)
  {
    v81 = v80;
    v143 = v79;
    sub_10001EF3C(v144, v150);
    sub_1002F702C(v143, v81);
    sub_10001BC14(v76, v78);
    v84 = *(_QWORD *)(v0 + 712);
    v85 = *(_QWORD *)(v0 + 672);
    v86 = *(_QWORD *)(v0 + 648);
    v87 = v153;
    v88 = v154;
    *(_BYTE *)(v0 + 504) = *(_BYTE *)(v0 + 832);
    *(_QWORD *)(v0 + 512) = v85;
    *(_QWORD *)(v0 + 520) = v137;
    *(_QWORD *)(v0 + 528) = v140;
    *(_QWORD *)(v0 + 536) = v87;
    *(_QWORD *)(v0 + 544) = v88;
    sub_1002B1C50(v86, v84);
    sub_10001BBBC(v137, v140);
    sub_10001BBBC(v87, v88);
    sub_10001BBBC(v137, v140);
    v131 = v88;
    v134 = v87;
    v89 = sub_10001BBBC(v87, v88);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.debug.getter(v90);
    v92 = os_log_type_enabled(v90, v91);
    v114 = *(_QWORD *)(v0 + 800);
    v115 = *(_QWORD *)(v0 + 808);
    v117 = *(_QWORD *)(v0 + 784);
    v119 = *(_QWORD *)(v0 + 792);
    v121 = *(_QWORD *)(v0 + 768);
    v123 = *(_QWORD *)(v0 + 776);
    v125 = *(_QWORD *)(v0 + 752);
    v128 = *(_QWORD *)(v0 + 760);
    v112 = *(_QWORD *)(v0 + 728);
    v113 = *(_QWORD *)(v0 + 736);
    v111 = *(_QWORD *)(v0 + 720);
    v93 = *(_QWORD *)(v0 + 712);
    if (v92)
    {
      type = v91;
      v110 = *(_QWORD *)(v0 + 656);
      v94 = swift_slowAlloc(22, -1);
      v108 = swift_slowAlloc(64, -1);
      v152 = v108;
      *(_DWORD *)v94 = 136315394;
      sub_10001BBBC(v137, v140);
      sub_10001BBBC(v134, v131);
      v95 = sub_100C94784();
      v97 = v96;
      sub_10001BC14(v137, v140);
      sub_10001BC14(v134, v131);
      *(_QWORD *)(v0 + 608) = sub_100016940(v95, v97, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v94 + 4, v94 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v137, v140);
      sub_10001BC14(v134, v131);
      sub_10001BC14(v137, v140);
      sub_10001BC14(v134, v131);
      *(_WORD *)(v94 + 12) = 2080;
      v98 = type metadata accessor for UUID(0);
      v99 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v153 = dispatch thunk of CustomStringConvertible.description.getter(v98, v99);
      v154 = v100;
      v101._countAndFlagsBits = 47;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      v102._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v98, v99);
      String.append(_:)(v102);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 616) = sub_100016940(v153, v154, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v94 + 14, v94 + 22);
      swift_bridgeObjectRelease();
      sub_1002B1C94(v93);
      _os_log_impl((void *)&_mh_execute_header, v90, type, "managedKey %s for beacon %s", (uint8_t *)v94, 0x16u);
      swift_arrayDestroy(v108, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1, -1);
      swift_slowDealloc(v94, -1, -1);
      sub_10001EF3C(v144, v150);

      sub_10001EF3C(v144, v150);
      sub_10001BC14(v145, v146);
      sub_10001EF3C(v9, v148);
      sub_1002B1B70(v110, (void (*)(void))sub_10001BC14);
      sub_1002B1C34(v111, v112, v113);
      sub_10001EF3C(v144, v150);
      sub_10001BC14(v145, v146);
    }
    else
    {
      v103 = *(_QWORD *)(v0 + 656);
      sub_10001EF3C(v144, v150);

      sub_10001EF3C(v144, v150);
      sub_10001BC14(v145, v146);
      sub_10001EF3C(v9, v148);
      sub_1002B1B70(v103, (void (*)(void))sub_10001BC14);
      sub_1002B1C94(v93);
      sub_10001BC14(v137, v140);
      sub_10001BC14(v134, v88);
      sub_10001BC14(v137, v140);
      sub_10001BC14(v134, v88);
      sub_1002B1C34(v111, v112, v113);
      sub_10001EF3C(v144, v150);
      sub_10001BC14(v145, v146);
    }
    sub_10001EF3C(v9, v148);
    sub_10001EF3C(v115, v114);
    sub_10001BC14(v117, v119);
    sub_10001BC14(v121, v123);
    sub_10001BC14(v125, v128);
    v104 = *(_QWORD *)(v0 + 704);
    v105 = *(_QWORD *)(v0 + 672);
    v106 = *(_BYTE *)(v0 + 832);
    v107 = *(_QWORD *)(v0 + 640);
    swift_task_dealloc(*(_QWORD *)(v0 + 712));
    swift_task_dealloc(v104);
    *(_BYTE *)v107 = v106;
    *(_QWORD *)(v107 + 8) = v105;
    *(_QWORD *)(v107 + 16) = v137;
    *(_QWORD *)(v107 + 24) = v140;
    *(_QWORD *)(v107 + 32) = v134;
    *(_QWORD *)(v107 + 40) = v131;
    v73 = *(void (**)(void))(v0 + 8);
    goto LABEL_25;
  }
  sub_10001BC14(v76, v78);
  sub_10001EF3C(v144, v150);
  v153 = 0;
  v154 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  *(_QWORD *)(v0 + 552) = 0;
  *(_QWORD *)(v0 + 560) = 0xE000000000000000;
  v82._object = (void *)0x8000000100ECF430;
  v82._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v82);
  *(_QWORD *)(v0 + 600) = v40;
  v83 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(v0 + 600, v0 + 552, v83, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 560), "searchpartyd/KeyRepresentable.swift", 35, 2, 423, 0);
}

uint64_t sub_1002AF3A0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v7 + 728) = a7;
  *(_QWORD *)(v7 + 720) = a6;
  *(_BYTE *)(v7 + 977) = a5;
  *(_QWORD *)(v7 + 712) = a4;
  *(_BYTE *)(v7 + 976) = a3;
  *(_QWORD *)(v7 + 704) = a2;
  *(_QWORD *)(v7 + 696) = a1;
  sub_100005CF0(a2, v7 + 264, &qword_1010F5520);
  v8 = *(_OWORD *)(v7 + 280);
  *(_OWORD *)(v7 + 736) = *(_OWORD *)(v7 + 264);
  *(_OWORD *)(v7 + 752) = v8;
  *(_OWORD *)(v7 + 768) = *(_OWORD *)(v7 + 296);
  v9 = type metadata accessor for BeaconIdentifier(0);
  *(_QWORD *)(v7 + 784) = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 792) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 800) = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  *(_QWORD *)(v7 + 808) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 816) = v12;
  *(_QWORD *)(v7 + 824) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002AF474, 0, 0);
}

uint64_t sub_1002AF474()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;

  sub_100005CF0(*(_QWORD *)(v0 + 704), v0 + 216, &qword_1010F5520);
  v1 = *(_QWORD *)(v0 + 224);
  if (v1 >> 60 == 15)
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7660);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing primary root key!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_1002B1B2C();
    v8 = swift_allocError(&type metadata for LTKGenerator.Error, v7, 0, 0);
    *v9 = 3;
    swift_willThrow(v8);
    goto LABEL_29;
  }
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 232);
  v12 = *(_QWORD *)(v0 + 240);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  if (!*(_BYTE *)(v0 + 976))
  {
LABEL_18:
    v16 = *(_QWORD *)(v0 + 712);
    v19 = v16 + 96;
    if (v16 < 0xFFFFFFFFFFFFFFA0)
      goto LABEL_19;
    __break(1u);
    goto LABEL_31;
  }
  if (*(_BYTE *)(v0 + 976) == 1)
  {
    v15 = *(_QWORD *)(v0 + 712);
    if (!v15)
    {
      v44 = *(_QWORD *)(v0 + 776);
      v45 = *(_QWORD *)(v0 + 768);
      v46 = *(_QWORD *)(v0 + 760);
      v47 = *(_QWORD *)(v0 + 752);
      sub_10001BBBC(*(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744));
      sub_10001BBBC(v47, v46);
      sub_10001BBBC(v45, v44);
      if (qword_1010E9F38 == -1)
      {
LABEL_25:
        v48 = type metadata accessor for Logger(0);
        v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B7660);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.error.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Secondary index should never be 0!", v52, 2u);
          swift_slowDealloc(v52, -1, -1);
        }
        v36 = *(_QWORD *)(v0 + 704);

        v53 = sub_1002B1B2C();
        v38 = swift_allocError(&type metadata for LTKGenerator.Error, v53, 0, 0);
        v40 = 2;
        goto LABEL_28;
      }
LABEL_35:
      swift_once(&qword_1010E9F38, sub_1007A03F4);
      goto LABEL_25;
    }
    if (is_mul_ok(v15, 0x60uLL))
    {
      if (96 * v15 - 96 <= 1)
        v16 = 1;
      else
        v16 = 96 * v15 - 96;
      if (96 * v15 - 1 >= v16)
      {
        v17 = v15 + 1;
        if (is_mul_ok(v17, 0x60uLL))
        {
          v18 = 96 * v17;
          v19 = 96 * v17 - 1;
          if (v19 >= v18 - 96)
          {
LABEL_19:
            v60 = v13;
            v61 = v12;
            v59 = v11;
            *(_QWORD *)(v0 + 832) = v19;
            v20 = *(_QWORD *)(v0 + 720);
            v21 = *(_QWORD *)(v0 + 704);
            v22 = *(_QWORD *)(v0 + 696);
            *(_QWORD *)(v0 + 664) = _swiftEmptyArrayStorage;
            sub_1002B1B70(v21, (void (*)(void))sub_10001BBBC);
            v23 = sub_10075887C(v22, v16, v20);
            *(_QWORD *)(v0 + 840) = v23;
            *(_QWORD *)(v0 + 848) = v24;
            *(_QWORD *)(v0 + 856) = v25;
            v41 = v23;
            v42 = v24;
            v43 = v25;
            sub_10001BBBC(v59, v61);
            sub_10001BBBC(v10, v1);
            sub_10001BBBC(v14, v60);
            sub_1002B1C18(v41, v42, v43);
            sub_100736DBC(v59, v61, v10, v1, v14, v60, v41, v42, (uint64_t *)(v0 + 16), v43, v16);
            *(_QWORD *)(v0 + 864) = 0;
            v56 = *(_OWORD *)(v0 + 16);
            *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 32);
            v57 = *(_OWORD *)(v0 + 64);
            *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
            *(_OWORD *)(v0 + 136) = v57;
            *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 80);
            *(_OWORD *)(v0 + 88) = v56;
            sub_1002B1DA4((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_10001BD08, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
            return swift_task_switch(sub_1002AFABC, 0, 0);
          }
          __break(1u);
          goto LABEL_18;
        }
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v26 = *(_QWORD *)(v0 + 776);
  v27 = *(_QWORD *)(v0 + 768);
  v28 = *(_QWORD *)(v0 + 760);
  v29 = *(_QWORD *)(v0 + 752);
  sub_10001BBBC(*(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744));
  sub_10001BBBC(v29, v28);
  sub_10001BBBC(v27, v26);
  if (qword_1010E9F38 != -1)
LABEL_31:
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B7660);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v62 = v35;
    *(_DWORD *)v34 = 136315138;
    *(_QWORD *)(v0 + 680) = sub_100016940(0xD000000000000010, 0x8000000100EC6940, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v34 + 4, v34 + 12);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invalid key sequence %s!", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }

  v36 = *(_QWORD *)(v0 + 704);
  v37 = sub_1002B1B2C();
  v38 = swift_allocError(&type metadata for LTKGenerator.Error, v37, 0, 0);
  v40 = 1;
LABEL_28:
  *v39 = v40;
  swift_willThrow(v38);
  sub_1002B1B70(v36, (void (*)(void))sub_10001BC14);
LABEL_29:
  v54 = *(_QWORD *)(v0 + 800);
  v55 = *(_QWORD *)(v0 + 792);
  swift_task_dealloc(*(_QWORD *)(v0 + 824));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002AFABC()
{
  uint64_t v0;
  uint64_t (*v1)();
  _OWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = sub_1002AFDC0;
  }
  else
  {
    v2 = (_OWORD *)(v0 + 312);
    v22 = (_OWORD *)v0;
    v5 = *(_QWORD *)(v0 + 144);
    v4 = (uint64_t *)(v0 + 144);
    v3 = v5;
    if ((unint64_t)v4[89] >> 60 == 15)
      v6 = 0;
    else
      v6 = v4[87];
    v23 = v2;
    v24 = v4[90];
    v4[91] = v6;
    v7 = *(v4 - 7);
    v8 = *(v4 - 6);
    v9 = *(v4 - 5);
    v10 = *(v4 - 4);
    v12 = *(v4 - 3);
    v11 = *(v4 - 2);
    v4[92] = *(v4 - 1);
    v4[93] = v3;
    v13 = v4[1];
    v4[94] = v13;
    sub_10001BBBC(v3, v13);
    sub_10001BBBC(v3, v13);
    sub_10001BD08(v7, v8);
    sub_10001BBBC(v9, v10);
    sub_10001BBBC(v12, v11);
    sub_10001BBBC(v3, v13);
    sub_10001BD08(v7, v8);
    sub_10001BBBC(v9, v10);
    sub_1007E1B84(v7, v8, v9, v10, v3, v13, 1, v4 - 1, v23, v4);
    v4[95] = v24;
    if (v24)
    {
      sub_10001BC14(v3, v13);
      sub_10001BC14(v3, v13);
      sub_10001BC14(v9, v10);
      sub_10001EF3C(v7, v8);
      sub_10001EF3C(v7, v8);
      sub_10001BC14(v9, v10);
      sub_10001BC14(v12, v11);
      v14 = sub_10001BC14(v3, v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v16 = qword_1011B77E0;
      v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v18 = swift_allocObject(v17, 72, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
      v19 = _convertErrorToNSError(_:)(v24);
      *(_QWORD *)(v18 + 56) = sub_100200928();
      *(_QWORD *)(v18 + 64) = sub_100006204((unint64_t *)&qword_1010EEFA8, (uint64_t (*)(uint64_t))sub_100200928, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v18 + 32) = v19;
      os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error in TokenAsyncSequence: %@", 31, 2, v18);
      swift_bridgeObjectRelease();
      swift_errorRelease(v24);
      v1 = sub_1002B1FB0;
    }
    else
    {
      v20 = v23[1];
      v22[57] = *v23;
      v22[58] = v20;
      v22[59] = v23[2];
      sub_10001BC14(v3, v13);
      sub_10001BC14(v9, v10);
      sub_10001EF3C(v7, v8);
      sub_10001EF3C(v7, v8);
      sub_10001BC14(v9, v10);
      sub_10001BC14(v12, v11);
      sub_10001BC14(v3, v13);
      v1 = sub_1002B0540;
    }
  }
  return swift_task_switch(v1, 0, 0);
}

uint64_t sub_1002AFDC0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __objc2_ivar_list **p_ivars;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  os_log_type_t type[8];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  sub_10001BC14(v2, v1);
  sub_10001BC14(v3, v4);
  sub_10001BC14(v5, v6);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 664) + 16))
  {
    v8 = *(_BYTE *)(v0 + 977);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v10 + 32) = v8;
    v11 = String.init(format:_:)(1479684133, 0xE400000000000000, v10);
    v13 = v12;
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v14 = *(_QWORD *)(v0 + 800);
    v15 = *(_QWORD *)(v0 + 696);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7660);
    sub_1002B1C50(v15, v14);
    swift_bridgeObjectRetain(v13);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v64 = v11;
      v20 = *(unsigned __int8 *)(v0 + 976);
      v21 = swift_slowAlloc(52, -1);
      v65 = swift_slowAlloc(96, -1);
      v68 = v65;
      *(_DWORD *)v21 = 136316163;
      v22 = 0xEA00000000007972;
      v23 = 0x61646E6F6365732ELL;
      if (v20 != 1)
      {
        v23 = 0xD000000000000010;
        v22 = 0x8000000100EC6940;
      }
      if (v20)
        v24 = v23;
      else
        v24 = 0x7972616D6972702ELL;
      if (v20)
        v25 = v22;
      else
        v25 = 0xE800000000000000;
      *(_QWORD *)type = *(_QWORD *)(v0 + 808);
      v26 = *(_QWORD *)(v0 + 800);
      v27 = *(_QWORD *)(v0 + 712);
      *(_QWORD *)(v0 + 632) = sub_100016940(v24, v25, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2048;
      *(_QWORD *)(v0 + 624) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain(v13);
      *(_QWORD *)(v0 + 616) = sub_100016940(v64, v13, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease_n(v13, 3);
      *(_WORD *)(v21 + 32) = 2160;
      *(_QWORD *)(v0 + 600) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v21 + 34, v21 + 42);
      *(_WORD *)(v21 + 42) = 2081;
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)type, v28);
      v70 = v29;
      v30._countAndFlagsBits = 47;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)type, v28);
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 584) = sub_100016940(v69, v70, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v21 + 44, v21 + 52);
      swift_bridgeObjectRelease();
      sub_1002B1C94(v26);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No match for sequence %s index %llu hint %s %{private,mask.hash}s", (uint8_t *)v21, 0x34u);
      swift_arrayDestroy(v65, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 800);
      swift_bridgeObjectRelease_n(v13, 2);
      sub_1002B1C94(v32);

    }
  }
  v33 = v0 + 664;
  if (p_ivars[487] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v34 = *(_QWORD *)(v0 + 792);
  v35 = *(_QWORD *)(v0 + 696);
  v36 = type metadata accessor for Logger(0);
  sub_10001A9E8(v36, (uint64_t)qword_1011B7660);
  v37 = sub_1002B1C50(v35, v34);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = *(_QWORD *)(v0 + 856);
  v42 = *(_QWORD *)(v0 + 848);
  v43 = *(_QWORD *)(v0 + 840);
  if (v40)
  {
    v44 = *(_QWORD *)(v0 + 792);
    v60 = *(_QWORD *)(v0 + 808);
    v67 = *(_QWORD *)(v0 + 704);
    v66 = *(_QWORD *)(v0 + 840);
    v45 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v68 = v62;
    *(_DWORD *)v45 = 136315394;
    swift_beginAccess(v0 + 664, v0 + 384, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 664));
    v63 = v42;
    v47 = Array.description.getter(v46, &type metadata for ManagedCBPeripheralKeys);
    v49 = v48;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 656) = sub_100016940(v47, v49, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2080;
    v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v60, v50);
    v70 = v51;
    v52._countAndFlagsBits = 47;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v60, v50);
    String.append(_:)(v53);
    v33 = v0 + 664;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 648) = sub_100016940(v69, v70, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    sub_1002B1C94(v44);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "primaryKeys: %s for beacon %s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v45, -1, -1);
    sub_1002B1DA4((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);

    sub_1002B1B70(v67, (void (*)(void))sub_10001BC14);
    sub_1002B1C34(v66, v63, v41);
  }
  else
  {
    v54 = *(_QWORD *)(v0 + 792);
    sub_1002B1B70(*(_QWORD *)(v0 + 704), (void (*)(void))sub_10001BC14);
    sub_1002B1C34(v43, v42, v41);
    sub_1002B1C94(v54);
    sub_1002B1DA4((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);

  }
  v55 = *(_QWORD *)(v0 + 824);
  v56 = *(_QWORD *)(v0 + 800);
  v57 = *(_QWORD *)(v0 + 792);
  swift_beginAccess(v33, v0 + 360, 0, 0);
  v58 = *(_QWORD *)(v0 + 664);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v58);
}

uint64_t sub_1002B0540()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __objc2_ivar_list **p_ivars;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  Swift::String v55;
  Swift::String v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;

  v1 = *(_QWORD *)(v0 + 880);
  v141 = (_QWORD *)(v0 + 592);
  v144 = v0 + 608;
  if (v1 >= *(_QWORD *)(v0 + 832))
  {
    v145 = (_QWORD *)(v0 + 16);
    v135 = *(_QWORD *)(v0 + 944);
    v139 = *(_QWORD *)(v0 + 952);
    v127 = *(_QWORD *)(v0 + 928);
    v131 = *(_QWORD *)(v0 + 936);
    v125 = *(_QWORD *)(v0 + 920);
    v23 = *(_QWORD *)(v0 + 912);
    v24 = *(_QWORD *)(v0 + 896);
    v25 = *(_QWORD *)(v0 + 888);
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v28 = *(_QWORD *)(v0 + 120);
    v29 = *(_QWORD *)(v0 + 128);
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);
    sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
    sub_10001BC14(v27, v26);
    sub_10001BC14(v28, v29);
    sub_10001BC14(v30, v31);
    sub_10001BC14(v25, v24);
    sub_10001EF3C(v23, v125);
    sub_10001BC14(v127, v131);
    sub_10001EF3C(v135, v139);
    p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 664) + 16))
    {
      v33 = *(_BYTE *)(v0 + 977);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v35 = swift_allocObject(v34, 72, 7);
      *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v35 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v35 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v35 + 32) = v33;
      v36 = String.init(format:_:)(1479684133, 0xE400000000000000, v35);
      v38 = v37;
      if (qword_1010E9F38 != -1)
        swift_once(&qword_1010E9F38, sub_1007A03F4);
      v39 = *(_QWORD *)(v0 + 800);
      v40 = *(_QWORD *)(v0 + 696);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B7660);
      sub_1002B1C50(v40, v39);
      swift_bridgeObjectRetain(v38);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = *(unsigned __int8 *)(v0 + 976);
        v46 = swift_slowAlloc(52, -1);
        v136 = swift_slowAlloc(96, -1);
        v146 = v136;
        *(_DWORD *)v46 = 136316163;
        v47 = 0xEA00000000007972;
        v48 = 0x61646E6F6365732ELL;
        if (v45 != 1)
        {
          v48 = 0xD000000000000010;
          v47 = 0x8000000100EC6940;
        }
        if (v45)
          v49 = v48;
        else
          v49 = 0x7972616D6972702ELL;
        if (v45)
          v50 = v47;
        else
          v50 = 0xE800000000000000;
        v119 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 800);
        v52 = *(_QWORD *)(v0 + 712);
        *(_QWORD *)(v0 + 632) = sub_100016940(v49, v50, &v146);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2048;
        *(_QWORD *)(v0 + 624) = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v46 + 14, v46 + 22);
        *(_WORD *)(v46 + 22) = 2080;
        swift_bridgeObjectRetain(v38);
        *(_QWORD *)(v0 + 616) = sub_100016940(v36, v38, &v146);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v46 + 24, v46 + 32);
        swift_bridgeObjectRelease_n(v38, 3);
        *(_WORD *)(v46 + 32) = 2160;
        *(_QWORD *)(v0 + 600) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v144, v46 + 34, v46 + 42);
        *(_WORD *)(v46 + 42) = 2081;
        v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v147 = dispatch thunk of CustomStringConvertible.description.getter(v119, v53);
        v148 = v54;
        v55._countAndFlagsBits = 47;
        v55._object = (void *)0xE100000000000000;
        String.append(_:)(v55);
        v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v119, v53);
        String.append(_:)(v56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 584) = sub_100016940(v147, v148, &v146);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v141, v46 + 44, v46 + 52);
        swift_bridgeObjectRelease();
        sub_1002B1C94(v51);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "No match for sequence %s index %llu hint %s %{private,mask.hash}s", (uint8_t *)v46, 0x34u);
        swift_arrayDestroy(v136, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      }
      else
      {
        v57 = *(_QWORD *)(v0 + 800);
        swift_bridgeObjectRelease_n(v38, 2);
        sub_1002B1C94(v57);

      }
    }
    v144 = v0 + 664;
    if (p_ivars[487] == (__objc2_ivar_list *)-1)
      goto LABEL_22;
    goto LABEL_35;
  }
  v2 = *(_QWORD *)(v0 + 872);
  if (v1 < v2)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_1010E9F38, sub_1007A03F4);
LABEL_22:
    v58 = *(_QWORD *)(v0 + 792);
    v59 = *(_QWORD *)(v0 + 696);
    v60 = type metadata accessor for Logger(0);
    sub_10001A9E8(v60, (uint64_t)qword_1011B7660);
    v61 = sub_1002B1C50(v59, v58);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = *(_QWORD *)(v0 + 856);
    v66 = *(_QWORD *)(v0 + 848);
    v67 = *(_QWORD *)(v0 + 840);
    if (v64)
    {
      v122 = *(_QWORD *)(v0 + 808);
      v142 = *(_QWORD *)(v0 + 848);
      v68 = *(_QWORD *)(v0 + 792);
      v140 = *(_QWORD *)(v0 + 704);
      v69 = swift_slowAlloc(22, -1);
      v128 = swift_slowAlloc(64, -1);
      v146 = v128;
      *(_DWORD *)v69 = 136315394;
      v132 = v67;
      swift_beginAccess(v144, v0 + 384, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 664));
      v71 = Array.description.getter(v70, &type metadata for ManagedCBPeripheralKeys);
      v73 = v72;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 656) = sub_100016940(v71, v73, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v144, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      v74 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v147 = dispatch thunk of CustomStringConvertible.description.getter(v122, v74);
      v148 = v75;
      v76._countAndFlagsBits = 47;
      v76._object = (void *)0xE100000000000000;
      String.append(_:)(v76);
      v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v122, v74);
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 648) = sub_100016940(v147, v148, &v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v69 + 14, v69 + 22);
      swift_bridgeObjectRelease();
      sub_1002B1C94(v68);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "primaryKeys: %s for beacon %s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v128, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v128, -1, -1);
      swift_slowDealloc(v69, -1, -1);
      sub_1002B1DA4(v145, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);

      sub_1002B1B70(v140, (void (*)(void))sub_10001BC14);
      sub_1002B1C34(v132, v142, v65);
    }
    else
    {
      v78 = *(_QWORD *)(v0 + 792);
      sub_1002B1B70(*(_QWORD *)(v0 + 704), (void (*)(void))sub_10001BC14);
      sub_1002B1C34(v67, v66, v65);
      sub_1002B1C94(v78);
      sub_1002B1DA4(v145, (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);

    }
    v79 = *(_QWORD *)(v0 + 824);
    v80 = *(_QWORD *)(v0 + 800);
    v81 = *(_QWORD *)(v0 + 792);
    swift_beginAccess(v144, v0 + 360, 0, 0);
    v82 = *(_QWORD *)(v0 + 664);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v82);
  }
  v3 = *(_QWORD *)(v0 + 904);
  if (v1 - v2 > *(_QWORD *)(v0 + 728))
  {
    v4 = *(_QWORD *)(v0 + 896);
    v5 = *(_QWORD *)(v0 + 888);
    v6 = *(_QWORD *)(v0 + 720);
    v7 = sub_10001A9A8(&qword_1010ED1C0);
    inited = swift_initStackObject(v7, v0 + 160);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v1;
    v138 = inited + 32;
    *(_QWORD *)(inited + 40) = v5;
    *(_QWORD *)(inited + 48) = v4;
    v9 = *(_QWORD *)(v6 + 32);
    sub_10001BBBC(v5, v4);
    v10 = sub_10001A9A8(&qword_1010EF360);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10012C41C, v6, v9, &type metadata for () + 1, v10);
    v11 = *(_QWORD *)(v0 + 688);
    if (!v11)
    {
      v84 = sub_10012C434();
      v85 = swift_allocError(&type metadata for DatabaseError, v84, 0, 0);
      *(_DWORD *)v86 = 2;
      *(_BYTE *)(v86 + 4) = 1;
      swift_willThrow(v85);
      goto LABEL_27;
    }
    v12 = *(_QWORD *)(v0 + 824);
    v13 = *(_QWORD *)(v0 + 816);
    v130 = *(_QWORD *)(v0 + 808);
    v134 = v3;
    v14 = *(_QWORD *)(v0 + 720);
    v15 = *(_BYTE *)(v0 + 976);
    v16 = *(_QWORD *)(v0 + 696);
    v17 = *(_QWORD *)(v11 + 24);
    swift_retain();
    swift_release();
    v18 = swift_task_alloc(64);
    *(_QWORD *)(v18 + 16) = inited;
    *(_QWORD *)(v18 + 24) = v14;
    *(_QWORD *)(v18 + 32) = v16;
    *(_BYTE *)(v18 + 40) = v15;
    *(_QWORD *)(v18 + 48) = v17;
    v19 = UUID.init()(v18);
    v20 = UUID.uuidString.getter(v19);
    v22 = v21;
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v130);
    v3 = v134;
    Connection.savepoint(_:block:)(v20, v22, sub_1002B1E78, v18);
    swift_release();
    swift_bridgeObjectRelease();
    if (v134)
    {
      swift_task_dealloc(v18);
LABEL_27:
      v143 = *(_QWORD *)(v0 + 952);
      v133 = *(_QWORD *)(v0 + 936);
      v137 = *(_QWORD *)(v0 + 944);
      v124 = *(_QWORD *)(v0 + 920);
      v126 = *(_QWORD *)(v0 + 928);
      v121 = *(_QWORD *)(v0 + 896);
      v123 = *(_QWORD *)(v0 + 912);
      v118 = *(_QWORD *)(v0 + 856);
      v120 = *(_QWORD *)(v0 + 888);
      v87 = *(_QWORD *)(v0 + 848);
      v88 = *(_QWORD *)(v0 + 840);
      v129 = *(_QWORD *)(v0 + 704);
      v90 = *(_QWORD *)(v0 + 104);
      v89 = *(_QWORD *)(v0 + 112);
      v92 = *(_QWORD *)(v0 + 120);
      v91 = *(_QWORD *)(v0 + 128);
      v93 = *(_QWORD *)(v0 + 144);
      v94 = *(_QWORD *)(v0 + 152);
      sub_10001EF3C(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
      sub_10001BC14(v90, v89);
      sub_10001BC14(v92, v91);
      sub_10001BC14(v93, v94);
      sub_1002B1C34(v88, v87, v118);
      swift_setDeallocating(inited);
      swift_arrayDestroy(v138, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
      sub_1002B1DA4((_QWORD *)(v0 + 16), (void (*)(_QWORD, _QWORD))sub_10001EF3C, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      sub_10001BC14(v120, v121);
      sub_10001EF3C(v123, v124);
      sub_10001BC14(v126, v133);
      sub_10001EF3C(v137, v143);
      sub_1002B1B70(v129, (void (*)(void))sub_10001BC14);
      swift_bridgeObjectRelease();
      v95 = *(_QWORD *)(v0 + 800);
      v96 = *(_QWORD *)(v0 + 792);
      swift_task_dealloc(*(_QWORD *)(v0 + 824));
      swift_task_dealloc(v95);
      swift_task_dealloc(v96);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_setDeallocating(inited);
    swift_arrayDestroy(v138, *(_QWORD *)(inited + 16), &type metadata for KeyGenerationHint);
    swift_task_dealloc(v18);
    v2 = *(_QWORD *)(v0 + 880);
  }
  *(_QWORD *)(v0 + 960) = v2;
  *(_OWORD *)(v0 + 440) = *(_OWORD *)(v0 + 328);
  v97 = *(_QWORD *)(v0 + 440);
  v98 = *(_QWORD *)(v0 + 448);
  sub_100059DE8(v0 + 440);
  sub_1007E7118(v97, v98);
  v100 = v3;
  if (!v3)
  {
    v101 = v99;
    sub_1007E3D28(v99, 0);
    v115 = v101;
    v117 = v116;
    CCECCryptorRelease(v115);
    sub_1000ADA04(v0 + 440);
    __asm { BR              X10 }
  }
  v102 = static os_log_type_t.error.getter(v99);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v103 = qword_1011B77E0;
  v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v105 = swift_allocObject(v104, 72, 7);
  *(_OWORD *)(v105 + 16) = xmmword_100E22B00;
  *v141 = v100;
  swift_errorRetain(v100);
  v106 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v107 = String.init<A>(describing:)(v141, v106);
  v109 = v108;
  *(_QWORD *)(v105 + 56) = &type metadata for String;
  *(_QWORD *)(v105 + 64) = sub_10001AA00();
  *(_QWORD *)(v105 + 32) = v107;
  *(_QWORD *)(v105 + 40) = v109;
  os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "Error deriving advertisementKey: %@", 35, 2, v105);
  swift_bridgeObjectRelease();
  v110 = sub_1000D95A8();
  v111 = swift_allocError(&type metadata for CryptoTokenError, v110, 0, 0);
  *v112 = 0;
  swift_willThrow(v111);
  swift_errorRelease(v100);
  sub_1000ADA04(v0 + 440);
  v147 = 0;
  v148 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  *(_QWORD *)(v0 + 568) = 0;
  *(_QWORD *)(v0 + 576) = 0xE000000000000000;
  v113._object = (void *)0x8000000100EC7AC0;
  v113._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v113);
  *(_QWORD *)(v0 + 608) = v111;
  v114 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  _print_unlocked<A, B>(_:_:)(v144, v0 + 568, v114, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)(v0 + 568), *(_QWORD *)(v0 + 576), "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
}

uint64_t sub_1002B1828()
{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  unint64_t v18;

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v1 = sub_1002AFDC0;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 968);
    *(_QWORD *)(v0 + 872) = *(_QWORD *)(v0 + 960);
    v3 = *(_QWORD *)(v0 + 88);
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 880) = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 888) = v2;
    v8 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 896) = v8;
    sub_10001BBBC(v2, v8);
    sub_10001BBBC(v2, v8);
    sub_10001BD08(v3, v4);
    sub_10001BBBC(v5, v6);
    sub_10001BBBC(v7, v18);
    sub_10001BBBC(v2, v8);
    sub_10001BD08(v3, v4);
    sub_10001BBBC(v5, v6);
    sub_1007E1B84(v3, v4, v5, v6, v2, v8, 1, (_QWORD *)(v0 + 136), (_OWORD *)(v0 + 312), (uint64_t *)(v0 + 144));
    *(_QWORD *)(v0 + 904) = v17;
    if (v17)
    {
      sub_10001BC14(v2, v8);
      sub_10001BC14(v2, v8);
      sub_10001BC14(v5, v6);
      sub_10001EF3C(v3, v4);
      sub_10001EF3C(v3, v4);
      sub_10001BC14(v5, v6);
      sub_10001BC14(v7, v18);
      v9 = sub_10001BC14(v2, v8);
      v10 = static os_log_type_t.error.getter(v9);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v11 = qword_1011B77E0;
      v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
      v14 = _convertErrorToNSError(_:)(v17);
      *(_QWORD *)(v13 + 56) = sub_100200928();
      *(_QWORD *)(v13 + 64) = sub_100006204((unint64_t *)&qword_1010EEFA8, (uint64_t (*)(uint64_t))sub_100200928, (uint64_t)&protocol conformance descriptor for NSObject);
      *(_QWORD *)(v13 + 32) = v14;
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error in TokenAsyncSequence: %@", 31, 2, v13);
      swift_bridgeObjectRelease();
      swift_errorRelease(v17);
      v1 = sub_1002B1FB0;
    }
    else
    {
      v15 = *(_OWORD *)(v0 + 328);
      *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 312);
      *(_OWORD *)(v0 + 928) = v15;
      *(_OWORD *)(v0 + 944) = *(_OWORD *)(v0 + 344);
      sub_10001BC14(v2, v8);
      sub_10001BC14(v5, v6);
      sub_10001EF3C(v3, v4);
      sub_10001EF3C(v3, v4);
      sub_10001BC14(v5, v6);
      sub_10001BC14(v7, v18);
      sub_10001BC14(v2, v8);
      v1 = sub_1002B0540;
    }
  }
  return swift_task_switch(v1, 0, 0);
}

unint64_t sub_1002B1B2C()
{
  unint64_t result;

  result = qword_1010F5528;
  if (!qword_1010F5528)
  {
    result = swift_getWitnessTable("\tY#", &type metadata for LTKGenerator.Error);
    atomic_store(result, &qword_1010F5528);
  }
  return result;
}

uint64_t sub_1002B1B70(uint64_t a1, void (*a2)(void))
{
  sub_1002B1BA8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
  return a1;
}

uint64_t sub_1002B1BA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t result;

  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    return ((uint64_t (*)(uint64_t, uint64_t))a7)(a5, a6);
  }
  return result;
}

uint64_t sub_1002B1C18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_10001BBBC(a2, a3);
  return result;
}

uint64_t sub_1002B1C34(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_10001BC14(a2, a3);
  return result;
}

uint64_t sub_1002B1C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B1C94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B1CD0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 >> 60 != 15)
  {
    sub_10001EF3C(result, a2);
    sub_10001BC14(a3, a4);
    return sub_10001EF3C(a5, a6);
  }
  return result;
}

uint64_t sub_1002B1D28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;

  if (a3 >> 60 != 15)
  {
    sub_10001BC14(a2, a3);
    sub_10001EF3C(a4, a5);
    sub_10001BC14(a6, a7);
    return sub_10001EF3C(a8, a9);
  }
  return result;
}

_QWORD *sub_1002B1DA4(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[7];
  v10 = a1[8];
  a2(*a1, a1[1]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  return a1;
}

uint64_t sub_1002B1E20(uint64_t a1)
{
  sub_10001BD08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1002B1E4C(uint64_t a1)
{
  sub_10001EF3C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1002B1E78()
{
  uint64_t v0;

  return sub_100756E70(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t storeEnumTagSinglePayload for LTKGenerator.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1002B1EE8 + 4 * byte_100E30B75[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002B1F1C + 4 * byte_100E30B70[v4]))();
}

uint64_t sub_1002B1F1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B1F24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B1F2CLL);
  return result;
}

uint64_t sub_1002B1F38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B1F40);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1002B1F44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B1F4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LTKGenerator.Error()
{
  return &type metadata for LTKGenerator.Error;
}

unint64_t sub_1002B1F6C()
{
  unint64_t result;

  result = qword_1010F5540[0];
  if (!qword_1010F5540[0])
  {
    result = swift_getWitnessTable("aY#", &type metadata for LTKGenerator.Error);
    atomic_store(result, qword_1010F5540);
  }
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents);
}

Swift::Int sub_1002B1FC0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1002B2004()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1002B2030()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

_QWORD *sub_1002B2070@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;

  if (*result >= 4uLL)
    v2 = 3;
  else
    v2 = 0x2010003u >> (8 * *result);
  *a2 = v2;
  return result;
}

void sub_1002B2098(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_1002B20A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t type metadata accessor for AttachedAccessoryEvents.DetectionEventType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents.DetectionEventType);
}

uint64_t type metadata accessor for AttachedAccessoryEvents.ConnectionEventType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents.ConnectionEventType);
}

uint64_t sub_1002B20CC(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002B2118 + 4 * byte_100E30C45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002B214C + 4 * byte_100E30C40[v4]))();
}

uint64_t sub_1002B214C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B2154(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B215CLL);
  return result;
}

uint64_t sub_1002B2168(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B2170);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002B2174(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B217C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents.AttachmentEventType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents.AttachmentEventType);
}

uint64_t storeEnumTagSinglePayload for EventGroup(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1002B21E0 + 4 * byte_100E30C4F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002B2214 + 4 * byte_100E30C4A[v4]))();
}

uint64_t sub_1002B2214(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B221C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002B2224);
  return result;
}

uint64_t sub_1002B2230(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002B2238);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1002B223C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002B2244(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventGroup()
{
  return &type metadata for EventGroup;
}

uint64_t sub_1002B2260(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002B22A0 + 4 * byte_100E30C54[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1002B22C0 + 4 * byte_100E30C59[v4]))();
}

_BYTE *sub_1002B22A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1002B22C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002B22C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002B22D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1002B22D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1002B22E0(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents.Error);
}

uint64_t sub_1002B22F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1002B2300(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "(";
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 24);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1002B2390(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 40;
  v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
    swift_retain(v18);
  }
  else
  {
    v19 = v8;
    v20 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v21 = ((unint64_t)a2 + v11) & v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v20, v21, v19);
    v22 = (v13 + (((unint64_t)a1 + v11) & v20)) & 0xFFFFFFFFFFFFFFF8;
    v23 = (v13 + v21) & 0xFFFFFFFFFFFFFFF8;
    v24 = *(_QWORD *)(v23 + 24);
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(v23 + 32);
    (**(void (***)(void))(v24 - 8))();
  }
  return a1;
}

uint64_t sub_1002B24C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1002B2534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  (**(void (***)(void))(v16 - 8))();
  return a1;
}

uint64_t sub_1002B25E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  sub_1001BA974((_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFFFF8), (_QWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFFFF8));
  return a1;
}

uint64_t sub_1002B2674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  v16 = *(_QWORD *)(v15 + 32);
  v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  *(_QWORD *)(v14 + 32) = v16;
  return a1;
}

uint64_t sub_1002B2714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)v14);
  v16 = *(_OWORD *)v15;
  v17 = *(_OWORD *)(v15 + 16);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  *(_OWORD *)v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  return a1;
}

uint64_t sub_1002B27BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v12 = v8;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v6 + 64) + v13;
  v15 = *(_QWORD *)(v9 + 64) + 7;
  if (v11 < a2)
  {
    if (((((v15 + (v14 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v21 = a1;
    v10 = v7;
    v12 = v5;
    return v20(v21, v10, v12);
  }
  v21 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }
  v22 = *(_QWORD *)(((v15 + v21) & 0xFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  return (v22 + 1);
}

void sub_1002B294C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  if (v10 >= a3)
  {
    v13 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v11 = a3 - v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X15 }
  }
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) != 0xFFFFFFD8)
  {
    v14 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64)+ 7+ ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 40);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_1002B2A7C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1002B2B24);
}

void sub_1002B2A84()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x1002B2A8CLL);
  JUMPOUT(0x1002B2B24);
}

void sub_1002B2ADC()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1002B2B24);
}

void sub_1002B2AE4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1002B2B24);
}

uint64_t sub_1002B2AEC@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v11 + v14) = 0;
  if (!(_DWORD)v10)
    JUMPOUT(0x1002B2B24);
  if ((_DWORD)v13 == v7)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v4 = v11;
    v5 = v10;
    a1 = v13;
    a2 = v12;
  }
  else
  {
    v4 = (v8 + v11) & v9;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x1002B2AF8);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v10;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AttachedAccessoryEvents.EventAtTimeWithType);
}

uint64_t sub_1002B2B4C(char a1)
{
  if ((a1 & 1) != 0)
    return 4;
  else
    return 1;
}

uint64_t sub_1002B2B5C(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 4)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 1)
    return 0;
  else
    return v1;
}

uint64_t sub_1002B2B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E30F28, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2BC8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E30F28, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E30F28);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E30F28);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2CB4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002B2B5C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002B2CE0@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1002B2B4C(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1002B2D10()
{
  char *v0;

  return sub_1002B2B4C(*v0);
}

uint64_t sub_1002B2D20(char a1)
{
  if ((a1 & 1) != 0)
    return 4;
  else
    return 2;
}

uint64_t sub_1002B2D34(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 4)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 2)
    return 0;
  else
    return v1;
}

uint64_t sub_1002B2D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(")Y#", a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2DA0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(")Y#", a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(")Y#");
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(")Y#");
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B2E8C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002B2D34(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002B2EB8@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1002B2D20(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1002B2EE8()
{
  char *v0;

  return sub_1002B2D20(*v0);
}

uint64_t sub_1002B2EF8()
{
  return 2;
}

uint64_t sub_1002B2F00(char a1)
{
  return (a1 & 1u) + 3;
}

BOOL sub_1002B2F0C(char a1)
{
  return (a1 & 1) == 0;
}

BOOL sub_1002B2F18(uint64_t a1, char a2)
{
  return (a2 & 1) == 0 && sub_1002B2F2C(a1);
}

BOOL sub_1002B2F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16[2];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)v16 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)v16 - v10;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v12 = sub_100C1AE9C(v16[1]);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, a1, v2);
  Date.addingTimeInterval(_:)((double)v12);
  static Date.trustedNow.getter((uint64_t)v6);
  v13 = Date.timeIntervalSince(_:)(v6);
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v14(v9, v2);
  v14(v11, v2);
  return v13 <= 0.0;
}

uint64_t sub_1002B30B8(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 4)
    v1 = 1;
  else
    v1 = 2;
  if (a1 == 3)
    return 0;
  else
    return v1;
}

uint64_t sub_1002B30D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E31068, a3);
  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B3124(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E31068, a1);
  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B3170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E31068);
  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B31C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E31068);
  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1002B3210@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1002B30B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002B323C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = sub_1002B2F00(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1002B326C()
{
  char *v0;

  return sub_1002B2F00(*v0);
}

BOOL sub_1002B327C()
{
  char *v0;

  return sub_1002B2F0C(*v0);
}

BOOL sub_1002B328C(uint64_t a1)
{
  char *v1;

  return sub_1002B2F18(a1, *v1);
}

BOOL sub_1002B329C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  char v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  char *v40;
  char *v41;

  v6 = type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType(0, a3, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v41 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v40 = (char *)&v40 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v40 - v16;
  v18 = (_QWORD *)(a1 + *(int *)(v15 + 32));
  v19 = v18[3];
  v20 = v18[4];
  sub_10001AA44(v18, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
  v22 = (_QWORD *)(a2 + *(int *)(v6 + 32));
  v24 = v22[3];
  v23 = v22[4];
  sub_10001AA44(v22, v24);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v24, v23);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v26(v17, a1, v6);
  v26(v14, a2, v6);
  if (v21 == v25)
    v27 = static Date.== infix(_:_:)(&v17[*(int *)(v6 + 28)], &v14[*(int *)(v6 + 28)]);
  else
    v27 = 0;
  v28 = *(void (**)(char *, uint64_t))(v7 + 8);
  v28(v14, v6);
  v28(v17, v6);
  v29 = v40;
  v26(v40, a1, v6);
  v30 = v41;
  v26(v41, a2, v6);
  if ((v27 & 1) != 0)
  {
    v31 = &v29[*(int *)(v6 + 32)];
    v32 = *((_QWORD *)v31 + 3);
    v33 = *((_QWORD *)v31 + 4);
    sub_10001AA44(v31, v32);
    v34 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
    v35 = &v30[*(int *)(v6 + 32)];
    v36 = *((_QWORD *)v35 + 3);
    v37 = *((_QWORD *)v35 + 4);
    sub_10001AA44(v35, v36);
    v38 = v34 == (*(unsigned __int8 (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  }
  else
  {
    v38 = 0;
  }
  v28(v29, v6);
  v28(v30, v6);
  return v38;
}

uint64_t sub_1002B34E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;

  v6 = type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType(0, a3, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v41 - v12;
  v14 = (_QWORD *)(a1 + *(int *)(v11 + 32));
  v15 = v14[3];
  v16 = v14[4];
  v42 = v14;
  sub_10001AA44(v14, v15);
  LOBYTE(v45) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  v45 = v45;
  v17 = (_QWORD *)(a2 + *(int *)(v6 + 32));
  v18 = v17[3];
  v19 = v17[4];
  sub_10001AA44(v17, v18);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  v46 = v7;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v43 = a1;
  v22 = a1;
  v23 = v10;
  v21(v13, v22, v6);
  v44 = a2;
  v21(v10, a2, v6);
  if (v45 == v20)
  {
    v24 = *(void (**)(char *, uint64_t))(v46 + 8);
    v24(v13, v6);
    v24(v10, v6);
  }
  else
  {
    v25 = &v13[*(int *)(v6 + 32)];
    v26 = *((_QWORD *)v25 + 3);
    v27 = *((_QWORD *)v25 + 4);
    sub_10001AA44(v25, v26);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
    v29 = &v23[*(int *)(v6 + 32)];
    v31 = *((_QWORD *)v29 + 3);
    v30 = *((_QWORD *)v29 + 4);
    sub_10001AA44(v29, v31);
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v31, v30);
    v33 = *(void (**)(char *, uint64_t))(v46 + 8);
    v33(v13, v6);
    v33(v23, v6);
    if (v28 != v32)
    {
      v35 = v42[3];
      v36 = v42[4];
      sub_10001AA44(v42, v35);
      v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
      v38 = v17[3];
      v39 = v17[4];
      sub_10001AA44(v17, v38);
      v34 = v37 < (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v38, v39);
      return v34 & 1;
    }
  }
  v34 = static Date.> infix(_:_:)(v43 + *(int *)(v6 + 28), v44 + *(int *)(v6 + 28));
  return v34 & 1;
}

uint64_t sub_1002B3740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B34E4(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

BOOL sub_1002B3754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1002B329C(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_1002B375C(uint64_t a1)
{
  return swift_getWitnessTable(byte_100E30DB0, a1);
}

uint64_t sub_1002B376C(uint64_t a1)
{
  return swift_getWitnessTable(")Z#", a1);
}

unint64_t sub_1002B3780()
{
  unint64_t result;

  result = qword_1010F5848;
  if (!qword_1010F5848)
  {
    result = swift_getWitnessTable(byte_100E30F00, &type metadata for EventGroup);
    atomic_store(result, (unint64_t *)&qword_1010F5848);
  }
  return result;
}

uint64_t sub_1002B37C4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100E30FA0, a1);
}

uint64_t sub_1002B37D4(uint64_t a1)
{
  return swift_getWitnessTable("IX#", a1);
}

uint64_t sub_1002B37E4(uint64_t a1)
{
  return swift_getWitnessTable(byte_100E310E0, a1);
}

uint64_t type metadata accessor for CompanionPublishActivity()
{
  return objc_opt_self(_TtC12searchpartyd24CompanionPublishActivity);
}

unint64_t sub_1002B3818(uint64_t a1)
{
  unint64_t result;

  result = sub_1002B383C();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002B383C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F5910;
  if (!qword_1010F5910)
  {
    v1 = type metadata accessor for CompanionPublishActivity();
    result = swift_getWitnessTable(byte_100E311D8, v1);
    atomic_store(result, (unint64_t *)&qword_1010F5910);
  }
  return result;
}

_QWORD *sub_1002B3880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v3 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v3);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v22[1] = v1;
    v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v8 = *((_QWORD *)v7 - 1);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    v22[0] = a1;
    swift_bridgeObjectRetain(a1);
    v25 = _swiftEmptyArrayStorage;
    v23 = v10;
    v24 = v3;
    while (1)
    {
      sub_10005972C(v9 + v7[6], (uint64_t)v5, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v3);
      if (EnumCaseMultiPayload == 3)
        break;
      if (EnumCaseMultiPayload == 2)
      {
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      sub_1000126B0((uint64_t)v5, type metadata accessor for StableIdentifier);
LABEL_4:
      v9 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v25;
      }
    }
    sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v5, v13);
    v14 = sub_1001EE37C(*(_QWORD *)(v9 + v7[16]), *(_QWORD *)(v9 + v7[17]));
    if (v15 >> 60 != 15)
    {
      v16 = v14;
      v17 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0)
        v18 = v25;
      else
        v18 = sub_1007C9134(0, v25[2] + 1, 1, v25);
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
        v18 = sub_1007C9134((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
      v18[2] = v20 + 1;
      v25 = v18;
      v11 = &v18[2 * v20];
      v11[4] = v16;
      v11[5] = v17;
      v10 = v23;
      v3 = v24;
    }
    goto LABEL_4;
  }
  return _swiftEmptyArrayStorage;
}

void sub_1002B3AF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  _QWORD *v44;

  v41 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v2 = __chkstk_darwin(v41);
  v40 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __chkstk_darwin(v2);
  v38 = (uint64_t *)((char *)&v35 - v5);
  __chkstk_darwin(v4);
  v39 = (uint64_t *)((char *)&v35 - v6);
  v7 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v42 = a1;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = v38;
  v44 = _swiftEmptyArrayStorage;
  if (!v10)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v43 = v11;
  for (i = v13 | (v11 << 6); ; i = __clz(__rbit64(v16)) + (v17 << 6))
  {
    v19 = *(_QWORD *)(v42 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v23 = v19 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup.PairingState(0) - 8) + 72) * i;
    v24 = v41;
    v25 = v39;
    sub_10005972C(v23, (uint64_t)v39 + *(int *)(v41 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    *v25 = v21;
    v25[1] = v22;
    sub_100005CF0((uint64_t)v25, (uint64_t)v12, (uint64_t *)&unk_1010F9880);
    v26 = *(int *)(v24 + 48);
    v27 = v40;
    v28 = (uint64_t)v40 + v26;
    v30 = *v12;
    v29 = v12[1];
    *v40 = *v12;
    v27[1] = v29;
    sub_10005972C((uint64_t)v12 + v26, (uint64_t)v27 + v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001BBBC(v21, v22);
    sub_10001BBBC(v30, v29);
    sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F9880);
    v31 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      v31 = sub_1007C78E0(0, v31[2] + 1, 1, v31);
    v33 = v31[2];
    v32 = v31[3];
    if (v33 >= v32 >> 1)
      v31 = sub_1007C78E0((_QWORD *)(v32 > 1), v33 + 1, 1, v31);
    v31[2] = v33 + 1;
    v34 = &v31[2 * v33];
    v34[4] = v30;
    v34[5] = v29;
    v11 = v43;
    v44 = v31;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v15 >= v37)
      goto LABEL_27;
    v16 = *(_QWORD *)(v36 + 8 * v15);
    v17 = v11 + 1;
    if (!v16)
    {
      v17 = v11 + 2;
      if (v11 + 2 >= v37)
        goto LABEL_27;
      v16 = *(_QWORD *)(v36 + 8 * v17);
      if (!v16)
      {
        v17 = v11 + 3;
        if (v11 + 3 >= v37)
          goto LABEL_27;
        v16 = *(_QWORD *)(v36 + 8 * v17);
        if (!v16)
        {
          v17 = v11 + 4;
          if (v11 + 4 >= v37)
            goto LABEL_27;
          v16 = *(_QWORD *)(v36 + 8 * v17);
          if (!v16)
            break;
        }
      }
    }
LABEL_20:
    v10 = (v16 - 1) & v16;
    v43 = v17;
  }
  v18 = v11 + 5;
  if (v11 + 5 >= v37)
  {
LABEL_27:
    swift_release();
    return;
  }
  v16 = *(_QWORD *)(v36 + 8 * v18);
  if (v16)
  {
    v17 = v11 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v37)
      goto LABEL_27;
    v16 = *(_QWORD *)(v36 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

void sub_1002B3E50(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  int64_t v53;
  _OWORD *v54;

  v42 = a2;
  v50 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v41 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v51 = (_OWORD *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v54 = (_OWORD *)((char *)&v41 - v9);
  __chkstk_darwin(v8);
  v49 = (uint64_t *)((char *)&v41 - v10);
  v11 = *(_QWORD *)(a1 + 64);
  v45 = a1 + 64;
  v12 = 1 << *(_BYTE *)(a1 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v46 = (unint64_t)(v12 + 63) >> 6;
  v47 = v4 + 2;
  swift_bridgeObjectRetain(a1);
  v15 = 0;
  v43 = v4;
  v44 = v5;
  while (1)
  {
    if (v14)
    {
      v52 = (v14 - 1) & v14;
      v53 = v15;
      v16 = __clz(__rbit64(v14)) | (v15 << 6);
      goto LABEL_24;
    }
    v17 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v17 >= v46)
      goto LABEL_30;
    v18 = *(_QWORD *)(v45 + 8 * v17);
    v19 = v15 + 1;
    if (!v18)
    {
      v19 = v15 + 2;
      if (v15 + 2 >= v46)
        goto LABEL_30;
      v18 = *(_QWORD *)(v45 + 8 * v19);
      if (!v18)
      {
        v19 = v15 + 3;
        if (v15 + 3 >= v46)
          goto LABEL_30;
        v18 = *(_QWORD *)(v45 + 8 * v19);
        if (!v18)
        {
          v19 = v15 + 4;
          if (v15 + 4 >= v46)
            goto LABEL_30;
          v18 = *(_QWORD *)(v45 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_23:
    v52 = (v18 - 1) & v18;
    v53 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_24:
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
    v22 = *v21;
    v23 = v21[1];
    v24 = v49;
    sub_10005972C(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v48 + 72) * v16, (uint64_t)v49 + *(int *)(v5 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    *v24 = v22;
    v24[1] = v23;
    v25 = v54;
    sub_100005CF0((uint64_t)v24, (uint64_t)v54, (uint64_t *)&unk_1010F9880);
    v26 = *(int *)(v5 + 48);
    v27 = v51;
    v28 = (uint64_t)v51 + v26;
    *v51 = *v25;
    sub_10005972C((uint64_t)v25 + v26, (uint64_t)v27 + v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10005972C(v28, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v50);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_10001BBBC(v22, v23);
        sub_1000126B0((uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
        goto LABEL_5;
      }
      v30 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v31 = (uint64_t *)&v4[v30[16]];
      v32 = a1;
      v34 = *v31;
      v33 = v31[1];
      sub_10001BBBC(v22, v23);
      v35 = v34;
      a1 = v32;
      v4 = v43;
      sub_10001EF3C(v35, v33);
      v36 = v47[v30[24]];
      v37 = v30[12];
      v5 = v44;
      sub_100004048((uint64_t)&v4[v37], (uint64_t *)&unk_1010F9890);
      v38 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v4, v38);
    }
    else
    {
      v39 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v36 = v47[*(int *)(v39 + 48)];
      sub_10001BBBC(v22, v23);
      sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F9890);
    }
    sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v36 == 2)
    {
      swift_release();
      v40 = v42;
      sub_100005CF0((uint64_t)v54, v42, (uint64_t *)&unk_1010F9880);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v40, 0, 1, v5);
      return;
    }
LABEL_5:
    sub_100004048((uint64_t)v54, (uint64_t *)&unk_1010F9880);
    v14 = v52;
    v15 = v53;
  }
  v20 = v15 + 5;
  if (v15 + 5 >= v46)
  {
LABEL_30:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, 1, 1, v5);
    return;
  }
  v18 = *(_QWORD *)(v45 + 8 * v20);
  if (v18)
  {
    v19 = v15 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v46)
      goto LABEL_30;
    v18 = *(_QWORD *)(v45 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

void sub_1002B42AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  int64_t v55;

  v43 = a2;
  v52 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v50 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v42 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v53 = (_OWORD *)((char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v10 = (_OWORD *)((char *)&v42 - v9);
  __chkstk_darwin(v8);
  v51 = (uint64_t *)((char *)&v42 - v11);
  v12 = *(_QWORD *)(a1 + 64);
  v46 = a1 + 64;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v47 = (unint64_t)(v13 + 63) >> 6;
  v48 = v4 + 2;
  swift_bridgeObjectRetain(a1);
  v16 = 0;
  v49 = v10;
  v44 = v4;
  v45 = v5;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v54 = (v15 - 1) & v15;
  v55 = v16;
  for (i = __clz(__rbit64(v15)) | (v16 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    v22 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v23 = *v22;
    v24 = v22[1];
    v25 = v51;
    sub_10005972C(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v50 + 72) * i, (uint64_t)v51 + *(int *)(v5 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    *v25 = v23;
    v25[1] = v24;
    sub_100005CF0((uint64_t)v25, (uint64_t)v10, (uint64_t *)&unk_1010F9880);
    v26 = *(int *)(v5 + 48);
    v27 = v53;
    v28 = (uint64_t)v53 + v26;
    *v53 = *v10;
    sub_10005972C((uint64_t)v10 + v26, (uint64_t)v27 + v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10005972C(v28, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v52);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_10001BBBC(v23, v24);
        sub_1000126B0((uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_30:
        swift_release();
        v41 = v43;
        sub_100005CF0((uint64_t)v49, v43, (uint64_t *)&unk_1010F9880);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v41, 0, 1, v5);
        return;
      }
      v30 = (int *)sub_10001A9A8(&qword_1010F5DC0);
      v31 = (uint64_t *)&v4[v30[16]];
      v32 = a1;
      v34 = *v31;
      v33 = v31[1];
      sub_10001BBBC(v23, v24);
      v35 = v34;
      a1 = v32;
      v4 = v44;
      sub_10001EF3C(v35, v33);
      v36 = v48[v30[24]];
      v37 = v30[12];
      v5 = v45;
      sub_100004048((uint64_t)&v4[v37], (uint64_t *)&unk_1010F9890);
      v38 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v4, v38);
      v39 = v28;
    }
    else
    {
      v40 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v36 = v48[*(int *)(v40 + 48)];
      sub_10001BBBC(v23, v24);
      sub_100004048((uint64_t)v4, (uint64_t *)&unk_1010F9890);
      v39 = v28;
    }
    sub_1000126B0(v39, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v36 != 2)
      goto LABEL_30;
    v10 = v49;
    sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010F9880);
    v16 = v55;
    v15 = v54;
    if (v54)
      goto LABEL_4;
LABEL_5:
    v18 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v18 >= v47)
      goto LABEL_28;
    v19 = *(_QWORD *)(v46 + 8 * v18);
    v20 = v16 + 1;
    if (!v19)
    {
      v20 = v16 + 2;
      if (v16 + 2 >= v47)
        goto LABEL_28;
      v19 = *(_QWORD *)(v46 + 8 * v20);
      if (!v19)
      {
        v20 = v16 + 3;
        if (v16 + 3 >= v47)
          goto LABEL_28;
        v19 = *(_QWORD *)(v46 + 8 * v20);
        if (!v19)
        {
          v20 = v16 + 4;
          if (v16 + 4 >= v47)
            goto LABEL_28;
          v19 = *(_QWORD *)(v46 + 8 * v20);
          if (!v19)
            break;
        }
      }
    }
LABEL_20:
    v54 = (v19 - 1) & v19;
    v55 = v20;
  }
  v21 = v16 + 5;
  if (v16 + 5 >= v47)
  {
LABEL_28:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v43, 1, 1, v5);
    return;
  }
  v19 = *(_QWORD *)(v46 + 8 * v21);
  if (v19)
  {
    v20 = v16 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v47)
      goto LABEL_28;
    v19 = *(_QWORD *)(v46 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_1002B4720()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6CA8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6CA8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x5063697373616C63, 0xEE00676E69726961);
}

uint64_t sub_1002B47A0()
{
  uint64_t v0;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1011B6CA8);
}

uint64_t sub_1002B47E8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  sub_1000234D8(v0, qword_1010F5918);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010F5918);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v1, 10.0);
}

id sub_1002B4834()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 128);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v3 = swift_unownedRetainStrong(v0);
    v4 = swift_unownedRetain(v3);
    swift_unownedRetain(v4);
    swift_release();
    v5 = (void *)objc_opt_self(BluetoothManager);
    swift_unownedRetainStrong(v0);
    v6 = *(id *)(v0 + 48);
    swift_release();
    objc_msgSend(v5, "setSharedInstanceQueue:", v6);

    v2 = objc_msgSend(v5, "sharedInstance");
    swift_unownedRelease(v0);
    swift_unownedRelease(v0);
    v7 = *(void **)(v0 + 128);
    *(_QWORD *)(v0 + 128) = v2;
    v8 = v2;
    sub_1002DFB70(v7);
  }
  sub_1002DFB80(v1);
  return v2;
}

unint64_t sub_1002B4908()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _OWORD v31[2];
  uint64_t v32[4];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 48);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once(&qword_1010EA318, sub_100B5E330);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v4);
    v18 = swift_errorRetain(v4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v32[0] = v22;
      *(_DWORD *)v21 = 136446210;
      *(_QWORD *)&v31[0] = v4;
      swift_errorRetain(v4);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v24 = String.init<A>(describing:)(v31, v23);
      *(_QWORD *)&v31[0] = sub_100016940(v24, v25, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, (char *)v31 + 8, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to retrieve lastRetryAttempt due to %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    v26 = sub_1006B9B8C((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v4);
    goto LABEL_14;
  }
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "objectForKey:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v31, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v31, 0, sizeof(v31));
  }
  sub_100005CF0((uint64_t)v31, (uint64_t)v32, (uint64_t *)&unk_1010F6390);
  if (v32[3])
  {
    if ((swift_dynamicCast(&v29, v32, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v1 = v29;
      v2 = v30;
      sub_10001BBBC(v29, v30);
      v10 = type metadata accessor for MACAddress(0);
      v11 = type metadata accessor for Date(0);
      v12 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v13 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v14 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v15 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v16 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v26 = Dictionary<>.init(dataRepresentation:)(v1, v2, v10, v11, v12, v13, v14, v15, v16);
LABEL_14:
      sub_10001BC14(v1, v2);
      return v26;
    }
  }
  else
  {
    sub_100004048((uint64_t)v32, (uint64_t *)&unk_1010F6390);
  }
  return sub_1006B9B8C((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1002B4D6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Class isa;
  NSString v21;
  uint64_t v22;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 48);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = type metadata accessor for MACAddress(0);
    v11 = type metadata accessor for Date(0);
    v12 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v13 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v14 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v15 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v16 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v17 = Dictionary<>.dataRepresentation.getter(a1, v10, v11, v12, v13, v14, v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v17, v19);
    v21 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setObject:forKey:", isa, v21);

  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1002B4F98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD v28[2];
  uint64_t v29[4];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 48);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once(&qword_1010EA318, sub_100B5E330);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v4);
    v15 = swift_errorRetain(v4);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v29[0] = v19;
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)&v28[0] = v4;
      swift_errorRetain(v4);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v21 = String.init<A>(describing:)(v28, v20);
      *(_QWORD *)&v28[0] = sub_100016940(v21, v22, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v28, (char *)v28 + 8, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to retrieve lastRetryAttempt due to %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    v23 = sub_1006B9D44((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v4);
    goto LABEL_14;
  }
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "objectForKey:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v28, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v28, 0, sizeof(v28));
  }
  sub_100005CF0((uint64_t)v28, (uint64_t)v29, (uint64_t *)&unk_1010F6390);
  if (v29[3])
  {
    if ((swift_dynamicCast(&v26, v29, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v1 = v26;
      v2 = v27;
      sub_10001BBBC(v26, v27);
      v10 = type metadata accessor for MACAddress(0);
      v11 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v12 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v13 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v23 = Dictionary<>.init(dataRepresentation:)(v1, v2, v10, &type metadata for Int, v11, v12, v13, &protocol witness table for Int, &protocol witness table for Int);
LABEL_14:
      sub_10001BC14(v1, v2);
      return v23;
    }
  }
  else
  {
    sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010F6390);
  }
  return sub_1006B9D44((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1002B53C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Class isa;
  NSString v18;
  uint64_t v19;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 48);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = type metadata accessor for MACAddress(0);
    v11 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v12 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v13 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v14 = Dictionary<>.dataRepresentation.getter(a1, v10, &type metadata for Int, v11, v12, v13, &protocol witness table for Int, &protocol witness table for Int);
    v16 = v15;
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v14, v16);
    v18 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setObject:forKey:", isa, v18);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002B559C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  id v19;
  int v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v6 = sub_100C1B7E8(v24);
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
    return 1;
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v7 = sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pairing retry on all devices is NOT allowed from server. Checking for Me device or only connectable device.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v11 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v24, v11);
  swift_release();
  v12 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v13 = swift_retain();
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(24, -1);
    *(_DWORD *)v16 = 67240704;
    LODWORD(v24) = v12 == 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + 8) = 2048;
    v24 = *(_QWORD *)(v1 + 152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 10, v16 + 18);
    swift_release();
    *(_WORD *)(v16 + 18) = 1026;
    result = (uint64_t)objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
    if (!result)
    {
      __break(1u);
      goto LABEL_24;
    }
    v18 = (void *)result;
    v19 = objc_msgSend((id)result, "aa_primaryAppleAccount");

    if (v19)
    {

      v20 = 1;
    }
    else
    {
      v20 = 0;
    }
    LODWORD(v24) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, (char *)&v24 + 4, v16 + 20, v16 + 24);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "isPairingRetryAllowed: isMeDevice %{BOOL,public}d, connectableDevicesCount %ld, isiCloudSignedIn %{BOOL,public}d.", (uint8_t *)v16, 0x18u);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v12 == 1 || *(_QWORD *)(v1 + 152) == 1)
    return 1;
  result = (uint64_t)objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v21 = (void *)result;
    v22 = objc_msgSend((id)result, "aa_primaryAppleAccount");

    if (v22)
    {

      return 0;
    }
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1002B5974()
{
  _BYTE *v0;

  if (*v0)
    return 0x74756F656D69742ELL;
  else
    return 0x6E776F6E6B6E752ELL;
}

void sub_1002B59A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67[2];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F5F70);
  v3 = *(_QWORD *)(v2 - 8);
  v61 = v2;
  v62 = v3;
  __chkstk_darwin(v2);
  v59 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F5F78);
  v6 = *(_QWORD *)(v5 - 8);
  v63 = v5;
  v64 = v6;
  __chkstk_darwin(v5);
  v58 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F5F80);
  v9 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  v66 = v9;
  __chkstk_darwin(v8);
  v60 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F5F88);
  v51 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10001A9A8(&qword_1010F5F90);
  v52 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_10001A9A8(&qword_1010F5F98);
  v56 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *(_QWORD *)(v0 + 16);
  v67[0] = (id)sub_10001EDD0();
  v21 = sub_10001A9A8(&qword_1010EE3E0);
  v22 = type metadata accessor for OwnedBeaconGroup(0);
  v55 = v22;
  v23 = sub_1000193A4(&qword_1010EE3E8, &qword_1010EE3E0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_1002B6014, 0, v21, v22, v23);
  swift_release();
  v24 = sub_1000193A4(&qword_1010F5FA0, &qword_1010F5F88, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v53 = sub_100006204((unint64_t *)&unk_1010F97C0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3AAD0);
  Publisher<>.removeDuplicates()(v14, v24, v53);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v14);
  v67[0] = *(id *)(v1 + 48);
  v25 = v67[0];
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v51 = *(_QWORD *)(*(_QWORD *)(v26 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v51)(v13, 1, 1, v26);
  v27 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v49 = v27;
  v28 = sub_1000193A4(&qword_1010F5FA8, &qword_1010F5F90, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v29 = sub_1001C7EF4();
  v30 = v25;
  v31 = v50;
  Publisher.receive<A>(on:options:)(v67, v13, v50, v27, v28, v29);
  sub_100004048((uint64_t)v13, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v31);
  v32 = sub_1000193A4(&qword_1010F5FB0, &qword_1010F5F98, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v33 = v54;
  v34 = Publisher<>.sink(receiveValue:)(sub_1002DFB68, v1, v54, v32);
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v20, v33);
  *(_QWORD *)(v1 + 80) = v34;
  swift_release();
  v67[0] = *(id *)(v57 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  v35 = sub_10001A9A8((uint64_t *)&unk_101105980);
  v36 = sub_1000193A4(&qword_1010F5FB8, (uint64_t *)&unk_101105980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v37 = v59;
  Publisher.compactMap<A>(_:)(sub_1002B6020, 0, v35, v55, v36);
  swift_release();
  v38 = sub_1000193A4(&qword_1010F5FC0, &qword_1010F5F70, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v39 = v58;
  v40 = v61;
  Publisher<>.removeDuplicates()(v61, v38, v53);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v40);
  v67[0] = v30;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v51)(v13, 1, 1, v26);
  v41 = sub_1000193A4(&qword_1010F5FC8, &qword_1010F5F78, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v42 = v30;
  v43 = v60;
  v44 = v63;
  Publisher.receive<A>(on:options:)(v67, v13, v63, v49, v41, v29);
  sub_100004048((uint64_t)v13, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v64 + 8))(v39, v44);
  v45 = sub_1000193A4(&qword_1010F5FD0, &qword_1010F5F80, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v46 = v65;
  v47 = Publisher<>.sink(receiveValue:)(sub_1002DFB6C, v1, v65, v45);
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v46);
  *(_QWORD *)(v1 + 88) = v47;
  swift_release();
  sub_1002BEC2C();
  sub_1002B9E78();

  v48 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v48, "addObserver:selector:name:object:", v1, "pairedDeviceNameChanged:", BluetoothMagicPairedDeviceNameChangedNotification, 0);

}

uint64_t sub_1002B6014@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B602C(a1, &qword_1010EE3A8, a2);
}

uint64_t sub_1002B6020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002B602C(a1, (uint64_t *)&unk_101105A10, a2);
}

uint64_t sub_1002B602C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE v9[40];

  sub_100030784(a1, (uint64_t)v9);
  v5 = sub_10001A9A8(a2);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = swift_dynamicCast(a3, v9, v5, v6, 6);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a3, v7 ^ 1u, 1, v6);
}

void sub_1002B60B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if (*a1 != *(_QWORD *)(a2 + 152))
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6CA8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134349056;
      v9 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "connectableDevicesChanged: %{public}ld", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }

    *(_QWORD *)(a2 + 152) = v2;
  }
}

uint64_t sub_1002B61CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    sub_1002C2F00(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002B623C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  __n128 v11;
  char v12;
  uint64_t result;
  char v14;
  _BYTE v16[40];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  v11 = swift_beginAccess(a1 + 184, v16, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 184) + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 184));
  sub_100003FB0((uint64_t)v9);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    result = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v7 + 8))(v9, v6, v11);
    v14 = 0;
    goto LABEL_6;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DCB54);
  result = swift_release();
  v14 = v16[39];
LABEL_6:
  *a3 = v14;
  return result;
}

void sub_1002B63A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t My;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[6];
  uint64_t v50;
  uint64_t v51;

  v2 = v1;
  v48 = a1;
  v3 = type metadata accessor for OwnedBeaconGroup(0);
  v4 = __chkstk_darwin(v3);
  v47 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v46 = (uint64_t)&v46 - v6;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v46 - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v2 + 48);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v15 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v48 + *(int *)(v3 + 24), v7);
  swift_beginAccess(v2 + 104, v49, 33, 0);
  v20 = sub_100A09F38((uint64_t)v13, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  swift_endAccess(v49);
  if ((v20 & 1) != 0)
  {
    v47 = v7;
    if (qword_1010E9B08 == -1)
    {
LABEL_4:
      v21 = type metadata accessor for Logger(0);
      sub_10001A9E8(v21, (uint64_t)qword_1011B6CA8);
      v22 = v46;
      v23 = sub_10005972C(v15, v46, type metadata accessor for OwnedBeaconGroup);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = swift_slowAlloc(22, -1);
        v27 = swift_slowAlloc(32, -1);
        v49[0] = v27;
        *(_DWORD *)v26 = 141558275;
        v50 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v26 + 4, v26 + 12);
        *(_WORD *)(v26 + 12) = 2081;
        v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v29 = dispatch thunk of CustomStringConvertible.description.getter(v47, v28);
        v50 = sub_100016940(v29, v30, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v26 + 14, v26 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v22, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Posting SPAccessoryDidPair Darwin notification for %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);
      }
      else
      {
        sub_1000126B0(v22, type metadata accessor for OwnedBeaconGroup);
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(1);
      My = type metadata accessor for Feature.FindMy(0);
      v49[3] = My;
      v49[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      v43 = sub_100018F08(v49);
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v43, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
      LOBYTE(My) = isFeatureEnabled(_:)(v49);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
      if ((My & 1) != 0)
      {
        v44 = (void *)SPManagedCBPeripheralChangedNotification;
        v45 = type metadata accessor for DarwinNotificationHelper(0);
        swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
        DarwinNotificationHelper.init(notificationName:rateLimit:)(v44, 0.0);
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
        swift_release();
      }
      return;
    }
LABEL_17:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_4;
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v31 = type metadata accessor for Logger(0);
  sub_10001A9E8(v31, (uint64_t)qword_1011B6CA8);
  v32 = v15;
  v33 = v47;
  v34 = sub_10005972C(v32, v47, type metadata accessor for OwnedBeaconGroup);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(32, -1);
    v49[0] = v38;
    *(_DWORD *)v37 = 141558275;
    v50 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v7, v39);
    v50 = sub_100016940(v40, v41, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v33, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Already posted SPAccessoryDidPair for %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    sub_1000126B0(v33, type metadata accessor for OwnedBeaconGroup);
  }

}

void sub_1002B69E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  os_log_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  id v81;
  id v82;
  void *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t *v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(uint64_t, uint64_t, int *);
  uint64_t v101;
  os_log_t v102;
  unint64_t v103;
  unint64_t isa;
  unint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  Class v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void *v135;
  id v136;
  id v137;
  void *v138;
  id v139;
  void *v140;
  id v141;
  void *v142;
  uint64_t My;
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  os_log_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176[5];
  uint64_t v177;
  _BYTE v178[16];

  v166 = a1;
  v171 = type metadata accessor for MACAddress(0);
  v174 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v170 = (char *)&v152 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1010F5D00);
  v4 = __chkstk_darwin(v3);
  v173 = (uint64_t)&v152 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v158 = (uint64_t)&v152 - v6;
  v7 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v175 = *((_QWORD *)v7 - 1);
  v8 = __chkstk_darwin(v7);
  v156 = (uint64_t)&v152 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v164 = (uint64_t)&v152 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v152 - v13;
  v15 = __chkstk_darwin(v12);
  v160 = (uint64_t)&v152 - v16;
  v17 = __chkstk_darwin(v15);
  v157 = (char *)&v152 - v18;
  __chkstk_darwin(v17);
  v159 = (char *)&v152 - v19;
  v172 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v20 = __chkstk_darwin(v172);
  v22 = (char *)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v168 = (char *)&v152 - v23;
  v162 = type metadata accessor for OwnedBeaconGroup(0);
  v24 = __chkstk_darwin(v162);
  v155 = (uint64_t)&v152 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v152 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v152 - v29;
  v31 = type metadata accessor for DispatchPredicate(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v163 = v1;
  v35 = *(void **)(v1 + 48);
  *v34 = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v32 + 104))(v34, enum case for DispatchPredicate.onQueue(_:), v31);
  v36 = v35;
  LOBYTE(v35) = _dispatchPreconditionTest(_:)(v34);
  (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v34, v31);
  if ((v35 & 1) != 0)
  {
    if (qword_1010E9B08 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9B08, sub_1002B4720);
LABEL_3:
  v154 = type metadata accessor for Logger(0);
  v37 = sub_10001A9E8(v154, (uint64_t)qword_1011B6CA8);
  v38 = v166;
  sub_10005972C(v166, (uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
  v39 = sub_10005972C(v38, (uint64_t)v28, type metadata accessor for OwnedBeaconGroup);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter(v40);
  v42 = v41;
  v43 = os_log_type_enabled(v40, v41);
  v169 = v22;
  v161 = v37;
  if (v43)
  {
    v44 = swift_slowAlloc(42, -1);
    v167 = swift_slowAlloc(64, -1);
    v176[0] = v167;
    *(_DWORD *)v44 = 141558787;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v44 + 4, v44 + 12);
    *(_WORD *)(v44 + 12) = 2081;
    v165 = v40;
    LODWORD(v153) = v42;
    v45 = type metadata accessor for UUID(0);
    v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
    v177 = sub_100016940(v47, v48, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v44 + 22) = 2160;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v44 + 24, v44 + 32);
    *(_WORD *)(v44 + 32) = 2081;
    v49 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v171, v49);
    v177 = sub_100016940(v50, v51, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v44 + 34, v44 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v28, type metadata accessor for OwnedBeaconGroup);
    v52 = v165;
    _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v153, "BA unpaired groupIdentifier: %{private,mask.hash}s, mac: %{private,mask.hash}s.\nNeed to BT unpair.", (uint8_t *)v44, 0x2Au);
    v53 = v167;
    swift_arrayDestroy(v167, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0((uint64_t)v28, type metadata accessor for OwnedBeaconGroup);

  }
  v54 = v172;
  v55 = (uint64_t)v168;
  v56 = sub_1002B9C10();
  *(&v152 - 2) = __chkstk_darwin(v56);
  *(&v152 - 1) = (uint64_t)v57;
  v168 = v57;
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DFD1C, &v152 - 4, v54);
  sub_100004048(v55, (uint64_t *)&unk_1010F9890);
  v58 = sub_1002B4834();
  if (!v58
    || (v59 = v58, v60 = objc_msgSend(v58, "pairedDevices"), v59, !v60)
    || (v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, (char *)&type metadata for Any + 8),
        v60,
        v62 = (uint64_t)sub_1003627F4(v61),
        v58 = (void *)swift_bridgeObjectRelease(),
        !v62))
  {
    v106 = Logger.logObject.getter(v58);
    v107 = static os_log_type_t.error.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Unable to retrieve BT paired devices!", v108, 2u);
      swift_slowDealloc(v108, -1, -1);
    }

    goto LABEL_40;
  }
  if ((unint64_t)v62 >> 62)
  {
    if (v62 >= 0)
      v151 = v62 & 0xFFFFFFFFFFFFFF8;
    else
      v151 = v62;
    swift_bridgeObjectRetain(v62);
    v63 = _CocoaArrayWrapper.endIndex.getter(v151);
  }
  else
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v62);
  }
  v64 = v173;
  v153 = v56;
  v152 = 0;
  if (v63)
  {
    if (v63 >= 1)
    {
      v65 = 0;
      v165 = (os_log_t)_swiftEmptyArrayStorage;
      v172 = v62 & 0xC000000000000001;
      v66 = v171;
      v167 = v62;
      while (1)
      {
        v67 = v172
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v65, v62)
            : *(id *)(v62 + 8 * v65 + 32);
        v68 = v67;
        v69 = v7[10];
        *(_QWORD *)&v14[v69] = 0;
        v70 = objc_msgSend(v67, "address", v152);
        if (!v70)
          break;
        v71 = v70;
        v72 = v63;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        v75 = v74;

        v76 = (uint64_t)v169;
        v77 = v73;
        v78 = v174;
        v79 = v75;
        v66 = v171;
        MACAddress.init(string:type:)(v77, v79, 0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v76, 1, v66) == 1)
        {

          sub_100004048(v76, (uint64_t *)&unk_1010F9890);
          v64 = v173;
          v63 = v72;
          v62 = v167;
          goto LABEL_15;
        }
        v80 = v170;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v170, v76, v66);
        *(_QWORD *)&v14[v69] = v68;
        (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v14, v80, v66);
        v81 = v68;
        v82 = objc_msgSend(v81, "name");
        if (v82)
        {
          v83 = v82;
          v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
          v86 = v85;

        }
        else
        {
          v84 = 0;
          v86 = 0xE000000000000000;
        }
        v63 = v72;
        v87 = (uint64_t *)&v14[v7[5]];
        *v87 = v84;
        v87[1] = v86;
        *(_DWORD *)&v14[v7[6]] = objc_msgSend(v81, "vendorId");
        v88 = objc_msgSend(v81, "productName");
        v62 = v167;
        if (v88)
        {
          v89 = v88;
          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
          v92 = v91;

        }
        else
        {
          v90 = 0;
          v92 = 0xE000000000000000;
        }
        v93 = (uint64_t *)&v14[v7[7]];
        *v93 = v90;
        v93[1] = v92;
        *(_DWORD *)&v14[v7[8]] = objc_msgSend(v81, "productId");
        v94 = sub_1001EE37C(objc_msgSend(v81, "vendorId"), objc_msgSend(v81, "productId"));
        v96 = v95;

        (*(void (**)(char *, uint64_t))(v174 + 8))(v170, v66);
        v97 = (uint64_t *)&v14[v7[9]];
        *v97 = v94;
        v97[1] = v96;
        v98 = v173;
        sub_10005972C((uint64_t)v14, v173, type metadata accessor for BluetoothManagerDevice);
        v99 = v175;
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v175 + 56))(v98, 0, 1, v7);
        sub_1000126B0((uint64_t)v14, type metadata accessor for BluetoothManagerDevice);
        v100 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v99 + 48);
        v64 = v98;
        if (v100(v98, 1, v7) != 1)
        {
          v101 = v160;
          sub_1000126EC(v98, v160, type metadata accessor for BluetoothManagerDevice);
          sub_1000126EC(v101, v164, type metadata accessor for BluetoothManagerDevice);
          if ((swift_isUniquelyReferenced_nonNull_native(v165) & 1) != 0)
            v102 = v165;
          else
            v102 = (os_log_t)sub_1007C9120(0, (int64_t)v165[2].isa + 1, 1, (unint64_t)v165);
          isa = (unint64_t)v102[2].isa;
          v103 = (unint64_t)v102[3].isa;
          if (isa >= v103 >> 1)
            v102 = (os_log_t)sub_1007C9120(v103 > 1, isa + 1, 1, (unint64_t)v102);
          v102[2].isa = (Class)(isa + 1);
          v105 = (*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80);
          v165 = v102;
          sub_1000126EC(v164, (uint64_t)v102 + v105 + *(_QWORD *)(v175 + 72) * isa, type metadata accessor for BluetoothManagerDevice);
          v64 = v173;
          goto LABEL_17;
        }
LABEL_16:
        sub_100004048(v64, &qword_1010F5D00);
LABEL_17:
        if (v63 == ++v65)
          goto LABEL_42;
      }

LABEL_15:
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v175 + 56))(v64, 1, 1, v7);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_81;
  }
  v165 = (os_log_t)_swiftEmptyArrayStorage;
  v66 = v171;
LABEL_42:
  swift_bridgeObjectRelease_n(v62, 2);
  v109 = v165[2].isa;
  if (v109)
  {
    v110 = (char *)v165
         + ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80));
    v111 = *(_QWORD *)(v175 + 72);
    swift_bridgeObjectRetain(v165);
    v14 = v159;
    v112 = (uint64_t)v157;
    while (1)
    {
      sub_10005972C((uint64_t)v110, v112, type metadata accessor for BluetoothManagerDevice);
      if ((static MACAddress.== infix(_:_:)(v112, v168) & 1) != 0)
        break;
      sub_1000126B0(v112, type metadata accessor for BluetoothManagerDevice);
      v110 += v111;
      v109 = (Class)((char *)v109 - 1);
      if (!v109)
      {
        swift_bridgeObjectRelease();
        v113 = 1;
        v114 = v158;
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease();
    v114 = v158;
    sub_1000126EC(v112, v158, type metadata accessor for BluetoothManagerDevice);
    v113 = 0;
  }
  else
  {
    v113 = 1;
    v14 = v159;
    v114 = v158;
  }
LABEL_49:
  v115 = v175;
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v175 + 56))(v114, v113, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v115 + 48))(v114, 1, v7) == 1)
  {
    sub_100004048(v114, &qword_1010F5D00);
    v116 = v155;
    v117 = sub_10005972C(v166, v155, type metadata accessor for OwnedBeaconGroup);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.error.getter(v118);
    if (!os_log_type_enabled(v118, v119))
    {
      swift_release();
      sub_1000126B0(v116, type metadata accessor for OwnedBeaconGroup);

      return;
    }
    v120 = swift_slowAlloc(22, -1);
    v121 = v66;
    v122 = swift_slowAlloc(32, -1);
    v176[0] = v122;
    *(_DWORD *)v120 = 141558275;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v120 + 4, v120 + 12);
    *(_WORD *)(v120 + 12) = 2081;
    v123 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v124 = dispatch thunk of CustomStringConvertible.description.getter(v121, v123);
    v177 = sub_100016940(v124, v125, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v120 + 14, v120 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v116, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v118, v119, "No BT device for %{private,mask.hash}s!", (uint8_t *)v120, 0x16u);
    swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    swift_slowDealloc(v120, -1, -1);

LABEL_40:
    swift_release();
    return;
  }
  sub_1000126EC(v114, (uint64_t)v14, type metadata accessor for BluetoothManagerDevice);
  v126 = v156;
  v127 = sub_10005972C((uint64_t)v14, v156, type metadata accessor for BluetoothManagerDevice);
  v128 = Logger.logObject.getter(v127);
  v129 = static os_log_type_t.default.getter(v128);
  if (os_log_type_enabled(v128, v129))
  {
    v130 = (uint8_t *)swift_slowAlloc(12, -1);
    v131 = swift_slowAlloc(32, -1);
    v176[0] = v131;
    *(_DWORD *)v130 = 136315138;
    v132 = sub_10015AE8C();
    v177 = sub_100016940(v132, v133, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v130 + 4, v130 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v126, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v128, v129, "BT unpairing %s...", v130, 0xCu);
    swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1, -1);
    swift_slowDealloc(v130, -1, -1);
  }
  else
  {
    sub_1000126B0(v126, type metadata accessor for BluetoothManagerDevice);
  }

  v134 = v152;
  v135 = *(void **)&v14[v7[10]];
  if (!v135)
  {
    if (qword_1010EA318 == -1)
    {
LABEL_67:
      v147 = sub_10001A9E8(v154, (uint64_t)qword_1011B7DF8);
      v148 = Logger.logObject.getter(v147);
      v149 = static os_log_type_t.error.getter(v148);
      if (os_log_type_enabled(v148, v149))
      {
        v150 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v150 = 0;
        _os_log_impl((void *)&_mh_execute_header, v148, v149, "We should always have an underlying BluetoothDevice here!", v150, 2u);
        swift_slowDealloc(v150, -1, -1);
      }

      swift_release();
      goto LABEL_70;
    }
LABEL_81:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_67;
  }
  v136 = v135;
  v137 = sub_1002B4834();
  if (v137)
  {
    v138 = v137;
    objc_msgSend(v137, "setDevicePairingEnabled:", 1);

  }
  v139 = sub_1002B4834();
  if (v139)
  {
    v140 = v139;
    objc_msgSend(v139, "unpairDevice:", v136);

  }
  v141 = sub_1002B4834();
  if (v141)
  {
    v142 = v141;
    objc_msgSend(v141, "setDevicePairingEnabled:", 0);

  }
  My = type metadata accessor for Feature.FindMy(0);
  v176[3] = My;
  v176[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v144 = sub_100018F08(v176);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v144, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v176);
  if ((My & 1) != 0)
  {
    v145 = (void *)SPManagedCBPeripheralChangedNotification;
    v146 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v146, *(unsigned int *)(v146 + 48), *(unsigned __int16 *)(v146 + 52));
    DarwinNotificationHelper.init(notificationName:rateLimit:)(v145, 0.0);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    if (v134)
    {

      swift_release();
      swift_release();
      swift_errorRelease(v134);
LABEL_70:
      sub_1000126B0((uint64_t)v14, type metadata accessor for BluetoothManagerDevice);
      return;
    }
    sub_1000126B0((uint64_t)v14, type metadata accessor for BluetoothManagerDevice);
    swift_release();
  }
  else
  {
    sub_1000126B0((uint64_t)v14, type metadata accessor for BluetoothManagerDevice);
  }
  swift_release();

}

uint64_t sub_1002B7BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];
  _QWORD *v34;

  v29 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Notification(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_101067520, v16 + 8, v14 | 7);
  *(_QWORD *)(v17 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v17 + v15, v13, v10);
  *(_QWORD *)(v17 + v16) = a2;
  aBlock[4] = sub_1002DFC38;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101067538;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v34 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v23 = v27;
  v24 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v21, v22, v29, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v23, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
  return swift_release();
}

void sub_1002B7E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50[4];

  v0 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for BluetoothManagerDevice(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v45 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  Transaction.capture()();
  Notification.object.getter(v50);
  if (!v50[3])
  {
    v15 = (uint64_t *)&unk_1010F6390;
    v16 = v50;
    goto LABEL_6;
  }
  v13 = sub_10000F4A0(0, &qword_1010F5FD8, BluetoothDevice_ptr);
  if ((swift_dynamicCast(&v49, v50, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
  {
LABEL_7:
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B6CA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "notification.object is not of expected type BluetoothDevice!", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    return;
  }
  v14 = v49;
  sub_10015AAF8(v14, (uint64_t)v2);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {

    v15 = &qword_1010F5D00;
    v16 = v2;
LABEL_6:
    sub_100004048((uint64_t)v16, v15);
    goto LABEL_7;
  }
  v48 = v14;
  sub_1000126EC((uint64_t)v2, (uint64_t)v12, type metadata accessor for BluetoothManagerDevice);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B6CA8);
  v24 = sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for BluetoothManagerDevice);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v47 = v23;
    v29 = v28;
    v50[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v46 = v27 + 4;
    v30 = sub_10015AE8C();
    v49 = (id)sub_100016940(v30, v31, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v46, v27 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v10, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "pairedDeviceNameChanged: %s", v27, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v10, type metadata accessor for BluetoothManagerDevice);
  }

  __chkstk_darwin(v32);
  *(&v45 - 2) = (uint64_t)v12;
  *(&v45 - 1) = v33;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_100245650);
  v34 = (void *)v50[0];
  if (v50[0])
  {
    sub_1002B8554(v50[0], (uint64_t)v12);

    v35 = (uint64_t)v12;
  }
  else
  {
    v36 = sub_10005972C((uint64_t)v12, (uint64_t)v7, type metadata accessor for BluetoothManagerDevice);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v50[0] = v40;
      *(_DWORD *)v39 = 136315138;
      v41 = type metadata accessor for MACAddress(0);
      v42 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
      v49 = (id)sub_100016940(v43, v44, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v7, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unable to retrieve peripheral for %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v7, type metadata accessor for BluetoothManagerDevice);
    }
    v35 = (uint64_t)v12;
  }
  sub_1000126B0(v35, type metadata accessor for BluetoothManagerDevice);
}

void sub_1002B8554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[2];

  v3 = v2;
  v65 = a2;
  v5 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v5);
  v63 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v7);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnedBeaconGroup(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v62 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v64 = (uint64_t)&v61 - v14;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v3 + 48);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  __chkstk_darwin(v21);
  *(&v61 - 2) = v3;
  *(&v61 - 1) = a1;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DFD08);
  if ((v67[0] & 1) != 0)
  {
    if (qword_1010E9B08 == -1)
    {
LABEL_4:
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B6CA8);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter(v24);
      if (!os_log_type_enabled(v24, v25))
      {
LABEL_22:

        return;
      }
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pairing in progress. Ignore name change.", v26, 2u);
LABEL_11:
      swift_slowDealloc(v26, -1, -1);
      goto LABEL_22;
    }
LABEL_32:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_4;
  }
  v27 = v65;
  sub_10081F5CC(v65, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010FF7F0);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6CA8);
    v29 = v63;
    v30 = sub_10005972C(v27, v63, type metadata accessor for BluetoothManagerDevice);
    v24 = Logger.logObject.getter(v30);
    v31 = static os_log_type_t.error.getter(v24);
    if (!os_log_type_enabled(v24, v31))
    {
      sub_1000126B0(v29, type metadata accessor for BluetoothManagerDevice);
      goto LABEL_22;
    }
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = swift_slowAlloc(32, -1);
    v67[0] = v32;
    *(_DWORD *)v26 = 136315138;
    v33 = type metadata accessor for MACAddress(0);
    v34 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
    v66 = sub_100016940(v35, v36, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v29, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v24, v31, "No beacon group for paired device: %s", v26, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    goto LABEL_11;
  }
  v37 = (uint64_t)v9;
  v38 = v64;
  sub_1000126EC(v37, v64, type metadata accessor for OwnedBeaconGroup);
  if ((sub_1003690A8() & 1) != 0)
  {
    v39 = (uint64_t *)(v27 + *(int *)(v5 + 20));
    v40 = *v39;
    v41 = v39[1];
    v42 = (_QWORD *)(v38 + *(int *)(v10 + 36));
    v43 = v42[1];
    if (v40 == *v42 && v41 == v43 || (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *v42, v43, 0) & 1) != 0)
    {
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B6CA8);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Name has not changed!", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

    }
    else
    {
      v60 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v60);
      *(&v61 - 4) = v3;
      *(&v61 - 3) = v38;
      *(&v61 - 2) = v27;
      static Transaction.named<A>(_:with:)("ClassicPairingSupport.updateDeviceNameIfNeeded", 46, 2, sub_1002DF83C, &v61 - 6);
    }
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v49 = type metadata accessor for Logger(0);
    sub_10001A9E8(v49, (uint64_t)qword_1011B6CA8);
    v50 = v62;
    v51 = sub_10005972C(v38, v62, type metadata accessor for OwnedBeaconGroup);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(32, -1);
      *(_DWORD *)v54 = 141558275;
      v66 = 1752392040;
      v67[0] = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v56 = type metadata accessor for UUID(0);
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      v66 = sub_100016940(v58, v59, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v50, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Ignore name change while beacon group pending pairing: %{private,mask.hash}s.", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_1000126B0(v50, type metadata accessor for OwnedBeaconGroup);
    }

  }
  sub_1000126B0(v38, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1002B8D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = a3;
  v25 = a2;
  v29 = a1;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v26 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v26 + 64);
  __chkstk_darwin(v6);
  v8 = type metadata accessor for BluetoothManagerDevice(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(a2 + 16);
  sub_10005972C(a4, (uint64_t)v11, v12);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 16) & ~v13;
  v15 = v13 | 7;
  v16 = swift_allocObject(&unk_1010674D0, v14 + v10, v13 | 7);
  sub_1000126EC((uint64_t)v11, v16 + v14, type metadata accessor for BluetoothManagerDevice);
  sub_10005972C(a4, (uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
  v17 = v27;
  sub_10005972C(v27, (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconGroup);
  v18 = (v13 + 24) & ~v13;
  v19 = (v10 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = *(unsigned __int8 *)(v26 + 80);
  v21 = (v19 + v20 + 8) & ~v20;
  v22 = swift_allocObject(&unk_1010674F8, v21 + v7, v15 | v20);
  *(_QWORD *)(v22 + 16) = v29;
  sub_1000126EC((uint64_t)v11, v22 + v18, type metadata accessor for BluetoothManagerDevice);
  *(_QWORD *)(v22 + v19) = v25;
  sub_1000126EC((uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v22 + v21, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_1007A0418(v17, 0, (void (*)(uint64_t))sub_1002DF920, v16, sub_1002DFAEC, (void (*)(uint64_t))v22);
  swift_release();
  return swift_release();
}

uint64_t sub_1002B8F10(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for BluetoothManagerDevice(0) + 20));
  v5 = *v3;
  v4 = v3[1];
  v6 = (_QWORD *)(a1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 36));
  swift_bridgeObjectRetain(v4);
  result = swift_bridgeObjectRelease();
  *v6 = v5;
  v6[1] = v4;
  return result;
}

void sub_1002B8F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a3;
  v47 = a4;
  v45 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v45);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v18);
  v20 = (uint64_t *)((char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v20, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v20, v18) == 1)
  {
    v21 = *v20;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B6CA8);
    sub_10005972C(a5, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v49 = v27;
      *(_DWORD *)v26 = 136315394;
      v28 = sub_10036F350();
      v48 = sub_100016940(v28, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v26 + 12) = 2080;
      v48 = v21;
      swift_errorRetain(v21);
      v30 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v31 = String.init<A>(describing:)(&v48, v30);
      v48 = sub_100016940(v31, v32, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to save new name for %s. Error %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v21);
    }
    else
    {
      swift_errorRelease(v21);
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease(v21);
      swift_errorRelease(v21);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v20, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B6CA8);
    sub_10005972C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    v34 = sub_10005972C(v46, (uint64_t)v8, type metadata accessor for BluetoothManagerDevice);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(64, -1);
      v49 = v38;
      *(_DWORD *)v37 = 136315394;
      v39 = sub_10036F350();
      v48 = sub_100016940(v39, v40, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v37 + 12) = 2080;
      v41 = (uint64_t *)&v8[*(int *)(v45 + 20)];
      v42 = *v41;
      v43 = v41[1];
      swift_bridgeObjectRetain(v43);
      v48 = sub_100016940(v42, v43, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v8, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Successfully updated %s with new name %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      sub_1000126B0((uint64_t)v8, type metadata accessor for BluetoothManagerDevice);
    }

    sub_1007EEF64(15);
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_1002B9504(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  id v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, __n128);
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66[3];
  char v67[24];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (uint8_t *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v60 - v9;
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(char **)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (void *)v2[6];
  *v14 = v15;
  (*((void (**)(_QWORD *, _QWORD, uint64_t))v12 + 13))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v14);
  (*((void (**)(_QWORD *, uint64_t))v12 + 1))(v14, v11);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_10;
  }
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v18 = objc_msgSend((id)v17, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v14 = v2 + 23;
  v19 = swift_beginAccess(v2 + 23, v67, 0, 0);
  v20 = v2[23];
  if (*(_QWORD *)(v20 + 16))
  {
    swift_bridgeObjectRetain(v2[23]);
    v21 = sub_100003FB0((uint64_t)v10);
    if ((v22 & 1) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v24 = type metadata accessor for Logger(0);
      sub_10001A9E8(v24, (uint64_t)qword_1011B6CA8);
      v25 = swift_retain_n(v23, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v66[0] = v29;
        *(_DWORD *)v28 = 136315138;
        swift_retain();
        v30 = sub_100A3F5DC();
        v32 = v31;
        swift_release();
        v65 = sub_100016940(v30, v32, v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v28 + 4, v28 + 12);
        swift_release_n(v23, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found existing pairing manager %s", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

        return v23;
      }

      v58 = (_QWORD *)v23;
LABEL_18:
      swift_release_n(v58, 2);
      return v23;
    }
    swift_bridgeObjectRelease();
  }
  v63 = v8;
  v64 = v4;
  v62 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
  v62(v10, v4, v19);
  v8 = (uint8_t *)v2[2];
  v33 = (_QWORD *)swift_allocObject(&unk_1010674A8, 40, 7);
  v33[2] = v2;
  v33[3] = a1;
  v33[4] = v8;
  swift_retain();
  v12 = a1;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(v66, &unk_1010F5F68, v33, &type metadata for Bool);
  swift_release();
  LODWORD(a1) = LOBYTE(v66[0]);
  if (qword_1010E9B08 != -1)
    goto LABEL_21;
LABEL_10:
  v34 = type metadata accessor for Logger(0);
  sub_10001A9E8(v34, (uint64_t)qword_1011B6CA8);
  sub_1007885B0(0xD000000000000032, 0x8000000100ECFB90);
  v35 = v2[3];
  v36 = v2[5];
  v61 = type metadata accessor for AirPodsPairingManager();
  swift_allocObject(v61, 240, 7);
  v37 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  v38 = sub_100A3F788((uint64_t)v8, v35, v37, v36, (int)a1);
  if (v38)
  {
    v23 = v38;
    v39 = objc_msgSend((id)v17, "identifier");
    v40 = (uint64_t)v63;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    swift_beginAccess(v14, v66, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2[23]);
    v65 = v2[23];
    v2[23] = 0x8000000000000000;
    sub_10010B2B4(v23, v40, isUniquelyReferenced_nonNull_native);
    v2[23] = v65;
    swift_bridgeObjectRelease();
    v42 = v64;
    ((void (*)(uint64_t, uint64_t))v62)(v40, v64);
    swift_endAccess(v66);
    v43 = swift_retain_n(v2, 2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v47 = swift_slowAlloc(32, -1);
      v66[0] = v47;
      *(_DWORD *)v46 = 136315138;
      v63 = v46 + 4;
      v48 = v2[23];
      v49 = v42;
      v50 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v48);
      v52 = Dictionary.description.getter(v51, v49, v61, v50);
      v54 = v53;
      swift_bridgeObjectRelease();
      v65 = sub_100016940(v52, v54, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66, v63, v46 + 12);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "pairingManagers: %s", v46, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);

      return v23;
    }

    v58 = v2;
    goto LABEL_18;
  }
  v55 = Logger.logObject.getter(0);
  v56 = static os_log_type_t.error.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unable to create a new AirPodsPairingManager!", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  return 0;
}

_QWORD *sub_1002B9C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 48);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v5 = *(_QWORD **)(v1 + 96);
  if (v5)
  {
    v8 = qword_1010E9B08;
    swift_retain();
    if (v8 == -1)
    {
LABEL_4:
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B6CA8);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.debug.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Found existing PrivacyAlertSupport.", v13, 2u);
        swift_slowDealloc(v13, -1, -1);
      }

      return v5;
    }
LABEL_14:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_4;
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6CA8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Creating new PrivacyAlertSupport.", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = type metadata accessor for PrivacyAlertSupport();
  swift_allocObject(v19, 121, 7);
  v20 = swift_retain();
  v5 = (_QWORD *)sub_100AEFC20(v20);
  *(_QWORD *)(v1 + 96) = v5;
  swift_retain();
  swift_release();
  return v5;
}

uint64_t sub_1002B9E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = v0;
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "classicPairingInitialSetup", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v7 + 16, v1);
  v8 = sub_10001A9A8(&qword_1010F0E48);
  inited = swift_initStackObject(v8, &v15);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v10 = swift_allocObject(&unk_101067430, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1002DF7B8;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(inited + 32) = 0xD000000000000025;
  *(_QWORD *)(inited + 40) = 0x8000000100ECFAF0;
  *(_QWORD *)(inited + 48) = sub_10015A05C;
  *(_QWORD *)(inited + 56) = v10;
  swift_retain();
  v11 = sub_1006B9680(inited);
  v12 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = DarwinNotificationHelper.init(notificationHandlers:)(v11);
  swift_release();
  *(_QWORD *)(v1 + 120) = v13;
  return swift_release();
}

uint64_t sub_1002BA030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = DarwinNotification.value.getter();
    v6 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v6);
    v7[2] = v4;
    v7[3] = v5;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.ClassicPairingSupport.handlePairingNotification", 77, 2, sub_1002DF7C0, v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002BA0F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];
  id v58;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5F18);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F5F20);
  v52 = *(_QWORD *)(v10 - 8);
  v53 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F5F28);
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  __chkstk_darwin(v13);
  v54 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (void **)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v2 + 48);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v49 = a1;
  v22 = sub_10001A9A8(&qword_1010F5CF8);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = PassthroughSubject.init()();
  *(_QWORD *)(v2 + 136) = v23;
  swift_retain();
  swift_release();
  v57[0] = v23;
  v24 = sub_1000193A4(&qword_1010F5EC8, &qword_1010F5CF8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v57[0] = Publisher.eraseToAnyPublisher()(v22, v24);
  if (qword_1010E9B10 != -1)
LABEL_5:
    swift_once(&qword_1010E9B10, sub_1002B47E8);
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1010F5918);
  v58 = v20;
  v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v6, 1, 1, v27);
  v28 = v20;
  v29 = sub_10001A9A8(&qword_1010F5ED0);
  v30 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v31 = sub_1000193A4(&qword_1010F5ED8, &qword_1010F5ED0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v32 = sub_1001C7EF4();
  Publisher.timeout<A>(_:scheduler:options:customError:)(v26, &v58, v6, sub_1000A8C14, 0, v29, v30, v31, v32);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  swift_release();
  v33 = sub_10001A9A8(&qword_1010F5EE8);
  v34 = sub_1000193A4(&qword_1010F5F30, &qword_1010F5F18, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v35 = v51;
  Publisher.map<A>(_:)(sub_1002BA614, 0, v51, v33, v34);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v35);
  v36 = sub_10001A9A8(&qword_1010F5EF8);
  v37 = sub_1000193A4(&qword_1010F5F38, &qword_1010F5F20, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v38 = sub_1000193A4(&qword_1010F5F08, &qword_1010F5EF8, (const char *)&protocol conformance descriptor for Just<A>);
  v40 = v53;
  v39 = v54;
  Publisher.catch<A>(_:)(sub_1002BA624, 0, v53, v36, v37, v38);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v40);
  v41 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v41 + 16, v2);
  v42 = swift_allocObject(&unk_101067390, 32, 7);
  v43 = v49;
  *(_QWORD *)(v42 + 16) = v41;
  *(_QWORD *)(v42 + 24) = v43;
  v44 = sub_1000193A4(&qword_1010F5F40, &qword_1010F5F28, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v45 = v43;
  v46 = v56;
  Publisher<>.sink(receiveValue:)(sub_1002DF6F8, v42, v56, v44);
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v46);
  v47 = v2 + 72;
  swift_beginAccess(v47, v57, 33, 0);
  AnyCancellable.store(in:)(v47);
  swift_endAccess(v57);
  swift_release();
  return swift_release();
}

id sub_1002BA614@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return v2;
}

void sub_1002BA628(char **a1, uint64_t a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  id v36;
  id v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint8_t *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  id v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77[24];

  v6 = sub_10001A9A8(&qword_1010F5D08);
  __chkstk_darwin(v6);
  v8 = (void **)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v66 - v17;
  v19 = *a1;
  v20 = *((_BYTE *)a1 + 8);
  a2 += 16;
  swift_beginAccess(a2, v77, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    if ((v20 & 1) != 0)
    {
      if ((v19 & 1) != 0)
      {
        type metadata accessor for Transaction(0);
        v60 = swift_allocObject(&unk_101066A80, 24, 7);
        swift_weakInit(v60 + 16, v22);
        v61 = swift_allocObject(&unk_1010673B8, 32, 7);
        *(_QWORD *)(v61 + 16) = v60;
        *(_QWORD *)(v61 + 24) = a3;
        v62 = a3;
        swift_retain();
        static Transaction.asyncTask(name:block:)("retryIfNeededAsync", 18, 2, &unk_1010F5F50, v61);
        swift_release();
        swift_release();
      }
      else
      {
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v23 = type metadata accessor for Logger(0);
        v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6CA8);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.error.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v27 = 138412290;
          v29 = sub_1002DC9E4();
          v30 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v29, 0, 0);
          *v31 = 0;
          v32 = _swift_stdlib_bridgeErrorToNSError(v30);
          v75 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v27 + 4, v27 + 12);
          *v28 = v32;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "subscribeToPairingEvents failure: %@", v27, 0xCu);
          v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v28, 1, v33);
          swift_slowDealloc(v28, -1, -1);
          swift_slowDealloc(v27, -1, -1);
          swift_release();

          return;
        }

      }
    }
    else
    {
      v72 = Strong;
      v34 = *(void **)&v19[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      v73 = v19;
      v35 = v19;
      v36 = objc_msgSend(v34, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

      v70 = *(id *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      v37 = objc_msgSend(v70, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

      v38 = static UUID.== infix(_:_:)(v18, v16);
      v39 = *(void (**)(char *, uint64_t))(v13 + 8);
      v39(v16, v12);
      v39(v18, v12);
      v75 = 0;
      v76 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      v75 = 0xD000000000000019;
      v76 = 0x8000000100ECFA60;
      if ((v38 & 1) != 0)
        v40 = 1702195828;
      else
        v40 = 0x65736C6166;
      if ((v38 & 1) != 0)
        v41 = 0xE400000000000000;
      else
        v41 = 0xE500000000000000;
      v42 = v41;
      String.append(_:)(*(Swift::String *)&v40);
      swift_bridgeObjectRelease();
      v43._object = (void *)0x8000000100ECFAC0;
      v43._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v43);
      v44 = v75;
      v45 = v76;
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v46 = type metadata accessor for Logger(0);
      v71 = sub_10001A9E8(v46, (uint64_t)qword_1011B6CA8);
      sub_1007885B0(v44, v45);
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0)
      {
        sub_1002C6020((uint64_t)a3, v8);
        v47 = sub_10001A9A8(&qword_1010F5D10);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v8, 1, v47) != 1)
        {
          v64 = *v8;
          sub_1000126EC((uint64_t)v8 + *(int *)(v47 + 48), (uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
          sub_1002C6E6C((uint64_t)v64, (uint64_t)v11, 0, 0, (uint64_t)_swiftEmptyArrayStorage);

          sub_1002DF538(v73, 0);
          swift_release();
          sub_1000126B0((uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
          return;
        }
        sub_100004048((uint64_t)v8, &qword_1010F5D08);
        v48 = a3;
        v49 = Logger.logObject.getter(v48);
        v50 = static os_log_type_t.error.getter(v49);
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = swift_slowAlloc(32, -1);
          v75 = v69;
          *(_DWORD *)v51 = 136446210;
          v52 = v51 + 12;
          v67 = v51 + 4;
          v68 = v51;
          v53 = objc_msgSend(v70, "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

          v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v55 = dispatch thunk of CustomStringConvertible.description.getter(v12, v54);
          v57 = v56;
          v39(v18, v12);
          v74 = sub_100016940(v55, v57, &v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v67, v52);

          swift_bridgeObjectRelease();
          v58 = v68;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to sanitize MAC address for peripheral %{public}s", v68, 0xCu);
          v59 = v69;
          swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1, -1);
          swift_slowDealloc(v58, -1, -1);

        }
        else
        {

        }
        v65 = v73;
        sub_1007885B0(0, 0xE000000000000000);
        v63 = v65;
      }
      else
      {
        v63 = v73;
      }
      sub_1002DF538(v63, 0);
    }
    swift_release();
  }
}

uint64_t sub_1002BAD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch(sub_1002BAD78, 0, 0);
}

uint64_t sub_1002BAD78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 56) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_1010F595C);
  *(_QWORD *)(v0 + 64) = v3;
  *v3 = v0;
  v3[1] = sub_1002BAE08;
  return sub_1002CAD74(*(_QWORD *)(v0 + 48));
}

uint64_t sub_1002BAE08(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 64);
  *(_BYTE *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002BAE64, 0, 0);
}

uint64_t sub_1002BAE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v1 = *(_QWORD *)(v0 + 56);
    type metadata accessor for Transaction(0);
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    static Transaction.named<A>(_:with:)("retryIfNeeded", 13, 2, sub_1002DF764, v3);
    swift_release();
    swift_task_dealloc(v3);
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6CA8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Got connection event but timed out waiting for pairing event.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    swift_release();

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002BAFC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD aBlock[6];
  _QWORD *v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(a2 + 48);
  v13 = (_QWORD *)swift_allocObject(&unk_1010673E0, 40, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  aBlock[4] = sub_1002DF788;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010673F8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = a3;
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1002BB1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 48);
  v13 = (_QWORD *)swift_allocObject(&unk_101067458, 40, 7);
  v13[2] = a1;
  v13[3] = a3;
  v13[4] = a2;
  aBlock[4] = sub_1002DF7E4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101067470;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_1002BB3E0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  os_log_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  _BYTE *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BYTE *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void (*v79)(_BYTE *, uint64_t);
  uint64_t v80;
  char *v81;
  char *v82;
  _BYTE *v83;
  char *v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  _BYTE *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _BYTE *v119;
  void (*v120)(_BYTE *, _BYTE *);
  _BYTE *v121;
  _BYTE *v122;
  uint8_t *v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BYTE v153[12];
  int v154;
  uint64_t v155;
  os_log_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE *v165;
  _BYTE *v166;
  _BYTE *v167;
  _BYTE *v168;
  _BYTE *v169;
  _BYTE *v170;
  uint8_t *v171;
  char *v172;
  _BYTE *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176[4];

  v172 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v4);
  v165 = &v153[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v163 = *(_QWORD *)(v6 - 8);
  v164 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = &v153[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v161 = &v153[-v10];
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v11);
  v169 = &v153[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v174 = type metadata accessor for MACAddress(0);
  v171 = *(uint8_t **)(v174 - 8);
  v13 = __chkstk_darwin(v174);
  v168 = &v153[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v173 = &v153[-v15];
  v16 = sub_10001A9A8(&qword_1010F5F58);
  __chkstk_darwin(v16);
  v18 = &v153[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for BluetoothPairingState(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v162 = &v153[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v21);
  v159 = &v153[-v24];
  v25 = __chkstk_darwin(v23);
  v166 = &v153[-v26];
  v27 = __chkstk_darwin(v25);
  v29 = &v153[-v28];
  __chkstk_darwin(v27);
  v31 = &v153[-v30];
  Transaction.capture()();
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B6CA8);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter(v34);
  v36 = v35;
  v37 = os_log_type_enabled(v34, v35);
  v160 = v9;
  if (v37)
  {
    v38 = swift_slowAlloc(22, -1);
    v158 = v20;
    v39 = v38;
    v157 = swift_slowAlloc(32, -1);
    v175 = a2;
    v176[0] = v157;
    *(_DWORD *)v39 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2080;
    v155 = v39 + 14;
    v175 = a2;
    v40 = sub_100136560();
    v156 = v34;
    v41 = FixedWidthInteger.data.getter(&type metadata for UInt64, v40);
    v154 = v36;
    v42 = v18;
    v43 = v29;
    v44 = a2;
    v46 = v45;
    v47 = v33;
    v48 = v31;
    v49 = Data.hexString.getter(v41, v45);
    v170 = (_BYTE *)v19;
    v51 = v50;
    v52 = v46;
    a2 = v44;
    v29 = v43;
    v18 = v42;
    sub_10001BC14(v41, v52);
    v53 = v49;
    v31 = v48;
    v33 = v47;
    v175 = sub_100016940(v53, v51, v176);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v155, v39 + 22);
    v19 = (uint64_t)v170;
    swift_bridgeObjectRelease();
    v54 = v156;
    _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v154, "handlePairingNotification. State %llu. Raw %s", (uint8_t *)v39, 0x16u);
    v55 = v157;
    swift_arrayDestroy(v157, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    v56 = v39;
    v20 = v158;
    swift_slowDealloc(v56, -1, -1);

  }
  else
  {

  }
  BluetoothPairingState.init(rawValue:)(a2);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v31, v18, v19);
    v61 = *(_BYTE **)(v20 + 16);
    v167 = v31;
    v62 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v61)(v29, v31, v19);
    v158 = v33;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = v29;
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v176[0] = v67;
      *(_DWORD *)v66 = 136446210;
      v170 = v61;
      v68 = sub_100006204(&qword_1010F5F60, (uint64_t (*)(uint64_t))&type metadata accessor for BluetoothPairingState, (uint64_t)&protocol conformance descriptor for BluetoothPairingState);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v19, v68);
      v175 = sub_100016940(v69, v70, v176);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease();
      v71 = *(_BYTE **)(v20 + 8);
      v61 = v170;
      ((void (*)(_BYTE *, uint64_t))v71)(v65, v19);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "BluetoothPairingState %{public}s", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      v71 = *(_BYTE **)(v20 + 8);
      ((void (*)(_BYTE *, uint64_t))v71)(v29, v19);
    }

    v72 = v174;
    v73 = v167;
    v74 = BluetoothPairingState.isUnpaired.getter();
    if ((v74 & 1) != 0)
    {
      v168 = v71;
      v75 = v173;
      v76 = BluetoothPairingState.macAddress.getter(v74);
      __chkstk_darwin(v76);
      *(_QWORD *)&v153[-16] = v75;
      *(_QWORD *)&v153[-8] = v77;
      sub_10001A9A8(&qword_101110700);
      Lock.callAsFunction<A>(_:)(sub_100245650);
      v78 = (char *)v176[0];
      v79 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v171 + 1);
      v79(v75, v72);
      if (v78)
      {
        sub_1007885B0(0xD000000000000013, 0x8000000100ECFB70);
        BluetoothPairingState.macAddress.getter(v80);
        sub_1002BC4E8(v78, (uint64_t)v75);

        v79(v75, v72);
        ((void (*)(_BYTE *, uint64_t))v168)(v73, v19);
        return;
      }
      v91 = v166;
      v92 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v61)(v166, v73, v19);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(12, -1);
        v96 = swift_slowAlloc(32, -1);
        v170 = (_BYTE *)v19;
        v97 = v96;
        v176[0] = v96;
        *(_DWORD *)v95 = 136315138;
        v171 = v95 + 4;
        v98 = v173;
        BluetoothPairingState.macAddress.getter(v96);
        v99 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v100 = dispatch thunk of CustomStringConvertible.description.getter(v72, v99);
        v102 = v101;
        v79(v98, v174);
        v175 = sub_100016940(v100, v102, v176);
        v73 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v171, v95 + 12);
        v72 = v174;
        swift_bridgeObjectRelease();
        v103 = v91;
        v71 = v168;
        ((void (*)(_BYTE *, _BYTE *))v168)(v103, v170);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Unable to retrieve peripheral from %s", v95, 0xCu);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        v104 = v97;
        v19 = (uint64_t)v170;
        swift_slowDealloc(v104, -1, -1);
        swift_slowDealloc(v95, -1, -1);

      }
      else
      {
        v121 = v91;
        v71 = v168;
        ((void (*)(_BYTE *, uint64_t))v168)(v121, v19);

        v98 = v173;
      }
      v122 = v169;
      BluetoothPairingState.macAddress.getter(v105);
      v123 = (uint8_t *)(v172 + 112);
      goto LABEL_27;
    }
    if ((BluetoothPairingState.isPaired.getter() & 1) != 0)
    {
      v81 = v168;
      ((void (*)(void))BluetoothPairingState.macAddress.getter)();
      v82 = v172;
      swift_beginAccess(v172 + 112, v176, 33, 0);
      v83 = v173;
      LOBYTE(v81) = sub_100A0EA5C((uint64_t)v173, v81);
      v84 = (char *)*((_QWORD *)v171 + 1);
      ((void (*)(_BYTE *, uint64_t))v84)(v83, v72);
      v85 = swift_endAccess(v176);
      if ((v81 & 1) == 0)
      {
        v172 = v84;
        v106 = v162;
        v107 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v61)(v162, v73, v19);
        v108 = Logger.logObject.getter(v107);
        v109 = static os_log_type_t.info.getter(v108);
        if (os_log_type_enabled(v108, v109))
        {
          v110 = (uint8_t *)swift_slowAlloc(12, -1);
          v111 = swift_slowAlloc(32, -1);
          v170 = (_BYTE *)v19;
          v112 = v111;
          v176[0] = v111;
          *(_DWORD *)v110 = 136315138;
          v168 = v71;
          v113 = v173;
          ((void (*)(void))BluetoothPairingState.macAddress.getter)();
          v114 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
          v115 = dispatch thunk of CustomStringConvertible.description.getter(v72, v114);
          v116 = v72;
          v118 = v117;
          ((void (*)(_BYTE *, uint64_t))v172)(v113, v116);
          v175 = sub_100016940(v115, v118, v176);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v110 + 4, v110 + 12);
          swift_bridgeObjectRelease();
          v119 = v170;
          v120 = (void (*)(_BYTE *, _BYTE *))v168;
          ((void (*)(_BYTE *, _BYTE *))v168)(v106, v170);
          _os_log_impl((void *)&_mh_execute_header, v108, v109, "Already handling pairing event for this MAC %s.", v110, 0xCu);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1, -1);
          swift_slowDealloc(v110, -1, -1);

          v120(v167, v119);
          return;
        }

        ((void (*)(_BYTE *, uint64_t))v71)(v106, v19);
        goto LABEL_31;
      }
      v171 = (uint8_t *)(v82 + 112);
      BluetoothPairingState.macAddress.getter(v85);
      v86 = v165;
      sub_10081F5CC((uint64_t)v83, (uint64_t)v165);
      ((void (*)(_BYTE *, uint64_t))v84)(v83, v72);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v163 + 48))(v86, 1, v164) != 1)
      {
        v172 = v84;
        v170 = (_BYTE *)v19;
        v124 = v161;
        sub_1000126EC((uint64_t)v86, (uint64_t)v161, type metadata accessor for OwnedBeaconGroup);
        v125 = (uint64_t)v160;
        v126 = sub_10005972C((uint64_t)v124, (uint64_t)v160, type metadata accessor for OwnedBeaconGroup);
        v127 = Logger.logObject.getter(v126);
        v128 = static os_log_type_t.default.getter(v127);
        if (os_log_type_enabled(v127, v128))
        {
          v129 = (uint8_t *)swift_slowAlloc(12, -1);
          v130 = swift_slowAlloc(32, -1);
          v176[0] = v130;
          *(_DWORD *)v129 = 136315138;
          v131 = sub_10036F350();
          v175 = sub_100016940(v131, v132, v176);
          v72 = v174;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v129 + 4, v129 + 12);
          swift_bridgeObjectRelease();
          v124 = v161;
          sub_1000126B0(v125, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v127, v128, "Received pairing event for existing %s", v129, 0xCu);
          swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
          v133 = v130;
          v73 = v167;
          swift_slowDealloc(v133, -1, -1);
          swift_slowDealloc(v129, -1, -1);
        }
        else
        {
          sub_1000126B0(v125, type metadata accessor for OwnedBeaconGroup);
        }

        v136 = v170;
        v137 = v173;
        v138 = dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(1);
        BluetoothPairingState.macAddress.getter(v138);
        swift_beginAccess(v171, v176, 33, 0);
        v139 = v169;
        sub_100C8280C((uint64_t)v137, (uint64_t)v169);
        ((void (*)(_BYTE *, uint64_t))v172)(v137, v72);
        sub_100004048((uint64_t)v139, (uint64_t *)&unk_1010F9890);
        swift_endAccess(v176);
        sub_1000126B0((uint64_t)v124, type metadata accessor for OwnedBeaconGroup);
        v134 = v73;
        v135 = (uint64_t)v136;
        goto LABEL_32;
      }
      v87 = sub_100004048((uint64_t)v86, (uint64_t *)&unk_1010FF7F0);
      v88 = BluetoothPairingState.macAddress.getter(v87);
      v170 = v153;
      __chkstk_darwin(v88);
      *(_QWORD *)&v153[-16] = v83;
      *(_QWORD *)&v153[-8] = v89;
      sub_10001A9A8(&qword_101110700);
      Lock.callAsFunction<A>(_:)(sub_100245650);
      v90 = (void *)v176[0];
      ((void (*)(_BYTE *, uint64_t))v84)(v83, v72);
      if (!v90)
      {
        v172 = v84;
        v140 = v159;
        v141 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v61)(v159, v73, v19);
        v142 = Logger.logObject.getter(v141);
        v143 = static os_log_type_t.error.getter(v142);
        if (os_log_type_enabled(v142, v143))
        {
          v144 = (uint8_t *)swift_slowAlloc(12, -1);
          v145 = swift_slowAlloc(32, -1);
          v170 = (_BYTE *)v19;
          v146 = v145;
          v176[0] = v145;
          *(_DWORD *)v144 = 136315138;
          v168 = v71;
          v98 = v173;
          BluetoothPairingState.macAddress.getter(v145);
          v147 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
          v148 = dispatch thunk of CustomStringConvertible.description.getter(v72, v147);
          v150 = v149;
          v79 = (void (*)(_BYTE *, uint64_t))v172;
          ((void (*)(_BYTE *, uint64_t))v172)(v98, v174);
          v175 = sub_100016940(v148, v150, v176);
          v73 = v167;
          v71 = v168;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, v176, v144 + 4, v144 + 12);
          v72 = v174;
          swift_bridgeObjectRelease();
          ((void (*)(_BYTE *, _BYTE *))v71)(v159, v170);
          _os_log_impl((void *)&_mh_execute_header, v142, v143, "Unable to retrieve peripheral from %s", v144, 0xCu);
          swift_arrayDestroy(v146, 1, (char *)&type metadata for Any + 8);
          v151 = v146;
          v19 = (uint64_t)v170;
          swift_slowDealloc(v151, -1, -1);
          swift_slowDealloc(v144, -1, -1);

        }
        else
        {
          ((void (*)(_BYTE *, uint64_t))v71)(v140, v19);

          v79 = (void (*)(_BYTE *, uint64_t))v172;
          v98 = v173;
        }
        v122 = v169;
        BluetoothPairingState.macAddress.getter(v152);
        v123 = v171;
LABEL_27:
        swift_beginAccess(v123, v176, 33, 0);
        sub_100C8280C((uint64_t)v98, (uint64_t)v122);
        v79(v98, v72);
        sub_100004048((uint64_t)v122, (uint64_t *)&unk_1010F9890);
        swift_endAccess(v176);
        goto LABEL_31;
      }
      sub_1007885B0(0xD000000000000013, 0x8000000100ECFB70);
      v176[0] = (uint64_t)v90;
      swift_retain();
      PassthroughSubject.send(_:)(v176);
      swift_release();
      LOBYTE(v176[0]) = 2;
      swift_retain();
      PassthroughSubject.send(completion:)(v176);
      swift_release();
      sub_1002BDCBC((uint64_t)v90);

    }
LABEL_31:
    v134 = v73;
    v135 = v19;
LABEL_32:
    ((void (*)(_BYTE *, uint64_t))v71)(v134, v135);
    return;
  }
  v57 = sub_100004048((uint64_t)v18, &qword_1010F5F58);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.info.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Invalid bluetooth pairing state.", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

}

void sub_1002BC4E8(char *a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class *v23;
  Class isa;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  void *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  NSObject *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  void (*v90)(char *, uint64_t, uint64_t);
  _QWORD *v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  objc_class *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  Class *v107;
  uint64_t aBlock[7];
  _QWORD *v109;
  uint64_t v110;

  v3 = v2;
  v107 = (Class *)a2;
  v105 = a1;
  v102 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v102);
  v103 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v5 - 8);
  v101 = v5;
  __chkstk_darwin(v5);
  v99 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v7 - 8);
  v98 = v7;
  __chkstk_darwin(v7);
  v96 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD **)(v9 - 8);
  v11 = v10[8];
  v12 = __chkstk_darwin(v9);
  v106 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v104 = (char *)&v89 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v89 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v89 - v18;
  v20 = type metadata accessor for DispatchPredicate(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (Class *)((char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  isa = v3[6].isa;
  *v23 = isa;
  (*(void (**)(Class *, _QWORD, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  v95 = isa;
  v25 = _dispatchPreconditionTest(_:)(v23);
  (*(void (**)(Class *, uint64_t))(v21 + 8))(v23, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_1010E9B08, sub_1002B4720);
LABEL_4:
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6CA8);
    v29 = v104;
    v90 = (void (*)(char *, uint64_t, uint64_t))v25;
    v30 = ((uint64_t (*)(char *, Class *, uint64_t))v25)(v104, v23, v9);
    v92 = v28;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      aBlock[0] = v34;
      *(_DWORD *)v33 = 136446210;
      v89 = v33 + 4;
      v35 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v9, v35);
      v109 = (_QWORD *)sub_100016940(v36, v37, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v89, v33 + 12);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v21)(v29, v9);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Received unpair event for address %{public}s.", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v38 = v33;
      v23 = v107;
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v21)(v29, v9);
    }

    v49 = v9;
    v50 = sub_1002B9504(v105);
    v51 = v106;
    if (v50)
    {
      v52 = v50;
      v53 = QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DCB54);
      if ((aBlock[0] & 1) != 0)
      {
        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.error.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Pairing is in progress. Deferring unpair!", v56, 2u);
          swift_slowDealloc(v56, -1, -1);
        }

        swift_beginAccess(v93, aBlock, 33, 0);
        v57 = v103;
        sub_100C8280C((uint64_t)v23, v103);
        sub_100004048(v57, (uint64_t *)&unk_1010F9890);
        swift_endAccess(aBlock);
      }
      else
      {
        v62 = dispatch_group_create();
        dispatch_group_enter(v62);
        v104 = 0;
        v63 = v90;
        v90(v51, (uint64_t)v23, v9);
        v64 = v91;
        v65 = *((unsigned __int8 *)v91 + 80);
        v66 = (v65 + 16) & ~v65;
        v67 = v65 | 7;
        v68 = (v11 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        v69 = swift_allocObject(&unk_101067318, v68 + 8, v65 | 7);
        v89 = (uint8_t *)v52;
        v70 = v69;
        v71 = (void (*)(uint64_t, char *, uint64_t))v64[4];
        v71(v69 + v66, v51, v49);
        *(_QWORD *)(v70 + v68) = v62;
        v93 = v62;
        v72 = (uint64_t)v107;
        sub_100A40F84((uint64_t)v107, (uint64_t)sub_1002DF5C4, v70);
        swift_release();
        v63(v51, v72, v49);
        v73 = (v68 + 15) & 0xFFFFFFFFFFFFFFF8;
        v74 = swift_allocObject(&unk_101067340, v73 + 8, v67);
        v71(v74 + v66, v51, v49);
        *(_QWORD *)(v74 + v68) = v94;
        v75 = v105;
        *(_QWORD *)(v74 + v73) = v105;
        aBlock[4] = (uint64_t)sub_1002DF690;
        aBlock[5] = v74;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100016FB8;
        aBlock[3] = (uint64_t)&unk_101067358;
        v76 = _Block_copy(aBlock);
        swift_retain();
        v77 = v75;
        v78 = v96;
        static DispatchQoS.unspecified.getter(v77);
        v109 = _swiftEmptyArrayStorage;
        v79 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v80 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v81 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v82 = v99;
        v83 = v101;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v109, v80, v81, v101, v79);
        v84 = v93;
        OS_dispatch_group.notify(qos:flags:queue:execute:)(v78, v82, v95, v76);
        _Block_release(v76);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v82, v83);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v78, v98);
        swift_release();
        v85 = sub_1002B9C10();
        v86 = __chkstk_darwin(v85);
        v87 = (uint64_t)v107;
        *(&v89 - 2) = (uint8_t *)v86;
        *(&v89 - 1) = (uint8_t *)v87;
        v88 = v103;
        OS_dispatch_queue.sync<A>(execute:)(sub_1002DF6DC, &v89 - 4, v102);
        sub_100004048(v88, (uint64_t *)&unk_1010F9890);
        swift_release();

      }
      swift_release();
    }
    else
    {
      v58 = Logger.logObject.getter(0);
      v59 = static os_log_type_t.error.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unable to create a new pairing manager to handle unpair!", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

      swift_beginAccess(v93, aBlock, 33, 0);
      v61 = v103;
      sub_100C8280C((uint64_t)v23, v103);
      sub_100004048(v61, (uint64_t *)&unk_1010F9890);
      swift_endAccess(aBlock);
    }
    return;
  }
  v25 = v10[2];
  v23 = v107;
  ((void (*)(char *, Class *, uint64_t))v25)(v17, v107, v9);
  swift_beginAccess(&v3[14], aBlock, 33, 0);
  v26 = sub_100A0EA5C((uint64_t)v19, v17);
  v21 = v10[1];
  ((void (*)(char *, uint64_t))v21)(v19, v9);
  swift_endAccess(aBlock);
  if ((v26 & 1) != 0)
  {
    v91 = v10;
    v93 = v3 + 14;
    v106 = v19;
    v94 = v3;
    if (qword_1010E9B08 == -1)
      goto LABEL_4;
    goto LABEL_24;
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v39 = type metadata accessor for Logger(0);
  sub_10001A9E8(v39, (uint64_t)qword_1011B6CA8);
  v40 = ((uint64_t (*)(char *, Class *, uint64_t))v25)(v106, v23, v9);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    aBlock[0] = v44;
    *(_DWORD *)v43 = 136446210;
    v45 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v46 = v106;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v9, v45);
    v109 = (_QWORD *)sub_100016940(v47, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v21)(v46, v9);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Already handling unpairing event for this MAC %{public}s.", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v21)(v106, v9);
  }

}

void sub_1002BCF34(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t My;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B6CA8);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v23 = a2;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v26[0] = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v4, v15);
    v24 = sub_100016940(v16, v17, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unpair completed for address %{public}s.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v18 = v13;
    a2 = v23;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  My = type metadata accessor for Feature.FindMy(0);
  v26[3] = My;
  v26[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v20 = sub_100018F08(v26);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v20, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  if ((My & 1) != 0)
  {
    v21 = (void *)SPManagedCBPeripheralChangedNotification;
    v22 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    DarwinNotificationHelper.init(notificationName:rateLimit:)(v21, 0.0);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    swift_release();
  }
  dispatch_group_leave(a2);
}

void sub_1002BD218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[4];

  v87 = a2;
  v5 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v5);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BluetoothManagerDevice(0);
  v83 = *(_QWORD *)(v8 - 8);
  v84 = v8;
  v9 = __chkstk_darwin(v8);
  v86 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v73 - v11;
  v13 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  __chkstk_darwin(v13);
  v78 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v15);
  v77 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MACAddress(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v75 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v81 = (char *)&v73 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v73 - v23;
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v76 = v12;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6CA8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v88 = a1;
  v28 = v27(v24, a1, v17);
  v89 = v26;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v85 = v7;
  if (v31)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v91[0] = v33;
    v73 = a3;
    v74 = v27;
    *(_DWORD *)v32 = 136446210;
    v34 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v17, v34);
    v90 = sub_100016940(v35, v36, v91);
    a3 = v73;
    v27 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease();
    v82 = *(void (**)(char *, uint64_t))(v18 + 8);
    v82(v24, v17);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Removing %{public}s from unpairing addresses.", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    v82 = *(void (**)(char *, uint64_t))(v18 + 8);
    v82(v24, v17);
  }

  v37 = v87;
  swift_beginAccess(v87 + 112, v91, 33, 0);
  v38 = v77;
  v39 = v88;
  sub_100C8280C(v88, v77);
  sub_100004048(v38, (uint64_t *)&unk_1010F9890);
  swift_endAccess(v91);
  v40 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  v41 = (uint64_t)v78;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

  swift_beginAccess(v37 + 184, v91, 33, 0);
  sub_1001036AC(v41);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v41, v80);
  swift_endAccess(v91);
  swift_release();
  v42 = v81;
  v43 = v27(v81, v39, v17);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.debug.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v91[0] = v47;
    *(_DWORD *)v46 = 136446210;
    v48 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v17, v48);
    v90 = sub_100016940(v49, v50, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v46 + 4, v46 + 12);
    swift_bridgeObjectRelease();
    v51 = v82;
    v82(v42, v17);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Resetting attempted retries for %{public}s.", v46, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    v52 = v47;
    v37 = v87;
    swift_slowDealloc(v52, -1, -1);
    v53 = v46;
    v39 = v88;
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    v51 = v82;
    v82(v42, v17);
  }

  v55 = (uint64_t)v85;
  v54 = v86;
  v91[0] = sub_1002B4F98();
  sub_100103824(v39);
  sub_1002B53C0(v91[0]);
  sub_1002CA428(v39, v55);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v55, 1, v84) == 1)
  {
    sub_100004048(v55, &qword_1010F5D00);
    v56 = v75;
    v57 = v27(v75, v39, v17);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v91[0] = v61;
      *(_DWORD *)v60 = 136446210;
      v62 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v17, v62);
      v90 = sub_100016940(v63, v64, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v60 + 4, v60 + 12);
      swift_bridgeObjectRelease();
      v51(v56, v17);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "No BT device matching %{public}s after unpair as expected.", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      v51(v56, v17);
    }

  }
  else
  {
    v65 = (uint64_t)v76;
    sub_1000126EC(v55, (uint64_t)v76, type metadata accessor for BluetoothManagerDevice);
    v66 = sub_10005972C(v65, v54, type metadata accessor for BluetoothManagerDevice);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = swift_slowAlloc(32, -1);
      v91[0] = v70;
      *(_DWORD *)v69 = 136315138;
      v71 = sub_10015AE8C();
      v90 = sub_100016940(v71, v72, v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v86, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Found paired BT device %s after unpair. Need to pair.", v69, 0xCu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);
    }
    else
    {
      sub_1000126B0(v54, type metadata accessor for BluetoothManagerDevice);
    }

    sub_100E099AC(v39, *(_QWORD *)(*(_QWORD *)(v37 + 32) + 24));
    sub_1000126B0(v65, type metadata accessor for BluetoothManagerDevice);
  }
}

void sub_1002BDAE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  uint64_t v12;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v11 = a1;
    v12 = v6;
    *(_DWORD *)v5 = 136446210;
    swift_errorRetain(a1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v8 = String.init<A>(describing:)(&v11, v7);
    v11 = sub_100016940(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Fake classic pairing completed with error %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1002BDCBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  _QWORD *v50;
  unint64_t v52;
  _QWORD v53[2];
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66[3];
  id v67;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5EA8);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F5EB0);
  v59 = *(_QWORD *)(v10 - 8);
  v60 = v10;
  __chkstk_darwin(v10);
  v58 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F5EB8);
  v62 = *(_QWORD *)(v12 - 8);
  v63 = v12;
  __chkstk_darwin(v12);
  v61 = (char *)v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)sub_10001A9A8(&qword_1010F5EC0);
  v65 = *(v14 - 1);
  __chkstk_darwin(v14);
  v64 = (char *)v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (_QWORD *)((char *)v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v2 + 48);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, unint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, unint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v54 = v14;
  v55 = (void *)a1;
  v23 = sub_10001A9A8(&qword_1010F5CF8);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v24 = (void *)PassthroughSubject.init()();
  *(_QWORD *)(v2 + 144) = v24;
  swift_retain();
  swift_release();
  v53[1] = v24;
  v66[0] = v24;
  v25 = sub_1000193A4(&qword_1010F5EC8, &qword_1010F5CF8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v66[0] = (id)Publisher.eraseToAnyPublisher()(v23, v25);
  v67 = v21;
  a1 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v14 = *(_QWORD **)(*(_QWORD *)(a1 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v6, 1, 1, a1);
  v21 = v21;
  v26 = sub_10001A9A8(&qword_1010F5ED0);
  v22 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v27 = sub_1000193A4(&qword_1010F5ED8, &qword_1010F5ED0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v53[0] = v2;
  v28 = v27;
  v16 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(&v67, v6, v26, v22, v28, v16);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  swift_release();
  if (qword_1010E9B10 != -1)
LABEL_5:
    swift_once(&qword_1010E9B10, sub_1002B47E8);
  v29 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v30 = sub_10001A9E8(v29, (uint64_t)qword_1010F5918);
  v66[0] = v21;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v14)(v6, 1, 1, a1);
  v31 = sub_1000193A4(&qword_1010F5EE0, &qword_1010F5EA8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v32 = v21;
  v52 = v16;
  v33 = v57;
  v34 = v58;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v30, v66, v6, sub_1000A8C14, 0, v57, v22, v31, v52);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v33);
  v35 = sub_10001A9A8(&qword_1010F5EE8);
  v36 = sub_1000193A4(&qword_1010F5EF0, &qword_1010F5EB0, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v37 = v60;
  v38 = v61;
  Publisher.map<A>(_:)(sub_1002DFD30, 0, v60, v35, v36);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v37);
  v39 = sub_10001A9A8(&qword_1010F5EF8);
  v40 = sub_1000193A4(&qword_1010F5F00, &qword_1010F5EB8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v41 = sub_1000193A4(&qword_1010F5F08, &qword_1010F5EF8, (const char *)&protocol conformance descriptor for Just<A>);
  v42 = v63;
  v43 = v64;
  Publisher.catch<A>(_:)(sub_1002BA624, 0, v63, v39, v40, v41);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v42);
  v44 = swift_allocObject(&unk_101066A80, 24, 7);
  v45 = v53[0];
  swift_weakInit(v44 + 16, v53[0]);
  v46 = swift_allocObject(&unk_1010672F0, 32, 7);
  v47 = v55;
  *(_QWORD *)(v46 + 16) = v44;
  *(_QWORD *)(v46 + 24) = v47;
  v48 = sub_1000193A4(&qword_1010F5F10, &qword_1010F5EC0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v49 = v47;
  v50 = v54;
  Publisher<>.sink(receiveValue:)(sub_1002DF530, v46, v54, v48);
  swift_release();
  (*(void (**)(char *, _QWORD *))(v65 + 8))(v43, v50);
  swift_beginAccess(v45 + 72, v66, 33, 0);
  AnyCancellable.store(in:)(v45 + 72);
  swift_endAccess(v66);
  swift_release();
  return swift_release();
}

uint64_t sub_1002BE2C4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v3 = *a1;
  v4 = 1;
  v1 = sub_10001A9A8(&qword_1010F5EE8);
  return Just.init(_:)(&v3, v1);
}

void sub_1002BE314(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  NSObject *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  id v64;
  void **v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  char *v86;
  uint64_t Strong;
  id v88;
  unint64_t v89;
  _QWORD v90[2];
  char v91[24];

  v86 = a3;
  v5 = type metadata accessor for MACAddress(0);
  v84 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v8);
  v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F5D08);
  __chkstk_darwin(v11);
  v85 = (void **)((char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v13);
  v83 = (uint64_t)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v77 - v20;
  v88 = *(id *)a1;
  v22 = *(_BYTE *)(a1 + 8);
  a2 += 16;
  swift_beginAccess(a2, v91, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    if ((v22 & 1) != 0)
    {
      if ((v88 & 1) == 0)
      {
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v23 = type metadata accessor for Logger(0);
        v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6CA8);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.error.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v27 = 138412290;
          v29 = sub_1002DC9E4();
          v30 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v29, 0, 0);
          *v31 = 0;
          v32 = _swift_stdlib_bridgeErrorToNSError(v30);
          v89 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v27 + 4, v27 + 12);
          *v28 = v32;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "subscribeToConnectionEvents failure: %@", v27, 0xCu);
          v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v28, 1, v33);
          swift_slowDealloc(v28, -1, -1);
          swift_slowDealloc(v27, -1, -1);
        }

        goto LABEL_32;
      }
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v59 = type metadata accessor for Logger(0);
      v60 = sub_10001A9E8(v59, (uint64_t)qword_1011B6CA8);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.error.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Got pairing event but timed out waiting for connection event.", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }

      goto LABEL_31;
    }
    v81 = v10;
    v82 = v7;
    v34 = v86;
    v35 = *(void **)&v86[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    v36 = (char *)v88;
    v37 = objc_msgSend(v35, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v37);

    v38 = objc_msgSend(*(id *)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v39 = static UUID.== infix(_:_:)(v21, v19);
    v40 = *(void (**)(char *, uint64_t))(v16 + 8);
    v40(v19, v15);
    v40(v21, v15);
    v89 = 0;
    v90[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v89 = 0xD000000000000019;
    v90[0] = 0x8000000100ECFA60;
    if ((v39 & 1) != 0)
      v41 = 1702195828;
    else
      v41 = 0x65736C6166;
    if ((v39 & 1) != 0)
      v42 = 0xE400000000000000;
    else
      v42 = 0xE500000000000000;
    v43 = v42;
    String.append(_:)(*(Swift::String *)&v41);
    swift_bridgeObjectRelease();
    v44._object = (void *)0x8000000100ECFA80;
    v44._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v44);
    v46 = v89;
    v45 = v90[0];
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B6CA8);
    sub_1007885B0(v46, v45);
    swift_bridgeObjectRelease();
    v49 = v34;
    v80 = v48;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(8, -1);
      v79 = v5;
      v54 = (_QWORD *)v53;
      v78 = v36;
      *(_DWORD *)v52 = 138412290;
      v89 = (unint64_t)v49;
      v55 = v39;
      v56 = v49;
      v36 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v52 + 4, v52 + 12);
      *v54 = v49;

      v39 = v55;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Paired peripheral: %@", v52, 0xCu);
      v57 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v54, 1, v57);
      v58 = v54;
      v5 = v79;
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {

      v50 = v49;
    }
    v10 = v81;
    v7 = v82;
    v64 = v88;

    v65 = v85;
    if ((v39 & 1) == 0)
    {
      sub_1002DF538(v64, 0);
LABEL_32:
      swift_release();
      return;
    }
    sub_1002C6020((uint64_t)v36, v85);
    v66 = sub_10001A9A8(&qword_1010F5D10);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v65, 1, v66) != 1)
    {
      v74 = *v65;
      v75 = (uint64_t)v65 + *(int *)(v66 + 48);
      v76 = v83;
      sub_1000126EC(v75, v83, type metadata accessor for BluetoothManagerDevice);
      sub_1002C6E6C((uint64_t)v74, v76, 0, 0, (uint64_t)_swiftEmptyArrayStorage);

      sub_1002DF538(v64, 0);
      sub_1000126B0(v76, type metadata accessor for BluetoothManagerDevice);
LABEL_31:
      sub_100786FB4(v7);
      swift_beginAccess(Strong + 112, &v89, 33, 0);
      sub_100C8280C((uint64_t)v7, (uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v5);
      sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F9890);
      swift_endAccess(&v89);
      goto LABEL_32;
    }
    sub_100004048((uint64_t)v65, &qword_1010F5D08);
    sub_1002DF544(v64, 0);
    v67 = v36;
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.error.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v70 = 138412290;
      v89 = (unint64_t)v67;
      v72 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v70 + 4, v70 + 12);
      *v71 = v64;
      sub_1002DF538(v64, 0);
      sub_1002DF538(v64, 0);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to sanitize MAC address for peripheral %@", v70, 0xCu);
      v73 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v71, 1, v73);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      swift_release();
      sub_1002DF538(v64, 0);
    }
    else
    {
      sub_1002DF538(v64, 0);
      sub_1002DF538(v64, 0);

      swift_release();
    }
  }
}

uint64_t sub_1002BEC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  id v38;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F5DD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F5DE0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v37[0] = 0x7365547265646E75;
  v37[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v38, v37, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    v36 = v10;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v35 = v6;
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6CA8);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "connectionEventInitialSetup", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = sub_10001A9A8(&qword_1010ED4E8);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v20 + 56) = &type metadata for BAServiceIdentifier;
    *(_QWORD *)(v20 + 64) = &off_101077A98;
    *(_BYTE *)(v20 + 32) = 1;
    v21 = sub_100E0B1B4(v20);
    swift_bridgeObjectRelease();
    v37[0] = v21;
    v38 = *(id *)(v1 + 48);
    v22 = v38;
    v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 1, 1, v23);
    v24 = v22;
    v25 = sub_10001A9A8(&qword_1010F5DE8);
    v26 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v27 = sub_1000193A4(&qword_1010F5DF0, &qword_1010F5DE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v28 = sub_1001C7EF4();
    Publisher.receive<A>(on:options:)(&v38, v4, v25, v26, v27, v28);
    sub_100004048((uint64_t)v4, &qword_1010EECC8);

    swift_release();
    swift_retain();
    v29 = sub_10001A9A8(&qword_1010F5DF8);
    v30 = sub_1000193A4(&qword_1010F5E00, &qword_1010F5DD8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    Publisher.compactMap<A>(_:)(sub_1002DD528, v1, v5, v29, v30);
    swift_release();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v8, v5);
    v31 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v31 + 16, v1);
    v32 = swift_allocObject(&unk_101066D78, 32, 7);
    *(_QWORD *)(v32 + 16) = sub_1002DD530;
    *(_QWORD *)(v32 + 24) = v31;
    v33 = sub_1000193A4(&qword_1010F5E08, &qword_1010F5DE0, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    Publisher<>.sink(receiveValue:)(sub_1002DFD38, v32, v9, v33);
    swift_release();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v9);
    v34 = v1 + 72;
    swift_beginAccess(v34, v37, 33, 0);
    AnyCancellable.store(in:)(v34);
    swift_endAccess(v37);
    return swift_release();
  }
  return result;
}

void sub_1002BF0B8(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint8_t *v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint8_t *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void *v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  _BOOL4 v82;
  uint8_t *v83;
  void *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  uint8_t *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  void *v143;
  char *v144;
  void (*v145)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v146;
  id v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  id v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int v174;
  char *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint8_t *v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint8_t *v213;
  uint64_t v214;
  uint64_t v215;
  id v216;
  id v217;
  char v218[8];

  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v199 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v183 = sub_10001A9A8(&qword_1010F3980);
  v182 = *(_QWORD *)(v183 - 8);
  __chkstk_darwin(v183);
  v181 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_10001A9A8(&qword_1010F3988);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v184 = (char *)&v172 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_10001A9A8(&qword_1010F3990);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v187 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_10001A9A8(&qword_1010F3998);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v190 = (char *)&v172 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = sub_10001A9A8(&qword_1010F39A0);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195);
  v193 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_10001A9A8(&qword_1010F5E10);
  v197 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198);
  v196 = (char *)&v172 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F5E18);
  v201 = *(_QWORD *)(v14 - 8);
  v202 = v14;
  __chkstk_darwin(v14);
  v200 = (char *)&v172 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v16);
  v18 = (char *)&v172 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for BluetoothManagerDevice(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v176 = (uint64_t)&v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BeaconObservation(0);
  v21 = *(_QWORD **)(v20 - 8);
  v208 = v20;
  v209 = v21;
  __chkstk_darwin(v20);
  v210 = (char *)&v172 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v24 = __chkstk_darwin(v23);
  v212 = (uint64_t)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v203 = (uint64_t)&v172 - v26;
  v27 = type metadata accessor for OwnedBeaconGroup(0);
  v213 = *(uint8_t **)(v27 - 8);
  v214 = v27;
  v28 = __chkstk_darwin(v27);
  v206 = (uint64_t)&v172 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v172 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v172 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v172 - v36;
  v38 = *a1;
  v39 = *((char *)a1 + 8);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v207 = (uint8_t *)type metadata accessor for Logger(0);
  v40 = sub_10001A9E8((uint64_t)v207, (uint64_t)qword_1011B6CA8);
  LocationDecryptionKey.rawValue.getter(v38);
  v41 = LocationDecryptionKey.rawValue.getter(v38);
  v205 = v40;
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter(v42);
  v44 = os_log_type_enabled(v42, v43);
  v215 = a3;
  v180 = v18;
  v177 = v35;
  if (v44)
  {
    v211 = v37;
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (void *)swift_slowAlloc(32, -1);
    v175 = v32;
    v47 = v46;
    v216 = v46;
    v204 = a2;
    *(_DWORD *)v45 = 136315138;
    LocationDecryptionKey.rawValue.getter(v38);
    v48 = sub_100E010C0(v38, v39);
    v50 = v49;

    v217 = (id)sub_100016940(v48, v50, (uint64_t *)&v216);
    a3 = v215;
    a2 = v204;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v45 + 4, v45 + 12);
    v37 = v211;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v42, v43, "connectionEvent: %s", v45, 0xCu);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    v51 = v47;
    v32 = v175;
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {

  }
  if (v39 < 0)
  {
    v55 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
    v56 = *(void **)&v38[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    v57 = v38;
    if (objc_msgSend(v56, "connectedTransport") == 1)
    {
      LODWORD(v58) = v39 & 1;
      v59 = *(_QWORD *)(a2 + 16);
      v60 = (_QWORD *)swift_allocObject(&unk_101066DA0, 40, 7);
      v60[2] = a2;
      v60[3] = v57;
      v60[4] = v59;
      LocationDecryptionKey.rawValue.getter(v38);
      swift_retain();
      swift_retain();
      unsafeFromAsyncTask<A>(_:)(&v216, &unk_1010F5E20, v60, &type metadata for Bool);
      swift_release();
      v61 = (char)v216;
      v62 = v203;
      sub_1002C08B8(v57, v203);
      if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v213 + 6))(v62, 1, v214) == 1)
      {
        sub_100004048(v62, (uint64_t *)&unk_1010FF7F0);
        if ((v61 & 1) != 0)
        {
          if (qword_1010E9D08 != -1)
            swift_once(&qword_1010E9D08, sub_10059A6E0);
          OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
          v63 = sub_100C1B800((uint64_t)v216);
          v64 = swift_bridgeObjectRelease();
          if ((v63 & 1) != 0)
          {
            v65 = Logger.logObject.getter(v64);
            v66 = static os_log_type_t.default.getter(v65);
            if (os_log_type_enabled(v65, v66))
            {
              v67 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v67 = 0;
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "Checking if force pair is needed when no iCloud", v67, 2u);
              swift_slowDealloc(v67, -1, -1);
            }

            type metadata accessor for Transaction(0);
            v68 = swift_allocObject(&unk_101066DC8, 32, 7);
            *(_QWORD *)(v68 + 16) = a2;
            *(_QWORD *)(v68 + 24) = v57;
            LocationDecryptionKey.rawValue.getter(v38);
            swift_retain();
            static Transaction.asyncTask(name:block:)("ClassicPairingSupport.shouldForcePairStandalone", 47, 2, &unk_1010F5E30, v68);
            swift_release();
          }
        }
      }
      else
      {
        sub_1000126EC(v62, (uint64_t)v37, type metadata accessor for OwnedBeaconGroup);
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        sub_10001A9E8((uint64_t)v207, (uint64_t)qword_1011B75D0);
        v93 = (uint64_t)v177;
        v94 = sub_10005972C((uint64_t)v37, (uint64_t)v177, type metadata accessor for OwnedBeaconGroup);
        v95 = Logger.logObject.getter(v94);
        v96 = static os_log_type_t.debug.getter(v95);
        v97 = os_log_type_enabled(v95, v96);
        v213 = v57;
        v173 = v38;
        v211 = v37;
        LODWORD(v212) = (_DWORD)v58;
        if (v97)
        {
          v98 = (uint8_t *)swift_slowAlloc(12, -1);
          v99 = (void *)swift_slowAlloc(32, -1);
          v216 = v99;
          *(_DWORD *)v98 = 136315138;
          v207 = v98 + 4;
          v100 = type metadata accessor for UUID(0);
          v101 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v102 = dispatch thunk of CustomStringConvertible.description.getter(v100, v101);
          v217 = (id)sub_100016940(v102, v103, (uint64_t *)&v216);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v207, v98 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v93, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Saving classic bluetooth connect event for: %s", v98, 0xCu);
          swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v98, -1, -1);
        }
        else
        {
          sub_1000126B0(v93, type metadata accessor for OwnedBeaconGroup);
        }

        if (qword_1010E9CF0 != -1)
          swift_once(&qword_1010E9CF0, sub_10058CADC);
        v114 = qword_1011B7160;
        v115 = &v211[*(int *)(v214 + 24)];
        v116 = type metadata accessor for UUID(0);
        v117 = (uint64_t)v210;
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v210, v115, v116);
        v118 = v208;
        static Date.trustedNow.getter(v117 + *(int *)(v208 + 20));
        *(_BYTE *)(v117 + *(int *)(v118 + 24)) = 37;
        v119 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
        v120 = *((unsigned __int8 *)v209 + 80);
        v121 = (v120 + 32) & ~v120;
        v122 = swift_allocObject(v119, v121 + v209[9], v120 | 7);
        *(_OWORD *)(v122 + 16) = xmmword_100E22B00;
        sub_10005972C(v117, v122 + v121, type metadata accessor for BeaconObservation);
        v123 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v123);
        *(&v172 - 4) = v114;
        *(&v172 - 3) = v122;
        *(&v172 - 2) = 0;
        *(&v172 - 1) = 0;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v172 - 6, &type metadata for () + 1);
        swift_bridgeObjectRelease();
        sub_1000126B0(v117, type metadata accessor for BeaconObservation);
        sub_1007EEF64(23);
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
        type metadata accessor for Transaction(0);
        static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
        v124 = (uint64_t)v180;
        v125 = (char *)v213;
        sub_1002CE410((uint64_t)v213, (uint64_t)v180);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v178 + 48))(v124, 1, v179) == 1)
        {
          sub_100004048(v124, &qword_1010F5D00);
        }
        else
        {
          v126 = v124;
          v127 = v176;
          sub_1000126EC(v126, v176, type metadata accessor for BluetoothManagerDevice);
          sub_1002B8554((uint64_t)v125, v127);
          sub_1000126B0(v127, type metadata accessor for BluetoothManagerDevice);
        }
        v216 = (id)sub_1002C6C2C(v125);
        v217 = *(id *)(a2 + 48);
        v128 = v217;
        v210 = (char *)type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
        v214 = *(_QWORD *)(*((_QWORD *)v210 - 1) + 56);
        v129 = (uint64_t)v199;
        ((void (*)(char *, uint64_t, uint64_t, char *))v214)(v199, 1, 1, v210);
        v130 = v128;
        v204 = a2;
        v209 = v130;
        v131 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
        v132 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v133 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
        v134 = sub_1001C7EF4();
        v135 = v181;
        v207 = (uint8_t *)v131;
        v208 = v133;
        v203 = v132;
        v136 = v134;
        v205 = v134;
        Publisher.receive<A>(on:options:)(&v217, v129, v131, v132, v133, v134);
        sub_100004048(v129, &qword_1010EECC8);

        v137 = swift_release();
        v138 = static Subscribers.Demand.unlimited.getter(v137);
        v139 = type metadata accessor for Peripheral(0);
        v206 = v139;
        v140 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v141 = v184;
        v142 = v183;
        Publisher.flatMap<A, B>(maxPublishers:_:)(v138, sub_1002C0E44, 0, v183, v139, v131, v140, v133);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v135, v142);
        v143 = v209;
        v144 = v210;
        v216 = v209;
        v145 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v214;
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))v214)(v129, 1, 1, v210);
        v146 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
        v147 = v143;
        v148 = v187;
        v149 = v186;
        Publisher.receive<A>(on:options:)(&v216, v129, v186, v132, v146, v136);
        sub_100004048(v129, &qword_1010EECC8);

        v150 = (*(uint64_t (**)(char *, uint64_t))(v185 + 8))(v141, v149);
        v151 = static Subscribers.Demand.unlimited.getter(v150);
        v152 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v153 = v190;
        v154 = v189;
        Publisher.flatMap<A, B>(maxPublishers:_:)(v151, sub_1002C0E48, 0, v189, v206, v207, v152, v208);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v148, v154);
        v216 = v147;
        v145(v129, 1, 1, v144);
        v155 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
        v156 = v147;
        v157 = v204;
        v158 = v193;
        v159 = v192;
        Publisher.receive<A>(on:options:)(&v216, v129, v192, v203, v155, v205);
        sub_100004048(v129, &qword_1010EECC8);

        (*(void (**)(char *, uint64_t))(v191 + 8))(v153, v159);
        v160 = sub_10001A9A8(&qword_1011074A0);
        v161 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v162 = v196;
        v163 = v195;
        Publisher.map<A>(_:)(sub_100245644, 0, v195, v160, v161);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v158, v163);
        v164 = sub_10001A9A8(&qword_1010EEE90);
        v165 = sub_1000193A4(&qword_1010F5E38, &qword_1010F5E10, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
        v166 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
        v58 = v200;
        v167 = v198;
        Publisher.catch<A>(_:)(sub_1002C11A4, 0, v198, v164, v165, v166);
        v168 = v162;
        v57 = v213;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v168, v167);
        v169 = swift_allocObject(&unk_101066A80, 24, 7);
        swift_weakInit(v169 + 16, v157);
        v170 = sub_1000193A4(&qword_1010F5E40, &qword_1010F5E18, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
        v171 = v202;
        Publisher<>.sink(receiveValue:)(sub_1002DD5A0, v169, v202, v170);
        swift_release();
        (*(void (**)(char *, uint64_t))(v201 + 8))(v58, v171);
        swift_beginAccess(v157 + 72, &v216, 33, 0);
        AnyCancellable.store(in:)(v157 + 72);
        swift_endAccess(&v216);
        swift_release();
        sub_1000126B0((uint64_t)v211, type metadata accessor for OwnedBeaconGroup);
        v38 = v173;
        LOBYTE(v58) = v212;
      }
      sub_1002CC864((uint64_t)v57);
      v216 = v57;
      swift_retain();
      PassthroughSubject.send(_:)(&v216);
      swift_release();
      LOBYTE(v216) = 2;
      swift_retain();
      PassthroughSubject.send(completion:)(&v216);
      swift_release();
    }
    else
    {
      LocationDecryptionKey.rawValue.getter(v38);
      v69 = v57;
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.debug.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = (void *)swift_slowAlloc(32, -1);
        v216 = v73;
        *(_DWORD *)v72 = 136315138;
        v74 = objc_msgSend(*(id *)&v38[v55], "connectedTransport");
        if (v74 == 2)
        {
          v75 = 0xEA00000000007967;
          v76 = 0x72656E45776F6C2ELL;
        }
        else
        {
          v75 = 0xE800000000000000;
          if (v74 == 1)
            v76 = 0x63697373616C632ELL;
          else
            v76 = 0x6E776F6E6B6E752ELL;
        }
        v217 = (id)sub_100016940(v76, v75, (uint64_t *)&v216);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v72 + 4, v72 + 12);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Ignoring non-classic connection: %s", v72, 0xCu);
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v72, -1, -1);

      }
      else
      {

      }
      v38 = 0;
      LOBYTE(v58) = 0;
    }
    a3 = v215;
  }
  else
  {
    v52 = *(void **)&v38[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    v53 = v38;
    if (objc_msgSend(v52, "connectedTransport") != 1)
    {

      goto LABEL_20;
    }
    v54 = v212;
    sub_1002C08B8(v53, v212);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v213 + 6))(v54, 1, v214) == 1)
    {

      sub_100004048(v54, (uint64_t *)&unk_1010FF7F0);
LABEL_20:
      v38 = 0;
      LOBYTE(v58) = 0;
      goto LABEL_51;
    }
    v77 = a3;
    sub_1000126EC(v54, (uint64_t)v32, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    sub_10001A9E8((uint64_t)v207, (uint64_t)qword_1011B75D0);
    v78 = v206;
    v79 = sub_10005972C((uint64_t)v32, v206, type metadata accessor for OwnedBeaconGroup);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter(v80);
    v82 = os_log_type_enabled(v80, v81);
    v174 = v39;
    if (v82)
    {
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = (void *)swift_slowAlloc(32, -1);
      v216 = v84;
      *(_DWORD *)v83 = 136315138;
      v213 = v83 + 4;
      v85 = v32;
      v86 = v38;
      v87 = type metadata accessor for UUID(0);
      v88 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v89 = v87;
      v38 = v86;
      v32 = v85;
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v89, v88);
      v217 = (id)sub_100016940(v90, v91, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v218, v213, v83 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v206, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Saving classic bluetooth disconnect event for: %s", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      v92 = v84;
      v77 = v215;
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v83, -1, -1);
    }
    else
    {
      sub_1000126B0(v78, type metadata accessor for OwnedBeaconGroup);
    }

    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v104 = qword_1011B7160;
    v105 = &v32[*(int *)(v214 + 24)];
    v106 = type metadata accessor for UUID(0);
    v107 = (uint64_t)v210;
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v210, v105, v106);
    v108 = v208;
    static Date.trustedNow.getter(v107 + *(int *)(v208 + 20));
    *(_BYTE *)(v107 + *(int *)(v108 + 24)) = 38;
    v109 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v110 = *((unsigned __int8 *)v209 + 80);
    v111 = (v110 + 32) & ~v110;
    v112 = swift_allocObject(v109, v111 + v209[9], v110 | 7);
    *(_OWORD *)(v112 + 16) = xmmword_100E22B00;
    sub_10005972C(v107, v112 + v111, type metadata accessor for BeaconObservation);
    v113 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v113);
    *(&v172 - 4) = v104;
    *(&v172 - 3) = v112;
    *(&v172 - 2) = 0;
    *(&v172 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v172 - 6, &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_1000126B0(v107, type metadata accessor for BeaconObservation);
    sub_1007EEF64(23);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);

    sub_1000126B0((uint64_t)v32, type metadata accessor for OwnedBeaconGroup);
    v38 = 0;
    LOBYTE(v58) = 0;
    a3 = v77;
  }
LABEL_51:
  *(_QWORD *)a3 = v38;
  *(_BYTE *)(a3 + 8) = (_BYTE)v58;
}

uint64_t sub_1002C08B8@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  id v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[2];

  v4 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v4 - 8);
  v60 = v4;
  v5 = __chkstk_darwin(v4);
  v58 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v57 = (char *)v50 - v7;
  v62 = type metadata accessor for OwnedBeaconGroup(0);
  v52 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100786FB4(v13);
  v15 = MACAddress.data.getter(v14);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  v65[0] = v15;
  v65[1] = v17;
  v19 = sub_100035530();
  v20 = DataProtocol.isNull.getter(&type metadata for Data, v19);
  sub_10001BC14(v15, v17);
  if ((v20 & 1) == 0)
  {
    sub_100786FB4(v13);
    sub_10081F5CC((uint64_t)v13, a2);
    return ((uint64_t (*)(char *, uint64_t))v18)(v13, v10);
  }
  v21 = sub_10081CEB8();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7DF8);
  swift_bridgeObjectRetain_n(v21, 2);
  v56 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v51 = a2;
  if (!v27)
  {

    swift_bridgeObjectRelease_n(v21, 2);
    v35 = v21[2];
    if (!v35)
      goto LABEL_15;
LABEL_9:
    v55 = a1;
    v37 = (uint64_t)v21 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    v54 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
    v61 = *(_QWORD *)(v52 + 72);
    v50[1] = v21;
    swift_bridgeObjectRetain(v21);
    v53 = 0x8000000100ECF710;
    v38 = v57;
    do
    {
      v39 = sub_10005972C(v37, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v39);
      v50[-2] = v40;
      v50[-1] = v41;
      sub_10001A9A8(&qword_101110700);
      Lock.callAsFunction<A>(_:)(sub_100245650);
      v42 = (char *)v65[0];
      if (v65[0])
      {
        sub_1007885B0(0xD00000000000001ALL, v53);
        v43 = objc_msgSend(*(id *)&v42[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v43);

        v44 = objc_msgSend(*(id *)&v55[v54], "identifier");
        v45 = v58;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

        LOBYTE(v44) = static UUID.== infix(_:_:)(v38, v45);
        v46 = *(void (**)(char *, uint64_t))(v59 + 8);
        v47 = v45;
        v48 = v60;
        v46(v47, v60);
        v46(v38, v48);
        if ((v44 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v49 = v51;
          sub_1000126EC((uint64_t)v9, v51, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v62);
          return swift_bridgeObjectRelease();
        }
      }
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      v37 += v61;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a2 = v51;
    goto LABEL_15;
  }
  v28 = (uint8_t *)swift_slowAlloc(12, -1);
  v65[0] = swift_slowAlloc(32, -1);
  v29 = v65[0];
  *(_DWORD *)v28 = 136315138;
  v55 = v28 + 4;
  swift_bridgeObjectRetain(v21);
  v31 = Array.description.getter(v30, v62);
  v33 = v32;
  swift_bridgeObjectRelease();
  v63 = sub_100016940(v31, v33, v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v55, v28 + 12);
  swift_bridgeObjectRelease_n(v21, 2);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v25, v26, "All groups: %s", v28, 0xCu);
  swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
  v34 = v29;
  a2 = v51;
  swift_slowDealloc(v34, -1, -1);
  swift_slowDealloc(v28, -1, -1);

  v35 = v21[2];
  if (v35)
    goto LABEL_9;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(a2, 1, 1, v62);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002C0E48@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37[16];
  _QWORD *v38;
  char v39[24];
  _QWORD v40[5];

  v4 = sub_10001A9A8(&qword_1010EEEB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)*a1;
  v40[3] = &type metadata for BAServiceIdentifier;
  v40[4] = &off_101077A98;
  LOBYTE(v40[0]) = 1;
  v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v39, 0, 0);
  v14 = *v13;
  v38 = v40;
  swift_bridgeObjectRetain(v14);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v37, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  if (v16)
  {
    v17 = sub_1007ED9A8((uint64_t)&off_101049A10);
    v18 = swift_allocObject(&unk_101067138, 32, 7);
    *(_QWORD *)(v18 + 16) = v16;
    *(_QWORD *)(v18 + 24) = v17;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    swift_retain();
    v20 = swift_bridgeObjectRetain(v17);
    v40[0] = Future.init(_:)(sub_100245664, v18, v20);
    v21 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v22 = Publisher.eraseToAnyPublisher()(v19, v21);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6CA8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      v36 = a2;
      v29 = v28;
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No FindMy service", v28, 2u);
      v30 = v29;
      a2 = v36;
      swift_slowDealloc(v30, -1, -1);
    }

    v40[0] = v12;
    v31 = type metadata accessor for Peripheral(0);
    v32 = v12;
    Just.init(_:)(v40, v31);
    v33 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v4, &type metadata for CentralManager.Error, v33);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v34 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v22 = Publisher.eraseToAnyPublisher()(v8, v34);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v22;
  return result;
}

_QWORD *sub_1002C11A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  _BYTE v39[16];
  uint64_t v40;
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[5];
  char v44;
  _BYTE v45[24];

  v4 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v4);
  v6 = &v39[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for BluetoothManagerDevice(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v39[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v45, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(a2);
  if (!result)
    return result;
  sub_10000F9B8(a1, (uint64_t)v43, &qword_1011074A0);
  if ((v44 & 1) != 0)
  {
    sub_100059244((uint64_t)v43, (uint64_t)v42);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B6CA8);
    v13 = sub_100059280(v42, (uint64_t)v41);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543362;
      v18 = sub_100059390();
      v19 = swift_allocError(&type metadata for CentralManager.Error, v18, 0, 0);
      sub_100059280(v41, v20);
      v21 = _swift_stdlib_bridgeErrorToNSError(v19);
      v40 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v16 + 4, v16 + 12);
      *v17 = v21;
      sub_1000593D4(v41);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "registerForConnectionEvents error: %{public}@", v16, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v22);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
      sub_1000593D4(v41);
    }
    return sub_1000593D4(v42);
  }
  v23 = (void *)v43[0];
  v42[3] = &type metadata for BAServiceIdentifier;
  v42[4] = &off_101077A98;
  LOBYTE(v42[0]) = 1;
  v24 = (uint64_t *)(v43[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v43[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v41, 0, 0);
  v25 = *v24;
  __chkstk_darwin(v26);
  *(_QWORD *)&v39[-16] = v42;
  swift_bridgeObjectRetain(v25);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)&v39[-32], v25);
  v28 = v27;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  if (!v28)
    goto LABEL_10;
  sub_1002CE410((uint64_t)v23, (uint64_t)v6);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    swift_release();
    sub_100004048((uint64_t)v6, &qword_1010F5D00);
LABEL_10:
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6CA8);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Owner characteristic not available. ", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    return (_QWORD *)swift_release();
  }
  sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for BluetoothManagerDevice);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6CA8);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Owner characteristic available. Check verifyFindMyNetworkId for unpaired parts.", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  sub_1002C16E4(v28, (uint64_t)v23, (uint64_t)v10);
  swift_release();
  swift_release();
  return (_QWORD *)sub_1000126B0((uint64_t)v10, type metadata accessor for BluetoothManagerDevice);
}

void sub_1002C16E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE v24[16];
  _BYTE v25[24];
  _QWORD v26[5];

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *(void **)(v3 + 48);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_5;
  }
  v26[3] = &type metadata for BACharacteristicIdentifier.FindMy;
  v26[4] = &off_101077A78;
  LOBYTE(v26[0]) = 3;
  swift_beginAccess(a1 + 40, v25, 0, 0);
  v13 = *(_QWORD *)(a1 + 40);
  __chkstk_darwin(v14);
  *(_QWORD *)&v24[-16] = v26;
  swift_bridgeObjectRetain(v13);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_100245470, (uint64_t)&v24[-32], v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
  if (v16)
  {
    v17 = sub_1002B9C10();
    v18 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v18);
    *(_QWORD *)&v24[-48] = v17;
    *(_QWORD *)&v24[-40] = a2;
    *(_QWORD *)&v24[-32] = v16;
    *(_QWORD *)&v24[-24] = a3;
    *(_QWORD *)&v24[-16] = v3;
    *(_QWORD *)&v24[-8] = a1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.ClassicPairingSupport.verifyFindMyNetworkId", 73, 2, sub_1002DD5A8, &v24[-64]);
    swift_release();
    swift_release();
    return;
  }
  if (qword_1010E9B08 != -1)
    goto LABEL_9;
LABEL_5:
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6CA8);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing Paired Owner Characteristic!", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

}

uint64_t sub_1002C1974(void *a1, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  _BYTE v12[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0)
      v7 = 1702195828;
    else
      v7 = 0x65736C6166;
    if ((a2 & 1) != 0)
      v8 = 0xE400000000000000;
    else
      v8 = 0xE500000000000000;
    v9 = v8;
    String.append(_:)(*(Swift::String *)&v7);
    swift_bridgeObjectRelease();
    v10._object = (void *)0x8000000100ECF950;
    v10._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v10);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B6CA8);
    sub_1007885B0(0x203F64656B6146, 0xE700000000000000);
    swift_bridgeObjectRelease();
    if ((a2 & 1) != 0)
      sub_1002C2F00((uint64_t)a1, (uint64_t)_swiftEmptyArrayStorage);
    else
      sub_1002BA0F8(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C1AF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[17] = a1;
  v2[18] = a2;
  v3 = sub_10001A9A8(&qword_1010F5E90);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StandaloneBeacon(0);
  v2[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[22] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v8 = type metadata accessor for MACAddress(0);
  v2[25] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[26] = v9;
  v2[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F5D08);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002C1BD4, 0, 0);
}

uint64_t sub_1002C1BD4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_1002C1CC0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C1CC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C1D1C, 0, 0);
}

uint64_t sub_1002C1D1C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  void *v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *log;

  v1 = (_QWORD *)(v0 + 16);
  v2 = (_QWORD *)(v0 + 128);
  if (*(_QWORD *)(v0 + 240))
  {
    v3 = *(_QWORD **)(v0 + 224);
    v4 = *(_QWORD *)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1002C6020(v4, v3);
    v5 = sub_10001A9A8(&qword_1010F5D10);
    v6 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v3, 1, v5);
    v7 = *(_QWORD **)(v0 + 224);
    if (v6 != 1)
    {
      v32 = *(char **)(v0 + 216);
      *(_QWORD *)(v0 + 248) = *v7;
      sub_1000126B0((uint64_t)v7 + *(int *)(v5 + 48), type metadata accessor for BluetoothManagerDevice);
      sub_100786FB4(v32);
      return swift_task_switch(sub_1002C2208, *(_QWORD *)(v0 + 240), 0);
    }
    sub_100004048((uint64_t)v7, &qword_1010F5D08);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v8 = *(void **)(v0 + 144);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B6CA8);
    v10 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void **)(v0 + 144);
    if (v12)
    {
      log = v10;
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      *v2 = v13;
      v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 4, v14 + 12);
      *v38 = v13;

      _os_log_impl((void *)&_mh_execute_header, log, v11, "Unable to get MAC address for %@", v14, 0xCu);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v38, 1, v16);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v14, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B6CA8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing StandaloneBeaconService!", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = sub_1002DC9E4();
    v23 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v22, 0, 0);
    *v24 = 0;
    swift_willThrow(v23);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    sub_10001A9E8(v17, (uint64_t)qword_1011B6CA8);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v30 = _convertErrorToNSError(_:)(v23);
      *(_QWORD *)(v0 + 120) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v2, v28 + 4, v28 + 12);
      *v29 = v30;
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error in shouldForcePair: %@", v28, 0xCu);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v29, 1, v31);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
  }
  v34 = *(_QWORD *)(v0 + 216);
  v36 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 192);
  v37 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C2208()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100B8AEE0(v0[27], *(_QWORD *)(v0[30] + 128));
  v0[32] = 0;
  v3 = v0[26];
  v2 = v0[27];
  v4 = v0[25];
  v0[33] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1002C22B0, 0, 0);
}

uint64_t sub_1002C22B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 264);
  swift_retain();
  sub_1002D6E8C(&v23, type metadata accessor for StandaloneBeacon, (uint64_t (*)(uint64_t))sub_10088F18C, sub_1002D8E80);
  if (v1)
    return swift_release();
  swift_release();
  if (*(_QWORD *)(v23 + 16))
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 168) + 80);
    sub_10005972C(v23 + ((v3 + 32) & ~v3), *(_QWORD *)(v0 + 152), type metadata accessor for StandaloneBeacon);
    v4 = 0;
  }
  else
  {
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, v4, 1, v5);
  swift_release();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  v9 = *(void **)(v0 + 248);
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(v0 + 152);

    swift_release();
    sub_100004048(v10, &qword_1010F5E90);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 184);
    v12 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(*(_QWORD *)(v0 + 152), v12, type metadata accessor for StandaloneBeacon);
    sub_10005972C(v12, v11, type metadata accessor for StandaloneBeacon);
    v16 = *(unsigned __int8 *)(v14 + 80);
    v17 = (v16 + 24) & ~v16;
    v18 = swift_allocObject(&unk_101067160, v17 + v13, v16 | 7);
    *(_QWORD *)(v18 + 16) = v15;
    sub_1000126EC(v11, v18 + v17, type metadata accessor for StandaloneBeacon);
    swift_retain();
    sub_1002C2D74(v12, (uint64_t)sub_1002DEF28, v18);
    swift_release();

    swift_release();
    sub_1000126B0(v12, type metadata accessor for StandaloneBeacon);
  }
  v19 = *(_QWORD *)(v0 + 216);
  v21 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C24D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  v1 = *(_QWORD *)(v0 + 256);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 120) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in shouldForcePair: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 216);
  v12 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002C26B8(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void **aBlock;
  _QWORD v39[5];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v36 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StandaloneBeacon(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  if ((a2 & 1) != 0)
  {
    aBlock = (void **)a1;
    swift_errorRetain(a1);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&aBlock, v25, &protocol self-conformance witness table for Error);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B6CA8);
    v27 = swift_errorRetain(a1);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 138412290;
      v32 = _convertErrorToNSError(_:)(a1);
      aBlock = (void **)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v39, v30 + 4, v30 + 12);
      *v31 = v32;
      sub_10010F948(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "forcePair error: %@", v30, 0xCu);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v31, 1, v33);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      sub_10010F948(a1, 1);
    }
    else
    {
      sub_10010F948(a1, 1);
      sub_10010F948(a1, 1);

    }
  }
  else if ((a1 & 1) != 0)
  {
    sub_10005972C(a4, (uint64_t)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for StandaloneBeacon);
    v17 = *(unsigned __int8 *)(v15 + 80);
    v18 = (v17 + 24) & ~v17;
    v19 = swift_allocObject(&unk_101067200, v18 + v16, v17 | 7);
    *(_QWORD *)(v19 + 16) = a3;
    sub_1000126EC((uint64_t)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for StandaloneBeacon);
    v39[3] = sub_1002DF310;
    v39[4] = v19;
    aBlock = _NSConcreteStackBlock;
    v39[0] = 1107296256;
    v39[1] = sub_100016FB8;
    v39[2] = &unk_101067218;
    v20 = _Block_copy(&aBlock);
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v37 = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v23, v24, v8, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    swift_release();
  }
}

void sub_1002C2ABC(uint64_t a1, char a2)
{
  sub_1002D0044(a1, a2, (uint64_t (*)(void))&static os_log_type_t.debug.getter, "Done force pairing");
}

uint64_t sub_1002C2AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[6];

  v4 = v3;
  v32 = a2;
  v33 = a3;
  v31 = *v3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for StandaloneBeacon(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = v3[6];
  sub_10005972C(a1, (uint64_t)v15, v16);
  v17 = *(unsigned __int8 *)(v13 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_101067250, v21 + 8, v17 | 7);
  sub_1000126EC((uint64_t)v15, v22 + v18, type metadata accessor for StandaloneBeacon);
  *(_QWORD *)(v22 + v19) = v4;
  v23 = (_QWORD *)(v22 + v20);
  v24 = v33;
  *v23 = v32;
  v23[1] = v24;
  *(_QWORD *)(v22 + v21) = v31;
  aBlock[4] = sub_1002DF4C4;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101067268;
  v25 = _Block_copy(aBlock);
  swift_retain();
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
  return swift_release();
}

uint64_t sub_1002C2D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;

  v6 = *v3;
  v23 = a2;
  v24 = v6;
  v7 = type metadata accessor for StandaloneBeacon(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_10005972C(a1, (uint64_t)v10, type metadata accessor for StandaloneBeacon);
  v15 = *(unsigned __int8 *)(v8 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v9 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_101067188, v19 + 8, v15 | 7);
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 24) = 0;
  sub_1000126EC((uint64_t)v10, v20 + v16, type metadata accessor for StandaloneBeacon);
  *(_QWORD *)(v20 + v17) = v3;
  v21 = (_QWORD *)(v20 + v18);
  *v21 = v23;
  v21[1] = a3;
  *(_QWORD *)(v20 + v19) = v24;
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1010F5EA0, v20);
  return swift_release();
}

uint64_t sub_1002C2F00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint8_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint8_t *v51;
  uint8_t *v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v60 = a2;
  v5 = type metadata accessor for MACAddress(0);
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  __chkstk_darwin(v5);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5D08);
  __chkstk_darwin(v7);
  v9 = (uint64_t *)((char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v59 = *((_QWORD *)v10 - 1);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v51 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint8_t **)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v3 + 48);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  v22 = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_5;
  }
  sub_1002C6020(a1, v9);
  v23 = sub_10001A9A8(&qword_1010F5D10);
  v17 = v3;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v9, 1, v23) == 1)
  {
    sub_100004048((uint64_t)v9, &qword_1010F5D08);
    *(_QWORD *)&v13[v10[10]] = 0;
    MACAddress.init(stringLiteral:)(0x3030303030303030, 0xEC00000030303030);
    v24 = &v13[v10[5]];
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0xE000000000000000;
    *(_DWORD *)&v13[v10[6]] = 0;
    v25 = &v13[v10[7]];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0xE000000000000000;
    *(_DWORD *)&v13[v10[8]] = 0;
    *(_OWORD *)&v13[v10[9]] = xmmword_100E22B20;
    sub_1002C6E6C(a1, (uint64_t)v13, 0, 0, (uint64_t)_swiftEmptyArrayStorage);
    v3 = (uint64_t)v13;
    return sub_1000126B0(v3, type metadata accessor for BluetoothManagerDevice);
  }
  v22 = *v9;
  v3 = (uint64_t)v15;
  sub_1000126EC((uint64_t)v9 + *(int *)(v23 + 48), (uint64_t)v15, type metadata accessor for BluetoothManagerDevice);
  if (qword_1010E9B08 != -1)
    goto LABEL_11;
LABEL_5:
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B6CA8);
  v27 = (id)v22;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc(12, -1);
    v53 = v30;
    v32 = (uint8_t *)v31;
    v54 = swift_slowAlloc(32, -1);
    v62 = v54;
    v52 = v32;
    *(_DWORD *)v32 = 136446210;
    v51 = v32 + 4;
    v33 = v55;
    sub_100786FB4(v55);
    v34 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v35 = v3;
    v36 = v17;
    v37 = v57;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v57, v34);
    v40 = v39;
    v41 = v37;
    v17 = v36;
    v3 = v35;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v41);
    v61 = sub_100016940(v38, v40, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v51, v32 + 12);

    swift_bridgeObjectRelease();
    v42 = v52;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v53, "Unpairing LE with classic MAC address: %{public}s", v52, 0xCu);
    v43 = v54;
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

  }
  type metadata accessor for Transaction(0);
  sub_10005972C(v3, (uint64_t)v13, type metadata accessor for BluetoothManagerDevice);
  v44 = *(unsigned __int8 *)(v59 + 80);
  v45 = (v44 + 32) & ~v44;
  v46 = (v58 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = swift_allocObject(&unk_101066D00, v46 + 8, v44 | 7);
  *(_QWORD *)(v47 + 16) = v27;
  *(_QWORD *)(v47 + 24) = v17;
  sub_1000126EC((uint64_t)v13, v47 + v45, type metadata accessor for BluetoothManagerDevice);
  v48 = v60;
  *(_QWORD *)(v47 + v46) = v60;
  v49 = v27;
  swift_retain();
  swift_bridgeObjectRetain(v48);
  static Transaction.asyncTask(name:block:)("ClassicPairingSupport.unpairAirPodsLE", 37, 2, &unk_1010F5DD0, v47);

  swift_release();
  return sub_1000126B0(v3, type metadata accessor for BluetoothManagerDevice);
}

uint64_t sub_1002C343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  v5 = type metadata accessor for MACAddress(0);
  v4[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[22] = v6;
  v4[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002C34A0, 0, 0);
}

uint64_t sub_1002C34A0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1002C358C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002C358C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C35E8, 0, 0);
}

uint64_t sub_1002C35E8()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t (*v10)(uint64_t);

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    v2 = *(char **)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100786FB4(v2);
    v10 = (uint64_t (*)(uint64_t))((char *)&dword_1011218D0 + dword_1011218D0);
    v3 = (_QWORD *)swift_task_alloc(unk_1011218D4);
    *(_QWORD *)(v0 + 208) = v3;
    *v3 = v0;
    v3[1] = sub_1002C3744;
    return v10(*(_QWORD *)(v0 + 184));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7DF8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing StandaloneBeaconService!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002C3744()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[22] + 8))(v2[23], v2[21]);
  if (v0)
    v4 = sub_1002C3864;
  else
    v4 = sub_1002C37B8;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002C37B8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  type metadata accessor for Transaction(0);
  v1 = swift_task_alloc(48);
  v2 = *(_OWORD *)(v0 + 152);
  *(int8x16_t *)(v1 + 16) = vextq_s8(*(int8x16_t *)(v0 + 136), *(int8x16_t *)(v0 + 136), 8uLL);
  *(_OWORD *)(v1 + 32) = v2;
  static Transaction.named<A>(_:with:)("handleClassicPairing", 20, 2, sub_1002DD47C, v1);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C3864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v16;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 120) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 120, v10);
    *(_QWORD *)(v0 + 128) = sub_100016940(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to remove standalone beacons due to %{public}s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 216));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  type metadata accessor for Transaction(0);
  v13 = swift_task_alloc(48);
  v14 = *(_OWORD *)(v0 + 152);
  *(int8x16_t *)(v13 + 16) = vextq_s8(*(int8x16_t *)(v0 + 136), *(int8x16_t *)(v0 + 136), 8uLL);
  *(_OWORD *)(v13 + 32) = v14;
  static Transaction.named<A>(_:with:)("handleClassicPairing", 20, 2, sub_1002DD47C, v13);
  swift_release();
  swift_task_dealloc(v13);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002C3AC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  _QWORD *v40;

  v32 = a3;
  v33 = a5;
  v34 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v10 - 8);
  v37 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BluetoothManagerDevice(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = *(_QWORD *)(a2 + 48);
  sub_10005972C(a4, (uint64_t)v16, v17);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (_QWORD *)swift_allocObject(&unk_101066D28, v20 + 8, v18 | 7);
  v21[2] = a1;
  v21[3] = a2;
  v22 = v32;
  v21[4] = v32;
  sub_1000126EC((uint64_t)v16, (uint64_t)v21 + v19, type metadata accessor for BluetoothManagerDevice);
  v23 = v33;
  *(_QWORD *)((char *)v21 + v20) = v33;
  aBlock[4] = sub_1002DD4A4;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101066D40;
  v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v25 = v22;
  swift_bridgeObjectRetain(v23);
  static DispatchQoS.unspecified.getter(v26);
  v40 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v34, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v30);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v37);
  return swift_release();
}

void sub_1002C3D6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  uint64_t v80;
  char *v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  double v85;
  void (*v86)(uint64_t, uint64_t);
  double v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  id v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  void *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  NSObject *v147;
  os_log_type_t v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  char *v158;
  int EnumCaseMultiPayload;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  id v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  NSObject *v180;
  os_log_type_t v181;
  uint8_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  uint64_t v190;
  unint64_t v191;
  _QWORD *v192;
  char *v193;
  char *v194;
  char *v195;
  int v196;
  uint64_t My;
  _QWORD *v198;
  _BOOL8 v199;
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  void (*v208)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v209)(uint64_t, uint64_t);
  unint64_t v210;
  unsigned int (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  void (*v215)(char *, uint64_t);
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  id v219;
  char *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  id v244;
  unint64_t v245;
  char v246[8];
  uint64_t v247;
  uint64_t v248;
  id v249;
  char v250[8];

  v2 = v1;
  v244 = a1;
  v3 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v3);
  v220 = (char *)&v205 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v223 = sub_10001A9A8(&qword_1010F5D28);
  v222 = *(_QWORD *)(v223 - 8);
  __chkstk_darwin(v223);
  v221 = (char *)&v205 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7830);
  v7 = __chkstk_darwin(v6);
  v217 = (uint64_t *)((char *)&v205 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v225 = (uint64_t)&v205 - v9;
  v218 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v218);
  v226 = (char *)&v205 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v11);
  v233 = (uint64_t)&v205 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v236 = type metadata accessor for OwnedBeaconGroup(0);
  v232 = *(_QWORD *)(v236 - 8);
  v13 = __chkstk_darwin(v236);
  v224 = (uint64_t)&v205 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v228 = (uint64_t)&v205 - v16;
  v17 = __chkstk_darwin(v15);
  v229 = (uint64_t)&v205 - v18;
  __chkstk_darwin(v17);
  v231 = (uint64_t)&v205 - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v21 = __chkstk_darwin(v20);
  v230 = (uint64_t)&v205 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v234 = (char *)&v205 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v205 - v25;
  v242 = type metadata accessor for MACAddress(0);
  v238 = *(char **)(v242 - 8);
  v27 = __chkstk_darwin(v242);
  v227 = (uint64_t)&v205 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v235 = (char *)&v205 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v205 - v32;
  v34 = __chkstk_darwin(v31);
  v237 = (char *)&v205 - v35;
  __chkstk_darwin(v34);
  v37 = (char *)&v205 - v36;
  v243 = type metadata accessor for Date(0);
  v38 = *(_QWORD *)(v243 - 8);
  v39 = __chkstk_darwin(v243);
  v239 = (uint64_t)&v205 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v241 = (char *)&v205 - v41;
  v42 = sub_10001A9A8(&qword_1010F5D08);
  __chkstk_darwin(v42);
  v44 = (char *)&v205 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v45);
  v240 = (char *)&v205 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for DispatchPredicate(0);
  v48 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v50 = (uint64_t *)((char *)&v205 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v51 = *(void **)(v2 + 48);
  *v50 = v51;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v48 + 104))(v50, enum case for DispatchPredicate.onQueue(_:), v47);
  v219 = v51;
  LOBYTE(v51) = _dispatchPreconditionTest(_:)(v50);
  (*(void (**)(_QWORD *, uint64_t))(v48 + 8))(v50, v47);
  if ((v51 & 1) == 0)
  {
    __break(1u);
    goto LABEL_91;
  }
  v52 = sub_1002B559C();
  if ((v52 & 1) == 0)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v60 = type metadata accessor for Logger(0);
    v61 = sub_10001A9E8(v60, (uint64_t)qword_1011B6CA8);
    v56 = Logger.logObject.getter(v61);
    v57 = static os_log_type_t.default.getter(v56);
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_13;
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    v59 = "Pairing retry is NOT allowed on this device!";
    goto LABEL_12;
  }
  __chkstk_darwin(v52);
  v53 = (uint64_t)v244;
  *(&v205 - 2) = v2;
  *(&v205 - 1) = v53;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DFD08);
  if ((v245 & 1) != 0)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B6CA8);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (!os_log_type_enabled(v56, v57))
      goto LABEL_13;
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    v59 = "Pairing in progress. Not retrying";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v56, v57, v59, v58, 2u);
    swift_slowDealloc(v58, -1, -1);
LABEL_13:

    return;
  }
  v62 = sub_1002B9C10();
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DD0DC, v62, &type metadata for Bool);
  if ((v245 & 1) != 0)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B6CA8);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter(v65);
    if (!os_log_type_enabled(v65, v66))
      goto LABEL_25;
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    v68 = "Handling Privacy Alert. Not retrying";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v65, v66, v68, v67, 2u);
    swift_slowDealloc(v67, -1, -1);
LABEL_25:

    swift_release();
    return;
  }
  sub_1002C6020((uint64_t)v244, v44);
  v69 = sub_10001A9A8(&qword_1010F5D10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v44, 1, v69) == 1)
  {
    sub_100004048((uint64_t)v44, &qword_1010F5D08);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v70 = type metadata accessor for Logger(0);
    v71 = sub_10001A9E8(v70, (uint64_t)qword_1011B6CA8);
    v65 = Logger.logObject.getter(v71);
    v66 = static os_log_type_t.error.getter(v65);
    if (!os_log_type_enabled(v65, v66))
      goto LABEL_25;
    v67 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v67 = 0;
    v68 = "Unable to sanitize MAC address for retry pairing";
    goto LABEL_24;
  }
  v212 = 0;
  v213 = v62;
  v72 = *(char **)v44;
  v73 = (uint64_t)&v44[*(int *)(v69 + 48)];
  v74 = v240;
  sub_1000126EC(v73, (uint64_t)v240, type metadata accessor for BluetoothManagerDevice);
  v214 = v72;
  sub_100786FB4(v37);
  v216 = v2;
  v75 = sub_1002B4908();
  if (*(_QWORD *)(v75 + 16))
  {
    v76 = sub_1005193C8((uint64_t)v37);
    v78 = v241;
    v77 = v242;
    if ((v79 & 1) != 0)
    {
      v80 = v243;
      (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v26, *(_QWORD *)(v75 + 56) + *(_QWORD *)(v38 + 72) * v76, v243);
      v81 = *(char **)(v38 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v81)(v26, 0, 1, v80);
    }
    else
    {
      v81 = *(char **)(v38 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v26, 1, 1, v243);
    }
  }
  else
  {
    v81 = *(char **)(v38 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v26, 1, 1, v243);
    v78 = v241;
    v77 = v242;
  }
  swift_bridgeObjectRelease();
  v215 = (void (*)(char *, uint64_t))*((_QWORD *)v238 + 1);
  v215(v37, v77);
  v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v83 = v82(v26, 1, v243);
  if ((_DWORD)v83 == 1)
  {
    static Date.distantPast.getter(v83);
    sub_100004048((uint64_t)v26, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v78, v26, v243);
  }
  v84 = v239;
  static Date.trustedNow.getter(v239);
  v85 = Date.timeIntervalSince(_:)(v78);
  v86 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v86(v84, v243);
  v87 = *(double *)(v216 + 168);
  v88 = v214;
  if (v87 >= v85)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v100 = type metadata accessor for Logger(0);
    sub_10001A9E8(v100, (uint64_t)qword_1011B6CA8);
    v101 = v216;
    v102 = swift_retain_n(v216, 2);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.default.getter(v103);
    if (!os_log_type_enabled(v103, v104))
    {
      swift_release_n(v101, 2);
LABEL_65:

      swift_release();
      v86((uint64_t)v78, v243);
      sub_1000126B0((uint64_t)v74, type metadata accessor for BluetoothManagerDevice);
      return;
    }
    v105 = swift_slowAlloc(22, -1);
    *(_DWORD *)v105 = 134218240;
    v245 = *(_QWORD *)&v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v105 + 4, v105 + 12);
    *(_WORD *)(v105 + 12) = 2048;
    v245 = *(_QWORD *)&v87;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v105 + 14, v105 + 22);
    swift_release_n(v101, 2);
    v106 = "Time since last attempt %f. Threshold %f. Not retrying.";
LABEL_54:
    _os_log_impl((void *)&_mh_execute_header, v103, v104, v106, (uint8_t *)v105, 0x16u);
    swift_slowDealloc(v105, -1, -1);
    goto LABEL_65;
  }
  v211 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v82;
  if (v85 > 86400.0)
  {
    v89 = v81;
    v90 = v74;
    v91 = v237;
    sub_100786FB4(v237);
    v92 = sub_1002B4F98();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v92);
    v245 = v92;
    sub_10010B458(0, (uint64_t)v91, isUniquelyReferenced_nonNull_native);
    v94 = v245;
    swift_bridgeObjectRelease();
    v95 = v91;
    v74 = v90;
    v81 = v89;
    v78 = v241;
    v215(v95, v242);
    v77 = v242;
    sub_1002B53C0(v94);
  }
  sub_100786FB4(v33);
  v96 = sub_1002B4F98();
  if (*(_QWORD *)(v96 + 16) && (v97 = sub_1005193C8((uint64_t)v33), (v98 & 1) != 0))
    v99 = *(void **)(*(_QWORD *)(v96 + 56) + 8 * v97);
  else
    v99 = 0;
  swift_bridgeObjectRelease();
  v215(v33, v77);
  v107 = *(_QWORD *)(v216 + 176);
  if (__OFSUB__(v107, v99))
  {
    __break(1u);
LABEL_102:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_48;
  }
  if (v107 - (uint64_t)v99 < 1)
  {
    v119 = v99;
    if (qword_1010E9B08 == -1)
    {
LABEL_52:
      v120 = type metadata accessor for Logger(0);
      sub_10001A9E8(v120, (uint64_t)qword_1011B6CA8);
      v121 = swift_retain();
      v103 = Logger.logObject.getter(v121);
      v104 = static os_log_type_t.default.getter(v103);
      if (!os_log_type_enabled(v103, v104))
      {
        swift_release();
        goto LABEL_65;
      }
      v105 = swift_slowAlloc(22, -1);
      *(_DWORD *)v105 = 134218240;
      v245 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v105 + 4, v105 + 12);
      swift_release();
      *(_WORD *)(v105 + 12) = 2048;
      v245 = (unint64_t)v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v105 + 14, v105 + 22);
      v106 = "Exceeded number of retries per day %ld. Attempted: %ld";
      goto LABEL_54;
    }
LABEL_104:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_52;
  }
  v210 = (unint64_t)v99;
  v208 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v81;
  v81 = v88;
  v209 = v86;
  if (qword_1010E9B08 != -1)
    goto LABEL_102;
LABEL_48:
  v108 = type metadata accessor for Logger(0);
  v109 = (void *)sub_10001A9E8(v108, (uint64_t)qword_1011B6CA8);
  v110 = v244;
  swift_retain_n(v216, 2);
  v88 = (char *)v110;
  v244 = v109;
  v111 = Logger.logObject.getter(v88);
  v112 = static os_log_type_t.default.getter(v111);
  v113 = os_log_type_enabled(v111, v112);
  v207 = v88;
  if (v113)
  {
    v114 = swift_slowAlloc(32, -1);
    v115 = (char *)swift_slowAlloc(8, -1);
    *(_DWORD *)v114 = 138412802;
    v206 = v107;
    v245 = (unint64_t)v88;
    v116 = v88;
    v74 = v240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v114 + 4, v114 + 12);
    *(_QWORD *)v115 = v88;
    v88 = v115;

    *(_WORD *)(v114 + 12) = 2048;
    v245 = v210;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v114 + 14, v114 + 22);
    *(_WORD *)(v114 + 22) = 2048;
    v77 = v242;
    swift_release();
    v245 = v206;
    v117 = v214;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, v246, v114 + 24, v114 + 32);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "Retry pairing for peripheral %@. Attempted %ld. Daily limit %ld", (uint8_t *)v114, 0x20u);
    v118 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v88, 1, v118);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v114, -1, -1);

  }
  else
  {

    swift_release_n(v216, 2);
    v117 = v81;
  }
  v122 = (uint64_t)v234;
  v123 = v235;
  v119 = v117;
  sub_100786FB4(v235);
  static Date.trustedNow.getter(v122);
  v124 = v243;
  v208(v122, 0, 1, v243);
  v245 = sub_1002B4908();
  if (v211(v122, 1, v124) == 1)
  {
    sub_100004048(v122, (uint64_t *)&unk_1010EA690);
    v125 = v230;
    sub_1001036B8((uint64_t)v123, v230);
    v215(v123, v77);
    sub_100004048(v125, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
    v127 = v239;
    v126(v239, v122, v243);
    v128 = (void *)v245;
    v129 = swift_isUniquelyReferenced_nonNull_native(v245);
    v249 = v128;
    sub_10010B2D0(v127, (uint64_t)v123, v129);
    v245 = (unint64_t)v249;
    swift_bridgeObjectRelease();
    v215(v123, v77);
  }
  v86 = v209;
  v107 = (uint64_t)v74;
  v130 = v216;
  sub_1002B4D6C(v245);
  v74 = v237;
  v78 = v117;
  sub_100786FB4(v237);
  v131 = v210 + 1;
  if (__OFADD__(v210, 1))
  {
    __break(1u);
    goto LABEL_104;
  }
  v132 = sub_1002B4F98();
  v133 = swift_isUniquelyReferenced_nonNull_native(v132);
  v245 = v132;
  sub_10010B458(v131, (uint64_t)v74, v133);
  v134 = v245;
  swift_bridgeObjectRelease();
  v135 = v242;
  v136 = v215;
  v215(v74, v242);
  sub_1002B53C0(v134);
  v37 = *(char **)(v130 + 16);
  sub_100786FB4(v74);
  v137 = v233;
  sub_10081F5CC((uint64_t)v74, v233);
  v136(v74, v135);
  v138 = v236;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v137, 1, v236) == 1)
  {
    sub_100004048(v137, (uint64_t *)&unk_1010FF7F0);
LABEL_72:
    sub_1002C6E6C((uint64_t)v119, v107, 0, 1, (uint64_t)_swiftEmptyArrayStorage);
    swift_release();

    v86((uint64_t)v241, v243);
    sub_1000126B0(v107, type metadata accessor for BluetoothManagerDevice);
    return;
  }
  v139 = v231;
  sub_1000126EC(v137, v231, type metadata accessor for OwnedBeaconGroup);
  v140 = sub_10036F750();
  v141 = v229;
  sub_10005972C(v139, v229, type metadata accessor for OwnedBeaconGroup);
  if ((v140 & 1) != 0)
  {
    sub_1000126B0(v141, type metadata accessor for OwnedBeaconGroup);
    v142 = v228;
    sub_10005972C(v139, v228, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {
    v143 = *(_BYTE *)(v141 + *(int *)(v138 + 32));
    sub_1000126B0(v141, type metadata accessor for OwnedBeaconGroup);
    v142 = v228;
    sub_10005972C(v139, v228, type metadata accessor for OwnedBeaconGroup);
    if ((v143 & 1) != 0)
    {
      sub_1000126B0(v142, type metadata accessor for OwnedBeaconGroup);
LABEL_71:
      sub_1000126B0(v139, type metadata accessor for OwnedBeaconGroup);
      v107 = (uint64_t)v240;
      goto LABEL_72;
    }
  }
  v144 = sub_10036F59C();
  sub_1000126B0(v142, type metadata accessor for OwnedBeaconGroup);
  if ((v144 & 1) == 0)
    goto LABEL_71;
  v145 = v224;
  v146 = sub_10005972C(v139, v224, type metadata accessor for OwnedBeaconGroup);
  v147 = Logger.logObject.getter(v146);
  v148 = static os_log_type_t.default.getter(v147);
  if (os_log_type_enabled(v147, v148))
  {
    v149 = (uint8_t *)swift_slowAlloc(12, -1);
    v150 = swift_slowAlloc(32, -1);
    v245 = v150;
    *(_DWORD *)v149 = 136315138;
    v151 = sub_10036F350();
    v249 = (id)sub_100016940(v151, v152, (uint64_t *)&v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v149 + 4, v149 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v145, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Retry LE pairing for %s.", v149, 0xCu);
    swift_arrayDestroy(v150, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v150, -1, -1);
    v153 = v149;
    v138 = v236;
    swift_slowDealloc(v153, -1, -1);
  }
  else
  {
    sub_1000126B0(v145, type metadata accessor for OwnedBeaconGroup);
  }

  v48 = v227;
  v26 = v226;
  v47 = *(_QWORD *)(v231 + *(int *)(v138 + 40));
  swift_bridgeObjectRetain(v47);
  v154 = v225;
  sub_1002B3E50(v155, v225);
  swift_bridgeObjectRelease();
  v44 = (char *)sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v2 = *(_QWORD *)(*((_QWORD *)v44 - 1) + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v2)(v154, 1, v44) == 1)
  {
    v156 = (uint64_t *)&unk_1010F7830;
    v157 = v154;
LABEL_76:
    sub_100004048(v157, v156);
LABEL_77:
    v158 = v237;
LABEL_80:
    v160 = v207;
    goto LABEL_81;
  }
  sub_10001BC14(*(_QWORD *)v154, *(_QWORD *)(v154 + 8));
  sub_1000126EC(v154 + *((int *)v44 + 12), (uint64_t)v26, type metadata accessor for OwnedBeaconGroup.PairingState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v218);
  v158 = v237;
  if (EnumCaseMultiPayload)
  {
    sub_1000126B0((uint64_t)v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    goto LABEL_80;
  }
  v33 = v238;
  v38 = v242;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v238 + 6))(v26, 1, v242) == 1)
  {
    v156 = (uint64_t *)&unk_1010F9890;
    v157 = (uint64_t)v26;
    goto LABEL_76;
  }
LABEL_91:
  (*((void (**)(uint64_t, char *, uint64_t))v33 + 4))(v48, v26, v38);
  swift_bridgeObjectRetain(v47);
  v184 = v217;
  sub_1002B42AC(v185, (uint64_t)v217);
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t *, uint64_t, char *))v2)(v184, 1, v44) == 1)
  {
    sub_100004048((uint64_t)v184, (uint64_t *)&unk_1010F7830);
    v215((char *)v48, v38);
    goto LABEL_77;
  }
  v187 = *v184;
  v186 = v184[1];
  sub_1000126B0((uint64_t)v184 + *((int *)v44 + 12), type metadata accessor for OwnedBeaconGroup.PairingState);
  v188 = sub_10080BC6C(v187, v186);
  v189 = sub_1002B3880((uint64_t)v188);
  swift_bridgeObjectRelease();
  if (!v189[2])
  {
    swift_bridgeObjectRelease();
    v215((char *)v48, v242);
    sub_10001BC14(v187, v186);
    goto LABEL_77;
  }
  v190 = v189[4];
  v191 = v189[5];
  sub_10001BBBC(v190, v191);
  swift_bridgeObjectRelease();
  v192 = (_QWORD *)swift_allocObject(&unk_101066CB0, 40, 7);
  v193 = v207;
  v192[2] = v216;
  v192[3] = v193;
  v192[4] = v37;
  v194 = v193;
  v195 = v193;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&v245, &unk_1010F5DA8, v192, &type metadata for Bool);
  swift_release();
  v196 = v245;
  My = type metadata accessor for Feature.FindMy(0);
  v247 = My;
  v248 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v198 = sub_100018F08(&v245);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v198, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v245);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v245);
  if ((My & 1) != 0)
  {
    v199 = sub_100A087C0(v190, v191);
    if (v199)
    {
      v200 = Logger.logObject.getter(v199);
      v201 = static os_log_type_t.default.getter(v200);
      if (os_log_type_enabled(v200, v201))
      {
        v202 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v202 = 0;
        _os_log_impl((void *)&_mh_execute_header, v200, v201, "Starting AirPods LE pairing retry using FindMyBluetooth", v202, 2u);
        swift_slowDealloc(v202, -1, -1);
      }

      v203 = v231;
      v204 = v227;
      sub_1002C5908(v227, v231 + *(int *)(v236 + 28), v196, 0, 0);
      sub_10001BC14(v187, v186);
      sub_10001BC14(v190, v191);
      swift_release();

      v215((char *)v204, v242);
      v183 = v203;
      goto LABEL_87;
    }
  }
  v215((char *)v227, v242);
  sub_10001BC14(v190, v191);
  sub_10001BC14(v187, v186);
  v158 = v237;
  v160 = v194;
LABEL_81:
  v161 = v216;
  v162 = sub_1002B9504(v160);
  if (v162)
  {
    v163 = v162;
    v164 = v214;
    v165 = sub_100786FB4(v158);
    __chkstk_darwin(v165);
    *(&v205 - 4) = v163;
    *(&v205 - 3) = (uint64_t)v158;
    *((_OWORD *)&v205 - 1) = xmmword_100E22B20;
    v166 = sub_10001A9A8(&qword_1010F5D30);
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DD0F4, &v205 - 6, v166);
    v167 = v245;
    v215(v158, v242);
    v245 = v167;
    v168 = v219;
    v249 = v219;
    v169 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v170 = (uint64_t)v220;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v169 - 8) + 56))(v220, 1, 1, v169);
    v171 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v172 = sub_1000193A4(&qword_1010F5D38, &qword_1010F5D30, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v173 = sub_1001C7EF4();
    v174 = v168;
    v175 = v221;
    Publisher.receive<A>(on:options:)(&v249, v170, v166, v171, v172, v173);
    sub_100004048(v170, &qword_1010EECC8);

    swift_release();
    v176 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v176 + 16, v161);
    v177 = swift_allocObject(&unk_101066C88, 32, 7);
    *(_QWORD *)(v177 + 16) = sub_1002DD110;
    *(_QWORD *)(v177 + 24) = v176;
    v178 = sub_1000193A4(&qword_1010F5D40, &qword_1010F5D28, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v179 = v223;
    Publisher<>.sink(receiveValue:)(sub_1002DFD38, v177, v223, v178);
    swift_release();
    (*(void (**)(char *, uint64_t))(v222 + 8))(v175, v179);
    swift_beginAccess(v161 + 72, &v245, 33, 0);
    AnyCancellable.store(in:)(v161 + 72);
    swift_endAccess(&v245);
    swift_release();
    swift_release();
    swift_release();

  }
  else
  {
    v180 = Logger.logObject.getter(0);
    v181 = static os_log_type_t.error.getter(v180);
    if (os_log_type_enabled(v180, v181))
    {
      v182 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v182 = 0;
      _os_log_impl((void *)&_mh_execute_header, v180, v181, "Unable to create a new pairing manager to handle retry!", v182, 2u);
      swift_slowDealloc(v182, -1, -1);
    }
    swift_release();

  }
  v183 = v231;
LABEL_87:
  sub_1000126B0(v183, type metadata accessor for OwnedBeaconGroup);
  v209(v241, v243);
  sub_1000126B0((uint64_t)v240, type metadata accessor for BluetoothManagerDevice);
}

uint64_t sub_1002C5908(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a4;
  v34 = a5;
  v31 = a3;
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)v30 - v12;
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6CA8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting AirPods LE force pair using FindMyBluetooth", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v30[1] = type metadata accessor for Transaction(0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v13, a2, v7);
  v19(v11, a1, v7);
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v9 + v20 + v21) & ~v20;
  v23 = v22 + v9;
  v24 = swift_allocObject(&unk_101066CD8, (v23 & 0xFFFFFFFFFFFFFFF8) + 24, v20 | 7);
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + v24;
  *(_QWORD *)(v24 + 16) = v32;
  v26 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v26(v24 + v21, v13, v7);
  v26(v24 + v22, v11, v7);
  *(_BYTE *)(v24 + v23) = v31 & 1;
  v28 = v33;
  v27 = v34;
  *(_QWORD *)(v25 + 8) = v33;
  *(_QWORD *)(v25 + 16) = v27;
  swift_retain();
  sub_10001D898(v28, v27);
  static Transaction.asyncTask(name:block:)("startDiscoveryAndPairingSession", 31, 2, &unk_1010F5DB8, v24);
  return swift_release();
}

uint64_t sub_1002C5B48(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46[3];
  char v47[24];

  v44 = a1;
  v4 = type metadata accessor for MACAddress(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v7);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BluetoothManagerDevice(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v41 = (uint64_t)v39 - v15;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v47, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v39[0] = (uint64_t)v14;
    v40 = result;
    v42 = v4;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v21 = type metadata accessor for Logger(0);
    v39[1] = sub_10001A9E8(v21, (uint64_t)qword_1011B6CA8);
    v22 = v44;
    sub_1007885B0(0xD000000000000018, 0x8000000100ECF8E0);
    v23 = objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    swift_beginAccess(v40 + 184, v46, 33, 0);
    sub_1001036AC((uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    swift_endAccess(v46);
    swift_release();
    sub_100786FB4(v6);
    sub_1002CA428((uint64_t)v6, (uint64_t)v9);
    v24 = *(void (**)(char *, uint64_t))(v43 + 8);
    v24(v6, v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      v25 = sub_100004048((uint64_t)v9, &qword_1010F5D00);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No BT device from BluetoothManager after pairing. Need to unpair", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      v29 = v44;
      sub_100786FB4(v6);
      sub_1002BC4E8(v29, (uint64_t)v6);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v24)(v6, v42);
    }
    else
    {
      v30 = v41;
      sub_1000126EC((uint64_t)v9, v41, type metadata accessor for BluetoothManagerDevice);
      v31 = v39[0];
      v32 = sub_10005972C(v30, v39[0], type metadata accessor for BluetoothManagerDevice);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v46[0] = v36;
        *(_DWORD *)v35 = 136315138;
        v37 = sub_10015AE8C();
        v45 = sub_100016940(v37, v38, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v35 + 4, v35 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v31, type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Found BT device from BluetoothManager after pairing as expected. %s", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);
        swift_release();

      }
      else
      {
        swift_release();

        sub_1000126B0(v31, type metadata accessor for BluetoothManagerDevice);
      }
      return sub_1000126B0(v30, type metadata accessor for BluetoothManagerDevice);
    }
  }
  return result;
}

void sub_1002C6020(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  _QWORD *v109;
  NSObject *v110;
  uint64_t v111;
  NSObject **v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;

  v124 = a1;
  v4 = type metadata accessor for UUID(0);
  v122 = *(_QWORD *)(v4 - 8);
  v123 = v4;
  v5 = __chkstk_darwin(v4);
  v121 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v120 = (char *)&v116 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v8);
  v10 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v132 = *(_QWORD *)(v11 - 8);
  v133 = v11;
  __chkstk_darwin(v11);
  v128 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v13);
  v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = __chkstk_darwin(v16);
  v126 = (uint64_t)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v119 = (uint64_t)&v116 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v116 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v116 - v25;
  v27 = sub_1002B4834();
  if (v27
    && (v28 = v27, v29 = objc_msgSend(v27, "pairedDevices"), v28, v29)
    && (v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, (char *)&type metadata for Any + 8),
        v29,
        v31 = (uint64_t)sub_1003627F4(v30),
        swift_bridgeObjectRelease(),
        v31))
  {
    v129 = v31;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 >= 0)
        v115 = v31 & 0xFFFFFFFFFFFFFF8;
      else
        v115 = v31;
      swift_bridgeObjectRetain(v31);
      v32 = _CocoaArrayWrapper.endIndex.getter(v115);
    }
    else
    {
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v31);
    }
    v116 = v2;
    v117 = a2;
    v127 = v17;
    if (v32)
    {
      v118 = v26;
      if (v32 < 1)
      {
        __break(1u);
        return;
      }
      v33 = 0;
      v125 = _swiftEmptyArrayStorage;
      v34 = v129;
      v130 = v129 & 0xC000000000000001;
      v131 = v32;
      while (1)
      {
        v36 = v130
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v34)
            : *(id *)(v34 + 8 * v33 + 32);
        v37 = v36;
        v38 = v16[10];
        *(_QWORD *)&v24[v38] = 0;
        v39 = objc_msgSend(v36, "address", v116);
        if (!v39)
          break;
        v40 = v39;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v43 = v42;

        MACAddress.init(string:type:)(v41, v43, 0);
        v45 = v132;
        v44 = v133;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v10, 1, v133) == 1)
        {

          sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F9890);
          v17 = v127;
          v34 = v129;
          goto LABEL_10;
        }
        v46 = v128;
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v128, v10, v44);
        *(_QWORD *)&v24[v38] = v37;
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v24, v46, v44);
        v47 = v37;
        v48 = objc_msgSend(v47, "name");
        if (v48)
        {
          v49 = v48;
          v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          v52 = v51;

        }
        else
        {
          v50 = 0;
          v52 = 0xE000000000000000;
        }
        v35 = v131;
        v53 = (uint64_t *)&v24[v16[5]];
        *v53 = v50;
        v53[1] = v52;
        *(_DWORD *)&v24[v16[6]] = objc_msgSend(v47, "vendorId");
        v54 = objc_msgSend(v47, "productName");
        if (v54)
        {
          v55 = v54;
          v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
          v58 = v57;

        }
        else
        {
          v56 = 0;
          v58 = 0xE000000000000000;
        }
        v59 = (uint64_t *)&v24[v16[7]];
        *v59 = v56;
        v59[1] = v58;
        *(_DWORD *)&v24[v16[8]] = objc_msgSend(v47, "productId");
        v60 = sub_1001EE37C(objc_msgSend(v47, "vendorId"), objc_msgSend(v47, "productId"));
        v62 = v61;

        (*(void (**)(char *, uint64_t))(v132 + 8))(v128, v133);
        v63 = (uint64_t *)&v24[v16[9]];
        *v63 = v60;
        v63[1] = v62;
        sub_10005972C((uint64_t)v24, (uint64_t)v15, type metadata accessor for BluetoothManagerDevice);
        v17 = v127;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v127 + 56))(v15, 0, 1, v16);
        sub_1000126B0((uint64_t)v24, type metadata accessor for BluetoothManagerDevice);
        v64 = (*(uint64_t (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16);
        v34 = v129;
        if (v64 != 1)
        {
          v65 = (uint64_t)v118;
          sub_1000126EC((uint64_t)v15, (uint64_t)v118, type metadata accessor for BluetoothManagerDevice);
          sub_1000126EC(v65, v119, type metadata accessor for BluetoothManagerDevice);
          if ((swift_isUniquelyReferenced_nonNull_native(v125) & 1) != 0)
            v66 = (unint64_t)v125;
          else
            v66 = sub_1007C9120(0, v125[2] + 1, 1, (unint64_t)v125);
          v68 = *(_QWORD *)(v66 + 16);
          v67 = *(_QWORD *)(v66 + 24);
          if (v68 >= v67 >> 1)
            v66 = sub_1007C9120(v67 > 1, v68 + 1, 1, v66);
          *(_QWORD *)(v66 + 16) = v68 + 1;
          v69 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v125 = (_QWORD *)v66;
          sub_1000126EC(v119, v66 + v69 + *(_QWORD *)(v17 + 72) * v68, type metadata accessor for BluetoothManagerDevice);
          v34 = v129;
          goto LABEL_12;
        }
LABEL_11:
        sub_100004048((uint64_t)v15, &qword_1010F5D00);
LABEL_12:
        if (v35 == ++v33)
          goto LABEL_38;
      }

LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, int *))(v17 + 56))(v15, 1, 1, v16);
      v35 = v131;
      goto LABEL_11;
    }
    v125 = _swiftEmptyArrayStorage;
    v34 = v129;
LABEL_38:
    swift_bridgeObjectRelease_n(v34, 2);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v76 = type metadata accessor for Logger(0);
    v77 = sub_10001A9E8(v76, (uint64_t)qword_1011B6CA8);
    v78 = v125;
    swift_bridgeObjectRetain_n(v125, 3);
    v131 = v77;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.default.getter(v80);
    if (os_log_type_enabled(v80, v81))
    {
      v82 = swift_slowAlloc(22, -1);
      v83 = swift_slowAlloc(32, -1);
      v136 = (char *)v83;
      *(_DWORD *)v82 = 134218242;
      v134 = v78[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v82 + 4, v82 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v82 + 12) = 2080;
      swift_bridgeObjectRetain(v78);
      v85 = Array.description.getter(v84, v16);
      v87 = v86;
      swift_bridgeObjectRelease();
      v134 = sub_100016940(v85, v87, (uint64_t *)&v136);
      v17 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v82 + 14, v82 + 22);
      swift_bridgeObjectRelease_n(v78, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "[sanitizedMAC] All paired devices [%ld]: %s", (uint8_t *)v82, 0x16u);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v78, 3);
    }
    v88 = v117;
    v89 = v78[2];
    if (v89)
    {
      v90 = *(_QWORD *)(v116 + 32);
      v132 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
      v133 = v90;
      v91 = (uint64_t)v78 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v92 = *(_QWORD *)(v17 + 72);
      v93 = v126;
      v94 = v120;
      while (1)
      {
        v95 = sub_10005972C(v91, v93, type metadata accessor for BluetoothManagerDevice);
        __chkstk_darwin(v95);
        *(&v116 - 2) = v93;
        *(&v116 - 1) = v96;
        sub_10001A9A8(&qword_101110700);
        Lock.callAsFunction<A>(_:)(sub_100245650);
        v97 = v136;
        if (v136)
        {
          v98 = objc_msgSend(*(id *)&v136[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v98);

          v99 = objc_msgSend(*(id *)(v124 + v132), "identifier");
          v100 = v121;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v99);

          LOBYTE(v99) = static UUID.== infix(_:_:)(v94, v100);
          v101 = *(void (**)(char *, uint64_t))(v122 + 8);
          v102 = v100;
          v103 = v123;
          v101(v102, v123);
          v101(v94, v103);
          if ((v99 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v105 = v97;
            v106 = Logger.logObject.getter(v105);
            v107 = static os_log_type_t.default.getter(v106);
            if (os_log_type_enabled(v106, v107))
            {
              v108 = (uint8_t *)swift_slowAlloc(12, -1);
              v109 = (_QWORD *)swift_slowAlloc(8, -1);
              *(_DWORD *)v108 = 138412290;
              v136 = (char *)v105;
              v110 = v105;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v108 + 4, v108 + 12);
              *v109 = v97;

              _os_log_impl((void *)&_mh_execute_header, v106, v107, "[sanitizedMAC] Found BT peripheral: %@", v108, 0xCu);
              v111 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
              swift_arrayDestroy(v109, 1, v111);
              swift_slowDealloc(v109, -1, -1);
              swift_slowDealloc(v108, -1, -1);
            }
            else
            {

              v106 = v105;
            }
            v112 = (NSObject **)v117;

            v113 = sub_10001A9A8(&qword_1010F5D10);
            v114 = (uint64_t)v112 + *(int *)(v113 + 48);
            *v112 = v105;
            sub_1000126EC(v126, v114, type metadata accessor for BluetoothManagerDevice);
            (*(void (**)(NSObject **, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v112, 0, 1, v113);
            return;
          }
          v93 = v126;
          sub_1000126B0(v126, type metadata accessor for BluetoothManagerDevice);

        }
        else
        {
          sub_1000126B0(v93, type metadata accessor for BluetoothManagerDevice);
        }
        v91 += v92;
        if (!--v89)
        {
          swift_bridgeObjectRelease();
          v88 = v117;
          goto LABEL_52;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_52:
    v104 = sub_10001A9A8(&qword_1010F5D10);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v88, 1, 1, v104);
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v70 = type metadata accessor for Logger(0);
    v71 = sub_10001A9E8(v70, (uint64_t)qword_1011B6CA8);
    v72 = Logger.logObject.getter(v71);
    v73 = static os_log_type_t.error.getter(v72);
    if (os_log_type_enabled(v72, v73))
    {
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "[sanitizedMAC] Unable to retrieve BT paired devices!", v74, 2u);
      swift_slowDealloc(v74, -1, -1);
    }

    v75 = sub_10001A9A8(&qword_1010F5D10);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(a2, 1, 1, v75);
  }
}

uint64_t sub_1002C6C2C(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v22;

  v2 = sub_10001A9A8(&qword_1010EEEB0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "state") != (id)2)
    return sub_100E0799C(a1, 0);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6CA8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Peripheral is already connected. No need to connect again.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v22 = a1;
  v15 = type metadata accessor for Peripheral(0);
  v16 = a1;
  Just.init(_:)(&v22, v15);
  v17 = sub_100059390();
  Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v2, &type metadata for CentralManager.Error, v17);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
  v19 = Publisher.eraseToAnyPublisher()(v6, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v19;
}

void sub_1002C6E6C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(_BYTE *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;

  v45 = a1;
  v41 = a2;
  v42 = a5;
  v43 = a4;
  v40 = a3;
  v44 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v7 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v39[-v13];
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v47[0] = 0x7365547265646E75;
  v47[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v48, v47, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
  {
    v19 = *(void **)(v46 + 48);
    *v18 = v19;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
    v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
    v21 = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
    if ((v19 & 1) == 0)
    {
      __break(1u);
      goto LABEL_19;
    }
    static SystemInfo.lockState.getter(v21);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
    v22 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v22);
    v24 = *(void (**)(_BYTE *, uint64_t))(v9 + 8);
    v24(v12, v8);
    v24(v14, v8);
    if ((v23 & 1) != 0)
    {
      if (qword_1010EA318 == -1)
      {
LABEL_7:
        v25 = type metadata accessor for Logger(0);
        v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B7DF8);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.default.getter(v27);
        if (!os_log_type_enabled(v27, v28))
        {
LABEL_15:

          return;
        }
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        v30 = "Not handling pairing/connection event before first unlock!";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, v29, 2u);
        swift_slowDealloc(v29, -1, -1);
        goto LABEL_15;
      }
LABEL_19:
      swift_once(&qword_1010EA318, sub_100B5E330);
      goto LABEL_7;
    }
    v31 = v45;
    v32 = sub_100786FB4(v7);
    v33 = MACAddress.isNull.getter(v32);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v44);
    if ((v33 & 1) != 0)
    {
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6CA8);
      v27 = Logger.logObject.getter(v35);
      v28 = static os_log_type_t.error.getter(v27);
      if (!os_log_type_enabled(v27, v28))
        goto LABEL_15;
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      v30 = "Void MAC address detected. Abort pairing!";
      goto LABEL_14;
    }
    v36 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v36);
    v37 = v46;
    *(_QWORD *)&v39[-48] = v31;
    *(_QWORD *)&v39[-40] = v37;
    v39[-32] = v40 & 1;
    v38 = v42;
    *(_QWORD *)&v39[-24] = v41;
    *(_QWORD *)&v39[-16] = v38;
    v39[-8] = v43 & 1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.ClassicPairingSupport.handleClassicPairing", 72, 2, sub_1002DCF3C, &v39[-64]);
  }
}

uint64_t sub_1002C72B8(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v116;
  id v117;
  id v118;

  v113 = a6;
  v110 = a4;
  v111 = a7;
  v108 = a5;
  v112 = a1;
  v9 = type metadata accessor for BluetoothManagerDevice(0);
  v106 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v107 = v10;
  v109 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10001A9A8(&qword_1010F3980);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_10001A9A8(&qword_1010F3988);
  v87 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v82 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10001A9A8(&qword_1010F3990);
  v91 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v86 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_10001A9A8(&qword_1010F3998);
  v93 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v88 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_10001A9A8(&qword_1010F39A0);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v92 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_10001A9A8(&qword_1010F5D78);
  v97 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v94 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010F5D80);
  v101 = *(_QWORD *)(v21 - 8);
  v102 = v21;
  __chkstk_darwin(v21);
  v100 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010F5D88);
  v104 = *(_QWORD *)(v23 - 8);
  v105 = v23;
  __chkstk_darwin(v23);
  v103 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6CA8);
  sub_1007885B0(0xD000000000000022, 0x8000000100ECF840);
  v117 = (id)sub_1002C6C2C(a2);
  v90 = a3;
  v26 = *(void **)(a3 + 48);
  v118 = v26;
  v27 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v114 = v27;
  v115 = v28;
  v28(v13, 1, 1, v27);
  v77 = v26;
  v29 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v30 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v31 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v116 = sub_1001C7EF4();
  v79 = v29;
  v32 = v30;
  v81 = v30;
  v80 = v31;
  Publisher.receive<A>(on:options:)(&v118, v13, v29, v30, v31, v116);
  sub_100004048((uint64_t)v13, &qword_1010EECC8);

  v33 = swift_release();
  v34 = static Subscribers.Demand.unlimited.getter(v33);
  v35 = type metadata accessor for Peripheral(0);
  v78 = v35;
  v36 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v37 = v82;
  v38 = v83;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v34, sub_1002C0E44, 0, v83, v35, v29, v36, v31);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v15, v38);
  v39 = v77;
  v117 = v77;
  v115(v13, 1, 1, v114);
  v40 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v41 = v39;
  v42 = v86;
  v43 = v84;
  Publisher.receive<A>(on:options:)(&v117, v13, v84, v32, v40, v116);
  sub_100004048((uint64_t)v13, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v87 + 8))(v37, v43);
  v44 = swift_allocObject(&unk_101066C10, 24, 7);
  *(_QWORD *)(v44 + 16) = &off_101049A38;
  v45 = static Subscribers.Demand.unlimited.getter(v44);
  v46 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v47 = v88;
  v48 = v89;
  v49 = v78;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v45, sub_1002DCF84, v44, v89, v78, v79, v46, v80);
  swift_release();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v42, v48);
  v117 = v41;
  v115(v13, 1, 1, v114);
  v50 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v51 = v41;
  v52 = v92;
  v53 = v95;
  Publisher.receive<A>(on:options:)(&v117, v13, v95, v81, v50, v116);
  sub_100004048((uint64_t)v13, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v93 + 8))(v47, v53);
  v54 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v55 = v94;
  v56 = v98;
  Publisher.compactMap<A>(_:)(sub_1000E0680, 0, v98, v49, v54);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v52, v56);
  v57 = sub_10001A9A8(&qword_1011074A0);
  v58 = v99;
  v59 = v100;
  Publishers.CompactMap.map<A>(_:)(sub_1000E068C, 0, v99, v57);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v55, v58);
  v60 = sub_10001A9A8(&qword_1010EEE90);
  v61 = sub_1000193A4(&qword_1010F5D90, &qword_1010F5D80, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v62 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v63 = v102;
  v64 = v103;
  Publisher.catch<A>(_:)(sub_1002C11A4, 0, v102, v60, v61, v62);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v59, v63);
  v65 = swift_allocObject(&unk_101066A80, 24, 7);
  v66 = v90;
  swift_weakInit(v65 + 16, v90);
  v67 = v109;
  sub_10005972C(v108, v109, type metadata accessor for BluetoothManagerDevice);
  v68 = *(unsigned __int8 *)(v106 + 80);
  v69 = (v68 + 33) & ~v68;
  v70 = (v107 + v69 + 7) & 0xFFFFFFFFFFFFFFF8;
  v71 = swift_allocObject(&unk_101066C38, v70 + 9, v68 | 7);
  *(_QWORD *)(v71 + 16) = v112;
  *(_QWORD *)(v71 + 24) = v65;
  *(_BYTE *)(v71 + 32) = v110 & 1;
  sub_1000126EC(v67, v71 + v69, type metadata accessor for BluetoothManagerDevice);
  v72 = v71 + v70;
  v73 = v113;
  *(_QWORD *)v72 = v113;
  *(_BYTE *)(v72 + 8) = v111 & 1;
  v74 = sub_1000193A4(&qword_1010F5D98, &qword_1010F5D88, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_bridgeObjectRetain(v73);
  v75 = v105;
  Publisher<>.sink(receiveValue:)(sub_1002DD078, v71, v105, v74);
  swift_release();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v64, v75);
  swift_beginAccess(v66 + 72, &v117, 33, 0);
  AnyCancellable.store(in:)(v66 + 72);
  swift_endAccess(&v117);
  return swift_release();
}

uint64_t sub_1002C7C74@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36[16];
  _QWORD *v37;
  char v38[24];
  _QWORD v39[5];

  v35 = a3;
  v5 = sub_10001A9A8(&qword_1010EEEB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)*a1;
  v39[3] = &type metadata for BAServiceIdentifier;
  v39[4] = &off_101077A98;
  LOBYTE(v39[0]) = 1;
  v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v38, 0, 0);
  v15 = *v14;
  v37 = v39;
  swift_bridgeObjectRetain(v15);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v36, v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  if (v17)
  {
    v18 = sub_1007ED9A8(a2);
    v19 = swift_allocObject(&unk_101066C60, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = swift_bridgeObjectRetain(v18);
    v39[0] = Future.init(_:)(sub_1000FA48C, v19, v21);
    v22 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6CA8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No FindMy service", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v39[0] = v13;
    v30 = type metadata accessor for Peripheral(0);
    v31 = v13;
    Just.init(_:)(v39, v30);
    v32 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v5, &type metadata for CentralManager.Error, v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v33 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v23 = Publisher.eraseToAnyPublisher()(v9, v33);
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  *v35 = v23;
  return result;
}

_QWORD *sub_1002C7FCC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint8_t *a5, uint8_t *a6, char a7)
{
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD v46[6];
  uint64_t v47;
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[5];
  char v51;
  _BYTE v52[24];

  v12 = a3 + 16;
  Transaction.capture()();
  swift_beginAccess(v12, v52, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(v12);
  if (result)
  {
    sub_10000F9B8(a1, (uint64_t)v50, &qword_1011074A0);
    if ((v51 & 1) != 0)
    {
      sub_100059244((uint64_t)v50, (uint64_t)v49);
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v14 = type metadata accessor for Logger(0);
      sub_10001A9E8(v14, (uint64_t)qword_1011B6CA8);
      v15 = sub_100059280(v49, (uint64_t)v48);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v18 = 138543362;
        v20 = sub_100059390();
        v21 = swift_allocError(&type metadata for CentralManager.Error, v20, 0, 0);
        sub_100059280(v48, v22);
        v23 = _swift_stdlib_bridgeErrorToNSError(v21);
        v47 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v18 + 4, v18 + 12);
        *v19 = v23;
        sub_1000593D4(v48);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "registerForConnectionEvents error: %{public}@", v18, 0xCu);
        v24 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v19, 1, v24);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

        swift_release();
      }
      else
      {

        swift_release();
        sub_1000593D4(v48);
      }
      return sub_1000593D4(v49);
    }
    else
    {
      v25 = (char *)v50[0];
      v49[3] = &type metadata for BAServiceIdentifier;
      v49[4] = &off_101077A98;
      LOBYTE(v49[0]) = 1;
      v26 = (uint64_t *)(v50[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
      swift_beginAccess(v50[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v48, 0, 0);
      v27 = *v26;
      __chkstk_darwin(v28);
      v46[2] = v49;
      swift_bridgeObjectRetain(v27);
      sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)v46, v27);
      v30 = v29;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
      if (v30)
      {
        if ((a4 & 1) != 0)
        {
          if (qword_1010E9B08 != -1)
            swift_once(&qword_1010E9B08, sub_1002B4720);
          v31 = type metadata accessor for Logger(0);
          v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6CA8);
          v33 = Logger.logObject.getter(v32);
          v34 = static os_log_type_t.default.getter(v33);
          if (os_log_type_enabled(v33, v34))
          {
            v35 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Bypassing Privacy Alert and force pairing", v35, 2u);
            swift_slowDealloc(v35, -1, -1);
          }

          sub_1002C9508(v30, v25, a5, 1, a6);
        }
        else
        {
          if (qword_1010E9B08 != -1)
            swift_once(&qword_1010E9B08, sub_1002B4720);
          v41 = type metadata accessor for Logger(0);
          v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B6CA8);
          v43 = Logger.logObject.getter(v42);
          v44 = static os_log_type_t.default.getter(v43);
          if (os_log_type_enabled(v43, v44))
          {
            v45 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v45 = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "Owner characteristic available. Proceed with privacy alert.", v45, 2u);
            swift_slowDealloc(v45, -1, -1);
          }

          sub_1002C8500(v30, (uint64_t)v25, (uint64_t)a5, a7 & 1);
        }

        swift_release();
      }
      else
      {
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v36 = type metadata accessor for Logger(0);
        v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B6CA8);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.error.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "No FindMy service", v40, 2u);
          swift_slowDealloc(v40, -1, -1);
        }

      }
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

void sub_1002C8500(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE v26[16];
  _BYTE v27[24];
  _QWORD v28[5];

  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(void **)(v4 + 48);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_5;
  }
  v28[3] = &type metadata for BACharacteristicIdentifier.FindMy;
  v28[4] = &off_101077A78;
  LOBYTE(v28[0]) = 3;
  swift_beginAccess(a1 + 40, v27, 0, 0);
  v15 = *(_QWORD *)(a1 + 40);
  __chkstk_darwin(v16);
  *(_QWORD *)&v26[-16] = v28;
  swift_bridgeObjectRetain(v15);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_100245470, (uint64_t)&v26[-32], v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  if (v18)
  {
    v19 = sub_1002B9C10();
    v20 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v20);
    *(_QWORD *)&v26[-64] = v19;
    *(_QWORD *)&v26[-56] = a2;
    *(_QWORD *)&v26[-48] = v18;
    *(_QWORD *)&v26[-40] = a3;
    v26[-32] = a4 & 1;
    *(_QWORD *)&v26[-24] = v4;
    *(_QWORD *)&v26[-16] = a1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.ClassicPairingSupport.showPrivacyAlertOrPair", 74, 2, sub_1002DCB6C, &v26[-80]);
    swift_release();
    swift_release();
    return;
  }
  if (qword_1010E9B08 != -1)
    goto LABEL_9;
LABEL_5:
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6CA8);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.error.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Missing Paired Owner Characteristic!", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

}

uint64_t sub_1002C87A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57[16];
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  id v63[2];

  v55 = a1;
  v56 = a8;
  v46 = a7;
  v47 = a5;
  v8 = a6;
  v49 = a6;
  v48 = a3;
  v13 = type metadata accessor for BluetoothManagerDevice(0);
  v51 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v13);
  v50 = (uint64_t)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F5D48);
  v19 = *(_QWORD *)(v18 - 8);
  v53 = v18;
  v54 = v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a2;
  v59 = a3;
  v60 = a4;
  v61 = a5;
  v62 = v8;
  v22 = sub_10001A9A8(&qword_1010F5D50);
  v23 = v52;
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DCB90, v57, v22);
  v52 = v23;
  v24 = v46;
  v63[0] = *(id *)(v46 + 48);
  v25 = v63[0];
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v17, 1, 1, v26);
  v27 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v28 = sub_1000193A4(&qword_1010F5D58, &qword_1010F5D50, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = sub_1001C7EF4();
  v30 = v25;
  Publisher.receive<A>(on:options:)(v63, v17, v22, v27, v28, v29);
  sub_100004048((uint64_t)v17, &qword_1010EECC8);

  swift_release();
  v31 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v31 + 16, v24);
  v32 = v50;
  sub_10005972C(v47, v50, type metadata accessor for BluetoothManagerDevice);
  v33 = *(unsigned __int8 *)(v51 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = (v14 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  v37 = swift_allocObject(&unk_101066B70, v36 + 9, v33 | 7);
  v38 = v48;
  *(_QWORD *)(v37 + 16) = v31;
  *(_QWORD *)(v37 + 24) = v38;
  sub_1000126EC(v32, v37 + v34, type metadata accessor for BluetoothManagerDevice);
  v39 = v55;
  *(_QWORD *)(v37 + v35) = v55;
  v40 = v37 + v36;
  *(_QWORD *)v40 = v56;
  *(_BYTE *)(v40 + 8) = v49;
  v41 = sub_1000193A4(&qword_1010F5D60, &qword_1010F5D48, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v42 = v38;
  swift_retain();
  swift_retain();
  v43 = v53;
  Publisher<>.sink(receiveValue:)(sub_1002DCBA8, v37, v53, v41);
  swift_release();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v43);
  AnyCancellable.store(in:)(v39);
  return swift_release();
}

uint64_t sub_1002C8AF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  _QWORD v28[3];
  _BYTE v29[24];

  v13 = type metadata accessor for BluetoothManagerDevice(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v29, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    v28[2] = type metadata accessor for Transaction(0);
    v19 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v19 + 16, v18);
    sub_10005972C(a4, (uint64_t)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BluetoothManagerDevice);
    v20 = *(unsigned __int8 *)(v14 + 80);
    v21 = (v20 + 32) & ~v20;
    v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28[1] = v18;
    LOBYTE(v18) = a7;
    v23 = a6;
    v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    v25 = swift_allocObject(&unk_101066B98, v24 + 9, v20 | 7);
    *(_QWORD *)(v25 + 16) = v19;
    *(_QWORD *)(v25 + 24) = a3;
    sub_1000126EC((uint64_t)v16, v25 + v21, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)(v25 + v22) = a5;
    v26 = v25 + v24;
    *(_QWORD *)v26 = v23;
    *(_BYTE *)(v26 + 8) = v18 & 1;
    swift_retain();
    v27 = a3;
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("showPrivacyAlertOrPair.pairAirPods", 34, 2, &unk_1010F5D70, v25);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002C8CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  *(_BYTE *)(v6 + 240) = a6;
  *(_QWORD *)(v6 + 128) = a4;
  *(_QWORD *)(v6 + 136) = a5;
  *(_QWORD *)(v6 + 112) = a2;
  *(_QWORD *)(v6 + 120) = a3;
  *(_QWORD *)(v6 + 104) = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v6 + 144) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 152) = v8;
  *(_QWORD *)(v6 + 160) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v6 + 168) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 176) = v10;
  *(_QWORD *)(v6 + 184) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  *(_QWORD *)(v6 + 192) = v11;
  v12 = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v6 + 200) = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v13);
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v13);
  return swift_task_switch(sub_1002C8D80, 0, 0);
}

uint64_t sub_1002C8D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104) + 16;
  swift_beginAccess(v1, v0 + 64, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 224) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1010F595C);
    *(_QWORD *)(v0 + 232) = v3;
    *v3 = v0;
    v3[1] = sub_1002C8E44;
    return sub_1002CAD74(*(_QWORD *)(v0 + 112));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002C8E44(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_BYTE *)(*(_QWORD *)v1 + 241) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C8EA0, 0, 0);
}

uint64_t sub_1002C8EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_BYTE *)(v0 + 241) == 1)
  {
    v2 = *(_QWORD *)(v0 + 216);
    v1 = *(_QWORD *)(v0 + 224);
    v3 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v40 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 168);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 144);
    v35 = *(_BYTE *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 128);
    v34 = *(void **)(v0 + 112);
    v39 = *(_QWORD *)(v0 + 152);
    sub_10005972C(*(_QWORD *)(v0 + 120), v2, type metadata accessor for BluetoothManagerDevice);
    v7 = *(unsigned __int8 *)(v3 + 80);
    v8 = (v7 + 24) & ~v7;
    v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject(&unk_101066BC0, v11 + 9, v7 | 7);
    *(_QWORD *)(v12 + 16) = v6;
    sub_1000126EC(v2, v12 + v8, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)(v12 + v9) = v1;
    *(_QWORD *)(v12 + v10) = v5;
    v13 = v12 + v11;
    *(_QWORD *)v13 = v34;
    *(_BYTE *)(v13 + 8) = v35;
    *(_QWORD *)(v0 + 48) = sub_1002DCED8;
    *(_QWORD *)(v0 + 56) = v12;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100016FB8;
    *(_QWORD *)(v0 + 40) = &unk_101066BD8;
    v14 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter(v34);
    *(_QWORD *)(v0 + 96) = _swiftEmptyArrayStorage;
    v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v17 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 96, v16, v17, v38, v15);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v37, v14);
    _Block_release(v14);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v36, v41);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 120);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B6CA8);
    v21 = sub_10005972C(v19, v18, type metadata accessor for BluetoothManagerDevice);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v25 = *(_QWORD *)(v0 + 208);
    if (v24)
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v42 = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = sub_10015AE8C();
      *(_QWORD *)(v0 + 88) = sub_100016940(v28, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v25, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "FindMy pairing has been completed for %{public}s.", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      sub_1000126B0(v25, type metadata accessor for BluetoothManagerDevice);

    }
  }
  v30 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002C92C4(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v11 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B6CA8);
  v15 = sub_10005972C((uint64_t)a2, (uint64_t)v13, type metadata accessor for BluetoothManagerDevice);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(12, -1);
    v28 = a5;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v27 = a3;
    v21 = v20;
    v30 = v20;
    *(_DWORD *)v19 = 136446210;
    v26 = a2;
    v22 = sub_10015AE8C();
    v29 = sub_100016940(v22, v23, &v30);
    a2 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v13, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "FindMy pairing is not completed for %{public}s. Attempt to pair...", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    v24 = v19;
    a5 = v28;
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for BluetoothManagerDevice);
  }

  sub_1002C9508(a4, a5, a2, a6 & 1, (uint8_t *)_swiftEmptyArrayStorage);
}

void sub_1002C9508(uint64_t a1, char *a2, uint8_t *a3, int a4, uint8_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t My;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint8_t *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  int v73;
  uint8_t *v74;
  uint8_t *v75;
  char *v76;
  id v77;
  uint64_t v78;
  char v79[24];
  uint64_t v80[3];
  ValueMetadata *v81;
  _UNKNOWN **v82;

  v6 = v5;
  v74 = a3;
  v75 = a5;
  v73 = a4;
  v76 = a2;
  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F5D28);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint8_t **)((char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v6 + 48);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v72 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_10;
  }
  v81 = &type metadata for BACharacteristicIdentifier.FindMy;
  v82 = &off_101077A78;
  LOBYTE(v80[0]) = 0;
  swift_beginAccess(a1 + 40, v79, 0, 0);
  v20 = *(_QWORD *)(a1 + 40);
  __chkstk_darwin(v21);
  *(&v66 - 2) = (uint8_t *)v80;
  swift_bridgeObjectRetain(v20);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)(&v66 - 4), v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
  if (v23)
  {
    My = type metadata accessor for Feature.FindMy(0);
    v81 = (ValueMetadata *)My;
    v82 = (_UNKNOWN **)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v25 = sub_100018F08(v80);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v25, enum case for Feature.FindMy.baAirpods(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(v80);
    v26 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v80);
    if ((My & 1) != 0)
    {
      __chkstk_darwin(v26);
      v27 = v76;
      *(&v66 - 2) = (uint8_t *)v6;
      *(&v66 - 1) = (uint8_t *)v27;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DCAE4);
      if ((v80[0] & 1) != 0)
      {
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B6CA8);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.default.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v32 = 0;
          v33 = "Pairing in progress. Not pairing.";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v30, v31, v33, v32, 2u);
          swift_slowDealloc(v32, -1, -1);
          swift_release();

          return;
        }
      }
      else
      {
        v70 = 0;
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v41 = type metadata accessor for Logger(0);
        v42 = sub_10001A9E8(v41, (uint64_t)qword_1011B6CA8);
        v43 = swift_retain_n(v23, 2);
        v44 = Logger.logObject.getter(v43);
        v45 = static os_log_type_t.default.getter(v44);
        v46 = os_log_type_enabled(v44, v45);
        v71 = v12;
        if (v46)
        {
          v47 = (uint8_t *)swift_slowAlloc(12, -1);
          v68 = swift_slowAlloc(32, -1);
          v80[0] = v68;
          v67 = v47;
          *(_DWORD *)v47 = 136446210;
          v66 = v47 + 4;
          swift_retain();
          v48 = sub_1007C6C74();
          v69 = v42;
          v50 = v49;
          swift_release();
          v77 = (id)sub_100016940(v48, v50, v80);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v66, v47 + 12);
          swift_release_n(v23, 2);
          swift_bridgeObjectRelease();
          v51 = v67;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Pairing characteristic %{public}s available. Proceed with FindMy pairing.", v67, 0xCu);
          v52 = v68;
          swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v52, -1, -1);
          swift_slowDealloc(v51, -1, -1);

        }
        else
        {

          swift_release_n(v23, 2);
        }
        v53 = sub_1002B9504(v76);
        if (v53)
        {
          v54 = (char *)__chkstk_darwin(v53);
          *(&v66 - 6) = (uint8_t *)v54;
          *((_BYTE *)&v66 - 40) = v73 & 1;
          v55 = v75;
          *(&v66 - 4) = v74;
          *(&v66 - 3) = v55;
          *(&v66 - 2) = v23;
          v76 = v54;
          v56 = sub_10001A9A8(&qword_1010F5D30);
          OS_dispatch_queue.sync<A>(execute:)(sub_1002DCAFC, &v66 - 8, v56);
          v57 = v72;
          v77 = v72;
          v58 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v10, 1, 1, v58);
          v59 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
          v60 = sub_1000193A4(&qword_1010F5D38, &qword_1010F5D30, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
          v61 = sub_1001C7EF4();
          v62 = v57;
          Publisher.receive<A>(on:options:)(&v77, v10, v56, v59, v60, v61);
          sub_100004048((uint64_t)v10, &qword_1010EECC8);

          swift_release();
          v63 = swift_allocObject(&unk_101066A80, 24, 7);
          swift_weakInit(v63 + 16, v6);
          v64 = swift_allocObject(&unk_101066B48, 32, 7);
          *(_QWORD *)(v64 + 16) = sub_1002DCB20;
          *(_QWORD *)(v64 + 24) = v63;
          v65 = sub_1000193A4(&qword_1010F5D40, &qword_1010F5D28, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
          Publisher<>.sink(receiveValue:)(sub_1002DCB28, v64, v11, v65);
          swift_release();
          (*(void (**)(char *, uint64_t))(v71 + 8))(v14, v11);
          swift_beginAccess(v6 + 72, v80, 33, 0);
          AnyCancellable.store(in:)(v6 + 72);
          swift_endAccess(v80);
          swift_release();
          swift_release();
LABEL_28:
          swift_release();
          return;
        }
        v30 = Logger.logObject.getter(0);
        v31 = static os_log_type_t.error.getter(v30);
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v32 = 0;
          v33 = "Unable to create a new pairing manager to pair AirPods!";
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B6CA8);
      v30 = Logger.logObject.getter(v40);
      v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        v33 = "Internal Settings -> Feature Flags -> FindMy -> baAirpods is disabled.";
        goto LABEL_17;
      }
    }

    goto LABEL_28;
  }
  if (qword_1010E9B08 != -1)
    goto LABEL_30;
LABEL_10:
  v34 = type metadata accessor for Logger(0);
  v35 = sub_10001A9E8(v34, (uint64_t)qword_1011B6CA8);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.error.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Missing FindMy Pairing Characteristic!", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

}

uint64_t sub_1002C9DA8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[3];
  char v70[24];

  v5 = type metadata accessor for MACAddress(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v9);
  v66 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BluetoothManagerDevice(0);
  v65 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v64 = (uint64_t)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v67 = (uint64_t)&v57 - v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v70, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v20 = result;
    v63 = v11;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6CA8);
    sub_1007885B0(0xD000000000000015, 0x8000000100ECF750);
    v23 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    swift_beginAccess(v20 + 184, v69, 33, 0);
    sub_1001036AC((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_endAccess(v69);
    swift_release();
    v24 = swift_retain_n(v20, 2);
    v62 = v22;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v61 = v5;
      v27 = swift_slowAlloc(12, -1);
      v59 = v6;
      v28 = (uint8_t *)v27;
      v58 = swift_slowAlloc(32, -1);
      v69[0] = v58;
      *(_DWORD *)v28 = 136315138;
      v57 = v28 + 4;
      v60 = v8;
      v29 = *(_QWORD *)(v20 + 184);
      v30 = v20;
      v31 = a1;
      v32 = type metadata accessor for AirPodsPairingManager();
      v33 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v29);
      v34 = v32;
      a1 = v31;
      v36 = Dictionary.description.getter(v35, v15, v34, v33);
      v38 = v37;
      v8 = v60;
      swift_bridgeObjectRelease();
      v68 = sub_100016940(v36, v38, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v57, v28 + 12);
      swift_release_n(v30, 2);
      v5 = v61;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "pairingManagers: %s", v28, 0xCu);
      v39 = v58;
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      v40 = v28;
      v6 = v59;
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_release_n(v20, 2);
    }
    sub_100786FB4(v8);
    v41 = v66;
    sub_1002CA428((uint64_t)v8, v66);
    v42 = *(void (**)(char *, uint64_t))(v6 + 8);
    v42(v8, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v41, 1, v63) == 1)
    {
      v43 = sub_100004048(v41, &qword_1010F5D00);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "No BT device from BluetoothManager after pairing. Need to unpair", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      sub_100786FB4(v8);
      sub_1002BC4E8(a1, (uint64_t)v8);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v42)(v8, v5);
    }
    else
    {
      v47 = v41;
      v48 = v67;
      sub_1000126EC(v47, v67, type metadata accessor for BluetoothManagerDevice);
      v49 = v64;
      v50 = sub_10005972C(v48, v64, type metadata accessor for BluetoothManagerDevice);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v69[0] = v54;
        *(_DWORD *)v53 = 136315138;
        v55 = sub_10015AE8C();
        v68 = sub_100016940(v55, v56, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v49, type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Found BT device from BluetoothManager after pairing as expected. %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);
        swift_release();

      }
      else
      {

        sub_1000126B0(v49, type metadata accessor for BluetoothManagerDevice);
        swift_release();
      }
      return sub_1000126B0(v67, type metadata accessor for BluetoothManagerDevice);
    }
  }
  return result;
}

void sub_1002CA428(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v95 = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v3);
  v104 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MACAddress(0);
  v102 = *(_QWORD *)(v5 - 8);
  v103 = v5;
  __chkstk_darwin(v5);
  v100 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v7);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v105 = *((_QWORD *)v10 - 1);
  v11 = __chkstk_darwin(v10);
  v96 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v97 = (uint64_t)&v92 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v92 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v92 - v18;
  v20 = sub_1002B4834();
  if (!v20
    || (v21 = v20, v22 = objc_msgSend(v20, "pairedDevices"), v21, !v22)
    || (v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, (char *)&type metadata for Any + 8),
        v22,
        v24 = (uint64_t)sub_1003627F4(v23),
        swift_bridgeObjectRelease(),
        !v24))
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v66 = type metadata accessor for Logger(0);
    v67 = sub_10001A9E8(v66, (uint64_t)qword_1011B6CA8);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.error.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to retrieve BT paired devices!", v70, 2u);
      swift_slowDealloc(v70, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v105 + 56))(a2, 1, 1, v10);
    return;
  }
  if ((unint64_t)v24 >> 62)
  {
    if (v24 >= 0)
      v71 = v24 & 0xFFFFFFFFFFFFFF8;
    else
      v71 = v24;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v71);
    v93 = a2;
    if (v25)
      goto LABEL_6;
LABEL_40:
    v98 = _swiftEmptyArrayStorage;
LABEL_41:
    swift_bridgeObjectRelease_n(v24, 2);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v72 = type metadata accessor for Logger(0);
    sub_10001A9E8(v72, (uint64_t)qword_1011B6CA8);
    v73 = v98;
    swift_bridgeObjectRetain_n(v98, 3);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.debug.getter(v75);
    v77 = os_log_type_enabled(v75, v76);
    v78 = (uint64_t)v96;
    if (v77)
    {
      v79 = swift_slowAlloc(22, -1);
      v80 = swift_slowAlloc(32, -1);
      v104 = (char *)v80;
      *(_DWORD *)v79 = 134218242;
      v106 = v73[2];
      v107 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v79 + 4, v79 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2080;
      swift_bridgeObjectRetain(v73);
      v82 = Array.description.getter(v81, v10);
      v84 = v83;
      swift_bridgeObjectRelease();
      v106 = sub_100016940(v82, v84, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107, v79 + 14, v79 + 22);
      swift_bridgeObjectRelease_n(v73, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "All paired devices [%ld]: %s", (uint8_t *)v79, 0x16u);
      v85 = v104;
      swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v79, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v73, 3);
    }
    v86 = v93;
    v87 = v95;
    v88 = v73[2];
    v89 = v73;
    if (v88)
    {
      v90 = (uint64_t)v73
          + ((*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80));
      v91 = *(_QWORD *)(v105 + 72);
      swift_bridgeObjectRetain(v89);
      while (1)
      {
        sub_10005972C(v90, v78, type metadata accessor for BluetoothManagerDevice);
        if ((static MACAddress.== infix(_:_:)(v78, v87) & 1) != 0)
          break;
        sub_1000126B0(v78, type metadata accessor for BluetoothManagerDevice);
        v90 += v91;
        if (!--v88)
        {
          swift_bridgeObjectRelease();
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease();
      sub_1000126EC(v78, v86, type metadata accessor for BluetoothManagerDevice);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v105 + 56))(v86, 0, 1, v10);
    }
    else
    {
LABEL_51:
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v105 + 56))(v86, 1, 1, v10);
    }
    swift_bridgeObjectRelease();
    return;
  }
  v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v24);
  v93 = a2;
  if (!v25)
    goto LABEL_40;
LABEL_6:
  v94 = v19;
  if (v25 >= 1)
  {
    v26 = 0;
    v98 = _swiftEmptyArrayStorage;
    v99 = v24;
    v101 = v24 & 0xC000000000000001;
    while (1)
    {
      v27 = v101
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24)
          : *(id *)(v24 + 8 * v26 + 32);
      v28 = v27;
      v29 = v10[10];
      *(_QWORD *)&v17[v29] = 0;
      v30 = objc_msgSend(v27, "address");
      if (!v30)
        break;
      v31 = v30;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v34 = v33;

      v35 = v103;
      v36 = v32;
      v37 = v34;
      v38 = (uint64_t)v104;
      v39 = v102;
      MACAddress.init(string:type:)(v36, v37, 0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v38, 1, v35) == 1)
      {

        sub_100004048(v38, (uint64_t *)&unk_1010F9890);
        v24 = v99;
        goto LABEL_9;
      }
      v40 = v38;
      v41 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v100, v40, v35);
      *(_QWORD *)&v17[v29] = v28;
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v17, v41, v35);
      v42 = v28;
      v43 = objc_msgSend(v42, "name");
      if (v43)
      {
        v44 = v43;
        v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v47 = v46;

      }
      else
      {
        v45 = 0;
        v47 = 0xE000000000000000;
      }
      v48 = (uint64_t *)&v17[v10[5]];
      *v48 = v45;
      v48[1] = v47;
      *(_DWORD *)&v17[v10[6]] = objc_msgSend(v42, "vendorId");
      v49 = objc_msgSend(v42, "productName");
      if (v49)
      {
        v50 = v49;
        v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        v53 = v52;

      }
      else
      {
        v51 = 0;
        v53 = 0xE000000000000000;
      }
      v54 = (uint64_t *)&v17[v10[7]];
      *v54 = v51;
      v54[1] = v53;
      *(_DWORD *)&v17[v10[8]] = objc_msgSend(v42, "productId");
      v55 = sub_1001EE37C(objc_msgSend(v42, "vendorId"), objc_msgSend(v42, "productId"));
      v57 = v56;

      (*(void (**)(char *, uint64_t))(v102 + 8))(v100, v103);
      v58 = (uint64_t *)&v17[v10[9]];
      *v58 = v55;
      v58[1] = v57;
      sub_10005972C((uint64_t)v17, (uint64_t)v9, type metadata accessor for BluetoothManagerDevice);
      v59 = v105;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v105 + 56))(v9, 0, 1, v10);
      sub_1000126B0((uint64_t)v17, type metadata accessor for BluetoothManagerDevice);
      v60 = (*(uint64_t (**)(char *, uint64_t, int *))(v59 + 48))(v9, 1, v10);
      v24 = v99;
      if (v60 != 1)
      {
        v61 = (uint64_t)v94;
        sub_1000126EC((uint64_t)v9, (uint64_t)v94, type metadata accessor for BluetoothManagerDevice);
        sub_1000126EC(v61, v97, type metadata accessor for BluetoothManagerDevice);
        if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) != 0)
          v62 = (unint64_t)v98;
        else
          v62 = sub_1007C9120(0, v98[2] + 1, 1, (unint64_t)v98);
        v64 = *(_QWORD *)(v62 + 16);
        v63 = *(_QWORD *)(v62 + 24);
        if (v64 >= v63 >> 1)
          v62 = sub_1007C9120(v63 > 1, v64 + 1, 1, v62);
        *(_QWORD *)(v62 + 16) = v64 + 1;
        v65 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
        v98 = (_QWORD *)v62;
        sub_1000126EC(v97, v62 + v65 + *(_QWORD *)(v105 + 72) * v64, type metadata accessor for BluetoothManagerDevice);
        v24 = v99;
        goto LABEL_11;
      }
LABEL_10:
      sub_100004048((uint64_t)v9, &qword_1010F5D00);
LABEL_11:
      if (v25 == ++v26)
        goto LABEL_41;
    }

LABEL_9:
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v105 + 56))(v9, 1, 1, v10);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t sub_1002CAD74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002CADFC, 0, 0);
}

uint64_t sub_1002CADFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = *(_QWORD *)(v0[3] + 16);
  v4 = (char *)&dword_1010F5D20 + dword_1010F5D20;
  v2 = (_QWORD *)swift_task_alloc(unk_1010F5D24);
  v0[9] = v2;
  *v2 = v0;
  v2[1] = sub_1002CAE6C;
  return ((uint64_t (*)(_QWORD, uint64_t))v4)(v0[2], v1);
}

uint64_t sub_1002CAE6C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_BYTE *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002CAEC8, 0, 0);
}

uint64_t sub_1002CAEC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  if (*(_BYTE *)(v0 + 104) == 1)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6CA8);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "isPairingPending: standalone pairing is required.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = (_QWORD *)swift_task_alloc(dword_1010F5964);
    *(_QWORD *)(v0 + 80) = v6;
    *v6 = v0;
    v6[1] = sub_1002CB054;
    return sub_1002CBCF4(*(_QWORD *)(v0 + 16));
  }
  else
  {
    v9 = *(void **)(v0 + 16);
    v8 = *(_QWORD *)(v0 + 24);
    v10 = swift_allocObject(&unk_101066AF8, 32, 7);
    *(_QWORD *)(v0 + 88) = v10;
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v12 = v9;
    v13 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 96) = v13;
    *v13 = v0;
    v13[1] = sub_1002CB0B4;
    return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 40), sub_1002DCA84, v10, *(_QWORD *)(v0 + 32));
  }
}

uint64_t sub_1002CB054(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *v1;
  v7 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 80));
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v3 + 40);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v7 + 8))(a1);
}

uint64_t sub_1002CB0B4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_1002CB110, 0, 0);
}

uint64_t sub_1002CB110()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 48))(v1, 1, *(_QWORD *)(v0 + 48)) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010FF7F0);
    v2 = 1;
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 64);
    sub_1000126EC(v1, v3, type metadata accessor for OwnedBeaconGroup);
    v2 = sub_1003690A8() ^ 1;
    sub_1000126B0(v3, type metadata accessor for OwnedBeaconGroup);
  }
  v4 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v2 & 1);
}

uint64_t sub_1002CB1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v3[11] = v4;
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v3[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[14] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[15] = swift_task_alloc(v7);
  v3[16] = swift_task_alloc(v7);
  v8 = type metadata accessor for Logger(0);
  v3[17] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[18] = v9;
  v3[19] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002CB288, 0, 0);
}

id sub_1002CB288()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  char v3;
  void *v4;
  id result;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  id v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  v3 = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((v3 & 1) == 0)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v22 = sub_10001A9E8(*(_QWORD *)(v0 + 136), (uint64_t)qword_1011B7DF8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requires standalone pairing [false], feature disabled.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    goto LABEL_26;
  }
  v4 = (void *)objc_opt_self(ACAccountStore);
  result = objc_msgSend(v4, "defaultStore");
  if (!result)
  {
    __break(1u);
    goto LABEL_28;
  }
  v6 = result;
  v7 = objc_msgSend(result, "aa_primaryAppleAccount");

  if (!v7)
    goto LABEL_7;

  result = objc_msgSend(v4, "defaultStore");
  if (!result)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = result;
  v9 = objc_msgSend(result, "aa_primaryAppleAccount");

  if (!v9 || (v10 = sub_10036202C(), v9, v10 != (id)2))
  {
    v26 = sub_1007FDEC4();
    *(_QWORD *)(v0 + 160) = v26;
    v27 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 168) = v27;
    *v27 = v0;
    v27[1] = sub_1002CB724;
    return (id)withCheckedContinuation<A>(isolation:function:_:)(v0 + 200, 0, 0, 0xD000000000000014, 0x8000000100ECF730, sub_1002DCAAC, v26, &type metadata for Bool);
  }
LABEL_7:
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7DF8);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (!os_log_type_enabled(v16, v17))
    goto LABEL_25;
  v18 = swift_slowAlloc(14, -1);
  *(_DWORD *)v18 = 67109376;
  result = objc_msgSend(v4, "defaultStore");
  if (!result)
    goto LABEL_29;
  v19 = result;
  v20 = objc_msgSend(result, "aa_primaryAppleAccount");

  if (v20)
  {

    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  *(_DWORD *)(v0 + 192) = v21;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 196, v18 + 4, v18 + 8);
  *(_WORD *)(v18 + 8) = 1024;
  result = objc_msgSend(v4, "defaultStore");
  if (result)
  {
    v28 = result;
    v29 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v29)
    {
      v30 = sub_10036202C();

      v31 = v30 == (id)2;
    }
    else
    {
      v31 = 0;
    }
    *(_DWORD *)(v0 + 196) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 196, v0 + 200, v18 + 10, v18 + 14);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Requires standalone pairing [true] isiCloudSignedIn: %{BOOL}d isiCloudAccountStandard %{BOOL}d.", (uint8_t *)v18, 0xEu);
    swift_slowDealloc(v18, -1, -1);
LABEL_25:
    v33 = *(_QWORD *)(v0 + 144);
    v32 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 136);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
LABEL_26:
    v36 = *(_QWORD *)(v0 + 120);
    v35 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (id)(*(uint64_t (**)(_QWORD))(v0 + 8))(v3 & 1);
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1002CB724()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_1002CB778, 0, 0);
}

uint64_t sub_1002CB778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  swift_release();
  if (*(_BYTE *)(v0 + 200) == 1)
  {
    v1 = *(_QWORD *)(v0 + 72);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(void **)(v0 + 64);
    v4 = (_QWORD *)swift_allocObject(&unk_101066B20, 40, 7);
    *(_QWORD *)(v0 + 176) = v4;
    v4[2] = v2;
    v4[3] = v3;
    v4[4] = v1;
    v5 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v6 = v3;
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 184) = v7;
    *v7 = v0;
    v7[1] = sub_1002CB92C;
    return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 96), sub_1002DCAC0, v4, *(_QWORD *)(v0 + 88));
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v9 = sub_10001A9E8(*(_QWORD *)(v0 + 136), (uint64_t)qword_1011B7DF8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Requires standalone pairing [true], manatee is not available.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

uint64_t sub_1002CB92C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_1002CB988, 0, 0);
}

uint64_t sub_1002CB988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_1010FF7F0);
LABEL_5:
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 136), (uint64_t)qword_1011B7DF8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Requires standalone pairing [false] group not found, isFindMyNetworkEnabled: true (default).", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v0 + 128);
  sub_1000126EC(v2, v3, type metadata accessor for OwnedBeaconGroup);
  if ((*(_BYTE *)(v3 + *(int *)(v1 + 32)) & 1) != 0)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 128), type metadata accessor for OwnedBeaconGroup);
    goto LABEL_5;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v13 = *(_QWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 120);
  sub_10001A9E8(*(_QWORD *)(v0 + 136), (uint64_t)qword_1011B7DF8);
  v15 = sub_10005972C(v13, v14, type metadata accessor for OwnedBeaconGroup);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  if (v18)
  {
    v27 = *(_QWORD *)(v0 + 128);
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v28 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = type metadata accessor for UUID(0);
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    *(_QWORD *)(v0 + 56) = sub_100016940(v25, v26, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Requires standalone pairing [true] group: %{public}s, isFindMyNetworkEnabled: false.", v21, 0xCu);
    v8 = 1;
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    sub_1000126B0(v27, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {

    sub_1000126B0(v20, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0(v19, type metadata accessor for OwnedBeaconGroup);
    v8 = 1;
  }
LABEL_10:
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_1002CBCF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[25] = a1;
  v2[26] = v1;
  v3 = type metadata accessor for MACAddress(0);
  v2[27] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[28] = v4;
  v2[29] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F5D08);
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[31] = swift_task_alloc(v6);
  v2[32] = swift_task_alloc(v6);
  v2[33] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002CBDB4, 0, 0);
}

uint64_t sub_1002CBDB4()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  id *v22;
  _QWORD *v23;
  uint64_t (*v24)(void);

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  v3 = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((v3 & 1) == 0)
  {
LABEL_10:
    v16 = *(_QWORD *)(v0 + 256);
    v18 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(BOOL))(v0 + 8))((v3 & 1) == 0);
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6CA8);
  *(_QWORD *)(v0 + 272) = v5;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking standalone beacons...", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD **)(v0 + 240);
  v10 = *(_QWORD *)(v0 + 200);

  sub_1002C6020(v10, v9);
  v11 = sub_10001A9A8(&qword_1010F5D10);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) == 1)
  {
    v12 = sub_100004048(*(_QWORD *)(v0 + 240), &qword_1010F5D08);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to sanitize MAC address for pairing pending check", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    goto LABEL_10;
  }
  v21 = *(_QWORD *)(v0 + 264);
  v22 = *(id **)(v0 + 240);

  sub_1000126EC((uint64_t)v22 + *(int *)(v11 + 48), v21, type metadata accessor for BluetoothManagerDevice);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v24 = (uint64_t (*)(void))((char *)&dword_1010EBC70 + dword_1010EBC70);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 280) = v23;
    *v23 = v0;
    v23[1] = sub_1002CC114;
    return v24();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002CC114(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002CC170, 0, 0);
}

uint64_t sub_1002CC170()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 288))
  {
    v2 = *(_QWORD *)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 224);
    v3 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    return swift_task_switch(sub_1002CC2B0, *(_QWORD *)(v0 + 288), 0);
  }
  else
  {
    v7 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing StandaloneBeaconService!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 264);

    sub_1000126B0(v11, type metadata accessor for BluetoothManagerDevice);
    v12 = *(_QWORD *)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1002CC2B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100B8AEE0(v0[29], *(_QWORD *)(v0[36] + 128));
  v0[37] = 0;
  v3 = v0[28];
  v2 = v0[29];
  v4 = v0[27];
  v0[38] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1002CC358, 0, 0);
}

uint64_t sub_1002CC358()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  sub_10005972C(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 256), type metadata accessor for BluetoothManagerDevice);
  v1 = swift_retain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 304);
    v5 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 216);
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 134218242;
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v4 + 16);
    v20 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v7 + 4, v7 + 12);
    swift_release();
    *(_WORD *)(v7 + 12) = 2082;
    v9 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v6, v9);
    *(_QWORD *)(v0 + 192) = sub_100016940(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v5, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found %ld existing standlone beacons matching %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 256);
    swift_release();
    sub_1000126B0(v12, type metadata accessor for BluetoothManagerDevice);
  }
  swift_release();

  v13 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 16);
  swift_release();
  sub_1000126B0(v13, type metadata accessor for BluetoothManagerDevice);
  v15 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v14 == 0);
}

uint64_t sub_1002CC5AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 296);
  sub_10005972C(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248), type metadata accessor for BluetoothManagerDevice);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v26 = v9;
    *(_DWORD *)v8 = 136446466;
    v10 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
    *(_QWORD *)(v0 + 160) = sub_100016940(v11, v12, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v6, type metadata accessor for BluetoothManagerDevice);
    *(_WORD *)(v8 + 12) = 2082;
    *(_QWORD *)(v0 + 168) = v5;
    swift_errorRetain(v5);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v14 = String.init<A>(describing:)(v0 + 168, v13);
    *(_QWORD *)(v0 + 176) = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to retrieve standalone beacons for %{public}s. %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();

    swift_errorRelease(v5);
    v16 = v25;
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 296);
    v18 = *(_QWORD *)(v0 + 264);
    v19 = *(_QWORD *)(v0 + 248);

    swift_release();
    swift_errorRelease(v17);
    swift_errorRelease(v17);
    sub_1000126B0(v19, type metadata accessor for BluetoothManagerDevice);
    swift_errorRelease(v17);
    v16 = v18;
  }
  sub_1000126B0(v16, type metadata accessor for BluetoothManagerDevice);
  v20 = *(_QWORD *)(v0 + 256);
  v22 = *(_QWORD *)(v0 + 240);
  v21 = *(_QWORD *)(v0 + 248);
  v23 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1002CC864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  size_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int EnumCaseMultiPayload;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  size_t v96;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t (*v131)(uint64_t);
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  size_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  size_t v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  os_log_type_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t (*v194)(uint64_t);
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint8_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  uint64_t v212;
  NSObject *v213;
  os_log_type_t v214;
  uint8_t *v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint8_t *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  unint64_t v238;
  char *v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  char *v251;
  __int128 v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char v260[8];

  v3 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v3);
  v224 = (uint64_t)&v221 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v246 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v231 = (char *)&v221 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v247 = (uint64_t)&v221 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v221 - v11;
  v13 = __chkstk_darwin(v10);
  v237 = (char *)&v221 - v14;
  v15 = __chkstk_darwin(v13);
  v254 = (char *)&v221 - v16;
  v17 = __chkstk_darwin(v15);
  v253 = (char *)&v221 - v18;
  v19 = __chkstk_darwin(v17);
  v249 = (char *)&v221 - v20;
  v21 = __chkstk_darwin(v19);
  v248 = (char *)&v221 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v221 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v221 - v27;
  __chkstk_darwin(v26);
  v30 = (char *)&v221 - v29;
  v244 = type metadata accessor for OwnedBeaconGroup(0);
  v234 = *(_QWORD *)(v244 - 8);
  v31 = __chkstk_darwin(v244);
  v225 = (uint64_t)&v221 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v31);
  v223 = (uint64_t)&v221 - v34;
  v35 = __chkstk_darwin(v33);
  v236 = (uint64_t)&v221 - v36;
  v37 = __chkstk_darwin(v35);
  v243 = (uint64_t)&v221 - v38;
  v39 = __chkstk_darwin(v37);
  v230 = (uint64_t)&v221 - v40;
  v41 = __chkstk_darwin(v39);
  v233 = (uint64_t)&v221 - v42;
  __chkstk_darwin(v41);
  *(_QWORD *)&v245 = (char *)&v221 - v43;
  v44 = sub_10001A9A8(&qword_1010F5D08);
  __chkstk_darwin(v44);
  v46 = (id *)((char *)&v221 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = type metadata accessor for BluetoothManagerDevice(0);
  v48 = __chkstk_darwin(v47);
  v50 = (char *)&v221 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = __chkstk_darwin(v48);
  v222 = (uint64_t)&v221 - v52;
  __chkstk_darwin(v51);
  v54 = (char *)&v221 - v53;
  sub_1002C6020(a1, v46);
  v55 = sub_10001A9A8(&qword_1010F5D10);
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v46, 1, v55) == 1)
  {
    sub_100004048((uint64_t)v46, &qword_1010F5D08);
    if (qword_1010E9B08 == -1)
    {
LABEL_3:
      v56 = type metadata accessor for Logger(0);
      v57 = sub_10001A9E8(v56, (uint64_t)qword_1011B6CA8);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.error.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v60 = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unable to sanitize MAC address for beacon group cleanup", v60, 2u);
        swift_slowDealloc(v60, -1, -1);
      }

      return;
    }
LABEL_155:
    swift_once(&qword_1010E9B08, sub_1002B4720);
    goto LABEL_3;
  }

  sub_1000126EC((uint64_t)v46 + *(int *)(v55 + 48), (uint64_t)v54, type metadata accessor for BluetoothManagerDevice);
  v61 = *(_QWORD *)(v1 + 16);
  v221 = v54;
  v232 = v61;
  v62 = sub_10081F8E8((uint64_t)v54);
  v63 = v62;
  v242 = *(_QWORD *)(v62 + 16);
  if (v242 >= 2)
  {
    v64 = 0;
    v259 = (uint64_t)_swiftEmptyArrayStorage;
    v226 = v28 + 2;
    v251 = v12;
    *(_QWORD *)&v252 = v5;
    v241 = v62;
    while (1)
    {
      if (v64 >= *(_QWORD *)(v63 + 16))
      {
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
        goto LABEL_155;
      }
      v67 = *(_QWORD *)(v234 + 72);
      v240 = (*(unsigned __int8 *)(v234 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80);
      v250 = v67;
      v238 = v63 + v240;
      v239 = (char *)v64;
      v68 = v245;
      sub_10005972C(v63 + v240 + v67 * v64, v245, type metadata accessor for OwnedBeaconGroup);
      v69 = *(_QWORD *)(v68 + *(int *)(v244 + 40));
      v70 = *(_QWORD *)(v69 + 16);
      if (*(_BYTE *)(v68 + *(int *)(v244 + 32)) == 1)
      {
        if (v70)
        {
          v71 = sub_10001A9A8(&qword_1010F5D18);
          v72 = *(_QWORD *)(v246 + 72);
          v73 = *(unsigned __int8 *)(v246 + 80);
          v74 = (v73 + 32) & ~v73;
          v75 = (_QWORD *)swift_allocObject(v71, v74 + v72 * v70, v73 | 7);
          v76 = j__malloc_size(v75);
          if (!v72)
            goto LABEL_144;
          v77 = v76 - v74 == 0x8000000000000000 && v72 == -1;
          if (v77)
            goto LABEL_152;
          v75[2] = v70;
          v75[3] = 2 * ((uint64_t)(v76 - v74) / v72);
          v235 = sub_100509D04(&v255, (uint64_t)v75 + v74, v70, v69);
          v78 = v255;
          v229 = v256;
          v228 = v257;
          v227 = v258;
          swift_bridgeObjectRetain_n(v69, 2);
          sub_10007CC38(v78);
          if (v235 != v70)
            goto LABEL_145;
          swift_bridgeObjectRelease();
          v79 = v75[2];
          if (v79)
          {
LABEL_21:
            v80 = v246;
            v81 = (uint64_t)v75
                + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80));
            v235 = (uint64_t)v75;
            swift_retain();
            v82 = *(_QWORD *)(v80 + 72);
            while (1)
            {
              sub_10005972C(v81, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup.PairingState);
              v83 = (uint64_t)v25;
              v84 = (uint64_t)v25;
              v85 = (uint64_t)v248;
              sub_10005972C(v83, (uint64_t)v248, type metadata accessor for OwnedBeaconGroup.PairingState);
              EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v85, v5);
              sub_1000126B0(v85, type metadata accessor for OwnedBeaconGroup.PairingState);
              v87 = (uint64_t)v249;
              sub_10005972C(v84, (uint64_t)v249, type metadata accessor for OwnedBeaconGroup.PairingState);
              if (!EnumCaseMultiPayload)
              {
                sub_1000126B0(v87, type metadata accessor for OwnedBeaconGroup.PairingState);
                sub_1000126B0(v84, type metadata accessor for OwnedBeaconGroup.PairingState);
                v12 = v251;
                v25 = (char *)v84;
                goto LABEL_48;
              }
              v88 = v5;
              v89 = (uint64_t)v253;
              swift_storeEnumTagMultiPayload(v253, v88, 2);
              v90 = sub_1003739B0(v87, v89);
              sub_1000126B0(v89, type metadata accessor for OwnedBeaconGroup.PairingState);
              sub_1000126B0(v87, type metadata accessor for OwnedBeaconGroup.PairingState);
              sub_1000126B0(v84, type metadata accessor for OwnedBeaconGroup.PairingState);
              v25 = (char *)v84;
              if ((v90 & 1) != 0)
                break;
              v81 += v82;
              --v79;
              v5 = v252;
              if (!v79)
              {
                swift_release_n(v235, 2);
                v12 = v251;
                goto LABEL_9;
              }
            }
            v12 = v251;
            v5 = v252;
LABEL_48:
            swift_release_n(v235, 2);
            sub_1000126EC(v245, v230, type metadata accessor for OwnedBeaconGroup);
            v106 = v259;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v259);
            v65 = v237;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_10009AD0C(0, *(_QWORD *)(v106 + 16) + 1, 1);
              v106 = v259;
            }
            v109 = *(_QWORD *)(v106 + 16);
            v108 = *(_QWORD *)(v106 + 24);
            if (v109 >= v108 >> 1)
            {
              sub_10009AD0C(v108 > 1, v109 + 1, 1);
              v106 = v259;
            }
            *(_QWORD *)(v106 + 16) = v109 + 1;
            sub_1000126EC(v230, v106 + v240 + v109 * v250, type metadata accessor for OwnedBeaconGroup);
            goto LABEL_10;
          }
        }
        else
        {
          v75 = _swiftEmptyArrayStorage;
          v79 = _swiftEmptyArrayStorage[2];
          if (v79)
            goto LABEL_21;
        }
        swift_release();
        v12 = v251;
      }
      else
      {
        if (v70)
        {
          v91 = sub_10001A9A8(&qword_1010F5D18);
          v92 = *(_QWORD *)(v246 + 72);
          v93 = *(unsigned __int8 *)(v246 + 80);
          v94 = (v93 + 32) & ~v93;
          v95 = (_QWORD *)swift_allocObject(v91, v94 + v92 * v70, v93 | 7);
          v96 = j__malloc_size(v95);
          if (!v92)
            goto LABEL_143;
          if (v96 - v94 == 0x8000000000000000 && v92 == -1)
            goto LABEL_151;
          v95[2] = v70;
          v95[3] = 2 * ((uint64_t)(v96 - v94) / v92);
          v235 = sub_100509D04(&v255, (uint64_t)v95 + v94, v70, v69);
          v98 = v255;
          v229 = v256;
          v228 = v257;
          v227 = v258;
          swift_bridgeObjectRetain_n(v69, 2);
          sub_10007CC38(v98);
          if (v235 != v70)
            goto LABEL_146;
          swift_bridgeObjectRelease();
          v12 = v251;
        }
        else
        {
          v95 = _swiftEmptyArrayStorage;
        }
        v99 = v95[2];
        v100 = v95;
        v101 = v226;
        if (v99)
        {
          v102 = v246;
          v103 = (uint64_t)v100
               + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80));
          v235 = (uint64_t)v100;
          swift_retain();
          v104 = *(_QWORD *)(v102 + 72);
          do
          {
            sub_10005972C(v103, (uint64_t)v30, type metadata accessor for OwnedBeaconGroup.PairingState);
            sub_10005972C((uint64_t)v30, (uint64_t)v28, type metadata accessor for OwnedBeaconGroup.PairingState);
            if (swift_getEnumCaseMultiPayload(v28, v5))
            {
              sub_1000126B0((uint64_t)v28, type metadata accessor for OwnedBeaconGroup.PairingState);
              sub_1000126B0((uint64_t)v30, type metadata accessor for OwnedBeaconGroup.PairingState);
            }
            else
            {
              v105 = v101[*(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48)];
              sub_100004048((uint64_t)v28, (uint64_t *)&unk_1010F9890);
              sub_1000126B0((uint64_t)v30, type metadata accessor for OwnedBeaconGroup.PairingState);
              v77 = v105 == 2;
              v12 = v251;
              if (v77)
                goto LABEL_48;
            }
            v103 += v104;
            --v99;
          }
          while (v99);
          swift_release_n(v235, 2);
        }
        else
        {
          swift_release();
        }
      }
LABEL_9:
      sub_1000126B0(v245, type metadata accessor for OwnedBeaconGroup);
      v65 = v237;
LABEL_10:
      v66 = (uint64_t)v254;
      v63 = v241;
      v64 = (unint64_t)(v239 + 1);
      if (v239 + 1 == (char *)v242)
      {
        v122 = *(_QWORD *)(v259 + 16);
        if (v122)
        {
          v123 = v259 + v240;
          v124 = qword_1010EA318;
          v235 = v259;
          swift_retain();
          if (v124 != -1)
            swift_once(&qword_1010EA318, sub_100B5E330);
          v125 = type metadata accessor for Logger(0);
          v248 = v260;
          v249 = (char *)v125;
          v126 = type metadata accessor for OwnedBeaconGroup;
          *(_QWORD *)&v127 = 136315138;
          v245 = v127;
          v239 = (char *)&type metadata for Any + 8;
          v128 = v233;
          do
          {
            sub_10001A9E8((uint64_t)v249, (uint64_t)qword_1011B7DF8);
            v129 = sub_10005972C(v123, v128, v126);
            v130 = Logger.logObject.getter(v129);
            v131 = v126;
            v132 = static os_log_type_t.default.getter(v130);
            if (os_log_type_enabled(v130, v132))
            {
              v133 = (uint8_t *)swift_slowAlloc(12, -1);
              v134 = swift_slowAlloc(32, -1);
              v255 = v134;
              *(_DWORD *)v133 = v245;
              v135 = sub_10036F350();
              v259 = sub_100016940(v135, v136, &v255);
              v12 = v251;
              v66 = (uint64_t)v254;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v248, v133 + 4, v133 + 12);
              swift_bridgeObjectRelease();
              v131 = type metadata accessor for OwnedBeaconGroup;
              sub_1000126B0(v233, type metadata accessor for OwnedBeaconGroup);
              _os_log_impl((void *)&_mh_execute_header, v130, v132, "Clean up incomplete beacon group %s", v133, 0xCu);
              swift_arrayDestroy(v134, 1, v239);
              v137 = v134;
              v128 = v233;
              swift_slowDealloc(v137, -1, -1);
              v138 = v133;
              v65 = v237;
              swift_slowDealloc(v138, -1, -1);
            }
            else
            {
              sub_1000126B0(v128, v131);
            }

            v126 = v131;
            sub_1008E7B10(v123);
            v123 += v250;
            --v122;
          }
          while (v122);
          swift_release_n(v235, 2);
          v63 = v241;
        }
        else
        {
          swift_release();
        }
        v139 = 0;
        v259 = (uint64_t)_swiftEmptyArrayStorage;
        v249 = v65 + 2;
        v140 = (uint64_t)v231;
        while (1)
        {
          if (v139 >= *(_QWORD *)(v63 + 16))
            goto LABEL_142;
          v248 = (char *)v139;
          v141 = v243;
          sub_10005972C(v238 + v250 * v139, v243, type metadata accessor for OwnedBeaconGroup);
          v142 = *(_QWORD *)(v141 + *(int *)(v244 + 40));
          v143 = *(_QWORD *)(v142 + 16);
          if (*(_BYTE *)(v141 + *(int *)(v244 + 32)) == 1)
          {
            if (v143)
            {
              v144 = sub_10001A9A8(&qword_1010F5D18);
              v145 = *(_QWORD *)(v246 + 72);
              v146 = *(unsigned __int8 *)(v246 + 80);
              v147 = (v146 + 32) & ~v146;
              v148 = (_QWORD *)swift_allocObject(v144, v147 + v145 * v143, v146 | 7);
              v149 = j__malloc_size(v148);
              if (!v145)
                goto LABEL_148;
              if (v149 - v147 == 0x8000000000000000 && v145 == -1)
                goto LABEL_154;
              v148[2] = v143;
              v148[3] = 2 * ((uint64_t)(v149 - v147) / v145);
              *(_QWORD *)&v245 = sub_100509D04(&v255, (uint64_t)v148 + v147, v143, v142);
              v151 = v255;
              swift_bridgeObjectRetain_n(v142, 2);
              sub_10007CC38(v151);
              if ((_QWORD)v245 != v143)
                goto LABEL_149;
              swift_bridgeObjectRelease();
              v140 = (uint64_t)v231;
              v12 = v251;
              v66 = (uint64_t)v254;
              v152 = v148[2];
              if (v152)
              {
LABEL_82:
                v153 = v246;
                v154 = (uint64_t)v148
                     + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80));
                swift_retain();
                v155 = *(_QWORD *)(v153 + 72);
                while (1)
                {
                  sub_10005972C(v154, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
                  v156 = v247;
                  sub_10005972C((uint64_t)v12, v247, type metadata accessor for OwnedBeaconGroup.PairingState);
                  v157 = swift_getEnumCaseMultiPayload(v156, v5);
                  sub_1000126B0(v156, type metadata accessor for OwnedBeaconGroup.PairingState);
                  sub_10005972C((uint64_t)v12, v140, type metadata accessor for OwnedBeaconGroup.PairingState);
                  if (!v157)
                  {
                    sub_1000126B0(v140, type metadata accessor for OwnedBeaconGroup.PairingState);
                    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
                    v66 = (uint64_t)v254;
                    goto LABEL_70;
                  }
                  v158 = v5;
                  v159 = (uint64_t)v253;
                  swift_storeEnumTagMultiPayload(v253, v158, 2);
                  v160 = sub_1003739B0(v140, v159);
                  sub_1000126B0(v159, type metadata accessor for OwnedBeaconGroup.PairingState);
                  sub_1000126B0(v140, type metadata accessor for OwnedBeaconGroup.PairingState);
                  sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
                  if ((v160 & 1) != 0)
                    break;
                  v154 += v155;
                  --v152;
                  v5 = v252;
                  if (!v152)
                  {
                    swift_release_n(v148, 2);
                    v66 = (uint64_t)v254;
                    goto LABEL_108;
                  }
                }
                v66 = (uint64_t)v254;
                v5 = v252;
LABEL_70:
                swift_release_n(v148, 2);
                sub_1000126B0(v243, type metadata accessor for OwnedBeaconGroup);
                goto LABEL_71;
              }
            }
            else
            {
              v148 = _swiftEmptyArrayStorage;
              v152 = _swiftEmptyArrayStorage[2];
              if (v152)
                goto LABEL_82;
            }
          }
          else
          {
            if (v143)
            {
              v161 = sub_10001A9A8(&qword_1010F5D18);
              v162 = *(_QWORD *)(v246 + 72);
              v163 = *(unsigned __int8 *)(v246 + 80);
              v164 = (v163 + 32) & ~v163;
              v148 = (_QWORD *)swift_allocObject(v161, v164 + v162 * v143, v163 | 7);
              v165 = j__malloc_size(v148);
              if (!v162)
                goto LABEL_147;
              if (v165 - v164 == 0x8000000000000000 && v162 == -1)
                goto LABEL_153;
              v148[2] = v143;
              v148[3] = 2 * ((uint64_t)(v165 - v164) / v162);
              *(_QWORD *)&v245 = sub_100509D04(&v255, (uint64_t)v148 + v164, v143, v142);
              v167 = v255;
              swift_bridgeObjectRetain_n(v142, 2);
              sub_10007CC38(v167);
              if ((_QWORD)v245 != v143)
                goto LABEL_150;
              swift_bridgeObjectRelease();
              v140 = (uint64_t)v231;
              v12 = v251;
              v66 = (uint64_t)v254;
            }
            else
            {
              v148 = _swiftEmptyArrayStorage;
            }
            v168 = v148[2];
            v169 = (uint64_t)v237;
            if (v168)
            {
              v170 = v246;
              v171 = (uint64_t)v148
                   + ((*(unsigned __int8 *)(v246 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80));
              swift_retain();
              v172 = *(_QWORD *)(v170 + 72);
              do
              {
                sub_10005972C(v171, v66, type metadata accessor for OwnedBeaconGroup.PairingState);
                sub_10005972C(v66, v169, type metadata accessor for OwnedBeaconGroup.PairingState);
                if (swift_getEnumCaseMultiPayload(v169, v5))
                {
                  sub_1000126B0(v169, type metadata accessor for OwnedBeaconGroup.PairingState);
                  sub_1000126B0(v66, type metadata accessor for OwnedBeaconGroup.PairingState);
                }
                else
                {
                  v173 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
                  v174 = v249[*(int *)(v173 + 48)];
                  sub_100004048(v169, (uint64_t *)&unk_1010F9890);
                  sub_1000126B0((uint64_t)v254, type metadata accessor for OwnedBeaconGroup.PairingState);
                  v77 = v174 == 2;
                  v66 = (uint64_t)v254;
                  if (v77)
                    goto LABEL_70;
                }
                v171 += v172;
                --v168;
              }
              while (v168);
              swift_release_n(v148, 2);
              goto LABEL_108;
            }
          }
          swift_release();
LABEL_108:
          sub_1000126EC(v243, v236, type metadata accessor for OwnedBeaconGroup);
          v175 = v259;
          if ((swift_isUniquelyReferenced_nonNull_native(v259) & 1) == 0)
          {
            sub_10009AD0C(0, *(_QWORD *)(v175 + 16) + 1, 1);
            v175 = v259;
          }
          v177 = *(_QWORD *)(v175 + 16);
          v176 = *(_QWORD *)(v175 + 24);
          if (v177 >= v176 >> 1)
          {
            sub_10009AD0C(v176 > 1, v177 + 1, 1);
            v175 = v259;
          }
          *(_QWORD *)(v175 + 16) = v177 + 1;
          sub_1000126EC(v236, v175 + v240 + v177 * v250, type metadata accessor for OwnedBeaconGroup);
LABEL_71:
          v139 = (unint64_t)(v248 + 1);
          v63 = v241;
          if (v248 + 1 == (char *)v242)
          {
            swift_bridgeObjectRelease();
            v178 = v259;
            if (*(_QWORD *)(v259 + 16) > 1uLL)
            {
              v255 = v259;
              swift_bridgeObjectRetain(v259);
              sub_1002D6E8C(&v255, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t))sub_10088F178, sub_1002D6F1C);
              v179 = v225;
              if (*(_QWORD *)(v255 + 16))
              {
                v180 = v224;
                sub_10005972C(v255 + v240, v224, type metadata accessor for OwnedBeaconGroup);
                v181 = 0;
              }
              else
              {
                v181 = 1;
                v180 = v224;
              }
              v195 = v234;
              v196 = v244;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v234 + 56))(v180, v181, 1, v244);
              swift_release();
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v180, 1, v196) == 1)
              {
                swift_release();
                sub_100004048(v180, (uint64_t *)&unk_1010FF7F0);
                v197 = (uint64_t)v221;
                if (qword_1010EA318 != -1)
                  swift_once(&qword_1010EA318, sub_100B5E330);
                v198 = type metadata accessor for Logger(0);
                v199 = sub_10001A9E8(v198, (uint64_t)qword_1011B7DF8);
                v200 = Logger.logObject.getter(v199);
                v201 = static os_log_type_t.error.getter(v200);
                if (os_log_type_enabled(v200, v201))
                {
                  v202 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v202 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v200, v201, "Unable to extract the most recent beacon group!", v202, 2u);
                  v203 = v202;
                  v197 = (uint64_t)v221;
                  swift_slowDealloc(v203, -1, -1);
                }

                v194 = type metadata accessor for BluetoothManagerDevice;
                v121 = v197;
              }
              else
              {
                v204 = v180;
                v205 = v223;
                v206 = sub_1000126EC(v204, v223, type metadata accessor for OwnedBeaconGroup);
                __chkstk_darwin(v206);
                *(&v221 - 2) = (char *)v205;
                v207 = sub_10008B7E8((uint64_t (*)(char *))sub_1002DCA64, (unint64_t *)&v221 - 4, v178);
                v208 = *(_QWORD *)(v207 + 16);
                if (v208)
                {
                  v249 = (char *)v207;
                  v209 = v207 + v240;
                  if (qword_1010EA318 != -1)
                    swift_once(&qword_1010EA318, sub_100B5E330);
                  v210 = type metadata accessor for Logger(0);
                  v254 = v260;
                  *(_QWORD *)&v211 = 136315138;
                  v252 = v211;
                  v251 = (char *)&type metadata for Any + 8;
                  v253 = (char *)v210;
                  do
                  {
                    sub_10001A9E8(v210, (uint64_t)qword_1011B7DF8);
                    v212 = sub_10005972C(v209, v179, type metadata accessor for OwnedBeaconGroup);
                    v213 = Logger.logObject.getter(v212);
                    v214 = static os_log_type_t.default.getter(v213);
                    if (os_log_type_enabled(v213, v214))
                    {
                      v215 = (uint8_t *)swift_slowAlloc(12, -1);
                      v216 = swift_slowAlloc(32, -1);
                      v255 = v216;
                      *(_DWORD *)v215 = v252;
                      v217 = sub_10036F350();
                      v259 = sub_100016940(v217, v218, &v255);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v254, v215 + 4, v215 + 12);
                      swift_bridgeObjectRelease();
                      sub_1000126B0(v225, type metadata accessor for OwnedBeaconGroup);
                      _os_log_impl((void *)&_mh_execute_header, v213, v214, "Clean up older complete beacon group %s", v215, 0xCu);
                      swift_arrayDestroy(v216, 1, v251);
                      v219 = v216;
                      v179 = v225;
                      swift_slowDealloc(v219, -1, -1);
                      v220 = v215;
                      v210 = (uint64_t)v253;
                      swift_slowDealloc(v220, -1, -1);
                    }
                    else
                    {
                      sub_1000126B0(v179, type metadata accessor for OwnedBeaconGroup);
                    }

                    sub_1008E7B10(v209);
                    v209 += v250;
                    --v208;
                  }
                  while (v208);
                }
                swift_bridgeObjectRelease();
                sub_1000126B0((uint64_t)v221, type metadata accessor for BluetoothManagerDevice);
                v194 = type metadata accessor for OwnedBeaconGroup;
                v121 = v223;
              }
              goto LABEL_140;
            }
            swift_release();
            if (qword_1010EA318 != -1)
              swift_once(&qword_1010EA318, sub_100B5E330);
            v182 = type metadata accessor for Logger(0);
            sub_10001A9E8(v182, (uint64_t)qword_1011B7DF8);
            v183 = (uint64_t)v221;
            v184 = v222;
            v185 = sub_10005972C((uint64_t)v221, v222, type metadata accessor for BluetoothManagerDevice);
            v186 = Logger.logObject.getter(v185);
            v187 = static os_log_type_t.default.getter(v186);
            if (os_log_type_enabled(v186, v187))
            {
              v188 = swift_slowAlloc(22, -1);
              v189 = swift_slowAlloc(32, -1);
              v255 = v189;
              *(_DWORD *)v188 = 141558275;
              v259 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v188 + 4, v188 + 12);
              *(_WORD *)(v188 + 12) = 2081;
              v190 = type metadata accessor for MACAddress(0);
              v191 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
              v192 = dispatch thunk of CustomStringConvertible.description.getter(v190, v191);
              v259 = sub_100016940(v192, v193, &v255);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v188 + 14, v188 + 22);
              swift_bridgeObjectRelease();
              sub_1000126B0(v184, type metadata accessor for BluetoothManagerDevice);
              _os_log_impl((void *)&_mh_execute_header, v186, v187, "No more than one complete beacon group matching %{private,mask.hash}s.", (uint8_t *)v188, 0x16u);
              swift_arrayDestroy(v189, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v189, -1, -1);
              swift_slowDealloc(v188, -1, -1);

              v121 = v183;
              goto LABEL_121;
            }

            sub_1000126B0(v184, type metadata accessor for BluetoothManagerDevice);
            v121 = v183;
            goto LABEL_123;
          }
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v110 = type metadata accessor for Logger(0);
  sub_10001A9E8(v110, (uint64_t)qword_1011B7DF8);
  v111 = (uint64_t)v221;
  v112 = sub_10005972C((uint64_t)v221, (uint64_t)v50, type metadata accessor for BluetoothManagerDevice);
  v113 = Logger.logObject.getter(v112);
  v114 = static os_log_type_t.default.getter(v113);
  if (os_log_type_enabled(v113, v114))
  {
    v115 = swift_slowAlloc(22, -1);
    v116 = swift_slowAlloc(32, -1);
    v255 = v116;
    *(_DWORD *)v115 = 141558275;
    v259 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v115 + 4, v115 + 12);
    *(_WORD *)(v115 + 12) = 2081;
    v117 = type metadata accessor for MACAddress(0);
    v118 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v119 = dispatch thunk of CustomStringConvertible.description.getter(v117, v118);
    v259 = sub_100016940(v119, v120, &v255);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, v260, v115 + 14, v115 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v50, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v113, v114, "No more than one beacon group matching %{private,mask.hash}s.", (uint8_t *)v115, 0x16u);
    swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v116, -1, -1);
    swift_slowDealloc(v115, -1, -1);

    v121 = v111;
LABEL_121:
    v194 = type metadata accessor for BluetoothManagerDevice;
  }
  else
  {

    sub_1000126B0((uint64_t)v50, type metadata accessor for BluetoothManagerDevice);
    v121 = v111;
LABEL_123:
    v194 = type metadata accessor for BluetoothManagerDevice;
  }
LABEL_140:
  sub_1000126B0(v121, v194);
}

BOOL sub_1002CE2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v17 - v9;
  v11 = type metadata accessor for OwnedBeaconGroup(0);
  v12 = a1 + *(int *)(v11 + 24);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, v4);
  v13(v8, a2 + *(int *)(v11 + 24), v4);
  v14 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return (a2 & 1) == 0;
}

void sub_1002CE410(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  char *v94;
  id v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;

  v111 = a1;
  v4 = type metadata accessor for UUID(0);
  v109 = *(_QWORD *)(v4 - 8);
  v110 = v4;
  v5 = __chkstk_darwin(v4);
  v108 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v107 = (char *)&v103 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v8);
  v10 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v119 = *(_QWORD *)(v11 - 8);
  v120 = v11;
  __chkstk_darwin(v11);
  v115 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v13);
  v15 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = __chkstk_darwin(v16);
  v113 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v106 = (uint64_t)&v103 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v103 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v103 - v25;
  v27 = sub_1002B4834();
  if (v27
    && (v28 = v27, v29 = objc_msgSend(v27, "pairedDevices"), v28, v29)
    && (v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, (char *)&type metadata for Any + 8),
        v29,
        v31 = (uint64_t)sub_1003627F4(v30),
        swift_bridgeObjectRelease(),
        v31))
  {
    v116 = v31;
    if ((unint64_t)v31 >> 62)
    {
      if (v31 >= 0)
        v102 = v31 & 0xFFFFFFFFFFFFFF8;
      else
        v102 = v31;
      swift_bridgeObjectRetain(v31);
      v32 = _CocoaArrayWrapper.endIndex.getter(v102);
    }
    else
    {
      v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v31);
    }
    v103 = v2;
    v104 = a2;
    v114 = v17;
    if (v32)
    {
      v105 = v26;
      if (v32 >= 1)
      {
        v33 = 0;
        v112 = _swiftEmptyArrayStorage;
        v34 = v116;
        v117 = v116 & 0xC000000000000001;
        v118 = v32;
        while (1)
        {
          v36 = v117
              ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, v34)
              : *(id *)(v34 + 8 * v33 + 32);
          v37 = v36;
          v38 = v16[10];
          *(_QWORD *)&v24[v38] = 0;
          v39 = objc_msgSend(v36, "address", v103);
          if (!v39)
            break;
          v40 = v39;
          v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
          v43 = v42;

          MACAddress.init(string:type:)(v41, v43, 0);
          v45 = v119;
          v44 = v120;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v10, 1, v120) == 1)
          {

            sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F9890);
            v17 = v114;
            v34 = v116;
            goto LABEL_10;
          }
          v46 = v115;
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v115, v10, v44);
          *(_QWORD *)&v24[v38] = v37;
          (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v24, v46, v44);
          v47 = v37;
          v48 = objc_msgSend(v47, "name");
          if (v48)
          {
            v49 = v48;
            v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
            v52 = v51;

          }
          else
          {
            v50 = 0;
            v52 = 0xE000000000000000;
          }
          v35 = v118;
          v53 = (uint64_t *)&v24[v16[5]];
          *v53 = v50;
          v53[1] = v52;
          *(_DWORD *)&v24[v16[6]] = objc_msgSend(v47, "vendorId");
          v54 = objc_msgSend(v47, "productName");
          if (v54)
          {
            v55 = v54;
            v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
            v58 = v57;

          }
          else
          {
            v56 = 0;
            v58 = 0xE000000000000000;
          }
          v59 = (uint64_t *)&v24[v16[7]];
          *v59 = v56;
          v59[1] = v58;
          *(_DWORD *)&v24[v16[8]] = objc_msgSend(v47, "productId");
          v60 = sub_1001EE37C(objc_msgSend(v47, "vendorId"), objc_msgSend(v47, "productId"));
          v62 = v61;

          (*(void (**)(char *, uint64_t))(v119 + 8))(v115, v120);
          v63 = (uint64_t *)&v24[v16[9]];
          *v63 = v60;
          v63[1] = v62;
          sub_10005972C((uint64_t)v24, (uint64_t)v15, type metadata accessor for BluetoothManagerDevice);
          v17 = v114;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v114 + 56))(v15, 0, 1, v16);
          sub_1000126B0((uint64_t)v24, type metadata accessor for BluetoothManagerDevice);
          v64 = (*(uint64_t (**)(char *, uint64_t, int *))(v17 + 48))(v15, 1, v16);
          v34 = v116;
          if (v64 != 1)
          {
            v65 = (uint64_t)v105;
            sub_1000126EC((uint64_t)v15, (uint64_t)v105, type metadata accessor for BluetoothManagerDevice);
            sub_1000126EC(v65, v106, type metadata accessor for BluetoothManagerDevice);
            if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
              v112 = (_QWORD *)sub_1007C9120(0, v112[2] + 1, 1, (unint64_t)v112);
            v67 = v112[2];
            v66 = v112[3];
            if (v67 >= v66 >> 1)
              v112 = (_QWORD *)sub_1007C9120(v66 > 1, v67 + 1, 1, (unint64_t)v112);
            v68 = v112;
            v112[2] = v67 + 1;
            sub_1000126EC(v106, (uint64_t)v68+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v67, type metadata accessor for BluetoothManagerDevice);
            v34 = v116;
            goto LABEL_12;
          }
LABEL_11:
          sub_100004048((uint64_t)v15, &qword_1010F5D00);
LABEL_12:
          if (v35 == ++v33)
            goto LABEL_37;
        }

LABEL_10:
        (*(void (**)(char *, uint64_t, uint64_t, int *))(v17 + 56))(v15, 1, 1, v16);
        v35 = v118;
        goto LABEL_11;
      }
      __break(1u);
    }
    else
    {
      v112 = _swiftEmptyArrayStorage;
      v34 = v116;
LABEL_37:
      swift_bridgeObjectRelease_n(v34, 2);
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v74 = type metadata accessor for Logger(0);
      sub_10001A9E8(v74, (uint64_t)qword_1011B6CA8);
      v75 = v112;
      swift_bridgeObjectRetain_n(v112, 3);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.default.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = swift_slowAlloc(22, -1);
        v80 = swift_slowAlloc(32, -1);
        v123 = (char *)v80;
        *(_DWORD *)v79 = 134218242;
        v121 = v75[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v79 + 12) = 2080;
        swift_bridgeObjectRetain(v75);
        v82 = Array.description.getter(v81, v16);
        v84 = v83;
        swift_bridgeObjectRelease();
        v121 = sub_100016940(v82, v84, (uint64_t *)&v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v79 + 14, v79 + 22);
        swift_bridgeObjectRelease_n(v75, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "All paired devices [%ld]: %s", (uint8_t *)v79, 0x16u);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v75, 3);
      }
      v85 = v104;
      v86 = (uint64_t)v113;
      v87 = v75[2];
      if (v87)
      {
        v88 = (uint64_t)v75
            + ((*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80));
        v89 = *(_QWORD *)(v114 + 72);
        v119 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
        v120 = v89;
        swift_bridgeObjectRetain(v75);
        do
        {
          v90 = sub_10005972C(v88, v86, type metadata accessor for BluetoothManagerDevice);
          __chkstk_darwin(v90);
          *(&v103 - 2) = v86;
          *(&v103 - 1) = v91;
          sub_10001A9A8(&qword_101110700);
          Lock.callAsFunction<A>(_:)(sub_100245650);
          v92 = v123;
          if (v123)
          {
            v93 = objc_msgSend(*(id *)&v123[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
            v94 = v107;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);

            v95 = objc_msgSend(*(id *)(v111 + v119), "identifier");
            v96 = v108;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

            LOBYTE(v95) = static UUID.== infix(_:_:)(v94, v96);
            v97 = *(void (**)(char *, uint64_t))(v109 + 8);
            v98 = v96;
            v99 = v110;
            v97(v98, v110);
            v100 = v94;
            v86 = (uint64_t)v113;
            v97(v100, v99);
            if ((v95 & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v101 = v104;
              sub_1000126EC(v86, v104, type metadata accessor for BluetoothManagerDevice);
              (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v114 + 56))(v101, 0, 1, v16);
              goto LABEL_50;
            }
          }
          sub_1000126B0(v86, type metadata accessor for BluetoothManagerDevice);
          v88 += v120;
          --v87;
        }
        while (v87);
        swift_bridgeObjectRelease();
        v85 = v104;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v114 + 56))(v85, 1, 1, v16);
LABEL_50:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10001A9E8(v69, (uint64_t)qword_1011B6CA8);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.error.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Unable to retrieve BT paired devices!", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v17 + 56))(a2, 1, 1, v16);
  }
}

id *sub_1002CEED8()
{
  id *v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1002DFB70(v0[16]);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1002CEF84()
{
  uint64_t v0;

  sub_1002CEED8();
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for ClassicPairingSupport()
{
  return objc_opt_self(_TtC12searchpartyd21ClassicPairingSupport);
}

uint64_t storeEnumTagSinglePayload for ClassicPairingSupport.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002CF010 + 4 * byte_100E31215[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002CF044 + 4 * byte_100E31210[v4]))();
}

uint64_t sub_1002CF044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CF04C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002CF054);
  return result;
}

uint64_t sub_1002CF060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002CF068);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002CF06C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002CF074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClassicPairingSupport.Error()
{
  return &type metadata for ClassicPairingSupport.Error;
}

unint64_t sub_1002CF094()
{
  unint64_t result;

  result = qword_1010F5CE8;
  if (!qword_1010F5CE8)
  {
    result = swift_getWitnessTable("-b#", &type metadata for ClassicPairingSupport.Error);
    atomic_store(result, (unint64_t *)&qword_1010F5CE8);
  }
  return result;
}

uint64_t sub_1002CF0D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  Swift::String v3;
  id v4;
  NSString v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  _OWORD v11[2];
  _QWORD v12[4];

  _StringGuts.grow(_:)(18);
  v2 = swift_bridgeObjectRelease();
  v12[0] = 0xD000000000000010;
  v12[1] = 0x8000000100ECF680;
  v3._countAndFlagsBits = UUID.uuidString.getter(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, "valueForKey:", v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v11, v6);
    swift_unknownObjectRelease(v6);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100005CF0((uint64_t)v11, (uint64_t)v12, (uint64_t *)&unk_1010F6390);
  if (v12[3])
  {
    v7 = type metadata accessor for Date(0);
    v8 = swift_dynamicCast(a1, v12, (char *)&type metadata for Any + 8, v7, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, v8 ^ 1u, 1, v7);
  }
  else
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F6390);
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

uint64_t sub_1002CF288(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int EnumCaseMultiPayload;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t (**v74)(void);
  uint64_t (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(void);
  uint64_t (*v86)(void);
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[2];
  uint64_t v97;

  v5 = v4;
  v85 = a3;
  v86 = a4;
  v88 = a2;
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  v82 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v83 = v8;
  v84 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v9);
  v91 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v91);
  v92 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v87 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v89 = *((_QWORD *)v13 - 1);
  v14 = __chkstk_darwin(v13);
  v80 = (uint64_t)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v76 - v17;
  v79 = v19;
  __chkstk_darwin(v16);
  v81 = (uint64_t)&v76 - v20;
  v21 = *(_QWORD *)(v5 + 16);
  v22 = (_QWORD *)swift_allocObject(&unk_101066F08, 40, 7);
  v22[2] = v5;
  v22[3] = a1;
  v22[4] = v21;
  swift_retain();
  v23 = a1;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&v97, &unk_1010F5E70, v22, &type metadata for Bool);
  swift_release();
  v24 = v97;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v25 = sub_100C1B800(v97);
  result = swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
    if (v24)
    {
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6CA8);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Checking if legacy LE force pair is needed when FMN is off", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

      type metadata accessor for Transaction(0);
      v32 = swift_allocObject(&unk_101066F58, 32, 7);
      *(_QWORD *)(v32 + 16) = v5;
      *(_QWORD *)(v32 + 24) = v23;
      swift_retain();
      v33 = v23;
      static Transaction.asyncTask(name:block:)("ClassicPairingSupport.shouldForcePairStandalone", 47, 2, &unk_1010F5E78, v32);
      return swift_release();
    }
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v34 = type metadata accessor for Logger(0);
    v78 = sub_10001A9E8(v34, (uint64_t)qword_1011B6CA8);
    v35 = Logger.logObject.getter(v78);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Checking if legacy LE force pair is needed when we have a group and FMN is on", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_10036AC6C();
    v39 = v38;
    swift_retain();
    sub_10028B45C(v39);
    v41 = v40;
    swift_release();
    swift_bridgeObjectRelease();
    v42 = *(_QWORD *)(v41 + 16);
    if (v42)
    {
      v77 = v5;
      v95 = v41 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
      v43 = v41;
      v44 = (uint64_t)v92;
      v45 = *(_QWORD *)(v89 + 72);
      v93 = v92 + 8;
      v94 = v45;
      v76 = v43;
      swift_bridgeObjectRetain(v43);
      v46 = 0;
      v47 = v91;
      v90 = v42;
      while (1)
      {
        sub_10005972C(v95 + v94 * v46, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
        sub_10005972C((uint64_t)&v18[v13[6]], v44, type metadata accessor for StableIdentifier);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v44, v47);
        if (EnumCaseMultiPayload == 3)
          break;
        if (EnumCaseMultiPayload == 2)
        {
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        sub_1000126B0(v44, type metadata accessor for StableIdentifier);
LABEL_17:
        ++v46;
        sub_1000126B0((uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
        if (v46 == v42)
        {
          swift_bridgeObjectRelease();
          v5 = v77;
          goto LABEL_32;
        }
      }
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_22:
      swift_bridgeObjectRelease();
      v49 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v44, v49);
      sub_1001EE37C(*(_QWORD *)&v18[v13[16]], *(_QWORD *)&v18[v13[17]]);
      if (v50 >> 60 != 15)
      {
        v51 = v50;
        v52 = Set.init(minimumCapacity:)(1);
        v53 = static Hasher._hash(seed:_:)(*(_QWORD *)(v52 + 40), 8213);
        v54 = -1 << *(_BYTE *)(v52 + 32);
        v55 = v53 & ~v54;
        if (((*(_QWORD *)(v52 + 56 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
          goto LABEL_29;
        v56 = *(_QWORD *)(v52 + 48);
        if (*(_QWORD *)(v56 + 8 * v55) != 8213)
        {
          v57 = ~v54;
          while (1)
          {
            v55 = (v55 + 1) & v57;
            if (((*(_QWORD *)(v52 + 56 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
              break;
            if (*(_QWORD *)(v56 + 8 * v55) == 8213)
              goto LABEL_30;
          }
LABEL_29:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
          v96[0] = v52;
          sub_100A1CF0C(8213, v55, isUniquelyReferenced_nonNull_native);
          v52 = v96[0];
          swift_bridgeObjectRelease();
        }
LABEL_30:
        v97 = v52;
        sub_100A0A1F4(v96, 8216);
        sub_100A0A1F4(v96, 8220);
        __asm { BR              X10 }
      }
      goto LABEL_17;
    }
LABEL_32:
    v59 = (uint64_t)v87;
    v60 = v89;
    (*(void (**)(char *, uint64_t, uint64_t, int *))(v89 + 56))(v87, 1, 1, v13);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v60 + 48))(v59, 1, v13) == 1)
    {
      v61 = sub_100004048(v59, (uint64_t *)&unk_1010F47C0);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.default.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Not legacy LE force pairing, it's not alphawasp", v64, 2u);
        swift_slowDealloc(v64, -1, -1);
      }

      return v85();
    }
    else
    {
      v65 = v81;
      sub_1000126EC(v59, v81, type metadata accessor for OwnedBeaconRecord);
      v66 = v80;
      sub_10005972C(v65, v80, type metadata accessor for OwnedBeaconRecord);
      v67 = v84;
      sub_10005972C(v88, v84, type metadata accessor for OwnedBeaconGroup);
      v68 = *(unsigned __int8 *)(v60 + 80);
      v69 = (v68 + 24) & ~v68;
      v70 = *(unsigned __int8 *)(v82 + 80);
      v71 = (v79 + v70 + v69) & ~v70;
      v72 = (v83 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
      v73 = swift_allocObject(&unk_101066F30, v72 + 16, v68 | v70 | 7);
      *(_QWORD *)(v73 + 16) = v5;
      sub_1000126EC(v66, v73 + v69, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v67, v73 + v71, type metadata accessor for OwnedBeaconGroup);
      v74 = (uint64_t (**)(void))(v73 + v72);
      v75 = v86;
      *v74 = v85;
      v74[1] = v75;
      swift_retain();
      swift_retain();
      sub_1002D0330(v65, (void (*)(uint64_t, _QWORD))sub_1002DDFCC, v73);
      swift_release();
      return sub_1000126B0(v65, type metadata accessor for OwnedBeaconRecord);
    }
  }
  return result;
}

void sub_1002CFD30(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6CA8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting legacy LE force pairing", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  if ((a2 & 1) != 0)
  {
    v28 = a1;
    swift_errorRetain(a1);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v28, v19, &protocol self-conformance witness table for Error);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      v25 = _convertErrorToNSError(_:)(a1);
      v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v23 + 4, v23 + 12);
      *v24 = v25;
      sub_10010F948(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "legacy LE forcePair error: %@", v23, 0xCu);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      sub_10010F948(a1, 1);
    }
    else
    {
      sub_10010F948(a1, 1);
      sub_10010F948(a1, 1);

    }
  }
  else if ((a1 & 1) != 0)
  {
    sub_1002D0144(a4, a5, (uint64_t)sub_1002D0030, 0);
  }
  else
  {
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Should not legacy LE force pair", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    a6();
  }
}

void sub_1002D0030(uint64_t a1, char a2)
{
  sub_1002D0044(a1, a2, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Done legacy LE force pairing");
}

void sub_1002D0044(uint64_t a1, char a2, uint64_t (*a3)(void), const char *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  if ((a2 & 1) != 0)
  {
    v12 = a1;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v12, v6, &protocol self-conformance witness table for Error);
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6CA8);
  v9 = Logger.logObject.getter(v8);
  v10 = a3();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

}

void sub_1002D0144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1009A2594();
  if (v12 >> 60 == 15)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6CA8);
    v22 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v15, "Invalid serial number. Cannot force pair!", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  else
  {
    v17 = v11;
    v18 = v12;
    sub_1002D1344(v11, v12, a2, a3, a4);
    v19 = a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
    static Date.trustedNow.getter((uint64_t)v10);
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 0, 1, v20);
    sub_1002DB888(v19, (uint64_t)v10);
    sub_10001EF3C(v17, v18);
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010EA690);
  }
}

uint64_t sub_1002D0330(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uid_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, _QWORD);
  uint64_t v32;
  _QWORD v33[5];

  v31 = a2;
  v32 = a3;
  v30 = *v3;
  v29 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v29);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v16 - 8);
  v28 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OwnedBeaconRecord(0);
  v33[3] = v19;
  v33[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v20 = sub_100018F08(v33);
  sub_10005972C(a1, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  v21 = a1 + *(int *)(v19 + 20);
  sub_10081AECC(v21, (uint64_t)v15);
  sub_1008892B4((uint64_t)v12);
  sub_100826274((uint64_t)v18, v33, (uint64_t)v15, (uint64_t)v12);
  sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47D0);
  sub_100004048((uint64_t)v15, &qword_1010F7AE0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  sub_1002CF0D8((uint64_t)v9);
  v22 = &v6[*(int *)(v29 + 20)];
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v21, v23);
  v24 = getuid();
  sub_100A06500(v24);
  sub_1002DE064((uint64_t)v6, (uint64_t)v18, a1 + *(int *)(v19 + 32), (uint64_t)v9, v31, v32);
  sub_1000126B0((uint64_t)v6, type metadata accessor for BeaconIdentifier);
  sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v18, v28);
}

uint64_t sub_1002D05E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v8[25] = a7;
  v8[26] = a8;
  v8[23] = a5;
  v8[24] = a6;
  v8[22] = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v8[27] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[28] = v10;
  v8[29] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v8[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[31] = v12;
  v8[32] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for StandaloneBeacon(0);
  v8[33] = v13;
  v8[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[35] = swift_task_alloc(v14);
  v8[36] = swift_task_alloc(v14);
  v15 = type metadata accessor for Date(0);
  v8[37] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[38] = v16;
  v8[39] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeaconIdentifier(0);
  v8[40] = v17;
  v18 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[41] = swift_task_alloc(v18);
  v8[42] = swift_task_alloc(v18);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F0F00) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[43] = swift_task_alloc(v19);
  v8[44] = swift_task_alloc(v19);
  return swift_task_switch(sub_1002D075C, 0, 0);
}

uint64_t sub_1002D075C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 144, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 360) = v2;
    *v2 = v0;
    v2[1] = sub_1002D0848;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002D0848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002D08A4, 0, 0);
}

uint64_t sub_1002D08A4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uid_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0 + 8;
  if (v0[46])
  {
    v2 = v0[42];
    v3 = v0[40];
    v4 = v0[22];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = v2 + *(int *)(v3 + 20);
    v6 = type metadata accessor for UUID(0);
    v0[47] = v6;
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v0[48] = v7;
    v7(v5, v4, v6);
    v8 = getuid();
    sub_100A06500(v8);
    v9 = (_QWORD *)swift_task_alloc(dword_10111BAF4);
    v0[49] = v9;
    *v9 = v0;
    v9[1] = sub_1002D0C3C;
    return sub_100C654F4(v0[44], v0[42]);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6CA8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing ObservationStoreService!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = sub_1002DC9E4();
    v17 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v16, 0, 0);
    *v18 = 0;
    swift_willThrow(v17);
    v19 = v0[32];
    v20 = v0[29];
    v40 = v0[31];
    v41 = v0[30];
    v21 = v0[27];
    v23 = v0[24];
    v22 = v0[25];
    v39 = v0[28];
    v24 = (_QWORD *)swift_allocObject(&unk_1010671B0, 40, 7);
    v24[2] = v17;
    v24[3] = v23;
    v24[4] = v22;
    v0[6] = sub_1002DF1C8;
    v0[7] = v24;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_1010671C8;
    v25 = _Block_copy(v0 + 2);
    swift_errorRetain(v17);
    v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    v0[21] = _swiftEmptyArrayStorage;
    v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 21, v28, v29, v21, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v20, v25);
    _Block_release(v25);
    swift_errorRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v19, v41);
    swift_release();
    v30 = v0[43];
    v32 = v0[41];
    v31 = v0[42];
    v33 = v0[39];
    v35 = v0[35];
    v34 = v0[36];
    v36 = v0[34];
    v37 = v0[32];
    v38 = v0[29];
    swift_task_dealloc(v0[44]);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_1002D0C3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  sub_1000126B0(*(_QWORD *)(v2 + 336), type metadata accessor for BeaconIdentifier);
  if (v0)
    v4 = sub_1002D0F80;
  else
    v4 = sub_1002D0CB0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002D0CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD);
  uint64_t v24;
  uid_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 344);
  sub_10000F9B8(*(_QWORD *)(v0 + 352), v1, &qword_1010F0F00);
  v2 = type metadata accessor for ObservedAdvertisement(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 344);
  if (v3 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 344), &qword_1010F0F00);
    v5 = 1;
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 16))(*(_QWORD *)(v0 + 288), v4 + *(int *)(v2 + 44), *(_QWORD *)(v0 + 296));
    sub_1000126B0(v4, type metadata accessor for ObservedAdvertisement);
    v5 = 0;
  }
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v8, v5, 1, v6);
  sub_10005972C(v10, v9, type metadata accessor for StandaloneBeacon);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  v13 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 272);
  if (v11 == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v13 + 16))(*(_QWORD *)(v0 + 312), v16 + *(int *)(*(_QWORD *)(v0 + 264) + 32), *(_QWORD *)(v0 + 296));
    sub_1000126B0(v16, type metadata accessor for StandaloneBeacon);
    sub_100004048(v14, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 272), type metadata accessor for StandaloneBeacon);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, v14, v15);
  }
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  v20 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 312);
  v38 = *(_QWORD *)(v0 + 304);
  v39 = *(_QWORD *)(v0 + 296);
  v40 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 280);
  v22 = *(_QWORD *)(v0 + 264);
  v36 = *(_QWORD *)(v0 + 200);
  v23 = *(void (**)(uint64_t, _QWORD))(v0 + 192);
  v24 = *(_QWORD *)(v0 + 176);
  sub_1002CF0D8(v21);
  v18(v19 + *(int *)(v20 + 20), v24, v17);
  v25 = getuid();
  sub_100A06500(v25);
  sub_1002DE064(v19, v37, v24 + *(int *)(v22 + 32), v21, v23, v36);
  swift_release();
  sub_1000126B0(v19, type metadata accessor for BeaconIdentifier);
  sub_100004048(v21, (uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
  sub_100004048(v40, &qword_1010F0F00);
  v26 = *(_QWORD *)(v0 + 344);
  v28 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 336);
  v29 = *(_QWORD *)(v0 + 312);
  v31 = *(_QWORD *)(v0 + 280);
  v30 = *(_QWORD *)(v0 + 288);
  v32 = *(_QWORD *)(v0 + 272);
  v33 = *(_QWORD *)(v0 + 256);
  v34 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002D0F80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release();
  v1 = v0[50];
  v2 = v0[32];
  v3 = v0[29];
  v24 = v0[31];
  v25 = v0[30];
  v4 = v0[27];
  v6 = v0[24];
  v5 = v0[25];
  v23 = v0[28];
  v7 = (_QWORD *)swift_allocObject(&unk_1010671B0, 40, 7);
  v7[2] = v1;
  v7[3] = v6;
  v7[4] = v5;
  v0[6] = sub_1002DF1C8;
  v0[7] = v7;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100016FB8;
  v0[5] = &unk_1010671C8;
  v8 = _Block_copy(v0 + 2);
  swift_errorRetain(v1);
  v9 = swift_retain();
  static DispatchQoS.unspecified.getter(v9);
  v0[21] = _swiftEmptyArrayStorage;
  v10 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v12 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 21, v11, v12, v4, v10);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v2, v3, v8);
  _Block_release(v8);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v2, v25);
  swift_release();
  v13 = v0[43];
  v15 = v0[41];
  v14 = v0[42];
  v16 = v0[39];
  v18 = v0[35];
  v17 = v0[36];
  v19 = v0[34];
  v20 = v0[32];
  v21 = v0[29];
  swift_task_dealloc(v0[44]);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1002D11A4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6CA8);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(a1);
    v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error in shouldForcePair: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
  }

  return a2(a1, 1);
}

uint64_t sub_1002D1344(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[6];

  v6 = v5;
  v34 = a4;
  v35 = a5;
  v33 = a2;
  v36 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v11 - 8);
  v39 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v6 + 48);
  sub_10005972C(a3, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  v18 = *(unsigned __int8 *)(v15 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (_QWORD *)swift_allocObject(&unk_101066FF8, v20 + 16, v18 | 7);
  v21[2] = v6;
  v21[3] = a1;
  v22 = v33;
  v21[4] = v33;
  sub_1000126EC((uint64_t)v17, (uint64_t)v21 + v19, type metadata accessor for OwnedBeaconGroup);
  v23 = (_QWORD *)((char *)v21 + v20);
  v24 = v35;
  *v23 = v34;
  v23[1] = v24;
  aBlock[4] = sub_1002DEB98;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101067010;
  v25 = _Block_copy(aBlock);
  swift_retain();
  sub_10001BBBC(a1, v22);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v41 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v36, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v30);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  return swift_release();
}

uint64_t sub_1002D15E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  char *My;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  void (*v85)(_QWORD, _QWORD);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  void (*v124)(_QWORD, _QWORD);
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  char *v134[6];

  v124 = a5;
  v125 = a6;
  v128 = a4;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v9);
  v126 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v120 = *(_QWORD *)(v11 - 8);
  v121 = v11;
  __chkstk_darwin(v11);
  v117 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v13);
  v113 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = sub_10001A9A8(&qword_1010F5D28);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116);
  v114 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v127);
  v112 = (uint64_t)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v17);
  v119 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v23 = *((_QWORD *)v22 - 1);
  __chkstk_darwin(v22);
  v25 = (char *)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = a1;
  v122 = a2;
  v123 = a3;
  v26 = sub_10080BC6C(a2, a3);
  v27 = v26[2];
  if (v27)
  {
    v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v131 = *(id *)(v23 + 72);
    v118 = v26;
    swift_bridgeObjectRetain(v26);
    v29 = _swiftEmptyArrayStorage;
    v130 = v19;
    while (1)
    {
      sub_10005972C(v28, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C((uint64_t)&v25[v22[6]], (uint64_t)v21, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v19);
      if (EnumCaseMultiPayload == 3)
        break;
      if (EnumCaseMultiPayload == 2)
      {
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      sub_1000126B0((uint64_t)v21, type metadata accessor for StableIdentifier);
      sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
      v28 += (uint64_t)v131;
      if (!--v27)
      {
        swift_bridgeObjectRelease_n(v118, 2);
        goto LABEL_17;
      }
    }
    sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    v32 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v21, v32);
    v33 = sub_1001EE37C(*(_QWORD *)&v25[v22[16]], *(_QWORD *)&v25[v22[17]]);
    v35 = v34;
    sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
    if (v35 >> 60 != 15)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        v29 = sub_1007C9134(0, v29[2] + 1, 1, v29);
      v37 = v29[2];
      v36 = v29[3];
      v38 = v29;
      if (v37 >= v36 >> 1)
        v38 = sub_1007C9134((_QWORD *)(v36 > 1), v37 + 1, 1, v29);
      v38[2] = v37 + 1;
      v29 = v38;
      v30 = &v38[2 * v37];
      v30[4] = v33;
      v30[5] = v35;
      v19 = v130;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v29 = _swiftEmptyArrayStorage;
LABEL_17:
  v39 = v29[2];
  v40 = v29;
  v42 = v128;
  v41 = v129;
  v43 = (uint64_t)v126;
  v44 = v127;
  if (!v39)
  {
    swift_bridgeObjectRelease();
    v46 = 0;
    v45 = 0xF000000000000000;
LABEL_22:
    v52 = 1;
    goto LABEL_23;
  }
  v46 = v40[4];
  v45 = v40[5];
  sub_10001BBBC(v46, v45);
  swift_bridgeObjectRelease();
  sub_10001BBBC(v46, v45);
  sub_1001EDA78(v46, v45);
  if (v47 != 76)
  {
    sub_10001BC14(v46, v45);
    goto LABEL_22;
  }
  v48 = sub_1001EDBAC(v46, v45);
  v50 = v49;
  v51 = v119;
  static Endianness.current.getter(v48);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)(v134, v48, v50, v51);
  sub_10001BC14(v46, v45);
  v52 = BYTE4(v134[0]) | (LODWORD(v134[0]) != 8220);
LABEL_23:
  My = (char *)type metadata accessor for Feature.FindMy(0);
  v134[3] = My;
  v134[4] = (char *)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v54 = sub_100018F08(v134);
  (*(void (**)(_QWORD *, _QWORD, char *))(*((_QWORD *)My - 1) + 104))(v54, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v134);
  v55 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
  if ((My & 1) == 0 || (v52 & 1) != 0)
  {
    v67 = v42 + *(int *)(v44 + 28);
    __chkstk_darwin(v55);
    *(&v112 - 2) = v67;
    *(&v112 - 1) = v68;
    sub_10001A9A8(&qword_101110700);
    Lock.callAsFunction<A>(_:)(sub_100245650);
    v69 = v134[0];
    if (v134[0])
    {
      v70 = sub_1002B9504(v134[0]);
      if (v70)
      {
        *(&v112 - 4) = __chkstk_darwin(v70);
        *(&v112 - 3) = v67;
        v71 = v123;
        *(&v112 - 2) = v122;
        *(&v112 - 1) = v71;
        v72 = sub_10001A9A8(&qword_1010F5D30);
        OS_dispatch_queue.sync<A>(execute:)(sub_1002DFCC0, &v112 - 6, v72);
        v132 = *(id *)(v41 + 48);
        v73 = v132;
        v74 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
        v75 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v74 - 8) + 56);
        v131 = v69;
        v76 = (uint64_t)v113;
        v75(v113, 1, 1, v74);
        v77 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        v78 = sub_1000193A4(&qword_1010F5D38, &qword_1010F5D30, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
        v79 = sub_1001C7EF4();
        v80 = v73;
        v81 = v114;
        Publisher.receive<A>(on:options:)(&v132, v76, v72, v77, v78, v79);
        sub_100004048(v76, &qword_1010EECC8);

        swift_release();
        v82 = swift_allocObject(&unk_101066A80, 24, 7);
        v83 = v129;
        swift_weakInit(v82 + 16, v129);
        v84 = (_QWORD *)swift_allocObject(&unk_101067048, 40, 7);
        v85 = v124;
        v86 = v125;
        v84[2] = v82;
        v84[3] = v85;
        v84[4] = v86;
        v87 = swift_allocObject(&unk_101067070, 32, 7);
        *(_QWORD *)(v87 + 16) = sub_1002DEBF0;
        *(_QWORD *)(v87 + 24) = v84;
        v88 = sub_1000193A4(&qword_1010F5D40, &qword_1010F5D28, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        swift_retain();
        v89 = v116;
        Publisher<>.sink(receiveValue:)(sub_1002DFD38, v87, v116, v88);
        swift_release();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v81, v89);
        swift_beginAccess(v83 + 72, v134, 33, 0);
        AnyCancellable.store(in:)(v83 + 72);
        swift_endAccess(v134);

        swift_release();
        swift_release();
      }
      else
      {
        if (qword_1010E9B08 != -1)
          swift_once(&qword_1010E9B08, sub_1002B4720);
        v101 = type metadata accessor for Logger(0);
        v102 = sub_10001A9E8(v101, (uint64_t)qword_1011B6CA8);
        v103 = Logger.logObject.getter(v102);
        v104 = static os_log_type_t.error.getter(v103);
        if (os_log_type_enabled(v103, v104))
        {
          v105 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v105 = 0;
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Missing pairing manager to force pair!", v105, 2u);
          swift_slowDealloc(v105, -1, -1);
        }

        v106 = sub_1002DC9E4();
        v107 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v106, 0, 0);
        *v108 = 0;
        v124(v107, 1);
        swift_errorRelease(v107);

      }
    }
    else
    {
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v91 = type metadata accessor for Logger(0);
      sub_10001A9E8(v91, (uint64_t)qword_1011B6CA8);
      v92 = v112;
      v93 = sub_10005972C(v42, v112, type metadata accessor for OwnedBeaconGroup);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.error.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        v96 = (uint8_t *)swift_slowAlloc(12, -1);
        v97 = (char *)swift_slowAlloc(32, -1);
        v134[0] = v97;
        *(_DWORD *)v96 = 136446210;
        v98 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v99 = dispatch thunk of CustomStringConvertible.description.getter(v121, v98);
        v132 = (id)sub_100016940(v99, v100, (uint64_t *)v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v96 + 4, v96 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v92, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Missing peripheral for %{public}s to force pair!", v96, 0xCu);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);
      }
      else
      {
        sub_1000126B0(v92, type metadata accessor for OwnedBeaconGroup);
      }

      v109 = sub_1002DC9E4();
      v110 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v109, 0, 0);
      *v111 = 0;
      v124(v110, 1);
      swift_errorRelease(v110);
    }
    return sub_10001EF3C(v46, v45);
  }
  else
  {
    sub_10036B124(v122, v123, v43);
    v57 = v120;
    v56 = v121;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v43, 1, v121) == 1)
    {
      sub_100004048(v43, (uint64_t *)&unk_1010F9890);
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_10001A9E8(v58, (uint64_t)qword_1011B6CA8);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Invalid state. No MAC address to start LE pairing", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      v63 = sub_1002DC9E4();
      v64 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v63, 0, 0);
      *v65 = 0;
      v124(v64, 1);
      sub_10001EF3C(v46, v45);
      return swift_errorRelease(v64);
    }
    else
    {
      v90 = (uint64_t)v117;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v117, v43, v56);
      sub_1002C5908(v90, v42 + *(int *)(v44 + 28), 0, (uint64_t)v124, v125);
      sub_10001EF3C(v46, v45);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v90, v56);
    }
  }
}

uint64_t sub_1002D22E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *My;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  BOOL v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  id v96;
  char *v97;
  uint64_t v98;
  _QWORD *v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  unint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  id v126;
  uint64_t v127;
  char *v128[6];

  v122 = a3;
  v123 = a4;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v121 = (uint64_t)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F5D28);
  v119 = *(_QWORD *)(v11 - 8);
  v120 = v11;
  __chkstk_darwin(v11);
  v118 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MACAddress(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v112 - v21;
  v23 = (int *)type metadata accessor for StandaloneBeacon(0);
  v24 = a1 + v23[6];
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v124 = v16;
  v125 = v22;
  v25(v22, v24, v16);
  v26 = (uint64_t *)(a1 + v23[9]);
  v28 = *v26;
  v27 = v26[1];
  sub_1001EDA78(*v26, v27);
  if (v29 == 76)
  {
    v30 = sub_1001EDBAC(v28, v27);
    v32 = v31;
    static Endianness.current.getter(v30);
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(v128, v30, v32, v15);
    v33 = BYTE4(v128[0]) | (LODWORD(v128[0]) != 8220);
  }
  else
  {
    v33 = 1;
  }
  My = (char *)type metadata accessor for Feature.FindMy(0);
  v128[3] = My;
  v128[4] = (char *)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v35 = sub_100018F08(v128);
  (*(void (**)(_QWORD *, _QWORD, char *))(*((_QWORD *)My - 1) + 104))(v35, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v128);
  v36 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v128);
  if ((My & 1) != 0 && (v33 & 1) == 0)
  {
    v37 = a1 + v23[5];
    v38 = (uint64_t)v125;
    sub_1002C5908(v37, (uint64_t)v125, 1, (uint64_t)v122, v123);
    v39 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8);
LABEL_7:
    v40 = v124;
    return v39(v38, v40);
  }
  v117 = v17;
  __chkstk_darwin(v36);
  *(&v112 - 2) = (uint64_t)v125;
  *(&v112 - 1) = v41;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_100245650);
  v42 = v128[0];
  if (!v128[0])
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v60 = type metadata accessor for Logger(0);
    sub_10001A9E8(v60, (uint64_t)qword_1011B6CA8);
    v40 = v124;
    v38 = (uint64_t)v125;
    v61 = ((uint64_t (*)(char *, char *, uint64_t))v25)(v20, v125, v124);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = (char *)swift_slowAlloc(32, -1);
      v128[0] = v65;
      *(_DWORD *)v64 = 136446210;
      v66 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v67 = dispatch thunk of CustomStringConvertible.description.getter(v40, v66);
      v126 = (id)sub_100016940(v67, v68, (uint64_t *)v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease();
      v39 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8);
      v39((uint64_t)v20, v40);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Missing peripheral for %{public}s to force pair!", v64, 0xCu);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      v69 = v65;
      v38 = (uint64_t)v125;
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      v39 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8);
      v39((uint64_t)v20, v40);
    }

    v108 = v122;
    v109 = sub_1002DC9E4();
    v110 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v109, 0, 0);
    *v111 = 0;
    v108(v110, 1);
    swift_errorRelease(v110);
    return v39(v38, v40);
  }
  if (sub_1002B9504(v128[0]))
  {
    v43 = (uint64_t *)(a1 + v23[7]);
    v44 = *v43;
    v45 = v43[1];
    swift_bridgeObjectRetain(v45);
    v46 = (char *)String.utf8Data.getter(v44, v45);
    v48 = v47;
    swift_bridgeObjectRelease();
    v128[0] = v46;
    v128[1] = v48;
    v49 = sub_100035530();
    v50 = DataProtocol.isNull.getter(&type metadata for Data, v49);
    v51 = v117;
    if ((v50 & 1) != 0)
    {
      sub_10001BC14((uint64_t)v46, (unint64_t)v48);
      if (qword_1010E9B08 != -1)
        swift_once(&qword_1010E9B08, sub_1002B4720);
      v52 = type metadata accessor for Logger(0);
      v53 = sub_10001A9E8(v52, (uint64_t)qword_1011B6CA8);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter(v54);
      v56 = os_log_type_enabled(v54, v55);
      v40 = v124;
      v38 = (uint64_t)v125;
      if (v56)
      {
        v57 = v51;
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Invalid serial number. Cannot force pair!", v58, 2u);
        swift_slowDealloc(v58, -1, -1);

        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v38, v40);
      }

      swift_release();
      v39 = *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8);
      return v39(v38, v40);
    }
    v82 = Data.trimmed.getter(v46, v48);
    v84 = v83;
    v85 = sub_10001BC14((uint64_t)v46, (unint64_t)v48);
    v113 = a2;
    __chkstk_darwin(v85);
    v115 = v42;
    v86 = (uint64_t)v125;
    *(&v112 - 4) = v87;
    *(&v112 - 3) = v86;
    *(&v112 - 2) = v82;
    *(&v112 - 1) = v84;
    v114 = v82;
    sub_10001BBBC(v82, v84);
    v88 = sub_10001A9A8(&qword_1010F5D30);
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DFCC0, &v112 - 6, v88);
    v89 = v84;
    sub_10001BC14(v82, v84);
    v90 = v113;
    v126 = *(id *)(v113 + 48);
    v91 = v126;
    v92 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v10, 1, 1, v92);
    v93 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v94 = sub_1000193A4(&qword_1010F5D38, &qword_1010F5D30, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v95 = sub_1001C7EF4();
    v96 = v91;
    v97 = v118;
    Publisher.receive<A>(on:options:)(&v126, v10, v88, v93, v94, v95);
    sub_100004048((uint64_t)v10, &qword_1010EECC8);

    swift_release();
    v98 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v98 + 16, v90);
    v99 = (_QWORD *)swift_allocObject(&unk_1010672A0, 40, 7);
    v100 = v122;
    v101 = v123;
    v99[2] = v98;
    v99[3] = v100;
    v99[4] = v101;
    v102 = swift_allocObject(&unk_1010672C8, 32, 7);
    *(_QWORD *)(v102 + 16) = sub_1002DFD34;
    *(_QWORD *)(v102 + 24) = v99;
    v103 = sub_1000193A4(&qword_1010F5D40, &qword_1010F5D28, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    v104 = v120;
    Publisher<>.sink(receiveValue:)(sub_1002DFD38, v102, v120, v103);
    swift_release();
    (*(void (**)(char *, uint64_t))(v119 + 8))(v97, v104);
    swift_beginAccess(v90 + 72, v128, 33, 0);
    AnyCancellable.store(in:)(v90 + 72);
    swift_endAccess(v128);
    swift_release();
    v105 = v121;
    static Date.trustedNow.getter(v121);
    v106 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v105, 0, 1, v106);
    v107 = a1;
    v38 = (uint64_t)v125;
    sub_1002DB888(v107, v105);

    swift_release();
    sub_10001BC14(v114, v89);
    sub_100004048(v105, (uint64_t *)&unk_1010EA690);
    v39 = *(uint64_t (**)(uint64_t, uint64_t))(v117 + 8);
    goto LABEL_7;
  }
  v70 = v117;
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v71 = type metadata accessor for Logger(0);
  v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B6CA8);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.error.getter(v73);
  v75 = os_log_type_enabled(v73, v74);
  v77 = v124;
  v76 = (uint64_t)v125;
  if (v75)
  {
    v78 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v78 = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Missing pairing manager to force pair!", v78, 2u);
    swift_slowDealloc(v78, -1, -1);
  }

  v79 = sub_1002DC9E4();
  v80 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v79, 0, 0);
  *v81 = 0;
  v122(v80, 1);

  swift_errorRelease(v80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v76, v77);
}

uint64_t sub_1002D2D48(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(_QWORD, _QWORD);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  char v73[32];

  v69 = a5;
  v65 = a4;
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F5D00);
  __chkstk_darwin(v11);
  v68 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BluetoothManagerDevice(0);
  v66 = *(_QWORD *)(v13 - 8);
  v67 = v13;
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v64 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v73, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v23 = result;
    v62 = v20;
    v60 = v16;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6CA8);
    v26 = a1;
    v63 = v25;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v57 = v8;
      v29 = swift_slowAlloc(12, -1);
      v56 = v19;
      v30 = (uint8_t *)v29;
      v31 = swift_slowAlloc(8, -1);
      v59 = v18;
      v32 = (_QWORD *)v31;
      v61 = v23;
      *(_DWORD *)v30 = 138412290;
      v71 = v26;
      v33 = v26;
      v58 = v10;
      v34 = v7;
      v35 = v33;
      v8 = v57;
      v23 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v30 + 4, v30 + 12);
      *v32 = v26;

      v7 = v34;
      v10 = v58;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "LE Pairing completed for %@.", v30, 0xCu);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v32, 1, v36);
      v18 = v59;
      swift_slowDealloc(v32, -1, -1);
      v37 = v30;
      v19 = v56;
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {

      v27 = v26;
    }
    v38 = (uint64_t)v68;

    v39 = objc_msgSend(*(id *)((char *)&v26->isa + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier");
    v40 = (uint64_t)v64;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    swift_beginAccess(v23 + 184, &v71, 33, 0);
    sub_1001036AC(v40);
    (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v40, v19);
    swift_endAccess(&v71);
    swift_release();
    v41 = (char *)v26;
    sub_100786FB4(v10);
    sub_1002CA428((uint64_t)v10, v38);
    v42 = *(void (**)(char *, uint64_t))(v8 + 8);
    v42(v10, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v38, 1, v67) == 1)
    {
      v43 = sub_100004048(v38, &qword_1010F5D00);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "No BT device from BluetoothManager after pairing. Need to unpair", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      sub_100786FB4(v10);
      sub_1002BC4E8(v41, (uint64_t)v10);
      v42(v10, v7);
    }
    else
    {
      sub_1000126EC(v38, (uint64_t)v18, type metadata accessor for BluetoothManagerDevice);
      v47 = (uint64_t)v60;
      v48 = sub_10005972C((uint64_t)v18, (uint64_t)v60, type metadata accessor for BluetoothManagerDevice);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v61 = v23;
        v53 = v52;
        v71 = v52;
        *(_DWORD *)v51 = 136315138;
        v54 = sub_10015AE8C();
        v70 = sub_100016940(v54, v55, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v51 + 4, v51 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v47, type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Found BT device from BluetoothManager after pairing as expected. %s", v51, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        sub_1000126B0(v47, type metadata accessor for BluetoothManagerDevice);
      }
      sub_1000126B0((uint64_t)v18, type metadata accessor for BluetoothManagerDevice);
    }
    v65(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1002D3354(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v6 + 168) = a5;
  *(_QWORD *)(v6 + 176) = a6;
  *(_BYTE *)(v6 + 256) = a4;
  *(_QWORD *)(v6 + 152) = a2;
  *(_QWORD *)(v6 + 160) = a3;
  *(_QWORD *)(v6 + 144) = a1;
  v7 = type metadata accessor for MACAddress(0);
  *(_QWORD *)(v6 + 184) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 192) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 208) = swift_task_alloc(v9);
  return swift_task_switch(sub_1002D33D0, 0, 0);
}

uint64_t sub_1002D33D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v6;
  uint64_t (__cdecl *v7)();

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 16);
  *(_QWORD *)(v0 + 216) = v4;
  v4(v1, v3, v2);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v7 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD00 + dword_1010EBD00);
    v6 = (_QWORD *)swift_task_alloc(unk_1010EBD04);
    *(_QWORD *)(v0 + 224) = v6;
    *v6 = v0;
    v6[1] = sub_1002D34D4;
    return v7();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002D34D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002D3530, 0, 0);
}

uint64_t sub_1002D3530()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 232))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v1 = (_QWORD *)swift_task_alloc(dword_1010EC21C);
    *(_QWORD *)(v0 + 240) = v1;
    *v1 = v0;
    v1[1] = sub_1002D3694;
    return sub_100039174(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 152), 0, 0xF000000000000000, *(_BYTE *)(v0 + 256), 1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 184));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6CA8);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get AirPodsLEPairingService", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002D3694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1002D3960;
  else
    v3 = sub_1002D36F8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002D36F8()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6CA8);
  v6 = v1(v2, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(32, -1);
    v24 = v14;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v0 + 128) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 136) = sub_100016940(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LE Pairing completed for %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  }

  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 184);
  v21 = *(_QWORD *)(v0 + 168);
  sub_1002D3B8C(*(_QWORD *)(v0 + 144), v19);
  v18(v19, v20);
  if (v21)
    (*(void (**)(_QWORD, _QWORD))(v0 + 168))(0, 0);
  swift_release();
  v22 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002D3960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  swift_release();
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6CA8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 120) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "startDiscoveryAndPairingSession error: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 248));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 208);
  v13 = *(_QWORD *)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 168);
  v16 = *(_QWORD *)(v0 + 144);

  sub_1002D3B8C(v16, v12);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
  v17 = *(_QWORD *)(v0 + 248);
  if (v15)
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    swift_errorRetain(*(_QWORD *)(v0 + 248));
    v18(v17, 1);
    swift_errorRelease(v17);
  }
  swift_errorRelease(v17);
  v19 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002D3B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45;
  uint64_t v46;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  v40 = v8;
  v41 = v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v40 - v13;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v42 = a2;
  v43 = v15;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_100245650);
  v16 = (void *)v44[0];
  if (v44[0])
  {
    v17 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v44[0]
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

    swift_beginAccess(a1 + 184, v44, 33, 0);
    sub_1001036AC((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_endAccess(v44);
    swift_release();
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B6CA8);
    v19 = v40;
    v20 = v41;
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 16))(v12, a2, v40);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v44[0] = v25;
      *(_DWORD *)v24 = 136446466;
      v45 = sub_100016940(0xD000000000000047, 0x8000000100ECF890, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2082;
      v26 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v19, v26);
      v45 = sub_100016940(v27, v28, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s Cleaned pairing manager for %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v19);
    }

  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_1011B6CA8);
    v30 = v40;
    v31 = v41;
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 16))(v14, a2, v40);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v36 = swift_slowAlloc(64, -1);
      v44[0] = v36;
      *(_DWORD *)v35 = 136446466;
      v45 = sub_100016940(0xD000000000000047, 0x8000000100ECF890, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2082;
      v37 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v30, v37);
      v45 = sub_100016940(v38, v39, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s Missing peripheral for %{public}s to clean the pairing manager", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
    }

  }
}

uint64_t sub_1002D40D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[16];
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  id v55;

  v48 = a7;
  v40 = a5;
  v41 = a3;
  v46 = a1;
  v12 = type metadata accessor for BluetoothManagerDevice(0);
  v43 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v43 + 64);
  __chkstk_darwin(v12);
  v42 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_10001A9A8(&qword_1010F5D48);
  v47 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = a2;
  v51 = a3;
  v52 = a4;
  v53 = a5;
  v54 = 0;
  v19 = sub_10001A9A8(&qword_1010F5D50);
  v20 = v44;
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DCB90, v49, v19);
  v44 = v20;
  v55 = *(id *)(a6 + 48);
  v21 = v55;
  v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v16, 1, 1, v22);
  v23 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v24 = sub_1000193A4(&qword_1010F5D58, &qword_1010F5D50, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v25 = sub_1001C7EF4();
  v26 = v21;
  Publisher.receive<A>(on:options:)(&v55, v16, v19, v23, v24, v25);
  sub_100004048((uint64_t)v16, &qword_1010EECC8);

  swift_release();
  v27 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v27 + 16, a6);
  v28 = v42;
  sub_10005972C(v40, v42, type metadata accessor for BluetoothManagerDevice);
  v29 = *(unsigned __int8 *)(v43 + 80);
  v30 = (v29 + 40) & ~v29;
  v31 = (v13 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (_QWORD *)swift_allocObject(&unk_101066DF0, v31 + 8, v29 | 7);
  v33 = v46;
  v32[2] = v27;
  v32[3] = v33;
  v34 = v41;
  v32[4] = v41;
  sub_1000126EC(v28, (uint64_t)v32 + v30, type metadata accessor for BluetoothManagerDevice);
  *(_QWORD *)((char *)v32 + v31) = v48;
  v35 = sub_1000193A4(&qword_1010F5D60, &qword_1010F5D48, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v36 = v34;
  swift_retain();
  v37 = v45;
  Publisher<>.sink(receiveValue:)(sub_1002DD6F4, v32, v45, v35);
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v37);
  AnyCancellable.store(in:)(v33);
  return swift_release();
}

uint64_t sub_1002D4408(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  _BYTE v26[24];

  v12 = type metadata accessor for BluetoothManagerDevice(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v26, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v18 = result;
    v25 = type metadata accessor for Transaction(0);
    v19 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v19 + 16, v18);
    sub_10005972C(a5, (uint64_t)&v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], type metadata accessor for BluetoothManagerDevice);
    v20 = *(unsigned __int8 *)(v13 + 80);
    v21 = (v20 + 48) & ~v20;
    v22 = (v14 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v23 = (_QWORD *)swift_allocObject(&unk_101066E18, v22 + 8, v20 | 7);
    v23[2] = v19;
    v23[3] = a3;
    v23[4] = a4;
    v23[5] = v16;
    sub_1000126EC((uint64_t)v15, (uint64_t)v23 + v21, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)((char *)v23 + v22) = a6;
    swift_retain();
    swift_retain();
    v24 = a4;
    sub_1002DD7F4(v16);
    swift_retain();
    static Transaction.asyncTask(name:block:)("verifyFindMyNetworkId.rePairAirPods", 35, 2, &unk_1010F5E50, v23);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002D45B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a3;
  v6[15] = a4;
  v6[12] = a1;
  v6[13] = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v6[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[19] = v8;
  v6[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v6[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[22] = v10;
  v6[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v6[24] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v6[25] = v12;
  v6[26] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002D466C, 0, 0);
}

uint64_t sub_1002D466C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0[12] + 16;
  swift_beginAccess(v1, v0 + 8, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = v0[25];
    v5 = v0[26];
    v6 = v0[24];
    v28 = v0[22];
    v29 = v0[21];
    v24 = v0[23];
    v25 = v0[20];
    v7 = v0[17];
    v26 = v0[18];
    v8 = v0[15];
    v9 = v0[13];
    v10 = (void *)v0[14];
    v27 = v0[19];
    sub_10005972C(v0[16], v5, type metadata accessor for BluetoothManagerDevice);
    v11 = *(unsigned __int8 *)(v6 + 80);
    v12 = (v11 + 48) & ~v11;
    v13 = (v4 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = (_QWORD *)swift_allocObject(&unk_101066E40, v13 + 8, v11 | 7);
    v14[2] = v9;
    v14[3] = v3;
    v14[4] = v10;
    v14[5] = v8;
    sub_1000126EC(v5, (uint64_t)v14 + v12, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)((char *)v14 + v13) = v7;
    v0[6] = sub_1002DD90C;
    v0[7] = v14;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_101066E58;
    v15 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    v16 = v10;
    sub_1002DD7F4(v8);
    v17 = swift_retain();
    static DispatchQoS.unspecified.getter(v17);
    v0[11] = _swiftEmptyArrayStorage;
    v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 11, v19, v20, v26, v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v24, v25, v15);
    _Block_release(v15);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v29);
    swift_release();
    swift_release();
  }
  v21 = v0[23];
  v22 = v0[20];
  swift_task_dealloc(v0[26]);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1002D48E0(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, uint8_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  _BYTE *v94;
  uint8_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint8_t *v98;
  uint8_t v99;
  uint64_t v100;
  unint64_t v101;
  char isUniquelyReferenced_nonNull_native;
  int64_t v103;
  uint8_t *v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint8_t *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  uint8_t *v176;
  uint8_t *v177;

  v170 = a5;
  v171 = a6;
  v173 = a4;
  v176 = (uint8_t *)a3;
  v156 = type metadata accessor for OwnedBeaconRecord(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v174 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED528);
  v160 = *(_QWORD *)(v9 - 8);
  v161 = v9;
  v10 = __chkstk_darwin(v9);
  v153 = (uint64_t *)((char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v154 = (uint64_t *)((char *)&v153 - v13);
  __chkstk_darwin(v12);
  v162 = (uint64_t *)((char *)&v153 - v14);
  v15 = sub_10001A9A8(&qword_1010F5E58);
  v16 = __chkstk_darwin(v15);
  v159 = (uint64_t *)((char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v163 = (uint64_t)&v153 - v18;
  v19 = type metadata accessor for BluetoothManagerDevice(0);
  v165 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v166 = v20;
  v167 = (uint64_t)&v153 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OwnedBeaconGroup(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v169 = (uint64_t)&v153 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23);
  v158 = (uint64_t)&v153 - v26;
  __chkstk_darwin(v25);
  v157 = (uint64_t)&v153 - v27;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v29 = __chkstk_darwin(v28);
  v31 = (char *)&v153 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29);
  v164 = (char *)&v153 - v33;
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v153 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v153 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v153 - v41;
  __chkstk_darwin(v40);
  v44 = (char *)&v153 - v43;
  v168 = a1;
  Transaction.capture()();
  v172 = a2;
  sub_1002C08B8(v176, (uint64_t)v44);
  v175 = v44;
  sub_10000F9B8((uint64_t)v44, (uint64_t)v42, (uint64_t *)&unk_1010FF7F0);
  v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v45(v42, 1, v21) == 1)
  {
    sub_100004048((uint64_t)v42, (uint64_t *)&unk_1010FF7F0);
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B6CA8);
    sub_100367170(v47);
    sub_1000126B0((uint64_t)v42, type metadata accessor for OwnedBeaconGroup);
  }
  v48 = v173;
  v49 = (uint64_t)v174;
  v50 = (uint64_t)v175;
  if (!v173)
  {
    sub_10000F9B8((uint64_t)v175, (uint64_t)v39, (uint64_t *)&unk_1010FF7F0);
    if (v45(v39, 1, v21) != 1)
    {
      v57 = v157;
      sub_1000126EC((uint64_t)v39, v157, type metadata accessor for OwnedBeaconGroup);
      v58 = v167;
      sub_10005972C((uint64_t)v170, v167, type metadata accessor for BluetoothManagerDevice);
      v59 = *(unsigned __int8 *)(v165 + 80);
      v60 = (v59 + 32) & ~v59;
      v61 = (v166 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
      v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8;
      v63 = swift_allocObject(&unk_101066EE0, v62 + 8, v59 | 7);
      v64 = (char *)v176;
      *(_QWORD *)(v63 + 16) = v172;
      *(_QWORD *)(v63 + 24) = v64;
      sub_1000126EC(v58, v63 + v60, type metadata accessor for BluetoothManagerDevice);
      *(_QWORD *)(v63 + v61) = v168;
      *(_QWORD *)(v63 + v62) = v171;
      swift_retain();
      v65 = v64;
      swift_retain();
      swift_retain();
      sub_1002CF288(v65, v57, sub_1002DDB90, (uint64_t (*)(void))v63);
      swift_release();
      sub_1000126B0(v57, type metadata accessor for OwnedBeaconGroup);
LABEL_26:
      v72 = (uint64_t *)&unk_1010FF7F0;
      v73 = v50;
      return sub_100004048(v73, v72);
    }
    goto LABEL_20;
  }
  if (v173 == 1)
  {
    sub_10000F9B8((uint64_t)v175, (uint64_t)v36, (uint64_t *)&unk_1010FF7F0);
    if (v45(v36, 1, v21) != 1)
    {
      v89 = v158;
      v90 = sub_1000126EC((uint64_t)v36, v158, type metadata accessor for OwnedBeaconGroup);
      v177 = (uint8_t *)_swiftEmptyArrayStorage;
      v91 = *(_QWORD *)(v89 + *(int *)(v21 + 40));
      __chkstk_darwin(v90);
      *(&v153 - 2) = (uint64_t *)v89;
      *(&v153 - 1) = (uint64_t *)&v177;
      swift_bridgeObjectRetain(v91);
      sub_1003F0BB0((void (*)(_QWORD *))sub_1002DDB74, (uint64_t)(&v153 - 4), v91);
      swift_bridgeObjectRelease();
      v92 = v177;
      swift_bridgeObjectRetain(v177);
      sub_1002C9508(v171, (char *)v176, v170, 1, v92);
      swift_bridgeObjectRelease();
      sub_100004048(v50, (uint64_t *)&unk_1010FF7F0);
      sub_1000126B0(v89, type metadata accessor for OwnedBeaconGroup);
      return swift_bridgeObjectRelease();
    }
    v66 = (uint64_t)v36;
LABEL_21:
    sub_100004048(v66, (uint64_t *)&unk_1010FF7F0);
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10001A9E8(v67, (uint64_t)qword_1011B6CA8);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.debug.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Cannot force from verifyFindMyNetworkId without a beaconGroup", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    goto LABEL_26;
  }
  if (v173 != 2)
  {
    v39 = v164;
    sub_10000F9B8((uint64_t)v175, (uint64_t)v164, (uint64_t *)&unk_1010FF7F0);
    if (v45(v39, 1, v21) == 1)
    {
LABEL_20:
      v66 = (uint64_t)v39;
      goto LABEL_21;
    }
    v158 = v21;
    sub_1000126EC((uint64_t)v39, v169, type metadata accessor for OwnedBeaconGroup);
    v93 = *(_QWORD *)(v48 + 16);
    if (v93)
    {
      swift_bridgeObjectRetain(v48);
      v94 = (_BYTE *)(v48 + 56);
      v95 = (uint8_t *)_swiftEmptyArrayStorage;
      do
      {
        if (*v94 == 2)
        {
          v99 = *(v94 - 24);
          v100 = *((_QWORD *)v94 - 2);
          v101 = *((_QWORD *)v94 - 1);
          sub_10001BBBC(v100, v101);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v95);
          v177 = v95;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10009AD64(0, *((_QWORD *)v95 + 2) + 1, 1);
            v95 = v177;
          }
          v97 = *((_QWORD *)v95 + 2);
          v96 = *((_QWORD *)v95 + 3);
          if (v97 >= v96 >> 1)
          {
            sub_10009AD64(v96 > 1, v97 + 1, 1);
            v95 = v177;
          }
          *((_QWORD *)v95 + 2) = v97 + 1;
          v98 = &v95[32 * v97];
          v98[32] = v99;
          *((_QWORD *)v98 + 5) = v100;
          *((_QWORD *)v98 + 6) = v101;
          v98[56] = 2;
        }
        v94 += 32;
        --v93;
      }
      while (v93);
      sub_1002DDA00(v173);
      v49 = (uint64_t)v174;
      v103 = *((_QWORD *)v95 + 2);
      if (v103)
        goto LABEL_44;
    }
    else
    {
      v95 = (uint8_t *)_swiftEmptyArrayStorage;
      v103 = _swiftEmptyArrayStorage[2];
      if (v103)
      {
LABEL_44:
        v177 = (uint8_t *)_swiftEmptyArrayStorage;
        sub_10009A92C(0, v103, 0);
        v104 = v177;
        v105 = (unint64_t *)(v95 + 48);
        do
        {
          v106 = *(v105 - 1);
          v107 = *v105;
          sub_10001BBBC(v106, *v105);
          v177 = v104;
          v109 = *((_QWORD *)v104 + 2);
          v108 = *((_QWORD *)v104 + 3);
          if (v109 >= v108 >> 1)
          {
            sub_10009A92C(v108 > 1, v109 + 1, 1);
            v104 = v177;
          }
          v105 += 4;
          *((_QWORD *)v104 + 2) = v109 + 1;
          v110 = &v104[16 * v109];
          *((_QWORD *)v110 + 4) = v106;
          *((_QWORD *)v110 + 5) = v107;
          --v103;
        }
        while (v103);
        swift_release();
LABEL_51:
        swift_bridgeObjectRetain(*(_QWORD *)(v169 + *(int *)(v158 + 40)));
        v112 = sub_1002DB1BC(v111);
        swift_bridgeObjectRelease();
        sub_1002B3AF0((uint64_t)v112);
        v114 = v113;
        swift_release();
        v115 = v172;
        swift_retain();
        v116 = sub_1002DBA1C(v114, v115);
        swift_bridgeObjectRelease();
        swift_release();
        v117 = (uint64_t)v175;
        v118 = v161;
        v119 = v162;
        v120 = v160;
        if (v116[2])
        {
          v121 = v163;
          sub_10000F9B8((uint64_t)v116+ ((*(unsigned __int8 *)(v160 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80)), v163, &qword_1010ED528);
          v122 = 0;
        }
        else
        {
          v122 = 1;
          v121 = v163;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v121, v122, 1, v118);
        v123 = swift_bridgeObjectRelease();
        __chkstk_darwin(v123);
        *(&v153 - 2) = (uint64_t *)v121;
        swift_bridgeObjectRetain(v104);
        v124 = sub_10008B80C((uint64_t)sub_1002DDA10, (uint64_t)(&v153 - 4), (uint64_t)v104);
        v125 = v159;
        sub_10000F9B8(v121, (uint64_t)v159, &qword_1010F5E58);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v120 + 48))(v125, 1, v118) == 1)
        {
          swift_bridgeObjectRelease();
          sub_100004048((uint64_t)v125, &qword_1010F5E58);
          if (!*(_QWORD *)(v124 + 16))
          {
LABEL_57:
            swift_bridgeObjectRelease();
            sub_1000126B0(v169, type metadata accessor for OwnedBeaconGroup);
            sub_100004048(v117, (uint64_t *)&unk_1010FF7F0);
            v72 = &qword_1010F5E58;
            v73 = v121;
            return sub_100004048(v73, v72);
          }
        }
        else
        {
          v126 = *(int *)(v118 + 48);
          v127 = (uint64_t)v119 + v126;
          v128 = (uint64_t)v125 + v126;
          v129 = *v125;
          v130 = v125[1];
          *v119 = v129;
          v119[1] = v130;
          v131 = v118;
          sub_100005CF0(v128, (uint64_t)v119 + v126, (uint64_t *)&unk_1010F47C0);
          v132 = *(int *)(v118 + 48);
          v133 = v154;
          v134 = (uint64_t)v154 + v132;
          *v154 = v129;
          v133[1] = v130;
          sub_10000F9B8(v127, (uint64_t)v133 + v132, (uint64_t *)&unk_1010F47C0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v134, 1, v156) == 1)
          {
            sub_10001BBBC(v129, v130);
            sub_100004048((uint64_t)v119, &qword_1010ED528);
            swift_bridgeObjectRelease();
            sub_10001BC14(v129, v130);
            sub_100004048(v134, (uint64_t *)&unk_1010F47C0);
            v121 = v163;
            v117 = (uint64_t)v175;
            if (!*(_QWORD *)(v124 + 16))
              goto LABEL_57;
          }
          else
          {
            sub_1000126EC(v134, v49, type metadata accessor for OwnedBeaconRecord);
            v135 = *(int *)(v131 + 48);
            v136 = v153;
            v137 = (uint64_t)v153 + v135;
            *v153 = v129;
            v136[1] = v130;
            sub_10000F9B8(v127, (uint64_t)v136 + v135, (uint64_t *)&unk_1010F47C0);
            sub_10001BBBC(v129, v130);
            sub_10036B3DC(v129, v130);
            v139 = v138;
            v141 = v140;
            sub_10001BC14(v129, v130);
            v142 = sub_1001C15D4(v139, v141, (uint64_t)v104);
            sub_10001BC14(v139, v141);
            sub_100004048(v137, (uint64_t *)&unk_1010F47C0);
            swift_bridgeObjectRelease();
            if ((v142 & 1) != 0)
            {
              v143 = v167;
              sub_10005972C((uint64_t)v170, v167, type metadata accessor for BluetoothManagerDevice);
              v144 = *(unsigned __int8 *)(v165 + 80);
              v145 = (v144 + 56) & ~v144;
              v146 = (_QWORD *)swift_allocObject(&unk_101066EB8, v145 + v166, v144 | 7);
              v147 = v172;
              v146[2] = v124;
              v146[3] = v147;
              v148 = v171;
              v146[4] = v168;
              v146[5] = v148;
              v149 = (uint64_t)v146 + v145;
              v150 = (char *)v176;
              v146[6] = v176;
              sub_1000126EC(v143, v149, type metadata accessor for BluetoothManagerDevice);
              swift_retain();
              v151 = v150;
              swift_retain();
              swift_retain();
              v152 = v169;
              sub_1002D0144(v49, v169, (uint64_t)sub_1002DDB1C, (uint64_t)v146);
              swift_release();
              sub_1000126B0(v49, type metadata accessor for OwnedBeaconRecord);
              sub_100004048((uint64_t)v162, &qword_1010ED528);
              sub_1000126B0(v152, type metadata accessor for OwnedBeaconGroup);
              sub_100004048((uint64_t)v175, (uint64_t *)&unk_1010FF7F0);
              v72 = &qword_1010F5E58;
              v73 = v163;
              return sub_100004048(v73, v72);
            }
            sub_1000126B0(v49, type metadata accessor for OwnedBeaconRecord);
            sub_100004048((uint64_t)v162, &qword_1010ED528);
            v117 = (uint64_t)v175;
            v121 = v163;
            if (!*(_QWORD *)(v124 + 16))
              goto LABEL_57;
          }
        }
        sub_1002C9508(v171, (char *)v176, v170, 1, (uint8_t *)v124);
        goto LABEL_57;
      }
    }
    swift_release();
    v104 = (uint8_t *)_swiftEmptyArrayStorage;
    goto LABEL_51;
  }
  sub_10000F9B8((uint64_t)v175, (uint64_t)v31, (uint64_t *)&unk_1010FF7F0);
  v51 = v45(v31, 1, v21);
  sub_100004048((uint64_t)v31, (uint64_t *)&unk_1010FF7F0);
  if (v51 == 1)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_10001A9E8(v52, (uint64_t)qword_1011B6CA8);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "All parts paired on verifyFindMyNetworkId but there is no beaconGroup. Attempt to re-pair...", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    sub_1002C9508(v171, (char *)v176, v170, 0, (uint8_t *)_swiftEmptyArrayStorage);
    goto LABEL_26;
  }
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v75 = type metadata accessor for Logger(0);
  v76 = sub_10001A9E8(v75, (uint64_t)qword_1011B6CA8);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter(v77);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "All parts paired on verifyFindMyNetworkId and we have beaconGroup. Check if pairing is pending...", v79, 2u);
    swift_slowDealloc(v79, -1, -1);
  }

  type metadata accessor for Transaction(0);
  v80 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v80 + 16, v172);
  v81 = v167;
  sub_10005972C((uint64_t)v170, v167, type metadata accessor for BluetoothManagerDevice);
  v82 = *(unsigned __int8 *)(v165 + 80);
  v83 = (v82 + 32) & ~v82;
  v84 = (v166 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
  v85 = (v84 + 15) & 0xFFFFFFFFFFFFFFF8;
  v86 = swift_allocObject(&unk_101066E90, v85 + 8, v82 | 7);
  v87 = (char *)v176;
  *(_QWORD *)(v86 + 16) = v80;
  *(_QWORD *)(v86 + 24) = v87;
  sub_1000126EC(v81, v86 + v83, type metadata accessor for BluetoothManagerDevice);
  *(_QWORD *)(v86 + v84) = v168;
  *(_QWORD *)(v86 + v85) = v171;
  v88 = v87;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("verifyFindMyNetworkId.checkLocalPairing", 39, 2, &unk_1010F5E68, v86);
  swift_release();
  sub_100004048(v50, (uint64_t *)&unk_1010FF7F0);
  return swift_release();
}

uint64_t sub_1002D58D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD v22[2];

  v10 = type metadata accessor for BluetoothManagerDevice(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = type metadata accessor for Transaction(0);
  v14 = swift_allocObject(&unk_101066A80, 24, 7);
  swift_weakInit(v14 + 16, a1);
  sub_10005972C(a3, (uint64_t)v13, type metadata accessor for BluetoothManagerDevice);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_101066F80, v18 + 8, v15 | 7);
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = a2;
  sub_1000126EC((uint64_t)v13, v19 + v16, type metadata accessor for BluetoothManagerDevice);
  *(_QWORD *)(v19 + v17) = a4;
  *(_QWORD *)(v19 + v18) = a5;
  swift_retain();
  v20 = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("showPrivacyAlertOrPair.pairAirPods", 34, 2, &unk_1010F5E88, v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1002D5A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[19] = v7;
  v5[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[22] = v9;
  v5[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v5[24] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[25] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[26] = swift_task_alloc(v12);
  v5[27] = swift_task_alloc(v12);
  return swift_task_switch(sub_1002D5B10, 0, 0);
}

uint64_t sub_1002D5B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104) + 16;
  swift_beginAccess(v1, v0 + 64, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 224) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1010F595C);
    *(_QWORD *)(v0 + 232) = v3;
    *v3 = v0;
    v3[1] = sub_1002D5BD4;
    return sub_1002CAD74(*(_QWORD *)(v0 + 112));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002D5BD4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_BYTE *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002D5C30, 0, 0);
}

uint64_t sub_1002D5C30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*((_BYTE *)v0 + 240) == 1)
  {
    v2 = v0[27];
    v1 = v0[28];
    v3 = v0[24];
    v4 = v0[25];
    v38 = v0[22];
    v39 = v0[21];
    v34 = v0[23];
    v35 = v0[20];
    v5 = v0[17];
    v36 = v0[18];
    v6 = v0[16];
    v33 = (void *)v0[14];
    v37 = v0[19];
    sub_10005972C(v0[15], v2, type metadata accessor for BluetoothManagerDevice);
    v7 = *(unsigned __int8 *)(v3 + 80);
    v8 = (v7 + 24) & ~v7;
    v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject(&unk_101066FA8, v11 + 8, v7 | 7);
    *(_QWORD *)(v12 + 16) = v6;
    sub_1000126EC(v2, v12 + v8, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)(v12 + v9) = v1;
    *(_QWORD *)(v12 + v10) = v5;
    *(_QWORD *)(v12 + v11) = v33;
    v0[6] = sub_1002DEA98;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_101066FC0;
    v13 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter(v33);
    v0[12] = _swiftEmptyArrayStorage;
    v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 12, v15, v16, v36, v14);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v35, v13);
    _Block_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v39);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v17 = v0[26];
    v18 = v0[15];
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B6CA8);
    v20 = sub_10005972C(v18, v17, type metadata accessor for BluetoothManagerDevice);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = v0[26];
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v40 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = sub_10015AE8C();
      v0[11] = sub_100016940(v27, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v24, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "FindMy pairing has been completed for %{public}s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      sub_1000126B0(v24, type metadata accessor for BluetoothManagerDevice);

    }
  }
  v29 = v0[26];
  v30 = v0[23];
  v31 = v0[20];
  swift_task_dealloc(v0[27]);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_1002D6040(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;

  v4 = *a1;
  v5 = a1[1];
  result = sub_1003692E4(*a1, v5);
  if ((result & 0x1FE) == 0)
  {
    sub_10036B3DC(v4, v5);
    v8 = v7;
    v10 = v9;
    v11 = (_QWORD *)*a3;
    result = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = (uint64_t)v11;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007C77D4(0, v11[2] + 1, 1, v11);
      v11 = (_QWORD *)result;
      *a3 = result;
    }
    v13 = v11[2];
    v12 = v11[3];
    if (v13 >= v12 >> 1)
    {
      result = (uint64_t)sub_1007C77D4((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
      v11 = (_QWORD *)result;
    }
    v11[2] = v13 + 1;
    v14 = &v11[2 * v13];
    v14[4] = v8;
    v14[5] = v10;
    *a3 = (uint64_t)v11;
  }
  return result;
}

uint64_t sub_1002D6124(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v20;

  v4 = sub_10001A9A8(&qword_1010F5E58);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *a1;
  v8 = a1[1];
  sub_10000F9B8(a2, (uint64_t)v6, &qword_1010F5E58);
  v9 = sub_10001A9A8(&qword_1010ED528);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9) == 1)
  {
    sub_10001BBBC(v7, v8);
    sub_100004048((uint64_t)v6, &qword_1010F5E58);
    sub_10001EF3C(v7, v8);
    sub_10001EF3C(0, 0xF000000000000000);
    v10 = 1;
  }
  else
  {
    v11 = *v6;
    v12 = v6[1];
    v13 = (uint64_t)v6 + *(int *)(v9 + 48);
    sub_10001BBBC(v7, v8);
    sub_10036B3DC(v11, v12);
    v15 = v14;
    v17 = v16;
    sub_10001BC14(v11, v12);
    sub_100004048(v13, (uint64_t *)&unk_1010F47C0);
    sub_10001BBBC(v7, v8);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8);
    LOBYTE(v13) = v18;
    sub_10001BC14(v15, v17);
    sub_10001BC14(v7, v8);
    sub_10001BC14(v7, v8);
    v10 = v13 ^ 1;
  }
  return v10 & 1;
}

void sub_1002D62BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD aBlock[6];

  v51 = a7;
  v50 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v15 - 8);
  v53 = v15;
  __chkstk_darwin(v15);
  v48 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BluetoothManagerDevice(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6CA8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      v47 = a8;
      v26 = a5;
      v27 = a3;
      v28 = a4;
      v29 = a6;
      v30 = v25;
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Done force pairing case from verifyFindMyNetworkId", v25, 2u);
      v31 = v30;
      a6 = v29;
      a4 = v28;
      a3 = v27;
      a5 = v26;
      a8 = v47;
      swift_slowDealloc(v31, -1, -1);
    }

  }
  if (*(_QWORD *)(a3 + 16))
  {
    v47 = *(_QWORD *)(a4 + 48);
    sub_10005972C(a8, (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BluetoothManagerDevice);
    v32 = *(unsigned __int8 *)(v18 + 80);
    v33 = (v32 + 48) & ~v32;
    v34 = (v19 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = (_QWORD *)swift_allocObject(&unk_101067098, v34 + 8, v32 | 7);
    v35[2] = a5;
    v35[3] = a4;
    v35[4] = a6;
    v36 = v51;
    v35[5] = v51;
    sub_1000126EC((uint64_t)v20, (uint64_t)v35 + v33, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)((char *)v35 + v34) = a3;
    aBlock[4] = sub_1002DED2C;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010670B0;
    v37 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    v38 = v36;
    swift_bridgeObjectRetain(a3);
    v39 = v48;
    static DispatchQoS.unspecified.getter(v40);
    v55 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v45 = v49;
    v44 = v50;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v42, v43, v50, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v45, v37);
    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v44);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v53);
    swift_release();
  }
}

uint64_t sub_1002D665C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v5[18] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[19] = v7;
  v5[20] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v5[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[22] = v9;
  v5[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v5[24] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[25] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[26] = swift_task_alloc(v12);
  v5[27] = swift_task_alloc(v12);
  return swift_task_switch(sub_1002D6724, 0, 0);
}

uint64_t sub_1002D6724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 104) + 16;
  swift_beginAccess(v1, v0 + 64, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 224) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(dword_1010F595C);
    *(_QWORD *)(v0 + 232) = v3;
    *v3 = v0;
    v3[1] = sub_1002D67E8;
    return sub_1002CAD74(*(_QWORD *)(v0 + 112));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1002D67E8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_BYTE *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002D6844, 0, 0);
}

uint64_t sub_1002D6844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*((_BYTE *)v0 + 240) == 1)
  {
    v2 = v0[27];
    v1 = v0[28];
    v3 = v0[24];
    v4 = v0[25];
    v38 = v0[22];
    v39 = v0[21];
    v34 = v0[23];
    v35 = v0[20];
    v5 = v0[17];
    v36 = v0[18];
    v6 = v0[16];
    v33 = (void *)v0[14];
    v37 = v0[19];
    sub_10005972C(v0[15], v2, type metadata accessor for BluetoothManagerDevice);
    v7 = *(unsigned __int8 *)(v3 + 80);
    v8 = (v7 + 24) & ~v7;
    v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
    v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
    v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject(&unk_1010670E8, v11 + 8, v7 | 7);
    *(_QWORD *)(v12 + 16) = v6;
    sub_1000126EC(v2, v12 + v8, type metadata accessor for BluetoothManagerDevice);
    *(_QWORD *)(v12 + v9) = v1;
    *(_QWORD *)(v12 + v10) = v5;
    *(_QWORD *)(v12 + v11) = v33;
    v0[6] = sub_1002DEA98;
    v0[7] = v12;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_101067100;
    v13 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter(v33);
    v0[12] = _swiftEmptyArrayStorage;
    v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 12, v15, v16, v36, v14);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v35, v13);
    _Block_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v39);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v17 = v0[26];
    v18 = v0[15];
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B6CA8);
    v20 = sub_10005972C(v18, v17, type metadata accessor for BluetoothManagerDevice);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = v0[26];
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v40 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = sub_10015AE8C();
      v0[11] = sub_100016940(v27, v28, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v24, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "FindMy pairing has been completed for %{public}s.", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      sub_1000126B0(v24, type metadata accessor for BluetoothManagerDevice);

    }
  }
  v29 = v0[26];
  v30 = v0[23];
  v31 = v0[20];
  swift_task_dealloc(v0[27]);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_1002D6C54(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v9 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v9);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B6CA8);
  v13 = sub_10005972C((uint64_t)a2, (uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v21[1] = a3;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v23 = v18;
    *(_DWORD *)v17 = 136446210;
    v21[0] = a2;
    v19 = sub_10015AE8C();
    v22 = sub_100016940(v19, v20, &v23);
    a2 = (uint8_t *)v21[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "FindMy pairing is not completed for %{public}s. Attempt to pair...", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v11, type metadata accessor for BluetoothManagerDevice);
  }

  sub_1002C9508(a4, a5, a2, 1, (uint8_t *)_swiftEmptyArrayStorage);
}

uint64_t sub_1002D6E8C(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

Swift::Int sub_1002D6F1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  char *v58;
  uint64_t v59;
  Swift::Int v60;
  unint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  Swift::Int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  unint64_t v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  _QWORD *v153;
  Swift::Int v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  Swift::Int v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  Swift::Int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  Swift::Int v186;
  char *v187;
  char *v188;
  void (*v189)(_QWORD, _QWORD);
  void *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  Swift::Int v194;
  uint64_t *v195;
  uint64_t v196;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v174 = (char *)&v153 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v153 - v9;
  v11 = __chkstk_darwin(v8);
  v187 = (char *)&v153 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v153 - v14;
  v16 = __chkstk_darwin(v13);
  v158 = (char *)&v153 - v17;
  v18 = __chkstk_darwin(v16);
  v165 = (char *)&v153 - v19;
  __chkstk_darwin(v18);
  v163 = (char *)&v153 - v20;
  v21 = type metadata accessor for Date(0);
  v196 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v192 = (char *)&v153 - v26;
  v27 = __chkstk_darwin(v25);
  v162 = (char *)&v153 - v28;
  v29 = __chkstk_darwin(v27);
  v168 = (char *)&v153 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v153 - v32;
  __chkstk_darwin(v31);
  v157 = (char *)&v153 - v34;
  v176 = type metadata accessor for OwnedBeaconGroup(0);
  v171 = *(_QWORD *)(v176 - 8);
  v35 = __chkstk_darwin(v176);
  v161 = (uint64_t)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v188 = (char *)&v153 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v153 - v40;
  v42 = __chkstk_darwin(v39);
  v191 = (uint64_t)&v153 - v43;
  v44 = __chkstk_darwin(v42);
  v172 = (uint64_t)&v153 - v45;
  v46 = __chkstk_darwin(v44);
  v167 = (uint64_t)&v153 - v47;
  v48 = __chkstk_darwin(v46);
  v169 = (char *)&v153 - v49;
  __chkstk_darwin(v48);
  v156 = (uint64_t)&v153 - v50;
  v195 = a1;
  v51 = a1[1];
  result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      if (v51)
        return sub_1002D987C(0, v51, 1, v195);
      return result;
    }
    goto LABEL_131;
  }
  if (v51 >= 0)
    v53 = v51;
  else
    v53 = v51 + 1;
  if (v51 < -1)
  {
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    JUMPOUT(0x1002D8E40);
  }
  v185 = v10;
  v154 = result;
  v155 = v15;
  if (v51 < 2)
  {
    v170 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    v153 = _swiftEmptyArrayStorage;
    if (v51 != 1)
    {
      v61 = _swiftEmptyArrayStorage[2];
      v58 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      v145 = v177;
      if (v61 < 2)
      {
        v144 = v153;
        goto LABEL_109;
      }
      v146 = *v195;
      v144 = v153;
      while (1)
      {
        v147 = v61 - 2;
        if (v61 < 2)
          goto LABEL_126;
        if (!v146)
          goto LABEL_137;
        v148 = v58;
        v149 = *(_QWORD *)&v58[16 * v147 + 32];
        v150 = *(_QWORD *)&v58[16 * v61 + 24];
        sub_1002DA638(v146 + *(_QWORD *)(v171 + 72) * v149, v146 + *(_QWORD *)(v171 + 72) * *(_QWORD *)&v58[16 * v61 + 16], v146 + *(_QWORD *)(v171 + 72) * v150, v170);
        if (v145)
          goto LABEL_109;
        if (v150 < v149)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0)
          v148 = sub_10088F088((uint64_t)v148);
        if (v147 >= *((_QWORD *)v148 + 2))
          goto LABEL_128;
        v151 = &v148[16 * v147 + 32];
        *(_QWORD *)v151 = v149;
        *((_QWORD *)v151 + 1) = v150;
        v152 = *((_QWORD *)v148 + 2);
        if (v61 > v152)
          goto LABEL_129;
        memmove(&v148[16 * v61 + 16], &v148[16 * v61 + 32], 16 * (v152 - v61));
        v58 = v148;
        *((_QWORD *)v148 + 2) = v152 - 1;
        v61 = v152 - 1;
        if (v152 <= 2)
          goto LABEL_109;
      }
    }
  }
  else
  {
    v54 = v53 >> 1;
    v55 = static Array._allocateBufferUninitialized(minimumCapacity:)(v53 >> 1, v176);
    *(_QWORD *)(v55 + 16) = v54;
    v56 = *(unsigned __int8 *)(v171 + 80);
    v153 = (_QWORD *)v55;
    v170 = (char *)(v55 + ((v56 + 32) & ~v56));
  }
  v57 = 0;
  v58 = (char *)_swiftEmptyArrayStorage;
  v175 = xmmword_100E22B00;
  v173 = v5;
  v193 = v21;
  v180 = v24;
  v166 = v33;
  v184 = v41;
  v59 = (uint64_t)v169;
  v60 = v51;
  while (1)
  {
    v62 = v57;
    v63 = v57 + 1;
    v160 = v58;
    v164 = v57;
    v194 = v60;
    if (v57 + 1 >= v60)
    {
      v72 = v57 + 1;
      goto LABEL_44;
    }
    v64 = *v195;
    v65 = *(_QWORD *)(v171 + 72);
    v66 = v156;
    sub_10005972C(*v195 + v65 * v63, v156, type metadata accessor for OwnedBeaconGroup);
    v179 = v64;
    sub_10005972C(v64 + v65 * v62, v59, type metadata accessor for OwnedBeaconGroup);
    v67 = objc_autoreleasePoolPush();
    v68 = v177;
    sub_10084EE10(v66);
    if (v68)
    {
      objc_autoreleasePoolPop(v67);
      __break(1u);
      goto LABEL_139;
    }
    objc_autoreleasePoolPop(v67);
    v69 = objc_autoreleasePoolPush();
    sub_10084EE10(v59);
    v177 = 0;
    objc_autoreleasePoolPop(v69);
    v70 = v157;
    v190 = (void *)Date.compare(_:)(v33);
    v71 = *(void (**)(char *, uint64_t))(v196 + 8);
    v71(v33, v21);
    v189 = (void (*)(_QWORD, _QWORD))v71;
    v71(v70, v21);
    sub_1000126B0(v59, type metadata accessor for OwnedBeaconGroup);
    sub_1000126B0(v156, type metadata accessor for OwnedBeaconGroup);
    v72 = v62 + 2;
    if (v62 + 2 < v194)
    {
      v73 = v65 * v63;
      v74 = v179;
      v182 = v65 * v72;
      v183 = v73;
      v186 = v62 + 2;
      v75 = v167;
      sub_10005972C(v179 + v65 * v72, v167, type metadata accessor for OwnedBeaconGroup);
      sub_10005972C(v74 + v183, v172, type metadata accessor for OwnedBeaconGroup);
      v76 = objc_autoreleasePoolPush();
      __asm { BR              X9 }
    }
    v58 = v160;
    if (v190 != (void *)1)
      goto LABEL_33;
    if (v72 < v62)
      goto LABEL_132;
    if (v62 < v72)
    {
      v77 = 0;
      v78 = v65 * (v62 + 1);
      v79 = v72 * v65;
      v80 = v62 * v65;
      v178 = v65;
      do
      {
        if (v62 != v72 + v77 - 1)
        {
          v83 = v179;
          if (!v179)
            goto LABEL_136;
          v84 = v72;
          v85 = v179 + v80;
          v190 = (void *)(v179 + v78);
          sub_1000126EC(v179 + v80, v161, type metadata accessor for OwnedBeaconGroup);
          if (v80 < v78 || v85 >= v83 + v79)
          {
            v81 = v83 + v80;
            v82 = (uint64_t)v190;
            swift_arrayInitWithTakeFrontToBack(v81, v190, 1, v176);
          }
          else
          {
            v82 = (uint64_t)v190;
            if (v80 != v78)
              swift_arrayInitWithTakeBackToFront(v85, v190);
          }
          sub_1000126EC(v161, v82, type metadata accessor for OwnedBeaconGroup);
          v58 = v160;
          v72 = v84;
          v65 = v178;
        }
        ++v62;
        --v77;
        v78 -= v65;
        v79 -= v65;
        v80 += v65;
      }
      while (v62 < v72 + v77);
      v33 = v166;
      v86 = (uint64_t)v184;
      v59 = (uint64_t)v169;
      v62 = v164;
      if (v72 >= v194)
        goto LABEL_44;
    }
    else
    {
LABEL_33:
      v86 = (uint64_t)v184;
      if (v72 >= v194)
        goto LABEL_44;
    }
    if (__OFSUB__(v72, v62))
      goto LABEL_130;
    if (v72 - v62 < v154)
    {
      if (__OFADD__(v62, v154))
        goto LABEL_133;
      v87 = v194;
      if (v62 + v154 < v194)
        v87 = v62 + v154;
      if (v87 < v62)
        goto LABEL_134;
      if (v72 != v87)
      {
        v88 = *(_QWORD *)(v171 + 72);
        v89 = v88 * (v72 - 1);
        v181 = v88;
        v194 = v72 * v88;
        v159 = v87;
        v186 = v72;
        v182 = v89;
        v90 = *v195;
        v91 = v191;
        sub_10005972C(v72 * v88 + *v195, v191, type metadata accessor for OwnedBeaconGroup);
        v189 = (void (*)(_QWORD, _QWORD))v89;
        sub_10005972C(v89 + v90, v86, type metadata accessor for OwnedBeaconGroup);
        v190 = objc_autoreleasePoolPush();
        __asm { BR              X9 }
      }
    }
LABEL_44:
    if (v72 < v62)
      goto LABEL_125;
    v186 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) != 0)
      v58 = v160;
    else
      v58 = sub_10088E710(0, *((_QWORD *)v160 + 2) + 1, 1, v160);
    v93 = *((_QWORD *)v58 + 2);
    v92 = *((_QWORD *)v58 + 3);
    v61 = v93 + 1;
    v57 = v186;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_10088E710((char *)(v92 > 1), v93 + 1, 1, v58);
      v57 = v186;
      v58 = v143;
    }
    *((_QWORD *)v58 + 2) = v61;
    v94 = v58 + 32;
    v95 = &v58[16 * v93 + 32];
    *(_QWORD *)v95 = v62;
    *((_QWORD *)v95 + 1) = v57;
    if (v93)
      break;
    v61 = 1;
LABEL_14:
    v60 = v195[1];
    if (v57 >= v60)
      goto LABEL_96;
  }
  while (1)
  {
    v96 = v61 - 1;
    if (v61 >= 4)
    {
      v101 = &v94[16 * v61];
      v102 = *((_QWORD *)v101 - 8);
      v103 = *((_QWORD *)v101 - 7);
      v107 = __OFSUB__(v103, v102);
      v104 = v103 - v102;
      if (v107)
        goto LABEL_114;
      v106 = *((_QWORD *)v101 - 6);
      v105 = *((_QWORD *)v101 - 5);
      v107 = __OFSUB__(v105, v106);
      v99 = v105 - v106;
      v100 = v107;
      if (v107)
        goto LABEL_115;
      v108 = v61 - 2;
      v109 = &v94[16 * v61 - 32];
      v111 = *(_QWORD *)v109;
      v110 = *((_QWORD *)v109 + 1);
      v107 = __OFSUB__(v110, v111);
      v112 = v110 - v111;
      if (v107)
        goto LABEL_117;
      v107 = __OFADD__(v99, v112);
      v113 = v99 + v112;
      if (v107)
        goto LABEL_120;
      if (v113 >= v104)
      {
        v131 = &v94[16 * v96];
        v133 = *(_QWORD *)v131;
        v132 = *((_QWORD *)v131 + 1);
        v107 = __OFSUB__(v132, v133);
        v134 = v132 - v133;
        if (v107)
          goto LABEL_124;
        v124 = v99 < v134;
        goto LABEL_81;
      }
    }
    else
    {
      if (v61 != 3)
      {
        v125 = *((_QWORD *)v58 + 4);
        v126 = *((_QWORD *)v58 + 5);
        v107 = __OFSUB__(v126, v125);
        v118 = v126 - v125;
        v119 = v107;
        goto LABEL_75;
      }
      v98 = *((_QWORD *)v58 + 4);
      v97 = *((_QWORD *)v58 + 5);
      v107 = __OFSUB__(v97, v98);
      v99 = v97 - v98;
      v100 = v107;
    }
    if ((v100 & 1) != 0)
      goto LABEL_116;
    v108 = v61 - 2;
    v114 = &v94[16 * v61 - 32];
    v116 = *(_QWORD *)v114;
    v115 = *((_QWORD *)v114 + 1);
    v117 = __OFSUB__(v115, v116);
    v118 = v115 - v116;
    v119 = v117;
    if (v117)
      goto LABEL_119;
    v120 = &v94[16 * v96];
    v122 = *(_QWORD *)v120;
    v121 = *((_QWORD *)v120 + 1);
    v107 = __OFSUB__(v121, v122);
    v123 = v121 - v122;
    if (v107)
      goto LABEL_122;
    if (__OFADD__(v118, v123))
      goto LABEL_123;
    if (v118 + v123 >= v99)
    {
      v124 = v99 < v123;
LABEL_81:
      if (v124)
        v96 = v108;
      goto LABEL_83;
    }
LABEL_75:
    if ((v119 & 1) != 0)
      goto LABEL_118;
    v127 = &v94[16 * v96];
    v129 = *(_QWORD *)v127;
    v128 = *((_QWORD *)v127 + 1);
    v107 = __OFSUB__(v128, v129);
    v130 = v128 - v129;
    if (v107)
      goto LABEL_121;
    if (v130 < v118)
      goto LABEL_14;
LABEL_83:
    v135 = v96 - 1;
    if (v96 - 1 >= v61)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x1002D8DD0);
    }
    if (!*v195)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }
    v136 = v58;
    v137 = &v94[16 * v135];
    v138 = *(_QWORD *)v137;
    v139 = &v94[16 * v96];
    v140 = *((_QWORD *)v139 + 1);
    v141 = v177;
    sub_1002DA638(*v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v137, *v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v139, *v195 + *(_QWORD *)(v171 + 72) * v140, v170);
    v177 = v141;
    if (v141)
      break;
    if (v140 < v138)
      goto LABEL_111;
    if (v96 > *((_QWORD *)v136 + 2))
      goto LABEL_112;
    *(_QWORD *)v137 = v138;
    *(_QWORD *)&v94[16 * v135 + 8] = v140;
    v142 = *((_QWORD *)v136 + 2);
    if (v96 >= v142)
      goto LABEL_113;
    v61 = v142 - 1;
    memmove(&v94[16 * v96], v139 + 16, 16 * (v142 - 1 - v96));
    v58 = v136;
    *((_QWORD *)v136 + 2) = v142 - 1;
    v124 = v142 > 2;
    v33 = v166;
    v59 = (uint64_t)v169;
    v57 = v186;
    if (!v124)
      goto LABEL_14;
  }
  v144 = v153;
LABEL_109:
  swift_bridgeObjectRelease();
  v144[2] = 0;
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002D8E80(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for StandaloneBeacon(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_1002DA3FC(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_1002DAD0C(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for StandaloneBeacon);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for StandaloneBeacon);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 32), v25 + *(int *)(v134 + 32));
    sub_1000126B0(v25, type metadata accessor for StandaloneBeacon);
    sub_1000126B0(v23, type metadata accessor for StandaloneBeacon);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for StandaloneBeacon);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for StandaloneBeacon);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 32), v33 + *(int *)(v134 + 32));
      sub_1000126B0(v33, type metadata accessor for StandaloneBeacon);
      sub_1000126B0(v32, type metadata accessor for StandaloneBeacon);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_1002DAD0C(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for StandaloneBeacon);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for StandaloneBeacon);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for StandaloneBeacon);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for StandaloneBeacon);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 32), v47 + *(int *)(v134 + 32));
          sub_1000126B0(v47, type metadata accessor for StandaloneBeacon);
          sub_1000126B0(v45, type metadata accessor for StandaloneBeacon);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for StandaloneBeacon);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for StandaloneBeacon);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002D987C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v32[1] = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v32 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v32 - v15;
  __chkstk_darwin(v14);
  v39 = (char *)v32 - v17;
  v18 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v38 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v46 = (char *)v32 - v21;
  v34 = type metadata accessor for OwnedBeaconGroup(0);
  v22 = __chkstk_darwin(v34);
  v41 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v50 = (uint64_t)v32 - v25;
  result = __chkstk_darwin(v24);
  v45 = (uint64_t)v32 - v28;
  v32[0] = a2;
  if (a3 != a2)
  {
    v32[2] = v13;
    v32[3] = v10;
    v40 = *(_QWORD *)(v27 + 72);
    v48 = v40 * a3;
    v49 = v40 * (a3 - 1);
    v33 = xmmword_100E22B00;
    v35 = a4;
    v37 = v16;
    v44 = v18;
    v36 = a3;
    v29 = *a4;
    v43 = v40 * a3;
    v30 = v45;
    sub_10005972C(v40 * a3 + v29, v45, type metadata accessor for OwnedBeaconGroup);
    v42 = v49;
    sub_10005972C(v49 + v29, v50, type metadata accessor for OwnedBeaconGroup);
    v31 = objc_autoreleasePoolPush();
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_1002DA3FC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for StandaloneBeacon(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for StandaloneBeacon);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for StandaloneBeacon);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 32)], v19 + *(int *)(v30 + 32));
      sub_1000126B0(v19, type metadata accessor for StandaloneBeacon);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for StandaloneBeacon);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for StandaloneBeacon);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for StandaloneBeacon);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1002DA638(unint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t result;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;

  v5 = v4;
  v10 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v10 - 8);
  v79 = v10;
  v11 = __chkstk_darwin(v10);
  v70 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v77 = (char *)&v68 - v14;
  v15 = __chkstk_darwin(v13);
  v75 = (char *)&v68 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - v17;
  v73 = type metadata accessor for OwnedBeaconGroup(0);
  v19 = __chkstk_darwin(v73);
  v71 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v76 = (unint64_t)&v68 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v68 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v68 - v26;
  v29 = *(_QWORD *)(v28 + 72);
  if (!v29)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    objc_autoreleasePoolPop(a4);
    __break(1u);
LABEL_67:
    objc_autoreleasePoolPop(v18);
    __break(1u);
    goto LABEL_68;
  }
  if (a2 - a1 == 0x8000000000000000 && v29 == -1)
    goto LABEL_64;
  v30 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v29 == -1)
    goto LABEL_65;
  v31 = (uint64_t)(a2 - a1) / v29;
  v82 = (char *)a1;
  v81 = (unint64_t)a4;
  v32 = v30 / v29;
  if (v31 >= v30 / v29)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      v34 = v32 * v29;
      if ((unint64_t)a4 < a2 || a2 + v34 <= (unint64_t)a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v32, v73);
      }
      else if (a4 != (void *)a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v47 = (unint64_t)a4 + v34;
      v80 = (unint64_t)a4 + v34;
      v82 = (char *)a2;
      if (v34 >= 1 && a1 < a2)
      {
        v49 = -v29;
        v50 = (uint64_t)v71;
        v68 = a1;
        v69 = (unint64_t)a4;
        v72 = v49;
        while (1)
        {
          v51 = v76;
          sub_10005972C(v47 + v49, v76, type metadata accessor for OwnedBeaconGroup);
          v52 = a2 + v49;
          sub_10005972C(a2 + v49, v50, type metadata accessor for OwnedBeaconGroup);
          v18 = (char *)objc_autoreleasePoolPush();
          sub_10084EE10(v51);
          if (v5)
            goto LABEL_67;
          objc_autoreleasePoolPop(v18);
          v53 = objc_autoreleasePoolPush();
          v54 = v70;
          sub_10084EE10(v50);
          v75 = 0;
          v55 = v72;
          v74 = a3 + v72;
          objc_autoreleasePoolPop(v53);
          v56 = v77;
          v57 = Date.compare(_:)(v54);
          v58 = a3;
          v59 = *(void (**)(char *, uint64_t))(v78 + 8);
          v60 = v54;
          v61 = v79;
          v59(v60, v79);
          v59(v56, v61);
          sub_1000126B0(v50, type metadata accessor for OwnedBeaconGroup);
          sub_1000126B0(v76, type metadata accessor for OwnedBeaconGroup);
          if (v57 == 1)
          {
            a3 = v74;
            if (v58 < a2 || v74 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v52, 1, v73);
              v5 = v75;
              v63 = v68;
              v50 = (uint64_t)v71;
              v49 = v72;
            }
            else
            {
              v62 = v58 == a2;
              v5 = v75;
              v63 = v68;
              v50 = (uint64_t)v71;
              v49 = v72;
              if (!v62)
                swift_arrayInitWithTakeBackToFront(v74, v52);
            }
            v82 += v49;
            v66 = v69;
          }
          else
          {
            v64 = v80;
            v65 = v80 + v55;
            v80 += v55;
            v63 = v68;
            v49 = v55;
            a3 = v74;
            if (v58 < v64 || v74 >= v64)
            {
              swift_arrayInitWithTakeFrontToBack(v74, v65, 1, v73);
              v52 = a2;
              v5 = v75;
              v66 = v69;
              v50 = (uint64_t)v71;
            }
            else
            {
              v66 = v69;
              v50 = (uint64_t)v71;
              if (v58 != v64)
                swift_arrayInitWithTakeBackToFront(v74, v65);
              v52 = a2;
              v5 = v75;
            }
          }
          v47 = v80;
          if (v80 > v66)
          {
            a2 = v52;
            if (v52 > v63)
              continue;
          }
          goto LABEL_62;
        }
      }
      goto LABEL_62;
    }
  }
  else if ((v31 & 0x8000000000000000) == 0)
  {
    v77 = (char *)v29;
    v33 = v31 * v29;
    if ((unint64_t)a4 < a1 || a1 + v33 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v31, v73);
    }
    else if (a4 != (void *)a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v76 = (unint64_t)a4 + v33;
    v80 = (unint64_t)a4 + v33;
    v35 = v33 < 1 || a2 >= a3;
    if (!v35)
    {
      while (1)
      {
        sub_10005972C(a2, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
        sub_10005972C((uint64_t)a4, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup);
        a4 = objc_autoreleasePoolPush();
        sub_10084EE10((uint64_t)v27);
        if (v5)
          goto LABEL_66;
        v36 = a3;
        objc_autoreleasePoolPop(a4);
        v37 = objc_autoreleasePoolPush();
        v38 = v75;
        sub_10084EE10((uint64_t)v25);
        v5 = 0;
        objc_autoreleasePoolPop(v37);
        v39 = Date.compare(_:)(v38);
        v40 = *(void (**)(char *, uint64_t))(v78 + 8);
        v41 = v38;
        v42 = v79;
        v40(v41, v79);
        v40(v18, v42);
        sub_1000126B0((uint64_t)v25, type metadata accessor for OwnedBeaconGroup);
        sub_1000126B0((uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
        v43 = (unint64_t)v82;
        if (v39 == 1)
        {
          v44 = v77;
          v45 = (unint64_t)&v77[a2];
          if ((unint64_t)v82 < a2 || (unint64_t)v82 >= v45)
          {
            swift_arrayInitWithTakeFrontToBack(v82, a2, 1, v73);
          }
          else if (v82 == (char *)a2)
          {
            v43 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v82, a2);
          }
        }
        else
        {
          v44 = v77;
          v46 = (unint64_t)&v77[v81];
          if ((unint64_t)v82 < v81 || (unint64_t)v82 >= v46)
          {
            swift_arrayInitWithTakeFrontToBack(v82, v81, 1, v73);
          }
          else if (v82 != (char *)v81)
          {
            swift_arrayInitWithTakeBackToFront(v82, v81);
          }
          v81 = v46;
          v45 = a2;
        }
        v82 = &v44[v43];
        a4 = (void *)v81;
        if (v81 < v76)
        {
          a2 = v45;
          v35 = v45 >= v36;
          a3 = v36;
          if (!v35)
            continue;
        }
        break;
      }
    }
LABEL_62:
    sub_10088E92C((unint64_t *)&v82, &v81, (uint64_t *)&v80);
    return 1;
  }
LABEL_68:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1002DAD0C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for StandaloneBeacon(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for StandaloneBeacon);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for StandaloneBeacon);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 32), v32 + *(int *)(v45 + 32));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for StandaloneBeacon);
          sub_1000126B0(v31, type metadata accessor for StandaloneBeacon);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for StandaloneBeacon);
        sub_10005972C(a4, v20, type metadata accessor for StandaloneBeacon);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 32)], v20 + *(int *)(v45 + 32));
        sub_1000126B0(v20, type metadata accessor for StandaloneBeacon);
        sub_1000126B0((uint64_t)v11, type metadata accessor for StandaloneBeacon);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088E938(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1002DB1BC(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = (_QWORD *)isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_1002DB30C((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return (_QWORD *)v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = (_QWORD *)sub_1002DB30C((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_1002DB30C(unint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  int *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;

  v49 = a2;
  v50 = a1;
  v58 = sub_10001A9A8((uint64_t *)&unk_1010F9880);
  v4 = __chkstk_darwin(v58);
  v6 = (uint64_t *)((char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v64 = (uint64_t *)((char *)&v49 - v7);
  v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  v9 = __chkstk_darwin(v8);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  v51 = 0;
  v52 = v6;
  v14 = 0;
  v61 = a3;
  v17 = a3[8];
  v16 = a3 + 8;
  v15 = v17;
  v18 = 1 << *((_BYTE *)v16 - 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v15;
  v63 = v11;
  v54 = v11 + 2;
  v55 = v16;
  v56 = (unint64_t)(v18 + 63) >> 6;
  while (v20)
  {
    v62 = (v20 - 1) & v20;
    v21 = __clz(__rbit64(v20)) | (v14 << 6);
LABEL_18:
    v25 = v61[7];
    v26 = (uint64_t *)(v61[6] + 16 * v21);
    v27 = *v26;
    v28 = v26[1];
    v29 = *(_QWORD *)(v59 + 72);
    v57 = v21;
    sub_10005972C(v25 + v29 * v21, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
    v30 = v58;
    v31 = *(int *)(v58 + 48);
    v32 = v64;
    v33 = (uint64_t)v64 + v31;
    *v64 = v27;
    v32[1] = v28;
    sub_10005972C((uint64_t)v13, (uint64_t)v32 + v31, type metadata accessor for OwnedBeaconGroup.PairingState);
    v34 = (uint64_t)v6 + *(int *)(v30 + 48);
    *v6 = v27;
    v6[1] = v28;
    sub_10005972C(v33, v34, type metadata accessor for OwnedBeaconGroup.PairingState);
    v35 = v63;
    sub_10005972C(v34, v63, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v60);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v37 = (int *)sub_10001A9A8(&qword_1010F5DC0);
        v38 = v37[16];
        v53 = v14;
        v39 = v13;
        v40 = v63;
        v41 = (uint64_t *)(v63 + v38);
        v43 = *v41;
        v42 = v41[1];
        sub_10001BBBC(v27, v28);
        sub_10001BBBC(v27, v28);
        v44 = v43;
        v6 = v52;
        sub_10001EF3C(v44, v42);
        v45 = *(unsigned __int8 *)(v54 + v37[24]);
        sub_100004048(v40 + v37[12], (uint64_t *)&unk_1010F9890);
        v46 = type metadata accessor for UUID(0);
        v47 = v40;
        v13 = v39;
        v14 = v53;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8))(v47, v46);
        goto LABEL_22;
      }
      sub_10001BBBC(v27, v28);
      sub_10001BBBC(v27, v28);
      sub_1000126B0(v63, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100004048((uint64_t)v64, (uint64_t *)&unk_1010F9880);
      sub_1000126B0(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
      result = sub_10001BC14(v27, v28);
      v20 = v62;
    }
    else
    {
      v48 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v45 = *(unsigned __int8 *)(v54 + *(int *)(v48 + 48));
      sub_10001BBBC(v27, v28);
      sub_10001BBBC(v27, v28);
      sub_100004048(v63, (uint64_t *)&unk_1010F9890);
LABEL_22:
      sub_100004048((uint64_t)v64, (uint64_t *)&unk_1010F9880);
      sub_1000126B0(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
      result = sub_10001BC14(v27, v28);
      v20 = v62;
      if (v45 == 2)
      {
        *(unint64_t *)((char *)v50 + ((v57 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v57;
        v22 = __OFADD__(v51++, 1);
        if (v22)
          goto LABEL_33;
      }
    }
  }
  v22 = __OFADD__(v14++, 1);
  if (v22)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v14 >= v56)
    return sub_10041C8DC(v50, v49, v51, v61);
  v23 = v55[v14];
  if (v23)
  {
LABEL_17:
    v62 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_18;
  }
  v24 = v14 + 1;
  if (v14 + 1 >= v56)
    return sub_10041C8DC(v50, v49, v51, v61);
  v23 = v55[v24];
  if (v23)
    goto LABEL_16;
  v24 = v14 + 2;
  if (v14 + 2 >= v56)
    return sub_10041C8DC(v50, v49, v51, v61);
  v23 = v55[v24];
  if (v23)
    goto LABEL_16;
  v24 = v14 + 3;
  if (v14 + 3 >= v56)
    return sub_10041C8DC(v50, v49, v51, v61);
  v23 = v55[v24];
  if (v23)
  {
LABEL_16:
    v14 = v24;
    goto LABEL_17;
  }
  while (1)
  {
    v14 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v14 >= v56)
      return sub_10041C8DC(v50, v49, v51, v61);
    v23 = v55[v14];
    ++v24;
    if (v23)
      goto LABEL_17;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1002DB7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F5D20 + dword_1010F5D20);
  v7 = (_QWORD *)swift_task_alloc(unk_1010F5D24);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1002DB818;
  return v9(a3, a4);
}

uint64_t sub_1002DB818(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_BYTE *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002DB874, 0, 0);
}

uint64_t sub_1002DB874()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002DB888(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  NSString v12;
  unint64_t v13;
  unint64_t v14;

  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  v6 = swift_bridgeObjectRelease();
  v13 = 0xD000000000000010;
  v14 = 0x8000000100ECF680;
  v7._countAndFlagsBits = UUID.uuidString.getter(v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a2, (uint64_t)v5, (uint64_t *)&unk_1010EA690);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v5, v9);
  }
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v8, "setObject:forKey:", isa, v12);

  swift_unknownObjectRelease(isa);
}

_QWORD *sub_1002DBA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;

  v5 = sub_10001A9A8(&qword_1010ED528);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (_QWORD *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v22[0] = v2;
    v27 = _swiftEmptyArrayStorage;
    sub_10009AD38(0, v8, 0);
    v9 = v27;
    v22[1] = *(_QWORD *)(a2 + 16);
    v23 = v7;
    v10 = (unint64_t *)(a1 + 40);
    do
    {
      v26 = v9;
      v11 = *(v10 - 1);
      v12 = *v10;
      v13 = (uint64_t)v7 + *(int *)(v25 + 48);
      *v7 = v11;
      v7[1] = v12;
      sub_10001BBBC(v11, v12);
      sub_10001BBBC(v11, v12);
      v14 = sub_10080BC6C(v11, v12);
      v15 = v14[2];
      v16 = type metadata accessor for OwnedBeaconRecord(0);
      v17 = *(_QWORD *)(v16 - 8);
      if (v15)
      {
        sub_10005972C((uint64_t)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), v13, type metadata accessor for OwnedBeaconRecord);
        v18 = 0;
      }
      else
      {
        v18 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, v18, 1, v16);
      swift_bridgeObjectRelease();
      sub_10001BC14(v11, v12);
      v9 = v26;
      v27 = v26;
      v20 = v26[2];
      v19 = v26[3];
      if (v20 >= v19 >> 1)
      {
        sub_10009AD38(v19 > 1, v20 + 1, 1);
        v9 = v27;
      }
      v10 += 2;
      v9[2] = v20 + 1;
      v7 = v23;
      sub_100005CF0((uint64_t)v23, (uint64_t)v9+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v20, &qword_1010ED528);
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_1002DBC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v30[2];
  unsigned int v31;
  uint64_t (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;

  v35 = a3;
  v36 = a4;
  v33 = a1;
  v34 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[1] = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v31 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v32 = *(uint64_t (**)(char *))(v12 + 104);
  v15 = v32(v14);
  static DispatchQoS.unspecified.getter(v15);
  v37[0] = (uint64_t)_swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v30[0] = v16;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v37, v17, v18, v5, v16);
  *(_QWORD *)(v4 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100ECF6A0, v10, v7, v14, 0);
  v19 = ((uint64_t (*)(char *, _QWORD, uint64_t))v32)(v14, v31, v11);
  static DispatchQoS.unspecified.getter(v19);
  v37[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v37, v17, v18, v5, v30[0]);
  *(_QWORD *)(v4 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100ECF6E0, v10, v7, v14, 0);
  *(_QWORD *)(v4 + 72) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v4 + 112) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v4 + 120) = xmmword_100E2C1E0;
  v20 = sub_10001A9A8(&qword_1010F5CF8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  *(_QWORD *)(v4 + 136) = PassthroughSubject.init()();
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = PassthroughSubject.init()();
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 144) = v21;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B820(v37[0]);
  v23 = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 168) = v23;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v24 = sub_100C1B7D4(v37[0]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + 176) = v24;
  *(_QWORD *)(v4 + 184) = _swiftEmptyDictionarySingleton;
  v25 = v34;
  *(_QWORD *)(v4 + 16) = v33;
  *(_QWORD *)(v4 + 24) = v25;
  v26 = v36;
  *(_QWORD *)(v4 + 32) = v35;
  *(_QWORD *)(v4 + 40) = v26;
  v27 = *(void **)(v4 + 48);
  v28 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v4 + 64) = QueueSynchronizer.init(queue:)(v27);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v37[0] = 0x7365547265646E75;
  v37[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v38, v37, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1002DC07C(_BYTE *a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _BYTE *, uint64_t);
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  void (**v46)(_QWORD, _QWORD);
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  _QWORD *v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  void *v85;
  void (**v86)(_QWORD, _QWORD);
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, _BYTE *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t aBlock[6];
  _QWORD *v104;
  _BYTE v105[16];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v8 - 8);
  v101 = v8;
  __chkstk_darwin(v8);
  v99 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v10 - 8);
  v98 = v10;
  __chkstk_darwin(v10);
  v96 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v86 - v17;
  _Block_copy(a4);
  _Block_copy(a4);
  if (qword_1010E9B08 != -1)
    swift_once(&qword_1010E9B08, sub_1002B4720);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6CA8);
  v21 = *(void (**)(char *, _BYTE *, uint64_t))(v13 + 16);
  v102 = a1;
  v94 = v21;
  v21(v18, a1, v12);
  swift_bridgeObjectRetain_n(a2, 2);
  v95 = v20;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v90 = v24;
    v91 = a3;
    v92 = v16;
    v25 = swift_slowAlloc(22, -1);
    v89 = swift_slowAlloc(64, -1);
    aBlock[0] = v89;
    *(_DWORD *)v25 = 136315394;
    v26 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v12, v26);
    v104 = (_QWORD *)sub_100016940(v27, v28, aBlock);
    v88 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    v93 = *(void (**)(char *, uint64_t))(v13 + 8);
    v93(v18, v12);
    *(_WORD *)(v25 + 12) = 2080;
    v29 = *(_QWORD *)(a2 + 16);
    v30 = _swiftEmptyArrayStorage;
    if (v29)
    {
      v86 = a4;
      v104 = _swiftEmptyArrayStorage;
      sub_10009A2F4(0, v29, 0);
      v30 = v104;
      v87 = a2;
      v31 = (unint64_t *)(a2 + 40);
      do
      {
        v32 = *(v31 - 1);
        v33 = *v31;
        sub_10001BBBC(v32, *v31);
        v34 = Data.hexString.getter(v32, v33);
        v36 = v35;
        sub_10001BC14(v32, v33);
        v104 = v30;
        v38 = v30[2];
        v37 = v30[3];
        if (v38 >= v37 >> 1)
        {
          sub_10009A2F4(v37 > 1, v38 + 1, 1);
          v30 = v104;
        }
        v31 += 2;
        v30[2] = v38 + 1;
        v39 = &v30[2 * v38];
        v39[4] = v34;
        v39[5] = v36;
        --v29;
      }
      while (v29);
      a4 = v86;
      a2 = v87;
    }
    v41 = Array.description.getter(v30, &type metadata for String);
    v43 = v42;
    swift_bridgeObjectRelease();
    v104 = (_QWORD *)sub_100016940(v41, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v88, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v90, "forceRePairing: %s, forcePairSerialNumber: %s", (uint8_t *)v25, 0x16u);
    v44 = v89;
    swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    a3 = v91;
    v16 = v92;
  }
  else
  {
    v93 = *(void (**)(char *, uint64_t))(v13 + 8);
    v93(v18, v12);

    v40 = swift_bridgeObjectRelease_n(a2, 2);
  }
  __chkstk_darwin(v40);
  v45 = v102;
  *(&v86 - 2) = (void (**)(_QWORD, _QWORD))v102;
  *(&v86 - 1) = v46;
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_1000FA494);
  v47 = (void *)aBlock[0];
  if (aBlock[0])
  {
    v48 = swift_allocObject(&unk_101066A80, 24, 7);
    swift_weakInit(v48 + 16, a3);
    v49 = (_QWORD *)swift_allocObject(&unk_101066AA8, 40, 7);
    v49[2] = v48;
    v49[3] = v47;
    v49[4] = a2;
    aBlock[4] = (uint64_t)sub_1002DCA58;
    aBlock[5] = (uint64_t)v49;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_101066AC0;
    v50 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    swift_retain();
    v51 = v47;
    v52 = v96;
    static DispatchQoS.unspecified.getter(v51);
    v104 = _swiftEmptyArrayStorage;
    v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v56 = v99;
    v57 = v54;
    v58 = v101;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v104, v57, v55, v101, v53);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v56, v50);
    _Block_release(v50);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v56, v58);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v52, v98);
    swift_release();
    swift_release();
    a4[2](a4, 0);

  }
  else
  {
    v94(v16, v45, v12);
    swift_bridgeObjectRetain_n(a2, 2);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = v16;
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(64, -1);
      aBlock[0] = v64;
      *(_DWORD *)v63 = 136315394;
      v65 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v12, v65);
      v104 = (_QWORD *)sub_100016940(v66, v67, aBlock);
      v102 = v105;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      v93(v62, v12);
      *(_WORD *)(v63 + 12) = 2080;
      v68 = *(_QWORD *)(a2 + 16);
      v69 = _swiftEmptyArrayStorage;
      v87 = a2;
      if (v68)
      {
        v101 = v64;
        v86 = a4;
        v104 = _swiftEmptyArrayStorage;
        sub_10009A2F4(0, v68, 0);
        v69 = v104;
        v70 = (unint64_t *)(a2 + 40);
        do
        {
          v71 = *(v70 - 1);
          v72 = *v70;
          sub_10001BBBC(v71, *v70);
          v73 = Data.hexString.getter(v71, v72);
          v75 = v74;
          sub_10001BC14(v71, v72);
          v104 = v69;
          v77 = v69[2];
          v76 = v69[3];
          if (v77 >= v76 >> 1)
          {
            sub_10009A2F4(v76 > 1, v77 + 1, 1);
            v69 = v104;
          }
          v70 += 2;
          v69[2] = v77 + 1;
          v78 = &v69[2 * v77];
          v78[4] = v73;
          v78[5] = v75;
          --v68;
        }
        while (v68);
        a4 = v86;
        v64 = v101;
      }
      v79 = Array.description.getter(v69, &type metadata for String);
      v81 = v80;
      swift_bridgeObjectRelease();
      v104 = (_QWORD *)sub_100016940(v79, v81, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v102, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease_n(v87, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Could not retreive peripheral for forceRePairing: %s, forcePairSerialNumber: %s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {
      v93(v16, v12);

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v82 = sub_1002DC9E4();
    v83 = swift_allocError(&type metadata for ClassicPairingSupport.Error, v82, 0, 0);
    *v84 = 0;
    _Block_copy(a4);
    v85 = (void *)_convertErrorToNSError(_:)(v83);
    ((void (**)(_QWORD, void *))a4)[2](a4, v85);

    swift_errorRelease(v83);
    _Block_release(a4);
  }
  _Block_release(a4);
  _Block_release(a4);
}

unint64_t sub_1002DC9E4()
{
  unint64_t result;

  result = qword_1010F5CF0;
  if (!qword_1010F5CF0)
  {
    result = swift_getWitnessTable("]b#", &type metadata for ClassicPairingSupport.Error);
    atomic_store(result, (unint64_t *)&qword_1010F5CF0);
  }
  return result;
}

uint64_t sub_1002DCA28()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002DCA4C()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002DCA58()
{
  uint64_t *v0;

  return sub_1002B61CC(v0[2], v0[3], v0[4]);
}

BOOL sub_1002DCA64(uint64_t a1)
{
  uint64_t v1;

  return sub_1002CE2DC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1002DCA84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002C08B8(*(uint8_t **)(v1 + 24), a1);
}

uint64_t sub_1002DCAAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC0194(a1, v1);
}

uint64_t sub_1002DCAB4()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DCAC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002C08B8(*(uint8_t **)(v1 + 24), a1);
}

uint64_t sub_1002DCAE4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1002B623C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1002DCAFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A3FEB4(*(_QWORD **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), a1);
}

uint64_t sub_1002DCB20(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002C9DA8(a1, a2, v2);
}

uint64_t sub_1002DCB28(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1002DCB54@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_100A3E91C(v1, a1);
}

uint64_t sub_1002DCB6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002C87A4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1002DCB90@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002DD5C8(a1);
}

uint64_t sub_1002DCBA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1002C8AF4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002DCC14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

uint64_t sub_1002DCD18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + v4);
  v8 = v0 + v3;
  v9 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = (_QWORD *)swift_task_alloc(dword_1010F5D6C);
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_100004A74;
  return sub_1002C8CB4(v5, v6, v8, v7, v10, v11);
}

uint64_t sub_1002DCDCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);
  v9 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  swift_release();

  return swift_deallocObject(v0, v9 + 9, v3 | 7);
}

void sub_1002DCED8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002C92C4(*(_QWORD *)(v0 + 16), (uint8_t *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002DCF3C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002C72B8(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_1002DCF60()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002DCF84@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1002C7C74(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1002DCF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v3 | 7);
}

_QWORD *sub_1002DD078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1002C7FCC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), (uint8_t *)(v1 + v4), *(uint8_t **)v5, *(_BYTE *)(v5 + 8));
}

uint64_t sub_1002DD0DC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100AF0300(v1, a1);
}

uint64_t sub_1002DD0F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A405C4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1002DD110(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002C5B48(a1, a2, v2);
}

uint64_t sub_1002DD118()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DD124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1 + 16;
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F5DA4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1010F5DA0 + dword_1010F5DA0))(a1, v4, v6, v5);
}

uint64_t sub_1002DD1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  if (*(_QWORD *)(v7 + v0 + 8))
    swift_release(*(_QWORD *)(v7 + v0 + 16));
  return swift_deallocObject(v0, v7 + 24, v3 | 7);
}

uint64_t sub_1002DD24C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v2 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = v6 + v5;
  v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + v0;
  v9 = *(_QWORD *)(v0 + 16);
  v10 = v0 + v4;
  v11 = v0 + v6;
  v12 = *(_BYTE *)(v0 + v7);
  v13 = *(_QWORD *)(v8 + 8);
  v14 = *(_QWORD *)(v8 + 16);
  v15 = (_QWORD *)swift_task_alloc(dword_1010F5DB4);
  *(_QWORD *)(v1 + 16) = v15;
  *v15 = v1;
  v15[1] = sub_100004A74;
  return sub_1002D3354(v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1002DD300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  swift_release();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002DD3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = v0 + v3;
  v7 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc(dword_1010F5DCC);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004A74;
  return sub_1002C343C(v4, v5, v6, v7);
}

uint64_t sub_1002DD47C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002C3AC8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1002DD498()
{
  return sub_1002DD5F4((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_1002DD4A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + v2;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8));
  Transaction.capture()();
  sub_1002C6E6C(v3, v4, 1, 0, v5);
}

void sub_1002DD528(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1002BF0B8(a1, v2, a2);
}

uint64_t sub_1002DD530(void *a1, char a2)
{
  uint64_t v2;

  return sub_1002C1974(a1, a2, v2);
}

uint64_t sub_1002DD540()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DD550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F5E2C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1002C1AF0(v2, v3);
}

_QWORD *sub_1002DD5A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002C11A8(a1, v1);
}

uint64_t sub_1002DD5A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002D40D4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1002DD5C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100AEFE48(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), a1);
}

uint64_t sub_1002DD5E8()
{
  return sub_1002DD5F4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DD5F4(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = type metadata accessor for BluetoothManagerDevice(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  swift_release();
  swift_release();

  v8 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1 + v6, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v1 + v6 + *(int *)(v3 + 36));
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10001BC14(*v9, v10);
  v11 = (v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;

  a1(*(_QWORD *)(v1 + v11));
  return swift_deallocObject(v1, v11 + 8, v5 | 7);
}

uint64_t sub_1002DD6F4(unint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002D4408(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002DD750()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = v0[5];
  v8 = (uint64_t)v0 + v3;
  v9 = *(_QWORD *)((char *)v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1010F5E4C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_1002D45B4(v4, v5, v6, v7, v8, v9);
}

unint64_t sub_1002DD7F4(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_1002DD808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();

  if (*(_QWORD *)(v0 + 40) >= 3uLL)
    swift_bridgeObjectRelease();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002DD90C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1002D48E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32), *(_QWORD *)(v0 + 40), (uint8_t *)(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002DD958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + v4);
  v9 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1010F5E64);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_1002D665C(v5, v6, v7, v8, v9);
}

unint64_t sub_1002DDA00(unint64_t result)
{
  if (result >= 3)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_1002DDA10(uint64_t *a1)
{
  uint64_t v1;

  return sub_1002D6124(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1002DDA2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1002DDB1C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8) + 80);
  sub_1002D62BC(a1, v4, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48), v2 + ((v5 + 56) & ~v5));
}

uint64_t sub_1002DDB74(uint64_t *a1)
{
  uint64_t v1;

  return sub_1002D6040(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1002DDB90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1002D58D4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002DDBE0()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DDBEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1 + 16;
  v6 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F5DA4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1010F5DA0 + dword_1010F5DA0))(a1, v4, v6, v5);
}

uint64_t sub_1002DDC6C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v5 = *(_QWORD *)(v4 - 8);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v26 = *(_QWORD *)(v5 + 64);
  swift_release();
  v29 = (v3 + 24) & ~v3;
  v6 = v0 + v29;
  sub_10001BC14(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  v7 = v0 + v29 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v29 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v13 = v3;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v13 = v3;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v3 = v13;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
    v10(v14, v8);
  v15 = v6 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v17 = (uint64_t *)(v6 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = v10;
  v20 = (uint64_t *)(v6 + v1[11]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    sub_10001BC14(*v20, v21);
  v22 = (v29 + v27 + v28) & ~v28;
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(v0 + v22), *(_QWORD *)(v0 + v22 + 8));
  v19(v0 + v22 + *(int *)(v4 + 24), v8);
  v23 = v0 + v22 + *(int *)(v4 + 28);
  v24 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v26 + v22 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v28 | 7);
}

void sub_1002DDFCC(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_1002CFD30(a1, v4, *(_QWORD *)(v2 + 16), v2 + v6, v2 + v9, *(void (**)(void))(v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002DE064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  double v29;
  double v30;
  void (*v31)(char *, uint64_t, uint64_t);
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  double v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, _QWORD);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[2];

  v83 = a6;
  v84 = a5;
  v81 = a3;
  v82 = a1;
  v79 = type metadata accessor for BeaconIdentifier(0);
  v8 = __chkstk_darwin(v79);
  v78 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v77 = (uint64_t)&v74 - v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v12 = __chkstk_darwin(v11);
  v75 = (uint64_t)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v74 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v80 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v74 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v74 - v24;
  __chkstk_darwin(v23);
  v27 = (char *)&v74 - v26;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v28 = sub_100C1B80C(v88[0]);
  swift_bridgeObjectRelease();
  v74 = v28;
  v29 = (double)v28;
  static Date.trustedNow.getter((uint64_t)v27);
  v76 = a2;
  v85 = v27;
  v30 = Date.timeIntervalSince(_:)(a2);
  sub_10000F9B8(a4, (uint64_t)v15, (uint64_t *)&unk_1010EA690);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v31(v22, v81, v16);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v32(v15, 1, v16) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v22, v16);
    sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v15, v16);
  }
  v33 = v85;
  v34 = Date.timeIntervalSince(_:)(v25);
  v35 = *(void (**)(char *, uint64_t))(v17 + 8);
  v35(v25, v16);
  if (v34 <= v29 || v30 <= v29)
  {
    v49 = v75;
    sub_10000F9B8(a4, v75, (uint64_t *)&unk_1010EA690);
    if (v32((char *)v49, 1, v16) == 1)
    {
      v48 = v16;
      sub_100004048(v49, (uint64_t *)&unk_1010EA690);
      v50 = 0xE500000000000000;
      v51 = 0x726576654ELL;
    }
    else
    {
      v51 = Date.description.getter();
      v50 = v52;
      v48 = v16;
      v35((char *)v49, v16);
    }
    v53 = v80;
    v54 = v78;
    v55 = v76;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v56 = type metadata accessor for Logger(0);
    sub_10001A9E8(v56, (uint64_t)qword_1011B6CA8);
    sub_10005972C(v82, v54, type metadata accessor for BeaconIdentifier);
    v31(v53, v55, v48);
    swift_bridgeObjectRetain(v50);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    v60 = v59;
    if (os_log_type_enabled(v58, v59))
    {
      v61 = swift_slowAlloc(42, -1);
      v82 = swift_slowAlloc(96, -1);
      v88[0] = v82;
      *(_DWORD *)v61 = 141558787;
      v86 = 1752392040;
      v78 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 4, v61 + 12);
      *(_WORD *)(v61 + 12) = 2081;
      LODWORD(v81) = v60;
      v62 = v35;
      v63 = type metadata accessor for UUID(0);
      v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = v63;
      v35 = v62;
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v65, v64);
      v86 = sub_100016940(v66, v67, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v54, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v61 + 22) = 2082;
      v68 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v69 = v80;
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v48, v68);
      v86 = sub_100016940(v70, v71, v88);
      v33 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 24, v61 + 32);
      swift_bridgeObjectRelease();
      v35(v69, v48);
      *(_WORD *)(v61 + 32) = 2080;
      swift_bridgeObjectRetain(v50);
      v86 = sub_100016940(v78, v50, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v61 + 34, v61 + 42);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v81, "Not force pairing %{private,mask.hash}s: lastObserved: %{public}s lastForcePaired: %s", (uint8_t *)v61, 0x2Au);
      v72 = v82;
      swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v61, -1, -1);

    }
    else
    {
      sub_1000126B0(v54, type metadata accessor for BeaconIdentifier);
      v35(v53, v48);

      swift_bridgeObjectRelease_n(v50, 2);
    }
    v47 = 0;
  }
  else
  {
    v81 = v16;
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B6CA8);
    v37 = v77;
    v38 = sub_10005972C(v82, v77, type metadata accessor for BeaconIdentifier);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(32, -1);
      v42 = swift_slowAlloc(32, -1);
      v88[0] = v42;
      *(_DWORD *)v41 = 141558531;
      v86 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      v43 = type metadata accessor for UUID(0);
      v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
      v86 = sub_100016940(v45, v46, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v37, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v41 + 22) = 2048;
      v86 = v74;
      v33 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v41 + 24, v41 + 32);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "shouldForcePair beacon %{private,mask.hash}s threshold: %ld seconds", (uint8_t *)v41, 0x20u);
      v47 = 1;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {
      sub_1000126B0(v37, type metadata accessor for BeaconIdentifier);

      v47 = 1;
    }
    v48 = v81;
  }
  v84(v47, 0);
  return ((uint64_t (*)(char *, uint64_t))v35)(v33, v48);
}

uint64_t sub_1002DE8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1002DE9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + v4);
  v9 = *(_QWORD *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1010F5E84);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004A74;
  return sub_1002D5A48(v5, v6, v7, v8, v9);
}

uint64_t sub_1002DEA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002DEB98()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1002D15E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + v2, *(void (**)(_QWORD, _QWORD))v3, *(_QWORD *)(v3 + 8));
}

uint64_t sub_1002DEBE4()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DEBF0(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1002D2D48(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1002DEC0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002DEC30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();

  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1002DED2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char *v4;
  uint8_t *v5;
  uint8_t *v6;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(char **)(v0 + 40);
  v5 = (uint8_t *)(v0 + v2);
  v6 = *(uint8_t **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8));
  Transaction.capture()();
  sub_1002C9508(v3, v4, v5, 1, v6);
}

uint64_t sub_1002DEDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);
  v9 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  swift_release();

  return swift_deallocObject(v0, v9 + 8, v3 | 7);
}

void sub_1002DEEC0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002D6C54(*(_QWORD *)(v0 + 16), (uint8_t *)(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_1002DEF28(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8) + 80);
  sub_1002C26B8(a1, v4, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_1002DEF78()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002DF0E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v1 + v6);
  v12 = *(_QWORD *)(v1 + v7);
  v13 = *(_QWORD *)(v1 + v7 + 8);
  v14 = *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_1010F5E9C);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_1002D05E4(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1002DF1BC()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_1002DF1C8()
{
  uint64_t v0;

  return sub_1002D11A4(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_1002DF1D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DF310()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8) + 80);
  return sub_1002C2AD0(v0 + ((v1 + 24) & ~v1), (uint64_t)sub_1002C2ABC, 0);
}

uint64_t sub_1002DF35C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002DF4C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1002D22E4(v0 + v2, *(_QWORD *)(v0 + v3), *(void (**)(uint64_t, uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002DF520()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

void sub_1002DF530(uint64_t a1)
{
  uint64_t v1;

  sub_1002BE314(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

void sub_1002DF538(id a1, char a2)
{
  if ((a2 & 1) == 0)

}

id sub_1002DF544(id result, char a2)
{
  if ((a2 & 1) == 0)
    return result;
  return result;
}

uint64_t sub_1002DF550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002DF5C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1002BCF34(v0 + v2, *(NSObject **)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1002DF604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_1002DF690()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002BD218(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_1002DF6DC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100AF03D8(*(_QWORD *)(v1 + 24), a1);
}

void sub_1002DF6F8(char **a1)
{
  uint64_t v1;

  sub_1002BA628(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_1002DF704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1010F5F4C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 40) = v3;
  return swift_task_switch(sub_1002BAD78, 0, 0);
}

uint64_t sub_1002DF764(uint64_t a1)
{
  uint64_t v1;

  return sub_1002BAFC0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1002DF77C()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

void sub_1002DF788()
{
  uint64_t v0;

  sub_1002C3D6C(*(void **)(v0 + 24));
  Transaction.capture()();
}

uint64_t sub_1002DF7B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1002BA030(a1, v1);
}

uint64_t sub_1002DF7C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002BB1D0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002DF7D8()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

void sub_1002DF7E4()
{
  uint64_t v0;

  sub_1002BB3E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_1002DF7F0()
{
  return sub_1002DF7FC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1002DF7FC(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1002DF83C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1002B8D04(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002DF858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002DF920(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8) + 80);
  return sub_1002B8F10(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1002DF95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v18 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_release();
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v0 + v4, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10001BC14(*v11, v12);
  v17 = v3 | v7 | 7;
  v13 = (((v18 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v13), *(_QWORD *)(v0 + v13 + 8));
  v14 = v0 + v13 + *(int *)(v5 + 24);
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v10(v0 + v13 + *(int *)(v5 + 28), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v13 + v8, v17);
}

void sub_1002DFAEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  sub_1002B8F74(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6));
}

void sub_1002DFB70(id a1)
{
  if (a1 != (id)1)

}

id sub_1002DFB80(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_1002DFB90(uint64_t a1)
{
  uint64_t v1;

  return sub_1002B7BDC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002DFBA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002DFC38()
{
  type metadata accessor for Notification(0);
  sub_1002B7E70();
}

uint64_t sub_1002DFCC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1002DD0F4(a1);
}

uint64_t sub_1002DFD08@<X0>(_BYTE *a1@<X8>)
{
  return sub_1002DCAE4(a1);
}

void sub_1002DFD1C(uint64_t a1@<X8>)
{
  sub_1002DF6DC(a1);
}

uint64_t sub_1002DFD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t Endpoint;
  unint64_t v7;

  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  Endpoint = type metadata accessor for PencilSecureLocationsFetchEndpoint(0);
  v5[22] = Endpoint;
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(Endpoint - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SearchpartyAccount(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[24] = swift_task_alloc(v7);
  v5[25] = swift_task_alloc(v7);
  return swift_task_switch(sub_1002DFDD0, v4, 0);
}

uint64_t sub_1002DFDD0()
{
  _QWORD *v0;
  _QWORD *v1;

  v0[26] = *(_QWORD *)(v0[21] + 112);
  v1 = (_QWORD *)swift_task_alloc(dword_1010F2494);
  v0[27] = v1;
  *v1 = v0;
  v1[1] = sub_1002DFE28;
  return sub_1001D5890(v0[25]);
}

uint64_t sub_1002DFE28()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002DFFAC;
  else
    v4 = sub_1002DFE8C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), 0);
}

uint64_t sub_1002DFE8C()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v1 = (_QWORD *)v0[25];
  v0[29] = v1[2];
  v2 = v1[3];
  v0[30] = v2;
  v0[31] = v1[4];
  v3 = v1[5];
  v0[32] = v3;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_1000126B0((uint64_t)v1, type metadata accessor for SearchpartyAccount);
  type metadata accessor for ServerInteractionController(0);
  v0[33] = ServerInteractionController.__allocating_init(bundleIdentifier:)(0xD00000000000001DLL, 0x8000000100EC5D30);
  v4 = (uint64_t **)swift_task_alloc(dword_1010F2494);
  v0[34] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_1002DFF48;
  return sub_1001D5890(v0[24]);
}

uint64_t sub_1002DFF48()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1002E01DC;
  else
    v4 = sub_1002DFFFC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 168), 0);
}

uint64_t sub_1002DFFAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002DFFFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v14;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v14 = *(_OWORD *)(v0 + 232);
  v3 = *(char **)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  sub_100D77B00(*(_QWORD *)(v0 + 192), v3);
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v0 + 48) = sub_1002E05A0();
  v8 = sub_100018F08((_QWORD *)(v0 + 16));
  sub_1002E05E8((uint64_t)v3, (uint64_t)v8);
  *(_QWORD *)(v0 + 80) = &type metadata for PencilSecureLocationsFetchRequest;
  v9 = sub_1002E062C();
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v0 + 88) = v9;
  *(_QWORD *)(v0 + 64) = v6;
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v0 + 120) = &type metadata for SearchpartyCredential;
  *(_QWORD *)(v0 + 128) = sub_100082460();
  v10 = swift_allocObject(&unk_1010675E8, 48, 7);
  *(_QWORD *)(v0 + 96) = v10;
  *(_OWORD *)(v10 + 16) = v14;
  *(_QWORD *)(v10 + 32) = v2;
  *(_QWORD *)(v10 + 40) = v1;
  sub_10001BD08(v7, v6);
  v11 = *((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
        + 1);
  *(_QWORD *)&v14 = (char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                  + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:);
  swift_bridgeObjectRetain(v5);
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 288) = v12;
  *v12 = v0;
  v12[1] = sub_1002E0148;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v14)(*(_QWORD *)(v0 + 136), v0 + 16, v0 + 56, v0 + 96);
}

uint64_t sub_1002E0148()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[21];
    v5 = sub_1002E02B4;
  }
  else
  {
    v6 = v2 + 2;
    v7 = (uint64_t)(v2 + 12);
    v8 = v2 + 7;
    v9 = v2[21];
    sub_1002E069C(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    v5 = sub_1002E0248;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1002E01DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
  swift_bridgeObjectRelease(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E0248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  swift_release();
  sub_1000126B0(v3, type metadata accessor for PencilSecureLocationsFetchEndpoint);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E02B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for PencilSecureLocationsFetchEndpoint);
  sub_1002E069C(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for PencilSecureLocationsFetch()
{
  return objc_opt_self(_TtC12searchpartyd26PencilSecureLocationsFetch);
}

uint64_t sub_1002E0364(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t (__cdecl *v7)();

  v3 = type metadata accessor for PencilSecureLocationsFetch();
  *(_QWORD *)(v1 + 120) = v3;
  v4 = swift_allocObject(v3, 120, 15);
  *(_QWORD *)(v1 + 128) = v4;
  swift_defaultActor_initialize(v4);
  if (a1)
  {
    *(_QWORD *)(*(_QWORD *)(v1 + 128) + 112) = a1;
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 128));
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v1 + 96, 0, 0);
    result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v1 + 56);
    if (*(_QWORD *)(v1 + 80))
    {
      sub_10000F9FC((__int128 *)(v1 + 56), v1 + 16);
      sub_10001AA44((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
      v7 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD40 + dword_1010EBD40);
      v6 = (_QWORD *)swift_task_alloc(unk_1010EBD44);
      *(_QWORD *)(v1 + 136) = v6;
      *v6 = v1;
      v6[1] = sub_1002E0494;
      return v7();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1002E0494(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 136);
  v5 = *v1;
  swift_task_dealloc(v4);
  if (a1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3 + 2);
    *(_QWORD *)(v3[16] + 112) = a1;
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(v3[16]);
  }
  else
  {
    v8 = v3[15];
    v7 = v3[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3 + 2);
    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    strcpy(v11, "AccountService");
    v11[15] = -18;
    swift_willThrow(v10);
    swift_defaultActor_destroy(v7);
    swift_deallocPartialClassInstance(v7, v8, 120, 15);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
}

unint64_t sub_1002E05A0()
{
  unint64_t result;
  uint64_t Endpoint;

  result = qword_1010F60A8;
  if (!qword_1010F60A8)
  {
    Endpoint = type metadata accessor for PencilSecureLocationsFetchEndpoint(255);
    result = swift_getWitnessTable(byte_100E70094, Endpoint);
    atomic_store(result, (unint64_t *)&qword_1010F60A8);
  }
  return result;
}

uint64_t sub_1002E05E8(uint64_t a1, uint64_t a2)
{
  uint64_t Endpoint;

  Endpoint = type metadata accessor for PencilSecureLocationsFetchEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Endpoint - 8) + 16))(a2, a1, Endpoint);
  return a2;
}

unint64_t sub_1002E062C()
{
  unint64_t result;

  result = qword_1010F60B0;
  if (!qword_1010F60B0)
  {
    result = swift_getWitnessTable(byte_100E64FFC, &type metadata for PencilSecureLocationsFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1010F60B0);
  }
  return result;
}

uint64_t sub_1002E0670()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E069C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010ECC38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for KeyUnion()
{
  return &type metadata for KeyUnion;
}

unint64_t sub_1002E06F0()
{
  unint64_t result;

  result = qword_1010F60B8;
  if (!qword_1010F60B8)
  {
    result = swift_getWitnessTable("yc#", &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_1010F60B8);
  }
  return result;
}

uint64_t sub_1002E0734(char *a1, char *a2)
{
  return sub_100510C4C(*a1, *a2);
}

Swift::Int sub_1002E0740()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 80;
  else
    v2 = 84;
  String.hash(into:)(v4, v2, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002E079C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 80;
  else
    v2 = 84;
  String.hash(into:)(a1, v2, 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_1002E07CC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 80;
  else
    v2 = 84;
  String.hash(into:)(v4, v2, 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1002E0824@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049A88, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1002E0880(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 84;
  if (*v1)
    v2 = 80;
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_1002E08A0()
{
  _BYTE *v0;

  if (*v0)
    return 80;
  else
    return 84;
}

uint64_t sub_1002E08BC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049A88, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1002E091C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002E0F18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E0944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002E0F18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002E096C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002E11E4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002E09C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002E11E4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1002E0A14(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;

  v7 = sub_10001A9A8(&qword_1010F60D8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_1002E0F18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyUnion.CodingKeys, &type metadata for KeyUnion.CodingKeys, v13, v11, v12);
  if ((a3 & 0x2000000000000000) != 0)
  {
    LOBYTE(v18) = 1;
    v20 = 0;
    sub_10001BBBC(a2, a3 & 0xDFFFFFFFFFFFFFFFLL);
    v15 = sub_1002E0FA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for KeyUnion.PayloadType, v15);
    if (!v3)
    {
      v18 = a2;
      v19 = a3 & 0xDFFFFFFFFFFFFFFFLL;
      v20 = 1;
      goto LABEL_7;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_10012C494(a2, a3);
  }
  LOBYTE(v18) = 0;
  v20 = 0;
  sub_10001BBBC(a2, a3);
  v14 = sub_1002E0FA0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for KeyUnion.PayloadType, v14);
  if (v3)
    goto LABEL_5;
  v18 = a2;
  v19 = a3;
  v20 = 1;
LABEL_7:
  v17 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v20, v7, &type metadata for Data, v17);
  sub_10012C494(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1002E0BF0(uint64_t *a1, uint64_t *a2)
{
  return sub_1002E0C44(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_1002E0C04@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1002E0D10(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002E0C2C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1002E0A14(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1002E0C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;

  if ((a2 & 0x2000000000000000) != 0)
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      sub_10012C644(a1, a2);
      sub_10012C644(a3, a4);
      v8 = a1;
      v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((a4 & 0x2000000000000000) == 0)
  {
    sub_10012C644(a1, a2);
    sub_10012C644(a3, a4);
    v8 = a1;
    v9 = a2;
LABEL_7:
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v8, v9);
    v10 = v11;
    sub_10012C494(a3, a4);
    sub_10012C494(a1, a2);
    return v10 & 1;
  }
  v10 = 0;
  return v10 & 1;
}

uint64_t sub_1002E0D10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v3 = sub_10001A9A8(&qword_1010F60C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = (uint64_t)sub_10001AA44(a1, v7);
  v10 = sub_1002E0F18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyUnion.CodingKeys, &type metadata for KeyUnion.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v18 = 0;
    v11 = sub_1002E0F5C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for KeyUnion.PayloadType, &v18, v3, &type metadata for KeyUnion.PayloadType, v11);
    v18 = 1;
    if ((v16 & 1) != 0)
    {
      v13 = sub_100036994();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
      v9 = sub_1002FB3AC(v16, v17);
    }
    else
    {
      v14 = sub_100036994();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v14);
      v9 = sub_1002FB6C8(v16, v17);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v9;
}

unint64_t sub_1002E0F18()
{
  unint64_t result;

  result = qword_1010F60C8;
  if (!qword_1010F60C8)
  {
    result = swift_getWitnessTable("ya#", &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F60C8);
  }
  return result;
}

unint64_t sub_1002E0F5C()
{
  unint64_t result;

  result = qword_1010F60D0;
  if (!qword_1010F60D0)
  {
    result = swift_getWitnessTable("Qa#", &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1010F60D0);
  }
  return result;
}

unint64_t sub_1002E0FA0()
{
  unint64_t result;

  result = qword_1010F60E0;
  if (!qword_1010F60E0)
  {
    result = swift_getWitnessTable("ia#", &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1010F60E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.PayloadType()
{
  return &type metadata for KeyUnion.PayloadType;
}

uint64_t _s12searchpartyd8KeyUnionO11PayloadTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1002E1044 + 4 * byte_100E31429[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002E1078 + 4 * byte_100E31424[v4]))();
}

uint64_t sub_1002E1078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E1080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002E1088);
  return result;
}

uint64_t sub_1002E1094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002E109CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002E10A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E10A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.CodingKeys()
{
  return &type metadata for KeyUnion.CodingKeys;
}

unint64_t sub_1002E10C8()
{
  unint64_t result;

  result = qword_1010F60E8;
  if (!qword_1010F60E8)
  {
    result = swift_getWitnessTable("!b#", &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F60E8);
  }
  return result;
}

unint64_t sub_1002E1110()
{
  unint64_t result;

  result = qword_1010F60F0;
  if (!qword_1010F60F0)
  {
    result = swift_getWitnessTable(byte_100E31670, &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1010F60F0);
  }
  return result;
}

unint64_t sub_1002E1158()
{
  unint64_t result;

  result = qword_1010F60F8;
  if (!qword_1010F60F8)
  {
    result = swift_getWitnessTable(byte_100E31508, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F60F8);
  }
  return result;
}

unint64_t sub_1002E11A0()
{
  unint64_t result;

  result = qword_1010F6100;
  if (!qword_1010F6100)
  {
    result = swift_getWitnessTable(byte_100E31530, &type metadata for KeyUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F6100);
  }
  return result;
}

unint64_t sub_1002E11E4()
{
  unint64_t result;

  result = qword_1010F6108;
  if (!qword_1010F6108)
  {
    result = swift_getWitnessTable("Ib#", &type metadata for KeyUnion.PayloadType);
    atomic_store(result, (unint64_t *)&qword_1010F6108);
  }
  return result;
}

uint64_t sub_1002E1228()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6CC0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6CC0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100ECFDC0);
}

id sub_1002E12AC()
{
  uint64_t v0;
  void *v1;
  id v2;
  objc_class *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  objc_super v9;

  v1 = *(void **)(v0 + 56);
  if (v1)
  {
    v2 = *(id *)(v0 + 56);
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for UnknownDiscoveryTrampoline();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd26UnknownDiscoveryTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    v5 = objc_msgSendSuper2(&v9, "init");
    v6 = *(void **)(v0 + 56);
    *(_QWORD *)(v0 + 56) = v5;
    v2 = v5;

    v1 = 0;
  }
  v7 = v1;
  return v2;
}

_QWORD *sub_1002E1344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = v4;
  v27 = a3;
  v28 = a4;
  v25 = a1;
  v26 = a2;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[2] = 0xD000000000000017;
  v5[3] = 0x8000000100E31770;
  sub_10001F6FC();
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  static DispatchQoS.unspecified.getter(v16);
  v29 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v18, v19, v6, v17);
  v5[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100ECFE00, v11, v8, v15, 0);
  v20 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v5[6] = XPCSessionManager.init(name:)(0xD000000000000017, 0x8000000100E31770);
  v5[7] = 0;
  v5[4] = v25;
  v21 = v26;
  v5[8] = 0;
  v5[9] = v21;
  v22 = v28;
  v5[10] = v27;
  v5[11] = v22;
  return v5;
}

uint64_t sub_1002E1574()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  _QWORD v5[6];

  v1 = *(NSObject **)(v0 + 40);
  v2 = swift_allocObject(&unk_101067900, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_1002E277C;
  *(_QWORD *)(v2 + 24) = v0;
  v5[4] = sub_10001D850;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10001D8B8;
  v5[3] = &unk_101067918;
  v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 126, 45, 27, 1);
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1002E167C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for XPCServiceDescription(0);
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MachServiceName(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(a1 + 40);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, _QWORD *))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)(0xD000000000000035, 0x8000000100ECFD80);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v12 = sub_1002E12AC();
  if (qword_1010E9B20 != -1)
LABEL_5:
    swift_once(&qword_1010E9B20, sub_1002E21F0);
  v18 = (void *)qword_1010F6110;
  v19 = (void *)objc_opt_self(NSXPCInterface);
  v20 = v18;
  v21 = objc_msgSend(v19, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPUnknownDiscoveryXPCClientProtocol);
  swift_retain_n(a1, 3);
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v9, 0, v12, v20, v21, sub_1002E2794, a1, sub_1002E2798, a1, sub_1002E279C, a1);
  XPCSessionManager.register(service:)(v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_1002E18FC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void **v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject **v23;
  NSObject *v24;
  uint64_t v25;
  void **aBlock;
  _QWORD v28[5];

  v2 = v1;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6CC0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    aBlock = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v28, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "shouldAccept: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = sub_1002E3AC8();
  v13 = NSXPCConnection.hasEntitlement<A>(_:)(v12, &type metadata for AccessoryDiscoveryEntitlement, v12);
  if ((v13 & 1) != 0)
  {
    v14 = *(NSObject **)(v2 + 40);
    v15 = swift_allocObject(&unk_101067AB8, 32, 7);
    *(_QWORD *)(v15 + 16) = v2;
    *(_QWORD *)(v15 + 24) = v5;
    v16 = swift_allocObject(&unk_101067AE0, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_1002E3B10;
    *(_QWORD *)(v16 + 24) = v15;
    v28[3] = sub_10005CBA4;
    v28[4] = v16;
    aBlock = _NSConcreteStackBlock;
    v28[0] = 1107296256;
    v28[1] = sub_10001D8B8;
    v28[2] = &unk_101067AF8;
    v17 = _Block_copy(&aBlock);
    v18 = v5;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v14, v17);
    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v16, "", 126, 87, 27, 1);
    swift_release();
    swift_release();
    if ((v17 & 1) == 0)
      return v13 & 1;
    __break(1u);
  }
  v19 = v5;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138412290;
    aBlock = (void **)&v19->isa;
    v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v28, v22 + 4, v22 + 12);
    *v23 = v19;

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing entitlement: %@", v22, 0xCu);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v23, 1, v25);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    v20 = v19;
  }

  return v13 & 1;
}

uint64_t sub_1002E1CD0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6CC0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 40);
  v13 = swift_allocObject(&unk_101067A40, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_101067A68, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1002E3A94;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_101067A80;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 126, 115, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1002E1F60(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6CC0);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 40);
  v13 = swift_allocObject(&unk_101067950, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_101067978, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1002E3C54;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_101067990;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 126, 109, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

id sub_1002E21F0()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPUnknownDiscoveryXPCProtocol);
  qword_1010F6110 = (uint64_t)result;
  return result;
}

uint64_t sub_1002E223C(_QWORD *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (!a1[8])
  {
    v4 = a1[4];
    v5 = a1[9];
    v6 = (void *)a1[10];
    v7 = a1[11];
    v8 = type metadata accessor for UnknownDiscoverySession();
    swift_allocObject(v8, 104, 7);
    swift_retain();
    swift_retain();
    v9 = v6;
    swift_retain();
    v10 = sub_100C75378(v4, v5, v9, v7);
    if (qword_1010E9B18 != -1)
      swift_once(&qword_1010E9B18, sub_1002E1228);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B6CC0);
    v12 = swift_retain();
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v18 = sub_100016940(0xD000000000000017, 0x8000000100ECFDE0, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4, v15 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Created new UnknownDiscoverySession: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      swift_release();
    }
    a1[8] = v10;
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_100C7D394(a2);
  return swift_release();
}

uint64_t sub_1002E247C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 40);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v2 + 64);
  if (!v11)
    return result;
  v12 = *(NSObject **)(v11 + 16);
  v13 = swift_allocObject(&unk_1010679C8, 32, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  v14 = swift_allocObject(&unk_1010679F0, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_1002E3A60;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101067A08;
  v15 = _Block_copy(aBlock);
  swift_retain_n(v11, 2);
  v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 126, 421, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_1002E3A78, v11, &type metadata for Bool);
  if (LOBYTE(aBlock[0]) == 1)
  {
    *(_QWORD *)(v2 + 64) = 0;
    swift_release();
    sub_100D07568();
  }
  return swift_release();
}

uint64_t sub_1002E2690()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));

  swift_release(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t sub_1002E26EC()
{
  uint64_t v0;

  sub_1002E2690();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for UnknownDiscoveryService()
{
  return objc_opt_self(_TtC12searchpartyd23UnknownDiscoveryService);
}

uint64_t sub_1002E272C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 24));
  return v1;
}

uint64_t sub_1002E275C()
{
  return sub_1002E1574();
}

uint64_t sub_1002E277C()
{
  uint64_t v0;

  return sub_1002E167C(v0);
}

uint64_t sub_1002E2784()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E27A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E27B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v17[6];

  v3 = v2;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6CC0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnknownDiscoveryService.start", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(NSObject **)(v3 + 40);
  v12 = (_QWORD *)swift_allocObject(&unk_101067D10, 40, 7);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  v13 = swift_allocObject(&unk_101067D38, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1002E3BC8;
  *(_QWORD *)(v13 + 24) = v12;
  v17[4] = sub_10005CBA4;
  v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10001D8B8;
  v17[3] = &unk_101067D50;
  v14 = _Block_copy(v17);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 126, 136, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1002E29A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void **aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;

  v42 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 64);
  v45 = v8;
  if (v15)
  {
    swift_retain();
    sub_100C758B8();
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v16 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v17 = swift_allocObject(&unk_101067DD8, 32, 7);
    *(_QWORD *)(v17 + 16) = v42;
    *(_QWORD *)(v17 + 24) = a3;
    v51 = sub_1002E3C58;
    v52 = v17;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100016FB8;
    v50 = &unk_101067DF0;
    v18 = _Block_copy(&aBlock);
    v19 = swift_retain();
    static DispatchQoS.unspecified.getter(v19);
    v46 = _swiftEmptyArrayStorage;
    v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v22 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v21, v22, v5, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v45);
  }
  else
  {
    v40 = a3;
    v41 = v10;
    v23 = v42;
    if (qword_1010E9B18 != -1)
      swift_once(&qword_1010E9B18, sub_1002E1228);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6CC0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No session to start discovery", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v29 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v30 = swift_allocObject(&unk_101067D88, 32, 7);
    v31 = v40;
    *(_QWORD *)(v30 + 16) = v23;
    *(_QWORD *)(v30 + 24) = v31;
    v51 = sub_1002E3C58;
    v52 = v30;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100016FB8;
    v50 = &unk_101067DA0;
    v32 = _Block_copy(&aBlock);
    v33 = swift_retain();
    v34 = v41;
    static DispatchQoS.unspecified.getter(v33);
    v46 = _swiftEmptyArrayStorage;
    v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v37 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v36, v37, v5, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v7, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v45);
  }
  return swift_release();
}

uint64_t sub_1002E2E64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v17[6];

  v3 = v2;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6CC0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnknownDiscoveryService.stopUnknownDiscovery", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(NSObject **)(v3 + 40);
  v12 = (_QWORD *)swift_allocObject(&unk_101067BF8, 40, 7);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  v13 = swift_allocObject(&unk_101067C20, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1002E3BA8;
  *(_QWORD *)(v13 + 24) = v12;
  v17[4] = sub_10005CBA4;
  v17[5] = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_10001D8B8;
  v17[3] = &unk_101067C38;
  v14 = _Block_copy(v17);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 126, 151, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1002E3054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void **aBlock;
  uint64_t v48;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;

  v42 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 64);
  v45 = v8;
  if (v15)
  {
    swift_retain();
    sub_100E07630();
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v16 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v17 = swift_allocObject(&unk_101067CC0, 32, 7);
    *(_QWORD *)(v17 + 16) = v42;
    *(_QWORD *)(v17 + 24) = a3;
    v51 = sub_1002A3AD4;
    v52 = v17;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100016FB8;
    v50 = &unk_101067CD8;
    v18 = _Block_copy(&aBlock);
    v19 = swift_retain();
    static DispatchQoS.unspecified.getter(v19);
    v46 = _swiftEmptyArrayStorage;
    v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v22 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v21, v22, v5, v20);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v45);
  }
  else
  {
    v40 = a3;
    v41 = v10;
    v23 = v42;
    if (qword_1010E9B18 != -1)
      swift_once(&qword_1010E9B18, sub_1002E1228);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6CC0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No session to stop discovery", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v29 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v30 = swift_allocObject(&unk_101067C70, 32, 7);
    v31 = v40;
    *(_QWORD *)(v30 + 16) = v23;
    *(_QWORD *)(v30 + 24) = v31;
    v51 = sub_1002E3C58;
    v52 = v30;
    aBlock = _NSConcreteStackBlock;
    v48 = 1107296256;
    v49 = sub_100016FB8;
    v50 = &unk_101067C88;
    v32 = _Block_copy(&aBlock);
    v33 = swift_retain();
    v34 = v41;
    static DispatchQoS.unspecified.getter(v33);
    v46 = _swiftEmptyArrayStorage;
    v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v37 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v36, v37, v5, v35);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v7, v32);
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v34, v45);
  }
  return swift_release();
}

uint64_t sub_1002E3518(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  id v17;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v20[6];

  v4 = v3;
  if (qword_1010E9B18 != -1)
    swift_once(&qword_1010E9B18, sub_1002E1228);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6CC0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "UnknownDiscoveryService.fetchEncryptedPayload", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(NSObject **)(v4 + 40);
  v14 = (_QWORD *)swift_allocObject(&unk_101067B30, 48, 7);
  v14[2] = v4;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a1;
  v15 = swift_allocObject(&unk_101067B58, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1002E3B5C;
  *(_QWORD *)(v15 + 24) = v14;
  v20[4] = sub_10005CBA4;
  v20[5] = v15;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256;
  v20[2] = sub_10001D8B8;
  v20[3] = &unk_101067B70;
  v16 = _Block_copy(v20);
  swift_retain();
  swift_retain();
  v17 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v13, v16);
  _Block_release(v16);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v15, "", 126, 166, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1002E3710(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 64))
  {
    swift_retain();
    sub_100C748B0(a4, a2, a3);
  }
  else
  {
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    v19 = (void *)static OS_dispatch_queue.global(qos:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v20 = swift_allocObject(&unk_101067BA8, 32, 7);
    *(_QWORD *)(v20 + 16) = a2;
    *(_QWORD *)(v20 + 24) = a3;
    aBlock[4] = sub_1002E3B9C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101067BC0;
    v21 = _Block_copy(aBlock);
    v22 = swift_retain();
    static DispatchQoS.unspecified.getter(v22);
    v29 = _swiftEmptyArrayStorage;
    v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v25 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v24, v25, v8, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v27);
  }
  return swift_release();
}

uint64_t sub_1002E39C4(void (*a1)(char *))
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  a1(v4);
  return sub_100027CE0((uint64_t)v4);
}

void sub_1002E3A60()
{
  uint64_t v0;

  sub_100C7D8E4(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002E3A68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3A78@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100C752E4(v1, a1);
}

uint64_t sub_1002E3A94()
{
  uint64_t v0;

  return sub_1002E247C(*(void **)(v0 + 24));
}

uint64_t sub_1002E3AB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1002E3AC8()
{
  unint64_t result;

  result = qword_1010F6200;
  if (!qword_1010F6200)
  {
    result = swift_getWitnessTable(byte_100E59BF0, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010F6200);
  }
  return result;
}

uint64_t sub_1002E3B10()
{
  uint64_t v0;

  return sub_1002E223C(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1002E3B18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3B28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E3B5C()
{
  uint64_t v0;

  return sub_1002E3710(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1002E3B68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3B78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3B9C()
{
  uint64_t v0;

  return sub_1002E39C4(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_1002E3BA8()
{
  uint64_t *v0;

  return sub_1002E3054(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002E3BB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3BC8()
{
  uint64_t *v0;

  return sub_1002E29A4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002E3BD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E3C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E3C68);
}

uint64_t sub_1002E3C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1002E3CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E3CB0);
}

uint64_t sub_1002E3CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FetchDevicesEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F6260;
  if (!qword_1010F6260)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchDevicesEndpoint);
  return result;
}

uint64_t storeEnumTagSinglePayload for LocationSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1002E3D78 + 4 * byte_100E31825[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1002E3DAC + 4 * byte_100E31820[v4]))();
}

uint64_t sub_1002E3DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E3DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002E3DBCLL);
  return result;
}

uint64_t sub_1002E3DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002E3DD0);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1002E3DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E3DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationSource()
{
  return &type metadata for LocationSource;
}

uint64_t sub_1002E3DF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002E3E2C + 4 * byte_100E3182A[a1]))(0x6E776F6E6B6E752ELL, 0xE800000000000000);
}

unint64_t sub_1002E3E2C()
{
  return 0xD000000000000017;
}

unint64_t sub_1002E3FD8@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1002E41A8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002E4000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002E41B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1002E405C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1002E41B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1002E40A8(_QWORD *a1@<X8>)
{
  *a1 = &off_101049B28;
}

uint64_t sub_1002E40B8()
{
  unsigned __int8 *v0;

  return sub_1002E3DF8(*v0);
}

unint64_t sub_1002E40C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F6298;
  if (!qword_1010F6298)
  {
    v1 = sub_10001F784(&qword_1010F62A0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F6298);
  }
  return result;
}

unint64_t sub_1002E4114()
{
  unint64_t result;

  result = qword_1010F62A8;
  if (!qword_1010F62A8)
  {
    result = swift_getWitnessTable("!f#", &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1010F62A8);
  }
  return result;
}

BOOL sub_1002E4158(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_1002E416C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1002E4180(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1002E4194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_1002E41A8(unint64_t result)
{
  if (result >= 0x13)
    return 19;
  return result;
}

unint64_t sub_1002E41B8()
{
  unint64_t result;

  result = qword_1010F62B0;
  if (!qword_1010F62B0)
  {
    result = swift_getWitnessTable("Qf#", &type metadata for LocationSource);
    atomic_store(result, (unint64_t *)&qword_1010F62B0);
  }
  return result;
}

uint64_t destroy for AirPodsSWSendPairingDataCommandPayload(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_10001BC14(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  sub_10001BC14(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168));
  sub_10001BC14(*(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 184));
  sub_10001BC14(*(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200));
  sub_10001BC14(*(_QWORD *)(a1 + 216), *(_QWORD *)(a1 + 224));
  sub_10001BC14(*(_QWORD *)(a1 + 232), *(_QWORD *)(a1 + 240));
  return sub_10001BC14(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 256));
}

uint64_t initializeWithCopy for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v24, v25);
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v26, v27);
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v28, v29);
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v30 = *(_QWORD *)(a2 + 216);
  v31 = *(_QWORD *)(a2 + 224);
  sub_10001BBBC(v30, v31);
  *(_QWORD *)(a1 + 216) = v30;
  *(_QWORD *)(a1 + 224) = v31;
  v32 = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(a2 + 240);
  sub_10001BBBC(v32, v33);
  *(_QWORD *)(a1 + 232) = v32;
  *(_QWORD *)(a1 + 240) = v33;
  v35 = *(_QWORD *)(a2 + 248);
  v34 = *(_QWORD *)(a2 + 256);
  sub_10001BBBC(v35, v34);
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v34;
  return a1;
}

uint64_t assignWithCopy for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v20, v21);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v24, v25);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v28, v29);
  v30 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a2 + 112);
  v33 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v32, v33);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  sub_10001BC14(v34, v35);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 128);
  v39 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 144);
  v41 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 144);
  v43 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v41;
  sub_10001BC14(v42, v43);
  v44 = *(_QWORD *)(a2 + 160);
  v45 = *(_QWORD *)(a2 + 168);
  sub_10001BBBC(v44, v45);
  v46 = *(_QWORD *)(a1 + 160);
  v47 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 160) = v44;
  *(_QWORD *)(a1 + 168) = v45;
  sub_10001BC14(v46, v47);
  v48 = *(_QWORD *)(a2 + 176);
  v49 = *(_QWORD *)(a2 + 184);
  sub_10001BBBC(v48, v49);
  v50 = *(_QWORD *)(a1 + 176);
  v51 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v48;
  *(_QWORD *)(a1 + 184) = v49;
  sub_10001BC14(v50, v51);
  v52 = *(_QWORD *)(a2 + 192);
  v53 = *(_QWORD *)(a2 + 200);
  sub_10001BBBC(v52, v53);
  v54 = *(_QWORD *)(a1 + 192);
  v55 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v52;
  *(_QWORD *)(a1 + 200) = v53;
  sub_10001BC14(v54, v55);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v56 = *(_QWORD *)(a2 + 216);
  v57 = *(_QWORD *)(a2 + 224);
  sub_10001BBBC(v56, v57);
  v58 = *(_QWORD *)(a1 + 216);
  v59 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 216) = v56;
  *(_QWORD *)(a1 + 224) = v57;
  sub_10001BC14(v58, v59);
  v60 = *(_QWORD *)(a2 + 232);
  v61 = *(_QWORD *)(a2 + 240);
  sub_10001BBBC(v60, v61);
  v62 = *(_QWORD *)(a1 + 232);
  v63 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v60;
  *(_QWORD *)(a1 + 240) = v61;
  sub_10001BC14(v62, v63);
  v65 = *(_QWORD *)(a2 + 248);
  v64 = *(_QWORD *)(a2 + 256);
  sub_10001BBBC(v65, v64);
  v66 = *(_QWORD *)(a1 + 248);
  v67 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 248) = v65;
  *(_QWORD *)(a1 + 256) = v64;
  sub_10001BC14(v66, v67);
  return a1;
}

uint64_t assignWithTake for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a1 + 160);
  v25 = *(_QWORD *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001BC14(v24, v25);
  v26 = *(_QWORD *)(a1 + 176);
  v27 = *(_QWORD *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a1 + 192);
  v29 = *(_QWORD *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001BC14(v28, v29);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v30 = *(_QWORD *)(a1 + 216);
  v31 = *(_QWORD *)(a1 + 224);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a1 + 232);
  v33 = *(_QWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  sub_10001BC14(v32, v33);
  v34 = *(_QWORD *)(a1 + 248);
  v35 = *(_QWORD *)(a1 + 256);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  sub_10001BC14(v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 264))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWSendPairingDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 264) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 264) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWSendPairingDataCommandPayload()
{
  return &type metadata for AirPodsSWSendPairingDataCommandPayload;
}

uint64_t sub_1002E4824(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v46, v3, v4);
  v45 = *v1;
  v5 = v47;
  v6 = v48;
  sub_10009F5D0((uint64_t)v46, v47);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v45 = v1[2];
    v8 = v47;
    v9 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v8, v9);
    v45 = v1[1];
    v10 = v47;
    v11 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v10, v11);
    v45 = v1[3];
    v12 = v47;
    v13 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v12, v13);
    v45 = v1[4];
    v14 = v47;
    v15 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v14, v15);
    v45 = v1[5];
    v16 = v47;
    v17 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v16, v17);
    v45 = v1[6];
    v18 = v47;
    v19 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v18, v19);
    v45 = v1[7];
    v20 = v47;
    v21 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v20, v21);
    v45 = v1[8];
    v22 = v47;
    v23 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v22, v23);
    v45 = v1[9];
    v24 = v47;
    v25 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v24, v25);
    v45 = v1[10];
    v26 = v47;
    v27 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v26, v27);
    v45 = v1[11];
    v28 = v47;
    v29 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v28, v29);
    v45 = v1[12];
    v30 = v47;
    v31 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v30, v31);
    LOBYTE(v45) = *((_BYTE *)v1 + 208);
    v32 = sub_100059570();
    v33 = FixedWidthInteger.data.getter(&type metadata for UInt8, v32);
    v35 = v34;
    *(_QWORD *)&v45 = v33;
    *((_QWORD *)&v45 + 1) = v34;
    v36 = v47;
    v37 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v36, v37);
    sub_10001BC14(v33, v35);
    v45 = *(__int128 *)((char *)v1 + 216);
    v38 = v47;
    v39 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v38, v39);
    v45 = *(__int128 *)((char *)v1 + 232);
    v40 = v47;
    v41 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v40, v41);
    v45 = *(__int128 *)((char *)v1 + 248);
    v42 = v47;
    v43 = v48;
    sub_10009F5D0((uint64_t)v46, v47);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v45, &type metadata for Data, v7, v42, v43);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v46);
}

void *sub_1002E4D48@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE __src[264];

  result = sub_1002E4FF0(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x108uLL);
  return result;
}

uint64_t sub_1002E4D98(_QWORD *a1)
{
  return sub_1002E4824(a1);
}

unint64_t sub_1002E4DAC(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1002E4DD8();
  result = sub_10024D550();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1002E4DD8()
{
  unint64_t result;

  result = qword_1010F62B8;
  if (!qword_1010F62B8)
  {
    result = swift_getWitnessTable(byte_100E31A40, &type metadata for AirPodsSWSendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F62B8);
  }
  return result;
}

void sub_1002E4E1C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X7 }
}

void sub_1002E4EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (BYTE6(a2) == 32)
    __asm { BR              X16 }
  __break(1u);
  JUMPOUT(0x1002E4FCCLL);
}

void *sub_1002E4FF0@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint8_t *v46;
  _DWORD *v47;
  _DWORD *v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint8_t *v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  _DWORD *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD v221[3];
  uint64_t v222;
  uint64_t v223;
  _BYTE v224[264];
  uint64_t v225;
  uint64_t v226;

  v5 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v180 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v221, v8, v9);
  v10 = v222;
  v11 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v10, v11);
  if (v2)
    goto LABEL_4;
  v14 = v13;
  v218 = v12;
  v16 = v222;
  v15 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v216 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v16, v15);
  v217 = v17;
  v18 = v222;
  v19 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v20 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v18, v19);
  v25 = v21;
  v215 = v20;
  v219 = v20;
  v220 = v21;
  v26 = sub_100035530();
  if (DataProtocol.intValue.getter(&type metadata for Data, v26) < 1)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7E28);
    v41 = v215;
    v42 = sub_10001BBBC(v215, v25);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v214 = v25;
      v46 = v45;
      v213 = v14;
      *(_DWORD *)v45 = 134217984;
      v47 = v45 + 12;
      v212 = v45 + 4;
      v219 = v41;
      v220 = v214;
      v219 = DataProtocol.intValue.getter(&type metadata for Data, v26);
      v48 = v47;
      v14 = v213;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, &v220, v212, v48);
      sub_10001BC14(v41, v214);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Invalid number of beacons: %ld", v46, 0xCu);
      v49 = v46;
      v25 = v214;
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_10001BC14(v41, v25);
    }

    v50 = type metadata accessor for BinaryEncodingError(0);
    v51 = sub_1001120A4();
    swift_allocError(v50, v51, 0, 0);
    v53 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v52, enum case for BinaryEncodingError.encodingError(_:), v50);
    swift_willThrow(v53);
    sub_10001BC14(v41, v25);
    sub_10001BC14(v216, v217);
    v22 = v218;
    v23 = v14;
    goto LABEL_3;
  }
  v213 = v14;
  v214 = v25;
  v27 = v222;
  v28 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v29 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v27, v28);
  v31 = v30;
  v219 = v215;
  v220 = v214;
  v32 = &v219;
  v33 = DataProtocol.intValue.getter(&type metadata for Data, v26);
  v34 = v33 - 1;
  if (__OFSUB__(v33, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  v35 = 20 * v34;
  if ((unsigned __int128)(v34 * (__int128)20) >> 64 != (20 * v34) >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v35 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v36 = Data.subdata(in:)(0, v35, v29, v31);
  v211 = v31;
  v212 = (_DWORD *)v37;
  v210 = v29;
  v38 = v222;
  v39 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v207 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v38, v39);
  v208 = v54;
  v209 = v36;
  v55 = v222;
  v56 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v205 = dispatch thunk of BinaryDecodingContaining.decode(length:)(64, v55, v56);
  v206 = v57;
  v58 = v222;
  v59 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v203 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1900, v58, v59);
  v204 = v60;
  v61 = v222;
  v62 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v63 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v61, v62);
  v65 = v63;
  v66 = v64;
  v67 = sub_10001BBBC(v63, v64);
  static Endianness.current.getter(v67);
  sub_100112060();
  FixedWidthInteger.init(data:ofEndianness:)(&v219, v65, v66, v7);
  if (BYTE2(v219) == 1)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v68 = type metadata accessor for Logger(0);
    sub_10001A9E8(v68, (uint64_t)qword_1011B7E28);
    sub_10001BBBC(v65, v66);
    v69 = sub_10001BBBC(v65, v66);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter(v70);
    v72 = v65;
    if (os_log_type_enabled(v70, v71))
    {
      v73 = (uint8_t *)swift_slowAlloc(12, -1);
      v202 = swift_slowAlloc(32, -1);
      v219 = v202;
      *(_DWORD *)v73 = 136315138;
      v201 = v73 + 4;
      v74 = Data.hexString.getter(v65, v66);
      v225 = sub_100016940(v74, v75, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v201, v73 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v65, v66);
      sub_10001BC14(v65, v66);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Invalid certs length: %s", v73, 0xCu);
      v76 = v202;
      swift_arrayDestroy(v202, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v73, -1, -1);
    }
    else
    {
      sub_10001BC14(v65, v66);
      sub_10001BC14(v65, v66);
    }

    v100 = type metadata accessor for BinaryEncodingError(0);
    v101 = sub_1001120A4();
    swift_allocError(v100, v101, 0, 0);
    v103 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v100 - 8) + 104))(v102, enum case for BinaryEncodingError.encodingError(_:), v100);
    swift_willThrow(v103);
    v104 = v72;
    v105 = v66;
    goto LABEL_51;
  }
  v201 = (uint8_t *)v65;
  v202 = v66;
  v77 = (unsigned __int16)v219;
  v79 = v203;
  v78 = v204;
  sub_10001BBBC(v203, v204);
  sub_1002F7C0C(v77, v79, v78);
  v199 = v219;
  v200 = v220;
  v80 = v222;
  v81 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v197 = dispatch thunk of BinaryDecodingContaining.decode(length:)(576, v80, v81);
  v198 = v82;
  v83 = v222;
  v84 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v195 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v83, v84);
  v196 = v85;
  v87 = v195;
  v86 = v85;
  v88 = sub_10001BBBC(v195, v85);
  static Endianness.current.getter(v88);
  FixedWidthInteger.init(data:ofEndianness:)(&v219, v87, v86, v7);
  if (BYTE2(v219) == 1)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v89 = type metadata accessor for Logger(0);
    sub_10001A9E8(v89, (uint64_t)qword_1011B7E28);
    v91 = v195;
    v90 = v196;
    sub_10001BBBC(v195, v196);
    v92 = sub_10001BBBC(v91, v90);
    v32 = Logger.logObject.getter(v92);
    v93 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(12, -1);
      v194 = swift_slowAlloc(32, -1);
      v219 = v194;
      *(_DWORD *)v94 = 136315138;
      v193 = v94 + 4;
      v96 = v195;
      v95 = v196;
      v97 = Data.hexString.getter(v195, v196);
      v225 = sub_100016940(v97, v98, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v193, v94 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v96, v95);
      sub_10001BC14(v96, v95);
      _os_log_impl((void *)&_mh_execute_header, v32, v93, "Invalid CSR length: %s", v94, 0xCu);
      v99 = v194;
      swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v94, -1, -1);
LABEL_37:

      v132 = type metadata accessor for BinaryEncodingError(0);
      v133 = sub_1001120A4();
      swift_allocError(v132, v133, 0, 0);
      v135 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v132 - 8) + 104))(v134, enum case for BinaryEncodingError.encodingError(_:), v132);
      swift_willThrow(v135);
LABEL_50:
      sub_10001BC14(v195, v196);
      sub_10001BC14(v197, v198);
      sub_10001BC14(v199, v200);
      v104 = (uint64_t)v201;
      v105 = v202;
LABEL_51:
      sub_10001BC14(v104, v105);
      sub_10001BC14(v203, v204);
      sub_10001BC14(v205, v206);
      sub_10001BC14(v207, v208);
      sub_10001BC14(v209, (unint64_t)v212);
      sub_10001BC14(v210, v211);
      sub_10001BC14(v215, v214);
      sub_10001BC14(v216, v217);
      v22 = v218;
      v23 = v213;
LABEL_3:
      sub_10001BC14(v22, v23);
LABEL_4:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v221);
      return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    }
LABEL_36:
    v131 = v195;
    v130 = v196;
    sub_10001BC14(v195, v196);
    sub_10001BC14(v131, v130);
    goto LABEL_37;
  }
  v106 = (unsigned __int16)v219;
  v108 = v197;
  v107 = v198;
  sub_10001BBBC(v197, v198);
  sub_1002F7C0C(v106, v108, v107);
  v193 = (uint8_t *)v219;
  v194 = v220;
  v109 = v222;
  v110 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v191 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v109, v110);
  v192 = v111;
  v112 = v222;
  v113 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v189 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v112, v113);
  v190 = v114;
  v116 = v189;
  v115 = v114;
  v117 = sub_10001BBBC(v189, v114);
  static Endianness.current.getter(v117);
  sub_100059570();
  FixedWidthInteger.init(data:ofEndianness:)(&v219, v116, v115, v7);
  if (BYTE1(v219) == 1)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v118 = type metadata accessor for Logger(0);
    sub_10001A9E8(v118, (uint64_t)qword_1011B7E28);
    v120 = v189;
    v119 = v190;
    sub_10001BBBC(v189, v190);
    v121 = sub_10001BBBC(v120, v119);
    v122 = Logger.logObject.getter(v121);
    v123 = static os_log_type_t.error.getter(v122);
    if (os_log_type_enabled(v122, v123))
    {
      v124 = (uint8_t *)swift_slowAlloc(12, -1);
      v188 = swift_slowAlloc(32, -1);
      v219 = v188;
      *(_DWORD *)v124 = 136315138;
      v187 = v124 + 4;
      v126 = v189;
      v125 = v190;
      v127 = Data.hexString.getter(v189, v190);
      v225 = sub_100016940(v127, v128, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v187, v124 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v126, v125);
      sub_10001BC14(v126, v125);
      _os_log_impl((void *)&_mh_execute_header, v122, v123, "Invalid signature length: %s", v124, 0xCu);
      v129 = v188;
      swift_arrayDestroy(v188, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v124, -1, -1);
    }
    else
    {
      v157 = v189;
      v156 = v190;
      sub_10001BC14(v189, v190);
      sub_10001BC14(v157, v156);
    }

    v158 = type metadata accessor for BinaryEncodingError(0);
    v159 = sub_1001120A4();
    swift_allocError(v158, v159, 0, 0);
    v161 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v158 - 8) + 104))(v160, enum case for BinaryEncodingError.encodingError(_:), v158);
    swift_willThrow(v161);
LABEL_49:
    sub_10001BC14(v189, v190);
    sub_10001BC14(v191, v192);
    sub_10001BC14((uint64_t)v193, v194);
    goto LABEL_50;
  }
  v136 = v219;
  v138 = v191;
  v137 = v192;
  sub_10001BBBC(v191, v192);
  sub_1002F7C0C(v136, v138, v137);
  v187 = (uint8_t *)v219;
  v188 = v220;
  v139 = v222;
  v140 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v185 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v139, v140);
  v186 = v141;
  v142 = v222;
  v143 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v183 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v142, v143);
  v184 = v144;
  v146 = v183;
  v145 = v144;
  v147 = sub_10001BBBC(v183, v144);
  static Endianness.current.getter(v147);
  FixedWidthInteger.init(data:ofEndianness:)(&v219, v146, v145, v7);
  if ((v219 & 0x100) != 0 || v219 > 3u)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v162 = type metadata accessor for Logger(0);
    sub_10001A9E8(v162, (uint64_t)qword_1011B7E28);
    v164 = v183;
    v163 = v184;
    sub_10001BBBC(v183, v184);
    v165 = sub_10001BBBC(v164, v163);
    v166 = Logger.logObject.getter(v165);
    v167 = static os_log_type_t.error.getter(v166);
    if (os_log_type_enabled(v166, v167))
    {
      v168 = (uint8_t *)swift_slowAlloc(12, -1);
      v182 = swift_slowAlloc(32, -1);
      v219 = v182;
      *(_DWORD *)v168 = 136315138;
      v181 = v168 + 4;
      v170 = v183;
      v169 = v184;
      v171 = Data.hexString.getter(v183, v184);
      v225 = sub_100016940(v171, v172, &v219);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, &v226, v181, v168 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v170, v169);
      sub_10001BC14(v170, v169);
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "Invalid beaconPartId: %s", v168, 0xCu);
      v173 = v182;
      swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v173, -1, -1);
      swift_slowDealloc(v168, -1, -1);
    }
    else
    {
      v175 = v183;
      v174 = v184;
      sub_10001BC14(v183, v184);
      sub_10001BC14(v175, v174);
    }

    v176 = type metadata accessor for BinaryEncodingError(0);
    v177 = sub_1001120A4();
    swift_allocError(v176, v177, 0, 0);
    v179 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v176 - 8) + 104))(v178, enum case for BinaryEncodingError.encodingError(_:), v176);
    swift_willThrow(v179);
    sub_10001BC14(v183, v184);
    sub_10001BC14(v185, v186);
    sub_10001BC14((uint64_t)v187, v188);
    goto LABEL_49;
  }
  v148 = v222;
  v149 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v182 = dispatch thunk of BinaryDecodingContaining.decode(length:)(10, v148, v149);
  v150 = v222;
  v151 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  v152 = dispatch thunk of BinaryDecodingContaining.decode(length:)(16, v150, v151);
  v180 = v153;
  v181 = (uint8_t *)v152;
  v154 = v222;
  v155 = v223;
  sub_10009F5D0((uint64_t)v221, v222);
  dispatch thunk of BinaryDecodingContaining.decode(length:)(18, v154, v155);
  sub_10001BC14(v210, v211);
  sub_10001BC14(v183, v184);
  sub_10001BC14(v191, v192);
  sub_10001BC14(v197, v198);
  sub_10001BC14(v203, v204);
  sub_1002E4E1C(v218, v213);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v221);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return memcpy(a2, v224, 0x108uLL);
}

void sub_1002E61FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t i;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  _OWORD v41[2];
  _OWORD v42[2];
  uint64_t v43;
  int64_t v44;

  v1 = a1;
  v30 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v44 = (unint64_t)(v2 + 63) >> 6;
  v5 = (char *)v42 + 8;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  v29 = v8;
  if (v4)
    goto LABEL_36;
LABEL_6:
  v9 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v9 < v44)
    {
      v10 = *(_QWORD *)(v30 + 8 * v9);
      ++v6;
      if (v10)
        goto LABEL_21;
      v6 = v9 + 1;
      if (v9 + 1 >= v44)
        goto LABEL_37;
      v10 = *(_QWORD *)(v30 + 8 * v6);
      if (v10)
        goto LABEL_21;
      v6 = v9 + 2;
      if (v9 + 2 >= v44)
        goto LABEL_37;
      v10 = *(_QWORD *)(v30 + 8 * v6);
      if (v10)
        goto LABEL_21;
      v6 = v9 + 3;
      if (v9 + 3 >= v44)
        goto LABEL_37;
      v10 = *(_QWORD *)(v30 + 8 * v6);
      if (v10)
      {
LABEL_21:
        v4 = (v10 - 1) & v10;
        for (i = __clz(__rbit64(v10)) + (v6 << 6); ; i = v28 | (v6 << 6))
        {
          sub_10010F9DC(*(_QWORD *)(v1 + 48) + 40 * i, (uint64_t)v41);
          sub_100016A30(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v5);
          v39[0] = v42[0];
          v39[1] = v42[1];
          v40 = v43;
          v38[0] = v41[0];
          v38[1] = v41[1];
          sub_10010F9DC((uint64_t)v38, (uint64_t)&v31);
          if (swift_dynamicCast(&v34, &v31, &type metadata for AnyHashable, &type metadata for String, 6))
          {
            v35 = v34;
            sub_100016A30((uint64_t)v39 + 8, (uint64_t)&v31);
            v13 = sub_10001A9A8(&qword_101103A80);
            swift_dynamicCast(&v36, &v31, (char *)&type metadata for Any + 8, v13, 7);
          }
          else
          {
            v14 = v5;
            if (qword_1010EA3C8 != -1)
              swift_once(&qword_1010EA3C8, sub_100BECC74);
            v15 = type metadata accessor for Logger(0);
            sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
            v16 = sub_10010F9DC((uint64_t)v38, (uint64_t)&v31);
            v17 = Logger.logObject.getter(v16);
            v18 = static os_log_type_t.error.getter(v17);
            if (os_log_type_enabled(v17, v18))
            {
              v19 = swift_slowAlloc(12, -1);
              v20 = swift_slowAlloc(32, -1);
              *(_QWORD *)&v34 = v20;
              *(_DWORD *)v19 = 136446210;
              v21 = AnyHashable.description.getter();
              *(_QWORD *)(v19 + 4) = sub_100016940(v21, v22, (uint64_t *)&v34);
              swift_bridgeObjectRelease();
              sub_1002EAB4C((uint64_t)&v31);
              _os_log_impl((void *)&_mh_execute_header, v17, v18, "Dropping non-String metadata key: %{public}s", (uint8_t *)v19, 0xCu);
              swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v20, -1, -1);
              swift_slowDealloc(v19, -1, -1);
            }
            else
            {
              sub_1002EAB4C((uint64_t)&v31);
            }

            v35 = 0u;
            v36 = 0u;
            v37 = 0u;
            v5 = v14;
            v1 = v29;
          }
          sub_100004048((uint64_t)v38, (uint64_t *)&unk_101103AB0);
          if (*((_QWORD *)&v35 + 1))
          {
            v31 = v35;
            v32 = v36;
            v33 = v37;
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
              v7 = sub_1007C9260(0, v7[2] + 1, 1, v7);
            v24 = v7[2];
            v23 = v7[3];
            if (v24 >= v23 >> 1)
              v7 = sub_1007C9260((_QWORD *)(v23 > 1), v24 + 1, 1, v7);
            v7[2] = v24 + 1;
            v25 = &v7[6 * v24];
            v26 = v31;
            v27 = v33;
            v25[3] = v32;
            v25[4] = v27;
            v25[2] = v26;
            if (!v4)
              goto LABEL_6;
          }
          else
          {
            sub_100004048((uint64_t)&v35, (uint64_t *)&unk_1010F6380);
            if (!v4)
              goto LABEL_6;
          }
LABEL_36:
          v28 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v11 = v9 + 4;
      if (v11 < v44)
      {
        v10 = *(_QWORD *)(v30 + 8 * v11);
        if (v10)
        {
          v6 = v11;
          goto LABEL_21;
        }
        while (1)
        {
          v6 = v11 + 1;
          if (__OFADD__(v11, 1))
            goto LABEL_39;
          if (v6 >= v44)
            break;
          v10 = *(_QWORD *)(v30 + 8 * v6);
          ++v11;
          if (v10)
            goto LABEL_21;
        }
      }
    }
LABEL_37:
    swift_release();
    return;
  }
  __break(1u);
LABEL_39:
  __break(1u);
}

void sub_1002E6680(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  char *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  char **v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char **v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  char **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  char **v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  char *v73;
  id v74;
  uint64_t v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  char **v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  char **v90;
  char *v91;
  uint64_t v92;
  char *v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t ObjectType;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t);
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;

  v114 = a3;
  v115 = a4;
  v116 = a1;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F6360);
  __chkstk_darwin(v12);
  v14 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MessagingMessageContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7EC8);
    v116 = v7;
    v34 = Logger.logObject.getter(v116);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v117 = (unint64_t)v116;
      v38 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v36 + 4, v36 + 12);
      *v37 = v116;

      _os_log_impl((void *)&_mh_execute_header, v34, v35, "MessagingServiceDelegateTrampoline: No delegate for %@", v36, 0xCu);
      v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      return;
    }

    goto LABEL_47;
  }
  if (v116)
  {
    if (a2)
    {
      if (v115 >> 60 == 15)
      {
        v21 = Strong;
        v22 = qword_1010EA3C8;
        v23 = v116;
        v116 = a2;
        if (v22 != -1)
          swift_once(&qword_1010EA3C8, sub_100BECC74);
        v24 = type metadata accessor for Logger(0);
        sub_10001A9E8(v24, (uint64_t)qword_1011B7EC8);
        v25 = v7;
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.error.getter(v26);
        if (os_log_type_enabled(v26, v27))
        {
          v28 = swift_slowAlloc(12, -1);
          v115 = (unint64_t)v23;
          v29 = (uint8_t *)v28;
          v30 = (char **)swift_slowAlloc(8, -1);
          *(_DWORD *)v29 = 138412290;
          v117 = (unint64_t)v25;
          v31 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v29 + 4, v29 + 12);
          *v30 = v25;

          _os_log_impl((void *)&_mh_execute_header, v26, v27, "MessagingServiceDelegateTrampoline: No data for %@", v29, 0xCu);
          v32 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v30, 1, v32);
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v29, -1, -1);

          swift_unknownObjectRelease(v21);
          return;
        }

        swift_unknownObjectRelease(v21);
        goto LABEL_47;
      }
      v113 = Strong;
      if (a6)
      {
        v111 = *((_QWORD *)v19 + 1);
        v112 = v116;
        v59 = a2;
        sub_10001BD08(v114, v115);
        swift_bridgeObjectRetain(a6);
        v60 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(a5, a6);
        if (v62)
        {
          v63 = v62;
          if (a7)
          {
            v109 = v61;
            v110 = v60;
            v116 = v59;
            v64 = qword_1010EA3D0;
            v65 = a7;
            v66 = v65;
            if (v64 != -1)
              v65 = (id)swift_once(&qword_1010EA3D0, sub_100BECCEC);
            v67 = qword_1011B7EE0;
            __chkstk_darwin(v65);
            v105 = (uint64_t)v112;
            v68 = sub_10001A9A8(&qword_1010F6350);
            OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, &v104, v67, &type metadata for () + 1, v68);
            if (v118)
              v69 = v117;
            else
              v69 = 0xD000000000000011;
            if (v118)
              v70 = v118;
            else
              v70 = 0x8000000100ED00E0;
            v71 = v66;
            sub_100B65DA8(v71, (uint64_t)v14);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
            {

              sub_10001EF3C(v114, v115);
              swift_unknownObjectRelease(v113);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F6360);
            }
            else
            {
              v107 = v69;
              v108 = v70;
              sub_1002EAACC((uint64_t)v14, (uint64_t)v18);
              v93 = v116;
              v94 = objc_msgSend(v93, "uniqueID");
              if (v94)
              {
                v95 = v94;
                v96 = v113;
                ObjectType = swift_getObjectType(v113);
                v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
                v100 = v99;

                v101 = *(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v111 + 24);
                v105 = ObjectType;
                v103 = v114;
                v102 = v115;
                v101(v107, v108, v98, v100, v114, v115, v110, v109, v63, v18, v105, v111);
                sub_10001EF3C(v103, v102);
                swift_bridgeObjectRelease();

                swift_unknownObjectRelease(v96);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                sub_1002EAB10((uint64_t)v18);
              }
              else
              {
                __break(1u);
              }
            }
            return;
          }
          v84 = v59;
          swift_bridgeObjectRelease();
          if (qword_1010EA3C8 != -1)
            swift_once(&qword_1010EA3C8, sub_100BECC74);
          v85 = type metadata accessor for Logger(0);
          sub_10001A9E8(v85, (uint64_t)qword_1011B7EC8);
          v86 = v7;
          v87 = Logger.logObject.getter(v86);
          v88 = static os_log_type_t.error.getter(v87);
          if (!os_log_type_enabled(v87, v88))
          {

            sub_10001EF3C(v114, v115);
            swift_unknownObjectRelease(v113);

            return;
          }
          v89 = (uint8_t *)swift_slowAlloc(12, -1);
          v90 = (char **)swift_slowAlloc(8, -1);
          *(_DWORD *)v89 = 138412290;
          v117 = (unint64_t)v86;
          v91 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v89 + 4, v89 + 12);
          *v90 = v86;

          _os_log_impl((void *)&_mh_execute_header, v87, v88, "MessagingServiceDelegateTrampoline: No context for %@", v89, 0xCu);
          v92 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v90, 1, v92);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v89, -1, -1);
          sub_10001EF3C(v114, v115);

          swift_unknownObjectRelease(v113);
          v83 = v112;
LABEL_44:

          return;
        }
      }
      else
      {
        v73 = v116;
        v74 = a2;
        sub_10001BD08(v114, v115);
      }
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v75 = type metadata accessor for Logger(0);
      sub_10001A9E8(v75, (uint64_t)qword_1011B7EC8);
      v76 = v7;
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = (char **)swift_slowAlloc(8, -1);
        *(_DWORD *)v79 = 138412290;
        v117 = (unint64_t)v76;
        v81 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v79 + 4, v79 + 12);
        *v80 = v76;

        _os_log_impl((void *)&_mh_execute_header, v77, v78, "MessagingServiceDelegateTrampoline: No fromID for %@", v79, 0xCu);
        v82 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v80, 1, v82);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);
        sub_10001EF3C(v114, v115);

        swift_unknownObjectRelease(v113);
        goto LABEL_43;
      }

      sub_10001EF3C(v114, v115);
      v72 = v113;
    }
    else
    {
      v49 = Strong;
      v50 = qword_1010EA3C8;
      v116 = v116;
      if (v50 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v51 = type metadata accessor for Logger(0);
      sub_10001A9E8(v51, (uint64_t)qword_1011B7EC8);
      v52 = v7;
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = (char **)swift_slowAlloc(8, -1);
        *(_DWORD *)v55 = 138412290;
        v117 = (unint64_t)v52;
        v57 = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v55 + 4, v55 + 12);
        *v56 = v52;

        _os_log_impl((void *)&_mh_execute_header, v53, v54, "MessagingServiceDelegateTrampoline: No account for %@", v55, 0xCu);
        v58 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v56, 1, v58);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v55, -1, -1);
        swift_unknownObjectRelease(v49);

LABEL_43:
        v83 = v116;
        goto LABEL_44;
      }

      v72 = v49;
    }
    swift_unknownObjectRelease(v72);
LABEL_47:

    return;
  }
  v40 = Strong;
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v41 = type metadata accessor for Logger(0);
  sub_10001A9E8(v41, (uint64_t)qword_1011B7EC8);
  v42 = v7;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.error.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v45 = 138412290;
    v117 = (unint64_t)v42;
    v47 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v45 + 4, v45 + 12);
    *v46 = v42;

    _os_log_impl((void *)&_mh_execute_header, v43, v44, "MessagingServiceDelegateTrampoline: No service for %@", v45, 0xCu);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v46, 1, v48);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
    swift_unknownObjectRelease(v40);

  }
  else
  {

    swift_unknownObjectRelease(v40);
  }
}

void sub_1002E7424(unint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  char *v7;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t Strong;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  char **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  char **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  os_log_type_t v44;
  uint8_t *v45;
  char **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char **v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *);
  char *v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  id v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  id v91;
  id v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t ObjectType;
  uint64_t v112;
  char *v113;
  _QWORD v114[3];
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;

  v120 = a4;
  v121 = (id)a6;
  v118 = a5;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F6360);
  __chkstk_darwin(v12);
  v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MessagingMessageContext(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v119 = (uint64_t)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v18);
  v20 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (char *)type metadata accessor for URL(0);
  v124 = *((_QWORD *)v21 - 1);
  v125 = v21;
  __chkstk_darwin(v21);
  v123 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B7EC8);
    v125 = v7;
    v27 = Logger.logObject.getter(v125);
    v37 = static os_log_type_t.error.getter(v27);
    if (!os_log_type_enabled(v27, v37))
    {

      return;
    }
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v38 = 138412290;
    v126 = (unint64_t)v125;
    v40 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v38 + 4, v38 + 12);
    *v39 = v125;

    _os_log_impl((void *)&_mh_execute_header, v27, v37, "MessagingServiceDelegateTrampoline: No delegate for %@", v38, 0xCu);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v39, 1, v41);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
    goto LABEL_34;
  }
  v122 = Strong;
  if (!a2)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v42 = type metadata accessor for Logger(0);
    sub_10001A9E8(v42, (uint64_t)qword_1011B7EC8);
    v43 = v7;
    v27 = Logger.logObject.getter(v43);
    v44 = static os_log_type_t.error.getter(v27);
    if (!os_log_type_enabled(v27, v44))
    {

      swift_unknownObjectRelease(v122);
      return;
    }
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v45 = 138412290;
    v126 = (unint64_t)v43;
    v47 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v45 + 4, v45 + 12);
    *v46 = v43;

    _os_log_impl((void *)&_mh_execute_header, v27, v44, "MessagingServiceDelegateTrampoline: No account for %@", v45, 0xCu);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v46, 1, v48);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
    goto LABEL_33;
  }
  v117 = *((_QWORD *)v23 + 1);
  sub_100027D68(a3, (uint64_t)v20);
  v26 = v124;
  v25 = v125;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v124 + 48))(v20, 1, v125) == 1)
  {
    v27 = a2;
    sub_100004048((uint64_t)v20, &qword_1010FBA40);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7EC8);
    v29 = v7;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v32 = 138412290;
      v126 = (unint64_t)v29;
      v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v32 + 4, v32 + 12);
      *v33 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "MessagingServiceDelegateTrampoline: No resourceURL for %@", v32, 0xCu);
      v35 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v33, 1, v35);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      swift_unknownObjectRelease(v122);
      return;
    }

LABEL_33:
    swift_unknownObjectRelease(v122);
LABEL_34:

    return;
  }
  (*(void (**)(char *, char *, char *))(v26 + 32))(v123, v20, v25);
  v49 = (uint64_t)v121;
  if (!v121)
  {
    v59 = qword_1010EA3C8;
    v60 = a2;
    if (v59 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v61 = type metadata accessor for Logger(0);
    sub_10001A9E8(v61, (uint64_t)qword_1011B7EC8);
    v62 = v7;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v65 = 138412290;
      v126 = (unint64_t)v62;
      v67 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v65 + 4, v65 + 12);
      *v66 = v62;

      v68 = "MessagingServiceDelegateTrampoline: No fromID for %@";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v63, v64, v68, v65, 0xCu);
      v72 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v66, 1, v72);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);
LABEL_45:
      v73 = v124;

      swift_unknownObjectRelease(v122);
      v74 = *(void (**)(char *, char *))(v73 + 8);
      v75 = v123;
LABEL_46:
      v74(v75, v125);
      return;
    }
LABEL_44:

    goto LABEL_45;
  }
  if (!a7)
  {
    v69 = qword_1010EA3C8;
    v60 = a2;
    if (v69 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v70 = type metadata accessor for Logger(0);
    sub_10001A9E8(v70, (uint64_t)qword_1011B7EC8);
    v62 = v7;
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v65 = 138412290;
      v126 = (unint64_t)v62;
      v71 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v65 + 4, v65 + 12);
      *v66 = v62;

      v68 = "MessagingServiceDelegateTrampoline: No context for %@";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  if (v120)
  {
    if (a1)
    {
      v50 = qword_1010EA3D0;
      v51 = a2;
      v52 = a7;
      swift_bridgeObjectRetain(v49);
      if (v50 != -1)
        v53 = swift_once(&qword_1010EA3D0, sub_100BECCEC);
      v54 = qword_1011B7EE0;
      __chkstk_darwin(v53);
      v114[2] = a1;
      v55 = sub_10001A9A8(&qword_1010F6350);
      a1 = 0;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, v114, v54, &type metadata for () + 1, v55);
      if (v127)
        v56 = v126;
      else
        v56 = 0xD000000000000011;
      if (v127)
        v57 = v127;
      else
        v57 = 0x8000000100ED00E0;
      v58 = v52;
      sub_100B65DA8(v58, (uint64_t)v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        (*(void (**)(char *, char *))(v124 + 8))(v123, v125);
        swift_unknownObjectRelease(v122);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F6360);
        return;
      }
      v116 = v56;
      v90 = v119;
      sub_1002EAACC((uint64_t)v14, v119);
      v91 = v51;
      v92 = objc_msgSend(v91, "uniqueID");
      if (v92)
      {
        v93 = v92;
        v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
        v96 = v95;

        sub_1002E61FC((uint64_t)v120);
        v98 = v97;
        v99 = *(_QWORD *)(v97 + 16);
        if (v99)
        {
          sub_10001A9A8((uint64_t *)&unk_1010F6370);
          v100 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v99);
        }
        else
        {
          v100 = _swiftEmptyDictionarySingleton;
        }
        v120 = v58;
        v126 = (unint64_t)v100;
        swift_bridgeObjectRetain(v98);
        sub_100698C54(v103, 1, &v126);
        swift_bridgeObjectRelease();
        a1 = v126;
        v104 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v118, (uint64_t)v121);
        if (v106)
        {
          v107 = v104;
          v108 = v105;
          v109 = v106;
          v110 = v122;
          ObjectType = swift_getObjectType(v122);
          v112 = v94;
          v113 = v123;
          (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 32))(v116, v57, v112, v96, v123, a1, v107, v108, v109, v90, ObjectType, v117);
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease(v110);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          sub_1002EAB10(v90);
          v74 = *(void (**)(char *, char *))(v124 + 8);
          v75 = v113;
          goto LABEL_46;
        }
        goto LABEL_61;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_61:
    __break(1u);
    swift_unexpectedError(a1, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
    return;
  }
  v76 = qword_1010EA3C8;
  v77 = a2;
  v78 = a7;
  if (v76 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v79 = type metadata accessor for Logger(0);
  sub_10001A9E8(v79, (uint64_t)qword_1011B7EC8);
  v80 = v7;
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.error.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(12, -1);
    v84 = swift_slowAlloc(8, -1);
    v121 = v78;
    v85 = v77;
    v86 = (_QWORD *)v84;
    *(_DWORD *)v83 = 138412290;
    v126 = (unint64_t)v80;
    v87 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, &v127, v83 + 4, v83 + 12);
    *v86 = v80;

    _os_log_impl((void *)&_mh_execute_header, v81, v82, "MessagingServiceDelegateTrampoline: No metadata for %@", v83, 0xCu);
    v88 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v86, 1, v88);
    v89 = v86;
    v77 = v85;
    v78 = v121;
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v83, -1, -1);
  }
  else
  {

  }
  v102 = v124;
  v101 = v125;

  swift_unknownObjectRelease(v122);
  (*(void (**)(char *, char *))(v102 + 8))(v123, v101);
}

void sub_1002E82CC(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, int a5, char *a6)
{
  char *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t Strong;
  id v20;
  uint64_t v21;
  char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  char **v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char **v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  os_log_type_t v51;
  uint8_t *v52;
  char **v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  id v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t ObjectType;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v75 = a6;
  v74 = a5;
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7EC8);
    v75 = v6;
    v33 = Logger.logObject.getter(v75);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      v76 = (unint64_t)v75;
      v37 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v35 + 4, v35 + 12);
      *v36 = v75;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "MessagingServiceDelegateTrampoline: No delegate for %@", v35, 0xCu);
      v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      return;
    }

LABEL_34:
    return;
  }
  if (!a2)
  {
    v39 = Strong;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7EC8);
    v41 = v6;
    v24 = Logger.logObject.getter(v41);
    v42 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v43 = 138412290;
      v76 = (unint64_t)v41;
      v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v43 + 4, v43 + 12);
      *v44 = v41;

      _os_log_impl((void *)&_mh_execute_header, v24, v42, "MessagingServiceDelegateTrampoline: No account for %@", v43, 0xCu);
      v46 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v44, 1, v46);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
      v47 = v39;
LABEL_23:
      swift_unknownObjectRelease(v47);

      return;
    }

    swift_unknownObjectRelease(v39);
    return;
  }
  v73 = Strong;
  if (!a4)
  {
    v48 = qword_1010EA3C8;
    v75 = a2;
    if (v48 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v49 = type metadata accessor for Logger(0);
    sub_10001A9E8(v49, (uint64_t)qword_1011B7EC8);
    v50 = v6;
    v24 = Logger.logObject.getter(v50);
    v51 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v76 = (unint64_t)v50;
      v54 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v52 + 4, v52 + 12);
      *v53 = v50;

      _os_log_impl((void *)&_mh_execute_header, v24, v51, "MessagingServiceDelegateTrampoline: No identifier for %@", v52, 0xCu);
      v55 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v53, 1, v55);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      goto LABEL_22;
    }

    swift_unknownObjectRelease(v73);
    goto LABEL_34;
  }
  v72 = *((_QWORD *)v18 + 1);
  v20 = a2;
  swift_bridgeObjectRetain(a4);
  UUID.init(uuidString:)(a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    swift_bridgeObjectRelease();
    v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (a1)
    {
      if (qword_1010EA3D0 != -1)
        v56 = swift_once(&qword_1010EA3D0, sub_100BECCEC);
      v57 = qword_1011B7EE0;
      __chkstk_darwin(v56);
      v69 = a1;
      v58 = sub_10001A9A8(&qword_1010F6350);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, &v70 - 4, v57, &type metadata for () + 1, v58);
      v59 = v76;
      v60 = v77;
      v61 = v20;
      v62 = objc_msgSend(v61, "uniqueID");
      if (v62)
      {
        v63 = v62;
        if (v60)
        {
          v64 = v59;
        }
        else
        {
          v60 = 0x8000000100ED00E0;
          v64 = 0xD000000000000011;
        }
        v65 = v73;
        ObjectType = swift_getObjectType(v73);
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v68 = v67;

        (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, _QWORD, char *, uint64_t, uint64_t))(v72 + 8))(v64, v60, v66, v68, v17, v74 & 1, v75, ObjectType, v72);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease(v65);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  sub_100004048((uint64_t)v13, &qword_1010ED860);
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B7EC8);
  v22 = v6;
  swift_bridgeObjectRetain(a4);
  v23 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v75 = (char *)v20;
    v27 = v26;
    v28 = (char **)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v76 = v29;
    *(_DWORD *)v27 = 136315394;
    swift_bridgeObjectRetain(a4);
    v78 = sub_100016940(a3, a4, (uint64_t *)&v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v27 + 12) = 2112;
    v78 = (uint64_t)v23;
    v30 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 14, v27 + 22);
    *v28 = v23;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@", (uint8_t *)v27, 0x16u);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v28, 1, v31);
    swift_slowDealloc(v28, -1, -1);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v27, -1, -1);

LABEL_22:
    v47 = v73;
    goto LABEL_23;
  }

  swift_bridgeObjectRelease_n(a4, 2);
  swift_unknownObjectRelease(v73);

}

void sub_1002E8CC8(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  char **v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char **v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char **v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  os_log_type_t v51;
  uint8_t *v52;
  char **v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ObjectType;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v96 = a5;
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v97 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate]);
  if (!Strong)
  {
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7EC8);
    v97 = v6;
    v33 = Logger.logObject.getter(v97);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      v98 = (unint64_t)v97;
      v37 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v35 + 4, v35 + 12);
      *v36 = v97;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "MessagingServiceDelegateTrampoline: No delegate for %@", v35, 0xCu);
      v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      return;
    }

LABEL_38:
    return;
  }
  if (!a2)
  {
    v39 = Strong;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7EC8);
    v41 = v6;
    v24 = Logger.logObject.getter(v41);
    v42 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v43 = 138412290;
      v98 = (unint64_t)v41;
      v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v43 + 4, v43 + 12);
      *v44 = v41;

      _os_log_impl((void *)&_mh_execute_header, v24, v42, "MessagingServiceDelegateTrampoline: No account for %@", v43, 0xCu);
      v46 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v44, 1, v46);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
      v47 = v39;
LABEL_23:
      swift_unknownObjectRelease(v47);

      return;
    }

    swift_unknownObjectRelease(v39);
    return;
  }
  v95 = Strong;
  if (!a4)
  {
    v48 = qword_1010EA3C8;
    v97 = a2;
    if (v48 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v49 = type metadata accessor for Logger(0);
    sub_10001A9E8(v49, (uint64_t)qword_1011B7EC8);
    v50 = v6;
    v24 = Logger.logObject.getter(v50);
    v51 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (char **)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v98 = (unint64_t)v50;
      v54 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v52 + 4, v52 + 12);
      *v53 = v50;

      _os_log_impl((void *)&_mh_execute_header, v24, v51, "MessagingServiceDelegateTrampoline: No identifier for %@", v52, 0xCu);
      v55 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v53, 1, v55);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      goto LABEL_22;
    }

    swift_unknownObjectRelease(v95);
    goto LABEL_38;
  }
  v94 = *((_QWORD *)v18 + 1);
  v20 = a2;
  swift_bridgeObjectRetain(a4);
  UUID.init(uuidString:)(a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010ED860);
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7EC8);
    v22 = v6;
    swift_bridgeObjectRetain(a4);
    v23 = v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = (char **)swift_slowAlloc(8, -1);
      v28 = swift_slowAlloc(32, -1);
      v97 = v20;
      v29 = v28;
      v98 = v28;
      *(_DWORD *)v26 = 136315394;
      swift_bridgeObjectRetain(a4);
      v100 = sub_100016940(a3, a4, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v26 + 12) = 2112;
      v100 = (uint64_t)v23;
      v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v26 + 14, v26 + 22);
      *v27 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@", (uint8_t *)v26, 0x16u);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v27, 1, v31);
      swift_slowDealloc(v27, -1, -1);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v26, -1, -1);

LABEL_22:
      v47 = v95;
      goto LABEL_23;
    }

    swift_bridgeObjectRelease_n(a4, 2);
    swift_unknownObjectRelease(v95);

    return;
  }
  swift_bridgeObjectRelease();
  v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(v97, v14, v15);
  if (!a6)
  {
    v80 = IDSCopyLocalDeviceUniqueID(v56);
    if (!v80)
    {
LABEL_43:
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v86 = type metadata accessor for Logger(0);
      v87 = sub_10001A9E8(v86, (uint64_t)qword_1011B7EC8);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.error.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!", v90, 2u);
        swift_slowDealloc(v90, -1, -1);
      }

      swift_unknownObjectRelease(v95);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v97, v15);
      return;
    }
    v81 = (void *)v80;
    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
    v84 = v83;

    v98 = 0x3A656369766564;
    v99 = 0xE700000000000000;
    v85._countAndFlagsBits = v82;
    v85._object = v84;
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    v57 = v99;
    v96 = v98;
    if (a1)
      goto LABEL_26;
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v57 = a6;
  if (!a1)
    goto LABEL_42;
LABEL_26:
  v58 = qword_1010EA3D0;
  swift_bridgeObjectRetain(a6);
  if (v58 != -1)
    v59 = swift_once(&qword_1010EA3D0, sub_100BECCEC);
  v60 = qword_1011B7EE0;
  __chkstk_darwin(v59);
  v91 = a1;
  v61 = sub_10001A9A8(&qword_1010F6350);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1002EB2FC, &v92 - 4, v60, &type metadata for () + 1, v61);
  v62 = v98;
  if (!v99)
    v62 = 0xD000000000000011;
  v93 = v62;
  if (v99)
    v63 = v99;
  else
    v63 = 0x8000000100ED00E0;
  v64 = v20;
  v65 = objc_msgSend(v64, "uniqueID");
  if (v65)
  {
    v66 = v65;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
    v69 = v68;

    v70 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v96, v57);
    if (v72)
    {
      v73 = v70;
      v74 = v71;
      v75 = v72;
      v76 = v95;
      ObjectType = swift_getObjectType(v95);
      v78 = v63;
      v79 = v97;
      (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 16))(v93, v78, v67, v69, v97, v73, v74, v75, ObjectType, v94);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v79, v15);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

